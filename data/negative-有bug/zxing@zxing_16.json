{
  "id" : 16,
  "expression" : "context",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/datamatrix/encoder/HighLevelEncoder.java",
  "occurrences" : 22,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 173,
      "startColumnNumber" : 4,
      "endLineNumber" : 173,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 33
      },
      "nodeContext" : "context.setSymbolShape(shape)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 34
      },
      "nodeContext" : "context.setSymbolShape(shape);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 34
      },
      "nodeContext" : "context.setSymbolShape(shape);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 174,
      "startColumnNumber" : 4,
      "endLineNumber" : 174,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 48
      },
      "nodeContext" : "context.setSizeConstraints(minSize,maxSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 49
      },
      "nodeContext" : "context.setSizeConstraints(minSize,maxSize);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 49
      },
      "nodeContext" : "context.setSizeConstraints(minSize,maxSize);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 177,
      "startColumnNumber" : 6,
      "endLineNumber" : 177,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 37
      },
      "nodeContext" : "context.writeCodeword(MACRO_05)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword(MACRO_05);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 176,
        "startColumnNumber" : 72,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword(MACRO_05);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 178,
      "startColumnNumber" : 6,
      "endLineNumber" : 178,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 29
      },
      "nodeContext" : "context.setSkipAtEnd(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 30
      },
      "nodeContext" : "context.setSkipAtEnd(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 176,
        "startColumnNumber" : 72,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 30
      },
      "nodeContext" : "context.setSkipAtEnd(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 179,
      "startColumnNumber" : 6,
      "endLineNumber" : 179,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 17
      },
      "nodeContext" : "context.pos",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 45
      },
      "nodeContext" : "context.pos+=MACRO_05_HEADER.length()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 46
      },
      "nodeContext" : "context.pos+=MACRO_05_HEADER.length();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 176,
        "startColumnNumber" : 72,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 46
      },
      "nodeContext" : "context.pos+=MACRO_05_HEADER.length();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 181,
      "startColumnNumber" : 6,
      "endLineNumber" : 181,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 181,
        "startColumnNumber" : 6,
        "endLineNumber" : 181,
        "endColumnNumber" : 37
      },
      "nodeContext" : "context.writeCodeword(MACRO_06)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 181,
        "startColumnNumber" : 6,
        "endLineNumber" : 181,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword(MACRO_06);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 180,
        "startColumnNumber" : 79,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 181,
        "startColumnNumber" : 6,
        "endLineNumber" : 181,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword(MACRO_06);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 182,
      "startColumnNumber" : 6,
      "endLineNumber" : 182,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 29
      },
      "nodeContext" : "context.setSkipAtEnd(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 30
      },
      "nodeContext" : "context.setSkipAtEnd(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 180,
        "startColumnNumber" : 79,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 30
      },
      "nodeContext" : "context.setSkipAtEnd(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 183,
      "startColumnNumber" : 6,
      "endLineNumber" : 183,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 17
      },
      "nodeContext" : "context.pos",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 45
      },
      "nodeContext" : "context.pos+=MACRO_06_HEADER.length()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 46
      },
      "nodeContext" : "context.pos+=MACRO_06_HEADER.length();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 180,
        "startColumnNumber" : 79,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 180,
        "startColumnNumber" : 11,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 176,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_05);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_05_HEADER.length();\n}\n else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n  context.writeCodeword(MACRO_06);\n  context.setSkipAtEnd(2);\n  context.pos+=MACRO_06_HEADER.length();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 46
      },
      "nodeContext" : "context.pos+=MACRO_06_HEADER.length();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 189,
      "startColumnNumber" : 31,
      "endLineNumber" : 189,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 189,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 39
      },
      "nodeContext" : "c40Encoder.encodeMaximal(context)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 189,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 40
      },
      "nodeContext" : "c40Encoder.encodeMaximal(context);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 188,
        "startColumnNumber" : 18,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (forceC40) {\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 189,
        "startColumnNumber" : 6,
        "endLineNumber" : 189,
        "endColumnNumber" : 40
      },
      "nodeContext" : "c40Encoder.encodeMaximal(context);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 190,
      "startColumnNumber" : 21,
      "endLineNumber" : 190,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 190,
        "startColumnNumber" : 21,
        "endLineNumber" : 190,
        "endColumnNumber" : 45
      },
      "nodeContext" : "context.getNewEncoding()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 190,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 45
      },
      "nodeContext" : "encodingMode=context.getNewEncoding()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 190,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 46
      },
      "nodeContext" : "encodingMode=context.getNewEncoding();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 188,
        "startColumnNumber" : 18,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (forceC40) {\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 190,
        "startColumnNumber" : 6,
        "endLineNumber" : 190,
        "endColumnNumber" : 46
      },
      "nodeContext" : "encodingMode=context.getNewEncoding();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 191,
      "startColumnNumber" : 6,
      "endLineNumber" : 191,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 191,
        "startColumnNumber" : 6,
        "endLineNumber" : 191,
        "endColumnNumber" : 34
      },
      "nodeContext" : "context.resetEncoderSignal()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 191,
        "startColumnNumber" : 6,
        "endLineNumber" : 191,
        "endColumnNumber" : 35
      },
      "nodeContext" : "context.resetEncoderSignal();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 188,
        "startColumnNumber" : 18,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (forceC40) {\n  c40Encoder.encodeMaximal(context);\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 191,
        "startColumnNumber" : 6,
        "endLineNumber" : 191,
        "endColumnNumber" : 35
      },
      "nodeContext" : "context.resetEncoderSignal();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 194,
      "startColumnNumber" : 11,
      "endLineNumber" : 194,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 194,
        "startColumnNumber" : 11,
        "endLineNumber" : 194,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.hasMoreCharacters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (context.hasMoreCharacters()) {\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 194,
        "startColumnNumber" : 11,
        "endLineNumber" : 194,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.hasMoreCharacters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 195,
      "startColumnNumber" : 36,
      "endLineNumber" : 195,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 195,
        "startColumnNumber" : 6,
        "endLineNumber" : 195,
        "endColumnNumber" : 44
      },
      "nodeContext" : "encoders[encodingMode].encode(context)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 195,
        "startColumnNumber" : 6,
        "endLineNumber" : 195,
        "endColumnNumber" : 45
      },
      "nodeContext" : "encoders[encodingMode].encode(context);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (context.hasMoreCharacters()) {\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 195,
        "startColumnNumber" : 6,
        "endLineNumber" : 195,
        "endColumnNumber" : 45
      },
      "nodeContext" : "encoders[encodingMode].encode(context);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 196,
      "startColumnNumber" : 10,
      "endLineNumber" : 196,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 34
      },
      "nodeContext" : "context.getNewEncoding()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 39
      },
      "nodeContext" : "context.getNewEncoding() >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 199,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (context.getNewEncoding() >= 0) {\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (context.hasMoreCharacters()) {\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 39
      },
      "nodeContext" : "context.getNewEncoding() >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 197,
      "startColumnNumber" : 23,
      "endLineNumber" : 197,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 197,
        "startColumnNumber" : 23,
        "endLineNumber" : 197,
        "endColumnNumber" : 47
      },
      "nodeContext" : "context.getNewEncoding()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 47
      },
      "nodeContext" : "encodingMode=context.getNewEncoding()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 48
      },
      "nodeContext" : "encodingMode=context.getNewEncoding();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 196,
        "startColumnNumber" : 41,
        "endLineNumber" : 199,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 199,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (context.getNewEncoding() >= 0) {\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (context.hasMoreCharacters()) {\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 48
      },
      "nodeContext" : "encodingMode=context.getNewEncoding();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 198,
      "startColumnNumber" : 8,
      "endLineNumber" : 198,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 36
      },
      "nodeContext" : "context.resetEncoderSignal()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 37
      },
      "nodeContext" : "context.resetEncoderSignal();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 196,
        "startColumnNumber" : 41,
        "endLineNumber" : 199,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 199,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (context.getNewEncoding() >= 0) {\n  encodingMode=context.getNewEncoding();\n  context.resetEncoderSignal();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (context.hasMoreCharacters()) {\n  encoders[encodingMode].encode(context);\n  if (context.getNewEncoding() >= 0) {\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 37
      },
      "nodeContext" : "context.resetEncoderSignal();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 201,
      "startColumnNumber" : 14,
      "endLineNumber" : 201,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 201,
        "startColumnNumber" : 14,
        "endLineNumber" : 201,
        "endColumnNumber" : 40
      },
      "nodeContext" : "context.getCodewordCount()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 201,
        "endColumnNumber" : 40
      },
      "nodeContext" : "len=context.getCodewordCount()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int len=context.getCodewordCount();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int len=context.getCodewordCount();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 202,
      "startColumnNumber" : 4,
      "endLineNumber" : 202,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 30
      },
      "nodeContext" : "context.updateSymbolInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 31
      },
      "nodeContext" : "context.updateSymbolInfo();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 31
      },
      "nodeContext" : "context.updateSymbolInfo();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 203,
      "startColumnNumber" : 19,
      "endLineNumber" : 203,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 203,
        "startColumnNumber" : 19,
        "endLineNumber" : 203,
        "endColumnNumber" : 42
      },
      "nodeContext" : "context.getSymbolInfo()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 203,
        "startColumnNumber" : 19,
        "endLineNumber" : 203,
        "endColumnNumber" : 60
      },
      "nodeContext" : "context.getSymbolInfo().getDataCapacity()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 203,
        "endColumnNumber" : 60
      },
      "nodeContext" : "capacity=context.getSymbolInfo().getDataCapacity()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 203,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 61
      },
      "nodeContext" : "int capacity=context.getSymbolInfo().getDataCapacity();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 203,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 61
      },
      "nodeContext" : "int capacity=context.getSymbolInfo().getDataCapacity();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 208,
      "startColumnNumber" : 6,
      "endLineNumber" : 208,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 37
      },
      "nodeContext" : "context.writeCodeword('\\u00fe')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword('\\u00fe');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 207,
        "startColumnNumber" : 44,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  context.writeCodeword('\\u00fe');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n  context.writeCodeword('\\u00fe');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 208,
        "endColumnNumber" : 38
      },
      "nodeContext" : "context.writeCodeword('\\u00fe');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 211,
      "startColumnNumber" : 30,
      "endLineNumber" : 211,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 211,
        "startColumnNumber" : 30,
        "endLineNumber" : 211,
        "endColumnNumber" : 52
      },
      "nodeContext" : "context.getCodewords()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 211,
        "startColumnNumber" : 18,
        "endLineNumber" : 211,
        "endColumnNumber" : 52
      },
      "nodeContext" : "codewords=context.getCodewords()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 53
      },
      "nodeContext" : "StringBuilder codewords=context.getCodewords();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 53
      },
      "nodeContext" : "StringBuilder codewords=context.getCodewords();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  }, {
    "nodeContext" : "context",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 219,
      "startColumnNumber" : 11,
      "endLineNumber" : 219,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 219,
        "startColumnNumber" : 11,
        "endLineNumber" : 219,
        "endColumnNumber" : 33
      },
      "nodeContext" : "context.getCodewords()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 219,
        "startColumnNumber" : 11,
        "endLineNumber" : 219,
        "endColumnNumber" : 44
      },
      "nodeContext" : "context.getCodewords().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return context.getCodewords().toString();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 164,
        "startColumnNumber" : 57,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2907,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Performs message encoding of a DataMatrix message using the algorithm described in annex P of ISO/IEC 16022:2000(E).\n * @param msg     the message\n * @param shape   requested shape. May be {@code SymbolShapeHint.FORCE_NONE}, {@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.\n * @param minSize the minimum symbol size constraint or null for no constraint\n * @param maxSize the maximum symbol size constraint or null for no constraint\n * @param forceC40 enforce C40 encoding\n * @return the encoded message (the char values range from 0 to 255)\n */\npublic static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize,boolean forceC40){\n  C40Encoder c40Encoder=new C40Encoder();\n  Encoder[] encoders={new ASCIIEncoder(),c40Encoder,new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};\n  EncoderContext context=new EncoderContext(msg);\n  context.setSymbolShape(shape);\n  context.setSizeConstraints(minSize,maxSize);\n  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_05);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_05_HEADER.length();\n  }\n else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {\n    context.writeCodeword(MACRO_06);\n    context.setSkipAtEnd(2);\n    context.pos+=MACRO_06_HEADER.length();\n  }\n  int encodingMode=ASCII_ENCODATION;\n  if (forceC40) {\n    c40Encoder.encodeMaximal(context);\n    encodingMode=context.getNewEncoding();\n    context.resetEncoderSignal();\n  }\n  while (context.hasMoreCharacters()) {\n    encoders[encodingMode].encode(context);\n    if (context.getNewEncoding() >= 0) {\n      encodingMode=context.getNewEncoding();\n      context.resetEncoderSignal();\n    }\n  }\n  int len=context.getCodewordCount();\n  context.updateSymbolInfo();\n  int capacity=context.getSymbolInfo().getDataCapacity();\n  if (len < capacity && encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION && encodingMode != EDIFACT_ENCODATION) {\n    context.writeCodeword('\\u00fe');\n  }\n  StringBuilder codewords=context.getCodewords();\n  if (codewords.length() < capacity) {\n    codewords.append(PAD);\n  }\n  while (codewords.length() < capacity) {\n    codewords.append(randomize253State(codewords.length() + 1));\n  }\n  return context.getCodewords().toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return context.getCodewords().toString();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.zxing.datamatrix.encoder.EncoderContext"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 173,
    "startColumnNumber" : 4,
    "endLineNumber" : 173,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 174,
    "startColumnNumber" : 4,
    "endLineNumber" : 174,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 177,
    "startColumnNumber" : 6,
    "endLineNumber" : 177,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 178,
    "startColumnNumber" : 6,
    "endLineNumber" : 178,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 179,
    "startColumnNumber" : 6,
    "endLineNumber" : 179,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 181,
    "startColumnNumber" : 6,
    "endLineNumber" : 181,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 182,
    "startColumnNumber" : 6,
    "endLineNumber" : 182,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 183,
    "startColumnNumber" : 6,
    "endLineNumber" : 183,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 189,
    "startColumnNumber" : 31,
    "endLineNumber" : 189,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 190,
    "startColumnNumber" : 21,
    "endLineNumber" : 190,
    "endColumnNumber" : 28
  }, {
    "charLength" : 7,
    "startLineNumber" : 191,
    "startColumnNumber" : 6,
    "endLineNumber" : 191,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 194,
    "startColumnNumber" : 11,
    "endLineNumber" : 194,
    "endColumnNumber" : 18
  }, {
    "charLength" : 7,
    "startLineNumber" : 195,
    "startColumnNumber" : 36,
    "endLineNumber" : 195,
    "endColumnNumber" : 43
  }, {
    "charLength" : 7,
    "startLineNumber" : 196,
    "startColumnNumber" : 10,
    "endLineNumber" : 196,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 197,
    "startColumnNumber" : 23,
    "endLineNumber" : 197,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 198,
    "startColumnNumber" : 8,
    "endLineNumber" : 198,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 201,
    "startColumnNumber" : 14,
    "endLineNumber" : 201,
    "endColumnNumber" : 21
  }, {
    "charLength" : 7,
    "startLineNumber" : 202,
    "startColumnNumber" : 4,
    "endLineNumber" : 202,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 203,
    "startColumnNumber" : 19,
    "endLineNumber" : 203,
    "endColumnNumber" : 26
  }, {
    "charLength" : 7,
    "startLineNumber" : 208,
    "startColumnNumber" : 6,
    "endLineNumber" : 208,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 211,
    "startColumnNumber" : 30,
    "endLineNumber" : 211,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 219,
    "startColumnNumber" : 11,
    "endLineNumber" : 219,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  } ]
}