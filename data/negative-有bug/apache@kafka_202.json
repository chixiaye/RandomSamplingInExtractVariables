{
  "id" : 202,
  "expression" : "pollTasks.poll()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/clients/consumer/MockConsumer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pollTasks.poll()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 176,
      "startColumnNumber" : 28,
      "endLineNumber" : 176,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 21,
        "endLineNumber" : 176,
        "endColumnNumber" : 44
      },
      "nodeContext" : "task=pollTasks.poll()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Runnable task=pollTasks.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 175,
        "startColumnNumber" : 33,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Runnable task=pollTasks.poll();\n  if (task != null)   task.run();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (pollTasks) {\n  Runnable task=pollTasks.poll();\n  if (task != null)   task.run();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2537,
        "startLineNumber" : 168,
        "startColumnNumber" : 75,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ensureNotClosed();\n  lastPollTimeout=timeout;\nsynchronized (pollTasks) {\n    Runnable task=pollTasks.poll();\n    if (task != null)     task.run();\n  }\n  if (wakeup.get()) {\n    wakeup.set(false);\n    throw new WakeupException();\n  }\n  if (pollException != null) {\n    RuntimeException exception=this.pollException;\n    this.pollException=null;\n    throw exception;\n  }\n  for (  TopicPartition tp : subscriptions.assignedPartitions())   if (!subscriptions.hasValidPosition(tp))   updateFetchPosition(tp);\n  final Map<TopicPartition,List<ConsumerRecord<K,V>>> results=new HashMap<>();\n  final List<TopicPartition> toClear=new ArrayList<>();\n  for (  Map.Entry<TopicPartition,List<ConsumerRecord<K,V>>> entry : this.records.entrySet()) {\n    if (!subscriptions.isPaused(entry.getKey())) {\n      final List<ConsumerRecord<K,V>> recs=entry.getValue();\n      for (      final ConsumerRecord<K,V> rec : recs) {\n        long position=subscriptions.position(entry.getKey()).offset;\n        if (beginningOffsets.get(entry.getKey()) != null && beginningOffsets.get(entry.getKey()) > position) {\n          throw new OffsetOutOfRangeException(Collections.singletonMap(entry.getKey(),position));\n        }\n        if (assignment().contains(entry.getKey()) && rec.offset() >= position) {\n          results.computeIfAbsent(entry.getKey(),partition -> new ArrayList<>()).add(rec);\n          Metadata.LeaderAndEpoch leaderAndEpoch=new Metadata.LeaderAndEpoch(Optional.empty(),rec.leaderEpoch());\n          SubscriptionState.FetchPosition newPosition=new SubscriptionState.FetchPosition(rec.offset() + 1,rec.leaderEpoch(),leaderAndEpoch);\n          subscriptions.position(entry.getKey(),newPosition);\n        }\n      }\n      toClear.add(entry.getKey());\n    }\n  }\n  toClear.forEach(p -> this.records.remove(p));\n  return new ConsumerRecords<>(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2622,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public synchronized ConsumerRecords<K,V> poll(final Duration timeout){\n  ensureNotClosed();\n  lastPollTimeout=timeout;\nsynchronized (pollTasks) {\n    Runnable task=pollTasks.poll();\n    if (task != null)     task.run();\n  }\n  if (wakeup.get()) {\n    wakeup.set(false);\n    throw new WakeupException();\n  }\n  if (pollException != null) {\n    RuntimeException exception=this.pollException;\n    this.pollException=null;\n    throw exception;\n  }\n  for (  TopicPartition tp : subscriptions.assignedPartitions())   if (!subscriptions.hasValidPosition(tp))   updateFetchPosition(tp);\n  final Map<TopicPartition,List<ConsumerRecord<K,V>>> results=new HashMap<>();\n  final List<TopicPartition> toClear=new ArrayList<>();\n  for (  Map.Entry<TopicPartition,List<ConsumerRecord<K,V>>> entry : this.records.entrySet()) {\n    if (!subscriptions.isPaused(entry.getKey())) {\n      final List<ConsumerRecord<K,V>> recs=entry.getValue();\n      for (      final ConsumerRecord<K,V> rec : recs) {\n        long position=subscriptions.position(entry.getKey()).offset;\n        if (beginningOffsets.get(entry.getKey()) != null && beginningOffsets.get(entry.getKey()) > position) {\n          throw new OffsetOutOfRangeException(Collections.singletonMap(entry.getKey(),position));\n        }\n        if (assignment().contains(entry.getKey()) && rec.offset() >= position) {\n          results.computeIfAbsent(entry.getKey(),partition -> new ArrayList<>()).add(rec);\n          Metadata.LeaderAndEpoch leaderAndEpoch=new Metadata.LeaderAndEpoch(Optional.empty(),rec.leaderEpoch());\n          SubscriptionState.FetchPosition newPosition=new SubscriptionState.FetchPosition(rec.offset() + 1,rec.leaderEpoch(),leaderAndEpoch);\n          subscriptions.position(entry.getKey(),newPosition);\n        }\n      }\n      toClear.add(entry.getKey());\n    }\n  }\n  toClear.forEach(p -> this.records.remove(p));\n  return new ConsumerRecords<>(results);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Runnable task=pollTasks.poll();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Runnable"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 176,
    "startColumnNumber" : 28,
    "endLineNumber" : 176,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}