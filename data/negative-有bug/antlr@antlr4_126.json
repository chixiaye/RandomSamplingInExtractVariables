{
  "id" : 126,
  "expression" : "\"grammar Data; \\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestParserExec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"grammar Data; \\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 143,
      "startColumnNumber" : 3,
      "endLineNumber" : 143,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 143,
        "startColumnNumber" : 3,
        "endLineNumber" : 155,
        "endColumnNumber" : 62
      },
      "nodeContext" : "\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 142,
        "startColumnNumber" : 9,
        "endLineNumber" : 155,
        "endColumnNumber" : 62
      },
      "nodeContext" : "grammar=\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 63
      },
      "nodeContext" : "String grammar=\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 141,
        "startColumnNumber" : 71,
        "endLineNumber" : 162,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String grammar=\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\";\n  String input=\"2 9 10 3 1 2 3\";\n  String found=execParser(\"Data.g4\",grammar,\"DataParser\",\"DataLexer\",null,null,\"file\",input,false);\n  assertEquals(\"6\\n\",found);\n  assertNull(getParseErrors());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 135,
        "startColumnNumber" : 1,
        "endLineNumber" : 162,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This is a regression test for antlr/antlr4#672 \"Initialization failed in locals\". https://github.com/antlr/antlr4/issues/672\n */\n@Test public void testAttributeValueInitialization() throws Exception {\n  String grammar=\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\";\n  String input=\"2 9 10 3 1 2 3\";\n  String found=execParser(\"Data.g4\",grammar,\"DataParser\",\"DataLexer\",null,null,\"file\",input,false);\n  assertEquals(\"6\\n\",found);\n  assertNull(getParseErrors());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 143,
        "startColumnNumber" : 3,
        "endLineNumber" : 155,
        "endColumnNumber" : 62
      },
      "nodeContext" : "\"grammar Data; \\n\" + \"\\n\" + \"file : group+ EOF; \\n\"+ \"\\n\"+ \"group: INT sequence {System.out.println($sequence.values.size());} ; \\n\"+ \"\\n\"+ \"sequence returns [List<Integer> values = new ArrayList<Integer>()] \\n\"+ \"  locals[List<Integer> localValues = new ArrayList<Integer>()]\\n\"+ \"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\\n\"+ \"; \\n\"+ \"\\n\"+ \"INT : [0-9]+ ; // match integers \\n\"+ \"WS : [ \\\\t\\\\n\\\\r]+ -> skip ; // toss out all whitespace\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 143,
    "startColumnNumber" : 3,
    "endLineNumber" : 143,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}