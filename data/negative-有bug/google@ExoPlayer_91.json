{
  "id" : 91,
  "expression" : "bitArray.readBit() ? 0 : maxSubLayersMinus1",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/H265Reader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bitArray.readBit() ? 0 : maxSubLayersMinus1",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 300,
      "startColumnNumber" : 17,
      "endLineNumber" : 300,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 300,
        "startColumnNumber" : 13,
        "endLineNumber" : 300,
        "endColumnNumber" : 60
      },
      "nodeContext" : "i=bitArray.readBit() ? 0 : maxSubLayersMinus1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 300,
        "startColumnNumber" : 9,
        "endLineNumber" : 300,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int i=bitArray.readBit() ? 0 : maxSubLayersMinus1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 300,
        "startColumnNumber" : 4,
        "endLineNumber" : 304,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=bitArray.readBit() ? 0 : maxSubLayersMinus1; i <= maxSubLayersMinus1; i++) {\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7681,
        "startLineNumber" : 238,
        "startColumnNumber" : 31,
        "endLineNumber" : 391,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] csdData=new byte[vps.nalLength + sps.nalLength + pps.nalLength];\n  System.arraycopy(vps.nalData,0,csdData,0,vps.nalLength);\n  System.arraycopy(sps.nalData,0,csdData,vps.nalLength,sps.nalLength);\n  System.arraycopy(pps.nalData,0,csdData,vps.nalLength + sps.nalLength,pps.nalLength);\n  ParsableNalUnitBitArray bitArray=new ParsableNalUnitBitArray(sps.nalData,0,sps.nalLength);\n  bitArray.skipBits(40 + 4);\n  int maxSubLayersMinus1=bitArray.readBits(3);\n  bitArray.skipBit();\n  int generalProfileSpace=bitArray.readBits(2);\n  boolean generalTierFlag=bitArray.readBit();\n  int generalProfileIdc=bitArray.readBits(5);\n  int generalProfileCompatibilityFlags=0;\n  for (int i=0; i < 32; i++) {\n    if (bitArray.readBit()) {\n      generalProfileCompatibilityFlags|=(1 << i);\n    }\n  }\n  int[] constraintBytes=new int[6];\n  for (int i=0; i < constraintBytes.length; ++i) {\n    constraintBytes[i]=bitArray.readBits(8);\n  }\n  int generalLevelIdc=bitArray.readBits(8);\n  int toSkip=0;\n  for (int i=0; i < maxSubLayersMinus1; i++) {\n    if (bitArray.readBit()) {\n      toSkip+=89;\n    }\n    if (bitArray.readBit()) {\n      toSkip+=8;\n    }\n  }\n  bitArray.skipBits(toSkip);\n  if (maxSubLayersMinus1 > 0) {\n    bitArray.skipBits(2 * (8 - maxSubLayersMinus1));\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  int chromaFormatIdc=bitArray.readUnsignedExpGolombCodedInt();\n  if (chromaFormatIdc == 3) {\n    bitArray.skipBit();\n  }\n  int picWidthInLumaSamples=bitArray.readUnsignedExpGolombCodedInt();\n  int picHeightInLumaSamples=bitArray.readUnsignedExpGolombCodedInt();\n  if (bitArray.readBit()) {\n    int confWinLeftOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinRightOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinTopOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinBottomOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int subWidthC=chromaFormatIdc == 1 || chromaFormatIdc == 2 ? 2 : 1;\n    int subHeightC=chromaFormatIdc == 1 ? 2 : 1;\n    picWidthInLumaSamples-=subWidthC * (confWinLeftOffset + confWinRightOffset);\n    picHeightInLumaSamples-=subHeightC * (confWinTopOffset + confWinBottomOffset);\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  int log2MaxPicOrderCntLsbMinus4=bitArray.readUnsignedExpGolombCodedInt();\n  for (int i=bitArray.readBit() ? 0 : maxSubLayersMinus1; i <= maxSubLayersMinus1; i++) {\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  boolean scalingListEnabled=bitArray.readBit();\n  if (scalingListEnabled && bitArray.readBit()) {\n    skipScalingList(bitArray);\n  }\n  bitArray.skipBits(2);\n  if (bitArray.readBit()) {\n    bitArray.skipBits(8);\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.skipBit();\n  }\n  skipShortTermRefPicSets(bitArray);\n  if (bitArray.readBit()) {\n    for (int i=0; i < bitArray.readUnsignedExpGolombCodedInt(); i++) {\n      int ltRefPicPocLsbSpsLength=log2MaxPicOrderCntLsbMinus4 + 4;\n      bitArray.skipBits(ltRefPicPocLsbSpsLength + 1);\n    }\n  }\n  bitArray.skipBits(2);\n  float pixelWidthHeightRatio=1;\n  if (bitArray.readBit()) {\n    if (bitArray.readBit()) {\n      int aspectRatioIdc=bitArray.readBits(8);\n      if (aspectRatioIdc == NalUnitUtil.EXTENDED_SAR) {\n        int sarWidth=bitArray.readBits(16);\n        int sarHeight=bitArray.readBits(16);\n        if (sarWidth != 0 && sarHeight != 0) {\n          pixelWidthHeightRatio=(float)sarWidth / sarHeight;\n        }\n      }\n else       if (aspectRatioIdc < NalUnitUtil.ASPECT_RATIO_IDC_VALUES.length) {\n        pixelWidthHeightRatio=NalUnitUtil.ASPECT_RATIO_IDC_VALUES[aspectRatioIdc];\n      }\n else {\n        Log.w(TAG,\"Unexpected aspect_ratio_idc value: \" + aspectRatioIdc);\n      }\n    }\n    if (bitArray.readBit()) {\n      bitArray.skipBit();\n    }\n    if (bitArray.readBit()) {\n      bitArray.skipBits(4);\n      if (bitArray.readBit()) {\n        bitArray.skipBits(24);\n      }\n    }\n    if (bitArray.readBit()) {\n      bitArray.readUnsignedExpGolombCodedInt();\n      bitArray.readUnsignedExpGolombCodedInt();\n    }\n    bitArray.skipBit();\n    if (bitArray.readBit()) {\n      picHeightInLumaSamples*=2;\n    }\n  }\n  String codecs=CodecSpecificDataUtil.buildHevcCodecString(generalProfileSpace,generalTierFlag,generalProfileIdc,generalProfileCompatibilityFlags,constraintBytes,generalLevelIdc);\n  return new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.VIDEO_H265).setCodecs(codecs).setWidth(picWidthInLumaSamples).setHeight(picHeightInLumaSamples).setPixelWidthHeightRatio(pixelWidthHeightRatio).setInitializationData(Collections.singletonList(csdData)).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 707,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7847,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 391,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static Format parseMediaFormat(@Nullable String formatId,NalUnitTargetBuffer vps,NalUnitTargetBuffer sps,NalUnitTargetBuffer pps){\n  byte[] csdData=new byte[vps.nalLength + sps.nalLength + pps.nalLength];\n  System.arraycopy(vps.nalData,0,csdData,0,vps.nalLength);\n  System.arraycopy(sps.nalData,0,csdData,vps.nalLength,sps.nalLength);\n  System.arraycopy(pps.nalData,0,csdData,vps.nalLength + sps.nalLength,pps.nalLength);\n  ParsableNalUnitBitArray bitArray=new ParsableNalUnitBitArray(sps.nalData,0,sps.nalLength);\n  bitArray.skipBits(40 + 4);\n  int maxSubLayersMinus1=bitArray.readBits(3);\n  bitArray.skipBit();\n  int generalProfileSpace=bitArray.readBits(2);\n  boolean generalTierFlag=bitArray.readBit();\n  int generalProfileIdc=bitArray.readBits(5);\n  int generalProfileCompatibilityFlags=0;\n  for (int i=0; i < 32; i++) {\n    if (bitArray.readBit()) {\n      generalProfileCompatibilityFlags|=(1 << i);\n    }\n  }\n  int[] constraintBytes=new int[6];\n  for (int i=0; i < constraintBytes.length; ++i) {\n    constraintBytes[i]=bitArray.readBits(8);\n  }\n  int generalLevelIdc=bitArray.readBits(8);\n  int toSkip=0;\n  for (int i=0; i < maxSubLayersMinus1; i++) {\n    if (bitArray.readBit()) {\n      toSkip+=89;\n    }\n    if (bitArray.readBit()) {\n      toSkip+=8;\n    }\n  }\n  bitArray.skipBits(toSkip);\n  if (maxSubLayersMinus1 > 0) {\n    bitArray.skipBits(2 * (8 - maxSubLayersMinus1));\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  int chromaFormatIdc=bitArray.readUnsignedExpGolombCodedInt();\n  if (chromaFormatIdc == 3) {\n    bitArray.skipBit();\n  }\n  int picWidthInLumaSamples=bitArray.readUnsignedExpGolombCodedInt();\n  int picHeightInLumaSamples=bitArray.readUnsignedExpGolombCodedInt();\n  if (bitArray.readBit()) {\n    int confWinLeftOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinRightOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinTopOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int confWinBottomOffset=bitArray.readUnsignedExpGolombCodedInt();\n    int subWidthC=chromaFormatIdc == 1 || chromaFormatIdc == 2 ? 2 : 1;\n    int subHeightC=chromaFormatIdc == 1 ? 2 : 1;\n    picWidthInLumaSamples-=subWidthC * (confWinLeftOffset + confWinRightOffset);\n    picHeightInLumaSamples-=subHeightC * (confWinTopOffset + confWinBottomOffset);\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  int log2MaxPicOrderCntLsbMinus4=bitArray.readUnsignedExpGolombCodedInt();\n  for (int i=bitArray.readBit() ? 0 : maxSubLayersMinus1; i <= maxSubLayersMinus1; i++) {\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n  }\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  bitArray.readUnsignedExpGolombCodedInt();\n  boolean scalingListEnabled=bitArray.readBit();\n  if (scalingListEnabled && bitArray.readBit()) {\n    skipScalingList(bitArray);\n  }\n  bitArray.skipBits(2);\n  if (bitArray.readBit()) {\n    bitArray.skipBits(8);\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.readUnsignedExpGolombCodedInt();\n    bitArray.skipBit();\n  }\n  skipShortTermRefPicSets(bitArray);\n  if (bitArray.readBit()) {\n    for (int i=0; i < bitArray.readUnsignedExpGolombCodedInt(); i++) {\n      int ltRefPicPocLsbSpsLength=log2MaxPicOrderCntLsbMinus4 + 4;\n      bitArray.skipBits(ltRefPicPocLsbSpsLength + 1);\n    }\n  }\n  bitArray.skipBits(2);\n  float pixelWidthHeightRatio=1;\n  if (bitArray.readBit()) {\n    if (bitArray.readBit()) {\n      int aspectRatioIdc=bitArray.readBits(8);\n      if (aspectRatioIdc == NalUnitUtil.EXTENDED_SAR) {\n        int sarWidth=bitArray.readBits(16);\n        int sarHeight=bitArray.readBits(16);\n        if (sarWidth != 0 && sarHeight != 0) {\n          pixelWidthHeightRatio=(float)sarWidth / sarHeight;\n        }\n      }\n else       if (aspectRatioIdc < NalUnitUtil.ASPECT_RATIO_IDC_VALUES.length) {\n        pixelWidthHeightRatio=NalUnitUtil.ASPECT_RATIO_IDC_VALUES[aspectRatioIdc];\n      }\n else {\n        Log.w(TAG,\"Unexpected aspect_ratio_idc value: \" + aspectRatioIdc);\n      }\n    }\n    if (bitArray.readBit()) {\n      bitArray.skipBit();\n    }\n    if (bitArray.readBit()) {\n      bitArray.skipBits(4);\n      if (bitArray.readBit()) {\n        bitArray.skipBits(24);\n      }\n    }\n    if (bitArray.readBit()) {\n      bitArray.readUnsignedExpGolombCodedInt();\n      bitArray.readUnsignedExpGolombCodedInt();\n    }\n    bitArray.skipBit();\n    if (bitArray.readBit()) {\n      picHeightInLumaSamples*=2;\n    }\n  }\n  String codecs=CodecSpecificDataUtil.buildHevcCodecString(generalProfileSpace,generalTierFlag,generalProfileIdc,generalProfileCompatibilityFlags,constraintBytes,generalLevelIdc);\n  return new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.VIDEO_H265).setCodecs(codecs).setWidth(picWidthInLumaSamples).setHeight(picHeightInLumaSamples).setPixelWidthHeightRatio(pixelWidthHeightRatio).setInitializationData(Collections.singletonList(csdData)).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 731,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 300,
        "startColumnNumber" : 9,
        "endLineNumber" : 300,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int i=bitArray.readBit() ? 0 : maxSubLayersMinus1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 300,
    "startColumnNumber" : 17,
    "endLineNumber" : 300,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}