{
  "id" : 435,
  "expression" : "kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 116,
      "startLineNumber" : 572,
      "startColumnNumber" : 50,
      "endLineNumber" : 573,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 572,
        "startColumnNumber" : 39,
        "endLineNumber" : 573,
        "endColumnNumber" : 69
      },
      "nodeContext" : "producer=kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 573,
        "endColumnNumber" : 70
      },
      "nodeContext" : "final Producer<String,String> producer=kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 560,
        "startColumnNumber" : 76,
        "endLineNumber" : 607,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Object> configs=new HashMap<>();\n  configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\");\n  configs.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,MockPartitioner.class.getName());\n  configs.put(ProducerConfig.BATCH_SIZE_CONFIG,\"1\");\n  Time time=new MockTime();\n  MetadataResponse initialUpdateResponse=RequestTestUtils.metadataUpdateWith(1,singletonMap(\"topic\",1));\n  ProducerMetadata metadata=newMetadata(0,Long.MAX_VALUE);\n  MockClient client=new MockClient(time,metadata);\n  client.updateMetadata(initialUpdateResponse);\n  final Producer<String,String> producer=kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time);\n  ExecutorService executor=Executors.newSingleThreadExecutor();\n  final AtomicReference<Exception> closeException=new AtomicReference<>();\n  try {\n    Future<?> future=executor.submit(() -> {\n      producer.send(new ProducerRecord<>(\"topic\",\"key\",\"value\"));\n      try {\n        producer.close();\n        fail(\"Close should block and throw.\");\n      }\n catch (      Exception e) {\n        closeException.set(e);\n      }\n    }\n);\n    try {\n      future.get(100,TimeUnit.MILLISECONDS);\n      fail(\"Close completed without waiting for send\");\n    }\n catch (    java.util.concurrent.TimeoutException expected) {\n    }\n    client.waitForRequests(1,1000);\n    assertTrue(future.cancel(true),\"Close terminated prematurely\");\n    TestUtils.waitForCondition(() -> closeException.get() != null,\"InterruptException did not occur within timeout.\");\n    assertTrue(closeException.get() instanceof InterruptException,\"Expected exception not thrown \" + closeException);\n  }\n  finally {\n    executor.shutdownNow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2225,
        "startLineNumber" : 559,
        "startColumnNumber" : 4,
        "endLineNumber" : 607,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldCloseProperlyAndThrowIfInterrupted() throws Exception {\n  Map<String,Object> configs=new HashMap<>();\n  configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\");\n  configs.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,MockPartitioner.class.getName());\n  configs.put(ProducerConfig.BATCH_SIZE_CONFIG,\"1\");\n  Time time=new MockTime();\n  MetadataResponse initialUpdateResponse=RequestTestUtils.metadataUpdateWith(1,singletonMap(\"topic\",1));\n  ProducerMetadata metadata=newMetadata(0,Long.MAX_VALUE);\n  MockClient client=new MockClient(time,metadata);\n  client.updateMetadata(initialUpdateResponse);\n  final Producer<String,String> producer=kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time);\n  ExecutorService executor=Executors.newSingleThreadExecutor();\n  final AtomicReference<Exception> closeException=new AtomicReference<>();\n  try {\n    Future<?> future=executor.submit(() -> {\n      producer.send(new ProducerRecord<>(\"topic\",\"key\",\"value\"));\n      try {\n        producer.close();\n        fail(\"Close should block and throw.\");\n      }\n catch (      Exception e) {\n        closeException.set(e);\n      }\n    }\n);\n    try {\n      future.get(100,TimeUnit.MILLISECONDS);\n      fail(\"Close completed without waiting for send\");\n    }\n catch (    java.util.concurrent.TimeoutException expected) {\n    }\n    client.waitForRequests(1,1000);\n    assertTrue(future.cancel(true),\"Close terminated prematurely\");\n    TestUtils.waitForCondition(() -> closeException.get() != null,\"InterruptException did not occur within timeout.\");\n    assertTrue(closeException.get() instanceof InterruptException,\"Expected exception not thrown \" + closeException);\n  }\n  finally {\n    executor.shutdownNow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 257,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 572,
        "startColumnNumber" : 8,
        "endLineNumber" : 573,
        "endColumnNumber" : 70
      },
      "nodeContext" : "final Producer<String,String> producer=kafkaProducer(configs,new StringSerializer(),new StringSerializer(),metadata,client,null,time);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "org.apache.kafka.clients.producer.KafkaProducer<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 116,
    "startLineNumber" : 572,
    "startColumnNumber" : 50,
    "endLineNumber" : 573,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}