{
  "id" : 36,
  "expression" : "0",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/integration-tests/resteasy-mutiny/src/test/java/io/quarkus/it/resteasy/mutiny/MutinyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 108,
      "startColumnNumber" : 52,
      "endLineNumber" : 108,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 108,
        "startColumnNumber" : 43,
        "endLineNumber" : 108,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pets.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 108,
        "startColumnNumber" : 43,
        "endLineNumber" : 108,
        "endColumnNumber" : 64
      },
      "nodeContext" : "pets.get(0).getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assertions.assertEquals(\"neo\",pets.get(0).getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assertions.assertEquals(\"neo\",pets.get(0).getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 88,
        "startColumnNumber" : 81,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Uni<List<Pet>> petList=Uni.createFrom().emitter(new Consumer<UniEmitter<? super List<Pet>>>(){\n    @Override public void accept(    UniEmitter<? super List<Pet>> uniEmitter){\n      List<Pet> pets=new CopyOnWriteArrayList<>();\n      eventSource.register(event -> {\n        Pet pet=event.readData(Pet.class,MediaType.APPLICATION_JSON_TYPE);\n        pets.add(pet);\n        if (pets.size() == 5) {\n          uniEmitter.complete(pets);\n        }\n      }\n,ex -> {\n        uniEmitter.fail(new IllegalStateException(\"SSE failure\",ex));\n      }\n);\n      eventSource.open();\n    }\n  }\n);\n  List<Pet> pets=petList.await().atMost(Duration.ofMinutes(1));\n  Assertions.assertEquals(5,pets.size());\n  Assertions.assertEquals(\"neo\",pets.get(0).getName());\n  Assertions.assertEquals(\"indy\",pets.get(1).getName());\n  Assertions.assertEquals(\"plume\",pets.get(2).getName());\n  Assertions.assertEquals(\"titi\",pets.get(3).getName());\n  Assertions.assertEquals(\"rex\",pets.get(4).getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1365,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (SseEventSource eventSource=SseEventSource.target(target).build()){\n  Uni<List<Pet>> petList=Uni.createFrom().emitter(new Consumer<UniEmitter<? super List<Pet>>>(){\n    @Override public void accept(    UniEmitter<? super List<Pet>> uniEmitter){\n      List<Pet> pets=new CopyOnWriteArrayList<>();\n      eventSource.register(event -> {\n        Pet pet=event.readData(Pet.class,MediaType.APPLICATION_JSON_TYPE);\n        pets.add(pet);\n        if (pets.size() == 5) {\n          uniEmitter.complete(pets);\n        }\n      }\n,ex -> {\n        uniEmitter.fail(new IllegalStateException(\"SSE failure\",ex));\n      }\n);\n      eventSource.open();\n    }\n  }\n);\n  List<Pet> pets=petList.await().atMost(Duration.ofMinutes(1));\n  Assertions.assertEquals(5,pets.size());\n  Assertions.assertEquals(\"neo\",pets.get(0).getName());\n  Assertions.assertEquals(\"indy\",pets.get(1).getName());\n  Assertions.assertEquals(\"plume\",pets.get(2).getName());\n  Assertions.assertEquals(\"titi\",pets.get(3).getName());\n  Assertions.assertEquals(\"rex\",pets.get(4).getName());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 209,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 85,
        "startColumnNumber" : 26,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Client client=ClientBuilder.newClient();\n  WebTarget target=client.target(\"http://localhost:\" + RestAssured.port + \"/mutiny/pets\");\n  try (SseEventSource eventSource=SseEventSource.target(target).build()){\n    Uni<List<Pet>> petList=Uni.createFrom().emitter(new Consumer<UniEmitter<? super List<Pet>>>(){\n      @Override public void accept(      UniEmitter<? super List<Pet>> uniEmitter){\n        List<Pet> pets=new CopyOnWriteArrayList<>();\n        eventSource.register(event -> {\n          Pet pet=event.readData(Pet.class,MediaType.APPLICATION_JSON_TYPE);\n          pets.add(pet);\n          if (pets.size() == 5) {\n            uniEmitter.complete(pets);\n          }\n        }\n,ex -> {\n          uniEmitter.fail(new IllegalStateException(\"SSE failure\",ex));\n        }\n);\n        eventSource.open();\n      }\n    }\n);\n    List<Pet> pets=petList.await().atMost(Duration.ofMinutes(1));\n    Assertions.assertEquals(5,pets.size());\n    Assertions.assertEquals(\"neo\",pets.get(0).getName());\n    Assertions.assertEquals(\"indy\",pets.get(1).getName());\n    Assertions.assertEquals(\"plume\",pets.get(2).getName());\n    Assertions.assertEquals(\"titi\",pets.get(3).getName());\n    Assertions.assertEquals(\"rex\",pets.get(4).getName());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1563,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSSE(){\n  Client client=ClientBuilder.newClient();\n  WebTarget target=client.target(\"http://localhost:\" + RestAssured.port + \"/mutiny/pets\");\n  try (SseEventSource eventSource=SseEventSource.target(target).build()){\n    Uni<List<Pet>> petList=Uni.createFrom().emitter(new Consumer<UniEmitter<? super List<Pet>>>(){\n      @Override public void accept(      UniEmitter<? super List<Pet>> uniEmitter){\n        List<Pet> pets=new CopyOnWriteArrayList<>();\n        eventSource.register(event -> {\n          Pet pet=event.readData(Pet.class,MediaType.APPLICATION_JSON_TYPE);\n          pets.add(pet);\n          if (pets.size() == 5) {\n            uniEmitter.complete(pets);\n          }\n        }\n,ex -> {\n          uniEmitter.fail(new IllegalStateException(\"SSE failure\",ex));\n        }\n);\n        eventSource.open();\n      }\n    }\n);\n    List<Pet> pets=petList.await().atMost(Duration.ofMinutes(1));\n    Assertions.assertEquals(5,pets.size());\n    Assertions.assertEquals(\"neo\",pets.get(0).getName());\n    Assertions.assertEquals(\"indy\",pets.get(1).getName());\n    Assertions.assertEquals(\"plume\",pets.get(2).getName());\n    Assertions.assertEquals(\"titi\",pets.get(3).getName());\n    Assertions.assertEquals(\"rex\",pets.get(4).getName());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assertions.assertEquals(\"neo\",pets.get(0).getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 108,
    "startColumnNumber" : 52,
    "endLineNumber" : 108,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}