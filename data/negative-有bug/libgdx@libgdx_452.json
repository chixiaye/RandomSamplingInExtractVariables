{
  "id" : 452,
  "expression" : "combinedAABB.getPerimeter() + inheritanceCost",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/collision/broadphase/DynamicTree.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "combinedAABB.getPerimeter() + inheritanceCost",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 538,
      "startColumnNumber" : 16,
      "endLineNumber" : 538,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 538,
        "startColumnNumber" : 8,
        "endLineNumber" : 538,
        "endColumnNumber" : 61
      },
      "nodeContext" : "cost1=combinedAABB.getPerimeter() + inheritanceCost",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 538,
        "startColumnNumber" : 8,
        "endLineNumber" : 538,
        "endColumnNumber" : 62
      },
      "nodeContext" : "cost1=combinedAABB.getPerimeter() + inheritanceCost;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 536,
        "startColumnNumber" : 33,
        "endLineNumber" : 539,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  combinedAABB.combine(leafAABB,child1.aabb);\n  cost1=combinedAABB.getPerimeter() + inheritanceCost;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 536,
        "startColumnNumber" : 6,
        "endLineNumber" : 544,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child1.child1 == null) {\n  combinedAABB.combine(leafAABB,child1.aabb);\n  cost1=combinedAABB.getPerimeter() + inheritanceCost;\n}\n else {\n  combinedAABB.combine(leafAABB,child1.aabb);\n  float oldArea=child1.aabb.getPerimeter();\n  float newArea=combinedAABB.getPerimeter();\n  cost1=(newArea - oldArea) + inheritanceCost;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 518,
        "startColumnNumber" : 33,
        "endLineNumber" : 569,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DynamicTreeNode node=index;\n  DynamicTreeNode child1=node.child1;\n  DynamicTreeNode child2=node.child2;\n  float area=node.aabb.getPerimeter();\n  combinedAABB.combine(node.aabb,leafAABB);\n  float combinedArea=combinedAABB.getPerimeter();\n  float cost=2.0f * combinedArea;\n  float inheritanceCost=2.0f * (combinedArea - area);\n  float cost1;\n  if (child1.child1 == null) {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    cost1=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    float oldArea=child1.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost1=(newArea - oldArea) + inheritanceCost;\n  }\n  float cost2;\n  if (child2.child1 == null) {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    cost2=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    float oldArea=child2.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost2=newArea - oldArea + inheritanceCost;\n  }\n  if (cost < cost1 && cost < cost2) {\n    break;\n  }\n  if (cost1 < cost2) {\n    index=child1;\n  }\n else {\n    index=child2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 569,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (index.child1 != null) {\n  final DynamicTreeNode node=index;\n  DynamicTreeNode child1=node.child1;\n  DynamicTreeNode child2=node.child2;\n  float area=node.aabb.getPerimeter();\n  combinedAABB.combine(node.aabb,leafAABB);\n  float combinedArea=combinedAABB.getPerimeter();\n  float cost=2.0f * combinedArea;\n  float inheritanceCost=2.0f * (combinedArea - area);\n  float cost1;\n  if (child1.child1 == null) {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    cost1=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    float oldArea=child1.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost1=(newArea - oldArea) + inheritanceCost;\n  }\n  float cost2;\n  if (child2.child1 == null) {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    cost2=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    float oldArea=child2.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost2=newArea - oldArea + inheritanceCost;\n  }\n  if (cost < cost1 && cost < cost2) {\n    break;\n  }\n  if (cost1 < cost2) {\n    index=child1;\n  }\n else {\n    index=child2;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 507,
        "startColumnNumber" : 48,
        "endLineNumber" : 617,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DynamicTreeNode leaf=m_nodes[leaf_index];\n  if (m_root == null) {\n    m_root=leaf;\n    m_root.parent=null;\n    return;\n  }\n  AABB leafAABB=leaf.aabb;\n  DynamicTreeNode index=m_root;\n  while (index.child1 != null) {\n    final DynamicTreeNode node=index;\n    DynamicTreeNode child1=node.child1;\n    DynamicTreeNode child2=node.child2;\n    float area=node.aabb.getPerimeter();\n    combinedAABB.combine(node.aabb,leafAABB);\n    float combinedArea=combinedAABB.getPerimeter();\n    float cost=2.0f * combinedArea;\n    float inheritanceCost=2.0f * (combinedArea - area);\n    float cost1;\n    if (child1.child1 == null) {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      cost1=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      float oldArea=child1.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost1=(newArea - oldArea) + inheritanceCost;\n    }\n    float cost2;\n    if (child2.child1 == null) {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      cost2=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      float oldArea=child2.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost2=newArea - oldArea + inheritanceCost;\n    }\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n    if (cost1 < cost2) {\n      index=child1;\n    }\n else {\n      index=child2;\n    }\n  }\n  DynamicTreeNode sibling=index;\n  DynamicTreeNode oldParent=m_nodes[sibling.id].parent;\n  final DynamicTreeNode newParent=allocateNode();\n  newParent.parent=oldParent;\n  newParent.userData=null;\n  newParent.aabb.combine(leafAABB,sibling.aabb);\n  newParent.height=sibling.height + 1;\n  if (oldParent != null) {\n    if (oldParent.child1 == sibling) {\n      oldParent.child1=newParent;\n    }\n else {\n      oldParent.child2=newParent;\n    }\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n  }\n else {\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n    m_root=newParent;\n  }\n  index=leaf.parent;\n  while (index != null) {\n    index=balance(index);\n    DynamicTreeNode child1=index.child1;\n    DynamicTreeNode child2=index.child2;\n    assert (child1 != null);\n    assert (child2 != null);\n    index.height=1 + MathUtils.max(child1.height,child2.height);\n    index.aabb.combine(child1.aabb,child2.aabb);\n    index=index.parent;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 507,
        "startColumnNumber" : 2,
        "endLineNumber" : 617,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private final void insertLeaf(int leaf_index){\n  DynamicTreeNode leaf=m_nodes[leaf_index];\n  if (m_root == null) {\n    m_root=leaf;\n    m_root.parent=null;\n    return;\n  }\n  AABB leafAABB=leaf.aabb;\n  DynamicTreeNode index=m_root;\n  while (index.child1 != null) {\n    final DynamicTreeNode node=index;\n    DynamicTreeNode child1=node.child1;\n    DynamicTreeNode child2=node.child2;\n    float area=node.aabb.getPerimeter();\n    combinedAABB.combine(node.aabb,leafAABB);\n    float combinedArea=combinedAABB.getPerimeter();\n    float cost=2.0f * combinedArea;\n    float inheritanceCost=2.0f * (combinedArea - area);\n    float cost1;\n    if (child1.child1 == null) {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      cost1=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      float oldArea=child1.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost1=(newArea - oldArea) + inheritanceCost;\n    }\n    float cost2;\n    if (child2.child1 == null) {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      cost2=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      float oldArea=child2.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost2=newArea - oldArea + inheritanceCost;\n    }\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n    if (cost1 < cost2) {\n      index=child1;\n    }\n else {\n      index=child2;\n    }\n  }\n  DynamicTreeNode sibling=index;\n  DynamicTreeNode oldParent=m_nodes[sibling.id].parent;\n  final DynamicTreeNode newParent=allocateNode();\n  newParent.parent=oldParent;\n  newParent.userData=null;\n  newParent.aabb.combine(leafAABB,sibling.aabb);\n  newParent.height=sibling.height + 1;\n  if (oldParent != null) {\n    if (oldParent.child1 == sibling) {\n      oldParent.child1=newParent;\n    }\n else {\n      oldParent.child2=newParent;\n    }\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n  }\n else {\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n    m_root=newParent;\n  }\n  index=leaf.parent;\n  while (index != null) {\n    index=balance(index);\n    DynamicTreeNode child1=index.child1;\n    DynamicTreeNode child2=index.child2;\n    assert (child1 != null);\n    assert (child2 != null);\n    index.height=1 + MathUtils.max(child1.height,child2.height);\n    index.aabb.combine(child1.aabb,child2.aabb);\n    index=index.parent;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 476,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 538,
        "startColumnNumber" : 8,
        "endLineNumber" : 538,
        "endColumnNumber" : 62
      },
      "nodeContext" : "cost1=combinedAABB.getPerimeter() + inheritanceCost;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "float"
  }, {
    "nodeContext" : "combinedAABB.getPerimeter() + inheritanceCost",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 550,
      "startColumnNumber" : 16,
      "endLineNumber" : 550,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 550,
        "startColumnNumber" : 8,
        "endLineNumber" : 550,
        "endColumnNumber" : 61
      },
      "nodeContext" : "cost2=combinedAABB.getPerimeter() + inheritanceCost",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 550,
        "startColumnNumber" : 8,
        "endLineNumber" : 550,
        "endColumnNumber" : 62
      },
      "nodeContext" : "cost2=combinedAABB.getPerimeter() + inheritanceCost;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 548,
        "startColumnNumber" : 33,
        "endLineNumber" : 551,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  combinedAABB.combine(leafAABB,child2.aabb);\n  cost2=combinedAABB.getPerimeter() + inheritanceCost;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 378,
        "startLineNumber" : 548,
        "startColumnNumber" : 6,
        "endLineNumber" : 556,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child2.child1 == null) {\n  combinedAABB.combine(leafAABB,child2.aabb);\n  cost2=combinedAABB.getPerimeter() + inheritanceCost;\n}\n else {\n  combinedAABB.combine(leafAABB,child2.aabb);\n  float oldArea=child2.aabb.getPerimeter();\n  float newArea=combinedAABB.getPerimeter();\n  cost2=newArea - oldArea + inheritanceCost;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 518,
        "startColumnNumber" : 33,
        "endLineNumber" : 569,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DynamicTreeNode node=index;\n  DynamicTreeNode child1=node.child1;\n  DynamicTreeNode child2=node.child2;\n  float area=node.aabb.getPerimeter();\n  combinedAABB.combine(node.aabb,leafAABB);\n  float combinedArea=combinedAABB.getPerimeter();\n  float cost=2.0f * combinedArea;\n  float inheritanceCost=2.0f * (combinedArea - area);\n  float cost1;\n  if (child1.child1 == null) {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    cost1=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    float oldArea=child1.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost1=(newArea - oldArea) + inheritanceCost;\n  }\n  float cost2;\n  if (child2.child1 == null) {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    cost2=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    float oldArea=child2.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost2=newArea - oldArea + inheritanceCost;\n  }\n  if (cost < cost1 && cost < cost2) {\n    break;\n  }\n  if (cost1 < cost2) {\n    index=child1;\n  }\n else {\n    index=child2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 569,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (index.child1 != null) {\n  final DynamicTreeNode node=index;\n  DynamicTreeNode child1=node.child1;\n  DynamicTreeNode child2=node.child2;\n  float area=node.aabb.getPerimeter();\n  combinedAABB.combine(node.aabb,leafAABB);\n  float combinedArea=combinedAABB.getPerimeter();\n  float cost=2.0f * combinedArea;\n  float inheritanceCost=2.0f * (combinedArea - area);\n  float cost1;\n  if (child1.child1 == null) {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    cost1=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child1.aabb);\n    float oldArea=child1.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost1=(newArea - oldArea) + inheritanceCost;\n  }\n  float cost2;\n  if (child2.child1 == null) {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    cost2=combinedAABB.getPerimeter() + inheritanceCost;\n  }\n else {\n    combinedAABB.combine(leafAABB,child2.aabb);\n    float oldArea=child2.aabb.getPerimeter();\n    float newArea=combinedAABB.getPerimeter();\n    cost2=newArea - oldArea + inheritanceCost;\n  }\n  if (cost < cost1 && cost < cost2) {\n    break;\n  }\n  if (cost1 < cost2) {\n    index=child1;\n  }\n else {\n    index=child2;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 216,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3257,
        "startLineNumber" : 507,
        "startColumnNumber" : 48,
        "endLineNumber" : 617,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DynamicTreeNode leaf=m_nodes[leaf_index];\n  if (m_root == null) {\n    m_root=leaf;\n    m_root.parent=null;\n    return;\n  }\n  AABB leafAABB=leaf.aabb;\n  DynamicTreeNode index=m_root;\n  while (index.child1 != null) {\n    final DynamicTreeNode node=index;\n    DynamicTreeNode child1=node.child1;\n    DynamicTreeNode child2=node.child2;\n    float area=node.aabb.getPerimeter();\n    combinedAABB.combine(node.aabb,leafAABB);\n    float combinedArea=combinedAABB.getPerimeter();\n    float cost=2.0f * combinedArea;\n    float inheritanceCost=2.0f * (combinedArea - area);\n    float cost1;\n    if (child1.child1 == null) {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      cost1=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      float oldArea=child1.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost1=(newArea - oldArea) + inheritanceCost;\n    }\n    float cost2;\n    if (child2.child1 == null) {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      cost2=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      float oldArea=child2.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost2=newArea - oldArea + inheritanceCost;\n    }\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n    if (cost1 < cost2) {\n      index=child1;\n    }\n else {\n      index=child2;\n    }\n  }\n  DynamicTreeNode sibling=index;\n  DynamicTreeNode oldParent=m_nodes[sibling.id].parent;\n  final DynamicTreeNode newParent=allocateNode();\n  newParent.parent=oldParent;\n  newParent.userData=null;\n  newParent.aabb.combine(leafAABB,sibling.aabb);\n  newParent.height=sibling.height + 1;\n  if (oldParent != null) {\n    if (oldParent.child1 == sibling) {\n      oldParent.child1=newParent;\n    }\n else {\n      oldParent.child2=newParent;\n    }\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n  }\n else {\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n    m_root=newParent;\n  }\n  index=leaf.parent;\n  while (index != null) {\n    index=balance(index);\n    DynamicTreeNode child1=index.child1;\n    DynamicTreeNode child2=index.child2;\n    assert (child1 != null);\n    assert (child2 != null);\n    index.height=1 + MathUtils.max(child1.height,child2.height);\n    index.aabb.combine(child1.aabb,child2.aabb);\n    index=index.parent;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 507,
        "startColumnNumber" : 2,
        "endLineNumber" : 617,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private final void insertLeaf(int leaf_index){\n  DynamicTreeNode leaf=m_nodes[leaf_index];\n  if (m_root == null) {\n    m_root=leaf;\n    m_root.parent=null;\n    return;\n  }\n  AABB leafAABB=leaf.aabb;\n  DynamicTreeNode index=m_root;\n  while (index.child1 != null) {\n    final DynamicTreeNode node=index;\n    DynamicTreeNode child1=node.child1;\n    DynamicTreeNode child2=node.child2;\n    float area=node.aabb.getPerimeter();\n    combinedAABB.combine(node.aabb,leafAABB);\n    float combinedArea=combinedAABB.getPerimeter();\n    float cost=2.0f * combinedArea;\n    float inheritanceCost=2.0f * (combinedArea - area);\n    float cost1;\n    if (child1.child1 == null) {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      cost1=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child1.aabb);\n      float oldArea=child1.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost1=(newArea - oldArea) + inheritanceCost;\n    }\n    float cost2;\n    if (child2.child1 == null) {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      cost2=combinedAABB.getPerimeter() + inheritanceCost;\n    }\n else {\n      combinedAABB.combine(leafAABB,child2.aabb);\n      float oldArea=child2.aabb.getPerimeter();\n      float newArea=combinedAABB.getPerimeter();\n      cost2=newArea - oldArea + inheritanceCost;\n    }\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n    if (cost1 < cost2) {\n      index=child1;\n    }\n else {\n      index=child2;\n    }\n  }\n  DynamicTreeNode sibling=index;\n  DynamicTreeNode oldParent=m_nodes[sibling.id].parent;\n  final DynamicTreeNode newParent=allocateNode();\n  newParent.parent=oldParent;\n  newParent.userData=null;\n  newParent.aabb.combine(leafAABB,sibling.aabb);\n  newParent.height=sibling.height + 1;\n  if (oldParent != null) {\n    if (oldParent.child1 == sibling) {\n      oldParent.child1=newParent;\n    }\n else {\n      oldParent.child2=newParent;\n    }\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n  }\n else {\n    newParent.child1=sibling;\n    newParent.child2=leaf;\n    sibling.parent=newParent;\n    leaf.parent=newParent;\n    m_root=newParent;\n  }\n  index=leaf.parent;\n  while (index != null) {\n    index=balance(index);\n    DynamicTreeNode child1=index.child1;\n    DynamicTreeNode child2=index.child2;\n    assert (child1 != null);\n    assert (child2 != null);\n    index.height=1 + MathUtils.max(child1.height,child2.height);\n    index.aabb.combine(child1.aabb,child2.aabb);\n    index=index.parent;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 476,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 550,
        "startColumnNumber" : 8,
        "endLineNumber" : 550,
        "endColumnNumber" : 62
      },
      "nodeContext" : "cost2=combinedAABB.getPerimeter() + inheritanceCost;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 538,
    "startColumnNumber" : 16,
    "endLineNumber" : 538,
    "endColumnNumber" : 61
  }, {
    "charLength" : 45,
    "startLineNumber" : 550,
    "startColumnNumber" : 16,
    "endLineNumber" : 550,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}