{
  "id" : 49,
  "expression" : "new Consumer<Throwable>(){\n  @Override public void accept(  @NonNull final Throwable throwable){\n    Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n    final Throwable actualThrowable;\n    if (throwable instanceof UndeliverableException) {\n      actualThrowable=throwable.getCause();\n    }\n else {\n      actualThrowable=throwable;\n    }\n    final List<Throwable> errors;\n    if (actualThrowable instanceof CompositeException) {\n      errors=((CompositeException)actualThrowable).getExceptions();\n    }\n else {\n      errors=Collections.singletonList(actualThrowable);\n    }\n    for (    final Throwable error : errors) {\n      if (isThrowableIgnored(error)) {\n        return;\n      }\n      if (isThrowableCritical(error)) {\n        reportException(error);\n        return;\n      }\n    }\n    if (isDisposedRxExceptionsReported()) {\n      reportException(actualThrowable);\n    }\n else {\n      Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n    }\n  }\n  private boolean isThrowableIgnored(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n  }\n  private boolean isThrowableCritical(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n  }\n  private void reportException(  @NonNull final Throwable throwable){\n    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n  }\n}\n",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/App.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Consumer<Throwable>(){\n  @Override public void accept(  @NonNull final Throwable throwable){\n    Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n    final Throwable actualThrowable;\n    if (throwable instanceof UndeliverableException) {\n      actualThrowable=throwable.getCause();\n    }\n else {\n      actualThrowable=throwable;\n    }\n    final List<Throwable> errors;\n    if (actualThrowable instanceof CompositeException) {\n      errors=((CompositeException)actualThrowable).getExceptions();\n    }\n else {\n      errors=Collections.singletonList(actualThrowable);\n    }\n    for (    final Throwable error : errors) {\n      if (isThrowableIgnored(error)) {\n        return;\n      }\n      if (isThrowableCritical(error)) {\n        reportException(error);\n        return;\n      }\n    }\n    if (isDisposedRxExceptionsReported()) {\n      reportException(actualThrowable);\n    }\n else {\n      Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n    }\n  }\n  private boolean isThrowableIgnored(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n  }\n  private boolean isThrowableCritical(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n  }\n  private void reportException(  @NonNull final Throwable throwable){\n    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 3084,
      "startLineNumber" : 122,
      "startColumnNumber" : 38,
      "endLineNumber" : 185,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 217,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 10
      },
      "nodeContext" : "RxJavaPlugins.setErrorHandler(new Consumer<Throwable>(){\n  @Override public void accept(  @NonNull final Throwable throwable){\n    Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n    final Throwable actualThrowable;\n    if (throwable instanceof UndeliverableException) {\n      actualThrowable=throwable.getCause();\n    }\n else {\n      actualThrowable=throwable;\n    }\n    final List<Throwable> errors;\n    if (actualThrowable instanceof CompositeException) {\n      errors=((CompositeException)actualThrowable).getExceptions();\n    }\n else {\n      errors=Collections.singletonList(actualThrowable);\n    }\n    for (    final Throwable error : errors) {\n      if (isThrowableIgnored(error)) {\n        return;\n      }\n      if (isThrowableCritical(error)) {\n        reportException(error);\n        return;\n      }\n    }\n    if (isDisposedRxExceptionsReported()) {\n      reportException(actualThrowable);\n    }\n else {\n      Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n    }\n  }\n  private boolean isThrowableIgnored(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n  }\n  private boolean isThrowableCritical(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n  }\n  private void reportException(  @NonNull final Throwable throwable){\n    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 220,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3116,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 11
      },
      "nodeContext" : "RxJavaPlugins.setErrorHandler(new Consumer<Throwable>(){\n  @Override public void accept(  @NonNull final Throwable throwable){\n    Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n    final Throwable actualThrowable;\n    if (throwable instanceof UndeliverableException) {\n      actualThrowable=throwable.getCause();\n    }\n else {\n      actualThrowable=throwable;\n    }\n    final List<Throwable> errors;\n    if (actualThrowable instanceof CompositeException) {\n      errors=((CompositeException)actualThrowable).getExceptions();\n    }\n else {\n      errors=Collections.singletonList(actualThrowable);\n    }\n    for (    final Throwable error : errors) {\n      if (isThrowableIgnored(error)) {\n        return;\n      }\n      if (isThrowableCritical(error)) {\n        reportException(error);\n        return;\n      }\n    }\n    if (isDisposedRxExceptionsReported()) {\n      reportException(actualThrowable);\n    }\n else {\n      Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n    }\n  }\n  private boolean isThrowableIgnored(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n  }\n  private boolean isThrowableCritical(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n  }\n  private void reportException(  @NonNull final Throwable throwable){\n    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 221,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3223,
        "startLineNumber" : 120,
        "startColumnNumber" : 47,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RxJavaPlugins.setErrorHandler(new Consumer<Throwable>(){\n    @Override public void accept(    @NonNull final Throwable throwable){\n      Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n      final Throwable actualThrowable;\n      if (throwable instanceof UndeliverableException) {\n        actualThrowable=throwable.getCause();\n      }\n else {\n        actualThrowable=throwable;\n      }\n      final List<Throwable> errors;\n      if (actualThrowable instanceof CompositeException) {\n        errors=((CompositeException)actualThrowable).getExceptions();\n      }\n else {\n        errors=Collections.singletonList(actualThrowable);\n      }\n      for (      final Throwable error : errors) {\n        if (isThrowableIgnored(error)) {\n          return;\n        }\n        if (isThrowableCritical(error)) {\n          reportException(error);\n          return;\n        }\n      }\n      if (isDisposedRxExceptionsReported()) {\n        reportException(actualThrowable);\n      }\n else {\n        Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n      }\n    }\n    private boolean isThrowableIgnored(    @NonNull final Throwable throwable){\n      return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n    }\n    private boolean isThrowableCritical(    @NonNull final Throwable throwable){\n      return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n    }\n    private void reportException(    @NonNull final Throwable throwable){\n      Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3266,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void configureRxJavaErrorHandler(){\n  RxJavaPlugins.setErrorHandler(new Consumer<Throwable>(){\n    @Override public void accept(    @NonNull final Throwable throwable){\n      Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n      final Throwable actualThrowable;\n      if (throwable instanceof UndeliverableException) {\n        actualThrowable=throwable.getCause();\n      }\n else {\n        actualThrowable=throwable;\n      }\n      final List<Throwable> errors;\n      if (actualThrowable instanceof CompositeException) {\n        errors=((CompositeException)actualThrowable).getExceptions();\n      }\n else {\n        errors=Collections.singletonList(actualThrowable);\n      }\n      for (      final Throwable error : errors) {\n        if (isThrowableIgnored(error)) {\n          return;\n        }\n        if (isThrowableCritical(error)) {\n          reportException(error);\n          return;\n        }\n      }\n      if (isDisposedRxExceptionsReported()) {\n        reportException(actualThrowable);\n      }\n else {\n        Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n      }\n    }\n    private boolean isThrowableIgnored(    @NonNull final Throwable throwable){\n      return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n    }\n    private boolean isThrowableCritical(    @NonNull final Throwable throwable){\n      return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n    }\n    private void reportException(    @NonNull final Throwable throwable){\n      Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3116,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 11
      },
      "nodeContext" : "RxJavaPlugins.setErrorHandler(new Consumer<Throwable>(){\n  @Override public void accept(  @NonNull final Throwable throwable){\n    Log.e(TAG,\"RxJavaPlugins.ErrorHandler called with -> : \" + \"throwable = [\" + throwable.getClass().getName() + \"]\");\n    final Throwable actualThrowable;\n    if (throwable instanceof UndeliverableException) {\n      actualThrowable=throwable.getCause();\n    }\n else {\n      actualThrowable=throwable;\n    }\n    final List<Throwable> errors;\n    if (actualThrowable instanceof CompositeException) {\n      errors=((CompositeException)actualThrowable).getExceptions();\n    }\n else {\n      errors=Collections.singletonList(actualThrowable);\n    }\n    for (    final Throwable error : errors) {\n      if (isThrowableIgnored(error)) {\n        return;\n      }\n      if (isThrowableCritical(error)) {\n        reportException(error);\n        return;\n      }\n    }\n    if (isDisposedRxExceptionsReported()) {\n      reportException(actualThrowable);\n    }\n else {\n      Log.e(TAG,\"RxJavaPlugin: Undeliverable Exception received: \",actualThrowable);\n    }\n  }\n  private boolean isThrowableIgnored(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,IOException.class,SocketException.class,InterruptedException.class,InterruptedIOException.class);\n  }\n  private boolean isThrowableCritical(  @NonNull final Throwable throwable){\n    return ExceptionUtils.hasAssignableCause(throwable,NullPointerException.class,IllegalArgumentException.class,OnErrorNotImplementedException.class,MissingBackpressureException.class,IllegalStateException.class);\n  }\n  private void reportException(  @NonNull final Throwable throwable){\n    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),throwable);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 221,
      "astHeight" : 15
    },
    "tokenLength" : 94,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 3084,
    "startLineNumber" : 122,
    "startColumnNumber" : 38,
    "endLineNumber" : 185,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}