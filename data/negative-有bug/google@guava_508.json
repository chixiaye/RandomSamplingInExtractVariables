{
  "id" : 508,
  "expression" : "\"Invalid unicode character value \" + cp",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/net/PercentEscaper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Invalid unicode character value \" + cp",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 233,
      "startColumnNumber" : 41,
      "endLineNumber" : 233,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 81
      },
      "nodeContext" : "new IllegalArgumentException(\"Invalid unicode character value \" + cp)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 233,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 231,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 208,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 159,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1556,
        "startLineNumber" : 190,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp <= 0xffff) {\n  char[] dest=new char[9];\n  dest[0]='%';\n  dest[1]='E';\n  dest[3]='%';\n  dest[6]='%';\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp];\n  return dest;\n}\n else if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 271,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2044,
        "startLineNumber" : 176,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp <= 0x7ff) {\n  char[] dest=new char[6];\n  dest[0]='%';\n  dest[3]='%';\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n  return dest;\n}\n else if (cp <= 0xffff) {\n  char[] dest=new char[9];\n  dest[0]='%';\n  dest[1]='E';\n  dest[3]='%';\n  dest[6]='%';\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp];\n  return dest;\n}\n else if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 356,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2329,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp <= 0x7F) {\n  char[] dest=new char[3];\n  dest[0]='%';\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  dest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n  return dest;\n}\n else if (cp <= 0x7ff) {\n  char[] dest=new char[6];\n  dest[0]='%';\n  dest[3]='%';\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n  return dest;\n}\n else if (cp <= 0xffff) {\n  char[] dest=new char[9];\n  dest[0]='%';\n  dest[1]='E';\n  dest[3]='%';\n  dest[6]='%';\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp];\n  return dest;\n}\n else if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 400,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2399,
        "startLineNumber" : 166,
        "startColumnNumber" : 11,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp == ' ' && plusForSpace) {\n  return PLUS_SIGN;\n}\n else if (cp <= 0x7F) {\n  char[] dest=new char[3];\n  dest[0]='%';\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  dest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n  return dest;\n}\n else if (cp <= 0x7ff) {\n  char[] dest=new char[6];\n  dest[0]='%';\n  dest[3]='%';\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n  return dest;\n}\n else if (cp <= 0xffff) {\n  char[] dest=new char[9];\n  dest[0]='%';\n  dest[1]='E';\n  dest[3]='%';\n  dest[6]='%';\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp];\n  return dest;\n}\n else if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 409,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 234,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (cp < safeOctets.length && safeOctets[cp]) {\n  return null;\n}\n else if (cp == ' ' && plusForSpace) {\n  return PLUS_SIGN;\n}\n else if (cp <= 0x7F) {\n  char[] dest=new char[3];\n  dest[0]='%';\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  dest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n  return dest;\n}\n else if (cp <= 0x7ff) {\n  char[] dest=new char[6];\n  dest[0]='%';\n  dest[3]='%';\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n  return dest;\n}\n else if (cp <= 0xffff) {\n  char[] dest=new char[9];\n  dest[0]='%';\n  dest[1]='E';\n  dest[3]='%';\n  dest[6]='%';\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp];\n  return dest;\n}\n else if (cp <= 0x10ffff) {\n  char[] dest=new char[12];\n  dest[0]='%';\n  dest[1]='F';\n  dest[3]='%';\n  dest[6]='%';\n  dest[9]='%';\n  dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n  cp>>>=4;\n  dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n  cp>>>=2;\n  dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n  return dest;\n}\n else {\n  throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2638,
        "startLineNumber" : 161,
        "startColumnNumber" : 34,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (cp < safeOctets.length && safeOctets[cp]) {\n    return null;\n  }\n else   if (cp == ' ' && plusForSpace) {\n    return PLUS_SIGN;\n  }\n else   if (cp <= 0x7F) {\n    char[] dest=new char[3];\n    dest[0]='%';\n    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n    return dest;\n  }\n else   if (cp <= 0x7ff) {\n    char[] dest=new char[6];\n    dest[0]='%';\n    dest[3]='%';\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n    return dest;\n  }\n else   if (cp <= 0xffff) {\n    char[] dest=new char[9];\n    dest[0]='%';\n    dest[1]='E';\n    dest[3]='%';\n    dest[6]='%';\n    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp];\n    return dest;\n  }\n else   if (cp <= 0x10ffff) {\n    char[] dest=new char[12];\n    dest[0]='%';\n    dest[1]='F';\n    dest[3]='%';\n    dest[6]='%';\n    dest[9]='%';\n    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n    return dest;\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2757,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Escapes the given Unicode code point in UTF-8. \n */\n@Override @CheckForNull protected char[] escape(int cp){\n  if (cp < safeOctets.length && safeOctets[cp]) {\n    return null;\n  }\n else   if (cp == ' ' && plusForSpace) {\n    return PLUS_SIGN;\n  }\n else   if (cp <= 0x7F) {\n    char[] dest=new char[3];\n    dest[0]='%';\n    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];\n    return dest;\n  }\n else   if (cp <= 0x7ff) {\n    char[] dest=new char[6];\n    dest[0]='%';\n    dest[3]='%';\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[1]=UPPER_HEX_DIGITS[0xC | cp];\n    return dest;\n  }\n else   if (cp <= 0xffff) {\n    char[] dest=new char[9];\n    dest[0]='%';\n    dest[1]='E';\n    dest[3]='%';\n    dest[6]='%';\n    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp];\n    return dest;\n  }\n else   if (cp <= 0x10ffff) {\n    char[] dest=new char[12];\n    dest[0]='%';\n    dest[1]='F';\n    dest[3]='%';\n    dest[6]='%';\n    dest[9]='%';\n    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];\n    cp>>>=4;\n    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];\n    cp>>>=2;\n    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];\n    return dest;\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 437,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 233,
        "startColumnNumber" : 6,
        "endLineNumber" : 233,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 233,
    "startColumnNumber" : 41,
    "endLineNumber" : 233,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}