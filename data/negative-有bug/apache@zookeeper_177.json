{
  "id" : 177,
  "expression" : "args.length",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/GenerateLoad.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "args.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 435,
      "startColumnNumber" : 12,
      "endLineNumber" : 435,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 435,
        "startColumnNumber" : 12,
        "endLineNumber" : 435,
        "endColumnNumber" : 28
      },
      "nodeContext" : "args.length == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 435,
        "startColumnNumber" : 8,
        "endLineNumber" : 492,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 1) {\n  try {\n    int port=Integer.parseInt(args[0]);\n    ss=new ServerSocket(port);\n    new AcceptorThread();\n    new ReporterThread();\n    BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n    String line;\n    while ((line=is.readLine()) != null) {\n      try {\n        String cmdNumber[]=line.split(\" \");\n        if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n          int number=Integer.parseInt(cmdNumber[1]);\n          if (number < 0 || number > 100) {\n            throw new NumberFormatException(\"must be between 0 and 100\");\n          }\n          sendChange(number);\n        }\n else         if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n          int number=Integer.parseInt(cmdNumber[1]);\n          Thread.sleep(number * 1000);\n        }\n else         if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n          sf=new PrintStream(cmdNumber[1]);\n        }\n else {\n          System.err.println(\"Commands must be:\");\n          System.err.println(\"\\tpercentage new_write_percentage\");\n          System.err.println(\"\\tsleep seconds_to_sleep\");\n          System.err.println(\"\\tsave file_to_save_output\");\n        }\n      }\n catch (      NumberFormatException e) {\n        System.out.println(\"Not a valid number: \" + e.getMessage());\n      }\n    }\n  }\n catch (  NumberFormatException e) {\n    doUsage();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    System.exit(2);\n  }\n}\n else if (args.length == 2) {\n  host=args[1];\n  String hostPort[]=args[0].split(\":\");\n  try {\n    s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n    new ZooKeeperThread();\n    new SenderThread();\n    BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n    String line;\n    while ((line=is.readLine()) != null) {\n      percentage=Integer.parseInt(line);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n else {\n  doUsage();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 341,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2752,
        "startLineNumber" : 434,
        "startColumnNumber" : 71,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 1) {\n    try {\n      int port=Integer.parseInt(args[0]);\n      ss=new ServerSocket(port);\n      new AcceptorThread();\n      new ReporterThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n      String line;\n      while ((line=is.readLine()) != null) {\n        try {\n          String cmdNumber[]=line.split(\" \");\n          if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            if (number < 0 || number > 100) {\n              throw new NumberFormatException(\"must be between 0 and 100\");\n            }\n            sendChange(number);\n          }\n else           if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            Thread.sleep(number * 1000);\n          }\n else           if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n            sf=new PrintStream(cmdNumber[1]);\n          }\n else {\n            System.err.println(\"Commands must be:\");\n            System.err.println(\"\\tpercentage new_write_percentage\");\n            System.err.println(\"\\tsleep seconds_to_sleep\");\n            System.err.println(\"\\tsave file_to_save_output\");\n          }\n        }\n catch (        NumberFormatException e) {\n          System.out.println(\"Not a valid number: \" + e.getMessage());\n        }\n      }\n    }\n catch (    NumberFormatException e) {\n      doUsage();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n      System.exit(2);\n    }\n  }\n else   if (args.length == 2) {\n    host=args[1];\n    String hostPort[]=args[0].split(\":\");\n    try {\n      s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n      new ZooKeeperThread();\n      new SenderThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n      String line;\n      while ((line=is.readLine()) != null) {\n        percentage=Integer.parseInt(line);\n      }\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n else {\n    doUsage();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2890,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param args\n * @throws InterruptedException\n */\npublic static void main(String[] args) throws InterruptedException {\n  if (args.length == 1) {\n    try {\n      int port=Integer.parseInt(args[0]);\n      ss=new ServerSocket(port);\n      new AcceptorThread();\n      new ReporterThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n      String line;\n      while ((line=is.readLine()) != null) {\n        try {\n          String cmdNumber[]=line.split(\" \");\n          if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            if (number < 0 || number > 100) {\n              throw new NumberFormatException(\"must be between 0 and 100\");\n            }\n            sendChange(number);\n          }\n else           if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            Thread.sleep(number * 1000);\n          }\n else           if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n            sf=new PrintStream(cmdNumber[1]);\n          }\n else {\n            System.err.println(\"Commands must be:\");\n            System.err.println(\"\\tpercentage new_write_percentage\");\n            System.err.println(\"\\tsleep seconds_to_sleep\");\n            System.err.println(\"\\tsave file_to_save_output\");\n          }\n        }\n catch (        NumberFormatException e) {\n          System.out.println(\"Not a valid number: \" + e.getMessage());\n        }\n      }\n    }\n catch (    NumberFormatException e) {\n      doUsage();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n      System.exit(2);\n    }\n  }\n else   if (args.length == 2) {\n    host=args[1];\n    String hostPort[]=args[0].split(\":\");\n    try {\n      s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n      new ZooKeeperThread();\n      new SenderThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n      String line;\n      while ((line=is.readLine()) != null) {\n        percentage=Integer.parseInt(line);\n      }\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n else {\n    doUsage();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 435,
        "startColumnNumber" : 12,
        "endLineNumber" : 435,
        "endColumnNumber" : 28
      },
      "nodeContext" : "args.length == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "args.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 474,
      "startColumnNumber" : 19,
      "endLineNumber" : 474,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 474,
        "startColumnNumber" : 19,
        "endLineNumber" : 474,
        "endColumnNumber" : 35
      },
      "nodeContext" : "args.length == 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 693,
        "startLineNumber" : 474,
        "startColumnNumber" : 15,
        "endLineNumber" : 492,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 2) {\n  host=args[1];\n  String hostPort[]=args[0].split(\":\");\n  try {\n    s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n    new ZooKeeperThread();\n    new SenderThread();\n    BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n    String line;\n    while ((line=is.readLine()) != null) {\n      percentage=Integer.parseInt(line);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n else {\n  doUsage();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 435,
        "startColumnNumber" : 8,
        "endLineNumber" : 492,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 1) {\n  try {\n    int port=Integer.parseInt(args[0]);\n    ss=new ServerSocket(port);\n    new AcceptorThread();\n    new ReporterThread();\n    BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n    String line;\n    while ((line=is.readLine()) != null) {\n      try {\n        String cmdNumber[]=line.split(\" \");\n        if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n          int number=Integer.parseInt(cmdNumber[1]);\n          if (number < 0 || number > 100) {\n            throw new NumberFormatException(\"must be between 0 and 100\");\n          }\n          sendChange(number);\n        }\n else         if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n          int number=Integer.parseInt(cmdNumber[1]);\n          Thread.sleep(number * 1000);\n        }\n else         if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n          sf=new PrintStream(cmdNumber[1]);\n        }\n else {\n          System.err.println(\"Commands must be:\");\n          System.err.println(\"\\tpercentage new_write_percentage\");\n          System.err.println(\"\\tsleep seconds_to_sleep\");\n          System.err.println(\"\\tsave file_to_save_output\");\n        }\n      }\n catch (      NumberFormatException e) {\n        System.out.println(\"Not a valid number: \" + e.getMessage());\n      }\n    }\n  }\n catch (  NumberFormatException e) {\n    doUsage();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    System.exit(2);\n  }\n}\n else if (args.length == 2) {\n  host=args[1];\n  String hostPort[]=args[0].split(\":\");\n  try {\n    s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n    new ZooKeeperThread();\n    new SenderThread();\n    BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n    String line;\n    while ((line=is.readLine()) != null) {\n      percentage=Integer.parseInt(line);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n else {\n  doUsage();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 341,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2752,
        "startLineNumber" : 434,
        "startColumnNumber" : 71,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (args.length == 1) {\n    try {\n      int port=Integer.parseInt(args[0]);\n      ss=new ServerSocket(port);\n      new AcceptorThread();\n      new ReporterThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n      String line;\n      while ((line=is.readLine()) != null) {\n        try {\n          String cmdNumber[]=line.split(\" \");\n          if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            if (number < 0 || number > 100) {\n              throw new NumberFormatException(\"must be between 0 and 100\");\n            }\n            sendChange(number);\n          }\n else           if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            Thread.sleep(number * 1000);\n          }\n else           if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n            sf=new PrintStream(cmdNumber[1]);\n          }\n else {\n            System.err.println(\"Commands must be:\");\n            System.err.println(\"\\tpercentage new_write_percentage\");\n            System.err.println(\"\\tsleep seconds_to_sleep\");\n            System.err.println(\"\\tsave file_to_save_output\");\n          }\n        }\n catch (        NumberFormatException e) {\n          System.out.println(\"Not a valid number: \" + e.getMessage());\n        }\n      }\n    }\n catch (    NumberFormatException e) {\n      doUsage();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n      System.exit(2);\n    }\n  }\n else   if (args.length == 2) {\n    host=args[1];\n    String hostPort[]=args[0].split(\":\");\n    try {\n      s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n      new ZooKeeperThread();\n      new SenderThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n      String line;\n      while ((line=is.readLine()) != null) {\n        percentage=Integer.parseInt(line);\n      }\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n else {\n    doUsage();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2890,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param args\n * @throws InterruptedException\n */\npublic static void main(String[] args) throws InterruptedException {\n  if (args.length == 1) {\n    try {\n      int port=Integer.parseInt(args[0]);\n      ss=new ServerSocket(port);\n      new AcceptorThread();\n      new ReporterThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(System.in));\n      String line;\n      while ((line=is.readLine()) != null) {\n        try {\n          String cmdNumber[]=line.split(\" \");\n          if (cmdNumber[0].equals(\"percentage\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            if (number < 0 || number > 100) {\n              throw new NumberFormatException(\"must be between 0 and 100\");\n            }\n            sendChange(number);\n          }\n else           if (cmdNumber[0].equals(\"sleep\") && cmdNumber.length > 1) {\n            int number=Integer.parseInt(cmdNumber[1]);\n            Thread.sleep(number * 1000);\n          }\n else           if (cmdNumber[0].equals(\"save\") && cmdNumber.length > 1) {\n            sf=new PrintStream(cmdNumber[1]);\n          }\n else {\n            System.err.println(\"Commands must be:\");\n            System.err.println(\"\\tpercentage new_write_percentage\");\n            System.err.println(\"\\tsleep seconds_to_sleep\");\n            System.err.println(\"\\tsave file_to_save_output\");\n          }\n        }\n catch (        NumberFormatException e) {\n          System.out.println(\"Not a valid number: \" + e.getMessage());\n        }\n      }\n    }\n catch (    NumberFormatException e) {\n      doUsage();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n      System.exit(2);\n    }\n  }\n else   if (args.length == 2) {\n    host=args[1];\n    String hostPort[]=args[0].split(\":\");\n    try {\n      s=new Socket(hostPort[0],Integer.parseInt(hostPort[1]));\n      new ZooKeeperThread();\n      new SenderThread();\n      BufferedReader is=new BufferedReader(new InputStreamReader(s.getInputStream()));\n      String line;\n      while ((line=is.readLine()) != null) {\n        percentage=Integer.parseInt(line);\n      }\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n else {\n    doUsage();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 474,
        "startColumnNumber" : 19,
        "endLineNumber" : 474,
        "endColumnNumber" : 35
      },
      "nodeContext" : "args.length == 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 435,
    "startColumnNumber" : 12,
    "endLineNumber" : 435,
    "endColumnNumber" : 23
  }, {
    "charLength" : 11,
    "startLineNumber" : 474,
    "startColumnNumber" : 19,
    "endLineNumber" : 474,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}