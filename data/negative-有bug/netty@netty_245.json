{
  "id" : 245,
  "expression" : "iterator",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 205,
      "startColumnNumber" : 40,
      "endLineNumber" : 205,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 205,
        "startColumnNumber" : 40,
        "endLineNumber" : 205,
        "endColumnNumber" : 58
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 205,
        "startColumnNumber" : 40,
        "endLineNumber" : 205,
        "endColumnNumber" : 83
      },
      "nodeContext" : "iterator.hasNext() ? iterator.next() : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 205,
        "startColumnNumber" : 27,
        "endLineNumber" : 205,
        "endColumnNumber" : 83
      },
      "nodeContext" : "parentRule=iterator.hasNext() ? iterator.next() : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 84
      },
      "nodeContext" : "IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 200,
        "startColumnNumber" : 90,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1295,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <ol> <li> Sort the list </li> <li> Remove over-lapping subnet </li> <li> Sort the list again </li> </ol>\n */\n@SuppressWarnings(\"ConstantConditions\") private static List<IpSubnetFilterRule> sortAndFilter(List<IpSubnetFilterRule> rules){\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 84
      },
      "nodeContext" : "IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<io.netty.handler.ipfilter.IpSubnetFilterRule>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 205,
      "startColumnNumber" : 61,
      "endLineNumber" : 205,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 205,
        "startColumnNumber" : 61,
        "endLineNumber" : 205,
        "endColumnNumber" : 76
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 205,
        "startColumnNumber" : 40,
        "endLineNumber" : 205,
        "endColumnNumber" : 83
      },
      "nodeContext" : "iterator.hasNext() ? iterator.next() : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 205,
        "startColumnNumber" : 27,
        "endLineNumber" : 205,
        "endColumnNumber" : 83
      },
      "nodeContext" : "parentRule=iterator.hasNext() ? iterator.next() : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 84
      },
      "nodeContext" : "IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 200,
        "startColumnNumber" : 90,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1295,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <ol> <li> Sort the list </li> <li> Remove over-lapping subnet </li> <li> Sort the list again </li> </ol>\n */\n@SuppressWarnings(\"ConstantConditions\") private static List<IpSubnetFilterRule> sortAndFilter(List<IpSubnetFilterRule> rules){\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 205,
        "endColumnNumber" : 84
      },
      "nodeContext" : "IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<io.netty.handler.ipfilter.IpSubnetFilterRule>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 210,
      "startColumnNumber" : 15,
      "endLineNumber" : 210,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 210,
        "startColumnNumber" : 15,
        "endLineNumber" : 210,
        "endColumnNumber" : 33
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 210,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  IpSubnetFilterRule childRule=iterator.next();\n  if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n    toKeep.add(childRule);\n    parentRule=childRule;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 200,
        "startColumnNumber" : 90,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1295,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <ol> <li> Sort the list </li> <li> Remove over-lapping subnet </li> <li> Sort the list again </li> </ol>\n */\n@SuppressWarnings(\"ConstantConditions\") private static List<IpSubnetFilterRule> sortAndFilter(List<IpSubnetFilterRule> rules){\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 210,
        "startColumnNumber" : 15,
        "endLineNumber" : 210,
        "endColumnNumber" : 33
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<io.netty.handler.ipfilter.IpSubnetFilterRule>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 213,
      "startColumnNumber" : 43,
      "endLineNumber" : 213,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 213,
        "startColumnNumber" : 43,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 213,
        "startColumnNumber" : 31,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "childRule=iterator.next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 59
      },
      "nodeContext" : "IpSubnetFilterRule childRule=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 210,
        "startColumnNumber" : 35,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  IpSubnetFilterRule childRule=iterator.next();\n  if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n    toKeep.add(childRule);\n    parentRule=childRule;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 210,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  IpSubnetFilterRule childRule=iterator.next();\n  if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n    toKeep.add(childRule);\n    parentRule=childRule;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 200,
        "startColumnNumber" : 90,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1295,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <ol> <li> Sort the list </li> <li> Remove over-lapping subnet </li> <li> Sort the list again </li> </ol>\n */\n@SuppressWarnings(\"ConstantConditions\") private static List<IpSubnetFilterRule> sortAndFilter(List<IpSubnetFilterRule> rules){\n  Collections.sort(rules);\n  Iterator<IpSubnetFilterRule> iterator=rules.iterator();\n  List<IpSubnetFilterRule> toKeep=new ArrayList<IpSubnetFilterRule>();\n  IpSubnetFilterRule parentRule=iterator.hasNext() ? iterator.next() : null;\n  if (parentRule != null) {\n    toKeep.add(parentRule);\n  }\n  while (iterator.hasNext()) {\n    IpSubnetFilterRule childRule=iterator.next();\n    if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(),1))) {\n      toKeep.add(childRule);\n      parentRule=childRule;\n    }\n  }\n  return toKeep;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 59
      },
      "nodeContext" : "IpSubnetFilterRule childRule=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<io.netty.handler.ipfilter.IpSubnetFilterRule>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 205,
    "startColumnNumber" : 40,
    "endLineNumber" : 205,
    "endColumnNumber" : 48
  }, {
    "charLength" : 8,
    "startLineNumber" : 205,
    "startColumnNumber" : 61,
    "endLineNumber" : 205,
    "endColumnNumber" : 69
  }, {
    "charLength" : 8,
    "startLineNumber" : 210,
    "startColumnNumber" : 15,
    "endLineNumber" : 210,
    "endColumnNumber" : 23
  }, {
    "charLength" : 8,
    "startLineNumber" : 213,
    "startColumnNumber" : 43,
    "endLineNumber" : 213,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}