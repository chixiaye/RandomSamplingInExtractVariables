{
  "id" : 26,
  "expression" : "0",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/actions/NavigatorHandlerObjectCreateBase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 140,
      "startColumnNumber" : 103,
      "endLineNumber" : 140,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "(objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 139,
        "startColumnNumber" : 39,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 139,
        "startColumnNumber" : 26,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 140,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final boolean openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4818,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DBNNode container=null;\n  if (isFolder || (element instanceof DBNContainer && !(element instanceof DBNDataSource))) {\n    container=element;\n  }\n else {\n    DBNNode parentNode=element.getParentNode();\n    if (parentNode instanceof DBNContainer) {\n      container=parentNode;\n    }\n  }\n  if (container == null) {\n    throw new DBException(\"Can't detect container for '\" + element.getNodeName() + \"'\");\n  }\n  if (container instanceof DBNDatabaseNode && ObjectPropertyTester.isMetadataChangeDisabled((DBNDatabaseNode)container)) {\n    throw new DBException(\"Object create not available in simple view mode\");\n  }\n  if (newObjectType == null) {\n    Class<?> childType=container instanceof DBNContainer ? ((DBNContainer)container).getChildrenClass() : null;\n    if (childType == null) {\n      throw new DBException(\"Can't determine child element type for container '\" + container + \"'\");\n    }\n    newObjectType=childType;\n  }\n  if (newObjectType == IProject.class) {\n    return NavigatorHandlerProjectCreate.createNewProject(workbenchWindow);\n  }\n  DBSObject sourceObject=copyFrom == null ? null : copyFrom.getObject();\n  final Object parentObject;\n  if (container instanceof DBNDatabaseNode) {\n    parentObject=((DBNDatabaseNode)container).getValueObject();\n  }\n else   if (container instanceof DBNProject) {\n    parentObject=((DBNProject)container).getProject();\n  }\n else   if (container instanceof DBNProjectDatabases) {\n    parentObject=container.getOwnerProject();\n  }\n else   if (container instanceof DBNLocalFolder) {\n    parentObject=((DBNLocalFolder)container).getFolder();\n  }\n else {\n    parentObject=null;\n  }\n  if (container.hasChildren(false) || parentObject instanceof DBSInstanceLazy) {\n    try {\n      DBNNode finalContainer=container;\n      UIUtils.runInProgressService(monitor -> {\n        try {\n          if (finalContainer.hasChildren(false)) {\n            finalContainer.getChildren(monitor);\n          }\n          if (parentObject instanceof DBSInstanceLazy) {\n            ((DBSInstanceLazy)parentObject).checkInstanceConnection(monitor);\n          }\n        }\n catch (        DBException e) {\n          throw new InvocationTargetException(e);\n        }\n      }\n);\n    }\n catch (    InvocationTargetException e) {\n      DBWorkbench.getPlatformUI().showError(\"New object\",\"Error creating new object\",e);\n    }\ncatch (    InterruptedException e) {\n    }\n  }\n  DBEObjectManager<?> objectManager=DBWorkbench.getPlatform().getEditorsRegistry().getObjectManager(newObjectType);\n  if (objectManager == null) {\n    throw new DBException(\"Object manager not found for type '\" + newObjectType.getName() + \"'\");\n  }\n  DBEObjectMaker objectMaker=(DBEObjectMaker)objectManager;\n  DBPDataSource dataSource=container instanceof DBNDatabaseNode ? ((DBNDatabaseNode)container).getDataSource() : null;\n  final boolean openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0;\n  CommandTarget commandTarget=getCommandTarget(workbenchWindow,container,newObjectType,openEditor);\n  Map<String,Object> options=new HashMap<>();\n  options.put(DBEObjectMaker.OPTION_CONTAINER,container);\n  options.put(DBEObjectMaker.OPTION_OBJECT_TYPE,newObjectType);\n  createDatabaseObject(commandTarget,objectMaker,parentObject instanceof DBPObject ? (DBPObject)parentObject : null,sourceObject,options);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4965,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DBNNode container=null;\n  if (isFolder || (element instanceof DBNContainer && !(element instanceof DBNDataSource))) {\n    container=element;\n  }\n else {\n    DBNNode parentNode=element.getParentNode();\n    if (parentNode instanceof DBNContainer) {\n      container=parentNode;\n    }\n  }\n  if (container == null) {\n    throw new DBException(\"Can't detect container for '\" + element.getNodeName() + \"'\");\n  }\n  if (container instanceof DBNDatabaseNode && ObjectPropertyTester.isMetadataChangeDisabled((DBNDatabaseNode)container)) {\n    throw new DBException(\"Object create not available in simple view mode\");\n  }\n  if (newObjectType == null) {\n    Class<?> childType=container instanceof DBNContainer ? ((DBNContainer)container).getChildrenClass() : null;\n    if (childType == null) {\n      throw new DBException(\"Can't determine child element type for container '\" + container + \"'\");\n    }\n    newObjectType=childType;\n  }\n  if (newObjectType == IProject.class) {\n    return NavigatorHandlerProjectCreate.createNewProject(workbenchWindow);\n  }\n  DBSObject sourceObject=copyFrom == null ? null : copyFrom.getObject();\n  final Object parentObject;\n  if (container instanceof DBNDatabaseNode) {\n    parentObject=((DBNDatabaseNode)container).getValueObject();\n  }\n else   if (container instanceof DBNProject) {\n    parentObject=((DBNProject)container).getProject();\n  }\n else   if (container instanceof DBNProjectDatabases) {\n    parentObject=container.getOwnerProject();\n  }\n else   if (container instanceof DBNLocalFolder) {\n    parentObject=((DBNLocalFolder)container).getFolder();\n  }\n else {\n    parentObject=null;\n  }\n  if (container.hasChildren(false) || parentObject instanceof DBSInstanceLazy) {\n    try {\n      DBNNode finalContainer=container;\n      UIUtils.runInProgressService(monitor -> {\n        try {\n          if (finalContainer.hasChildren(false)) {\n            finalContainer.getChildren(monitor);\n          }\n          if (parentObject instanceof DBSInstanceLazy) {\n            ((DBSInstanceLazy)parentObject).checkInstanceConnection(monitor);\n          }\n        }\n catch (        DBException e) {\n          throw new InvocationTargetException(e);\n        }\n      }\n);\n    }\n catch (    InvocationTargetException e) {\n      DBWorkbench.getPlatformUI().showError(\"New object\",\"Error creating new object\",e);\n    }\ncatch (    InterruptedException e) {\n    }\n  }\n  DBEObjectManager<?> objectManager=DBWorkbench.getPlatform().getEditorsRegistry().getObjectManager(newObjectType);\n  if (objectManager == null) {\n    throw new DBException(\"Object manager not found for type '\" + newObjectType.getName() + \"'\");\n  }\n  DBEObjectMaker objectMaker=(DBEObjectMaker)objectManager;\n  DBPDataSource dataSource=container instanceof DBNDatabaseNode ? ((DBNDatabaseNode)container).getDataSource() : null;\n  final boolean openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0;\n  CommandTarget commandTarget=getCommandTarget(workbenchWindow,container,newObjectType,openEditor);\n  Map<String,Object> options=new HashMap<>();\n  options.put(DBEObjectMaker.OPTION_CONTAINER,container);\n  options.put(DBEObjectMaker.OPTION_OBJECT_TYPE,newObjectType);\n  createDatabaseObject(commandTarget,objectMaker,parentObject instanceof DBPObject ? (DBPObject)parentObject : null,sourceObject,options);\n}\n catch (Throwable e) {\n  DBWorkbench.getPlatformUI().showError(\"Create object\",null,e);\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 458,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5003,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    DBNNode container=null;\n    if (isFolder || (element instanceof DBNContainer && !(element instanceof DBNDataSource))) {\n      container=element;\n    }\n else {\n      DBNNode parentNode=element.getParentNode();\n      if (parentNode instanceof DBNContainer) {\n        container=parentNode;\n      }\n    }\n    if (container == null) {\n      throw new DBException(\"Can't detect container for '\" + element.getNodeName() + \"'\");\n    }\n    if (container instanceof DBNDatabaseNode && ObjectPropertyTester.isMetadataChangeDisabled((DBNDatabaseNode)container)) {\n      throw new DBException(\"Object create not available in simple view mode\");\n    }\n    if (newObjectType == null) {\n      Class<?> childType=container instanceof DBNContainer ? ((DBNContainer)container).getChildrenClass() : null;\n      if (childType == null) {\n        throw new DBException(\"Can't determine child element type for container '\" + container + \"'\");\n      }\n      newObjectType=childType;\n    }\n    if (newObjectType == IProject.class) {\n      return NavigatorHandlerProjectCreate.createNewProject(workbenchWindow);\n    }\n    DBSObject sourceObject=copyFrom == null ? null : copyFrom.getObject();\n    final Object parentObject;\n    if (container instanceof DBNDatabaseNode) {\n      parentObject=((DBNDatabaseNode)container).getValueObject();\n    }\n else     if (container instanceof DBNProject) {\n      parentObject=((DBNProject)container).getProject();\n    }\n else     if (container instanceof DBNProjectDatabases) {\n      parentObject=container.getOwnerProject();\n    }\n else     if (container instanceof DBNLocalFolder) {\n      parentObject=((DBNLocalFolder)container).getFolder();\n    }\n else {\n      parentObject=null;\n    }\n    if (container.hasChildren(false) || parentObject instanceof DBSInstanceLazy) {\n      try {\n        DBNNode finalContainer=container;\n        UIUtils.runInProgressService(monitor -> {\n          try {\n            if (finalContainer.hasChildren(false)) {\n              finalContainer.getChildren(monitor);\n            }\n            if (parentObject instanceof DBSInstanceLazy) {\n              ((DBSInstanceLazy)parentObject).checkInstanceConnection(monitor);\n            }\n          }\n catch (          DBException e) {\n            throw new InvocationTargetException(e);\n          }\n        }\n);\n      }\n catch (      InvocationTargetException e) {\n        DBWorkbench.getPlatformUI().showError(\"New object\",\"Error creating new object\",e);\n      }\ncatch (      InterruptedException e) {\n      }\n    }\n    DBEObjectManager<?> objectManager=DBWorkbench.getPlatform().getEditorsRegistry().getObjectManager(newObjectType);\n    if (objectManager == null) {\n      throw new DBException(\"Object manager not found for type '\" + newObjectType.getName() + \"'\");\n    }\n    DBEObjectMaker objectMaker=(DBEObjectMaker)objectManager;\n    DBPDataSource dataSource=container instanceof DBNDatabaseNode ? ((DBNDatabaseNode)container).getDataSource() : null;\n    final boolean openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0;\n    CommandTarget commandTarget=getCommandTarget(workbenchWindow,container,newObjectType,openEditor);\n    Map<String,Object> options=new HashMap<>();\n    options.put(DBEObjectMaker.OPTION_CONTAINER,container);\n    options.put(DBEObjectMaker.OPTION_OBJECT_TYPE,newObjectType);\n    createDatabaseObject(commandTarget,objectMaker,parentObject instanceof DBPObject ? (DBPObject)parentObject : null,sourceObject,options);\n  }\n catch (  Throwable e) {\n    DBWorkbench.getPlatformUI().showError(\"Create object\",null,e);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 461,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5176,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected boolean createNewObject(final IWorkbenchWindow workbenchWindow,DBNNode element,@Nullable Class<?> newObjectType,DBNDatabaseNode copyFrom,boolean isFolder){\n  try {\n    DBNNode container=null;\n    if (isFolder || (element instanceof DBNContainer && !(element instanceof DBNDataSource))) {\n      container=element;\n    }\n else {\n      DBNNode parentNode=element.getParentNode();\n      if (parentNode instanceof DBNContainer) {\n        container=parentNode;\n      }\n    }\n    if (container == null) {\n      throw new DBException(\"Can't detect container for '\" + element.getNodeName() + \"'\");\n    }\n    if (container instanceof DBNDatabaseNode && ObjectPropertyTester.isMetadataChangeDisabled((DBNDatabaseNode)container)) {\n      throw new DBException(\"Object create not available in simple view mode\");\n    }\n    if (newObjectType == null) {\n      Class<?> childType=container instanceof DBNContainer ? ((DBNContainer)container).getChildrenClass() : null;\n      if (childType == null) {\n        throw new DBException(\"Can't determine child element type for container '\" + container + \"'\");\n      }\n      newObjectType=childType;\n    }\n    if (newObjectType == IProject.class) {\n      return NavigatorHandlerProjectCreate.createNewProject(workbenchWindow);\n    }\n    DBSObject sourceObject=copyFrom == null ? null : copyFrom.getObject();\n    final Object parentObject;\n    if (container instanceof DBNDatabaseNode) {\n      parentObject=((DBNDatabaseNode)container).getValueObject();\n    }\n else     if (container instanceof DBNProject) {\n      parentObject=((DBNProject)container).getProject();\n    }\n else     if (container instanceof DBNProjectDatabases) {\n      parentObject=container.getOwnerProject();\n    }\n else     if (container instanceof DBNLocalFolder) {\n      parentObject=((DBNLocalFolder)container).getFolder();\n    }\n else {\n      parentObject=null;\n    }\n    if (container.hasChildren(false) || parentObject instanceof DBSInstanceLazy) {\n      try {\n        DBNNode finalContainer=container;\n        UIUtils.runInProgressService(monitor -> {\n          try {\n            if (finalContainer.hasChildren(false)) {\n              finalContainer.getChildren(monitor);\n            }\n            if (parentObject instanceof DBSInstanceLazy) {\n              ((DBSInstanceLazy)parentObject).checkInstanceConnection(monitor);\n            }\n          }\n catch (          DBException e) {\n            throw new InvocationTargetException(e);\n          }\n        }\n);\n      }\n catch (      InvocationTargetException e) {\n        DBWorkbench.getPlatformUI().showError(\"New object\",\"Error creating new object\",e);\n      }\ncatch (      InterruptedException e) {\n      }\n    }\n    DBEObjectManager<?> objectManager=DBWorkbench.getPlatform().getEditorsRegistry().getObjectManager(newObjectType);\n    if (objectManager == null) {\n      throw new DBException(\"Object manager not found for type '\" + newObjectType.getName() + \"'\");\n    }\n    DBEObjectMaker objectMaker=(DBEObjectMaker)objectManager;\n    DBPDataSource dataSource=container instanceof DBNDatabaseNode ? ((DBNDatabaseNode)container).getDataSource() : null;\n    final boolean openEditor=dataSource != null && (objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0;\n    CommandTarget commandTarget=getCommandTarget(workbenchWindow,container,newObjectType,openEditor);\n    Map<String,Object> options=new HashMap<>();\n    options.put(DBEObjectMaker.OPTION_CONTAINER,container);\n    options.put(DBEObjectMaker.OPTION_OBJECT_TYPE,newObjectType);\n    createDatabaseObject(commandTarget,objectMaker,parentObject instanceof DBPObject ? (DBPObject)parentObject : null,sourceObject,options);\n  }\n catch (  Throwable e) {\n    DBWorkbench.getPlatformUI().showError(\"Create object\",null,e);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 489,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "(objectMaker.getMakerOptions(dataSource) & DBEObjectMaker.FEATURE_EDITOR_ON_CREATE) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 140,
    "startColumnNumber" : 103,
    "endLineNumber" : 140,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}