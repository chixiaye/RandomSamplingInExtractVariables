{
  "id" : 441,
  "expression" : "\"there are redundant configure for listener `\" + entry.getKey() + \"`\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/validator/MultipleListenerValidator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"there are redundant configure for listener `\" + entry.getKey() + \"`\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 83,
      "startColumnNumber" : 51,
      "endLineNumber" : 83,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 83,
        "startColumnNumber" : 22,
        "endLineNumber" : 83,
        "endColumnNumber" : 121
      },
      "nodeContext" : "new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 122
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 82,
        "startColumnNumber" : 45,
        "endLineNumber" : 84,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().size() > 2) {\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2938,
        "startLineNumber" : 81,
        "startColumnNumber" : 81,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 283,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4859,
        "startLineNumber" : 50,
        "startColumnNumber" : 117,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5635,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * validate the configure of `advertisedListeners`, `internalListenerName`, `advertisedAddress`. 1. `advertisedListeners` and `advertisedAddress` must not appear together. 2. the listener name in `advertisedListeners` must not duplicate. 3. user can not assign same 'host:port' to different listener. 4. if `internalListenerName` is absent, the first `listener` in the `advertisedListeners` will be the `internalListenerName`. 5. if pulsar do not specify `brokerServicePortTls`, should only contain one entry of `pulsar://` per listener name.\n * @param config the pulsar broker configure.\n * @return\n */\npublic static Map<String,AdvertisedListener> validateAndAnalysisAdvertisedListener(ServiceConfiguration config){\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 516,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 122
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"there are redundant configure for listener `\" + entry.getKey() + \"`\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 93,
      "startColumnNumber" : 63,
      "endLineNumber" : 93,
      "endColumnNumber" : 132
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 93,
        "startColumnNumber" : 34,
        "endLineNumber" : 93,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 134
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 92,
        "startColumnNumber" : 31,
        "endLineNumber" : 94,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 90,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (pulsarAddress == null) {\n  pulsarAddress=uri;\n}\n else {\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 89,
        "startColumnNumber" : 81,
        "endLineNumber" : 95,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (pulsarAddress == null) {\n    pulsarAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n  if (pulsarAddress == null) {\n    pulsarAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n else if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n  if (pulsarSslAddress == null) {\n    pulsarSslAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  URI uri=URI.create(strUri);\n  if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n    if (pulsarAddress == null) {\n      pulsarAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n else   if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n    if (pulsarSslAddress == null) {\n      pulsarSslAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n  String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n  reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  sets.add(entry.getKey());\n  if (sets.size() > 1) {\n    throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  URI uri=URI.create(strUri);\n  if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n    if (pulsarAddress == null) {\n      pulsarAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n else   if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n    if (pulsarSslAddress == null) {\n      pulsarSslAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n  String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n  reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  sets.add(entry.getKey());\n  if (sets.size() > 1) {\n    throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n  }\n}\n catch (Throwable cause) {\n  throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 149,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 86,
        "startColumnNumber" : 57,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    URI uri=URI.create(strUri);\n    if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n      if (pulsarAddress == null) {\n        pulsarAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n else     if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n      if (pulsarSslAddress == null) {\n        pulsarSslAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n    String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n    reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    sets.add(entry.getKey());\n    if (sets.size() > 1) {\n      throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n    }\n  }\n catch (  Throwable cause) {\n    throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (final String strUri : entry.getValue()) {\n  try {\n    URI uri=URI.create(strUri);\n    if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n      if (pulsarAddress == null) {\n        pulsarAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n else     if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n      if (pulsarSslAddress == null) {\n        pulsarSslAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n    String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n    reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    sets.add(entry.getKey());\n    if (sets.size() > 1) {\n      throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n    }\n  }\n catch (  Throwable cause) {\n    throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2938,
        "startLineNumber" : 81,
        "startColumnNumber" : 81,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 283,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4859,
        "startLineNumber" : 50,
        "startColumnNumber" : 117,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5635,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * validate the configure of `advertisedListeners`, `internalListenerName`, `advertisedAddress`. 1. `advertisedListeners` and `advertisedAddress` must not appear together. 2. the listener name in `advertisedListeners` must not duplicate. 3. user can not assign same 'host:port' to different listener. 4. if `internalListenerName` is absent, the first `listener` in the `advertisedListeners` will be the `internalListenerName`. 5. if pulsar do not specify `brokerServicePortTls`, should only contain one entry of `pulsar://` per listener name.\n * @param config the pulsar broker configure.\n * @return\n */\npublic static Map<String,AdvertisedListener> validateAndAnalysisAdvertisedListener(ServiceConfiguration config){\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 516,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 93,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 134
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"there are redundant configure for listener `\" + entry.getKey() + \"`\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 99,
      "startColumnNumber" : 63,
      "endLineNumber" : 99,
      "endColumnNumber" : 132
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 99,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 134
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 98,
        "startColumnNumber" : 31,
        "endLineNumber" : 100,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 96,
        "startColumnNumber" : 24,
        "endLineNumber" : 100,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (pulsarSslAddress == null) {\n  pulsarSslAddress=uri;\n}\n else {\n  throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 95,
        "startColumnNumber" : 92,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (pulsarSslAddress == null) {\n    pulsarSslAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 95,
        "startColumnNumber" : 27,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n  if (pulsarSslAddress == null) {\n    pulsarSslAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n  if (pulsarAddress == null) {\n    pulsarAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n else if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n  if (pulsarSslAddress == null) {\n    pulsarSslAddress=uri;\n  }\n else {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  URI uri=URI.create(strUri);\n  if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n    if (pulsarAddress == null) {\n      pulsarAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n else   if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n    if (pulsarSslAddress == null) {\n      pulsarSslAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n  String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n  reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  sets.add(entry.getKey());\n  if (sets.size() > 1) {\n    throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  URI uri=URI.create(strUri);\n  if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n    if (pulsarAddress == null) {\n      pulsarAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n else   if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n    if (pulsarSslAddress == null) {\n      pulsarSslAddress=uri;\n    }\n else {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n  }\n  String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n  reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n  sets.add(entry.getKey());\n  if (sets.size() > 1) {\n    throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n  }\n}\n catch (Throwable cause) {\n  throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 149,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1598,
        "startLineNumber" : 86,
        "startColumnNumber" : 57,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    URI uri=URI.create(strUri);\n    if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n      if (pulsarAddress == null) {\n        pulsarAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n else     if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n      if (pulsarSslAddress == null) {\n        pulsarSslAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n    String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n    reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    sets.add(entry.getKey());\n    if (sets.size() > 1) {\n      throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n    }\n  }\n catch (  Throwable cause) {\n    throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 112,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (final String strUri : entry.getValue()) {\n  try {\n    URI uri=URI.create(strUri);\n    if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n      if (pulsarAddress == null) {\n        pulsarAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n else     if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n      if (pulsarSslAddress == null) {\n        pulsarSslAddress=uri;\n      }\n else {\n        throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n      }\n    }\n    String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n    reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n    sets.add(entry.getKey());\n    if (sets.size() > 1) {\n      throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n    }\n  }\n catch (  Throwable cause) {\n    throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 159,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2938,
        "startLineNumber" : 81,
        "startColumnNumber" : 81,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n  if (entry.getValue().size() > 2) {\n    throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n  }\n  URI pulsarAddress=null, pulsarSslAddress=null;\n  for (  final String strUri : entry.getValue()) {\n    try {\n      URI uri=URI.create(strUri);\n      if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n        if (pulsarAddress == null) {\n          pulsarAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n else       if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n        if (pulsarSslAddress == null) {\n          pulsarSslAddress=uri;\n        }\n else {\n          throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n        }\n      }\n      String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n      reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n      sets.add(entry.getKey());\n      if (sets.size() > 1) {\n        throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n      }\n    }\n catch (    Throwable cause) {\n      throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n    }\n  }\n  if (!config.getBrokerServicePortTls().isPresent()) {\n    if (pulsarSslAddress != null) {\n      throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n    }\n  }\n else {\n    if (pulsarSslAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n    }\n  }\n  if (pulsarAddress == null) {\n    throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n  }\n  result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 283,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4859,
        "startLineNumber" : 50,
        "startColumnNumber" : 117,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5635,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * validate the configure of `advertisedListeners`, `internalListenerName`, `advertisedAddress`. 1. `advertisedListeners` and `advertisedAddress` must not appear together. 2. the listener name in `advertisedListeners` must not duplicate. 3. user can not assign same 'host:port' to different listener. 4. if `internalListenerName` is absent, the first `listener` in the `advertisedListeners` will be the `internalListenerName`. 5. if pulsar do not specify `brokerServicePortTls`, should only contain one entry of `pulsar://` per listener name.\n * @param config the pulsar broker configure.\n * @return\n */\npublic static Map<String,AdvertisedListener> validateAndAnalysisAdvertisedListener(ServiceConfiguration config){\n  if (StringUtils.isNotBlank(config.getAdvertisedListeners()) && StringUtils.isNotBlank(config.getAdvertisedAddress())) {\n    throw new IllegalArgumentException(\"`advertisedListeners` and `advertisedAddress` must not appear together\");\n  }\n  if (StringUtils.isBlank(config.getAdvertisedListeners())) {\n    return Collections.emptyMap();\n  }\n  Optional<String> firstListenerName=Optional.empty();\n  Map<String,List<String>> listeners=Maps.newHashMap();\n  for (  final String str : StringUtils.split(config.getAdvertisedListeners(),\",\")) {\n    int index=str.indexOf(\":\");\n    if (index <= 0) {\n      throw new IllegalArgumentException(\"the configure entry `advertisedListeners` is invalid. because \" + str + \" do not contain listener name\");\n    }\n    String listenerName=StringUtils.trim(str.substring(0,index));\n    if (!firstListenerName.isPresent()) {\n      firstListenerName=Optional.of(listenerName);\n    }\n    String value=StringUtils.trim(str.substring(index + 1));\n    listeners.computeIfAbsent(listenerName,k -> Lists.newArrayListWithCapacity(2));\n    listeners.get(listenerName).add(value);\n  }\n  if (StringUtils.isBlank(config.getInternalListenerName())) {\n    config.setInternalListenerName(firstListenerName.get());\n  }\n  if (!listeners.containsKey(config.getInternalListenerName())) {\n    throw new IllegalArgumentException(\"the `advertisedListeners` configure do not contain `internalListenerName` entry\");\n  }\n  final Map<String,AdvertisedListener> result=Maps.newHashMap();\n  final Map<String,Set<String>> reverseMappings=Maps.newHashMap();\n  for (  final Map.Entry<String,List<String>> entry : listeners.entrySet()) {\n    if (entry.getValue().size() > 2) {\n      throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n    }\n    URI pulsarAddress=null, pulsarSslAddress=null;\n    for (    final String strUri : entry.getValue()) {\n      try {\n        URI uri=URI.create(strUri);\n        if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar\")) {\n          if (pulsarAddress == null) {\n            pulsarAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n else         if (StringUtils.equalsIgnoreCase(uri.getScheme(),\"pulsar+ssl\")) {\n          if (pulsarSslAddress == null) {\n            pulsarSslAddress=uri;\n          }\n else {\n            throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n          }\n        }\n        String hostPort=String.format(\"%s:%d\",uri.getHost(),uri.getPort());\n        reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        Set<String> sets=reverseMappings.computeIfAbsent(hostPort,k -> Sets.newTreeSet());\n        sets.add(entry.getKey());\n        if (sets.size() > 1) {\n          throw new IllegalArgumentException(\"must not specify `\" + hostPort + \"` to different listener.\");\n        }\n      }\n catch (      Throwable cause) {\n        throw new IllegalArgumentException(\"the value \" + strUri + \" in the `advertisedListeners` configure is invalid\");\n      }\n    }\n    if (!config.getBrokerServicePortTls().isPresent()) {\n      if (pulsarSslAddress != null) {\n        throw new IllegalArgumentException(\"If pulsar do not start ssl port, there is no need to configure \" + \" `pulsar+ssl` in `\" + entry.getKey() + \"` listener.\");\n      }\n    }\n else {\n      if (pulsarSslAddress == null) {\n        throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar+ssl` address.\");\n      }\n    }\n    if (pulsarAddress == null) {\n      throw new IllegalArgumentException(\"the `\" + entry.getKey() + \"` listener in the `advertisedListeners` \"+ \" do not specify `pulsar` address.\");\n    }\n    result.put(entry.getKey(),AdvertisedListener.builder().brokerServiceUrl(pulsarAddress).brokerServiceUrlTls(pulsarSslAddress).build());\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 516,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 99,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 134
      },
      "nodeContext" : "throw new IllegalArgumentException(\"there are redundant configure for listener `\" + entry.getKey() + \"`\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 69,
    "startLineNumber" : 83,
    "startColumnNumber" : 51,
    "endLineNumber" : 83,
    "endColumnNumber" : 120
  }, {
    "charLength" : 69,
    "startLineNumber" : 93,
    "startColumnNumber" : 63,
    "endLineNumber" : 93,
    "endColumnNumber" : 132
  }, {
    "charLength" : 69,
    "startLineNumber" : 99,
    "startColumnNumber" : 63,
    "endLineNumber" : 99,
    "endColumnNumber" : 132
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}