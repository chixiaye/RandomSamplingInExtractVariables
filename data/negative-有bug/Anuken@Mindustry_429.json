{
  "id" : 429,
  "expression" : "hitSize / tilesize",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/entities/comp/CrawlComp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hitSize / tilesize",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 68,
      "startColumnNumber" : 42,
      "endLineNumber" : 68,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 68,
        "startColumnNumber" : 42,
        "endLineNumber" : 68,
        "endColumnNumber" : 65
      },
      "nodeContext" : "hitSize / tilesize * 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 68,
        "startColumnNumber" : 30,
        "endLineNumber" : 68,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Math.max(0,hitSize / tilesize * 2f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 68,
        "startColumnNumber" : 25,
        "endLineNumber" : 68,
        "endColumnNumber" : 66
      },
      "nodeContext" : "(int)Math.max(0,hitSize / tilesize * 2f)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 66
      },
      "nodeContext" : "radius=(int)Math.max(0,hitSize / tilesize * 2f)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 67
      },
      "nodeContext" : "int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 65,
        "startColumnNumber" : 20,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  segmentRot=Angles.moveToward(segmentRot,rotation,type.segmentRotSpeed);\n  int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n  int count=0, solids=0, deeps=0;\n  lastDeepFloor=null;\n  for (int cx=-radius; cx <= radius; cx++) {\n    for (int cy=-radius; cy <= radius; cy++) {\n      if (cx * cx + cy * cy <= radius) {\n        count++;\n        Tile t=Vars.world.tileWorld(x + cx * tilesize,y + cy * tilesize);\n        if (t != null) {\n          if (t.solid()) {\n            solids++;\n          }\n          if (t.floor().isDeep()) {\n            deeps++;\n            lastDeepFloor=t.floor();\n          }\n          if (t.build != null && t.build.team != team) {\n            t.build.damage(team,type.crushDamage * Time.delta);\n          }\n          if (Mathf.chanceDelta(0.025)) {\n            Fx.crawlDust.at(t.worldx(),t.worldy(),t.floor().mapColor);\n          }\n        }\n else {\n          solids++;\n        }\n      }\n    }\n  }\n  if ((float)deeps / count < 0.75f) {\n    lastDeepFloor=null;\n  }\n  lastCrawlSlowdown=Mathf.lerp(1f,type.crawlSlowdown,Mathf.clamp((float)solids / count / type.crawlSlowdownFrac));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1909,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (moving()) {\n  segmentRot=Angles.moveToward(segmentRot,rotation,type.segmentRotSpeed);\n  int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n  int count=0, solids=0, deeps=0;\n  lastDeepFloor=null;\n  for (int cx=-radius; cx <= radius; cx++) {\n    for (int cy=-radius; cy <= radius; cy++) {\n      if (cx * cx + cy * cy <= radius) {\n        count++;\n        Tile t=Vars.world.tileWorld(x + cx * tilesize,y + cy * tilesize);\n        if (t != null) {\n          if (t.solid()) {\n            solids++;\n          }\n          if (t.floor().isDeep()) {\n            deeps++;\n            lastDeepFloor=t.floor();\n          }\n          if (t.build != null && t.build.team != team) {\n            t.build.damage(team,type.crushDamage * Time.delta);\n          }\n          if (Mathf.chanceDelta(0.025)) {\n            Fx.crawlDust.at(t.worldx(),t.worldy(),t.floor().mapColor);\n          }\n        }\n else {\n          solids++;\n        }\n      }\n    }\n  }\n  if ((float)deeps / count < 0.75f) {\n    lastDeepFloor=null;\n  }\n  lastCrawlSlowdown=Mathf.lerp(1f,type.crawlSlowdown,Mathf.clamp((float)solids / count / type.crawlSlowdownFrac));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 224,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2045,
        "startLineNumber" : 64,
        "startColumnNumber" : 24,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (moving()) {\n    segmentRot=Angles.moveToward(segmentRot,rotation,type.segmentRotSpeed);\n    int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n    int count=0, solids=0, deeps=0;\n    lastDeepFloor=null;\n    for (int cx=-radius; cx <= radius; cx++) {\n      for (int cy=-radius; cy <= radius; cy++) {\n        if (cx * cx + cy * cy <= radius) {\n          count++;\n          Tile t=Vars.world.tileWorld(x + cx * tilesize,y + cy * tilesize);\n          if (t != null) {\n            if (t.solid()) {\n              solids++;\n            }\n            if (t.floor().isDeep()) {\n              deeps++;\n              lastDeepFloor=t.floor();\n            }\n            if (t.build != null && t.build.team != team) {\n              t.build.damage(team,type.crushDamage * Time.delta);\n            }\n            if (Mathf.chanceDelta(0.025)) {\n              Fx.crawlDust.at(t.worldx(),t.worldy(),t.floor().mapColor);\n            }\n          }\n else {\n            solids++;\n          }\n        }\n      }\n    }\n    if ((float)deeps / count < 0.75f) {\n      lastDeepFloor=null;\n    }\n    lastCrawlSlowdown=Mathf.lerp(1f,type.crawlSlowdown,Mathf.clamp((float)solids / count / type.crawlSlowdownFrac));\n  }\n  segmentRot=Angles.clampRange(segmentRot,rotation,type.segmentMaxRot);\n  crawlTime+=vel.len();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void update(){\n  if (moving()) {\n    segmentRot=Angles.moveToward(segmentRot,rotation,type.segmentRotSpeed);\n    int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n    int count=0, solids=0, deeps=0;\n    lastDeepFloor=null;\n    for (int cx=-radius; cx <= radius; cx++) {\n      for (int cy=-radius; cy <= radius; cy++) {\n        if (cx * cx + cy * cy <= radius) {\n          count++;\n          Tile t=Vars.world.tileWorld(x + cx * tilesize,y + cy * tilesize);\n          if (t != null) {\n            if (t.solid()) {\n              solids++;\n            }\n            if (t.floor().isDeep()) {\n              deeps++;\n              lastDeepFloor=t.floor();\n            }\n            if (t.build != null && t.build.team != team) {\n              t.build.damage(team,type.crushDamage * Time.delta);\n            }\n            if (Mathf.chanceDelta(0.025)) {\n              Fx.crawlDust.at(t.worldx(),t.worldy(),t.floor().mapColor);\n            }\n          }\n else {\n            solids++;\n          }\n        }\n      }\n    }\n    if ((float)deeps / count < 0.75f) {\n      lastDeepFloor=null;\n    }\n    lastCrawlSlowdown=Mathf.lerp(1f,type.crawlSlowdown,Mathf.clamp((float)solids / count / type.crawlSlowdownFrac));\n  }\n  segmentRot=Angles.clampRange(segmentRot,rotation,type.segmentMaxRot);\n  crawlTime+=vel.len();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 67
      },
      "nodeContext" : "int radius=(int)Math.max(0,hitSize / tilesize * 2f);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 68,
    "startColumnNumber" : 42,
    "endLineNumber" : 68,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}