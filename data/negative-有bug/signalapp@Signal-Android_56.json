{
  "id" : 56,
  "expression" : "messageRecipient",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/jobs/PushTextSendJob.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 172,
      "startColumnNumber" : 10,
      "endLineNumber" : 172,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 172,
        "startColumnNumber" : 10,
        "endLineNumber" : 172,
        "endColumnNumber" : 43
      },
      "nodeContext" : "messageRecipient.isUnregistered()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 172,
        "startColumnNumber" : 6,
        "endLineNumber" : 174,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (messageRecipient.isUnregistered()) {\n  throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 172,
        "startColumnNumber" : 10,
        "endLineNumber" : 172,
        "endColumnNumber" : 43
      },
      "nodeContext" : "messageRecipient.isUnregistered()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 173,
      "startColumnNumber" : 48,
      "endLineNumber" : 173,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 173,
        "startColumnNumber" : 48,
        "endLineNumber" : 173,
        "endColumnNumber" : 72
      },
      "nodeContext" : "messageRecipient.getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 173,
        "startColumnNumber" : 48,
        "endLineNumber" : 173,
        "endColumnNumber" : 93
      },
      "nodeContext" : "messageRecipient.getId() + \" not registered!\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 173,
        "startColumnNumber" : 14,
        "endLineNumber" : 173,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 95
      },
      "nodeContext" : "throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 172,
        "startColumnNumber" : 45,
        "endLineNumber" : 174,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 172,
        "startColumnNumber" : 6,
        "endLineNumber" : 174,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (messageRecipient.isUnregistered()) {\n  throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 95
      },
      "nodeContext" : "throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 177,
      "startColumnNumber" : 106,
      "endLineNumber" : 177,
      "endColumnNumber" : 122
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 177,
        "startColumnNumber" : 60,
        "endLineNumber" : 177,
        "endColumnNumber" : 123
      },
      "nodeContext" : "RecipientUtil.toSignalServiceAddress(context,messageRecipient)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 177,
        "startColumnNumber" : 39,
        "endLineNumber" : 177,
        "endColumnNumber" : 123
      },
      "nodeContext" : "address=RecipientUtil.toSignalServiceAddress(context,messageRecipient)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 124
      },
      "nodeContext" : "SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 124
      },
      "nodeContext" : "SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 178,
      "startColumnNumber" : 74,
      "endLineNumber" : 178,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 178,
        "startColumnNumber" : 60,
        "endLineNumber" : 178,
        "endColumnNumber" : 91
      },
      "nodeContext" : "getProfileKey(messageRecipient)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 178,
        "startColumnNumber" : 39,
        "endLineNumber" : 178,
        "endColumnNumber" : 91
      },
      "nodeContext" : "profileKey=getProfileKey(messageRecipient)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 179,
      "startColumnNumber" : 105,
      "endLineNumber" : 179,
      "endColumnNumber" : 121
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 179,
        "startColumnNumber" : 60,
        "endLineNumber" : 179,
        "endColumnNumber" : 122
      },
      "nodeContext" : "UnidentifiedAccessUtil.getAccessFor(context,messageRecipient)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 39,
        "endLineNumber" : 179,
        "endColumnNumber" : 122
      },
      "nodeContext" : "unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 198,
      "startColumnNumber" : 72,
      "endLineNumber" : 198,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 198,
        "startColumnNumber" : 72,
        "endLineNumber" : 198,
        "endColumnNumber" : 96
      },
      "nodeContext" : "messageRecipient.getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 185
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 186
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 191,
        "startColumnNumber" : 87,
        "endLineNumber" : 200,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n  SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return syncAccess.isPresent();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 191,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n  Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n  SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return syncAccess.isPresent();\n}\n else {\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return result.getSuccess().isUnidentified();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 186
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  }, {
    "nodeContext" : "messageRecipient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 204,
      "startColumnNumber" : 72,
      "endLineNumber" : 204,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 204,
        "startColumnNumber" : 72,
        "endLineNumber" : 204,
        "endColumnNumber" : 96
      },
      "nodeContext" : "messageRecipient.getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 185
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 186
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 503,
        "startLineNumber" : 200,
        "startColumnNumber" : 13,
        "endLineNumber" : 206,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return result.getSuccess().isUnidentified();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 191,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n  Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n  SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return syncAccess.isPresent();\n}\n else {\n  SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n  SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n  DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n  return result.getSuccess().isUnidentified();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2844,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3069,
        "startLineNumber" : 167,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  rotateSenderCertificateIfNecessary();\n  Recipient messageRecipient=message.getIndividualRecipient().resolve();\n  if (messageRecipient.isUnregistered()) {\n    throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n  }\n  SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n  SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n  Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n  Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n  log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n  SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n  if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n    Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n    SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return syncAccess.isPresent();\n  }\n else {\n    SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n    SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n    DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n    return result.getSuccess().isUnidentified();\n  }\n}\n catch (UnregisteredUserException e) {\n  warn(TAG,\"Failure\",e);\n  throw new InsecureFallbackApprovalException(e);\n}\ncatch (ServerRejectedException e) {\n  throw new UndeliverableMessageException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3079,
        "startLineNumber" : 166,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3250,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean deliver(SmsMessageRecord message) throws UntrustedIdentityException, InsecureFallbackApprovalException, UndeliverableMessageException, IOException {\n  try {\n    rotateSenderCertificateIfNecessary();\n    Recipient messageRecipient=message.getIndividualRecipient().resolve();\n    if (messageRecipient.isUnregistered()) {\n      throw new UndeliverableMessageException(messageRecipient.getId() + \" not registered!\");\n    }\n    SignalServiceMessageSender messageSender=ApplicationDependencies.getSignalServiceMessageSender();\n    SignalServiceAddress address=RecipientUtil.toSignalServiceAddress(context,messageRecipient);\n    Optional<byte[]> profileKey=getProfileKey(messageRecipient);\n    Optional<UnidentifiedAccessPair> unidentifiedAccess=UnidentifiedAccessUtil.getAccessFor(context,messageRecipient);\n    log(TAG,String.valueOf(message.getDateSent()),\"Have access key to use: \" + unidentifiedAccess.isPresent());\n    SignalServiceDataMessage textSecureMessage=SignalServiceDataMessage.newBuilder().withTimestamp(message.getDateSent()).withBody(message.getBody()).withExpiration((int)(message.getExpiresIn() / 1000)).withProfileKey(profileKey.orNull()).asEndSessionMessage(message.isEndSession()).build();\n    if (Util.equals(TextSecurePreferences.getLocalUuid(context),address.getUuid())) {\n      Optional<UnidentifiedAccessPair> syncAccess=UnidentifiedAccessUtil.getAccessForSync(context);\n      SignalServiceSyncMessage syncMessage=buildSelfSendSyncMessage(context,textSecureMessage,syncAccess);\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendSyncMessage(syncMessage,syncAccess);\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return syncAccess.isPresent();\n    }\n else {\n      SignalLocalMetrics.IndividualMessageSend.onDeliveryStarted(messageId);\n      SendMessageResult result=messageSender.sendDataMessage(address,unidentifiedAccess,ContentHint.RESENDABLE,textSecureMessage,new MetricEventListener(messageId));\n      DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n      return result.getSuccess().isUnidentified();\n    }\n  }\n catch (  UnregisteredUserException e) {\n    warn(TAG,\"Failure\",e);\n    throw new InsecureFallbackApprovalException(e);\n  }\ncatch (  ServerRejectedException e) {\n    throw new UndeliverableMessageException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 186
      },
      "nodeContext" : "DatabaseFactory.getMessageLogDatabase(context).insertIfPossible(messageRecipient.getId(),message.getDateSent(),result,ContentHint.RESENDABLE,new MessageId(messageId,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.recipients.Recipient"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 172,
    "startColumnNumber" : 10,
    "endLineNumber" : 172,
    "endColumnNumber" : 26
  }, {
    "charLength" : 16,
    "startLineNumber" : 173,
    "startColumnNumber" : 48,
    "endLineNumber" : 173,
    "endColumnNumber" : 64
  }, {
    "charLength" : 16,
    "startLineNumber" : 177,
    "startColumnNumber" : 106,
    "endLineNumber" : 177,
    "endColumnNumber" : 122
  }, {
    "charLength" : 16,
    "startLineNumber" : 178,
    "startColumnNumber" : 74,
    "endLineNumber" : 178,
    "endColumnNumber" : 90
  }, {
    "charLength" : 16,
    "startLineNumber" : 179,
    "startColumnNumber" : 105,
    "endLineNumber" : 179,
    "endColumnNumber" : 121
  }, {
    "charLength" : 16,
    "startLineNumber" : 198,
    "startColumnNumber" : 72,
    "endLineNumber" : 198,
    "endColumnNumber" : 88
  }, {
    "charLength" : 16,
    "startLineNumber" : 204,
    "startColumnNumber" : 72,
    "endLineNumber" : 204,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  } ]
}