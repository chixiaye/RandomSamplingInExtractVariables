{
  "id" : 326,
  "expression" : "input instanceof Text",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopyStringInputRowParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "input instanceof Text",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 49,
      "startColumnNumber" : 8,
      "endLineNumber" : 49,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (input instanceof Text) {\n  return ImmutableList.of(parser.parse(((Text)input).toString()));\n}\n else if (input instanceof BytesWritable) {\n  BytesWritable valueBytes=(BytesWritable)input;\n  return parser.parseBatch(ByteBuffer.wrap(valueBytes.getBytes(),0,valueBytes.getLength()));\n}\n else {\n  throw new IAE(\"can't convert type [%s] to InputRow\",input.getClass().getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 421,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (input instanceof Text) {\n    return ImmutableList.of(parser.parse(((Text)input).toString()));\n  }\n else   if (input instanceof BytesWritable) {\n    BytesWritable valueBytes=(BytesWritable)input;\n    return parser.parseBatch(ByteBuffer.wrap(valueBytes.getBytes(),0,valueBytes.getLength()));\n  }\n else {\n    throw new IAE(\"can't convert type [%s] to InputRow\",input.getClass().getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public List<InputRow> parseBatch(Object input){\n  if (input instanceof Text) {\n    return ImmutableList.of(parser.parse(((Text)input).toString()));\n  }\n else   if (input instanceof BytesWritable) {\n    BytesWritable valueBytes=(BytesWritable)input;\n    return parser.parseBatch(ByteBuffer.wrap(valueBytes.getBytes(),0,valueBytes.getLength()));\n  }\n else {\n    throw new IAE(\"can't convert type [%s] to InputRow\",input.getClass().getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 75,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (input instanceof Text) {\n  return ImmutableList.of(parser.parse(((Text)input).toString()));\n}\n else if (input instanceof BytesWritable) {\n  BytesWritable valueBytes=(BytesWritable)input;\n  return parser.parseBatch(ByteBuffer.wrap(valueBytes.getBytes(),0,valueBytes.getLength()));\n}\n else {\n  throw new IAE(\"can't convert type [%s] to InputRow\",input.getClass().getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 49,
    "startColumnNumber" : 8,
    "endLineNumber" : 49,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}