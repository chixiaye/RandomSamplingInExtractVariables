{
  "id" : 6,
  "expression" : "future",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/common/guava/FutureUtilsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "future",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 209,
      "startColumnNumber" : 8,
      "endLineNumber" : 209,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 208,
        "startColumnNumber" : 53,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 208,
        "startColumnNumber" : 33,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 208,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final ListenableFuture<Long> futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 205,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final AtomicLong baggageHandled=new AtomicLong(0);\n  final SettableFuture<Long> future=SettableFuture.create();\n  final ListenableFuture<Long> futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet);\n  future.set(3L);\n  Assert.assertEquals(3L,(long)futureWithBaggage.get());\n  Assert.assertEquals(1,baggageHandled.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_futureWithBaggage_ok() throws ExecutionException, InterruptedException {\n  final AtomicLong baggageHandled=new AtomicLong(0);\n  final SettableFuture<Long> future=SettableFuture.create();\n  final ListenableFuture<Long> futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet);\n  future.set(3L);\n  Assert.assertEquals(3L,(long)futureWithBaggage.get());\n  Assert.assertEquals(1,baggageHandled.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 208,
        "startColumnNumber" : 53,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.common.guava.SettableFuture<java.lang.Long>"
  }, {
    "nodeContext" : "future",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 212,
      "startColumnNumber" : 4,
      "endLineNumber" : 212,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 18
      },
      "nodeContext" : "future.set(3L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 19
      },
      "nodeContext" : "future.set(3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 205,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final AtomicLong baggageHandled=new AtomicLong(0);\n  final SettableFuture<Long> future=SettableFuture.create();\n  final ListenableFuture<Long> futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet);\n  future.set(3L);\n  Assert.assertEquals(3L,(long)futureWithBaggage.get());\n  Assert.assertEquals(1,baggageHandled.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_futureWithBaggage_ok() throws ExecutionException, InterruptedException {\n  final AtomicLong baggageHandled=new AtomicLong(0);\n  final SettableFuture<Long> future=SettableFuture.create();\n  final ListenableFuture<Long> futureWithBaggage=FutureUtils.futureWithBaggage(future,baggageHandled::incrementAndGet);\n  future.set(3L);\n  Assert.assertEquals(3L,(long)futureWithBaggage.get());\n  Assert.assertEquals(1,baggageHandled.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 19
      },
      "nodeContext" : "future.set(3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.common.guava.SettableFuture<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 209,
    "startColumnNumber" : 8,
    "endLineNumber" : 209,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 212,
    "startColumnNumber" : 4,
    "endLineNumber" : 212,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}