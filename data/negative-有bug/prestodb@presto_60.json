{
  "id" : 60,
  "expression" : "new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count))",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-iceberg/src/main/java/com/facebook/presto/iceberg/PartitionTransforms.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 93,
      "startColumnNumber" : 23,
      "endLineNumber" : 93,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 92,
        "startColumnNumber" : 40,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (type.equals(VARBINARY)) {\n  return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 70,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int count=parseInt(matcher.group(1));\n  if (type.equals(INTEGER)) {\n    return new ColumnTransform(INTEGER,block -> bucketInteger(block,count));\n  }\n  if (type.equals(BIGINT)) {\n    return new ColumnTransform(INTEGER,block -> bucketBigint(block,count));\n  }\n  if (isShortDecimal(type)) {\n    DecimalType decimal=(DecimalType)type;\n    return new ColumnTransform(INTEGER,block -> bucketShortDecimal(decimal,block,count));\n  }\n  if (isLongDecimal(type)) {\n    DecimalType decimal=(DecimalType)type;\n    return new ColumnTransform(INTEGER,block -> bucketLongDecimal(decimal,block,count));\n  }\n  if (type.equals(DATE)) {\n    return new ColumnTransform(INTEGER,block -> bucketDate(block,count));\n  }\n  if (type instanceof VarcharType) {\n    return new ColumnTransform(INTEGER,block -> bucketVarchar(block,count));\n  }\n  if (type.equals(VARBINARY)) {\n    return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n  }\n  throw new UnsupportedOperationException(\"Unsupported type for 'bucket': \" + field);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (matcher.matches()) {\n  int count=parseInt(matcher.group(1));\n  if (type.equals(INTEGER)) {\n    return new ColumnTransform(INTEGER,block -> bucketInteger(block,count));\n  }\n  if (type.equals(BIGINT)) {\n    return new ColumnTransform(INTEGER,block -> bucketBigint(block,count));\n  }\n  if (isShortDecimal(type)) {\n    DecimalType decimal=(DecimalType)type;\n    return new ColumnTransform(INTEGER,block -> bucketShortDecimal(decimal,block,count));\n  }\n  if (isLongDecimal(type)) {\n    DecimalType decimal=(DecimalType)type;\n    return new ColumnTransform(INTEGER,block -> bucketLongDecimal(decimal,block,count));\n  }\n  if (type.equals(DATE)) {\n    return new ColumnTransform(INTEGER,block -> bucketDate(block,count));\n  }\n  if (type instanceof VarcharType) {\n    return new ColumnTransform(INTEGER,block -> bucketVarchar(block,count));\n  }\n  if (type.equals(VARBINARY)) {\n    return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n  }\n  throw new UnsupportedOperationException(\"Unsupported type for 'bucket': \" + field);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 166,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2971,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String transform=field.transform().toString();\n  if (transform.equals(\"identity\")) {\n    return new ColumnTransform(type,Function.identity());\n  }\n  Matcher matcher=BUCKET_PATTERN.matcher(transform);\n  if (matcher.matches()) {\n    int count=parseInt(matcher.group(1));\n    if (type.equals(INTEGER)) {\n      return new ColumnTransform(INTEGER,block -> bucketInteger(block,count));\n    }\n    if (type.equals(BIGINT)) {\n      return new ColumnTransform(INTEGER,block -> bucketBigint(block,count));\n    }\n    if (isShortDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(INTEGER,block -> bucketShortDecimal(decimal,block,count));\n    }\n    if (isLongDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(INTEGER,block -> bucketLongDecimal(decimal,block,count));\n    }\n    if (type.equals(DATE)) {\n      return new ColumnTransform(INTEGER,block -> bucketDate(block,count));\n    }\n    if (type instanceof VarcharType) {\n      return new ColumnTransform(INTEGER,block -> bucketVarchar(block,count));\n    }\n    if (type.equals(VARBINARY)) {\n      return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n    }\n    throw new UnsupportedOperationException(\"Unsupported type for 'bucket': \" + field);\n  }\n  matcher=TRUNCATE_PATTERN.matcher(transform);\n  if (matcher.matches()) {\n    int width=parseInt(matcher.group(1));\n    if (type.equals(INTEGER)) {\n      return new ColumnTransform(INTEGER,block -> truncateInteger(block,width));\n    }\n    if (type.equals(BIGINT)) {\n      return new ColumnTransform(BIGINT,block -> truncateBigint(block,width));\n    }\n    if (isShortDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(type,block -> truncateShortDecimal(decimal,block,width));\n    }\n    if (isLongDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(type,block -> truncateLongDecimal(decimal,block,width));\n    }\n    if (type instanceof VarcharType) {\n      return new ColumnTransform(VARCHAR,block -> truncateVarchar(block,width));\n    }\n    if (type.equals(VARBINARY)) {\n      return new ColumnTransform(VARBINARY,block -> truncateVarbinary(block,width));\n    }\n    throw new UnsupportedOperationException(\"Unsupported type for 'truncate': \" + field);\n  }\n  throw new UnsupportedOperationException(\"Unsupported partition transform: \" + field);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3057,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static ColumnTransform getColumnTransform(PartitionField field,Type type){\n  String transform=field.transform().toString();\n  if (transform.equals(\"identity\")) {\n    return new ColumnTransform(type,Function.identity());\n  }\n  Matcher matcher=BUCKET_PATTERN.matcher(transform);\n  if (matcher.matches()) {\n    int count=parseInt(matcher.group(1));\n    if (type.equals(INTEGER)) {\n      return new ColumnTransform(INTEGER,block -> bucketInteger(block,count));\n    }\n    if (type.equals(BIGINT)) {\n      return new ColumnTransform(INTEGER,block -> bucketBigint(block,count));\n    }\n    if (isShortDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(INTEGER,block -> bucketShortDecimal(decimal,block,count));\n    }\n    if (isLongDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(INTEGER,block -> bucketLongDecimal(decimal,block,count));\n    }\n    if (type.equals(DATE)) {\n      return new ColumnTransform(INTEGER,block -> bucketDate(block,count));\n    }\n    if (type instanceof VarcharType) {\n      return new ColumnTransform(INTEGER,block -> bucketVarchar(block,count));\n    }\n    if (type.equals(VARBINARY)) {\n      return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n    }\n    throw new UnsupportedOperationException(\"Unsupported type for 'bucket': \" + field);\n  }\n  matcher=TRUNCATE_PATTERN.matcher(transform);\n  if (matcher.matches()) {\n    int width=parseInt(matcher.group(1));\n    if (type.equals(INTEGER)) {\n      return new ColumnTransform(INTEGER,block -> truncateInteger(block,width));\n    }\n    if (type.equals(BIGINT)) {\n      return new ColumnTransform(BIGINT,block -> truncateBigint(block,width));\n    }\n    if (isShortDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(type,block -> truncateShortDecimal(decimal,block,width));\n    }\n    if (isLongDecimal(type)) {\n      DecimalType decimal=(DecimalType)type;\n      return new ColumnTransform(type,block -> truncateLongDecimal(decimal,block,width));\n    }\n    if (type instanceof VarcharType) {\n      return new ColumnTransform(VARCHAR,block -> truncateVarchar(block,width));\n    }\n    if (type.equals(VARBINARY)) {\n      return new ColumnTransform(VARBINARY,block -> truncateVarbinary(block,width));\n    }\n    throw new UnsupportedOperationException(\"Unsupported type for 'truncate': \" + field);\n  }\n  throw new UnsupportedOperationException(\"Unsupported partition transform: \" + field);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return new ColumnTransform(INTEGER,block -> bucketVarbinary(block,count));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "com.facebook.presto.iceberg.PartitionTransforms.ColumnTransform"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 93,
    "startColumnNumber" : 23,
    "endLineNumber" : 93,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}