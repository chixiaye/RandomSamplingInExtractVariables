{
  "id" : 406,
  "expression" : "producerProps",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/SmokeTestDriver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "producerProps",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 121,
      "startColumnNumber" : 80,
      "endLineNumber" : 121,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 121,
        "startColumnNumber" : 60,
        "endLineNumber" : 121,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new KafkaProducer<>(producerProps)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 121,
        "startColumnNumber" : 49,
        "endLineNumber" : 121,
        "endColumnNumber" : 94
      },
      "nodeContext" : "producer=new KafkaProducer<>(producerProps)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 121,
        "startColumnNumber" : 13,
        "endLineNumber" : 121,
        "endColumnNumber" : 94
      },
      "nodeContext" : "final KafkaProducer<byte[],byte[]> producer=new KafkaProducer<>(producerProps)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (final KafkaProducer<byte[],byte[]> producer=new KafkaProducer<>(producerProps)){\n  while (true) {\n    final int index=rand.nextInt(numKeys);\n    final String key=data[index].key;\n    final int value=data[index].next();\n    final ProducerRecord<byte[],byte[]> record=new ProducerRecord<>(\"data\",stringSerde.serializer().serialize(\"\",key),intSerde.serializer().serialize(\"\",value));\n    producer.send(record);\n    numRecordsProduced++;\n    if (numRecordsProduced % 100 == 0) {\n      System.out.println(Instant.now() + \" \" + numRecordsProduced+ \" records produced\");\n    }\n    Utils.sleep(2);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 118,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1229,
        "startLineNumber" : 109,
        "startColumnNumber" : 64,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Properties producerProps=generatorProperties(kafka);\n  int numRecordsProduced=0;\n  final ValueList[] data=new ValueList[numKeys];\n  for (int i=0; i < numKeys; i++) {\n    data[i]=new ValueList(i,i + maxRecordsPerKey - 1);\n  }\n  final Random rand=new Random();\n  try (final KafkaProducer<byte[],byte[]> producer=new KafkaProducer<>(producerProps)){\n    while (true) {\n      final int index=rand.nextInt(numKeys);\n      final String key=data[index].key;\n      final int value=data[index].next();\n      final ProducerRecord<byte[],byte[]> record=new ProducerRecord<>(\"data\",stringSerde.serializer().serialize(\"\",key),intSerde.serializer().serialize(\"\",value));\n      producer.send(record);\n      numRecordsProduced++;\n      if (numRecordsProduced % 100 == 0) {\n        System.out.println(Instant.now() + \" \" + numRecordsProduced+ \" records produced\");\n      }\n      Utils.sleep(2);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1400,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static void generatePerpetually(final String kafka,final int numKeys,final int maxRecordsPerKey){\n  final Properties producerProps=generatorProperties(kafka);\n  int numRecordsProduced=0;\n  final ValueList[] data=new ValueList[numKeys];\n  for (int i=0; i < numKeys; i++) {\n    data[i]=new ValueList(i,i + maxRecordsPerKey - 1);\n  }\n  final Random rand=new Random();\n  try (final KafkaProducer<byte[],byte[]> producer=new KafkaProducer<>(producerProps)){\n    while (true) {\n      final int index=rand.nextInt(numKeys);\n      final String key=data[index].key;\n      final int value=data[index].next();\n      final ProducerRecord<byte[],byte[]> record=new ProducerRecord<>(\"data\",stringSerde.serializer().serialize(\"\",key),intSerde.serializer().serialize(\"\",value));\n      producer.send(record);\n      numRecordsProduced++;\n      if (numRecordsProduced % 100 == 0) {\n        System.out.println(Instant.now() + \" \" + numRecordsProduced+ \" records produced\");\n      }\n      Utils.sleep(2);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 121,
        "startColumnNumber" : 13,
        "endLineNumber" : 121,
        "endColumnNumber" : 94
      },
      "nodeContext" : "final KafkaProducer<byte[],byte[]> producer=new KafkaProducer<>(producerProps)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 121,
    "startColumnNumber" : 80,
    "endLineNumber" : 121,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}