{
  "id" : 432,
  "expression" : "j < itemsLoaded",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/payloads/PayloadLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j < itemsLoaded",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 147,
      "startColumnNumber" : 39,
      "endLineNumber" : 147,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 147,
        "startColumnNumber" : 39,
        "endLineNumber" : 147,
        "endColumnNumber" : 69
      },
      "nodeContext" : "j < itemsLoaded && items.any()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 895,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 162,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int j=0; j < itemsLoaded && items.any(); j++) {\n  for (int i=0; i < items.length(); i++) {\n    if (items.get(i) > 0) {\n      Item item=content.item(i);\n      if (payload.build.acceptItem(payload.build,item)) {\n        payload.build.handleItem(payload.build,item);\n        items.remove(item,1);\n        break;\n      }\n else       if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n        exporting=true;\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1008,
        "startLineNumber" : 145,
        "startColumnNumber" : 85,
        "endLineNumber" : 163,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (int j=0; j < itemsLoaded && items.any(); j++) {\n    for (int i=0; i < items.length(); i++) {\n      if (items.get(i) > 0) {\n        Item item=content.item(i);\n        if (payload.build.acceptItem(payload.build,item)) {\n          payload.build.handleItem(payload.build,item);\n          items.remove(item,1);\n          break;\n        }\n else         if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n          exporting=true;\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 145,
        "startColumnNumber" : 20,
        "endLineNumber" : 163,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n  for (int j=0; j < itemsLoaded && items.any(); j++) {\n    for (int i=0; i < items.length(); i++) {\n      if (items.get(i) > 0) {\n        Item item=content.item(i);\n        if (payload.build.acceptItem(payload.build,item)) {\n          payload.build.handleItem(payload.build,item);\n          items.remove(item,1);\n          break;\n        }\n else         if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n          exporting=true;\n          break;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 144,
        "startColumnNumber" : 59,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n    for (int j=0; j < itemsLoaded && items.any(); j++) {\n      for (int i=0; i < items.length(); i++) {\n        if (items.get(i) > 0) {\n          Item item=content.item(i);\n          if (payload.build.acceptItem(payload.build,item)) {\n            payload.build.handleItem(payload.build,item);\n            items.remove(item,1);\n            break;\n          }\n else           if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n            exporting=true;\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 144,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (payload.block().hasItems && items.any()) {\n  if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n    for (int j=0; j < itemsLoaded && items.any(); j++) {\n      for (int i=0; i < items.length(); i++) {\n        if (items.get(i) > 0) {\n          Item item=content.item(i);\n          if (payload.build.acceptItem(payload.build,item)) {\n            payload.build.handleItem(payload.build,item);\n            items.remove(item,1);\n            break;\n          }\n else           if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n            exporting=true;\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2727,
        "startLineNumber" : 141,
        "startColumnNumber" : 37,
        "endLineNumber" : 195,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (payload.block().hasItems && items.any()) {\n    if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n      for (int j=0; j < itemsLoaded && items.any(); j++) {\n        for (int i=0; i < items.length(); i++) {\n          if (items.get(i) > 0) {\n            Item item=content.item(i);\n            if (payload.build.acceptItem(payload.build,item)) {\n              payload.build.handleItem(payload.build,item);\n              items.remove(item,1);\n              break;\n            }\n else             if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n              exporting=true;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (payload.block().hasLiquids && liquids.currentAmount() >= 0.001f) {\n    Liquid liq=liquids.current();\n    float total=liquids.currentAmount();\n    float flow=Math.min(Math.min(liquidsLoaded * edelta(),payload.block().liquidCapacity - payload.build.liquids.get(liq)),total);\n    if (payload.build.acceptLiquid(payload.build,liq)) {\n      payload.build.liquids.add(liq,flow);\n      liquids.remove(liq,flow);\n    }\n  }\n  if (hasBattery()) {\n    float powerInput=power.status * (basePowerUse + maxPowerConsumption);\n    float availableInput=Math.max(powerInput - basePowerUse,0f);\n    float cap=payload.block().consPower.capacity;\n    payload.build.power.status+=availableInput / cap * edelta();\n    if (payload.build.power.status >= 1f) {\n      exporting=true;\n      payload.build.power.status=Mathf.clamp(payload.build.power.status);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2746,
        "startLineNumber" : 141,
        "startColumnNumber" : 18,
        "endLineNumber" : 195,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (moveInPayload()) {\n  if (payload.block().hasItems && items.any()) {\n    if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n      for (int j=0; j < itemsLoaded && items.any(); j++) {\n        for (int i=0; i < items.length(); i++) {\n          if (items.get(i) > 0) {\n            Item item=content.item(i);\n            if (payload.build.acceptItem(payload.build,item)) {\n              payload.build.handleItem(payload.build,item);\n              items.remove(item,1);\n              break;\n            }\n else             if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n              exporting=true;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (payload.block().hasLiquids && liquids.currentAmount() >= 0.001f) {\n    Liquid liq=liquids.current();\n    float total=liquids.currentAmount();\n    float flow=Math.min(Math.min(liquidsLoaded * edelta(),payload.block().liquidCapacity - payload.build.liquids.get(liq)),total);\n    if (payload.build.acceptLiquid(payload.build,liq)) {\n      payload.build.liquids.add(liq,flow);\n      liquids.remove(liq,flow);\n    }\n  }\n  if (hasBattery()) {\n    float powerInput=power.status * (basePowerUse + maxPowerConsumption);\n    float availableInput=Math.max(powerInput - basePowerUse,0f);\n    float cap=payload.block().consPower.capacity;\n    payload.build.power.status+=availableInput / cap * edelta();\n    if (payload.build.power.status >= 1f) {\n      exporting=true;\n      payload.build.power.status=Mathf.clamp(payload.build.power.status);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 292,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2820,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 195,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (shouldExport()) {\n  moveOutPayload();\n}\n else if (moveInPayload()) {\n  if (payload.block().hasItems && items.any()) {\n    if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n      for (int j=0; j < itemsLoaded && items.any(); j++) {\n        for (int i=0; i < items.length(); i++) {\n          if (items.get(i) > 0) {\n            Item item=content.item(i);\n            if (payload.build.acceptItem(payload.build,item)) {\n              payload.build.handleItem(payload.build,item);\n              items.remove(item,1);\n              break;\n            }\n else             if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n              exporting=true;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (payload.block().hasLiquids && liquids.currentAmount() >= 0.001f) {\n    Liquid liq=liquids.current();\n    float total=liquids.currentAmount();\n    float flow=Math.min(Math.min(liquidsLoaded * edelta(),payload.block().liquidCapacity - payload.build.liquids.get(liq)),total);\n    if (payload.build.acceptLiquid(payload.build,liq)) {\n      payload.build.liquids.add(liq,flow);\n      liquids.remove(liq,flow);\n    }\n  }\n  if (hasBattery()) {\n    float powerInput=power.status * (basePowerUse + maxPowerConsumption);\n    float availableInput=Math.max(powerInput - basePowerUse,0f);\n    float cap=payload.block().consPower.capacity;\n    payload.build.power.status+=availableInput / cap * edelta();\n    if (payload.build.power.status >= 1f) {\n      exporting=true;\n      payload.build.power.status=Mathf.clamp(payload.build.power.status);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 299,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2879,
        "startLineNumber" : 137,
        "startColumnNumber" : 32,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  super.updateTile();\n  if (shouldExport()) {\n    moveOutPayload();\n  }\n else   if (moveInPayload()) {\n    if (payload.block().hasItems && items.any()) {\n      if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n        for (int j=0; j < itemsLoaded && items.any(); j++) {\n          for (int i=0; i < items.length(); i++) {\n            if (items.get(i) > 0) {\n              Item item=content.item(i);\n              if (payload.build.acceptItem(payload.build,item)) {\n                payload.build.handleItem(payload.build,item);\n                items.remove(item,1);\n                break;\n              }\n else               if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n                exporting=true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (payload.block().hasLiquids && liquids.currentAmount() >= 0.001f) {\n      Liquid liq=liquids.current();\n      float total=liquids.currentAmount();\n      float flow=Math.min(Math.min(liquidsLoaded * edelta(),payload.block().liquidCapacity - payload.build.liquids.get(liq)),total);\n      if (payload.build.acceptLiquid(payload.build,liq)) {\n        payload.build.liquids.add(liq,flow);\n        liquids.remove(liq,flow);\n      }\n    }\n    if (hasBattery()) {\n      float powerInput=power.status * (basePowerUse + maxPowerConsumption);\n      float availableInput=Math.max(powerInput - basePowerUse,0f);\n      float cap=payload.block().consPower.capacity;\n      payload.build.power.status+=availableInput / cap * edelta();\n      if (payload.build.power.status >= 1f) {\n        exporting=true;\n        payload.build.power.status=Mathf.clamp(payload.build.power.status);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2922,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  super.updateTile();\n  if (shouldExport()) {\n    moveOutPayload();\n  }\n else   if (moveInPayload()) {\n    if (payload.block().hasItems && items.any()) {\n      if (efficiency > 0.01f && timer(timerLoad,loadTime / efficiency)) {\n        for (int j=0; j < itemsLoaded && items.any(); j++) {\n          for (int i=0; i < items.length(); i++) {\n            if (items.get(i) > 0) {\n              Item item=content.item(i);\n              if (payload.build.acceptItem(payload.build,item)) {\n                payload.build.handleItem(payload.build,item);\n                items.remove(item,1);\n                break;\n              }\n else               if (payload.block().separateItemCapacity || payload.block().consumesItem(item)) {\n                exporting=true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (payload.block().hasLiquids && liquids.currentAmount() >= 0.001f) {\n      Liquid liq=liquids.current();\n      float total=liquids.currentAmount();\n      float flow=Math.min(Math.min(liquidsLoaded * edelta(),payload.block().liquidCapacity - payload.build.liquids.get(liq)),total);\n      if (payload.build.acceptLiquid(payload.build,liq)) {\n        payload.build.liquids.add(liq,flow);\n        liquids.remove(liq,flow);\n      }\n    }\n    if (hasBattery()) {\n      float powerInput=power.status * (basePowerUse + maxPowerConsumption);\n      float availableInput=Math.max(powerInput - basePowerUse,0f);\n      float cap=payload.block().consPower.capacity;\n      payload.build.power.status+=availableInput / cap * edelta();\n      if (payload.build.power.status >= 1f) {\n        exporting=true;\n        payload.build.power.status=Mathf.clamp(payload.build.power.status);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 309,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 147,
        "startColumnNumber" : 39,
        "endLineNumber" : 147,
        "endColumnNumber" : 69
      },
      "nodeContext" : "j < itemsLoaded && items.any()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 147,
    "startColumnNumber" : 39,
    "endLineNumber" : 147,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}