{
  "id" : 53,
  "expression" : "clazz.getSimpleName()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/types/PojoTestUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clazz.getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 53,
      "startColumnNumber" : 24,
      "endLineNumber" : 53,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 555,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName()).isInstanceOf(PojoSerializer.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName()).isInstanceOf(PojoSerializer.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 44,
        "startColumnNumber" : 88,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TypeInformation<T> typeInformation=TypeInformation.of(clazz);\n  final TypeSerializer<T> actualSerializer=typeInformation.createSerializer(new ExecutionConfig());\n  assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName()).isInstanceOf(PojoSerializer.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1551,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies that instances of the given class fulfill all conditions to be serialized with the {@link PojoSerializer}, as documented <a href=\"https://nightlies.apache.org/flink/flink-docs-stable/docs/dev/datastream/fault-tolerance/serialization/types_serialization/#pojos\">here</a>. <p>Note that this check will succeed even if the Pojo is partially serialized with Kryo. If this is not desired, use  {@link #assertSerializedAsPojoWithoutKryo(Class)} instead.\n * @param clazz class to analyze\n * @param < T > class type\n * @throws AssertionError if instances of the class cannot be serialized as a POJO\n */\npublic static <T>void assertSerializedAsPojo(Class<T> clazz) throws AssertionError {\n  final TypeInformation<T> typeInformation=TypeInformation.of(clazz);\n  final TypeSerializer<T> actualSerializer=typeInformation.createSerializer(new ExecutionConfig());\n  assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName()).isInstanceOf(PojoSerializer.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(actualSerializer).withFailMessage(\"Instances of the class '%s' cannot be serialized as a POJO, but would use a '%s' instead. %n\" + \"Re-run this test with INFO logging enabled and check messages from the '%s' for possible reasons.\",clazz.getSimpleName(),actualSerializer.getClass().getSimpleName(),TypeExtractor.class.getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 53,
    "startColumnNumber" : 24,
    "endLineNumber" : 53,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}