{
  "id" : 157,
  "expression" : "partitionTracker.releasedPartitions.stream()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/BlockingResultPartitionReleaseTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "partitionTracker.releasedPartitions.stream()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 132,
      "startColumnNumber" : 28,
      "endLineNumber" : 132,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 132,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 75
      },
      "nodeContext" : "partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 599,
        "startLineNumber" : 129,
        "startColumnNumber" : 46,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutionJobVertex ejv=checkNotNull(executionGraph.getJobVertex(producer.getID()));\n  assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < parallelism; ++i) {\n  ExecutionJobVertex ejv=checkNotNull(executionGraph.getJobVertex(producer.getID()));\n  assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2412,
        "startLineNumber" : 90,
        "startColumnNumber" : 98,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int parallelism=2;\n  JobID jobId=new JobID();\n  JobVertex producer=ExecutionGraphTestUtils.createNoOpVertex(\"producer\",parallelism);\n  JobVertex consumer1=ExecutionGraphTestUtils.createNoOpVertex(\"consumer1\",parallelism);\n  JobVertex consumer2=ExecutionGraphTestUtils.createNoOpVertex(\"consumer2\",parallelism);\n  TestingPartitionTracker partitionTracker=new TestingPartitionTracker();\n  SchedulerBase scheduler=createSchedulerAndDeploy(isAdaptive,jobId,producer,new JobVertex[]{consumer1,consumer2},DistributionPattern.ALL_TO_ALL,new TestingBlobWriter(Integer.MAX_VALUE),mainThreadExecutor,ioExecutor,partitionTracker,EXECUTOR_RESOURCE.getExecutor());\n  ExecutionGraph executionGraph=scheduler.getExecutionGraph();\n  assertThat(partitionTracker.releasedPartitions).isEmpty();\n  CompletableFuture.runAsync(() -> finishJobVertex(executionGraph,consumer1.getID()),mainThreadExecutor).join();\n  ioExecutor.triggerAll();\n  assertThat(partitionTracker.releasedPartitions).isEmpty();\n  CompletableFuture.runAsync(() -> finishJobVertex(executionGraph,consumer2.getID()),mainThreadExecutor).join();\n  ioExecutor.triggerAll();\n  assertThat(partitionTracker.releasedPartitions.size()).isEqualTo(parallelism);\n  for (int i=0; i < parallelism; ++i) {\n    ExecutionJobVertex ejv=checkNotNull(executionGraph.getJobVertex(producer.getID()));\n    assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2506,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testResultPartitionConsumedByMultiConsumers(boolean isAdaptive) throws Exception {\n  int parallelism=2;\n  JobID jobId=new JobID();\n  JobVertex producer=ExecutionGraphTestUtils.createNoOpVertex(\"producer\",parallelism);\n  JobVertex consumer1=ExecutionGraphTestUtils.createNoOpVertex(\"consumer1\",parallelism);\n  JobVertex consumer2=ExecutionGraphTestUtils.createNoOpVertex(\"consumer2\",parallelism);\n  TestingPartitionTracker partitionTracker=new TestingPartitionTracker();\n  SchedulerBase scheduler=createSchedulerAndDeploy(isAdaptive,jobId,producer,new JobVertex[]{consumer1,consumer2},DistributionPattern.ALL_TO_ALL,new TestingBlobWriter(Integer.MAX_VALUE),mainThreadExecutor,ioExecutor,partitionTracker,EXECUTOR_RESOURCE.getExecutor());\n  ExecutionGraph executionGraph=scheduler.getExecutionGraph();\n  assertThat(partitionTracker.releasedPartitions).isEmpty();\n  CompletableFuture.runAsync(() -> finishJobVertex(executionGraph,consumer1.getID()),mainThreadExecutor).join();\n  ioExecutor.triggerAll();\n  assertThat(partitionTracker.releasedPartitions).isEmpty();\n  CompletableFuture.runAsync(() -> finishJobVertex(executionGraph,consumer2.getID()),mainThreadExecutor).join();\n  ioExecutor.triggerAll();\n  assertThat(partitionTracker.releasedPartitions.size()).isEqualTo(parallelism);\n  for (int i=0; i < parallelism; ++i) {\n    ExecutionJobVertex ejv=checkNotNull(executionGraph.getJobVertex(producer.getID()));\n    assertThat(partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)).containsExactlyInAnyOrder(Arrays.stream(ejv.getProducedDataSets()[0].getPartitions()).map(IntermediateResultPartition::getPartitionId).toArray(IntermediateResultPartitionID[]::new));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 132,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 75
      },
      "nodeContext" : "partitionTracker.releasedPartitions.stream().map(ResultPartitionID::getPartitionId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.stream.Stream<org.apache.flink.runtime.io.network.partition.ResultPartitionID>"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 132,
    "startColumnNumber" : 28,
    "endLineNumber" : 132,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}