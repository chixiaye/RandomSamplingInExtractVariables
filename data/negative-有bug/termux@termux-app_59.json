{
  "id" : 59,
  "expression" : "c == '\\\\'",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/termux-shared/src/main/java/com/termux/shared/shell/ArgumentTokenizer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c == '\\\\'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 102,
      "startColumnNumber" : 33,
      "endLineNumber" : 102,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 102,
        "startColumnNumber" : 29,
        "endLineNumber" : 116,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (c == '\\\\') {\n  i++;\n  char next=arguments.charAt(i);\n  if (next == '\"' || next == '\\\\') {\n    currArg.append(next);\n  }\n else {\n    currArg.append(c);\n    currArg.append(next);\n  }\n}\n else {\n  currArg.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (c == '\"') {\n  state=NORMAL_TOKEN_STATE;\n}\n else if (c == '\\\\') {\n  i++;\n  char next=arguments.charAt(i);\n  if (next == '\"' || next == '\\\\') {\n    currArg.append(next);\n  }\n else {\n    currArg.append(c);\n    currArg.append(next);\n  }\n}\n else {\n  currArg.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3632,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (state) {\ncase SINGLE_QUOTE_STATE:  if (c == '\\'') {\n    state=NORMAL_TOKEN_STATE;\n  }\n else {\n    currArg.append(c);\n  }\nbreak;\ncase DOUBLE_QUOTE_STATE:if (c == '\"') {\nstate=NORMAL_TOKEN_STATE;\n}\n else if (c == '\\\\') {\ni++;\nchar next=arguments.charAt(i);\nif (next == '\"' || next == '\\\\') {\n  currArg.append(next);\n}\n else {\n  currArg.append(c);\n  currArg.append(next);\n}\n}\n else {\ncurrArg.append(c);\n}\nbreak;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3666,
        "startLineNumber" : 86,
        "startColumnNumber" : 17,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (state) {\ncase SINGLE_QUOTE_STATE:    if (c == '\\'') {\n      state=NORMAL_TOKEN_STATE;\n    }\n else {\n      currArg.append(c);\n    }\n  break;\ncase DOUBLE_QUOTE_STATE:if (c == '\"') {\n  state=NORMAL_TOKEN_STATE;\n}\n else if (c == '\\\\') {\n  i++;\n  char next=arguments.charAt(i);\n  if (next == '\"' || next == '\\\\') {\n    currArg.append(next);\n  }\n else {\n    currArg.append(c);\n    currArg.append(next);\n  }\n}\n else {\n  currArg.append(c);\n}\nbreak;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3870,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (escaped) {\n  escaped=false;\n  currArg.append(c);\n}\n else {\nswitch (state) {\ncase SINGLE_QUOTE_STATE:    if (c == '\\'') {\n      state=NORMAL_TOKEN_STATE;\n    }\n else {\n      currArg.append(c);\n    }\n  break;\ncase DOUBLE_QUOTE_STATE:if (c == '\"') {\n  state=NORMAL_TOKEN_STATE;\n}\n else if (c == '\\\\') {\n  i++;\n  char next=arguments.charAt(i);\n  if (next == '\"' || next == '\\\\') {\n    currArg.append(next);\n  }\n else {\n    currArg.append(c);\n    currArg.append(next);\n  }\n}\n else {\n  currArg.append(c);\n}\nbreak;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3939,
        "startLineNumber" : 79,
        "startColumnNumber" : 38,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=arguments.charAt(i);\n  if (escaped) {\n    escaped=false;\n    currArg.append(c);\n  }\n else {\nswitch (state) {\ncase SINGLE_QUOTE_STATE:      if (c == '\\'') {\n        state=NORMAL_TOKEN_STATE;\n      }\n else {\n        currArg.append(c);\n      }\n    break;\ncase DOUBLE_QUOTE_STATE:  if (c == '\"') {\n    state=NORMAL_TOKEN_STATE;\n  }\n else   if (c == '\\\\') {\n    i++;\n    char next=arguments.charAt(i);\n    if (next == '\"' || next == '\\\\') {\n      currArg.append(next);\n    }\n else {\n      currArg.append(c);\n      currArg.append(next);\n    }\n  }\n else {\n    currArg.append(c);\n  }\nbreak;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3969,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < len; i++) {\n  char c=arguments.charAt(i);\n  if (escaped) {\n    escaped=false;\n    currArg.append(c);\n  }\n else {\nswitch (state) {\ncase SINGLE_QUOTE_STATE:      if (c == '\\'') {\n        state=NORMAL_TOKEN_STATE;\n      }\n else {\n        currArg.append(c);\n      }\n    break;\ncase DOUBLE_QUOTE_STATE:  if (c == '\"') {\n    state=NORMAL_TOKEN_STATE;\n  }\n else   if (c == '\\\\') {\n    i++;\n    char next=arguments.charAt(i);\n    if (next == '\"' || next == '\\\\') {\n      currArg.append(next);\n    }\n else {\n      currArg.append(c);\n      currArg.append(next);\n    }\n  }\n else {\n    currArg.append(c);\n  }\nbreak;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 192,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 70,
        "startColumnNumber" : 77,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedList<String> argList=new LinkedList<String>();\n  StringBuilder currArg=new StringBuilder();\n  boolean escaped=false;\n  int state=NO_TOKEN_STATE;\n  int len=arguments.length();\n  for (int i=0; i < len; i++) {\n    char c=arguments.charAt(i);\n    if (escaped) {\n      escaped=false;\n      currArg.append(c);\n    }\n else {\nswitch (state) {\ncase SINGLE_QUOTE_STATE:        if (c == '\\'') {\n          state=NORMAL_TOKEN_STATE;\n        }\n else {\n          currArg.append(c);\n        }\n      break;\ncase DOUBLE_QUOTE_STATE:    if (c == '\"') {\n      state=NORMAL_TOKEN_STATE;\n    }\n else     if (c == '\\\\') {\n      i++;\n      char next=arguments.charAt(i);\n      if (next == '\"' || next == '\\\\') {\n        currArg.append(next);\n      }\n else {\n        currArg.append(c);\n        currArg.append(next);\n      }\n    }\n else {\n      currArg.append(c);\n    }\n  break;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':  escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n}\nif (escaped) {\ncurrArg.append('\\\\');\nargList.add(currArg.toString());\n}\n else if (state != NO_TOKEN_STATE) {\nargList.add(currArg.toString());\n}\nif (stringify) {\nfor (int i=0; i < argList.size(); i++) {\nargList.set(i,\"\\\"\" + _escapeQuotesAndBackslashes(argList.get(i)) + \"\\\"\");\n}\n}\nreturn argList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5311,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tokenizes the given String into String tokens.\n * @param arguments A String containing one or more command-line style arguments to be tokenized.\n * @param stringify whether or not to include escape special characters\n * @return A list of parsed and properly escaped arguments.\n */\npublic static List<String> tokenize(String arguments,boolean stringify){\n  LinkedList<String> argList=new LinkedList<String>();\n  StringBuilder currArg=new StringBuilder();\n  boolean escaped=false;\n  int state=NO_TOKEN_STATE;\n  int len=arguments.length();\n  for (int i=0; i < len; i++) {\n    char c=arguments.charAt(i);\n    if (escaped) {\n      escaped=false;\n      currArg.append(c);\n    }\n else {\nswitch (state) {\ncase SINGLE_QUOTE_STATE:        if (c == '\\'') {\n          state=NORMAL_TOKEN_STATE;\n        }\n else {\n          currArg.append(c);\n        }\n      break;\ncase DOUBLE_QUOTE_STATE:    if (c == '\"') {\n      state=NORMAL_TOKEN_STATE;\n    }\n else     if (c == '\\\\') {\n      i++;\n      char next=arguments.charAt(i);\n      if (next == '\"' || next == '\\\\') {\n        currArg.append(next);\n      }\n else {\n        currArg.append(c);\n        currArg.append(next);\n      }\n    }\n else {\n      currArg.append(c);\n    }\n  break;\ncase NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {\ncase '\\\\':  escaped=true;\nstate=NORMAL_TOKEN_STATE;\nbreak;\ncase '\\'':state=SINGLE_QUOTE_STATE;\nbreak;\ncase '\"':state=DOUBLE_QUOTE_STATE;\nbreak;\ndefault:if (!Character.isWhitespace(c)) {\ncurrArg.append(c);\nstate=NORMAL_TOKEN_STATE;\n}\n else if (state == NORMAL_TOKEN_STATE) {\nargList.add(currArg.toString());\ncurrArg=new StringBuilder();\nstate=NO_TOKEN_STATE;\n}\n}\nbreak;\ndefault:throw new IllegalStateException(\"ArgumentTokenizer state \" + state + \" is invalid!\");\n}\n}\n}\nif (escaped) {\ncurrArg.append('\\\\');\nargList.add(currArg.toString());\n}\n else if (state != NO_TOKEN_STATE) {\nargList.add(currArg.toString());\n}\nif (stringify) {\nfor (int i=0; i < argList.size(); i++) {\nargList.set(i,\"\\\"\" + _escapeQuotesAndBackslashes(argList.get(i)) + \"\\\"\");\n}\n}\nreturn argList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 309,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 102,
        "startColumnNumber" : 29,
        "endLineNumber" : 116,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (c == '\\\\') {\n  i++;\n  char next=arguments.charAt(i);\n  if (next == '\"' || next == '\\\\') {\n    currArg.append(next);\n  }\n else {\n    currArg.append(c);\n    currArg.append(next);\n  }\n}\n else {\n  currArg.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 102,
    "startColumnNumber" : 33,
    "endLineNumber" : 102,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}