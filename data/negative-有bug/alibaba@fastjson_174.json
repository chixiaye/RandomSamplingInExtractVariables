{
  "id" : 174,
  "expression" : "(features & Feature.UseBigDecimal.mask)",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/parser/JSONLexer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(features & Feature.UseBigDecimal.mask)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 1660,
      "startColumnNumber" : 15,
      "endLineNumber" : 1660,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1660,
        "startColumnNumber" : 15,
        "endLineNumber" : 1660,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(features & Feature.UseBigDecimal.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 1659,
        "startColumnNumber" : 12,
        "endLineNumber" : 1660,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(!exp) && (features & Feature.UseBigDecimal.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 539,
        "startLineNumber" : 1659,
        "startColumnNumber" : 8,
        "endLineNumber" : 1673,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((!exp) && (features & Feature.UseBigDecimal.mask) != 0) {\n  number=new BigDecimal(chars);\n}\n else {\n  String strVal=new String(chars);\n  try {\n    if (type == 'F') {\n      number=Float.valueOf(strVal);\n    }\n else {\n      number=Double.parseDouble(strVal);\n    }\n  }\n catch (  NumberFormatException ex) {\n    throw new JSONException(ex.getMessage() + \", \" + info(),ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5380,
        "startLineNumber" : 1473,
        "startColumnNumber" : 42,
        "endLineNumber" : 1676,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int start=bp;\n  boolean overflow=false;\n  Number number=null;\n  np=0;\n  final boolean negative;\n  final long limit;\n  if (ch == '-') {\n    negative=true;\n    limit=Long.MIN_VALUE;\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n  }\n else {\n    negative=false;\n    limit=-Long.MAX_VALUE;\n  }\n  long longValue=0;\n  for (; ; ) {\n    if (ch >= '0' && ch <= '9') {\n      int digit=(ch - '0');\n      if (longValue < -922337203685477580L) {\n        overflow=true;\n      }\n      longValue*=10;\n      if (longValue < limit + digit) {\n        overflow=true;\n      }\n      longValue-=digit;\n    }\n else {\n      break;\n    }\n    np++;\n{\n      int index=++bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n  }\n  if (!negative) {\n    longValue=-longValue;\n  }\n  if (ch == 'L') {\n    np++;\n    next();\n    number=longValue;\n  }\n else   if (ch == 'S') {\n    np++;\n    next();\n    number=(short)longValue;\n  }\n else   if (ch == 'B') {\n    np++;\n    next();\n    number=(byte)longValue;\n  }\n else   if (ch == 'F') {\n    np++;\n    next();\n    number=(float)longValue;\n  }\n else   if (ch == 'D') {\n    np++;\n    next();\n    number=(double)longValue;\n  }\n  boolean isDouble=false, exp=false;\n  if (ch == '.') {\n    isDouble=true;\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n    for (; ; ) {\n      if (ch >= '0' && ch <= '9') {\n        np++;\n      }\n else {\n        break;\n      }\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n  }\n  char type=0;\n  if (ch == 'e' || ch == 'E') {\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n    if (ch == '+' || ch == '-') {\n      np++;\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n    for (; ; ) {\n      if (ch >= '0' && ch <= '9') {\n        np++;\n      }\n else {\n        break;\n      }\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n    if (ch == 'D' || ch == 'F') {\n      np++;\n      type=ch;\n      next();\n    }\n    exp=true;\n  }\n  if ((!isDouble) && (!exp)) {\n    if (overflow) {\n      int len=bp - start;\n      char[] chars=new char[len];\n      text.getChars(start,bp,chars,0);\n      String strVal=new String(chars);\n      number=new BigInteger(strVal);\n    }\n    if (number == null) {\n      if (longValue > Integer.MIN_VALUE && longValue < Integer.MAX_VALUE) {\n        number=(int)longValue;\n      }\n else {\n        number=longValue;\n      }\n    }\n    return number;\n  }\n  int len=bp - start;\n  if (type != 0) {\n    len--;\n  }\n  char[] chars=new char[len];\n  text.getChars(start,start + len,chars,0);\n  if ((!exp) && (features & Feature.UseBigDecimal.mask) != 0) {\n    number=new BigDecimal(chars);\n  }\n else {\n    String strVal=new String(chars);\n    try {\n      if (type == 'F') {\n        number=Float.valueOf(strVal);\n      }\n else {\n        number=Double.parseDouble(strVal);\n      }\n    }\n catch (    NumberFormatException ex) {\n      throw new JSONException(ex.getMessage() + \", \" + info(),ex);\n    }\n  }\n  return number;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 692,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5418,
        "startLineNumber" : 1473,
        "startColumnNumber" : 4,
        "endLineNumber" : 1676,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public final Number scanNumberValue(){\n  final int start=bp;\n  boolean overflow=false;\n  Number number=null;\n  np=0;\n  final boolean negative;\n  final long limit;\n  if (ch == '-') {\n    negative=true;\n    limit=Long.MIN_VALUE;\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n  }\n else {\n    negative=false;\n    limit=-Long.MAX_VALUE;\n  }\n  long longValue=0;\n  for (; ; ) {\n    if (ch >= '0' && ch <= '9') {\n      int digit=(ch - '0');\n      if (longValue < -922337203685477580L) {\n        overflow=true;\n      }\n      longValue*=10;\n      if (longValue < limit + digit) {\n        overflow=true;\n      }\n      longValue-=digit;\n    }\n else {\n      break;\n    }\n    np++;\n{\n      int index=++bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n  }\n  if (!negative) {\n    longValue=-longValue;\n  }\n  if (ch == 'L') {\n    np++;\n    next();\n    number=longValue;\n  }\n else   if (ch == 'S') {\n    np++;\n    next();\n    number=(short)longValue;\n  }\n else   if (ch == 'B') {\n    np++;\n    next();\n    number=(byte)longValue;\n  }\n else   if (ch == 'F') {\n    np++;\n    next();\n    number=(float)longValue;\n  }\n else   if (ch == 'D') {\n    np++;\n    next();\n    number=(double)longValue;\n  }\n  boolean isDouble=false, exp=false;\n  if (ch == '.') {\n    isDouble=true;\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n    for (; ; ) {\n      if (ch >= '0' && ch <= '9') {\n        np++;\n      }\n else {\n        break;\n      }\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n  }\n  char type=0;\n  if (ch == 'e' || ch == 'E') {\n    np++;\n{\n      int index=++this.bp;\n      this.ch=(index >= this.len ? EOI : text.charAt(index));\n    }\n    if (ch == '+' || ch == '-') {\n      np++;\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n    for (; ; ) {\n      if (ch >= '0' && ch <= '9') {\n        np++;\n      }\n else {\n        break;\n      }\n{\n        int index=++this.bp;\n        this.ch=(index >= this.len ? EOI : text.charAt(index));\n      }\n    }\n    if (ch == 'D' || ch == 'F') {\n      np++;\n      type=ch;\n      next();\n    }\n    exp=true;\n  }\n  if ((!isDouble) && (!exp)) {\n    if (overflow) {\n      int len=bp - start;\n      char[] chars=new char[len];\n      text.getChars(start,bp,chars,0);\n      String strVal=new String(chars);\n      number=new BigInteger(strVal);\n    }\n    if (number == null) {\n      if (longValue > Integer.MIN_VALUE && longValue < Integer.MAX_VALUE) {\n        number=(int)longValue;\n      }\n else {\n        number=longValue;\n      }\n    }\n    return number;\n  }\n  int len=bp - start;\n  if (type != 0) {\n    len--;\n  }\n  char[] chars=new char[len];\n  text.getChars(start,start + len,chars,0);\n  if ((!exp) && (features & Feature.UseBigDecimal.mask) != 0) {\n    number=new BigDecimal(chars);\n  }\n else {\n    String strVal=new String(chars);\n    try {\n      if (type == 'F') {\n        number=Float.valueOf(strVal);\n      }\n else {\n        number=Double.parseDouble(strVal);\n      }\n    }\n catch (    NumberFormatException ex) {\n      throw new JSONException(ex.getMessage() + \", \" + info(),ex);\n    }\n  }\n  return number;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 698,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 1660,
        "startColumnNumber" : 15,
        "endLineNumber" : 1660,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(features & Feature.UseBigDecimal.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 1660,
    "startColumnNumber" : 15,
    "endLineNumber" : 1660,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}