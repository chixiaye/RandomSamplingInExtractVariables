{
  "id" : 138,
  "expression" : "BETWEEN",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/relational/RowExpressionDomainTranslator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BETWEEN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 171,
      "startColumnNumber" : 20,
      "endLineNumber" : 171,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 171,
        "startColumnNumber" : 20,
        "endLineNumber" : 171,
        "endColumnNumber" : 34
      },
      "nodeContext" : "BETWEEN.name()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 170,
        "startColumnNumber" : 19,
        "endLineNumber" : 176,
        "endColumnNumber" : 71
      },
      "nodeContext" : "call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 168,
        "startColumnNumber" : 30,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isBetween(range)) {\n  return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (range.isAll()) {\n    return TRUE_CONSTANT;\n  }\n  if (isBetween(range)) {\n    return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n  }\n  List<RowExpression> rangeConjuncts=new ArrayList<>();\n  if (!range.isLowUnbounded()) {\n    if (range.isLowInclusive()) {\n      rangeConjuncts.add(greaterThanOrEqual(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(greaterThan(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n  }\n  if (!range.isHighUnbounded()) {\n    if (range.isHighInclusive()) {\n      rangeConjuncts.add(lessThanOrEqual(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(lessThan(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n  }\n  checkState(!rangeConjuncts.isEmpty());\n  return logicalRowExpressions.combineConjuncts(rangeConjuncts);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1716,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RowExpression processRange(Type type,Range range,RowExpression reference){\n  if (range.isAll()) {\n    return TRUE_CONSTANT;\n  }\n  if (isBetween(range)) {\n    return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n  }\n  List<RowExpression> rangeConjuncts=new ArrayList<>();\n  if (!range.isLowUnbounded()) {\n    if (range.isLowInclusive()) {\n      rangeConjuncts.add(greaterThanOrEqual(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(greaterThan(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n  }\n  if (!range.isHighUnbounded()) {\n    if (range.isHighInclusive()) {\n      rangeConjuncts.add(lessThanOrEqual(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(lessThan(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n  }\n  checkState(!rangeConjuncts.isEmpty());\n  return logicalRowExpressions.combineConjuncts(rangeConjuncts);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 171,
        "startColumnNumber" : 20,
        "endLineNumber" : 171,
        "endColumnNumber" : 34
      },
      "nodeContext" : "BETWEEN.name()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.function.OperatorType"
  }, {
    "nodeContext" : "BETWEEN",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 172,
      "startColumnNumber" : 59,
      "endLineNumber" : 172,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 172,
        "startColumnNumber" : 20,
        "endLineNumber" : 172,
        "endColumnNumber" : 111
      },
      "nodeContext" : "functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 170,
        "startColumnNumber" : 19,
        "endLineNumber" : 176,
        "endColumnNumber" : 71
      },
      "nodeContext" : "call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 168,
        "startColumnNumber" : 30,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isBetween(range)) {\n  return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (range.isAll()) {\n    return TRUE_CONSTANT;\n  }\n  if (isBetween(range)) {\n    return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n  }\n  List<RowExpression> rangeConjuncts=new ArrayList<>();\n  if (!range.isLowUnbounded()) {\n    if (range.isLowInclusive()) {\n      rangeConjuncts.add(greaterThanOrEqual(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(greaterThan(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n  }\n  if (!range.isHighUnbounded()) {\n    if (range.isHighInclusive()) {\n      rangeConjuncts.add(lessThanOrEqual(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(lessThan(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n  }\n  checkState(!rangeConjuncts.isEmpty());\n  return logicalRowExpressions.combineConjuncts(rangeConjuncts);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1716,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RowExpression processRange(Type type,Range range,RowExpression reference){\n  if (range.isAll()) {\n    return TRUE_CONSTANT;\n  }\n  if (isBetween(range)) {\n    return call(BETWEEN.name(),functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type)),BOOLEAN,reference,toRowExpression(range.getLowBoundedValue(),type),toRowExpression(range.getHighBoundedValue(),type));\n  }\n  List<RowExpression> rangeConjuncts=new ArrayList<>();\n  if (!range.isLowUnbounded()) {\n    if (range.isLowInclusive()) {\n      rangeConjuncts.add(greaterThanOrEqual(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(greaterThan(reference,toRowExpression(range.getLowBoundedValue(),type)));\n    }\n  }\n  if (!range.isHighUnbounded()) {\n    if (range.isHighInclusive()) {\n      rangeConjuncts.add(lessThanOrEqual(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n else {\n      rangeConjuncts.add(lessThan(reference,toRowExpression(range.getHighBoundedValue(),type)));\n    }\n  }\n  checkState(!rangeConjuncts.isEmpty());\n  return logicalRowExpressions.combineConjuncts(rangeConjuncts);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 172,
        "startColumnNumber" : 20,
        "endLineNumber" : 172,
        "endColumnNumber" : 111
      },
      "nodeContext" : "functionAndTypeManager.resolveOperator(BETWEEN,fromTypes(reference.getType(),type,type))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.function.OperatorType"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 171,
    "startColumnNumber" : 20,
    "endLineNumber" : 171,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 172,
    "startColumnNumber" : 59,
    "endLineNumber" : 172,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}