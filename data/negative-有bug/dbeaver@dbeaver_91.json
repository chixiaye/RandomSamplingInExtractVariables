{
  "id" : 91,
  "expression" : "\"$\"",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/driver/DriverClassFindJob.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"$\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 80,
      "endLineNumber" : 87,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 62,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "fileName.contains(\"$\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 87,
        "startColumnNumber" : 61,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "!fileName.contains(\"$\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n  String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n  monitor.subTask(className);\n  try {\n    if (implementsInterface(currentFile,current,0)) {\n      driverClassNames.add(className);\n    }\n  }\n catch (  Throwable e1) {\n  }\n  monitor.worked(1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 81,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (monitor.isCanceled()) {\n    break;\n  }\n  JarEntry current=(JarEntry)e.nextElement();\n  String fileName=current.getName();\n  if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n    String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n    monitor.subTask(className);\n    try {\n      if (implementsInterface(currentFile,current,0)) {\n        driverClassNames.add(className);\n      }\n    }\n catch (    Throwable e1) {\n    }\n    monitor.worked(1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 80,
        "startColumnNumber" : 82,
        "endLineNumber" : 100,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n{\n    if (monitor.isCanceled()) {\n      break;\n    }\n    JarEntry current=(JarEntry)e.nextElement();\n    String fileName=current.getName();\n    if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n      String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n      monitor.subTask(className);\n      try {\n        if (implementsInterface(currentFile,current,0)) {\n          driverClassNames.add(className);\n        }\n      }\n catch (      Throwable e1) {\n      }\n      monitor.worked(1);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Enumeration<?> e=currentFile.entries(); e.hasMoreElements(); ) {\n{\n    if (monitor.isCanceled()) {\n      break;\n    }\n    JarEntry current=(JarEntry)e.nextElement();\n    String fileName=current.getName();\n    if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n      String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n      monitor.subTask(className);\n      try {\n        if (implementsInterface(currentFile,current,0)) {\n          driverClassNames.add(className);\n        }\n      }\n catch (      Throwable e1) {\n      }\n      monitor.worked(1);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JarFile currentFile=new JarFile(libFile,false);\n  monitor.beginTask(libFile.getName(),currentFile.size());\n  for (Enumeration<?> e=currentFile.entries(); e.hasMoreElements(); ) {\n{\n      if (monitor.isCanceled()) {\n        break;\n      }\n      JarEntry current=(JarEntry)e.nextElement();\n      String fileName=current.getName();\n      if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n        String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n        monitor.subTask(className);\n        try {\n          if (implementsInterface(currentFile,current,0)) {\n            driverClassNames.add(className);\n          }\n        }\n catch (        Throwable e1) {\n        }\n        monitor.worked(1);\n      }\n    }\n  }\n  monitor.done();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1309,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JarFile currentFile=new JarFile(libFile,false);\n  monitor.beginTask(libFile.getName(),currentFile.size());\n  for (Enumeration<?> e=currentFile.entries(); e.hasMoreElements(); ) {\n{\n      if (monitor.isCanceled()) {\n        break;\n      }\n      JarEntry current=(JarEntry)e.nextElement();\n      String fileName=current.getName();\n      if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n        String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n        monitor.subTask(className);\n        try {\n          if (implementsInterface(currentFile,current,0)) {\n            driverClassNames.add(className);\n          }\n        }\n catch (        Throwable e1) {\n        }\n        monitor.worked(1);\n      }\n    }\n  }\n  monitor.done();\n}\n catch (IOException e) {\n  log.debug(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 134,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 75,
        "startColumnNumber" : 97,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    JarFile currentFile=new JarFile(libFile,false);\n    monitor.beginTask(libFile.getName(),currentFile.size());\n    for (Enumeration<?> e=currentFile.entries(); e.hasMoreElements(); ) {\n{\n        if (monitor.isCanceled()) {\n          break;\n        }\n        JarEntry current=(JarEntry)e.nextElement();\n        String fileName=current.getName();\n        if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n          String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n          monitor.subTask(className);\n          try {\n            if (implementsInterface(currentFile,current,0)) {\n              driverClassNames.add(className);\n            }\n          }\n catch (          Throwable e1) {\n          }\n          monitor.worked(1);\n        }\n      }\n    }\n    monitor.done();\n  }\n catch (  IOException e) {\n    log.debug(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1418,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void findDriverClasses(DBRProgressMonitor monitor,ClassLoader findCL,File libFile){\n  try {\n    JarFile currentFile=new JarFile(libFile,false);\n    monitor.beginTask(libFile.getName(),currentFile.size());\n    for (Enumeration<?> e=currentFile.entries(); e.hasMoreElements(); ) {\n{\n        if (monitor.isCanceled()) {\n          break;\n        }\n        JarEntry current=(JarEntry)e.nextElement();\n        String fileName=current.getName();\n        if (fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")) {\n          String className=fileName.replaceAll(\"/\",\".\").replace(CLASS_FILE_EXT,\"\");\n          monitor.subTask(className);\n          try {\n            if (implementsInterface(currentFile,current,0)) {\n              driverClassNames.add(className);\n            }\n          }\n catch (          Throwable e1) {\n          }\n          monitor.worked(1);\n        }\n      }\n    }\n    monitor.done();\n  }\n catch (  IOException e) {\n    log.debug(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "fileName.endsWith(CLASS_FILE_EXT) && !fileName.contains(\"$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 80,
    "endLineNumber" : 87,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}