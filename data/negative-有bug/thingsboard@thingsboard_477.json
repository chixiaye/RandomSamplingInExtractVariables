{
  "id" : 477,
  "expression" : "KeyValueProto",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/common/transport/transport-api/src/main/java/org/thingsboard/server/common/transport/adaptor/JsonConverter.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "KeyValueProto",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 204,
      "startColumnNumber" : 39,
      "endLineNumber" : 204,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 204,
        "endColumnNumber" : 65
      },
      "nodeContext" : "KeyValueProto.newBuilder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 204,
        "endColumnNumber" : 93
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 204,
        "endColumnNumber" : 124
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 205,
        "endColumnNumber" : 68
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 205,
        "endColumnNumber" : 76
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 204,
        "startColumnNumber" : 28,
        "endLineNumber" : 205,
        "endColumnNumber" : 77
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 204,
        "startColumnNumber" : 28,
        "endLineNumber" : 205,
        "endColumnNumber" : 78
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 203,
        "startColumnNumber" : 54,
        "endLineNumber" : 206,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 203,
        "startColumnNumber" : 26,
        "endLineNumber" : 206,
        "endColumnNumber" : 25
      },
      "nodeContext" : "catch (RuntimeException th) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 201,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 25
      },
      "nodeContext" : "try {\n  result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n}\n catch (RuntimeException th) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 434,
        "startLineNumber" : 200,
        "startColumnNumber" : 90,
        "endLineNumber" : 207,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  try {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n catch (  RuntimeException th) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n  try {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n catch (  RuntimeException th) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n else {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 195,
        "startColumnNumber" : 38,
        "endLineNumber" : 211,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n    String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n    throw new JsonSyntaxException(message);\n  }\n  if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n    try {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n catch (    RuntimeException th) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1689,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (value.isString()) {\n  if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n    String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n    throw new JsonSyntaxException(message);\n  }\n  if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n    try {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n catch (    RuntimeException th) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n else if (value.isBoolean()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n}\n else if (value.isNumber()) {\n  result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n}\n else if (!value.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1789,
        "startLineNumber" : 193,
        "startColumnNumber" : 43,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (element.isJsonPrimitive()) {\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n else if (element.isJsonObject() || element.isJsonArray()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n else if (!element.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 234,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2249,
        "startLineNumber" : 191,
        "startColumnNumber" : 78,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2319,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 189,
        "startColumnNumber" : 81,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static List<KeyValueProto> parseProtoValues(JsonObject valuesObject){\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 204,
        "startColumnNumber" : 39,
        "endLineNumber" : 204,
        "endColumnNumber" : 124
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "KeyValueProto",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 208,
      "startColumnNumber" : 35,
      "endLineNumber" : 208,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 208,
        "endColumnNumber" : 61
      },
      "nodeContext" : "KeyValueProto.newBuilder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 208,
        "endColumnNumber" : 89
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 208,
        "endColumnNumber" : 120
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 209,
        "endColumnNumber" : 64
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 209,
        "endColumnNumber" : 72
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 208,
        "startColumnNumber" : 24,
        "endLineNumber" : 209,
        "endColumnNumber" : 73
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 208,
        "startColumnNumber" : 24,
        "endLineNumber" : 209,
        "endColumnNumber" : 74
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 207,
        "startColumnNumber" : 27,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n  try {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n catch (  RuntimeException th) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n else {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 195,
        "startColumnNumber" : 38,
        "endLineNumber" : 211,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n    String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n    throw new JsonSyntaxException(message);\n  }\n  if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n    try {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n catch (    RuntimeException th) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1689,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (value.isString()) {\n  if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n    String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n    throw new JsonSyntaxException(message);\n  }\n  if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n    try {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n catch (    RuntimeException th) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n else if (value.isBoolean()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n}\n else if (value.isNumber()) {\n  result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n}\n else if (!value.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1789,
        "startLineNumber" : 193,
        "startColumnNumber" : 43,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (element.isJsonPrimitive()) {\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n else if (element.isJsonObject() || element.isJsonArray()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n else if (!element.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 234,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2249,
        "startLineNumber" : 191,
        "startColumnNumber" : 78,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2319,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 189,
        "startColumnNumber" : 81,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static List<KeyValueProto> parseProtoValues(JsonObject valuesObject){\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 208,
        "startColumnNumber" : 35,
        "endLineNumber" : 208,
        "endColumnNumber" : 120
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "KeyValueProto",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 212,
      "startColumnNumber" : 31,
      "endLineNumber" : 212,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 212,
        "endColumnNumber" : 57
      },
      "nodeContext" : "KeyValueProto.newBuilder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 212,
        "endColumnNumber" : 85
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 212,
        "endColumnNumber" : 117
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 213,
        "endColumnNumber" : 59
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 213,
        "endColumnNumber" : 67
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 212,
        "startColumnNumber" : 20,
        "endLineNumber" : 213,
        "endColumnNumber" : 68
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 212,
        "startColumnNumber" : 20,
        "endLineNumber" : 213,
        "endColumnNumber" : 69
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 211,
        "startColumnNumber" : 46,
        "endLineNumber" : 214,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 211,
        "startColumnNumber" : 23,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (value.isBoolean()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n}\n else if (value.isNumber()) {\n  result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n}\n else if (!value.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1689,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (value.isString()) {\n  if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n    String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n    throw new JsonSyntaxException(message);\n  }\n  if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n    try {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n catch (    RuntimeException th) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n  }\n}\n else if (value.isBoolean()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n}\n else if (value.isNumber()) {\n  result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n}\n else if (!value.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1789,
        "startLineNumber" : 193,
        "startColumnNumber" : 43,
        "endLineNumber" : 219,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (element.isJsonPrimitive()) {\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n else if (element.isJsonObject() || element.isJsonArray()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n else if (!element.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 234,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2249,
        "startLineNumber" : 191,
        "startColumnNumber" : 78,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2319,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 189,
        "startColumnNumber" : 81,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static List<KeyValueProto> parseProtoValues(JsonObject valuesObject){\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 212,
        "startColumnNumber" : 31,
        "endLineNumber" : 212,
        "endColumnNumber" : 117
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "KeyValueProto",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 220,
      "startColumnNumber" : 27,
      "endLineNumber" : 220,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 53
      },
      "nodeContext" : "KeyValueProto.newBuilder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 81
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 110
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 139
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 220,
        "startColumnNumber" : 27,
        "endLineNumber" : 220,
        "endColumnNumber" : 147
      },
      "nodeContext" : "KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 148
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 149
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 219,
        "startColumnNumber" : 72,
        "endLineNumber" : 221,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 219,
        "startColumnNumber" : 19,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (element.isJsonObject() || element.isJsonArray()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n else if (!element.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (element.isJsonPrimitive()) {\n  JsonPrimitive value=element.getAsJsonPrimitive();\n  if (value.isString()) {\n    if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n      String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n      throw new JsonSyntaxException(message);\n    }\n    if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n      try {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n catch (      RuntimeException th) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n    }\n  }\n else   if (value.isBoolean()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n  }\n else   if (value.isNumber()) {\n    result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n  }\n else   if (!value.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n  }\n}\n else if (element.isJsonObject() || element.isJsonArray()) {\n  result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n}\n else if (!element.isJsonNull()) {\n  throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 234,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2249,
        "startLineNumber" : 191,
        "startColumnNumber" : 78,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2319,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n  JsonElement element=valueEntry.getValue();\n  if (element.isJsonPrimitive()) {\n    JsonPrimitive value=element.getAsJsonPrimitive();\n    if (value.isString()) {\n      if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n        String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n        throw new JsonSyntaxException(message);\n      }\n      if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n        try {\n          result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n        }\n catch (        RuntimeException th) {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n      }\n    }\n else     if (value.isBoolean()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n    }\n else     if (value.isNumber()) {\n      result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n    }\n else     if (!value.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n    }\n  }\n else   if (element.isJsonObject() || element.isJsonArray()) {\n    result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n  }\n else   if (!element.isJsonNull()) {\n    throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 189,
        "startColumnNumber" : 81,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2491,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static List<KeyValueProto> parseProtoValues(JsonObject valuesObject){\n  List<KeyValueProto> result=new ArrayList<>();\n  for (  Entry<String,JsonElement> valueEntry : valuesObject.entrySet()) {\n    JsonElement element=valueEntry.getValue();\n    if (element.isJsonPrimitive()) {\n      JsonPrimitive value=element.getAsJsonPrimitive();\n      if (value.isString()) {\n        if (maxStringValueLength > 0 && value.getAsString().length() > maxStringValueLength) {\n          String message=String.format(\"String value length [%d] for key [%s] is greater than maximum allowed [%d]\",value.getAsString().length(),valueEntry.getKey(),maxStringValueLength);\n          throw new JsonSyntaxException(message);\n        }\n        if (isTypeCastEnabled && NumberUtils.isParsable(value.getAsString())) {\n          try {\n            result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n          }\n catch (          RuntimeException th) {\n            result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n          }\n        }\n else {\n          result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.STRING_V).setStringV(value.getAsString()).build());\n        }\n      }\n else       if (value.isBoolean()) {\n        result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.BOOLEAN_V).setBoolV(value.getAsBoolean()).build());\n      }\n else       if (value.isNumber()) {\n        result.add(buildNumericKeyValueProto(value,valueEntry.getKey()));\n      }\n else       if (!value.isJsonNull()) {\n        throw new JsonSyntaxException(CAN_T_PARSE_VALUE + value);\n      }\n    }\n else     if (element.isJsonObject() || element.isJsonArray()) {\n      result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n    }\n else     if (!element.isJsonNull()) {\n      throw new JsonSyntaxException(CAN_T_PARSE_VALUE + element);\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 220,
        "startColumnNumber" : 16,
        "endLineNumber" : 220,
        "endColumnNumber" : 149
      },
      "nodeContext" : "result.add(KeyValueProto.newBuilder().setKey(valueEntry.getKey()).setType(KeyValueType.JSON_V).setJsonV(element.toString()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 204,
    "startColumnNumber" : 39,
    "endLineNumber" : 204,
    "endColumnNumber" : 52
  }, {
    "charLength" : 13,
    "startLineNumber" : 208,
    "startColumnNumber" : 35,
    "endLineNumber" : 208,
    "endColumnNumber" : 48
  }, {
    "charLength" : 13,
    "startLineNumber" : 212,
    "startColumnNumber" : 31,
    "endLineNumber" : 212,
    "endColumnNumber" : 44
  }, {
    "charLength" : 13,
    "startLineNumber" : 220,
    "startColumnNumber" : 27,
    "endLineNumber" : 220,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 12
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 9
  } ]
}