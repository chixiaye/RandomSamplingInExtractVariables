{
  "id" : 388,
  "expression" : "new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim()",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 80,
      "startLineNumber" : 164,
      "startColumnNumber" : 12,
      "endLineNumber" : 164,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 93
      },
      "nodeContext" : "buildTime=Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Instant buildTime=Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1931,
        "startLineNumber" : 119,
        "startColumnNumber" : 99,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String targetImage=\"gcr.io/\" + IntegrationTestingConfiguration.getGCPProject() + \"/simpleimage:maven\"+ System.nanoTime();\n  try {\n    Verifier verifier=new Verifier(simpleTestProject.getProjectRoot().toString());\n    verifier.setSystemProperty(\"_TARGET_IMAGE\",targetImage);\n    verifier.setAutoclean(false);\n    verifier.executeGoals(Arrays.asList(\"clean\",\"jib:\" + BuildImageMojo.GOAL_NAME));\n    Assert.fail();\n  }\n catch (  VerificationException ex) {\n    Assert.assertThat(ex.getMessage(),CoreMatchers.containsString(\"Obtaining project build output files failed; make sure you have compiled your \" + \"project before trying to build the image. (Did you accidentally run \\\"mvn \" + \"clean jib:build\\\" instead of \\\"mvn clean compile jib:build\\\"?)\"));\n  }\n  Instant before=Instant.now();\n  Files.write(simpleTestProject.getProjectRoot().resolve(\"src\").resolve(\"main\").resolve(\"resources\").resolve(\"world\"),before.toString().getBytes(StandardCharsets.UTF_8));\n  Assert.assertEquals(\"Hello, \" + before + \". An argument.\\nfoo\\ncat\\n\",buildAndRun(simpleTestProject.getProjectRoot(),targetImage,true));\n  Instant buildTime=Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim());\n  Assert.assertTrue(buildTime.isAfter(before) || buildTime.equals(before));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testExecute_simple() throws VerificationException, IOException, InterruptedException {\n  String targetImage=\"gcr.io/\" + IntegrationTestingConfiguration.getGCPProject() + \"/simpleimage:maven\"+ System.nanoTime();\n  try {\n    Verifier verifier=new Verifier(simpleTestProject.getProjectRoot().toString());\n    verifier.setSystemProperty(\"_TARGET_IMAGE\",targetImage);\n    verifier.setAutoclean(false);\n    verifier.executeGoals(Arrays.asList(\"clean\",\"jib:\" + BuildImageMojo.GOAL_NAME));\n    Assert.fail();\n  }\n catch (  VerificationException ex) {\n    Assert.assertThat(ex.getMessage(),CoreMatchers.containsString(\"Obtaining project build output files failed; make sure you have compiled your \" + \"project before trying to build the image. (Did you accidentally run \\\"mvn \" + \"clean jib:build\\\" instead of \\\"mvn clean compile jib:build\\\"?)\"));\n  }\n  Instant before=Instant.now();\n  Files.write(simpleTestProject.getProjectRoot().resolve(\"src\").resolve(\"main\").resolve(\"resources\").resolve(\"world\"),before.toString().getBytes(StandardCharsets.UTF_8));\n  Assert.assertEquals(\"Hello, \" + before + \". An argument.\\nfoo\\ncat\\n\",buildAndRun(simpleTestProject.getProjectRoot(),targetImage,true));\n  Instant buildTime=Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim());\n  Assert.assertTrue(buildTime.isAfter(before) || buildTime.equals(before));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Instant.parse(new Command(\"docker\",\"inspect\",\"-f\",\"{{.Created}}\",targetImage).run().trim())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 80,
    "startLineNumber" : 164,
    "startColumnNumber" : 12,
    "endLineNumber" : 164,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}