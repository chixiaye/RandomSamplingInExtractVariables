{
  "id" : 512,
  "expression" : "DEFAULT_JSON_NON_EXECUTABLE",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/Gson.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DEFAULT_JSON_NON_EXECUTABLE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 175,
      "startColumnNumber" : 72,
      "endLineNumber" : 175,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 53
      },
      "nodeContext" : "this(Excluder.DEFAULT,FieldNamingPolicy.IDENTITY,Collections.<Type,InstanceCreator<?>>emptyMap(),false,false,DEFAULT_JSON_NON_EXECUTABLE,true,false,false,LongSerializationPolicy.DEFAULT,Collections.<TypeAdapterFactory>emptyList());\n",
      "nodeType" : "ConstructorInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 173,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this(Excluder.DEFAULT,FieldNamingPolicy.IDENTITY,Collections.<Type,InstanceCreator<?>>emptyMap(),false,false,DEFAULT_JSON_NON_EXECUTABLE,true,false,false,LongSerializationPolicy.DEFAULT,Collections.<TypeAdapterFactory>emptyList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2922,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 178,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructs a Gson object with default configuration. The default configuration has the following settings: <ul> <li>The JSON generated by <code>toJson</code> methods is in compact representation. This means that all the unneeded white-space is removed. You can change this behavior with {@link GsonBuilder#setPrettyPrinting()}. </li> <li>The generated JSON omits all the fields that are null. Note that nulls in arrays are kept as is since an array is an ordered list. Moreover, if a field is not null, but its generated JSON is empty, the field is kept. You can configure Gson to serialize null values by setting  {@link GsonBuilder#serializeNulls()}.</li> <li>Gson provides default serialization and deserialization for Enums,  {@link Map}, {@link java.net.URL},  {@link java.net.URI},  {@link java.util.Locale},  {@link java.util.Date}, {@link java.math.BigDecimal}, and  {@link java.math.BigInteger} classes. If you would preferto change the default representation, you can do so by registering a type adapter through {@link GsonBuilder#registerTypeAdapter(Type,Object)}. </li> <li>The default Date format is same as  {@link java.text.DateFormat#DEFAULT}. This format ignores the millisecond portion of the date during serialization. You can change this by invoking  {@link GsonBuilder#setDateFormat(int)} or{@link GsonBuilder#setDateFormat(String)}. </li> <li>By default, Gson ignores the  {@link com.google.gson.annotations.Expose} annotation.You can enable Gson to serialize/deserialize only those fields marked with this annotation through  {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li> <li>By default, Gson ignores the  {@link com.google.gson.annotations.Since} annotation. Youcan enable Gson to use this annotation through  {@link GsonBuilder#setVersion(double)}.</li> <li>The default field naming policy for the output Json is same as in Java. So, a Java class field <code>versionNumber</code> will be output as <code>&quot;versionNumber@quot;</code> in Json. The same rules are applied for mapping incoming Json to the Java classes. You can change this policy through  {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}.</li> <li>By default, Gson excludes <code>transient</code> or <code>static</code> fields from consideration for serialization and deserialization. You can change this behavior through {@link GsonBuilder#excludeFieldsWithModifiers(int...)}.</li> </ul>\n */\npublic Gson(){\n  this(Excluder.DEFAULT,FieldNamingPolicy.IDENTITY,Collections.<Type,InstanceCreator<?>>emptyMap(),false,false,DEFAULT_JSON_NON_EXECUTABLE,true,false,false,LongSerializationPolicy.DEFAULT,Collections.<TypeAdapterFactory>emptyList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 53
      },
      "nodeContext" : "this(Excluder.DEFAULT,FieldNamingPolicy.IDENTITY,Collections.<Type,InstanceCreator<?>>emptyMap(),false,false,DEFAULT_JSON_NON_EXECUTABLE,true,false,false,LongSerializationPolicy.DEFAULT,Collections.<TypeAdapterFactory>emptyList());\n",
      "nodeType" : "ConstructorInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 175,
    "startColumnNumber" : 72,
    "endLineNumber" : 175,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}