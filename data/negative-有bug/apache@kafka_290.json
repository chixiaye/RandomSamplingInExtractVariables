{
  "id" : 290,
  "expression" : "requestSpec1.scope",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/clients/admin/internals/AllBrokersStrategyIntegrationTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "requestSpec1.scope",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 123,
      "startColumnNumber" : 19,
      "endLineNumber" : 123,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 59
      },
      "nodeContext" : "requestSpec1.scope.destinationBrokerId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 123,
        "startColumnNumber" : 19,
        "endLineNumber" : 123,
        "endColumnNumber" : 71
      },
      "nodeContext" : "requestSpec1.scope.destinationBrokerId().isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertTrue(requestSpec1.scope.destinationBrokerId().isPresent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1992,
        "startLineNumber" : 105,
        "startColumnNumber" : 61,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AllBrokersStrategy.AllBrokersFuture<Integer> result=new AllBrokersStrategy.AllBrokersFuture<>();\n  AdminApiDriver<AllBrokersStrategy.BrokerKey,Integer> driver=buildDriver(result);\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> lookupSpecs=driver.poll();\n  assertEquals(1,lookupSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> lookupSpec=lookupSpecs.get(0);\n  Set<Integer> brokerIds=Utils.mkSet(1,2);\n  driver.onResponse(time.milliseconds(),lookupSpec,responseWithBrokers(brokerIds),Node.noNode());\n  assertTrue(result.all().isDone());\n  Map<Integer,KafkaFutureImpl<Integer>> brokerFutures=result.all().get();\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> requestSpecs=driver.poll();\n  assertEquals(2,requestSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec1=requestSpecs.get(0);\n  assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n  int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n  assertTrue(brokerIds.contains(brokerId1));\n  driver.onResponse(time.milliseconds(),requestSpec1,null,Node.noNode());\n  KafkaFutureImpl<Integer> future1=brokerFutures.get(brokerId1);\n  assertTrue(future1.isDone());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec2=requestSpecs.get(1);\n  assertTrue(requestSpec2.scope.destinationBrokerId().isPresent());\n  int brokerId2=requestSpec2.scope.destinationBrokerId().getAsInt();\n  assertNotEquals(brokerId1,brokerId2);\n  assertTrue(brokerIds.contains(brokerId2));\n  driver.onResponse(time.milliseconds(),requestSpec2,null,Node.noNode());\n  KafkaFutureImpl<Integer> future2=brokerFutures.get(brokerId2);\n  assertTrue(future2.isDone());\n  assertEquals(Collections.emptyList(),driver.poll());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMultiBrokerCompletion() throws Exception {\n  AllBrokersStrategy.AllBrokersFuture<Integer> result=new AllBrokersStrategy.AllBrokersFuture<>();\n  AdminApiDriver<AllBrokersStrategy.BrokerKey,Integer> driver=buildDriver(result);\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> lookupSpecs=driver.poll();\n  assertEquals(1,lookupSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> lookupSpec=lookupSpecs.get(0);\n  Set<Integer> brokerIds=Utils.mkSet(1,2);\n  driver.onResponse(time.milliseconds(),lookupSpec,responseWithBrokers(brokerIds),Node.noNode());\n  assertTrue(result.all().isDone());\n  Map<Integer,KafkaFutureImpl<Integer>> brokerFutures=result.all().get();\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> requestSpecs=driver.poll();\n  assertEquals(2,requestSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec1=requestSpecs.get(0);\n  assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n  int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n  assertTrue(brokerIds.contains(brokerId1));\n  driver.onResponse(time.milliseconds(),requestSpec1,null,Node.noNode());\n  KafkaFutureImpl<Integer> future1=brokerFutures.get(brokerId1);\n  assertTrue(future1.isDone());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec2=requestSpecs.get(1);\n  assertTrue(requestSpec2.scope.destinationBrokerId().isPresent());\n  int brokerId2=requestSpec2.scope.destinationBrokerId().getAsInt();\n  assertNotEquals(brokerId1,brokerId2);\n  assertTrue(brokerIds.contains(brokerId2));\n  driver.onResponse(time.milliseconds(),requestSpec2,null,Node.noNode());\n  KafkaFutureImpl<Integer> future2=brokerFutures.get(brokerId2);\n  assertTrue(future2.isDone());\n  assertEquals(Collections.emptyList(),driver.poll());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 321,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.kafka.clients.admin.internals.ApiRequestScope"
  }, {
    "nodeContext" : "requestSpec1.scope",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 124,
      "startColumnNumber" : 24,
      "endLineNumber" : 124,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 124,
        "startColumnNumber" : 24,
        "endLineNumber" : 124,
        "endColumnNumber" : 64
      },
      "nodeContext" : "requestSpec1.scope.destinationBrokerId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 124,
        "startColumnNumber" : 24,
        "endLineNumber" : 124,
        "endColumnNumber" : 75
      },
      "nodeContext" : "requestSpec1.scope.destinationBrokerId().getAsInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 75
      },
      "nodeContext" : "brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1992,
        "startLineNumber" : 105,
        "startColumnNumber" : 61,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AllBrokersStrategy.AllBrokersFuture<Integer> result=new AllBrokersStrategy.AllBrokersFuture<>();\n  AdminApiDriver<AllBrokersStrategy.BrokerKey,Integer> driver=buildDriver(result);\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> lookupSpecs=driver.poll();\n  assertEquals(1,lookupSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> lookupSpec=lookupSpecs.get(0);\n  Set<Integer> brokerIds=Utils.mkSet(1,2);\n  driver.onResponse(time.milliseconds(),lookupSpec,responseWithBrokers(brokerIds),Node.noNode());\n  assertTrue(result.all().isDone());\n  Map<Integer,KafkaFutureImpl<Integer>> brokerFutures=result.all().get();\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> requestSpecs=driver.poll();\n  assertEquals(2,requestSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec1=requestSpecs.get(0);\n  assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n  int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n  assertTrue(brokerIds.contains(brokerId1));\n  driver.onResponse(time.milliseconds(),requestSpec1,null,Node.noNode());\n  KafkaFutureImpl<Integer> future1=brokerFutures.get(brokerId1);\n  assertTrue(future1.isDone());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec2=requestSpecs.get(1);\n  assertTrue(requestSpec2.scope.destinationBrokerId().isPresent());\n  int brokerId2=requestSpec2.scope.destinationBrokerId().getAsInt();\n  assertNotEquals(brokerId1,brokerId2);\n  assertTrue(brokerIds.contains(brokerId2));\n  driver.onResponse(time.milliseconds(),requestSpec2,null,Node.noNode());\n  KafkaFutureImpl<Integer> future2=brokerFutures.get(brokerId2);\n  assertTrue(future2.isDone());\n  assertEquals(Collections.emptyList(),driver.poll());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMultiBrokerCompletion() throws Exception {\n  AllBrokersStrategy.AllBrokersFuture<Integer> result=new AllBrokersStrategy.AllBrokersFuture<>();\n  AdminApiDriver<AllBrokersStrategy.BrokerKey,Integer> driver=buildDriver(result);\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> lookupSpecs=driver.poll();\n  assertEquals(1,lookupSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> lookupSpec=lookupSpecs.get(0);\n  Set<Integer> brokerIds=Utils.mkSet(1,2);\n  driver.onResponse(time.milliseconds(),lookupSpec,responseWithBrokers(brokerIds),Node.noNode());\n  assertTrue(result.all().isDone());\n  Map<Integer,KafkaFutureImpl<Integer>> brokerFutures=result.all().get();\n  List<AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey>> requestSpecs=driver.poll();\n  assertEquals(2,requestSpecs.size());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec1=requestSpecs.get(0);\n  assertTrue(requestSpec1.scope.destinationBrokerId().isPresent());\n  int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n  assertTrue(brokerIds.contains(brokerId1));\n  driver.onResponse(time.milliseconds(),requestSpec1,null,Node.noNode());\n  KafkaFutureImpl<Integer> future1=brokerFutures.get(brokerId1);\n  assertTrue(future1.isDone());\n  AdminApiDriver.RequestSpec<AllBrokersStrategy.BrokerKey> requestSpec2=requestSpecs.get(1);\n  assertTrue(requestSpec2.scope.destinationBrokerId().isPresent());\n  int brokerId2=requestSpec2.scope.destinationBrokerId().getAsInt();\n  assertNotEquals(brokerId1,brokerId2);\n  assertTrue(brokerIds.contains(brokerId2));\n  driver.onResponse(time.milliseconds(),requestSpec2,null,Node.noNode());\n  KafkaFutureImpl<Integer> future2=brokerFutures.get(brokerId2);\n  assertTrue(future2.isDone());\n  assertEquals(Collections.emptyList(),driver.poll());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 321,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int brokerId1=requestSpec1.scope.destinationBrokerId().getAsInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.kafka.clients.admin.internals.ApiRequestScope"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 123,
    "startColumnNumber" : 19,
    "endLineNumber" : 123,
    "endColumnNumber" : 37
  }, {
    "charLength" : 18,
    "startLineNumber" : 124,
    "startColumnNumber" : 24,
    "endLineNumber" : 124,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}