{
  "id" : 424,
  "expression" : "\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\"",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/CodaBarWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 50,
      "startColumnNumber" : 10,
      "endLineNumber" : 50,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 48,
        "startColumnNumber" : 101,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!CodaBarReader.arrayContains(new char[]{'T','N','*','E'},Character.toUpperCase(contents.charAt(contents.length() - 1)))) {\n  throw new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2781,
        "startLineNumber" : 39,
        "startColumnNumber" : 40,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!CodaBarReader.arrayContains(new char[]{'A','B','C','D'},Character.toUpperCase(contents.charAt(0)))) {\n    throw new IllegalArgumentException(\"Codabar should start with one of the following: 'A', 'B', 'C' or 'D'\");\n  }\n  if (!CodaBarReader.arrayContains(new char[]{'T','N','*','E'},Character.toUpperCase(contents.charAt(contents.length() - 1)))) {\n    throw new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\");\n  }\n  int resultLength=20;\n  char[] charsWhichAreTenLengthEachAfterDecoded={'/',':','+','.'};\n  for (int i=1; i < contents.length() - 1; i++) {\n    if (Character.isDigit(contents.charAt(i)) || contents.charAt(i) == '-' || contents.charAt(i) == '$') {\n      resultLength+=9;\n    }\n else     if (CodaBarReader.arrayContains(charsWhichAreTenLengthEachAfterDecoded,contents.charAt(i))) {\n      resultLength+=10;\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot encode : '\" + contents.charAt(i) + '\\'');\n    }\n  }\n  resultLength+=contents.length() - 1;\n  byte[] result=new byte[resultLength];\n  int position=0;\n  for (int index=0; index < contents.length(); index++) {\n    char c=Character.toUpperCase(contents.charAt(index));\n    if (index == contents.length() - 1) {\nswitch (c) {\ncase 'T':        c='A';\n      break;\ncase 'N':    c='B';\n  break;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nbyte color=1;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor^=1;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=0;\nposition++;\n}\n}\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2832,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public byte[] encode(String contents){\n  if (!CodaBarReader.arrayContains(new char[]{'A','B','C','D'},Character.toUpperCase(contents.charAt(0)))) {\n    throw new IllegalArgumentException(\"Codabar should start with one of the following: 'A', 'B', 'C' or 'D'\");\n  }\n  if (!CodaBarReader.arrayContains(new char[]{'T','N','*','E'},Character.toUpperCase(contents.charAt(contents.length() - 1)))) {\n    throw new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\");\n  }\n  int resultLength=20;\n  char[] charsWhichAreTenLengthEachAfterDecoded={'/',':','+','.'};\n  for (int i=1; i < contents.length() - 1; i++) {\n    if (Character.isDigit(contents.charAt(i)) || contents.charAt(i) == '-' || contents.charAt(i) == '$') {\n      resultLength+=9;\n    }\n else     if (CodaBarReader.arrayContains(charsWhichAreTenLengthEachAfterDecoded,contents.charAt(i))) {\n      resultLength+=10;\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot encode : '\" + contents.charAt(i) + '\\'');\n    }\n  }\n  resultLength+=contents.length() - 1;\n  byte[] result=new byte[resultLength];\n  int position=0;\n  for (int index=0; index < contents.length(); index++) {\n    char c=Character.toUpperCase(contents.charAt(index));\n    if (index == contents.length() - 1) {\nswitch (c) {\ncase 'T':        c='A';\n      break;\ncase 'N':    c='B';\n  break;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nbyte color=1;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor^=1;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=0;\nposition++;\n}\n}\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 365,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new IllegalArgumentException(\"Codabar should end with one of the following: 'T', 'N', '*' or 'E'\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 13,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 50,
    "startColumnNumber" : 10,
    "endLineNumber" : 50,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}