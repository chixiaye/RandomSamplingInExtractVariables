{
  "id" : 31,
  "expression" : "expectedResults.get(i)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-tests/src/main/java/com/facebook/presto/tests/datatype/DataTypeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedResults.get(i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 62,
      "startColumnNumber" : 51,
      "endLineNumber" : 62,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 61,
        "startColumnNumber" : 61,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < expectedResults.size(); i++) {\n  assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 566,
        "startLineNumber" : 56,
        "startColumnNumber" : 87,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MaterializedResult materializedRows=prestoExecutor.execute(session,\"SELECT * from \" + testTable.getName());\n  assertEquals(materializedRows.getTypes(),expectedTypes);\n  List<Object> actualResults=getOnlyElement(materializedRows).getFields();\n  assertEquals(actualResults.size(),expectedResults.size(),\"lists don't have the same size\");\n  for (int i=0; i < expectedResults.size(); i++) {\n    assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (TestTable testTable=dataSetup.setupTestTable(unmodifiableList(inputs))){\n  MaterializedResult materializedRows=prestoExecutor.execute(session,\"SELECT * from \" + testTable.getName());\n  assertEquals(materializedRows.getTypes(),expectedTypes);\n  List<Object> actualResults=getOnlyElement(materializedRows).getFields();\n  assertEquals(actualResults.size(),expectedResults.size(),\"lists don't have the same size\");\n  for (int i=0; i < expectedResults.size(); i++) {\n    assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 869,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Type> expectedTypes=inputs.stream().map(Input::getPrestoResultType).collect(toList());\n  List<Object> expectedResults=inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n  try (TestTable testTable=dataSetup.setupTestTable(unmodifiableList(inputs))){\n    MaterializedResult materializedRows=prestoExecutor.execute(session,\"SELECT * from \" + testTable.getName());\n    assertEquals(materializedRows.getTypes(),expectedTypes);\n    List<Object> actualResults=getOnlyElement(materializedRows).getFields();\n    assertEquals(actualResults.size(),expectedResults.size(),\"lists don't have the same size\");\n    for (int i=0; i < expectedResults.size(); i++) {\n      assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void execute(QueryRunner prestoExecutor,Session session,DataSetup dataSetup){\n  List<Type> expectedTypes=inputs.stream().map(Input::getPrestoResultType).collect(toList());\n  List<Object> expectedResults=inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n  try (TestTable testTable=dataSetup.setupTestTable(unmodifiableList(inputs))){\n    MaterializedResult materializedRows=prestoExecutor.execute(session,\"SELECT * from \" + testTable.getName());\n    assertEquals(materializedRows.getTypes(),expectedTypes);\n    List<Object> actualResults=getOnlyElement(materializedRows).getFields();\n    assertEquals(actualResults.size(),expectedResults.size(),\"lists don't have the same size\");\n    for (int i=0; i < expectedResults.size(); i++) {\n      assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(actualResults.get(i),expectedResults.get(i),\"Element \" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 62,
    "startColumnNumber" : 51,
    "endLineNumber" : 62,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}