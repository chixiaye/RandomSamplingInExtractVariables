{
  "id" : 239,
  "expression" : "interval <= 0",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/test/e2e/e2e-common/src/main/java/org/apache/skywalking/e2e/retryable/RetryableTestExtension.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "interval <= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 47,
      "startColumnNumber" : 12,
      "endLineNumber" : 47,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interval <= 0) {\n  throw new IllegalArgumentException(\"RetryableTest#interval must be a positive integer, but was \" + interval);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 41,
        "startColumnNumber" : 119,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final RetryableTest retryableTest=context.getRequiredTestMethod().getAnnotation(RetryableTest.class);\n  final Class<? extends Throwable> throwable=retryableTest.throwable();\n  final long interval=retryableTest.interval();\n  final int times=retryableTest.value();\n  if (interval <= 0) {\n    throw new IllegalArgumentException(\"RetryableTest#interval must be a positive integer, but was \" + interval);\n  }\n  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<Integer>(){\n    final AtomicInteger count=new AtomicInteger(0);\n    @Override @SneakyThrows public boolean hasNext(){\n      final boolean shouldRetry=Stores.get(context,TEST_SHOULD_RETRY,Boolean.class) != Boolean.FALSE;\n      final boolean hasNext=(times < 0 || count.get() <= times) && shouldRetry;\n      if (hasNext) {\n        Thread.sleep(interval);\n      }\n      return hasNext;\n    }\n    @Override public Integer next(){\n      return count.getAndIncrement();\n    }\n  }\n,Spliterator.NONNULL),false).map(time -> new RetryableTestContext(throwable,time,times));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1534,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(final ExtensionContext context){\n  final RetryableTest retryableTest=context.getRequiredTestMethod().getAnnotation(RetryableTest.class);\n  final Class<? extends Throwable> throwable=retryableTest.throwable();\n  final long interval=retryableTest.interval();\n  final int times=retryableTest.value();\n  if (interval <= 0) {\n    throw new IllegalArgumentException(\"RetryableTest#interval must be a positive integer, but was \" + interval);\n  }\n  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<Integer>(){\n    final AtomicInteger count=new AtomicInteger(0);\n    @Override @SneakyThrows public boolean hasNext(){\n      final boolean shouldRetry=Stores.get(context,TEST_SHOULD_RETRY,Boolean.class) != Boolean.FALSE;\n      final boolean hasNext=(times < 0 || count.get() <= times) && shouldRetry;\n      if (hasNext) {\n        Thread.sleep(interval);\n      }\n      return hasNext;\n    }\n    @Override public Integer next(){\n      return count.getAndIncrement();\n    }\n  }\n,Spliterator.NONNULL),false).map(time -> new RetryableTestContext(throwable,time,times));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interval <= 0) {\n  throw new IllegalArgumentException(\"RetryableTest#interval must be a positive integer, but was \" + interval);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 47,
    "startColumnNumber" : 12,
    "endLineNumber" : 47,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}