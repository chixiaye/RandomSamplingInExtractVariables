{
  "id" : 228,
  "expression" : "videoWidth",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "videoWidth",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 2122,
      "startColumnNumber" : 84,
      "endLineNumber" : 2122,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 2122,
        "startColumnNumber" : 37,
        "endLineNumber" : 2122,
        "endColumnNumber" : 108
      },
      "nodeContext" : "MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 2122,
        "startColumnNumber" : 28,
        "endLineNumber" : 2122,
        "endColumnNumber" : 108
      },
      "nodeContext" : "format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 2122,
        "startColumnNumber" : 16,
        "endLineNumber" : 2122,
        "endColumnNumber" : 109
      },
      "nodeContext" : "MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4198,
        "startLineNumber" : 2084,
        "startColumnNumber" : 16,
        "endLineNumber" : 2160,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n  if (recordBufferSize <= 0) {\n    recordBufferSize=3584;\n  }\n  int bufferSize=2048 * 24;\n  if (bufferSize < recordBufferSize) {\n    bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n  }\n  for (int a=0; a < 3; a++) {\n    buffers.add(new AudioBufferInfo());\n  }\n  audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n  audioRecorder.startRecording();\n  if (BuildVars.LOGS_ENABLED) {\n    FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n  }\n  Thread thread=new Thread(recorderRunnable);\n  thread.setPriority(Thread.MAX_PRIORITY);\n  thread.start();\n  audioBufferInfo=new MediaCodec.BufferInfo();\n  videoBufferInfo=new MediaCodec.BufferInfo();\n  MediaFormat audioFormat=new MediaFormat();\n  audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n  audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n  audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n  audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n  audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n  audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n  audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  audioEncoder.start();\n  videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n  firstEncode=true;\n  MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n  format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n  format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n  videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  surface=videoEncoder.createInputSurface();\n  videoEncoder.start();\n  Mp4Movie movie=new Mp4Movie();\n  movie.setCacheFile(videoFile);\n  movie.setRotation(0);\n  movie.setSize(videoWidth,videoHeight);\n  mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n  AndroidUtilities.runOnUIThread(() -> {\n    if (cancelled) {\n      return;\n    }\n    try {\n      performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n    }\n catch (    Exception ignore) {\n    }\n    AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n    recording=true;\n    recordStartTime=System.currentTimeMillis();\n    invalidate();\n    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4289,
        "startLineNumber" : 2084,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n  if (recordBufferSize <= 0) {\n    recordBufferSize=3584;\n  }\n  int bufferSize=2048 * 24;\n  if (bufferSize < recordBufferSize) {\n    bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n  }\n  for (int a=0; a < 3; a++) {\n    buffers.add(new AudioBufferInfo());\n  }\n  audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n  audioRecorder.startRecording();\n  if (BuildVars.LOGS_ENABLED) {\n    FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n  }\n  Thread thread=new Thread(recorderRunnable);\n  thread.setPriority(Thread.MAX_PRIORITY);\n  thread.start();\n  audioBufferInfo=new MediaCodec.BufferInfo();\n  videoBufferInfo=new MediaCodec.BufferInfo();\n  MediaFormat audioFormat=new MediaFormat();\n  audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n  audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n  audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n  audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n  audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n  audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n  audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  audioEncoder.start();\n  videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n  firstEncode=true;\n  MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n  format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n  format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n  videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  surface=videoEncoder.createInputSurface();\n  videoEncoder.start();\n  Mp4Movie movie=new Mp4Movie();\n  movie.setCacheFile(videoFile);\n  movie.setRotation(0);\n  movie.setSize(videoWidth,videoHeight);\n  mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n  AndroidUtilities.runOnUIThread(() -> {\n    if (cancelled) {\n      return;\n    }\n    try {\n      performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n    }\n catch (    Exception ignore) {\n    }\n    AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n    recording=true;\n    recordStartTime=System.currentTimeMillis();\n    invalidate();\n    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n  }\n);\n}\n catch (Exception ioe) {\n  throw new RuntimeException(ioe);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 403,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8560,
        "startLineNumber" : 2083,
        "startColumnNumber" : 38,
        "endLineNumber" : 2249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n    if (recordBufferSize <= 0) {\n      recordBufferSize=3584;\n    }\n    int bufferSize=2048 * 24;\n    if (bufferSize < recordBufferSize) {\n      bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n    }\n    for (int a=0; a < 3; a++) {\n      buffers.add(new AudioBufferInfo());\n    }\n    audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n    audioRecorder.startRecording();\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n    }\n    Thread thread=new Thread(recorderRunnable);\n    thread.setPriority(Thread.MAX_PRIORITY);\n    thread.start();\n    audioBufferInfo=new MediaCodec.BufferInfo();\n    videoBufferInfo=new MediaCodec.BufferInfo();\n    MediaFormat audioFormat=new MediaFormat();\n    audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n    audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n    audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n    audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n    audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n    audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n    audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    audioEncoder.start();\n    videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n    firstEncode=true;\n    MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n    format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n    videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    surface=videoEncoder.createInputSurface();\n    videoEncoder.start();\n    Mp4Movie movie=new Mp4Movie();\n    movie.setCacheFile(videoFile);\n    movie.setRotation(0);\n    movie.setSize(videoWidth,videoHeight);\n    mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n    AndroidUtilities.runOnUIThread(() -> {\n      if (cancelled) {\n        return;\n      }\n      try {\n        performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n      }\n catch (      Exception ignore) {\n      }\n      AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n      recording=true;\n      recordStartTime=System.currentTimeMillis();\n      invalidate();\n      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n    }\n);\n  }\n catch (  Exception ioe) {\n    throw new RuntimeException(ioe);\n  }\n  if (eglDisplay != EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"EGL already set up\");\n  }\n  eglDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n  if (eglDisplay == EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"unable to get EGL14 display\");\n  }\n  int[] version=new int[2];\n  if (!EGL14.eglInitialize(eglDisplay,version,0,version,1)) {\n    eglDisplay=null;\n    throw new RuntimeException(\"unable to initialize EGL14\");\n  }\n  if (eglContext == EGL14.EGL_NO_CONTEXT) {\n    int renderableType=EGL14.EGL_OPENGL_ES2_BIT;\n    int[] attribList={EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_ALPHA_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,renderableType,0x3142,1,EGL14.EGL_NONE};\n    android.opengl.EGLConfig[] configs=new android.opengl.EGLConfig[1];\n    int[] numConfigs=new int[1];\n    if (!EGL14.eglChooseConfig(eglDisplay,attribList,0,configs,0,configs.length,numConfigs,0)) {\n      throw new RuntimeException(\"Unable to find a suitable EGLConfig\");\n    }\n    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};\n    eglContext=EGL14.eglCreateContext(eglDisplay,configs[0],sharedEglContext,attrib2_list,0);\n    eglConfig=configs[0];\n  }\n  int[] values=new int[1];\n  EGL14.eglQueryContext(eglDisplay,eglContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);\n  if (eglSurface != EGL14.EGL_NO_SURFACE) {\n    throw new IllegalStateException(\"surface already created\");\n  }\n  int[] surfaceAttribs={EGL14.EGL_NONE};\n  eglSurface=EGL14.eglCreateWindowSurface(eglDisplay,eglConfig,surface,surfaceAttribs,0);\n  if (eglSurface == null) {\n    throw new RuntimeException(\"surface was null\");\n  }\n  if (!EGL14.eglMakeCurrent(eglDisplay,eglSurface,eglSurface,eglContext)) {\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.e(\"eglMakeCurrent failed \" + GLUtils.getEGLErrorString(EGL14.eglGetError()));\n    }\n    throw new RuntimeException(\"eglMakeCurrent failed\");\n  }\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,VERTEX_SHADER);\n  int fragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,FRAGMENT_SHADER);\n  if (vertexShader != 0 && fragmentShader != 0) {\n    drawProgram=GLES20.glCreateProgram();\n    GLES20.glAttachShader(drawProgram,vertexShader);\n    GLES20.glAttachShader(drawProgram,fragmentShader);\n    GLES20.glLinkProgram(drawProgram);\n    int[] linkStatus=new int[1];\n    GLES20.glGetProgramiv(drawProgram,GLES20.GL_LINK_STATUS,linkStatus,0);\n    if (linkStatus[0] == 0) {\n      GLES20.glDeleteProgram(drawProgram);\n      drawProgram=0;\n    }\n else {\n      positionHandle=GLES20.glGetAttribLocation(drawProgram,\"aPosition\");\n      textureHandle=GLES20.glGetAttribLocation(drawProgram,\"aTextureCoord\");\n      scaleXHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleX\");\n      scaleYHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleY\");\n      alphaHandle=GLES20.glGetUniformLocation(drawProgram,\"alpha\");\n      vertexMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uMVPMatrix\");\n      textureMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uSTMatrix\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 853,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8590,
        "startLineNumber" : 2083,
        "startColumnNumber" : 8,
        "endLineNumber" : 2249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private void prepareEncoder(){\n  try {\n    int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n    if (recordBufferSize <= 0) {\n      recordBufferSize=3584;\n    }\n    int bufferSize=2048 * 24;\n    if (bufferSize < recordBufferSize) {\n      bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n    }\n    for (int a=0; a < 3; a++) {\n      buffers.add(new AudioBufferInfo());\n    }\n    audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n    audioRecorder.startRecording();\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n    }\n    Thread thread=new Thread(recorderRunnable);\n    thread.setPriority(Thread.MAX_PRIORITY);\n    thread.start();\n    audioBufferInfo=new MediaCodec.BufferInfo();\n    videoBufferInfo=new MediaCodec.BufferInfo();\n    MediaFormat audioFormat=new MediaFormat();\n    audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n    audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n    audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n    audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n    audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n    audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n    audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    audioEncoder.start();\n    videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n    firstEncode=true;\n    MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n    format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n    videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    surface=videoEncoder.createInputSurface();\n    videoEncoder.start();\n    Mp4Movie movie=new Mp4Movie();\n    movie.setCacheFile(videoFile);\n    movie.setRotation(0);\n    movie.setSize(videoWidth,videoHeight);\n    mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n    AndroidUtilities.runOnUIThread(() -> {\n      if (cancelled) {\n        return;\n      }\n      try {\n        performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n      }\n catch (      Exception ignore) {\n      }\n      AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n      recording=true;\n      recordStartTime=System.currentTimeMillis();\n      invalidate();\n      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n    }\n);\n  }\n catch (  Exception ioe) {\n    throw new RuntimeException(ioe);\n  }\n  if (eglDisplay != EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"EGL already set up\");\n  }\n  eglDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n  if (eglDisplay == EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"unable to get EGL14 display\");\n  }\n  int[] version=new int[2];\n  if (!EGL14.eglInitialize(eglDisplay,version,0,version,1)) {\n    eglDisplay=null;\n    throw new RuntimeException(\"unable to initialize EGL14\");\n  }\n  if (eglContext == EGL14.EGL_NO_CONTEXT) {\n    int renderableType=EGL14.EGL_OPENGL_ES2_BIT;\n    int[] attribList={EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_ALPHA_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,renderableType,0x3142,1,EGL14.EGL_NONE};\n    android.opengl.EGLConfig[] configs=new android.opengl.EGLConfig[1];\n    int[] numConfigs=new int[1];\n    if (!EGL14.eglChooseConfig(eglDisplay,attribList,0,configs,0,configs.length,numConfigs,0)) {\n      throw new RuntimeException(\"Unable to find a suitable EGLConfig\");\n    }\n    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};\n    eglContext=EGL14.eglCreateContext(eglDisplay,configs[0],sharedEglContext,attrib2_list,0);\n    eglConfig=configs[0];\n  }\n  int[] values=new int[1];\n  EGL14.eglQueryContext(eglDisplay,eglContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);\n  if (eglSurface != EGL14.EGL_NO_SURFACE) {\n    throw new IllegalStateException(\"surface already created\");\n  }\n  int[] surfaceAttribs={EGL14.EGL_NONE};\n  eglSurface=EGL14.eglCreateWindowSurface(eglDisplay,eglConfig,surface,surfaceAttribs,0);\n  if (eglSurface == null) {\n    throw new RuntimeException(\"surface was null\");\n  }\n  if (!EGL14.eglMakeCurrent(eglDisplay,eglSurface,eglSurface,eglContext)) {\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.e(\"eglMakeCurrent failed \" + GLUtils.getEGLErrorString(EGL14.eglGetError()));\n    }\n    throw new RuntimeException(\"eglMakeCurrent failed\");\n  }\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,VERTEX_SHADER);\n  int fragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,FRAGMENT_SHADER);\n  if (vertexShader != 0 && fragmentShader != 0) {\n    drawProgram=GLES20.glCreateProgram();\n    GLES20.glAttachShader(drawProgram,vertexShader);\n    GLES20.glAttachShader(drawProgram,fragmentShader);\n    GLES20.glLinkProgram(drawProgram);\n    int[] linkStatus=new int[1];\n    GLES20.glGetProgramiv(drawProgram,GLES20.GL_LINK_STATUS,linkStatus,0);\n    if (linkStatus[0] == 0) {\n      GLES20.glDeleteProgram(drawProgram);\n      drawProgram=0;\n    }\n else {\n      positionHandle=GLES20.glGetAttribLocation(drawProgram,\"aPosition\");\n      textureHandle=GLES20.glGetAttribLocation(drawProgram,\"aTextureCoord\");\n      scaleXHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleX\");\n      scaleYHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleY\");\n      alphaHandle=GLES20.glGetUniformLocation(drawProgram,\"alpha\");\n      vertexMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uMVPMatrix\");\n      textureMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uSTMatrix\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 857,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 2122,
        "startColumnNumber" : 16,
        "endLineNumber" : 2122,
        "endColumnNumber" : 109
      },
      "nodeContext" : "MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "videoWidth",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 2142,
      "startColumnNumber" : 30,
      "endLineNumber" : 2142,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 2142,
        "startColumnNumber" : 16,
        "endLineNumber" : 2142,
        "endColumnNumber" : 54
      },
      "nodeContext" : "movie.setSize(videoWidth,videoHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 2142,
        "startColumnNumber" : 16,
        "endLineNumber" : 2142,
        "endColumnNumber" : 55
      },
      "nodeContext" : "movie.setSize(videoWidth,videoHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4198,
        "startLineNumber" : 2084,
        "startColumnNumber" : 16,
        "endLineNumber" : 2160,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n  if (recordBufferSize <= 0) {\n    recordBufferSize=3584;\n  }\n  int bufferSize=2048 * 24;\n  if (bufferSize < recordBufferSize) {\n    bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n  }\n  for (int a=0; a < 3; a++) {\n    buffers.add(new AudioBufferInfo());\n  }\n  audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n  audioRecorder.startRecording();\n  if (BuildVars.LOGS_ENABLED) {\n    FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n  }\n  Thread thread=new Thread(recorderRunnable);\n  thread.setPriority(Thread.MAX_PRIORITY);\n  thread.start();\n  audioBufferInfo=new MediaCodec.BufferInfo();\n  videoBufferInfo=new MediaCodec.BufferInfo();\n  MediaFormat audioFormat=new MediaFormat();\n  audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n  audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n  audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n  audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n  audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n  audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n  audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  audioEncoder.start();\n  videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n  firstEncode=true;\n  MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n  format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n  format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n  videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  surface=videoEncoder.createInputSurface();\n  videoEncoder.start();\n  Mp4Movie movie=new Mp4Movie();\n  movie.setCacheFile(videoFile);\n  movie.setRotation(0);\n  movie.setSize(videoWidth,videoHeight);\n  mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n  AndroidUtilities.runOnUIThread(() -> {\n    if (cancelled) {\n      return;\n    }\n    try {\n      performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n    }\n catch (    Exception ignore) {\n    }\n    AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n    recording=true;\n    recordStartTime=System.currentTimeMillis();\n    invalidate();\n    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4289,
        "startLineNumber" : 2084,
        "startColumnNumber" : 12,
        "endLineNumber" : 2162,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n  if (recordBufferSize <= 0) {\n    recordBufferSize=3584;\n  }\n  int bufferSize=2048 * 24;\n  if (bufferSize < recordBufferSize) {\n    bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n  }\n  for (int a=0; a < 3; a++) {\n    buffers.add(new AudioBufferInfo());\n  }\n  audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n  audioRecorder.startRecording();\n  if (BuildVars.LOGS_ENABLED) {\n    FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n  }\n  Thread thread=new Thread(recorderRunnable);\n  thread.setPriority(Thread.MAX_PRIORITY);\n  thread.start();\n  audioBufferInfo=new MediaCodec.BufferInfo();\n  videoBufferInfo=new MediaCodec.BufferInfo();\n  MediaFormat audioFormat=new MediaFormat();\n  audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n  audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n  audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n  audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n  audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n  audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n  audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  audioEncoder.start();\n  videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n  firstEncode=true;\n  MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n  format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n  format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n  videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n  surface=videoEncoder.createInputSurface();\n  videoEncoder.start();\n  Mp4Movie movie=new Mp4Movie();\n  movie.setCacheFile(videoFile);\n  movie.setRotation(0);\n  movie.setSize(videoWidth,videoHeight);\n  mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n  AndroidUtilities.runOnUIThread(() -> {\n    if (cancelled) {\n      return;\n    }\n    try {\n      performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n    }\n catch (    Exception ignore) {\n    }\n    AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n    recording=true;\n    recordStartTime=System.currentTimeMillis();\n    invalidate();\n    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n  }\n);\n}\n catch (Exception ioe) {\n  throw new RuntimeException(ioe);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 403,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8560,
        "startLineNumber" : 2083,
        "startColumnNumber" : 38,
        "endLineNumber" : 2249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n    if (recordBufferSize <= 0) {\n      recordBufferSize=3584;\n    }\n    int bufferSize=2048 * 24;\n    if (bufferSize < recordBufferSize) {\n      bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n    }\n    for (int a=0; a < 3; a++) {\n      buffers.add(new AudioBufferInfo());\n    }\n    audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n    audioRecorder.startRecording();\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n    }\n    Thread thread=new Thread(recorderRunnable);\n    thread.setPriority(Thread.MAX_PRIORITY);\n    thread.start();\n    audioBufferInfo=new MediaCodec.BufferInfo();\n    videoBufferInfo=new MediaCodec.BufferInfo();\n    MediaFormat audioFormat=new MediaFormat();\n    audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n    audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n    audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n    audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n    audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n    audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n    audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    audioEncoder.start();\n    videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n    firstEncode=true;\n    MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n    format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n    videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    surface=videoEncoder.createInputSurface();\n    videoEncoder.start();\n    Mp4Movie movie=new Mp4Movie();\n    movie.setCacheFile(videoFile);\n    movie.setRotation(0);\n    movie.setSize(videoWidth,videoHeight);\n    mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n    AndroidUtilities.runOnUIThread(() -> {\n      if (cancelled) {\n        return;\n      }\n      try {\n        performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n      }\n catch (      Exception ignore) {\n      }\n      AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n      recording=true;\n      recordStartTime=System.currentTimeMillis();\n      invalidate();\n      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n    }\n);\n  }\n catch (  Exception ioe) {\n    throw new RuntimeException(ioe);\n  }\n  if (eglDisplay != EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"EGL already set up\");\n  }\n  eglDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n  if (eglDisplay == EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"unable to get EGL14 display\");\n  }\n  int[] version=new int[2];\n  if (!EGL14.eglInitialize(eglDisplay,version,0,version,1)) {\n    eglDisplay=null;\n    throw new RuntimeException(\"unable to initialize EGL14\");\n  }\n  if (eglContext == EGL14.EGL_NO_CONTEXT) {\n    int renderableType=EGL14.EGL_OPENGL_ES2_BIT;\n    int[] attribList={EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_ALPHA_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,renderableType,0x3142,1,EGL14.EGL_NONE};\n    android.opengl.EGLConfig[] configs=new android.opengl.EGLConfig[1];\n    int[] numConfigs=new int[1];\n    if (!EGL14.eglChooseConfig(eglDisplay,attribList,0,configs,0,configs.length,numConfigs,0)) {\n      throw new RuntimeException(\"Unable to find a suitable EGLConfig\");\n    }\n    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};\n    eglContext=EGL14.eglCreateContext(eglDisplay,configs[0],sharedEglContext,attrib2_list,0);\n    eglConfig=configs[0];\n  }\n  int[] values=new int[1];\n  EGL14.eglQueryContext(eglDisplay,eglContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);\n  if (eglSurface != EGL14.EGL_NO_SURFACE) {\n    throw new IllegalStateException(\"surface already created\");\n  }\n  int[] surfaceAttribs={EGL14.EGL_NONE};\n  eglSurface=EGL14.eglCreateWindowSurface(eglDisplay,eglConfig,surface,surfaceAttribs,0);\n  if (eglSurface == null) {\n    throw new RuntimeException(\"surface was null\");\n  }\n  if (!EGL14.eglMakeCurrent(eglDisplay,eglSurface,eglSurface,eglContext)) {\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.e(\"eglMakeCurrent failed \" + GLUtils.getEGLErrorString(EGL14.eglGetError()));\n    }\n    throw new RuntimeException(\"eglMakeCurrent failed\");\n  }\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,VERTEX_SHADER);\n  int fragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,FRAGMENT_SHADER);\n  if (vertexShader != 0 && fragmentShader != 0) {\n    drawProgram=GLES20.glCreateProgram();\n    GLES20.glAttachShader(drawProgram,vertexShader);\n    GLES20.glAttachShader(drawProgram,fragmentShader);\n    GLES20.glLinkProgram(drawProgram);\n    int[] linkStatus=new int[1];\n    GLES20.glGetProgramiv(drawProgram,GLES20.GL_LINK_STATUS,linkStatus,0);\n    if (linkStatus[0] == 0) {\n      GLES20.glDeleteProgram(drawProgram);\n      drawProgram=0;\n    }\n else {\n      positionHandle=GLES20.glGetAttribLocation(drawProgram,\"aPosition\");\n      textureHandle=GLES20.glGetAttribLocation(drawProgram,\"aTextureCoord\");\n      scaleXHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleX\");\n      scaleYHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleY\");\n      alphaHandle=GLES20.glGetUniformLocation(drawProgram,\"alpha\");\n      vertexMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uMVPMatrix\");\n      textureMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uSTMatrix\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 853,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8590,
        "startLineNumber" : 2083,
        "startColumnNumber" : 8,
        "endLineNumber" : 2249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private void prepareEncoder(){\n  try {\n    int recordBufferSize=AudioRecord.getMinBufferSize(44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);\n    if (recordBufferSize <= 0) {\n      recordBufferSize=3584;\n    }\n    int bufferSize=2048 * 24;\n    if (bufferSize < recordBufferSize) {\n      bufferSize=((recordBufferSize / 2048) + 1) * 2048 * 2;\n    }\n    for (int a=0; a < 3; a++) {\n      buffers.add(new AudioBufferInfo());\n    }\n    audioRecorder=new AudioRecord(MediaRecorder.AudioSource.DEFAULT,44100,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);\n    audioRecorder.startRecording();\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.d(\"initied audio record with channels \" + audioRecorder.getChannelCount() + \" sample rate = \"+ audioRecorder.getSampleRate()+ \" bufferSize = \"+ bufferSize);\n    }\n    Thread thread=new Thread(recorderRunnable);\n    thread.setPriority(Thread.MAX_PRIORITY);\n    thread.start();\n    audioBufferInfo=new MediaCodec.BufferInfo();\n    videoBufferInfo=new MediaCodec.BufferInfo();\n    MediaFormat audioFormat=new MediaFormat();\n    audioFormat.setString(MediaFormat.KEY_MIME,AUDIO_MIME_TYPE);\n    audioFormat.setInteger(MediaFormat.KEY_SAMPLE_RATE,44100);\n    audioFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);\n    audioFormat.setInteger(MediaFormat.KEY_BIT_RATE,32000);\n    audioFormat.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE,2048 * AudioBufferInfo.MAX_SAMPLES);\n    audioEncoder=MediaCodec.createEncoderByType(AUDIO_MIME_TYPE);\n    audioEncoder.configure(audioFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    audioEncoder.start();\n    videoEncoder=MediaCodec.createEncoderByType(VIDEO_MIME_TYPE);\n    firstEncode=true;\n    MediaFormat format=MediaFormat.createVideoFormat(VIDEO_MIME_TYPE,videoWidth,videoHeight);\n    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    format.setInteger(MediaFormat.KEY_BIT_RATE,videoBitrate);\n    format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);\n    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);\n    videoEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);\n    surface=videoEncoder.createInputSurface();\n    videoEncoder.start();\n    Mp4Movie movie=new Mp4Movie();\n    movie.setCacheFile(videoFile);\n    movie.setRotation(0);\n    movie.setSize(videoWidth,videoHeight);\n    mediaMuxer=new MP4Builder().createMovie(movie,isSecretChat);\n    AndroidUtilities.runOnUIThread(() -> {\n      if (cancelled) {\n        return;\n      }\n      try {\n        performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n      }\n catch (      Exception ignore) {\n      }\n      AndroidUtilities.lockOrientation(baseFragment.getParentActivity());\n      recording=true;\n      recordStartTime=System.currentTimeMillis();\n      invalidate();\n      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStarted,recordingGuid,false);\n    }\n);\n  }\n catch (  Exception ioe) {\n    throw new RuntimeException(ioe);\n  }\n  if (eglDisplay != EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"EGL already set up\");\n  }\n  eglDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n  if (eglDisplay == EGL14.EGL_NO_DISPLAY) {\n    throw new RuntimeException(\"unable to get EGL14 display\");\n  }\n  int[] version=new int[2];\n  if (!EGL14.eglInitialize(eglDisplay,version,0,version,1)) {\n    eglDisplay=null;\n    throw new RuntimeException(\"unable to initialize EGL14\");\n  }\n  if (eglContext == EGL14.EGL_NO_CONTEXT) {\n    int renderableType=EGL14.EGL_OPENGL_ES2_BIT;\n    int[] attribList={EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_ALPHA_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,renderableType,0x3142,1,EGL14.EGL_NONE};\n    android.opengl.EGLConfig[] configs=new android.opengl.EGLConfig[1];\n    int[] numConfigs=new int[1];\n    if (!EGL14.eglChooseConfig(eglDisplay,attribList,0,configs,0,configs.length,numConfigs,0)) {\n      throw new RuntimeException(\"Unable to find a suitable EGLConfig\");\n    }\n    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};\n    eglContext=EGL14.eglCreateContext(eglDisplay,configs[0],sharedEglContext,attrib2_list,0);\n    eglConfig=configs[0];\n  }\n  int[] values=new int[1];\n  EGL14.eglQueryContext(eglDisplay,eglContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);\n  if (eglSurface != EGL14.EGL_NO_SURFACE) {\n    throw new IllegalStateException(\"surface already created\");\n  }\n  int[] surfaceAttribs={EGL14.EGL_NONE};\n  eglSurface=EGL14.eglCreateWindowSurface(eglDisplay,eglConfig,surface,surfaceAttribs,0);\n  if (eglSurface == null) {\n    throw new RuntimeException(\"surface was null\");\n  }\n  if (!EGL14.eglMakeCurrent(eglDisplay,eglSurface,eglSurface,eglContext)) {\n    if (BuildVars.LOGS_ENABLED) {\n      FileLog.e(\"eglMakeCurrent failed \" + GLUtils.getEGLErrorString(EGL14.eglGetError()));\n    }\n    throw new RuntimeException(\"eglMakeCurrent failed\");\n  }\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,VERTEX_SHADER);\n  int fragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,FRAGMENT_SHADER);\n  if (vertexShader != 0 && fragmentShader != 0) {\n    drawProgram=GLES20.glCreateProgram();\n    GLES20.glAttachShader(drawProgram,vertexShader);\n    GLES20.glAttachShader(drawProgram,fragmentShader);\n    GLES20.glLinkProgram(drawProgram);\n    int[] linkStatus=new int[1];\n    GLES20.glGetProgramiv(drawProgram,GLES20.GL_LINK_STATUS,linkStatus,0);\n    if (linkStatus[0] == 0) {\n      GLES20.glDeleteProgram(drawProgram);\n      drawProgram=0;\n    }\n else {\n      positionHandle=GLES20.glGetAttribLocation(drawProgram,\"aPosition\");\n      textureHandle=GLES20.glGetAttribLocation(drawProgram,\"aTextureCoord\");\n      scaleXHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleX\");\n      scaleYHandle=GLES20.glGetUniformLocation(drawProgram,\"scaleY\");\n      alphaHandle=GLES20.glGetUniformLocation(drawProgram,\"alpha\");\n      vertexMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uMVPMatrix\");\n      textureMatrixHandle=GLES20.glGetUniformLocation(drawProgram,\"uSTMatrix\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 857,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 2142,
        "startColumnNumber" : 16,
        "endLineNumber" : 2142,
        "endColumnNumber" : 55
      },
      "nodeContext" : "movie.setSize(videoWidth,videoHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 2122,
    "startColumnNumber" : 84,
    "endLineNumber" : 2122,
    "endColumnNumber" : 94
  }, {
    "charLength" : 10,
    "startLineNumber" : 2142,
    "startColumnNumber" : 30,
    "endLineNumber" : 2142,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}