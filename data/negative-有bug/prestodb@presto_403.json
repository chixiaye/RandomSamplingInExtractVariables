{
  "id" : 403,
  "expression" : "true",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/block/BlockAssertions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 813,
      "startColumnNumber" : 39,
      "endLineNumber" : 813,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 813,
        "startColumnNumber" : 20,
        "endLineNumber" : 813,
        "endColumnNumber" : 43
      },
      "nodeContext" : "isNull[position]=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 813,
        "startColumnNumber" : 20,
        "endLineNumber" : 813,
        "endColumnNumber" : 44
      },
      "nodeContext" : "isNull[position]=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 812,
        "startColumnNumber" : 102,
        "endLineNumber" : 815,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  isNull[position]=true;\n  offsets[position + 1]=offsets[position];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 812,
        "startColumnNumber" : 16,
        "endLineNumber" : 818,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n  isNull[position]=true;\n  offsets[position + 1]=offsets[position];\n}\n else {\n  offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 811,
        "startColumnNumber" : 73,
        "endLineNumber" : 819,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n    isNull[position]=true;\n    offsets[position + 1]=offsets[position];\n  }\n else {\n    offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 811,
        "startColumnNumber" : 12,
        "endLineNumber" : 819,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int position=0; position < positionCount; position++) {\n  if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n    isNull[position]=true;\n    offsets[position + 1]=offsets[position];\n  }\n else {\n    offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 69,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2440,
        "startLineNumber" : 802,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2582,
        "startLineNumber" : 799,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 300,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 790,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof DecimalType) {\n  DecimalType decimalType=(DecimalType)type;\n  if (decimalType.isShort()) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else {\n    block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n  }\n}\n else if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 335,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3086,
        "startLineNumber" : 787,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type == SMALLINT) {\n  block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n}\n else if (type instanceof DecimalType) {\n  DecimalType decimalType=(DecimalType)type;\n  if (decimalType.isShort()) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else {\n    block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n  }\n}\n else if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 347,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3225,
        "startLineNumber" : 784,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type == INTEGER || type == REAL) {\n  block=createRandomIntsBlock(positionCount,primitiveNullRate);\n}\n else if (type == SMALLINT) {\n  block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n}\n else if (type instanceof DecimalType) {\n  DecimalType decimalType=(DecimalType)type;\n  if (decimalType.isShort()) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else {\n    block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n  }\n}\n else if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 363,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3348,
        "startLineNumber" : 781,
        "startColumnNumber" : 13,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type == BIGINT) {\n  block=createRandomLongsBlock(positionCount,primitiveNullRate);\n}\n else if (type == INTEGER || type == REAL) {\n  block=createRandomIntsBlock(positionCount,primitiveNullRate);\n}\n else if (type == SMALLINT) {\n  block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n}\n else if (type instanceof DecimalType) {\n  DecimalType decimalType=(DecimalType)type;\n  if (decimalType.isShort()) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else {\n    block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n  }\n}\n else if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 375,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3475,
        "startLineNumber" : 778,
        "startColumnNumber" : 8,
        "endLineNumber" : 846,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type == BOOLEAN) {\n  block=createRandomBooleansBlock(positionCount,primitiveNullRate);\n}\n else if (type == BIGINT) {\n  block=createRandomLongsBlock(positionCount,primitiveNullRate);\n}\n else if (type == INTEGER || type == REAL) {\n  block=createRandomIntsBlock(positionCount,primitiveNullRate);\n}\n else if (type == SMALLINT) {\n  block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n}\n else if (type instanceof DecimalType) {\n  DecimalType decimalType=(DecimalType)type;\n  if (decimalType.isShort()) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else {\n    block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n  }\n}\n else if (type == VARCHAR) {\n  block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n}\n else {\n  boolean[] isNull=null;\n  if (nestedNullRate > 0) {\n    isNull=new boolean[positionCount];\n  }\n  int[] offsets=new int[positionCount + 1];\n  for (int position=0; position < positionCount; position++) {\n    if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n      isNull[position]=true;\n      offsets[position + 1]=offsets[position];\n    }\n else {\n      offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n    }\n  }\n  if (type instanceof ArrayType) {\n    Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n    Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n    block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n  }\n else   if (type instanceof RowType) {\n    List<Type> fieldTypes=type.getTypeParameters();\n    Block[] fieldBlocks=new Block[fieldTypes.size()];\n    for (int i=0; i < fieldBlocks.length; i++) {\n      fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n    }\n    block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n  }\n else {\n    throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 387,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3980,
        "startLineNumber" : 768,
        "startColumnNumber" : 4,
        "endLineNumber" : 859,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyNullRate(primitiveNullRate);\n  verifyNullRate(nestedNullRate);\n  Block block=null;\n  if (createView) {\n    positionCount*=2;\n  }\n  if (type == BOOLEAN) {\n    block=createRandomBooleansBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == BIGINT) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == INTEGER || type == REAL) {\n    block=createRandomIntsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == SMALLINT) {\n    block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type instanceof DecimalType) {\n    DecimalType decimalType=(DecimalType)type;\n    if (decimalType.isShort()) {\n      block=createRandomLongsBlock(positionCount,primitiveNullRate);\n    }\n else {\n      block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n    }\n  }\n else   if (type == VARCHAR) {\n    block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n  }\n else {\n    boolean[] isNull=null;\n    if (nestedNullRate > 0) {\n      isNull=new boolean[positionCount];\n    }\n    int[] offsets=new int[positionCount + 1];\n    for (int position=0; position < positionCount; position++) {\n      if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n        isNull[position]=true;\n        offsets[position + 1]=offsets[position];\n      }\n else {\n        offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n      }\n    }\n    if (type instanceof ArrayType) {\n      Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n      block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n    }\n else     if (type instanceof MapType) {\n      MapType mapType=(MapType)type;\n      Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n      Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n      block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n    }\n else     if (type instanceof RowType) {\n      List<Type> fieldTypes=type.getTypeParameters();\n      Block[] fieldBlocks=new Block[fieldTypes.size()];\n      for (int i=0; i < fieldBlocks.length; i++) {\n        fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n      }\n      block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n    }\n else {\n      throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n    }\n  }\n  if (createView) {\n    positionCount/=2;\n    int offset=positionCount / 2;\n    block=block.getRegion(offset,positionCount);\n  }\n  if (!wrappings.isEmpty()) {\n    block=wrapBlock(block,positionCount,wrappings);\n  }\n  return block;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 447,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4225,
        "startLineNumber" : 761,
        "startColumnNumber" : 4,
        "endLineNumber" : 859,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Block createRandomBlockForType(Type type,int positionCount,float primitiveNullRate,float nestedNullRate,boolean createView,List<Encoding> wrappings){\n  verifyNullRate(primitiveNullRate);\n  verifyNullRate(nestedNullRate);\n  Block block=null;\n  if (createView) {\n    positionCount*=2;\n  }\n  if (type == BOOLEAN) {\n    block=createRandomBooleansBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == BIGINT) {\n    block=createRandomLongsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == INTEGER || type == REAL) {\n    block=createRandomIntsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type == SMALLINT) {\n    block=createRandomSmallintsBlock(positionCount,primitiveNullRate);\n  }\n else   if (type instanceof DecimalType) {\n    DecimalType decimalType=(DecimalType)type;\n    if (decimalType.isShort()) {\n      block=createRandomLongsBlock(positionCount,primitiveNullRate);\n    }\n else {\n      block=createRandomLongDecimalsBlock(positionCount,primitiveNullRate);\n    }\n  }\n else   if (type == VARCHAR) {\n    block=createRandomStringBlock(positionCount,primitiveNullRate,MAX_STRING_SIZE);\n  }\n else {\n    boolean[] isNull=null;\n    if (nestedNullRate > 0) {\n      isNull=new boolean[positionCount];\n    }\n    int[] offsets=new int[positionCount + 1];\n    for (int position=0; position < positionCount; position++) {\n      if (nestedNullRate > 0 && ThreadLocalRandom.current().nextDouble(1) < nestedNullRate) {\n        isNull[position]=true;\n        offsets[position + 1]=offsets[position];\n      }\n else {\n        offsets[position + 1]=offsets[position] + (type instanceof RowType ? 1 : ThreadLocalRandom.current().nextInt(ENTRY_SIZE) + 1);\n      }\n    }\n    if (type instanceof ArrayType) {\n      Block valuesBlock=createRandomBlockForType(((ArrayType)type).getElementType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n      block=fromElementBlock(positionCount,Optional.ofNullable(isNull),offsets,valuesBlock);\n    }\n else     if (type instanceof MapType) {\n      MapType mapType=(MapType)type;\n      Block keyBlock=createRandomBlockForType(mapType.getKeyType(),offsets[positionCount],0.0f,0.0f,createView,wrappings);\n      Block valueBlock=createRandomBlockForType(mapType.getValueType(),offsets[positionCount],primitiveNullRate,nestedNullRate,createView,wrappings);\n      block=mapType.createBlockFromKeyValue(positionCount,Optional.ofNullable(isNull),offsets,keyBlock,valueBlock);\n    }\n else     if (type instanceof RowType) {\n      List<Type> fieldTypes=type.getTypeParameters();\n      Block[] fieldBlocks=new Block[fieldTypes.size()];\n      for (int i=0; i < fieldBlocks.length; i++) {\n        fieldBlocks[i]=createRandomBlockForType(fieldTypes.get(i),positionCount,primitiveNullRate,nestedNullRate,createView,wrappings);\n      }\n      block=fromFieldBlocks(positionCount,Optional.ofNullable(isNull),fieldBlocks);\n    }\n else {\n      throw new IllegalArgumentException(format(\"type %s is not supported.\",type));\n    }\n  }\n  if (createView) {\n    positionCount/=2;\n    int offset=positionCount / 2;\n    block=block.getRegion(offset,positionCount);\n  }\n  if (!wrappings.isEmpty()) {\n    block=wrapBlock(block,positionCount,wrappings);\n  }\n  return block;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 476,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 813,
        "startColumnNumber" : 20,
        "endLineNumber" : 813,
        "endColumnNumber" : 44
      },
      "nodeContext" : "isNull[position]=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 813,
    "startColumnNumber" : 39,
    "endLineNumber" : 813,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}