{
  "id" : 94,
  "expression" : "next",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/src/main/java/com/thealgorithms/maths/Combinations.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "next",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 56,
      "startColumnNumber" : 23,
      "endLineNumber" : 56,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 27
      },
      "nodeContext" : "solution=next",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solution=next;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 54,
        "startColumnNumber" : 36,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long next=(n - i) * solution / (i + 1);\n  solution=next;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < k; i++) {\n  long next=(n - i) * solution / (i + 1);\n  solution=next;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 45,
        "startColumnNumber" : 59,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (n < 0 || k < 0) {\n    throw new IllegalArgumentException(\"n or k can't be negative\");\n  }\n  if (n < k) {\n    throw new IllegalArgumentException(\"n can't be smaller than k\");\n  }\n  long solution=1;\n  for (int i=0; i < k; i++) {\n    long next=(n - i) * solution / (i + 1);\n    solution=next;\n  }\n  return solution;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The above method can exceed limit of long (overflow) when factorial(n) is larger than limits of long variable. Thus even if nCk is within range of long variable above reason can lead to incorrect result. This is an optimized version of computing combinations. Observations: nC(k + 1) = (n - k) * nCk / (k + 1) We know the value of nCk when k = 1 which is nCk = n Using this base value and above formula we can compute the next term nC(k+1)\n * @param n\n * @param k\n * @return nCk\n */\npublic static long combinationsOptimized(int n,int k){\n  if (n < 0 || k < 0) {\n    throw new IllegalArgumentException(\"n or k can't be negative\");\n  }\n  if (n < k) {\n    throw new IllegalArgumentException(\"n can't be smaller than k\");\n  }\n  long solution=1;\n  for (int i=0; i < k; i++) {\n    long next=(n - i) * solution / (i + 1);\n    solution=next;\n  }\n  return solution;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 75,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solution=next;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 56,
    "startColumnNumber" : 23,
    "endLineNumber" : 56,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}