{
  "id" : 268,
  "expression" : "targetHeight",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/library/src/main/java/com/nostra13/universalimageloader/utils/ImageSizeUtils.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 113,
      "startColumnNumber" : 87,
      "endLineNumber" : 113,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 113,
        "startColumnNumber" : 64,
        "endLineNumber" : 113,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 27,
        "endLineNumber" : 113,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 115,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 110,
        "startColumnNumber" : 35,
        "endLineNumber" : 116,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    final int halfWidth=srcWidth / 2;\n    final int halfHeight=srcHeight / 2;\n    while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nfinal int halfWidth=srcWidth / 2;\nfinal int halfHeight=srcHeight / 2;\nwhile ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n}\n else {\nscale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 100,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3128,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 27,
        "endLineNumber" : 113,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "targetHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 117,
      "startColumnNumber" : 73,
      "endLineNumber" : 117,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 117,
        "startColumnNumber" : 61,
        "endLineNumber" : 117,
        "endColumnNumber" : 85
      },
      "nodeContext" : "srcHeight / targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 117,
        "startColumnNumber" : 28,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Math.max(srcWidth / targetWidth,srcHeight / targetHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 87
      },
      "nodeContext" : "scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 116,
        "startColumnNumber" : 23,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    final int halfWidth=srcWidth / 2;\n    final int halfHeight=srcHeight / 2;\n    while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nfinal int halfWidth=srcWidth / 2;\nfinal int halfHeight=srcHeight / 2;\nwhile ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n}\n else {\nscale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 100,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3128,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 87
      },
      "nodeContext" : "scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "targetHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 124,
      "startColumnNumber" : 87,
      "endLineNumber" : 124,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 124,
        "startColumnNumber" : 64,
        "endLineNumber" : 124,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 124,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 124,
        "startColumnNumber" : 20,
        "endLineNumber" : 126,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 121,
        "startColumnNumber" : 35,
        "endLineNumber" : 127,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    final int halfWidth=srcWidth / 2;\n    final int halfHeight=srcHeight / 2;\n    while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nfinal int halfWidth=srcWidth / 2;\nfinal int halfHeight=srcHeight / 2;\nwhile ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n}\n else {\nscale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 100,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3128,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 124,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "targetHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 128,
      "startColumnNumber" : 73,
      "endLineNumber" : 128,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 128,
        "startColumnNumber" : 61,
        "endLineNumber" : 128,
        "endColumnNumber" : 85
      },
      "nodeContext" : "srcHeight / targetHeight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 128,
        "startColumnNumber" : 28,
        "endLineNumber" : 128,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Math.min(srcWidth / targetWidth,srcHeight / targetHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 128,
        "startColumnNumber" : 20,
        "endLineNumber" : 128,
        "endColumnNumber" : 86
      },
      "nodeContext" : "scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 128,
        "startColumnNumber" : 20,
        "endLineNumber" : 128,
        "endColumnNumber" : 87
      },
      "nodeContext" : "scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 127,
        "startColumnNumber" : 23,
        "endLineNumber" : 129,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (viewScaleType) {\ncase FIT_INSIDE:  if (powerOf2Scale) {\n    final int halfWidth=srcWidth / 2;\n    final int halfHeight=srcHeight / 2;\n    while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n      scale*=2;\n    }\n  }\n else {\n    scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n  }\nbreak;\ncase CROP:if (powerOf2Scale) {\nfinal int halfWidth=srcWidth / 2;\nfinal int halfHeight=srcHeight / 2;\nwhile ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n  scale*=2;\n}\n}\n else {\nscale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 100,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3128,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes sample size for downscaling image size (<b>srcSize</b>) to view size (<b>targetSize</b>). This sample size is used during {@linkplain BitmapFactory#decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options) decoding image} to bitmap.<br /><br /> <b>Examples:</b><br /> <p/> <pre> srcSize(100x100), targetSize(10x10), powerOf2Scale = true -> sampleSize = 8 srcSize(100x100), targetSize(10x10), powerOf2Scale = false -> sampleSize = 10 srcSize(100x100), targetSize(20x40), viewScaleType = FIT_INSIDE -> sampleSize = 5 srcSize(100x100), targetSize(20x40), viewScaleType = CROP       -> sampleSize = 2 </pre> <p/> <br /> The sample size is the number of pixels in either dimension that correspond to a single pixel in the decoded bitmap. For example, inSampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Any value <= 1 is treated the same as 1.\n * @param srcSize       Original (image) size\n * @param targetSize    Target (view) size\n * @param viewScaleType {@linkplain ViewScaleType Scale type} for placing image in view\n * @param powerOf2Scale <i>true</i> - if sample size be a power of 2 (1, 2, 4, 8, ...)\n * @return Computed sample size\n */\npublic static int computeImageSampleSize(ImageSize srcSize,ImageSize targetSize,ViewScaleType viewScaleType,boolean powerOf2Scale){\n  final int srcWidth=srcSize.getWidth();\n  final int srcHeight=srcSize.getHeight();\n  final int targetWidth=targetSize.getWidth();\n  final int targetHeight=targetSize.getHeight();\n  int scale=1;\nswitch (viewScaleType) {\ncase FIT_INSIDE:    if (powerOf2Scale) {\n      final int halfWidth=srcWidth / 2;\n      final int halfHeight=srcHeight / 2;\n      while ((halfWidth / scale) > targetWidth || (halfHeight / scale) > targetHeight) {\n        scale*=2;\n      }\n    }\n else {\n      scale=Math.max(srcWidth / targetWidth,srcHeight / targetHeight);\n    }\n  break;\ncase CROP:if (powerOf2Scale) {\n  final int halfWidth=srcWidth / 2;\n  final int halfHeight=srcHeight / 2;\n  while ((halfWidth / scale) > targetWidth && (halfHeight / scale) > targetHeight) {\n    scale*=2;\n  }\n}\n else {\n  scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n}\nbreak;\n}\nif (scale < 1) {\nscale=1;\n}\nscale=considerMaxTextureSize(srcWidth,srcHeight,scale,powerOf2Scale);\nreturn scale;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 128,
        "startColumnNumber" : 20,
        "endLineNumber" : 128,
        "endColumnNumber" : 87
      },
      "nodeContext" : "scale=Math.min(srcWidth / targetWidth,srcHeight / targetHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 113,
    "startColumnNumber" : 87,
    "endLineNumber" : 113,
    "endColumnNumber" : 99
  }, {
    "charLength" : 12,
    "startLineNumber" : 117,
    "startColumnNumber" : 73,
    "endLineNumber" : 117,
    "endColumnNumber" : 85
  }, {
    "charLength" : 12,
    "startLineNumber" : 124,
    "startColumnNumber" : 87,
    "endLineNumber" : 124,
    "endColumnNumber" : 99
  }, {
    "charLength" : 12,
    "startLineNumber" : 128,
    "startColumnNumber" : 73,
    "endLineNumber" : 128,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}