{
  "id" : 229,
  "expression" : "suggestHelp()",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/integration/client-cli/client-registration-cli/src/main/java/org/keycloak/client/registration/cli/commands/CreateCmd.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "suggestHelp()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 216,
      "startColumnNumber" : 64,
      "endLineNumber" : 216,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 216,
        "startColumnNumber" : 47,
        "endLineNumber" : 216,
        "endColumnNumber" : 77
      },
      "nodeContext" : "e.getMessage() + suggestHelp()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 216,
        "startColumnNumber" : 18,
        "endLineNumber" : 216,
        "endColumnNumber" : 81
      },
      "nodeContext" : "new IllegalArgumentException(e.getMessage() + suggestHelp(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 215,
        "startColumnNumber" : 45,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 215,
        "startColumnNumber" : 10,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IllegalArgumentException e) {\n  throw new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5020,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  if (args != null) {\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"-s\":case \"--set\":{\n          if (!it.hasNext()) {\n            throw new IllegalArgumentException(\"Option \" + option + \" requires a value\");\n          }\n          String[] keyVal=parseKeyVal(it.next());\n          attrs.add(new AttributeOperation(SET,keyVal[0],keyVal[1]));\n          break;\n        }\ndefault:{\n        throw new IllegalArgumentException(\"Unsupported option: \" + option);\n      }\n  }\n}\n}\nif (file == null && attrs.size() == 0) {\nthrow new IllegalArgumentException(\"No file nor attribute values specified\");\n}\nif (outputClient && returnClientId) {\nthrow new IllegalArgumentException(\"Options -o and -i are mutually exclusive\");\n}\nif (\"-\".equals(token)) {\ntoken=readSecret(\"Enter Initial Access Token: \",commandInvocation);\n}\nCmdStdinContext ctx=new CmdStdinContext();\nif (file != null) {\nctx=parseFileOrStdin(file,regType);\n}\nif (ctx.getEndpointType() == null) {\nregType=regType != null ? regType : DEFAULT;\nctx.setEndpointType(regType);\n}\n else if (regType != null && ctx.getEndpointType() != regType) {\nthrow new RuntimeException(\"Requested endpoint type not compatible with detected configuration format: \" + ctx.getEndpointType());\n}\nif (attrs.size() > 0) {\nctx=mergeAttributes(ctx,attrs);\n}\nString contentType=getExpectedContentType(ctx.getEndpointType());\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nif (token == null) {\ntoken=config.sessionRealmConfigData().getInitialToken();\n}\nsetupTruststore(config,commandInvocation);\nString auth=token;\nif (auth == null) {\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\n  auth=ensureToken(config);\n}\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=config.getRealm();\nInputStream response=doPost(server + \"/realms/\" + realm+ \"/clients-registrations/\"+ ctx.getEndpointType().getEndpoint(),contentType,HttpUtil.APPLICATION_JSON,ctx.getContent(),auth);\ntry {\nif (ctx.getEndpointType() == DEFAULT || ctx.getEndpointType() == SAML2) {\n  ClientRepresentation client=JsonSerialization.readValue(response,ClientRepresentation.class);\n  outputResult(client.getClientId(),client);\n  saveMergeConfig(cfg -> {\n    setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n  }\n);\n}\n else if (ctx.getEndpointType() == OIDC) {\n  OIDCClientRepresentation client=JsonSerialization.readValue(response,OIDCClientRepresentation.class);\n  outputResult(client.getClientId(),client);\n  saveMergeConfig(cfg -> {\n    setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n  }\n);\n}\n else {\n  printOut(\"Response from server: \" + readFully(response));\n}\n}\n catch (UnrecognizedPropertyException e) {\nthrow new RuntimeException(\"Failed to process HTTP reponse - \" + e.getMessage(),e);\n}\ncatch (IOException e) {\nthrow new RuntimeException(\"Failed to process HTTP response\",e);\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 513,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5099,
        "startLineNumber" : 99,
        "startColumnNumber" : 116,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<AttributeOperation> attrs=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    if (args != null) {\n      Iterator<String> it=args.iterator();\n      while (it.hasNext()) {\n        String option=it.next();\nswitch (option) {\ncase \"-s\":case \"--set\":{\n            if (!it.hasNext()) {\n              throw new IllegalArgumentException(\"Option \" + option + \" requires a value\");\n            }\n            String[] keyVal=parseKeyVal(it.next());\n            attrs.add(new AttributeOperation(SET,keyVal[0],keyVal[1]));\n            break;\n          }\ndefault:{\n          throw new IllegalArgumentException(\"Unsupported option: \" + option);\n        }\n    }\n  }\n}\nif (file == null && attrs.size() == 0) {\n  throw new IllegalArgumentException(\"No file nor attribute values specified\");\n}\nif (outputClient && returnClientId) {\n  throw new IllegalArgumentException(\"Options -o and -i are mutually exclusive\");\n}\nif (\"-\".equals(token)) {\n  token=readSecret(\"Enter Initial Access Token: \",commandInvocation);\n}\nCmdStdinContext ctx=new CmdStdinContext();\nif (file != null) {\n  ctx=parseFileOrStdin(file,regType);\n}\nif (ctx.getEndpointType() == null) {\n  regType=regType != null ? regType : DEFAULT;\n  ctx.setEndpointType(regType);\n}\n else if (regType != null && ctx.getEndpointType() != regType) {\n  throw new RuntimeException(\"Requested endpoint type not compatible with detected configuration format: \" + ctx.getEndpointType());\n}\nif (attrs.size() > 0) {\n  ctx=mergeAttributes(ctx,attrs);\n}\nString contentType=getExpectedContentType(ctx.getEndpointType());\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nif (token == null) {\n  token=config.sessionRealmConfigData().getInitialToken();\n}\nsetupTruststore(config,commandInvocation);\nString auth=token;\nif (auth == null) {\n  config=ensureAuthInfo(config,commandInvocation);\n  config=copyWithServerInfo(config);\n  if (credentialsAvailable(config)) {\n    auth=ensureToken(config);\n  }\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=config.getRealm();\nInputStream response=doPost(server + \"/realms/\" + realm+ \"/clients-registrations/\"+ ctx.getEndpointType().getEndpoint(),contentType,HttpUtil.APPLICATION_JSON,ctx.getContent(),auth);\ntry {\n  if (ctx.getEndpointType() == DEFAULT || ctx.getEndpointType() == SAML2) {\n    ClientRepresentation client=JsonSerialization.readValue(response,ClientRepresentation.class);\n    outputResult(client.getClientId(),client);\n    saveMergeConfig(cfg -> {\n      setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n    }\n);\n  }\n else   if (ctx.getEndpointType() == OIDC) {\n    OIDCClientRepresentation client=JsonSerialization.readValue(response,OIDCClientRepresentation.class);\n    outputResult(client.getClientId(),client);\n    saveMergeConfig(cfg -> {\n      setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n    }\n);\n  }\n else {\n    printOut(\"Response from server: \" + readFully(response));\n  }\n}\n catch (UnrecognizedPropertyException e) {\n  throw new RuntimeException(\"Failed to process HTTP reponse - \" + e.getMessage(),e);\n}\ncatch (IOException e) {\n  throw new RuntimeException(\"Failed to process HTTP response\",e);\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 526,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5225,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<AttributeOperation> attrs=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    if (args != null) {\n      Iterator<String> it=args.iterator();\n      while (it.hasNext()) {\n        String option=it.next();\nswitch (option) {\ncase \"-s\":case \"--set\":{\n            if (!it.hasNext()) {\n              throw new IllegalArgumentException(\"Option \" + option + \" requires a value\");\n            }\n            String[] keyVal=parseKeyVal(it.next());\n            attrs.add(new AttributeOperation(SET,keyVal[0],keyVal[1]));\n            break;\n          }\ndefault:{\n          throw new IllegalArgumentException(\"Unsupported option: \" + option);\n        }\n    }\n  }\n}\nif (file == null && attrs.size() == 0) {\n  throw new IllegalArgumentException(\"No file nor attribute values specified\");\n}\nif (outputClient && returnClientId) {\n  throw new IllegalArgumentException(\"Options -o and -i are mutually exclusive\");\n}\nif (\"-\".equals(token)) {\n  token=readSecret(\"Enter Initial Access Token: \",commandInvocation);\n}\nCmdStdinContext ctx=new CmdStdinContext();\nif (file != null) {\n  ctx=parseFileOrStdin(file,regType);\n}\nif (ctx.getEndpointType() == null) {\n  regType=regType != null ? regType : DEFAULT;\n  ctx.setEndpointType(regType);\n}\n else if (regType != null && ctx.getEndpointType() != regType) {\n  throw new RuntimeException(\"Requested endpoint type not compatible with detected configuration format: \" + ctx.getEndpointType());\n}\nif (attrs.size() > 0) {\n  ctx=mergeAttributes(ctx,attrs);\n}\nString contentType=getExpectedContentType(ctx.getEndpointType());\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nif (token == null) {\n  token=config.sessionRealmConfigData().getInitialToken();\n}\nsetupTruststore(config,commandInvocation);\nString auth=token;\nif (auth == null) {\n  config=ensureAuthInfo(config,commandInvocation);\n  config=copyWithServerInfo(config);\n  if (credentialsAvailable(config)) {\n    auth=ensureToken(config);\n  }\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=config.getRealm();\nInputStream response=doPost(server + \"/realms/\" + realm+ \"/clients-registrations/\"+ ctx.getEndpointType().getEndpoint(),contentType,HttpUtil.APPLICATION_JSON,ctx.getContent(),auth);\ntry {\n  if (ctx.getEndpointType() == DEFAULT || ctx.getEndpointType() == SAML2) {\n    ClientRepresentation client=JsonSerialization.readValue(response,ClientRepresentation.class);\n    outputResult(client.getClientId(),client);\n    saveMergeConfig(cfg -> {\n      setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n    }\n);\n  }\n else   if (ctx.getEndpointType() == OIDC) {\n    OIDCClientRepresentation client=JsonSerialization.readValue(response,OIDCClientRepresentation.class);\n    outputResult(client.getClientId(),client);\n    saveMergeConfig(cfg -> {\n      setRegistrationToken(cfg.ensureRealmConfigData(server,realm),client.getClientId(),client.getRegistrationAccessToken());\n    }\n);\n  }\n else {\n    printOut(\"Response from server: \" + readFully(response));\n  }\n}\n catch (UnrecognizedPropertyException e) {\n  throw new RuntimeException(\"Failed to process HTTP reponse - \" + e.getMessage(),e);\n}\ncatch (IOException e) {\n  throw new RuntimeException(\"Failed to process HTTP response\",e);\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 541,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 216,
    "startColumnNumber" : 64,
    "endLineNumber" : 216,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}