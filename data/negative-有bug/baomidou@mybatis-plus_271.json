{
  "id" : 271,
  "expression" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty())",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 249,
      "startColumnNumber" : 20,
      "endLineNumber" : 249,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 249,
        "startColumnNumber" : 20,
        "endLineNumber" : 249,
        "endColumnNumber" : 95
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 249,
        "startColumnNumber" : 20,
        "endLineNumber" : 249,
        "endColumnNumber" : 96
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 244,
        "startColumnNumber" : 52,
        "endLineNumber" : 250,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n  keyProperty=table.getKeyProperty();\n  keyColumn=table.getKeyColumn();\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 244,
        "startColumnNumber" : 16,
        "endLineNumber" : 255,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (null != table.getKeySequence()) {\n  keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n  keyProperty=table.getKeyProperty();\n  keyColumn=table.getKeyColumn();\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n else {\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 243,
        "startColumnNumber" : 19,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (null != table.getKeySequence()) {\n    keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n else {\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (table.getIdType() == IdType.AUTO) {\n  keyGenerator=new Jdbc3KeyGenerator();\n  keyProperty=table.getKeyProperty();\n  keyColumn=table.getKeyColumn();\n}\n else {\n  if (null != table.getKeySequence()) {\n    keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n else {\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 237,
        "startColumnNumber" : 60,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (table.getIdType() == IdType.AUTO) {\n    keyGenerator=new Jdbc3KeyGenerator();\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n  }\n else {\n    if (null != table.getKeySequence()) {\n      keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n else {\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n  if (table.getIdType() == IdType.AUTO) {\n    keyGenerator=new Jdbc3KeyGenerator();\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n  }\n else {\n    if (null != table.getKeySequence()) {\n      keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n else {\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3484,
        "startLineNumber" : 219,
        "startColumnNumber" : 117,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KeyGenerator keyGenerator=new NoKeyGenerator();\n  StringBuilder fieldBuilder=new StringBuilder();\n  StringBuilder placeholderBuilder=new StringBuilder();\n  SqlMethod sqlMethod=selective ? SqlMethod.INSERT_ONE : SqlMethod.INSERT_ONE_ALL_COLUMN;\n  fieldBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  placeholderBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  String keyProperty=null;\n  String keyColumn=null;\n  if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n    if (table.getIdType() == IdType.AUTO) {\n      keyGenerator=new Jdbc3KeyGenerator();\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n    }\n else {\n      if (null != table.getKeySequence()) {\n        keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n        keyProperty=table.getKeyProperty();\n        keyColumn=table.getKeyColumn();\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n else {\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n    }\n  }\n  boolean ifTag;\n  List<TableFieldInfo> fieldList=table.getFieldList();\n  for (  TableFieldInfo fieldInfo : fieldList) {\n    ifTag=!(FieldFill.INSERT == fieldInfo.getFieldFill() || FieldFill.INSERT_UPDATE == fieldInfo.getFieldFill());\n    if (selective && ifTag) {\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,true));\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,true));\n    }\n else {\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n    }\n  }\n  fieldBuilder.append(\"\\n</trim>\");\n  placeholderBuilder.append(\"\\n</trim>\");\n  String sql=String.format(sqlMethod.getSql(),table.getTableName(),fieldBuilder.toString(),placeholderBuilder.toString());\n  SqlSource sqlSource=languageDriver.createSqlSource(configuration,sql,modelClass);\n  this.addInsertMappedStatement(mapperClass,modelClass,sqlMethod.getMethod(),sqlSource,keyGenerator,keyProperty,keyColumn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3766,
        "startLineNumber" : 209,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 注入插入 SQL 语句 </p>\n * @param selective   是否选择插入\n * @param mapperClass\n * @param modelClass\n * @param table\n */\nprotected void injectInsertOneSql(boolean selective,Class<?> mapperClass,Class<?> modelClass,TableInfo table){\n  KeyGenerator keyGenerator=new NoKeyGenerator();\n  StringBuilder fieldBuilder=new StringBuilder();\n  StringBuilder placeholderBuilder=new StringBuilder();\n  SqlMethod sqlMethod=selective ? SqlMethod.INSERT_ONE : SqlMethod.INSERT_ONE_ALL_COLUMN;\n  fieldBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  placeholderBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  String keyProperty=null;\n  String keyColumn=null;\n  if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n    if (table.getIdType() == IdType.AUTO) {\n      keyGenerator=new Jdbc3KeyGenerator();\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n    }\n else {\n      if (null != table.getKeySequence()) {\n        keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n        keyProperty=table.getKeyProperty();\n        keyColumn=table.getKeyColumn();\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n else {\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n    }\n  }\n  boolean ifTag;\n  List<TableFieldInfo> fieldList=table.getFieldList();\n  for (  TableFieldInfo fieldInfo : fieldList) {\n    ifTag=!(FieldFill.INSERT == fieldInfo.getFieldFill() || FieldFill.INSERT_UPDATE == fieldInfo.getFieldFill());\n    if (selective && ifTag) {\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,true));\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,true));\n    }\n else {\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n    }\n  }\n  fieldBuilder.append(\"\\n</trim>\");\n  placeholderBuilder.append(\"\\n</trim>\");\n  String sql=String.format(sqlMethod.getSql(),table.getTableName(),fieldBuilder.toString(),placeholderBuilder.toString());\n  SqlSource sqlSource=languageDriver.createSqlSource(configuration,sql,modelClass);\n  this.addInsertMappedStatement(mapperClass,modelClass,sqlMethod.getMethod(),sqlSource,keyGenerator,keyProperty,keyColumn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 249,
        "startColumnNumber" : 20,
        "endLineNumber" : 249,
        "endColumnNumber" : 96
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 254,
      "startColumnNumber" : 20,
      "endLineNumber" : 254,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 95
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 96
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 250,
        "startColumnNumber" : 23,
        "endLineNumber" : 255,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 244,
        "startColumnNumber" : 16,
        "endLineNumber" : 255,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (null != table.getKeySequence()) {\n  keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n  keyProperty=table.getKeyProperty();\n  keyColumn=table.getKeyColumn();\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n else {\n  fieldBuilder.append(table.getKeyColumn()).append(\",\");\n  placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 243,
        "startColumnNumber" : 19,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (null != table.getKeySequence()) {\n    keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n else {\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (table.getIdType() == IdType.AUTO) {\n  keyGenerator=new Jdbc3KeyGenerator();\n  keyProperty=table.getKeyProperty();\n  keyColumn=table.getKeyColumn();\n}\n else {\n  if (null != table.getKeySequence()) {\n    keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n else {\n    fieldBuilder.append(table.getKeyColumn()).append(\",\");\n    placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 237,
        "startColumnNumber" : 60,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (table.getIdType() == IdType.AUTO) {\n    keyGenerator=new Jdbc3KeyGenerator();\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n  }\n else {\n    if (null != table.getKeySequence()) {\n      keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n else {\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n  if (table.getIdType() == IdType.AUTO) {\n    keyGenerator=new Jdbc3KeyGenerator();\n    keyProperty=table.getKeyProperty();\n    keyColumn=table.getKeyColumn();\n  }\n else {\n    if (null != table.getKeySequence()) {\n      keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n else {\n      fieldBuilder.append(table.getKeyColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3484,
        "startLineNumber" : 219,
        "startColumnNumber" : 117,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KeyGenerator keyGenerator=new NoKeyGenerator();\n  StringBuilder fieldBuilder=new StringBuilder();\n  StringBuilder placeholderBuilder=new StringBuilder();\n  SqlMethod sqlMethod=selective ? SqlMethod.INSERT_ONE : SqlMethod.INSERT_ONE_ALL_COLUMN;\n  fieldBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  placeholderBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  String keyProperty=null;\n  String keyColumn=null;\n  if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n    if (table.getIdType() == IdType.AUTO) {\n      keyGenerator=new Jdbc3KeyGenerator();\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n    }\n else {\n      if (null != table.getKeySequence()) {\n        keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n        keyProperty=table.getKeyProperty();\n        keyColumn=table.getKeyColumn();\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n else {\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n    }\n  }\n  boolean ifTag;\n  List<TableFieldInfo> fieldList=table.getFieldList();\n  for (  TableFieldInfo fieldInfo : fieldList) {\n    ifTag=!(FieldFill.INSERT == fieldInfo.getFieldFill() || FieldFill.INSERT_UPDATE == fieldInfo.getFieldFill());\n    if (selective && ifTag) {\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,true));\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,true));\n    }\n else {\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n    }\n  }\n  fieldBuilder.append(\"\\n</trim>\");\n  placeholderBuilder.append(\"\\n</trim>\");\n  String sql=String.format(sqlMethod.getSql(),table.getTableName(),fieldBuilder.toString(),placeholderBuilder.toString());\n  SqlSource sqlSource=languageDriver.createSqlSource(configuration,sql,modelClass);\n  this.addInsertMappedStatement(mapperClass,modelClass,sqlMethod.getMethod(),sqlSource,keyGenerator,keyProperty,keyColumn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3766,
        "startLineNumber" : 209,
        "startColumnNumber" : 4,
        "endLineNumber" : 285,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 注入插入 SQL 语句 </p>\n * @param selective   是否选择插入\n * @param mapperClass\n * @param modelClass\n * @param table\n */\nprotected void injectInsertOneSql(boolean selective,Class<?> mapperClass,Class<?> modelClass,TableInfo table){\n  KeyGenerator keyGenerator=new NoKeyGenerator();\n  StringBuilder fieldBuilder=new StringBuilder();\n  StringBuilder placeholderBuilder=new StringBuilder();\n  SqlMethod sqlMethod=selective ? SqlMethod.INSERT_ONE : SqlMethod.INSERT_ONE_ALL_COLUMN;\n  fieldBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  placeholderBuilder.append(\"\\n<trim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\">\\n\");\n  String keyProperty=null;\n  String keyColumn=null;\n  if (StringUtils.isNotEmpty(table.getKeyProperty())) {\n    if (table.getIdType() == IdType.AUTO) {\n      keyGenerator=new Jdbc3KeyGenerator();\n      keyProperty=table.getKeyProperty();\n      keyColumn=table.getKeyColumn();\n    }\n else {\n      if (null != table.getKeySequence()) {\n        keyGenerator=TableInfoHelper.genKeyGenerator(table,builderAssistant,sqlMethod.getMethod(),languageDriver);\n        keyProperty=table.getKeyProperty();\n        keyColumn=table.getKeyColumn();\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n else {\n        fieldBuilder.append(table.getKeyColumn()).append(\",\");\n        placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n      }\n    }\n  }\n  boolean ifTag;\n  List<TableFieldInfo> fieldList=table.getFieldList();\n  for (  TableFieldInfo fieldInfo : fieldList) {\n    ifTag=!(FieldFill.INSERT == fieldInfo.getFieldFill() || FieldFill.INSERT_UPDATE == fieldInfo.getFieldFill());\n    if (selective && ifTag) {\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      fieldBuilder.append(convertIfTagIgnored(fieldInfo,true));\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,false));\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n      placeholderBuilder.append(convertIfTagIgnored(fieldInfo,true));\n    }\n else {\n      fieldBuilder.append(fieldInfo.getColumn()).append(\",\");\n      placeholderBuilder.append(\"#{\").append(fieldInfo.getEl()).append(\"},\");\n    }\n  }\n  fieldBuilder.append(\"\\n</trim>\");\n  placeholderBuilder.append(\"\\n</trim>\");\n  String sql=String.format(sqlMethod.getSql(),table.getTableName(),fieldBuilder.toString(),placeholderBuilder.toString());\n  SqlSource sqlSource=languageDriver.createSqlSource(configuration,sql,modelClass);\n  this.addInsertMappedStatement(mapperClass,modelClass,sqlMethod.getMethod(),sqlSource,keyGenerator,keyProperty,keyColumn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 254,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 96
      },
      "nodeContext" : "placeholderBuilder.append(\"#{\").append(table.getKeyProperty()).append(\"},\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 249,
    "startColumnNumber" : 20,
    "endLineNumber" : 249,
    "endColumnNumber" : 82
  }, {
    "charLength" : 62,
    "startLineNumber" : 254,
    "startColumnNumber" : 20,
    "endLineNumber" : 254,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}