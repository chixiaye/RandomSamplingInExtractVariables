{
  "id" : 454,
  "expression" : "nodes.size() != n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nodes.size() != n",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 155,
      "startColumnNumber" : 27,
      "endLineNumber" : 155,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 155,
    "startColumnNumber" : 27,
    "endLineNumber" : 155,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}