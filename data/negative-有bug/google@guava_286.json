{
  "id" : 286,
  "expression" : "\"Duplicate character: %s\"",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/io/BaseEncoding.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Duplicate character: %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 460,
      "startColumnNumber" : 42,
      "endLineNumber" : 460,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 460,
        "startColumnNumber" : 8,
        "endLineNumber" : 460,
        "endColumnNumber" : 71
      },
      "nodeContext" : "checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 460,
        "startColumnNumber" : 8,
        "endLineNumber" : 460,
        "endColumnNumber" : 72
      },
      "nodeContext" : "checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 457,
        "startColumnNumber" : 45,
        "endLineNumber" : 462,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  char c=chars[i];\n  checkArgument(c < decodabet.length,\"Non-ASCII character: %s\",c);\n  checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n  decodabet[c]=(byte)i;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 457,
        "startColumnNumber" : 6,
        "endLineNumber" : 462,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < chars.length; i++) {\n  char c=chars[i];\n  checkArgument(c < decodabet.length,\"Non-ASCII character: %s\",c);\n  checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n  decodabet[c]=(byte)i;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 432,
        "startColumnNumber" : 40,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.name=checkNotNull(name);\n  this.chars=checkNotNull(chars);\n  try {\n    this.bitsPerChar=log2(chars.length,UNNECESSARY);\n  }\n catch (  ArithmeticException e) {\n    throw new IllegalArgumentException(\"Illegal alphabet length \" + chars.length,e);\n  }\n  int gcd=Math.min(8,Integer.lowestOneBit(bitsPerChar));\n  try {\n    this.charsPerChunk=8 / gcd;\n    this.bytesPerChunk=bitsPerChar / gcd;\n  }\n catch (  ArithmeticException e) {\n    throw new IllegalArgumentException(\"Illegal alphabet \" + new String(chars),e);\n  }\n  this.mask=chars.length - 1;\n  byte[] decodabet=new byte[Ascii.MAX + 1];\n  Arrays.fill(decodabet,(byte)-1);\n  for (int i=0; i < chars.length; i++) {\n    char c=chars[i];\n    checkArgument(c < decodabet.length,\"Non-ASCII character: %s\",c);\n    checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n    decodabet[c]=(byte)i;\n  }\n  this.decodabet=decodabet;\n  boolean[] validPadding=new boolean[charsPerChunk];\n  for (int i=0; i < bytesPerChunk; i++) {\n    validPadding[divide(i * 8,bitsPerChar,CEILING)]=true;\n  }\n  this.validPadding=validPadding;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1534,
        "startLineNumber" : 432,
        "startColumnNumber" : 4,
        "endLineNumber" : 470,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Alphabet(String name,char[] chars){\n  this.name=checkNotNull(name);\n  this.chars=checkNotNull(chars);\n  try {\n    this.bitsPerChar=log2(chars.length,UNNECESSARY);\n  }\n catch (  ArithmeticException e) {\n    throw new IllegalArgumentException(\"Illegal alphabet length \" + chars.length,e);\n  }\n  int gcd=Math.min(8,Integer.lowestOneBit(bitsPerChar));\n  try {\n    this.charsPerChunk=8 / gcd;\n    this.bytesPerChunk=bitsPerChar / gcd;\n  }\n catch (  ArithmeticException e) {\n    throw new IllegalArgumentException(\"Illegal alphabet \" + new String(chars),e);\n  }\n  this.mask=chars.length - 1;\n  byte[] decodabet=new byte[Ascii.MAX + 1];\n  Arrays.fill(decodabet,(byte)-1);\n  for (int i=0; i < chars.length; i++) {\n    char c=chars[i];\n    checkArgument(c < decodabet.length,\"Non-ASCII character: %s\",c);\n    checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n    decodabet[c]=(byte)i;\n  }\n  this.decodabet=decodabet;\n  boolean[] validPadding=new boolean[charsPerChunk];\n  for (int i=0; i < bytesPerChunk; i++) {\n    validPadding[divide(i * 8,bitsPerChar,CEILING)]=true;\n  }\n  this.validPadding=validPadding;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 460,
        "startColumnNumber" : 8,
        "endLineNumber" : 460,
        "endColumnNumber" : 72
      },
      "nodeContext" : "checkArgument(decodabet[c] == -1,\"Duplicate character: %s\",c);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 460,
    "startColumnNumber" : 42,
    "endLineNumber" : 460,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}