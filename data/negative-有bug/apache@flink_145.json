{
  "id" : 145,
  "expression" : "new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogHiveMetadataTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 111,
      "startLineNumber" : 136,
      "startColumnNumber" : 20,
      "endLineNumber" : 137,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 12,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 95
      },
      "nodeContext" : "fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 96
      },
      "nodeContext" : "fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 132,
        "startColumnNumber" : 67,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=column.getName();\n  DataType type=(DataType)((Schema.UnresolvedPhysicalColumn)column).getDataType();\n  fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Schema.UnresolvedColumn column : schema.getColumns()) {\n  String name=column.getName();\n  DataType type=(DataType)((Schema.UnresolvedPhysicalColumn)column).getDataType();\n  fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 111,
        "startColumnNumber" : 57,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  catalog.createDatabase(db1,createDb(),false);\n  Table hiveView=org.apache.hadoop.hive.ql.metadata.Table.getEmptyTable(path1.getDatabaseName(),path1.getObjectName());\n  hiveView.setTableType(TableType.VIRTUAL_VIEW.name());\n  final String originQuery=\"view origin query\";\n  final String expandedQuery=\"view expanded query\";\n  hiveView.setViewOriginalText(originQuery);\n  hiveView.setViewExpandedText(expandedQuery);\n  Schema schema=Schema.newBuilder().fromFields(new String[]{\"i\",\"s\"},new AbstractDataType[]{DataTypes.INT(),DataTypes.STRING()}).build();\n  List<FieldSchema> fields=new ArrayList<>();\n  for (  Schema.UnresolvedColumn column : schema.getColumns()) {\n    String name=column.getName();\n    DataType type=(DataType)((Schema.UnresolvedPhysicalColumn)column).getDataType();\n    fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null));\n  }\n  hiveView.getSd().setCols(fields);\n  hiveView.getParameters().put(CatalogPropertiesUtil.IS_GENERIC,\"false\");\n  hiveView.getParameters().put(\"k1\",\"v1\");\n  ((HiveCatalog)catalog).client.createTable(hiveView);\n  CatalogBaseTable baseTable=catalog.getTable(path1);\n  assertTrue(baseTable instanceof CatalogView);\n  CatalogView catalogView=(CatalogView)baseTable;\n  assertEquals(schema,catalogView.getUnresolvedSchema());\n  assertEquals(originQuery,catalogView.getOriginalQuery());\n  assertEquals(expandedQuery,catalogView.getExpandedQuery());\n  assertEquals(\"v1\",catalogView.getOptions().get(\"k1\"));\n  hiveView.setDbName(path3.getDatabaseName());\n  hiveView.setTableName(path3.getObjectName());\n  hiveView.getParameters().remove(CatalogPropertiesUtil.IS_GENERIC);\n  hiveView.getParameters().put(CONNECTOR.key(),IDENTIFIER);\n  ((HiveCatalog)catalog).client.createTable(hiveView);\n  baseTable=catalog.getTable(path3);\n  assertTrue(baseTable instanceof CatalogView);\n  catalogView=(CatalogView)baseTable;\n  assertEquals(schema,catalogView.getUnresolvedSchema());\n  assertEquals(originQuery,catalogView.getOriginalQuery());\n  assertEquals(expandedQuery,catalogView.getExpandedQuery());\n  assertEquals(\"v1\",catalogView.getOptions().get(\"k1\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 352,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3020,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testViewCompatibility() throws Exception {\n  catalog.createDatabase(db1,createDb(),false);\n  Table hiveView=org.apache.hadoop.hive.ql.metadata.Table.getEmptyTable(path1.getDatabaseName(),path1.getObjectName());\n  hiveView.setTableType(TableType.VIRTUAL_VIEW.name());\n  final String originQuery=\"view origin query\";\n  final String expandedQuery=\"view expanded query\";\n  hiveView.setViewOriginalText(originQuery);\n  hiveView.setViewExpandedText(expandedQuery);\n  Schema schema=Schema.newBuilder().fromFields(new String[]{\"i\",\"s\"},new AbstractDataType[]{DataTypes.INT(),DataTypes.STRING()}).build();\n  List<FieldSchema> fields=new ArrayList<>();\n  for (  Schema.UnresolvedColumn column : schema.getColumns()) {\n    String name=column.getName();\n    DataType type=(DataType)((Schema.UnresolvedPhysicalColumn)column).getDataType();\n    fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null));\n  }\n  hiveView.getSd().setCols(fields);\n  hiveView.getParameters().put(CatalogPropertiesUtil.IS_GENERIC,\"false\");\n  hiveView.getParameters().put(\"k1\",\"v1\");\n  ((HiveCatalog)catalog).client.createTable(hiveView);\n  CatalogBaseTable baseTable=catalog.getTable(path1);\n  assertTrue(baseTable instanceof CatalogView);\n  CatalogView catalogView=(CatalogView)baseTable;\n  assertEquals(schema,catalogView.getUnresolvedSchema());\n  assertEquals(originQuery,catalogView.getOriginalQuery());\n  assertEquals(expandedQuery,catalogView.getExpandedQuery());\n  assertEquals(\"v1\",catalogView.getOptions().get(\"k1\"));\n  hiveView.setDbName(path3.getDatabaseName());\n  hiveView.setTableName(path3.getObjectName());\n  hiveView.getParameters().remove(CatalogPropertiesUtil.IS_GENERIC);\n  hiveView.getParameters().put(CONNECTOR.key(),IDENTIFIER);\n  ((HiveCatalog)catalog).client.createTable(hiveView);\n  baseTable=catalog.getTable(path3);\n  assertTrue(baseTable instanceof CatalogView);\n  catalogView=(CatalogView)baseTable;\n  assertEquals(schema,catalogView.getUnresolvedSchema());\n  assertEquals(originQuery,catalogView.getOriginalQuery());\n  assertEquals(expandedQuery,catalogView.getExpandedQuery());\n  assertEquals(\"v1\",catalogView.getOptions().get(\"k1\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 360,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 95
      },
      "nodeContext" : "fields.add(new FieldSchema(name,HiveTypeUtil.toHiveTypeInfo(type,true).getTypeName(),null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "org.apache.flink.table.catalog.hive.FieldSchema"
  } ],
  "positionList" : [ {
    "charLength" : 111,
    "startLineNumber" : 136,
    "startColumnNumber" : 20,
    "endLineNumber" : 137,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}