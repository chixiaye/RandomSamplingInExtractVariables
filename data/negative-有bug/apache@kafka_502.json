{
  "id" : 502,
  "expression" : "invalidSignatureHeaders",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SessionedProtocolIntegrationTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "invalidSignatureHeaders",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 100,
      "startColumnNumber" : 8,
      "endLineNumber" : 100,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 73
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 74
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 67,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3573,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore public void ensureInternalEndpointIsSecured() throws Throwable {\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 74
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "invalidSignatureHeaders",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 101,
      "startColumnNumber" : 8,
      "endLineNumber" : 101,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 77
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 78
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 67,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3573,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore public void ensureInternalEndpointIsSecured() throws Throwable {\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 78
      },
      "nodeContext" : "invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "invalidSignatureHeaders",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 123,
      "startColumnNumber" : 62,
      "endLineNumber" : 123,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 86
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 98
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 10
      },
      "nodeContext" : "assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 67,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3573,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore public void ensureInternalEndpointIsSecured() throws Throwable {\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 98
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "invalidSignatureHeaders",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 164,
      "startColumnNumber" : 62,
      "endLineNumber" : 164,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 86
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 98
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 10
      },
      "nodeContext" : "assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 67,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3573,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore public void ensureInternalEndpointIsSecured() throws Throwable {\n  final String connectorTasksEndpoint=connect.endpointForResource(String.format(\"connectors/%s/tasks\",CONNECTOR_NAME));\n  final Map<String,String> emptyHeaders=new HashMap<>();\n  final Map<String,String> invalidSignatureHeaders=new HashMap<>();\n  invalidSignatureHeaders.put(SIGNATURE_HEADER,\"S2Fma2Flc3F1ZQ==\");\n  invalidSignatureHeaders.put(SIGNATURE_ALGORITHM_HEADER,\"HmacSHA256\");\n  log.info(\"Making a POST request to the {} endpoint with no connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with no connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorProps.put(KEY_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  connectorProps.put(VALUE_CONVERTER_CLASS_CONFIG,StringConverter.class.getName());\n  log.info(\"Starting the {} connector\",CONNECTOR_NAME);\n  StartAndStopLatch startLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(CONNECTOR_NAME,connectorProps);\n  startLatch.await(CONNECTOR_SETUP_DURATION_MS,TimeUnit.MILLISECONDS);\n  log.info(\"Making a POST request to the {} endpoint with the connector started and no signature header; \" + \"expecting 400 error response\",connectorTasksEndpoint);\n  assertEquals(BAD_REQUEST.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",emptyHeaders).getStatus());\n  log.info(\"Making a POST request to the {} endpoint with the connector started and an invalid signature header; \" + \"expecting 403 error response\",connectorTasksEndpoint);\n  assertEquals(FORBIDDEN.getStatusCode(),connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 164,
        "endColumnNumber" : 98
      },
      "nodeContext" : "connect.requestPost(connectorTasksEndpoint,\"[]\",invalidSignatureHeaders).getStatus()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 100,
    "startColumnNumber" : 8,
    "endLineNumber" : 100,
    "endColumnNumber" : 31
  }, {
    "charLength" : 23,
    "startLineNumber" : 101,
    "startColumnNumber" : 8,
    "endLineNumber" : 101,
    "endColumnNumber" : 31
  }, {
    "charLength" : 23,
    "startLineNumber" : 123,
    "startColumnNumber" : 62,
    "endLineNumber" : 123,
    "endColumnNumber" : 85
  }, {
    "charLength" : 23,
    "startLineNumber" : 164,
    "startColumnNumber" : 62,
    "endLineNumber" : 164,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}