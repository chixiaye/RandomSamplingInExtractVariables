{
  "id" : 70,
  "expression" : "(pass ? \"PASS\" : \"FAIL\")",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/test/java/jadx/tests/integration/variables/TestVariables4.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(pass ? \"PASS\" : \"FAIL\")",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 40,
      "startColumnNumber" : 8,
      "endLineNumber" : 40,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 39,
        "startColumnNumber" : 23,
        "endLineNumber" : 42,
        "endColumnNumber" : 42
      },
      "nodeContext" : "\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 42,
        "endColumnNumber" : 43
      },
      "nodeContext" : "System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 42,
        "endColumnNumber" : 44
      },
      "nodeContext" : "System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 775,
        "startLineNumber" : 18,
        "startColumnNumber" : 7,
        "endLineNumber" : 47,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean pass=false;\n  String msg=null;\n  Throwable exc=null;\n  Class<?> cls=Class.forName(clsName);\n  if (cls.getSuperclass() == AbstractTest.class) {\n    Method mth=cls.getMethod(\"testRun\");\n    try {\n      AbstractTest test=(AbstractTest)cls.getConstructor().newInstance();\n      pass=(Boolean)mth.invoke(test);\n    }\n catch (    InvocationTargetException e) {\n      pass=false;\n      exc=e.getCause();\n    }\ncatch (    Throwable e) {\n      pass=false;\n      exc=e;\n    }\n  }\n else {\n    msg=\"not extends AbstractTest\";\n  }\n  System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg));\n  if (exc != null) {\n    exc.printStackTrace();\n  }\n  return pass;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 18,
        "startColumnNumber" : 3,
        "endLineNumber" : 51,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  boolean pass=false;\n  String msg=null;\n  Throwable exc=null;\n  Class<?> cls=Class.forName(clsName);\n  if (cls.getSuperclass() == AbstractTest.class) {\n    Method mth=cls.getMethod(\"testRun\");\n    try {\n      AbstractTest test=(AbstractTest)cls.getConstructor().newInstance();\n      pass=(Boolean)mth.invoke(test);\n    }\n catch (    InvocationTargetException e) {\n      pass=false;\n      exc=e.getCause();\n    }\ncatch (    Throwable e) {\n      pass=false;\n      exc=e;\n    }\n  }\n else {\n    msg=\"not extends AbstractTest\";\n  }\n  System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg));\n  if (exc != null) {\n    exc.printStackTrace();\n  }\n  return pass;\n}\n catch (ClassNotFoundException e) {\n  System.err.println(\"Class '\" + clsName + \"' not found\");\n}\ncatch (Exception e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 17,
        "startColumnNumber" : 49,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    boolean pass=false;\n    String msg=null;\n    Throwable exc=null;\n    Class<?> cls=Class.forName(clsName);\n    if (cls.getSuperclass() == AbstractTest.class) {\n      Method mth=cls.getMethod(\"testRun\");\n      try {\n        AbstractTest test=(AbstractTest)cls.getConstructor().newInstance();\n        pass=(Boolean)mth.invoke(test);\n      }\n catch (      InvocationTargetException e) {\n        pass=false;\n        exc=e.getCause();\n      }\ncatch (      Throwable e) {\n        pass=false;\n        exc=e;\n      }\n    }\n else {\n      msg=\"not extends AbstractTest\";\n    }\n    System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg));\n    if (exc != null) {\n      exc.printStackTrace();\n    }\n    return pass;\n  }\n catch (  ClassNotFoundException e) {\n    System.err.println(\"Class '\" + clsName + \"' not found\");\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static boolean runTest(String clsName){\n  try {\n    boolean pass=false;\n    String msg=null;\n    Throwable exc=null;\n    Class<?> cls=Class.forName(clsName);\n    if (cls.getSuperclass() == AbstractTest.class) {\n      Method mth=cls.getMethod(\"testRun\");\n      try {\n        AbstractTest test=(AbstractTest)cls.getConstructor().newInstance();\n        pass=(Boolean)mth.invoke(test);\n      }\n catch (      InvocationTargetException e) {\n        pass=false;\n        exc=e.getCause();\n      }\ncatch (      Throwable e) {\n        pass=false;\n        exc=e;\n      }\n    }\n else {\n      msg=\"not extends AbstractTest\";\n    }\n    System.err.println(\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg));\n    if (exc != null) {\n      exc.printStackTrace();\n    }\n    return pass;\n  }\n catch (  ClassNotFoundException e) {\n    System.err.println(\"Class '\" + clsName + \"' not found\");\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 39,
        "startColumnNumber" : 23,
        "endLineNumber" : 42,
        "endColumnNumber" : 42
      },
      "nodeContext" : "\">> \" + (pass ? \"PASS\" : \"FAIL\") + \"\\t\"+ clsName+ (msg == null ? \"\" : \"\\t - \" + msg)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 40,
    "startColumnNumber" : 8,
    "endLineNumber" : 40,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}