{
  "id" : 466,
  "expression" : "condition.getType().getPrimitiveType() == boolean.class",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/byteCode/expression/InlineIfByteCodeExpression.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "condition.getType().getPrimitiveType() == boolean.class",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 41,
      "startColumnNumber" : 22,
      "endLineNumber" : 41,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 150
      },
      "nodeContext" : "checkArgument(condition.getType().getPrimitiveType() == boolean.class,\"Expected condition to be type boolean but is %s\",condition.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 151
      },
      "nodeContext" : "checkArgument(condition.getType().getPrimitiveType() == boolean.class,\"Expected condition to be type boolean but is %s\",condition.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super(ifTrue.getType());\n  this.condition=condition;\n  this.ifTrue=checkNotNull(ifTrue,\"ifTrue is null\");\n  this.ifFalse=checkNotNull(ifFalse,\"ifFalse is null\");\n  checkArgument(condition.getType().getPrimitiveType() == boolean.class,\"Expected condition to be type boolean but is %s\",condition.getType());\n  checkArgument(ifTrue.getType().equals(ifFalse.getType()),\"Expected ifTrue and ifFalse to be the same type\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 599,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "InlineIfByteCodeExpression(ByteCodeExpression condition,ByteCodeExpression ifTrue,ByteCodeExpression ifFalse){\n  super(ifTrue.getType());\n  this.condition=condition;\n  this.ifTrue=checkNotNull(ifTrue,\"ifTrue is null\");\n  this.ifFalse=checkNotNull(ifFalse,\"ifFalse is null\");\n  checkArgument(condition.getType().getPrimitiveType() == boolean.class,\"Expected condition to be type boolean but is %s\",condition.getType());\n  checkArgument(ifTrue.getType().equals(ifFalse.getType()),\"Expected ifTrue and ifFalse to be the same type\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 70,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 151
      },
      "nodeContext" : "checkArgument(condition.getType().getPrimitiveType() == boolean.class,\"Expected condition to be type boolean but is %s\",condition.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 55,
    "startLineNumber" : 41,
    "startColumnNumber" : 22,
    "endLineNumber" : 41,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}