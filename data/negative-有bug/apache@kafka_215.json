{
  "id" : 215,
  "expression" : "\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/kstream/internals/SessionWindow.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 107,
      "startLineNumber" : 53,
      "startColumnNumber" : 47,
      "endLineNumber" : 54,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 53,
        "startColumnNumber" : 18,
        "endLineNumber" : 54,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 42
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 52,
        "startColumnNumber" : 44,
        "endLineNumber" : 55,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (getClass() != other.getClass()) {\n  throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 51,
        "startColumnNumber" : 79,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (getClass() != other.getClass()) {\n    throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n  }\n  final SessionWindow otherWindow=(SessionWindow)other;\n  return !(otherWindow.endMs < startMs || endMs < otherWindow.startMs);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 771,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check if the given window overlaps with this window.\n * @param other another window\n * @return {@code true} if {@code other} overlaps with this window&mdash;{@code false} otherwise\n * @throws IllegalArgumentException if the {@code other} window has a different type than {@code this} window\n */\npublic boolean overlap(final Window other) throws IllegalArgumentException {\n  if (getClass() != other.getClass()) {\n    throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n  }\n  final SessionWindow otherWindow=(SessionWindow)other;\n  return !(otherWindow.endMs < startMs || endMs < otherWindow.startMs);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 55,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 42
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Cannot compare windows of different type. Other window has type \" + other.getClass() + \".\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 14,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 107,
    "startLineNumber" : 53,
    "startColumnNumber" : 47,
    "endLineNumber" : 54,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}