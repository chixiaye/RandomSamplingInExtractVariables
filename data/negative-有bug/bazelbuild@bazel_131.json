{
  "id" : 131,
  "expression" : "classPathResourceNames",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/java/DeployArchiveBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "classPathResourceNames",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 284,
      "startColumnNumber" : 11,
      "endLineNumber" : 284,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 284,
        "startColumnNumber" : 11,
        "endLineNumber" : 284,
        "endColumnNumber" : 43
      },
      "nodeContext" : "classPathResourceNames.add(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 284,
        "startColumnNumber" : 10,
        "endLineNumber" : 284,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!classPathResourceNames.add(name)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 284,
        "startColumnNumber" : 6,
        "endLineNumber" : 289,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!classPathResourceNames.add(name)) {\n  ruleContext.attributeError(\"classpath_resources\",\"entries must have different file names (duplicate: \" + name + \")\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 282,
        "startColumnNumber" : 49,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String name=artifact.getExecPath().getBaseName();\n  if (!classPathResourceNames.add(name)) {\n    ruleContext.attributeError(\"classpath_resources\",\"entries must have different file names (duplicate: \" + name + \")\");\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 282,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Artifact artifact : classpathResources) {\n  String name=artifact.getExecPath().getBaseName();\n  if (!classPathResourceNames.add(name)) {\n    ruleContext.attributeError(\"classpath_resources\",\"entries must have different file names (duplicate: \" + name + \")\");\n    return;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4263,
        "startLineNumber" : 279,
        "startColumnNumber" : 50,
        "endLineNumber" : 387,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableList<Artifact> classpathResources=attributes.getClassPathResources();\n  Set<String> classPathResourceNames=new HashSet<>();\n  for (  Artifact artifact : classpathResources) {\n    String name=artifact.getExecPath().getBaseName();\n    if (!classPathResourceNames.add(name)) {\n      ruleContext.attributeError(\"classpath_resources\",\"entries must have different file names (duplicate: \" + name + \")\");\n      return;\n    }\n  }\n  NestedSet<Artifact> runtimeJars=runtimeJarsBuilder.build();\n  NestedSet<Artifact> runtimeClasspathForArchive=attributes.getRuntimeClassPathForArchive();\n  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.stableOrder();\n  inputs.addTransitive(getArchiveInputs(attributes,runtimeClasspathForArchive,derivedJars));\n  if (derivedJars != null) {\n    inputs.addAll(Iterables.transform(runtimeJars.toList(),derivedJars));\n  }\n else {\n    inputs.addTransitive(runtimeJars);\n  }\n  if (runfilesMiddleman != null) {\n    inputs.add(runfilesMiddleman);\n  }\n  ImmutableList<Artifact> buildInfoArtifacts=ruleContext.getBuildInfo(JavaBuildInfoFactory.KEY);\n  inputs.addAll(buildInfoArtifacts);\n  NestedSetBuilder<Artifact> runtimeClasspath=NestedSetBuilder.stableOrder();\n  if (derivedJars != null) {\n    runtimeClasspath.addAll(Iterables.transform(runtimeJars.toList(),derivedJars));\n    runtimeClasspath.addAll(Iterables.transform(runtimeClasspathForArchive.toList(),derivedJars));\n  }\n else {\n    runtimeClasspath.addTransitive(runtimeJars);\n    runtimeClasspath.addTransitive(runtimeClasspathForArchive);\n  }\n  if (launcher != null) {\n    inputs.add(launcher);\n  }\n  if (oneVersionEnforcementLevel != OneVersionEnforcementLevel.OFF) {\n    if (oneVersionAllowlistArtifact == null) {\n      OneVersionCheckActionBuilder.addRuleErrorForMissingArtifacts(ruleContext,JavaToolchainProvider.from(ruleContext));\n      return;\n    }\n    inputs.add(oneVersionAllowlistArtifact);\n  }\n  if (sharedArchive != null) {\n    inputs.add(sharedArchive);\n  }\n  Artifact singlejar=JavaToolchainProvider.from(ruleContext).getSingleJar();\n  String toolchainIdentifier=null;\n  try {\n    toolchainIdentifier=CppHelper.getToolchainUsingDefaultCcToolchainAttribute(ruleContext).getToolchainIdentifier();\n  }\n catch (  RuleErrorException e) {\n    throw new IllegalStateException(\"Unable to load cc toolchain\",e);\n  }\n  CommandLine commandLine=semantics.buildSingleJarCommandLine(toolchainIdentifier,outputJar,javaStartClass,deployManifestLines,buildInfoArtifacts,classpathResources,runtimeClasspath.build(),includeBuildData,compression,launcher,oneVersionEnforcementLevel,oneVersionAllowlistArtifact,sharedArchive);\n  if (checkDesugarDeps) {\n    commandLine=CommandLine.concat(commandLine,ImmutableList.of(\"--check_desugar_deps\"));\n  }\n  ImmutableMap.Builder<String,String> executionInfo=ImmutableMap.builder();\n  executionInfo.putAll(TargetUtils.getExecutionInfo(ruleContext.getRule(),ruleContext.isAllowTagsPropagation()));\n  ruleContext.registerAction(new SpawnAction.Builder().useDefaultShellEnvironment().addTransitiveInputs(inputs.build()).addOutput(outputJar).setResources(DEPLOY_ACTION_RESOURCE_SET).setExecutable(singlejar).addCommandLine(commandLine,ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED).setUseAlways(true).build()).setProgressMessage(\"Building deploy jar %{output}\").setMnemonic(\"JavaDeployJar\").setExecutionInfo(executionInfo.build()).build(ruleContext));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4353,
        "startLineNumber" : 278,
        "startColumnNumber" : 2,
        "endLineNumber" : 387,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Builds the action as configured. \n */\npublic void build() throws InterruptedException {\n  ImmutableList<Artifact> classpathResources=attributes.getClassPathResources();\n  Set<String> classPathResourceNames=new HashSet<>();\n  for (  Artifact artifact : classpathResources) {\n    String name=artifact.getExecPath().getBaseName();\n    if (!classPathResourceNames.add(name)) {\n      ruleContext.attributeError(\"classpath_resources\",\"entries must have different file names (duplicate: \" + name + \")\");\n      return;\n    }\n  }\n  NestedSet<Artifact> runtimeJars=runtimeJarsBuilder.build();\n  NestedSet<Artifact> runtimeClasspathForArchive=attributes.getRuntimeClassPathForArchive();\n  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.stableOrder();\n  inputs.addTransitive(getArchiveInputs(attributes,runtimeClasspathForArchive,derivedJars));\n  if (derivedJars != null) {\n    inputs.addAll(Iterables.transform(runtimeJars.toList(),derivedJars));\n  }\n else {\n    inputs.addTransitive(runtimeJars);\n  }\n  if (runfilesMiddleman != null) {\n    inputs.add(runfilesMiddleman);\n  }\n  ImmutableList<Artifact> buildInfoArtifacts=ruleContext.getBuildInfo(JavaBuildInfoFactory.KEY);\n  inputs.addAll(buildInfoArtifacts);\n  NestedSetBuilder<Artifact> runtimeClasspath=NestedSetBuilder.stableOrder();\n  if (derivedJars != null) {\n    runtimeClasspath.addAll(Iterables.transform(runtimeJars.toList(),derivedJars));\n    runtimeClasspath.addAll(Iterables.transform(runtimeClasspathForArchive.toList(),derivedJars));\n  }\n else {\n    runtimeClasspath.addTransitive(runtimeJars);\n    runtimeClasspath.addTransitive(runtimeClasspathForArchive);\n  }\n  if (launcher != null) {\n    inputs.add(launcher);\n  }\n  if (oneVersionEnforcementLevel != OneVersionEnforcementLevel.OFF) {\n    if (oneVersionAllowlistArtifact == null) {\n      OneVersionCheckActionBuilder.addRuleErrorForMissingArtifacts(ruleContext,JavaToolchainProvider.from(ruleContext));\n      return;\n    }\n    inputs.add(oneVersionAllowlistArtifact);\n  }\n  if (sharedArchive != null) {\n    inputs.add(sharedArchive);\n  }\n  Artifact singlejar=JavaToolchainProvider.from(ruleContext).getSingleJar();\n  String toolchainIdentifier=null;\n  try {\n    toolchainIdentifier=CppHelper.getToolchainUsingDefaultCcToolchainAttribute(ruleContext).getToolchainIdentifier();\n  }\n catch (  RuleErrorException e) {\n    throw new IllegalStateException(\"Unable to load cc toolchain\",e);\n  }\n  CommandLine commandLine=semantics.buildSingleJarCommandLine(toolchainIdentifier,outputJar,javaStartClass,deployManifestLines,buildInfoArtifacts,classpathResources,runtimeClasspath.build(),includeBuildData,compression,launcher,oneVersionEnforcementLevel,oneVersionAllowlistArtifact,sharedArchive);\n  if (checkDesugarDeps) {\n    commandLine=CommandLine.concat(commandLine,ImmutableList.of(\"--check_desugar_deps\"));\n  }\n  ImmutableMap.Builder<String,String> executionInfo=ImmutableMap.builder();\n  executionInfo.putAll(TargetUtils.getExecutionInfo(ruleContext.getRule(),ruleContext.isAllowTagsPropagation()));\n  ruleContext.registerAction(new SpawnAction.Builder().useDefaultShellEnvironment().addTransitiveInputs(inputs.build()).addOutput(outputJar).setResources(DEPLOY_ACTION_RESOURCE_SET).setExecutable(singlejar).addCommandLine(commandLine,ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED).setUseAlways(true).build()).setProgressMessage(\"Building deploy jar %{output}\").setMnemonic(\"JavaDeployJar\").setExecutionInfo(executionInfo.build()).build(ruleContext));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 284,
        "startColumnNumber" : 10,
        "endLineNumber" : 284,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!classPathResourceNames.add(name)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 284,
    "startColumnNumber" : 11,
    "endLineNumber" : 284,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}