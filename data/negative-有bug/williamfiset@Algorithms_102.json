{
  "id" : 102,
  "expression" : "i < LOOPS",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/dp/CoinChangeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < LOOPS",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 16,
      "startColumnNumber" : 20,
      "endLineNumber" : 16,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i < LOOPS; i++) {\n  List<Integer> values=TestUtils.randomIntegerList(i,1,1000);\n  int[] coinValues=Ints.toArray(values);\n  int amount=TestUtils.randValue(1,1000);\n  int v1=CoinChange.coinChange(coinValues,amount);\n  int v2=CoinChange.coinChangeSpaceEfficient(coinValues,amount);\n  int v3=CoinChange.coinChangeRecursive(coinValues,amount);\n  assertThat(v1).isEqualTo(v2);\n  assertThat(v2).isEqualTo(v3);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 86,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 15,
        "startColumnNumber" : 31,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=1; i < LOOPS; i++) {\n    List<Integer> values=TestUtils.randomIntegerList(i,1,1000);\n    int[] coinValues=Ints.toArray(values);\n    int amount=TestUtils.randValue(1,1000);\n    int v1=CoinChange.coinChange(coinValues,amount);\n    int v2=CoinChange.coinChangeSpaceEfficient(coinValues,amount);\n    int v3=CoinChange.coinChangeRecursive(coinValues,amount);\n    assertThat(v1).isEqualTo(v2);\n    assertThat(v2).isEqualTo(v3);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 14,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testCoinChange(){\n  for (int i=1; i < LOOPS; i++) {\n    List<Integer> values=TestUtils.randomIntegerList(i,1,1000);\n    int[] coinValues=Ints.toArray(values);\n    int amount=TestUtils.randValue(1,1000);\n    int v1=CoinChange.coinChange(coinValues,amount);\n    int v2=CoinChange.coinChangeSpaceEfficient(coinValues,amount);\n    int v3=CoinChange.coinChangeRecursive(coinValues,amount);\n    assertThat(v1).isEqualTo(v2);\n    assertThat(v2).isEqualTo(v3);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 28,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i < LOOPS; i++) {\n  List<Integer> values=TestUtils.randomIntegerList(i,1,1000);\n  int[] coinValues=Ints.toArray(values);\n  int amount=TestUtils.randValue(1,1000);\n  int v1=CoinChange.coinChange(coinValues,amount);\n  int v2=CoinChange.coinChangeSpaceEfficient(coinValues,amount);\n  int v3=CoinChange.coinChangeRecursive(coinValues,amount);\n  assertThat(v1).isEqualTo(v2);\n  assertThat(v2).isEqualTo(v3);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 86,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 16,
    "startColumnNumber" : 20,
    "endLineNumber" : 16,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}