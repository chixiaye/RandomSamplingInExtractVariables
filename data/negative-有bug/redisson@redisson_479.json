{
  "id" : 479,
  "expression" : "\"ReadOffset must not be null!\"",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-22/src/main/java/org/redisson/spring/data/connection/RedissonReactiveStreamCommands.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"ReadOffset must not be null!\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 254,
      "startColumnNumber" : 56,
      "endLineNumber" : 254,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 253,
        "startColumnNumber" : 84,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n  Mono<String> m=write(k,StringCodec.INSTANCE,XGROUP_STRING,\"CREATE\",k,command.getGroupName(),command.getReadOffset().getOffset(),\"MKSTREAM\");\n  return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 437,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (command.getAction().equals(GroupCommand.GroupCommandAction.CREATE)) {\n  Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n  Mono<String> m=write(k,StringCodec.INSTANCE,XGROUP_STRING,\"CREATE\",k,command.getGroupName(),command.getReadOffset().getOffset(),\"MKSTREAM\");\n  return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1586,
        "startLineNumber" : 246,
        "startColumnNumber" : 45,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getGroupName(),\"GroupName must not be null!\");\n  byte[] k=toByteArray(command.getKey());\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.CREATE)) {\n    Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n    Mono<String> m=write(k,StringCodec.INSTANCE,XGROUP_STRING,\"CREATE\",k,command.getGroupName(),command.getReadOffset().getOffset(),\"MKSTREAM\");\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v));\n  }\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.DELETE_CONSUMER)) {\n    Assert.notNull(command.getConsumerName(),\"ConsumerName must not be null!\");\n    Mono<Long> m=write(k,StringCodec.INSTANCE,RedisCommands.XGROUP_LONG,\"DELCONSUMER\",k,command.getGroupName(),command.getConsumerName());\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v > 0 ? \"OK\" : \"Error\"));\n  }\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.DESTROY)) {\n    Mono<Long> m=write(k,StringCodec.INSTANCE,RedisCommands.XGROUP_LONG,\"DESTROY\",k,command.getGroupName());\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v > 0 ? \"OK\" : \"Error\"));\n  }\n  throw new IllegalArgumentException(\"unknown command \" + command.getAction());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1597,
        "startLineNumber" : 246,
        "startColumnNumber" : 34,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getGroupName(),\"GroupName must not be null!\");\n  byte[] k=toByteArray(command.getKey());\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.CREATE)) {\n    Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n    Mono<String> m=write(k,StringCodec.INSTANCE,XGROUP_STRING,\"CREATE\",k,command.getGroupName(),command.getReadOffset().getOffset(),\"MKSTREAM\");\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v));\n  }\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.DELETE_CONSUMER)) {\n    Assert.notNull(command.getConsumerName(),\"ConsumerName must not be null!\");\n    Mono<Long> m=write(k,StringCodec.INSTANCE,RedisCommands.XGROUP_LONG,\"DELCONSUMER\",k,command.getGroupName(),command.getConsumerName());\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v > 0 ? \"OK\" : \"Error\"));\n  }\n  if (command.getAction().equals(GroupCommand.GroupCommandAction.DESTROY)) {\n    Mono<Long> m=write(k,StringCodec.INSTANCE,RedisCommands.XGROUP_LONG,\"DESTROY\",k,command.getGroupName());\n    return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,v > 0 ? \"OK\" : \"Error\"));\n  }\n  throw new IllegalArgumentException(\"unknown command \" + command.getAction());\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 220,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 254,
        "startColumnNumber" : 16,
        "endLineNumber" : 254,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.notNull(command.getReadOffset(),\"ReadOffset must not be null!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 254,
    "startColumnNumber" : 56,
    "endLineNumber" : 254,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}