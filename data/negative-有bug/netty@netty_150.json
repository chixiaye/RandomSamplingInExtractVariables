{
  "id" : 150,
  "expression" : "component.readableNativeAddress()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/buffer/src/test/java/io/netty/buffer/api/tests/BufferTestSupport.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "component.readableNativeAddress()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 751,
      "startColumnNumber" : 27,
      "endLineNumber" : 751,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 751,
        "startColumnNumber" : 16,
        "endLineNumber" : 751,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(component.readableNativeAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 751,
        "startColumnNumber" : 16,
        "endLineNumber" : 751,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isNotZero()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 751,
        "startColumnNumber" : 16,
        "endLineNumber" : 751,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isNotZero();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 750,
        "startColumnNumber" : 36,
        "endLineNumber" : 752,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertThat(component.readableNativeAddress()).isNotZero();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 750,
        "startColumnNumber" : 12,
        "endLineNumber" : 754,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fixture.isDirect()) {\n  assertThat(component.readableNativeAddress()).isNotZero();\n}\n else {\n  assertThat(component.readableNativeAddress()).isZero();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 743,
        "startColumnNumber" : 53,
        "endLineNumber" : 769,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  var buffer=component.readableBuffer();\n  assertThat(buffer.position()).isZero();\n  assertThat(buffer.limit()).isEqualTo(8);\n  assertThat(buffer.capacity()).isEqualTo(8);\n  assertEquals(0x0102030405060708L,buffer.getLong());\n  if (fixture.isDirect()) {\n    assertThat(component.readableNativeAddress()).isNotZero();\n  }\n else {\n    assertThat(component.readableNativeAddress()).isZero();\n  }\n  if (component.hasReadableArray()) {\n    byte[] array=component.readableArray();\n    byte[] arrayCopy=new byte[component.readableArrayLength()];\n    System.arraycopy(array,component.readableArrayOffset(),arrayCopy,0,arrayCopy.length);\n    if (buffer.order() == BIG_ENDIAN) {\n      assertThat(arrayCopy).containsExactly(0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08);\n    }\n else {\n      assertThat(arrayCopy).containsExactly(0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01);\n    }\n  }\n  assertThrows(ReadOnlyBufferException.class,() -> buffer.put(0,(byte)0xFF));\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 743,
        "startColumnNumber" : 31,
        "endLineNumber" : 769,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(index,component) -> {\n  var buffer=component.readableBuffer();\n  assertThat(buffer.position()).isZero();\n  assertThat(buffer.limit()).isEqualTo(8);\n  assertThat(buffer.capacity()).isEqualTo(8);\n  assertEquals(0x0102030405060708L,buffer.getLong());\n  if (fixture.isDirect()) {\n    assertThat(component.readableNativeAddress()).isNotZero();\n  }\n else {\n    assertThat(component.readableNativeAddress()).isZero();\n  }\n  if (component.hasReadableArray()) {\n    byte[] array=component.readableArray();\n    byte[] arrayCopy=new byte[component.readableArrayLength()];\n    System.arraycopy(array,component.readableArrayOffset(),arrayCopy,0,arrayCopy.length);\n    if (buffer.order() == BIG_ENDIAN) {\n      assertThat(arrayCopy).containsExactly(0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08);\n    }\n else {\n      assertThat(arrayCopy).containsExactly(0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01);\n    }\n  }\n  assertThrows(ReadOnlyBufferException.class,() -> buffer.put(0,(byte)0xFF));\n  return true;\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 161,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 751,
        "startColumnNumber" : 16,
        "endLineNumber" : 751,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isNotZero();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  }, {
    "nodeContext" : "component.readableNativeAddress()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 753,
      "startColumnNumber" : 27,
      "endLineNumber" : 753,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 753,
        "startColumnNumber" : 16,
        "endLineNumber" : 753,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(component.readableNativeAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 753,
        "startColumnNumber" : 16,
        "endLineNumber" : 753,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isZero()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 753,
        "startColumnNumber" : 16,
        "endLineNumber" : 753,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isZero();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 752,
        "startColumnNumber" : 19,
        "endLineNumber" : 754,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertThat(component.readableNativeAddress()).isZero();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 750,
        "startColumnNumber" : 12,
        "endLineNumber" : 754,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (fixture.isDirect()) {\n  assertThat(component.readableNativeAddress()).isNotZero();\n}\n else {\n  assertThat(component.readableNativeAddress()).isZero();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 743,
        "startColumnNumber" : 53,
        "endLineNumber" : 769,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  var buffer=component.readableBuffer();\n  assertThat(buffer.position()).isZero();\n  assertThat(buffer.limit()).isEqualTo(8);\n  assertThat(buffer.capacity()).isEqualTo(8);\n  assertEquals(0x0102030405060708L,buffer.getLong());\n  if (fixture.isDirect()) {\n    assertThat(component.readableNativeAddress()).isNotZero();\n  }\n else {\n    assertThat(component.readableNativeAddress()).isZero();\n  }\n  if (component.hasReadableArray()) {\n    byte[] array=component.readableArray();\n    byte[] arrayCopy=new byte[component.readableArrayLength()];\n    System.arraycopy(array,component.readableArrayOffset(),arrayCopy,0,arrayCopy.length);\n    if (buffer.order() == BIG_ENDIAN) {\n      assertThat(arrayCopy).containsExactly(0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08);\n    }\n else {\n      assertThat(arrayCopy).containsExactly(0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01);\n    }\n  }\n  assertThrows(ReadOnlyBufferException.class,() -> buffer.put(0,(byte)0xFF));\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1290,
        "startLineNumber" : 743,
        "startColumnNumber" : 31,
        "endLineNumber" : 769,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(index,component) -> {\n  var buffer=component.readableBuffer();\n  assertThat(buffer.position()).isZero();\n  assertThat(buffer.limit()).isEqualTo(8);\n  assertThat(buffer.capacity()).isEqualTo(8);\n  assertEquals(0x0102030405060708L,buffer.getLong());\n  if (fixture.isDirect()) {\n    assertThat(component.readableNativeAddress()).isNotZero();\n  }\n else {\n    assertThat(component.readableNativeAddress()).isZero();\n  }\n  if (component.hasReadableArray()) {\n    byte[] array=component.readableArray();\n    byte[] arrayCopy=new byte[component.readableArrayLength()];\n    System.arraycopy(array,component.readableArrayOffset(),arrayCopy,0,arrayCopy.length);\n    if (buffer.order() == BIG_ENDIAN) {\n      assertThat(arrayCopy).containsExactly(0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08);\n    }\n else {\n      assertThat(arrayCopy).containsExactly(0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01);\n    }\n  }\n  assertThrows(ReadOnlyBufferException.class,() -> buffer.put(0,(byte)0xFF));\n  return true;\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 161,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 753,
        "startColumnNumber" : 16,
        "endLineNumber" : 753,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertThat(component.readableNativeAddress()).isZero();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 751,
    "startColumnNumber" : 27,
    "endLineNumber" : 751,
    "endColumnNumber" : 60
  }, {
    "charLength" : 33,
    "startLineNumber" : 753,
    "startColumnNumber" : 27,
    "endLineNumber" : 753,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}