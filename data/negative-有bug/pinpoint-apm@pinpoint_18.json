{
  "id" : 18,
  "expression" : "bytes",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ClassPoolBase_PlainClassLoaderHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bytes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 167,
      "startColumnNumber" : 73,
      "endLineNumber" : 167,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 167,
        "startColumnNumber" : 26,
        "endLineNumber" : 167,
        "endColumnNumber" : 96
      },
      "nodeContext" : "DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 167,
        "startColumnNumber" : 15,
        "endLineNumber" : 167,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2437,
        "startLineNumber" : 106,
        "startColumnNumber" : 273,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> c=null;\n  try {\n    c=classLoader.loadClass(className);\n    if (isDebug) {\n      logger.debug(\"loadClass:{}\",className);\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    if (isDebug) {\n      logger.debug(\"ClassNotFound {}\",ex.getMessage());\n    }\n  }\n  if (c != null) {\n    return c;\n  }\n  final CtClass ct=pool.getOrNull(className);\n  if (ct == null) {\n    throw new NotFoundException(className);\n  }\n  final CtClass superClass=ct.getSuperclass();\n  if (superClass != null) {\n    if (!\"java.lang.Object\".equals(superClass.getName())) {\n      if (!isSkipClass(superClass.getName(),classLoadingChecker)) {\n        injectClass0(pool,classLoader,superClass.getName(),classLoadingChecker);\n      }\n    }\n  }\n  final CtClass[] interfaces=ct.getInterfaces();\n  for (  CtClass ctInterface : interfaces) {\n    if (!isSkipClass(ctInterface.getName(),classLoadingChecker)) {\n      if (isDebug) {\n        logger.debug(\"interface : {}\",ctInterface.getName());\n      }\n      injectClass0(pool,classLoader,ctInterface.getName(),classLoadingChecker);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") final Collection<String> referenceClassList=ct.getRefClasses();\n  if (isDebug) {\n    logger.debug(\"target:{} referenceClassList:{}\",className,referenceClassList);\n  }\n  for (  String referenceClass : referenceClassList) {\n    try {\n      if (!isSkipClass(referenceClass,classLoadingChecker)) {\n        if (isDebug) {\n          logger.debug(\"reference : {}\",referenceClass);\n        }\n        injectClass0(pool,classLoader,referenceClass,classLoadingChecker);\n      }\n    }\n catch (    NotFoundException e) {\n      logger.warn(\"Skip a referenced class because of NotFoundException : {}\",e.getMessage(),e);\n    }\n  }\n  if (logger.isInfoEnabled()) {\n    logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader);\n  }\n  final byte[] bytes=ct.toBytecode();\n  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2706,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Class<?> injectClass0(ClassPool pool,ClassLoader classLoader,String className,ClassLoadingChecker classLoadingChecker) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n  Class<?> c=null;\n  try {\n    c=classLoader.loadClass(className);\n    if (isDebug) {\n      logger.debug(\"loadClass:{}\",className);\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    if (isDebug) {\n      logger.debug(\"ClassNotFound {}\",ex.getMessage());\n    }\n  }\n  if (c != null) {\n    return c;\n  }\n  final CtClass ct=pool.getOrNull(className);\n  if (ct == null) {\n    throw new NotFoundException(className);\n  }\n  final CtClass superClass=ct.getSuperclass();\n  if (superClass != null) {\n    if (!\"java.lang.Object\".equals(superClass.getName())) {\n      if (!isSkipClass(superClass.getName(),classLoadingChecker)) {\n        injectClass0(pool,classLoader,superClass.getName(),classLoadingChecker);\n      }\n    }\n  }\n  final CtClass[] interfaces=ct.getInterfaces();\n  for (  CtClass ctInterface : interfaces) {\n    if (!isSkipClass(ctInterface.getName(),classLoadingChecker)) {\n      if (isDebug) {\n        logger.debug(\"interface : {}\",ctInterface.getName());\n      }\n      injectClass0(pool,classLoader,ctInterface.getName(),classLoadingChecker);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") final Collection<String> referenceClassList=ct.getRefClasses();\n  if (isDebug) {\n    logger.debug(\"target:{} referenceClassList:{}\",className,referenceClassList);\n  }\n  for (  String referenceClass : referenceClassList) {\n    try {\n      if (!isSkipClass(referenceClass,classLoadingChecker)) {\n        if (isDebug) {\n          logger.debug(\"reference : {}\",referenceClass);\n        }\n        injectClass0(pool,classLoader,referenceClass,classLoadingChecker);\n      }\n    }\n catch (    NotFoundException e) {\n      logger.warn(\"Skip a referenced class because of NotFoundException : {}\",e.getMessage(),e);\n    }\n  }\n  if (logger.isInfoEnabled()) {\n    logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader);\n  }\n  final byte[] bytes=ct.toBytecode();\n  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "bytes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 167,
      "startColumnNumber" : 83,
      "endLineNumber" : 167,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 167,
        "startColumnNumber" : 83,
        "endLineNumber" : 167,
        "endColumnNumber" : 95
      },
      "nodeContext" : "bytes.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 167,
        "startColumnNumber" : 26,
        "endLineNumber" : 167,
        "endColumnNumber" : 96
      },
      "nodeContext" : "DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 167,
        "startColumnNumber" : 15,
        "endLineNumber" : 167,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2437,
        "startLineNumber" : 106,
        "startColumnNumber" : 273,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> c=null;\n  try {\n    c=classLoader.loadClass(className);\n    if (isDebug) {\n      logger.debug(\"loadClass:{}\",className);\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    if (isDebug) {\n      logger.debug(\"ClassNotFound {}\",ex.getMessage());\n    }\n  }\n  if (c != null) {\n    return c;\n  }\n  final CtClass ct=pool.getOrNull(className);\n  if (ct == null) {\n    throw new NotFoundException(className);\n  }\n  final CtClass superClass=ct.getSuperclass();\n  if (superClass != null) {\n    if (!\"java.lang.Object\".equals(superClass.getName())) {\n      if (!isSkipClass(superClass.getName(),classLoadingChecker)) {\n        injectClass0(pool,classLoader,superClass.getName(),classLoadingChecker);\n      }\n    }\n  }\n  final CtClass[] interfaces=ct.getInterfaces();\n  for (  CtClass ctInterface : interfaces) {\n    if (!isSkipClass(ctInterface.getName(),classLoadingChecker)) {\n      if (isDebug) {\n        logger.debug(\"interface : {}\",ctInterface.getName());\n      }\n      injectClass0(pool,classLoader,ctInterface.getName(),classLoadingChecker);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") final Collection<String> referenceClassList=ct.getRefClasses();\n  if (isDebug) {\n    logger.debug(\"target:{} referenceClassList:{}\",className,referenceClassList);\n  }\n  for (  String referenceClass : referenceClassList) {\n    try {\n      if (!isSkipClass(referenceClass,classLoadingChecker)) {\n        if (isDebug) {\n          logger.debug(\"reference : {}\",referenceClass);\n        }\n        injectClass0(pool,classLoader,referenceClass,classLoadingChecker);\n      }\n    }\n catch (    NotFoundException e) {\n      logger.warn(\"Skip a referenced class because of NotFoundException : {}\",e.getMessage(),e);\n    }\n  }\n  if (logger.isInfoEnabled()) {\n    logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader);\n  }\n  final byte[] bytes=ct.toBytecode();\n  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2706,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Class<?> injectClass0(ClassPool pool,ClassLoader classLoader,String className,ClassLoadingChecker classLoadingChecker) throws NotFoundException, IOException, CannotCompileException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n  Class<?> c=null;\n  try {\n    c=classLoader.loadClass(className);\n    if (isDebug) {\n      logger.debug(\"loadClass:{}\",className);\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    if (isDebug) {\n      logger.debug(\"ClassNotFound {}\",ex.getMessage());\n    }\n  }\n  if (c != null) {\n    return c;\n  }\n  final CtClass ct=pool.getOrNull(className);\n  if (ct == null) {\n    throw new NotFoundException(className);\n  }\n  final CtClass superClass=ct.getSuperclass();\n  if (superClass != null) {\n    if (!\"java.lang.Object\".equals(superClass.getName())) {\n      if (!isSkipClass(superClass.getName(),classLoadingChecker)) {\n        injectClass0(pool,classLoader,superClass.getName(),classLoadingChecker);\n      }\n    }\n  }\n  final CtClass[] interfaces=ct.getInterfaces();\n  for (  CtClass ctInterface : interfaces) {\n    if (!isSkipClass(ctInterface.getName(),classLoadingChecker)) {\n      if (isDebug) {\n        logger.debug(\"interface : {}\",ctInterface.getName());\n      }\n      injectClass0(pool,classLoader,ctInterface.getName(),classLoadingChecker);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") final Collection<String> referenceClassList=ct.getRefClasses();\n  if (isDebug) {\n    logger.debug(\"target:{} referenceClassList:{}\",className,referenceClassList);\n  }\n  for (  String referenceClass : referenceClassList) {\n    try {\n      if (!isSkipClass(referenceClass,classLoadingChecker)) {\n        if (isDebug) {\n          logger.debug(\"reference : {}\",referenceClass);\n        }\n        injectClass0(pool,classLoader,referenceClass,classLoadingChecker);\n      }\n    }\n catch (    NotFoundException e) {\n      logger.warn(\"Skip a referenced class because of NotFoundException : {}\",e.getMessage(),e);\n    }\n  }\n  if (logger.isInfoEnabled()) {\n    logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader);\n  }\n  final byte[] bytes=ct.toBytecode();\n  return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return (Class<?>)DEFINE_CLASS.invoke(classLoader,ct.getName(),bytes,0,bytes.length);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 167,
    "startColumnNumber" : 73,
    "endLineNumber" : 167,
    "endColumnNumber" : 78
  }, {
    "charLength" : 5,
    "startLineNumber" : 167,
    "startColumnNumber" : 83,
    "endLineNumber" : 167,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}