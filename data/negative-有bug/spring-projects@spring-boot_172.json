{
  "id" : 172,
  "expression" : "header",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/ConnectionInputStreamTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "header",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 50,
      "startColumnNumber" : 16,
      "endLineNumber" : 50,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 50,
        "endColumnNumber" : 51
      },
      "nodeContext" : "header + \"\\r\\n\\r\\n\" + \"content\\r\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 50,
        "startColumnNumber" : 9,
        "endLineNumber" : 50,
        "endColumnNumber" : 51
      },
      "nodeContext" : "data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 44,
        "startColumnNumber" : 43,
        "endLineNumber" : 54,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String header=\"\";\n  for (int i=0; i < 100; i++) {\n    header+=\"x-something-\" + i + \": xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n  }\n  String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n  ConnectionInputStream inputStream=new ConnectionInputStream(new ByteArrayInputStream(data.getBytes()));\n  assertThat(inputStream.readHeader()).isEqualTo(header);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 43,
        "startColumnNumber" : 1,
        "endLineNumber" : 54,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void readHeader() throws Exception {\n  String header=\"\";\n  for (int i=0; i < 100; i++) {\n    header+=\"x-something-\" + i + \": xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n  }\n  String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n  ConnectionInputStream inputStream=new ConnectionInputStream(new ByteArrayInputStream(data.getBytes()));\n  assertThat(inputStream.readHeader()).isEqualTo(header);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 66,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "header",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 53,
      "startColumnNumber" : 49,
      "endLineNumber" : 53,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertThat(inputStream.readHeader()).isEqualTo(header)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(inputStream.readHeader()).isEqualTo(header);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 44,
        "startColumnNumber" : 43,
        "endLineNumber" : 54,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String header=\"\";\n  for (int i=0; i < 100; i++) {\n    header+=\"x-something-\" + i + \": xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n  }\n  String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n  ConnectionInputStream inputStream=new ConnectionInputStream(new ByteArrayInputStream(data.getBytes()));\n  assertThat(inputStream.readHeader()).isEqualTo(header);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 43,
        "startColumnNumber" : 1,
        "endLineNumber" : 54,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void readHeader() throws Exception {\n  String header=\"\";\n  for (int i=0; i < 100; i++) {\n    header+=\"x-something-\" + i + \": xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n  }\n  String data=header + \"\\r\\n\\r\\n\" + \"content\\r\\n\";\n  ConnectionInputStream inputStream=new ConnectionInputStream(new ByteArrayInputStream(data.getBytes()));\n  assertThat(inputStream.readHeader()).isEqualTo(header);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 66,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(inputStream.readHeader()).isEqualTo(header);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 50,
    "startColumnNumber" : 16,
    "endLineNumber" : 50,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 53,
    "startColumnNumber" : 49,
    "endLineNumber" : 53,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}