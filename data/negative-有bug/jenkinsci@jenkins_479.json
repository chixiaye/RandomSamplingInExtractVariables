{
  "id" : 479,
  "expression" : "needSomeWhenNoneAtAll",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/slaves/NodeProvisioner.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "needSomeWhenNoneAtAll",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 675,
      "startColumnNumber" : 38,
      "endLineNumber" : 675,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 675,
        "startColumnNumber" : 16,
        "endLineNumber" : 675,
        "endColumnNumber" : 59
      },
      "nodeContext" : "available < MARGIN || needSomeWhenNoneAtAll",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4753,
        "startLineNumber" : 675,
        "startColumnNumber" : 12,
        "endLineNumber" : 746,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (available < MARGIN || needSomeWhenNoneAtAll) {\n  float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n  float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n  float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n  float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n  if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n    excessWorkload=1;\n  }\n  float m=calcThresholdMargin(state.getTotalSnapshot());\n  if (excessWorkload > 1 - m) {\n    LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n    CLOUD:     for (    Cloud c : Jenkins.get().clouds) {\n      if (excessWorkload < 0) {\n        break;\n      }\n      Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n      if (c.canProvision(cloudState)) {\n        int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n        for (        CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n          if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n            continue CLOUD;\n          }\n        }\n        Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n        fireOnStarted(c,state.getLabel(),additionalCapacities);\n        for (        PlannedNode ac : additionalCapacities) {\n          excessWorkload-=ac.numExecutors;\n          LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n        }\n        state.recordPendingLaunches(additionalCapacities);\n      }\n    }\n    return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7462,
        "startLineNumber" : 637,
        "startColumnNumber" : 68,
        "endLineNumber" : 750,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final LoadStatistics.LoadStatisticsSnapshot snapshot=state.getSnapshot();\n  boolean needSomeWhenNoneAtAll=(snapshot.getAvailableExecutors() + snapshot.getConnectingExecutors() == 0) && (snapshot.getOnlineExecutors() + state.getPlannedCapacitySnapshot() + state.getAdditionalPlannedCapacity() == 0) && (snapshot.getQueueLength() > 0);\n  float available=Math.max(snapshot.getAvailableExecutors(),state.getAvailableExecutorsLatest());\n  if (available < MARGIN || needSomeWhenNoneAtAll) {\n    float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n    float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n    float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n    float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n    if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n      excessWorkload=1;\n    }\n    float m=calcThresholdMargin(state.getTotalSnapshot());\n    if (excessWorkload > 1 - m) {\n      LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n      CLOUD:       for (      Cloud c : Jenkins.get().clouds) {\n        if (excessWorkload < 0) {\n          break;\n        }\n        Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n        if (c.canProvision(cloudState)) {\n          int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n          for (          CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n            if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n              continue CLOUD;\n            }\n          }\n          Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n          fireOnStarted(c,state.getLabel(),additionalCapacities);\n          for (          PlannedNode ac : additionalCapacities) {\n            excessWorkload-=ac.numExecutors;\n            LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n          }\n          state.recordPendingLaunches(additionalCapacities);\n        }\n      }\n      return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n    }\n  }\n  return StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7559,
        "startLineNumber" : 635,
        "startColumnNumber" : 8,
        "endLineNumber" : 750,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@NonNull @Override public StrategyDecision apply(@NonNull StrategyState state){\n  final LoadStatistics.LoadStatisticsSnapshot snapshot=state.getSnapshot();\n  boolean needSomeWhenNoneAtAll=(snapshot.getAvailableExecutors() + snapshot.getConnectingExecutors() == 0) && (snapshot.getOnlineExecutors() + state.getPlannedCapacitySnapshot() + state.getAdditionalPlannedCapacity() == 0) && (snapshot.getQueueLength() > 0);\n  float available=Math.max(snapshot.getAvailableExecutors(),state.getAvailableExecutorsLatest());\n  if (available < MARGIN || needSomeWhenNoneAtAll) {\n    float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n    float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n    float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n    float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n    if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n      excessWorkload=1;\n    }\n    float m=calcThresholdMargin(state.getTotalSnapshot());\n    if (excessWorkload > 1 - m) {\n      LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n      CLOUD:       for (      Cloud c : Jenkins.get().clouds) {\n        if (excessWorkload < 0) {\n          break;\n        }\n        Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n        if (c.canProvision(cloudState)) {\n          int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n          for (          CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n            if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n              continue CLOUD;\n            }\n          }\n          Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n          fireOnStarted(c,state.getLabel(),additionalCapacities);\n          for (          PlannedNode ac : additionalCapacities) {\n            excessWorkload-=ac.numExecutors;\n            LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n          }\n          state.recordPendingLaunches(additionalCapacities);\n        }\n      }\n      return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n    }\n  }\n  return StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 675,
        "startColumnNumber" : 16,
        "endLineNumber" : 675,
        "endColumnNumber" : 59
      },
      "nodeContext" : "available < MARGIN || needSomeWhenNoneAtAll",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "needSomeWhenNoneAtAll",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 688,
      "startColumnNumber" : 20,
      "endLineNumber" : 688,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 688,
        "startColumnNumber" : 20,
        "endLineNumber" : 688,
        "endColumnNumber" : 63
      },
      "nodeContext" : "needSomeWhenNoneAtAll && excessWorkload < 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 688,
        "startColumnNumber" : 16,
        "endLineNumber" : 692,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n  excessWorkload=1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4704,
        "startLineNumber" : 675,
        "startColumnNumber" : 61,
        "endLineNumber" : 746,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n  float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n  float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n  float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n  if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n    excessWorkload=1;\n  }\n  float m=calcThresholdMargin(state.getTotalSnapshot());\n  if (excessWorkload > 1 - m) {\n    LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n    CLOUD:     for (    Cloud c : Jenkins.get().clouds) {\n      if (excessWorkload < 0) {\n        break;\n      }\n      Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n      if (c.canProvision(cloudState)) {\n        int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n        for (        CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n          if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n            continue CLOUD;\n          }\n        }\n        Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n        fireOnStarted(c,state.getLabel(),additionalCapacities);\n        for (        PlannedNode ac : additionalCapacities) {\n          excessWorkload-=ac.numExecutors;\n          LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n        }\n        state.recordPendingLaunches(additionalCapacities);\n      }\n    }\n    return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4753,
        "startLineNumber" : 675,
        "startColumnNumber" : 12,
        "endLineNumber" : 746,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (available < MARGIN || needSomeWhenNoneAtAll) {\n  float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n  float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n  float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n  float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n  if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n    excessWorkload=1;\n  }\n  float m=calcThresholdMargin(state.getTotalSnapshot());\n  if (excessWorkload > 1 - m) {\n    LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n    CLOUD:     for (    Cloud c : Jenkins.get().clouds) {\n      if (excessWorkload < 0) {\n        break;\n      }\n      Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n      if (c.canProvision(cloudState)) {\n        int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n        for (        CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n          if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n            continue CLOUD;\n          }\n        }\n        Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n        fireOnStarted(c,state.getLabel(),additionalCapacities);\n        for (        PlannedNode ac : additionalCapacities) {\n          excessWorkload-=ac.numExecutors;\n          LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n        }\n        state.recordPendingLaunches(additionalCapacities);\n      }\n    }\n    return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7462,
        "startLineNumber" : 637,
        "startColumnNumber" : 68,
        "endLineNumber" : 750,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final LoadStatistics.LoadStatisticsSnapshot snapshot=state.getSnapshot();\n  boolean needSomeWhenNoneAtAll=(snapshot.getAvailableExecutors() + snapshot.getConnectingExecutors() == 0) && (snapshot.getOnlineExecutors() + state.getPlannedCapacitySnapshot() + state.getAdditionalPlannedCapacity() == 0) && (snapshot.getQueueLength() > 0);\n  float available=Math.max(snapshot.getAvailableExecutors(),state.getAvailableExecutorsLatest());\n  if (available < MARGIN || needSomeWhenNoneAtAll) {\n    float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n    float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n    float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n    float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n    if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n      excessWorkload=1;\n    }\n    float m=calcThresholdMargin(state.getTotalSnapshot());\n    if (excessWorkload > 1 - m) {\n      LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n      CLOUD:       for (      Cloud c : Jenkins.get().clouds) {\n        if (excessWorkload < 0) {\n          break;\n        }\n        Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n        if (c.canProvision(cloudState)) {\n          int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n          for (          CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n            if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n              continue CLOUD;\n            }\n          }\n          Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n          fireOnStarted(c,state.getLabel(),additionalCapacities);\n          for (          PlannedNode ac : additionalCapacities) {\n            excessWorkload-=ac.numExecutors;\n            LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n          }\n          state.recordPendingLaunches(additionalCapacities);\n        }\n      }\n      return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n    }\n  }\n  return StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7559,
        "startLineNumber" : 635,
        "startColumnNumber" : 8,
        "endLineNumber" : 750,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@NonNull @Override public StrategyDecision apply(@NonNull StrategyState state){\n  final LoadStatistics.LoadStatisticsSnapshot snapshot=state.getSnapshot();\n  boolean needSomeWhenNoneAtAll=(snapshot.getAvailableExecutors() + snapshot.getConnectingExecutors() == 0) && (snapshot.getOnlineExecutors() + state.getPlannedCapacitySnapshot() + state.getAdditionalPlannedCapacity() == 0) && (snapshot.getQueueLength() > 0);\n  float available=Math.max(snapshot.getAvailableExecutors(),state.getAvailableExecutorsLatest());\n  if (available < MARGIN || needSomeWhenNoneAtAll) {\n    float qlen=Math.min(state.getQueueLengthLatest(),snapshot.getQueueLength());\n    float connectingCapacity=Math.min(state.getConnectingExecutorsLatest(),snapshot.getConnectingExecutors());\n    float plannedCapacity=Math.max(state.getPlannedCapacityLatest(),state.getPlannedCapacitySnapshot()) + state.getAdditionalPlannedCapacity();\n    float excessWorkload=qlen - plannedCapacity - connectingCapacity;\n    if (needSomeWhenNoneAtAll && excessWorkload < 1) {\n      excessWorkload=1;\n    }\n    float m=calcThresholdMargin(state.getTotalSnapshot());\n    if (excessWorkload > 1 - m) {\n      LOGGER.log(Level.FINE,\"Excess workload {0,number,#.###} detected. \" + \"(planned capacity={1,number,#.###},connecting capacity={7,number,#.###},\" + \"Qlen={2,number,#.###},available={3,number,#.###}&{4,number,integer},\"+ \"online={5,number,integer},m={6,number,#.###})\",new Object[]{excessWorkload,plannedCapacity,qlen,available,snapshot.getAvailableExecutors(),snapshot.getOnlineExecutors(),m,snapshot.getConnectingExecutors()});\n      CLOUD:       for (      Cloud c : Jenkins.get().clouds) {\n        if (excessWorkload < 0) {\n          break;\n        }\n        Cloud.CloudState cloudState=new Cloud.CloudState(state.getLabel(),state.getAdditionalPlannedCapacity());\n        if (c.canProvision(cloudState)) {\n          int workloadToProvision=(int)Math.round(Math.floor(excessWorkload + m));\n          for (          CloudProvisioningListener cl : CloudProvisioningListener.all()) {\n            if (cl.canProvision(c,cloudState,workloadToProvision) != null) {\n              continue CLOUD;\n            }\n          }\n          Collection<PlannedNode> additionalCapacities=c.provision(cloudState,workloadToProvision);\n          fireOnStarted(c,state.getLabel(),additionalCapacities);\n          for (          PlannedNode ac : additionalCapacities) {\n            excessWorkload-=ac.numExecutors;\n            LOGGER.log(Level.INFO,\"Started provisioning {0} from {1} with {2,number,integer} \" + \"executors. Remaining excess workload: {3,number,#.###}\",new Object[]{ac.displayName,c.name,ac.numExecutors,excessWorkload});\n          }\n          state.recordPendingLaunches(additionalCapacities);\n        }\n      }\n      return excessWorkload > 1 - m ? StrategyDecision.CONSULT_REMAINING_STRATEGIES : StrategyDecision.PROVISIONING_COMPLETED;\n    }\n  }\n  return StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 688,
        "startColumnNumber" : 20,
        "endLineNumber" : 688,
        "endColumnNumber" : 63
      },
      "nodeContext" : "needSomeWhenNoneAtAll && excessWorkload < 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 675,
    "startColumnNumber" : 38,
    "endLineNumber" : 675,
    "endColumnNumber" : 59
  }, {
    "charLength" : 21,
    "startLineNumber" : 688,
    "startColumnNumber" : 20,
    "endLineNumber" : 688,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}