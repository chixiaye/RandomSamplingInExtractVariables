{
  "id" : 167,
  "expression" : "cacheableCacheMethods",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cacheableCacheMethods",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 107,
      "startColumnNumber" : 27,
      "endLineNumber" : 107,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Element opElement : cacheableCacheMethods) {\n  String name=prop.merge(opElement,parserContext.getReaderContext());\n  TypedStringValue nameHolder=new TypedStringValue(name);\n  nameHolder.setSource(parserContext.extractSource(opElement));\n  CacheableOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheableOperation.Builder());\n  builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n  builder.setSync(Boolean.valueOf(getAttributeValue(opElement,\"sync\",\"false\")));\n  Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n  if (col == null) {\n    col=new ArrayList<>(2);\n    cacheOpMap.put(nameHolder,col);\n  }\n  col.add(builder.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3117,
        "startLineNumber" : 98,
        "startColumnNumber" : 99,
        "endLineNumber" : 173,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Props prop=new Props(definition);\n  ManagedMap<TypedStringValue,Collection<CacheOperation>> cacheOpMap=new ManagedMap<>();\n  cacheOpMap.setSource(parserContext.extractSource(definition));\n  List<Element> cacheableCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHEABLE_ELEMENT);\n  for (  Element opElement : cacheableCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CacheableOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheableOperation.Builder());\n    builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n    builder.setSync(Boolean.valueOf(getAttributeValue(opElement,\"sync\",\"false\")));\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  List<Element> evictCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_EVICT_ELEMENT);\n  for (  Element opElement : evictCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CacheEvictOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheEvictOperation.Builder());\n    String wide=opElement.getAttribute(\"all-entries\");\n    if (StringUtils.hasText(wide)) {\n      builder.setCacheWide(Boolean.valueOf(wide.trim()));\n    }\n    String after=opElement.getAttribute(\"before-invocation\");\n    if (StringUtils.hasText(after)) {\n      builder.setBeforeInvocation(Boolean.valueOf(after.trim()));\n    }\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  List<Element> putCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_PUT_ELEMENT);\n  for (  Element opElement : putCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CachePutOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CachePutOperation.Builder());\n    builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  RootBeanDefinition attributeSourceDefinition=new RootBeanDefinition(NameMatchCacheOperationSource.class);\n  attributeSourceDefinition.setSource(parserContext.extractSource(definition));\n  attributeSourceDefinition.getPropertyValues().add(\"nameMap\",cacheOpMap);\n  return attributeSourceDefinition;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 462,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3215,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 173,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private RootBeanDefinition parseDefinitionSource(Element definition,ParserContext parserContext){\n  Props prop=new Props(definition);\n  ManagedMap<TypedStringValue,Collection<CacheOperation>> cacheOpMap=new ManagedMap<>();\n  cacheOpMap.setSource(parserContext.extractSource(definition));\n  List<Element> cacheableCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHEABLE_ELEMENT);\n  for (  Element opElement : cacheableCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CacheableOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheableOperation.Builder());\n    builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n    builder.setSync(Boolean.valueOf(getAttributeValue(opElement,\"sync\",\"false\")));\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  List<Element> evictCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_EVICT_ELEMENT);\n  for (  Element opElement : evictCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CacheEvictOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheEvictOperation.Builder());\n    String wide=opElement.getAttribute(\"all-entries\");\n    if (StringUtils.hasText(wide)) {\n      builder.setCacheWide(Boolean.valueOf(wide.trim()));\n    }\n    String after=opElement.getAttribute(\"before-invocation\");\n    if (StringUtils.hasText(after)) {\n      builder.setBeforeInvocation(Boolean.valueOf(after.trim()));\n    }\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  List<Element> putCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_PUT_ELEMENT);\n  for (  Element opElement : putCacheMethods) {\n    String name=prop.merge(opElement,parserContext.getReaderContext());\n    TypedStringValue nameHolder=new TypedStringValue(name);\n    nameHolder.setSource(parserContext.extractSource(opElement));\n    CachePutOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CachePutOperation.Builder());\n    builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n    if (col == null) {\n      col=new ArrayList<>(2);\n      cacheOpMap.put(nameHolder,col);\n    }\n    col.add(builder.build());\n  }\n  RootBeanDefinition attributeSourceDefinition=new RootBeanDefinition(NameMatchCacheOperationSource.class);\n  attributeSourceDefinition.setSource(parserContext.extractSource(definition));\n  attributeSourceDefinition.getPropertyValues().add(\"nameMap\",cacheOpMap);\n  return attributeSourceDefinition;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 475,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Element opElement : cacheableCacheMethods) {\n  String name=prop.merge(opElement,parserContext.getReaderContext());\n  TypedStringValue nameHolder=new TypedStringValue(name);\n  nameHolder.setSource(parserContext.extractSource(opElement));\n  CacheableOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheableOperation.Builder());\n  builder.setUnless(getAttributeValue(opElement,\"unless\",\"\"));\n  builder.setSync(Boolean.valueOf(getAttributeValue(opElement,\"sync\",\"false\")));\n  Collection<CacheOperation> col=cacheOpMap.get(nameHolder);\n  if (col == null) {\n    col=new ArrayList<>(2);\n    cacheOpMap.put(nameHolder,col);\n  }\n  col.add(builder.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.w3c.dom.Element>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 107,
    "startColumnNumber" : 27,
    "endLineNumber" : 107,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}