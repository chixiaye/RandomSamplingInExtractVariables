{
  "id" : 280,
  "expression" : "\"message\"",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/logging-json/deployment/src/test/java/io/quarkus/logging/json/FileJsonFormatterCustomConfigTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"message\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 70,
      "startColumnNumber" : 39,
      "endLineNumber" : 70,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 70,
        "startColumnNumber" : 30,
        "endLineNumber" : 70,
        "endColumnNumber" : 49
      },
      "nodeContext" : "node.get(\"message\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 70,
        "startColumnNumber" : 30,
        "endLineNumber" : 70,
        "endColumnNumber" : 58
      },
      "nodeContext" : "node.get(\"message\").asText()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Assertions.assertThat(node.get(\"message\").asText())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assertions.assertThat(node.get(\"message\").asText()).isEqualTo(\"Hello, World!\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assertions.assertThat(node.get(\"message\").asText()).isEqualTo(\"Hello, World!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 979,
        "startLineNumber" : 51,
        "startColumnNumber" : 59,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonFormatter jsonFormatter=getJsonFormatter();\n  String line=jsonFormatter.format(new LogRecord(Level.INFO,\"Hello, World!\"));\n  JsonNode node=new ObjectMapper().readTree(line);\n  Assertions.assertThat(node.has(\"level\")).isFalse();\n  Assertions.assertThat(node.has(\"HEY\")).isTrue();\n  Assertions.assertThat(node.get(\"HEY\").asText()).isEqualTo(\"INFO\");\n  Assertions.assertThat(node.has(\"timestamp\")).isFalse();\n  Assertions.assertThat(node.has(\"sequence\")).isFalse();\n  Assertions.assertThat(node.has(\"foo\")).isTrue();\n  Assertions.assertThat(node.get(\"foo\").asInt()).isEqualTo(42);\n  Assertions.assertThat(node.has(\"bar\")).isTrue();\n  Assertions.assertThat(node.get(\"bar\").asText()).isEqualTo(\"baz\");\n  Assertions.assertThat(node.get(\"message\").asText()).isEqualTo(\"Hello, World!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1044,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void jsonFormatterOutputTest() throws Exception {\n  JsonFormatter jsonFormatter=getJsonFormatter();\n  String line=jsonFormatter.format(new LogRecord(Level.INFO,\"Hello, World!\"));\n  JsonNode node=new ObjectMapper().readTree(line);\n  Assertions.assertThat(node.has(\"level\")).isFalse();\n  Assertions.assertThat(node.has(\"HEY\")).isTrue();\n  Assertions.assertThat(node.get(\"HEY\").asText()).isEqualTo(\"INFO\");\n  Assertions.assertThat(node.has(\"timestamp\")).isFalse();\n  Assertions.assertThat(node.has(\"sequence\")).isFalse();\n  Assertions.assertThat(node.has(\"foo\")).isTrue();\n  Assertions.assertThat(node.get(\"foo\").asInt()).isEqualTo(42);\n  Assertions.assertThat(node.has(\"bar\")).isTrue();\n  Assertions.assertThat(node.get(\"bar\").asText()).isEqualTo(\"baz\");\n  Assertions.assertThat(node.get(\"message\").asText()).isEqualTo(\"Hello, World!\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assertions.assertThat(node.get(\"message\").asText()).isEqualTo(\"Hello, World!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 70,
    "startColumnNumber" : 39,
    "endLineNumber" : 70,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}