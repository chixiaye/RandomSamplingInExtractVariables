{
  "id" : 501,
  "expression" : "commands",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-22/src/main/java/org/redisson/spring/data/connection/RedissonReactiveHashCommands.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "commands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 68,
      "startColumnNumber" : 23,
      "endLineNumber" : 68,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 68,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 10
      },
      "nodeContext" : "execute(commands,command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getFieldValueMap(),\"FieldValueMap must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  if (command.getFieldValueMap().size() == 1) {\n    Entry<ByteBuffer,ByteBuffer> entry=command.getFieldValueMap().entrySet().iterator().next();\n    byte[] mapKeyBuf=toByteArray(entry.getKey());\n    byte[] mapValueBuf=toByteArray(entry.getValue());\n    RedisCommand<Boolean> cmd=RedisCommands.HSETNX;\n    if (command.isUpsert()) {\n      cmd=RedisCommands.HSET;\n    }\n    Mono<Boolean> m=write(keyBuf,StringCodec.INSTANCE,cmd,keyBuf,mapKeyBuf,mapValueBuf);\n    return m.map(v -> new BooleanResponse<>(command,v));\n  }\n else {\n    List<Object> params=new ArrayList<Object>(command.getFieldValueMap().size() * 2 + 1);\n    params.add(keyBuf);\n    for (    Entry<ByteBuffer,ByteBuffer> entry : command.getFieldValueMap().entrySet()) {\n      params.add(toByteArray(entry.getKey()));\n      params.add(toByteArray(entry.getValue()));\n    }\n    Mono<String> m=write(keyBuf,StringCodec.INSTANCE,HMSET,params.toArray());\n    return m.map(v -> new BooleanResponse<>(command,true));\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 231,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1507,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 11
      },
      "nodeContext" : "return execute(commands,command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getFieldValueMap(),\"FieldValueMap must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  if (command.getFieldValueMap().size() == 1) {\n    Entry<ByteBuffer,ByteBuffer> entry=command.getFieldValueMap().entrySet().iterator().next();\n    byte[] mapKeyBuf=toByteArray(entry.getKey());\n    byte[] mapValueBuf=toByteArray(entry.getValue());\n    RedisCommand<Boolean> cmd=RedisCommands.HSETNX;\n    if (command.isUpsert()) {\n      cmd=RedisCommands.HSET;\n    }\n    Mono<Boolean> m=write(keyBuf,StringCodec.INSTANCE,cmd,keyBuf,mapKeyBuf,mapValueBuf);\n    return m.map(v -> new BooleanResponse<>(command,v));\n  }\n else {\n    List<Object> params=new ArrayList<Object>(command.getFieldValueMap().size() * 2 + 1);\n    params.add(keyBuf);\n    for (    Entry<ByteBuffer,ByteBuffer> entry : command.getFieldValueMap().entrySet()) {\n      params.add(toByteArray(entry.getKey()));\n      params.add(toByteArray(entry.getValue()));\n    }\n    Mono<String> m=write(keyBuf,StringCodec.INSTANCE,HMSET,params.toArray());\n    return m.map(v -> new BooleanResponse<>(command,true));\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 232,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1523,
        "startLineNumber" : 67,
        "startColumnNumber" : 84,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return execute(commands,command -> {\n    Assert.notNull(command.getKey(),\"Key must not be null!\");\n    Assert.notNull(command.getFieldValueMap(),\"FieldValueMap must not be null!\");\n    byte[] keyBuf=toByteArray(command.getKey());\n    if (command.getFieldValueMap().size() == 1) {\n      Entry<ByteBuffer,ByteBuffer> entry=command.getFieldValueMap().entrySet().iterator().next();\n      byte[] mapKeyBuf=toByteArray(entry.getKey());\n      byte[] mapValueBuf=toByteArray(entry.getValue());\n      RedisCommand<Boolean> cmd=RedisCommands.HSETNX;\n      if (command.isUpsert()) {\n        cmd=RedisCommands.HSET;\n      }\n      Mono<Boolean> m=write(keyBuf,StringCodec.INSTANCE,cmd,keyBuf,mapKeyBuf,mapValueBuf);\n      return m.map(v -> new BooleanResponse<>(command,v));\n    }\n else {\n      List<Object> params=new ArrayList<Object>(command.getFieldValueMap().size() * 2 + 1);\n      params.add(keyBuf);\n      for (      Entry<ByteBuffer,ByteBuffer> entry : command.getFieldValueMap().entrySet()) {\n        params.add(toByteArray(entry.getKey()));\n        params.add(toByteArray(entry.getValue()));\n      }\n      Mono<String> m=write(keyBuf,StringCodec.INSTANCE,HMSET,params.toArray());\n      return m.map(v -> new BooleanResponse<>(command,true));\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1617,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Flux<BooleanResponse<HSetCommand>> hSet(Publisher<HSetCommand> commands){\n  return execute(commands,command -> {\n    Assert.notNull(command.getKey(),\"Key must not be null!\");\n    Assert.notNull(command.getFieldValueMap(),\"FieldValueMap must not be null!\");\n    byte[] keyBuf=toByteArray(command.getKey());\n    if (command.getFieldValueMap().size() == 1) {\n      Entry<ByteBuffer,ByteBuffer> entry=command.getFieldValueMap().entrySet().iterator().next();\n      byte[] mapKeyBuf=toByteArray(entry.getKey());\n      byte[] mapValueBuf=toByteArray(entry.getValue());\n      RedisCommand<Boolean> cmd=RedisCommands.HSETNX;\n      if (command.isUpsert()) {\n        cmd=RedisCommands.HSET;\n      }\n      Mono<Boolean> m=write(keyBuf,StringCodec.INSTANCE,cmd,keyBuf,mapKeyBuf,mapValueBuf);\n      return m.map(v -> new BooleanResponse<>(command,v));\n    }\n else {\n      List<Object> params=new ArrayList<Object>(command.getFieldValueMap().size() * 2 + 1);\n      params.add(keyBuf);\n      for (      Entry<ByteBuffer,ByteBuffer> entry : command.getFieldValueMap().entrySet()) {\n        params.add(toByteArray(entry.getKey()));\n        params.add(toByteArray(entry.getValue()));\n      }\n      Mono<String> m=write(keyBuf,StringCodec.INSTANCE,HMSET,params.toArray());\n      return m.map(v -> new BooleanResponse<>(command,true));\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 68,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 10
      },
      "nodeContext" : "execute(commands,command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getFieldValueMap(),\"FieldValueMap must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  if (command.getFieldValueMap().size() == 1) {\n    Entry<ByteBuffer,ByteBuffer> entry=command.getFieldValueMap().entrySet().iterator().next();\n    byte[] mapKeyBuf=toByteArray(entry.getKey());\n    byte[] mapValueBuf=toByteArray(entry.getValue());\n    RedisCommand<Boolean> cmd=RedisCommands.HSETNX;\n    if (command.isUpsert()) {\n      cmd=RedisCommands.HSET;\n    }\n    Mono<Boolean> m=write(keyBuf,StringCodec.INSTANCE,cmd,keyBuf,mapKeyBuf,mapValueBuf);\n    return m.map(v -> new BooleanResponse<>(command,v));\n  }\n else {\n    List<Object> params=new ArrayList<Object>(command.getFieldValueMap().size() * 2 + 1);\n    params.add(keyBuf);\n    for (    Entry<ByteBuffer,ByteBuffer> entry : command.getFieldValueMap().entrySet()) {\n      params.add(toByteArray(entry.getKey()));\n      params.add(toByteArray(entry.getValue()));\n    }\n    Mono<String> m=write(keyBuf,StringCodec.INSTANCE,HMSET,params.toArray());\n    return m.map(v -> new BooleanResponse<>(command,true));\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 231,
      "astHeight" : 13
    },
    "tokenLength" : 1,
    "type" : "org.redisson.spring.data.connection.Publisher<org.redisson.spring.data.connection.HSetCommand>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 68,
    "startColumnNumber" : 23,
    "endLineNumber" : 68,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}