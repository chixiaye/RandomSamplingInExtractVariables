{
  "id" : 408,
  "expression" : "Assert",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Assert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 315,
      "startColumnNumber" : 2,
      "endLineNumber" : 315,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 315,
        "startColumnNumber" : 2,
        "endLineNumber" : 315,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Assert.notNull(encodedResource,\"EncodedResource must not be null\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 315,
        "startColumnNumber" : 2,
        "endLineNumber" : 315,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Assert.notNull(encodedResource,\"EncodedResource must not be null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1307,
        "startLineNumber" : 314,
        "startColumnNumber" : 101,
        "endLineNumber" : 352,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(encodedResource,\"EncodedResource must not be null\");\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Loading XML bean definitions from \" + encodedResource);\n  }\n  Set<EncodedResource> currentResources=this.resourcesCurrentlyBeingLoaded.get();\n  if (currentResources == null) {\n    currentResources=new HashSet<>(4);\n    this.resourcesCurrentlyBeingLoaded.set(currentResources);\n  }\n  if (!currentResources.add(encodedResource)) {\n    throw new BeanDefinitionStoreException(\"Detected cyclic loading of \" + encodedResource + \" - check your import definitions!\");\n  }\n  try {\n    InputStream inputStream=encodedResource.getResource().getInputStream();\n    try {\n      InputSource inputSource=new InputSource(inputStream);\n      if (encodedResource.getEncoding() != null) {\n        inputSource.setEncoding(encodedResource.getEncoding());\n      }\n      return doLoadBeanDefinitions(inputSource,encodedResource.getResource());\n    }\n  finally {\n      inputStream.close();\n    }\n  }\n catch (  IOException ex) {\n    throw new BeanDefinitionStoreException(\"IOException parsing XML document from \" + encodedResource.getResource(),ex);\n  }\n finally {\n    currentResources.remove(encodedResource);\n    if (currentResources.isEmpty()) {\n      this.resourcesCurrentlyBeingLoaded.remove();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1732,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 352,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Load bean definitions from the specified XML file.\n * @param encodedResource the resource descriptor for the XML file,allowing to specify an encoding to use for parsing the file\n * @return the number of bean definitions found\n * @throws BeanDefinitionStoreException in case of loading or parsing errors\n */\npublic int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {\n  Assert.notNull(encodedResource,\"EncodedResource must not be null\");\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Loading XML bean definitions from \" + encodedResource);\n  }\n  Set<EncodedResource> currentResources=this.resourcesCurrentlyBeingLoaded.get();\n  if (currentResources == null) {\n    currentResources=new HashSet<>(4);\n    this.resourcesCurrentlyBeingLoaded.set(currentResources);\n  }\n  if (!currentResources.add(encodedResource)) {\n    throw new BeanDefinitionStoreException(\"Detected cyclic loading of \" + encodedResource + \" - check your import definitions!\");\n  }\n  try {\n    InputStream inputStream=encodedResource.getResource().getInputStream();\n    try {\n      InputSource inputSource=new InputSource(inputStream);\n      if (encodedResource.getEncoding() != null) {\n        inputSource.setEncoding(encodedResource.getEncoding());\n      }\n      return doLoadBeanDefinitions(inputSource,encodedResource.getResource());\n    }\n  finally {\n      inputStream.close();\n    }\n  }\n catch (  IOException ex) {\n    throw new BeanDefinitionStoreException(\"IOException parsing XML document from \" + encodedResource.getResource(),ex);\n  }\n finally {\n    currentResources.remove(encodedResource);\n    if (currentResources.isEmpty()) {\n      this.resourcesCurrentlyBeingLoaded.remove();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 160,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 315,
        "startColumnNumber" : 2,
        "endLineNumber" : 315,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Assert.notNull(encodedResource,\"EncodedResource must not be null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.util.Assert"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 315,
    "startColumnNumber" : 2,
    "endLineNumber" : 315,
    "endColumnNumber" : 8
  } ],
  "layoutRelationDataList" : [ ]
}