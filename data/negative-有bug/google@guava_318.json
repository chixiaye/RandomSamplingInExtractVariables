{
  "id" : 318,
  "expression" : "value.signum() >= 0",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/primitives/UnsignedInteger.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value.signum() >= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 92,
      "startColumnNumber" : 8,
      "endLineNumber" : 92,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 64
      },
      "nodeContext" : "value.signum() >= 0 && value.bitLength() <= Integer.SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 14
      },
      "nodeContext" : "checkArgument(value.signum() >= 0 && value.bitLength() <= Integer.SIZE,\"value (%s) is outside the range for an unsigned integer value\",value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 15
      },
      "nodeContext" : "checkArgument(value.signum() >= 0 && value.bitLength() <= Integer.SIZE,\"value (%s) is outside the range for an unsigned integer value\",value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 89,
        "startColumnNumber" : 58,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(value);\n  checkArgument(value.signum() >= 0 && value.bitLength() <= Integer.SIZE,\"value (%s) is outside the range for an unsigned integer value\",value);\n  return fromIntBits(value.intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@code UnsignedInteger} representing the same value as the specified {@link BigInteger}. This is the inverse operation of  {@link #bigIntegerValue()}.\n * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}\n */\npublic static UnsignedInteger valueOf(BigInteger value){\n  checkNotNull(value);\n  checkArgument(value.signum() >= 0 && value.bitLength() <= Integer.SIZE,\"value (%s) is outside the range for an unsigned integer value\",value);\n  return fromIntBits(value.intValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 40,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 64
      },
      "nodeContext" : "value.signum() >= 0 && value.bitLength() <= Integer.SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 92,
    "startColumnNumber" : 8,
    "endLineNumber" : 92,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}