{
  "id" : 80,
  "expression" : "channelDefs",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/semantics/SemanticPipeline.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "channelDefs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 258,
      "startColumnNumber" : 28,
      "endLineNumber" : 258,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (GrammarAST channel : channelDefs) {\n  String channelName=channel.getText();\n  if (g.getTokenType(channelName) != Token.INVALID_TYPE) {\n    g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_TOKEN,g.fileName,channel.token,channelName);\n  }\n  if (LexerATNFactory.COMMON_CONSTANTS.containsKey(channelName)) {\n    g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_COMMON_CONSTANTS,g.fileName,channel.token,channelName);\n  }\n  if (outermost instanceof LexerGrammar) {\n    LexerGrammar lexerGrammar=(LexerGrammar)outermost;\n    if (lexerGrammar.modes.containsKey(channelName)) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_MODE,g.fileName,channel.token,channelName);\n    }\n  }\n  outermost.defineChannelName(channel.getText());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 256,
        "startColumnNumber" : 66,
        "endLineNumber" : 285,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Grammar outermost=g.getOutermostGrammar();\n  for (  GrammarAST channel : channelDefs) {\n    String channelName=channel.getText();\n    if (g.getTokenType(channelName) != Token.INVALID_TYPE) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_TOKEN,g.fileName,channel.token,channelName);\n    }\n    if (LexerATNFactory.COMMON_CONSTANTS.containsKey(channelName)) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_COMMON_CONSTANTS,g.fileName,channel.token,channelName);\n    }\n    if (outermost instanceof LexerGrammar) {\n      LexerGrammar lexerGrammar=(LexerGrammar)outermost;\n      if (lexerGrammar.modes.containsKey(channelName)) {\n        g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_MODE,g.fileName,channel.token,channelName);\n      }\n    }\n    outermost.defineChannelName(channel.getText());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1580,
        "startLineNumber" : 249,
        "startColumnNumber" : 1,
        "endLineNumber" : 285,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Assign constant values to custom channels defined in a grammar.\n * @param g The grammar.\n * @param channelDefs A collection of AST nodes defining individual channelswithin a  {@code} channels{}} block in the grammar.\n */\nvoid assignChannelTypes(Grammar g,List<GrammarAST> channelDefs){\n  Grammar outermost=g.getOutermostGrammar();\n  for (  GrammarAST channel : channelDefs) {\n    String channelName=channel.getText();\n    if (g.getTokenType(channelName) != Token.INVALID_TYPE) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_TOKEN,g.fileName,channel.token,channelName);\n    }\n    if (LexerATNFactory.COMMON_CONSTANTS.containsKey(channelName)) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_COMMON_CONSTANTS,g.fileName,channel.token,channelName);\n    }\n    if (outermost instanceof LexerGrammar) {\n      LexerGrammar lexerGrammar=(LexerGrammar)outermost;\n      if (lexerGrammar.modes.containsKey(channelName)) {\n        g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_MODE,g.fileName,channel.token,channelName);\n      }\n    }\n    outermost.defineChannelName(channel.getText());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (GrammarAST channel : channelDefs) {\n  String channelName=channel.getText();\n  if (g.getTokenType(channelName) != Token.INVALID_TYPE) {\n    g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_TOKEN,g.fileName,channel.token,channelName);\n  }\n  if (LexerATNFactory.COMMON_CONSTANTS.containsKey(channelName)) {\n    g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_COMMON_CONSTANTS,g.fileName,channel.token,channelName);\n  }\n  if (outermost instanceof LexerGrammar) {\n    LexerGrammar lexerGrammar=(LexerGrammar)outermost;\n    if (lexerGrammar.modes.containsKey(channelName)) {\n      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_MODE,g.fileName,channel.token,channelName);\n    }\n  }\n  outermost.defineChannelName(channel.getText());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 117,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.antlr.v4.tool.ast.GrammarAST>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 258,
    "startColumnNumber" : 28,
    "endLineNumber" : 258,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}