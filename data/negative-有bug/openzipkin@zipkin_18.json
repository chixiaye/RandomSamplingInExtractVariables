{
  "id" : 18,
  "expression" : "2",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-transports/kafka/src/test/java/zipkin/kafka/KafkaCollectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 131,
      "startColumnNumber" : 57,
      "endLineNumber" : 131,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 768,
        "startLineNumber" : 117,
        "startColumnNumber" : 52,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Builder builder=builder(\"decoder_exception\");\n  producer.send(new KeyedMessage<>(builder.topic,Codec.THRIFT.writeSpans(TRACE)));\n  producer.send(new KeyedMessage<>(builder.topic,\"[\\\"='\".getBytes()));\n  producer.send(new KeyedMessage<>(builder.topic,\"malformed\".getBytes()));\n  producer.send(new KeyedMessage<>(builder.topic,Codec.THRIFT.writeSpans(TRACE)));\n  try (KafkaCollector processor=newKafkaTransport(builder,consumer)){\n    assertThat(recvdSpans.take()).containsExactlyElementsOf(TRACE);\n    assertThat(recvdSpans.take()).containsExactlyElementsOf(TRACE);\n  }\n   assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 884,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Ensures malformed spans don't hang the processor \n */\n@Test public void skipsMalformedData() throws Exception {\n  Builder builder=builder(\"decoder_exception\");\n  producer.send(new KeyedMessage<>(builder.topic,Codec.THRIFT.writeSpans(TRACE)));\n  producer.send(new KeyedMessage<>(builder.topic,\"[\\\"='\".getBytes()));\n  producer.send(new KeyedMessage<>(builder.topic,\"malformed\".getBytes()));\n  producer.send(new KeyedMessage<>(builder.topic,Codec.THRIFT.writeSpans(TRACE)));\n  try (KafkaCollector processor=newKafkaTransport(builder,consumer)){\n    assertThat(recvdSpans.take()).containsExactlyElementsOf(TRACE);\n    assertThat(recvdSpans.take()).containsExactlyElementsOf(TRACE);\n  }\n   assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 131,
    "startColumnNumber" : 57,
    "endLineNumber" : 131,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}