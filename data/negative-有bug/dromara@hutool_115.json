{
  "id" : 115,
  "expression" : "8",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/img/BackgroundRemoval.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "8",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 135,
      "startColumnNumber" : 73,
      "endLineNumber" : 135,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 135,
        "startColumnNumber" : 55,
        "endLineNumber" : 135,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(rgb & 0xff00) >> 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 135,
        "startColumnNumber" : 17,
        "endLineNumber" : 135,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 135,
        "startColumnNumber" : 11,
        "endLineNumber" : 135,
        "endColumnNumber" : 89
      },
      "nodeContext" : "hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 132,
        "startColumnNumber" : 60,
        "endLineNumber" : 142,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  int rgb=image.getRGB(x,y);\n  String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n  boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n  if (isTrue) {\n    rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n  }\n  image.setRGB(x,y,rgb);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 534,
        "startLineNumber" : 132,
        "startColumnNumber" : 3,
        "endLineNumber" : 142,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int x=image.getMinX(); x < image.getWidth(); x++) {\n  int rgb=image.getRGB(x,y);\n  String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n  boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n  if (isTrue) {\n    rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n  }\n  image.setRGB(x,y,rgb);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 108,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 131,
        "startColumnNumber" : 60,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int x=image.getMinX(); x < image.getWidth(); x++) {\n    int rgb=image.getRGB(x,y);\n    String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n    boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n    if (isTrue) {\n      rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n    }\n    image.setRGB(x,y,rgb);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int y=image.getMinY(); y < image.getHeight(); y++) {\n  for (int x=image.getMinX(); x < image.getWidth(); x++) {\n    int rgb=image.getRGB(x,y);\n    String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n    boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n    if (isTrue) {\n      rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n    }\n    image.setRGB(x,y,rgb);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1262,
        "startLineNumber" : 116,
        "startColumnNumber" : 107,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  tolerance=Math.min(255,Math.max(tolerance,0));\n  ImageIcon imageIcon=new ImageIcon(bufferedImage);\n  BufferedImage image=new BufferedImage(imageIcon.getIconWidth(),imageIcon.getIconHeight(),BufferedImage.TYPE_4BYTE_ABGR);\n  Graphics graphics=image.getGraphics();\n  graphics.drawImage(imageIcon.getImage(),0,0,imageIcon.getImageObserver());\n  String[] removeRgb=getRemoveRgb(bufferedImage);\n  String mainColor=getMainColor(bufferedImage);\n  int alpha=0;\n  for (int y=image.getMinY(); y < image.getHeight(); y++) {\n    for (int x=image.getMinX(); x < image.getWidth(); x++) {\n      int rgb=image.getRGB(x,y);\n      String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n      boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n      if (isTrue) {\n        rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n      }\n      image.setRGB(x,y,rgb);\n    }\n  }\n  graphics.drawImage(image,0,0,imageIcon.getImageObserver());\n  return image;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1724,
        "startLineNumber" : 102,
        "startColumnNumber" : 1,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 背景移除 图片去底工具 将 \"纯色背景的图片\" 还原成 \"透明背景的图片\" 将纯色背景的图片转成矢量图 取图片边缘的像素点和获取到的图片主题色作为要替换的背景色 再加入一定的容差值,然后将所有像素点与该颜色进行比较 发现相同则将颜色不透明度设置为0,使颜色完全透明.\n * @param bufferedImage 需要进行处理的图片流\n * @param override      指定替换成的背景颜色 为null时背景为透明\n * @param tolerance     容差值[根据图片的主题色,加入容差值,值的取值范围在0~255之间]\n * @return 返回处理好的图片流\n */\npublic static BufferedImage backgroundRemoval(BufferedImage bufferedImage,Color override,int tolerance){\n  tolerance=Math.min(255,Math.max(tolerance,0));\n  ImageIcon imageIcon=new ImageIcon(bufferedImage);\n  BufferedImage image=new BufferedImage(imageIcon.getIconWidth(),imageIcon.getIconHeight(),BufferedImage.TYPE_4BYTE_ABGR);\n  Graphics graphics=image.getGraphics();\n  graphics.drawImage(imageIcon.getImage(),0,0,imageIcon.getImageObserver());\n  String[] removeRgb=getRemoveRgb(bufferedImage);\n  String mainColor=getMainColor(bufferedImage);\n  int alpha=0;\n  for (int y=image.getMinY(); y < image.getHeight(); y++) {\n    for (int x=image.getMinX(); x < image.getWidth(); x++) {\n      int rgb=image.getRGB(x,y);\n      String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n      boolean isTrue=ArrayUtil.contains(removeRgb,hex) || areColorsWithinTolerance(hexToRgb(mainColor),new Color(Integer.parseInt(hex.substring(1),16)),tolerance);\n      if (isTrue) {\n        rgb=override == null ? ((alpha + 1) << 24) | (rgb & 0x00ffffff) : override.getRGB();\n      }\n      image.setRGB(x,y,rgb);\n    }\n  }\n  graphics.drawImage(image,0,0,imageIcon.getImageObserver());\n  return image;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String hex=ImgUtil.toHex((rgb & 0xff0000) >> 16,(rgb & 0xff00) >> 8,(rgb & 0xff));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 135,
    "startColumnNumber" : 73,
    "endLineNumber" : 135,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}