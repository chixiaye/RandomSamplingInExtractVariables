{
  "id" : 312,
  "expression" : "storageName + \" MEDIUMTEXT\"",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "storageName + \" MEDIUMTEXT\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 115,
      "startColumnNumber" : 19,
      "endLineNumber" : 115,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 115,
        "startColumnNumber" : 12,
        "endLineNumber" : 115,
        "endColumnNumber" : 47
      },
      "nodeContext" : "return storageName + \" MEDIUMTEXT\";\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 114,
        "startColumnNumber" : 46,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return storageName + \" MEDIUMTEXT\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 114,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 134,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 112,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return storageName + \" VARCHAR(20000)\";\n}\n else if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 110,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (String.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return storageName + \" VARCHAR(20000)\";\n}\n else if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1397,
        "startLineNumber" : 108,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Double.class.equals(type) || double.class.equals(type)) {\n  return storageName + \" DOUBLE\";\n}\n else if (String.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return storageName + \" VARCHAR(20000)\";\n}\n else if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1514,
        "startLineNumber" : 106,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Long.class.equals(type) || long.class.equals(type)) {\n  return storageName + \" BIGINT\";\n}\n else if (Double.class.equals(type) || double.class.equals(type)) {\n  return storageName + \" DOUBLE\";\n}\n else if (String.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return storageName + \" VARCHAR(20000)\";\n}\n else if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 198,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n  return storageName + \" INT\";\n}\n else if (Long.class.equals(type) || long.class.equals(type)) {\n  return storageName + \" BIGINT\";\n}\n else if (Double.class.equals(type) || double.class.equals(type)) {\n  return storageName + \" DOUBLE\";\n}\n else if (String.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return storageName + \" VARCHAR(20000)\";\n}\n else if (byte[].class.equals(type)) {\n  return storageName + \" MEDIUMTEXT\";\n}\n else if (JsonObject.class.equals(type)) {\n  return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n  oneColumnType=oneColumnType.substring(storageName.length());\n  StringBuilder columns=new StringBuilder();\n  for (int i=0; i < maxSizeOfArrayColumn; i++) {\n    columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n  }\n  return columns.toString();\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 222,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 102,
        "startColumnNumber" : 84,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String storageName=column.getColumnName().getStorageName();\n  if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n    return storageName + \" INT\";\n  }\n else   if (Long.class.equals(type) || long.class.equals(type)) {\n    return storageName + \" BIGINT\";\n  }\n else   if (Double.class.equals(type) || double.class.equals(type)) {\n    return storageName + \" DOUBLE\";\n  }\n else   if (String.class.equals(type)) {\n    return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n  }\n else   if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n    return storageName + \" VARCHAR(20000)\";\n  }\n else   if (byte[].class.equals(type)) {\n    return storageName + \" MEDIUMTEXT\";\n  }\n else   if (JsonObject.class.equals(type)) {\n    return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n  }\n else   if (List.class.isAssignableFrom(type)) {\n    final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n    String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n    oneColumnType=oneColumnType.substring(storageName.length());\n    StringBuilder columns=new StringBuilder();\n    for (int i=0; i < maxSizeOfArrayColumn; i++) {\n      columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n    }\n    return columns.toString();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected String transform(ModelColumn column,Class<?> type,Type genericType){\n  final String storageName=column.getColumnName().getStorageName();\n  if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n    return storageName + \" INT\";\n  }\n else   if (Long.class.equals(type) || long.class.equals(type)) {\n    return storageName + \" BIGINT\";\n  }\n else   if (Double.class.equals(type) || double.class.equals(type)) {\n    return storageName + \" DOUBLE\";\n  }\n else   if (String.class.equals(type)) {\n    return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n  }\n else   if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n    return storageName + \" VARCHAR(20000)\";\n  }\n else   if (byte[].class.equals(type)) {\n    return storageName + \" MEDIUMTEXT\";\n  }\n else   if (JsonObject.class.equals(type)) {\n    return storageName + \" VARCHAR(\" + column.getLength()+ \")\";\n  }\n else   if (List.class.isAssignableFrom(type)) {\n    final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n    String oneColumnType=transform(column,(Class<?>)elementType,elementType);\n    oneColumnType=oneColumnType.substring(storageName.length());\n    StringBuilder columns=new StringBuilder();\n    for (int i=0; i < maxSizeOfArrayColumn; i++) {\n      columns.append(storageName).append(\"_\").append(i).append(oneColumnType).append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n    }\n    return columns.toString();\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 115,
        "startColumnNumber" : 12,
        "endLineNumber" : 115,
        "endColumnNumber" : 47
      },
      "nodeContext" : "return storageName + \" MEDIUMTEXT\";\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 115,
    "startColumnNumber" : 19,
    "endLineNumber" : 115,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}