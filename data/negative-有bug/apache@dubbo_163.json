{
  "id" : 163,
  "expression" : "connection.getMetaData().getTypeInfo()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/DataSourceStatusCheckerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "connection.getMetaData().getTypeInfo()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 87,
      "startColumnNumber" : 14,
      "endLineNumber" : 87,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 87,
        "startColumnNumber" : 14,
        "endLineNumber" : 87,
        "endColumnNumber" : 59
      },
      "nodeContext" : "connection.getMetaData().getTypeInfo().next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 60
      },
      "nodeContext" : "given(connection.getMetaData().getTypeInfo().next())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 77
      },
      "nodeContext" : "given(connection.getMetaData().getTypeInfo().next()).willReturn(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 78
      },
      "nodeContext" : "given(connection.getMetaData().getTypeInfo().next()).willReturn(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 82,
        "startColumnNumber" : 70,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,DataSource> map=new HashMap<String,DataSource>();\n  DataSource dataSource=mock(DataSource.class);\n  Connection connection=mock(Connection.class,Answers.RETURNS_DEEP_STUBS);\n  given(dataSource.getConnection()).willReturn(connection);\n  given(connection.getMetaData().getTypeInfo().next()).willReturn(true);\n  map.put(\"mockDatabase\",dataSource);\n  given(applicationContext.getBeansOfType(eq(DataSource.class),anyBoolean(),anyBoolean())).willReturn(map);\n  Status status=dataSourceStatusChecker.check();\n  assertThat(status.getLevel(),is(Status.Level.OK));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWithDatasourceHasNextResult() throws SQLException {\n  Map<String,DataSource> map=new HashMap<String,DataSource>();\n  DataSource dataSource=mock(DataSource.class);\n  Connection connection=mock(Connection.class,Answers.RETURNS_DEEP_STUBS);\n  given(dataSource.getConnection()).willReturn(connection);\n  given(connection.getMetaData().getTypeInfo().next()).willReturn(true);\n  map.put(\"mockDatabase\",dataSource);\n  given(applicationContext.getBeansOfType(eq(DataSource.class),anyBoolean(),anyBoolean())).willReturn(map);\n  Status status=dataSourceStatusChecker.check();\n  assertThat(status.getLevel(),is(Status.Level.OK));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 78
      },
      "nodeContext" : "given(connection.getMetaData().getTypeInfo().next()).willReturn(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.sql.ResultSet"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 87,
    "startColumnNumber" : 14,
    "endLineNumber" : 87,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}