{
  "id" : 242,
  "expression" : "false",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/maps/planet/AsteroidGenerator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 143,
      "startColumnNumber" : 37,
      "endLineNumber" : 143,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 42
      },
      "nodeContext" : "state.rules.borderDarkness=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 43
      },
      "nodeContext" : "state.rules.borderDarkness=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 46,
        "startColumnNumber" : 26,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 679,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4229,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void generate(){\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 685,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 43
      },
      "nodeContext" : "state.rules.borderDarkness=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 151,
      "startColumnNumber" : 56,
      "endLineNumber" : 151,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Waves.generate(0.5f,rand,false,true,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 75
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 76
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 46,
        "startColumnNumber" : 26,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 679,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4229,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void generate(){\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 685,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 76
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 151,
      "startColumnNumber" : 69,
      "endLineNumber" : 151,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Waves.generate(0.5f,rand,false,true,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 75
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 76
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4192,
        "startLineNumber" : 46,
        "startColumnNumber" : 26,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 679,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4229,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void generate(){\n  seed=state.rules.sector.planet.id;\n  int sx=width / 2, sy=height / 2;\n  rand=new Rand(seed);\n  Floor background=Blocks.empty.asFloor();\n  tiles.eachTile(t -> t.setFloor(background));\n  asteroid(sx,sy,rand.random(30,50));\n  int amount=rand.random(min,max);\n  for (int i=0; i < amount; i++) {\n    float radius=rand.random(radMin,radMax), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  int smalls=rand.random(min,max) * 3;\n  for (int i=0; i < smalls; i++) {\n    float radius=rand.random(1,8), ax=rand.random(radius,width - radius), ay=rand.random(radius,height - radius);\n    asteroid((int)ax,(int)ay,(int)radius);\n  }\n  pass((x,y) -> {\n    if (floor != background) {\n      if (Ridged.noise2d(seed,x,y,foct,fper,1f / fscl) - Ridged.noise2d(seed,x,y,1,1f,5f) / 2.7f > fmag) {\n        floor=Blocks.stone;\n      }\n    }\n  }\n);\n  pass((x,y) -> {\n    if (floor == background || Ridged.noise2d(seed + 1,x,y,4,0.7f,1f / 60f) > 0.45f || Mathf.within(x,y,sx,sy,20 + Ridged.noise2d(seed,x,y,3,0.5f,1f / 30f) * 6f))     return;\n    int radius=6;\n    for (int dx=x - radius; dx <= x + radius; dx++) {\n      for (int dy=y - radius; dy <= y + radius; dy++) {\n        if (Mathf.within(dx,dy,x,y,radius + 0.0001f) && tiles.in(dx,dy) && tiles.getn(dx,dy).floor() == background) {\n          return;\n        }\n      }\n    }\n    block=floor.asFloor().wall;\n  }\n);\n  pass((x,y) -> {\n    if (floor == Blocks.ferricStone && rand.chance(0.02))     floor=Blocks.ferricCraters;\n    if (floor == Blocks.stone && rand.chance(0.02))     floor=Blocks.craters;\n  }\n);\n  decoration(0.017f);\n  oreAround(Blocks.oreLead,Blocks.stoneWall,3,70f,0.6f * leadScale);\n  ore(Blocks.oreCopper,Blocks.ferricStone,5f,0.8f * copperScale);\n  ore(Blocks.oreThorium,Blocks.beryllicStone,4f,0.9f * thoriumScl);\n  ore(Blocks.oreThorium,Blocks.carbonStone,4f,0.9f * thoriumScl);\n  wallOre(Blocks.carbonWall,Blocks.graphiticWall,35f,0.57f * graphiteScale);\n  wallOre(Blocks.beryllicStoneWall,Blocks.wallOreBeryllium,50f,0.62f * berylliumScale);\n  pass((x,y) -> {\n    if (floor != Blocks.stone)     return;\n    int i=4;\n    if (Math.abs(0.5f - noise(x,y + i * 999 - x * 1.5f,2,0.65,(60 + i * 2))) > 0.26f * 1f) {\n      ore=Blocks.oreTitanium;\n    }\n  }\n);\n  int spawnSide=rand.random(3);\n  int sizeOffset=width / 2 - 1;\n  tiles.getn(sizeOffset * Geometry.d8edge[spawnSide].x + width / 2,sizeOffset * Geometry.d8edge[spawnSide].y + height / 2).setOverlay(Blocks.spawn);\n  Schematics.placeLaunchLoadout(sx,sy);\n  state.rules.planetBackground=new PlanetParams(){\n{\n      planet=sector.planet;\n      zoom=1f;\n      camPos=new Vec3(1.2388899f,1.6047299f,2.4758825f);\n    }\n  }\n;\n  state.rules.dragMultiplier=0.7f;\n  state.rules.borderDarkness=false;\n  state.rules.waves=true;\n  state.rules.showSpawns=true;\n  state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 685,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 151,
        "endColumnNumber" : 76
      },
      "nodeContext" : "state.rules.spawns=Waves.generate(0.5f,rand,false,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 143,
    "startColumnNumber" : 37,
    "endLineNumber" : 143,
    "endColumnNumber" : 42
  }, {
    "charLength" : 5,
    "startLineNumber" : 151,
    "startColumnNumber" : 56,
    "endLineNumber" : 151,
    "endColumnNumber" : 61
  }, {
    "charLength" : 5,
    "startLineNumber" : 151,
    "startColumnNumber" : 69,
    "endLineNumber" : 151,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  } ]
}