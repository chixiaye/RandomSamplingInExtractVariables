{
  "id" : 110,
  "expression" : "200",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Test/IntegrationTest/src/test.slow/java/ghidra/program/model/lang/PcodeParserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 185,
      "startColumnNumber" : 71,
      "endLineNumber" : 185,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 185,
        "startColumnNumber" : 26,
        "endLineNumber" : 185,
        "endColumnNumber" : 75
      },
      "nodeContext" : "parser.compilePcode(pcodeStatements,\"test\",200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 185,
        "startColumnNumber" : 15,
        "endLineNumber" : 185,
        "endColumnNumber" : 75
      },
      "nodeContext" : "template=parser.compilePcode(pcodeStatements,\"test\",200)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ConstructTpl template=parser.compilePcode(pcodeStatements,\"test\",200);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3681,
        "startLineNumber" : 171,
        "startColumnNumber" : 49,
        "endLineNumber" : 251,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SleighLanguage lang=(SleighLanguage)getSLEIGH_X86_LANGUAGE();\n  long uniqueBase=UniqueLayout.INJECT.getOffset(lang);\n  String pcodeStatements=\"tmp:1 = inst_next;\\n\" + \"if (AX == 0) goto inst_next;\\n\" + \"call [ECX];\\n\"+ \"if (BX != 1) goto <lab>;\\n\"+ \"CX = 0;\\n\"+ \"<lab>\\n\"+ \"BX = CX << 2;\\n\"+ \"in1 = in2 + 7;\";\n  PcodeParser parser=new PcodeParser(lang,uniqueBase);\n  Location loc=new Location(\"pcodetest\",5);\n  parser.addOperand(loc,\"in1\",0);\n  parser.addOperand(loc,\"in2\",1);\n  ConstructTpl template=parser.compilePcode(pcodeStatements,\"test\",200);\n  assertNull(template.getResult());\n  assertEquals(template.getNumLabels(),1);\n  OpTpl[] vec=template.getOpVec();\n  assertEquals(vec.length,10);\n  assertEquals(vec[0].getOpcode(),PcodeOp.COPY);\n  assertTrue(testVarnode(vec[0].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase,1));\n  assertEquals(vec[0].getInput().length,1);\n  assertTrue(testInstNextConstant(vec[0].getInput()[0],1));\n  assertEquals(vec[1].getOpcode(),PcodeOp.INT_EQUAL);\n  assertTrue(testVarnode(vec[1].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x80,1));\n  assertEquals(vec[1].getInput().length,2);\n  assertTrue(testVarnode(vec[1].getInput()[0],\"register\",0,2));\n  assertTrue(testVarnode(vec[1].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,0,2));\n  assertEquals(vec[2].getOpcode(),PcodeOp.CBRANCH);\n  assertNull(vec[2].getOutput());\n  assertEquals(vec[2].getInput().length,2);\n  assertTrue(testInstNext(vec[2].getInput()[0]));\n  assertTrue(testVarnode(vec[2].getInput()[1],SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x80,1));\n  assertEquals(vec[3].getOpcode(),PcodeOp.CALLIND);\n  assertNull(vec[3].getOutput());\n  assertEquals(vec[3].getInput().length,1);\n  assertTrue(testVarnode(vec[3].getInput()[0],\"register\",4,4));\n  assertEquals(vec[4].getOpcode(),PcodeOp.INT_NOTEQUAL);\n  assertTrue(testVarnode(vec[4].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x100,1));\n  assertEquals(vec[4].getInput().length,2);\n  assertTrue(testVarnode(vec[4].getInput()[0],\"register\",0xc,2));\n  assertTrue(testVarnode(vec[4].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,1,2));\n  assertEquals(vec[5].getOpcode(),PcodeOp.CBRANCH);\n  assertNull(vec[5].getOutput());\n  assertEquals(vec[5].getInput().length,2);\n  assertTrue(testRelative(vec[5].getInput()[0],0,4));\n  assertTrue(testVarnode(vec[5].getInput()[1],SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x100,1));\n  assertEquals(vec[6].getOpcode(),PcodeOp.COPY);\n  assertTrue(testVarnode(vec[6].getOutput(),\"register\",4,2));\n  assertEquals(vec[6].getInput().length,1);\n  assertTrue(testVarnode(vec[6].getInput()[0],SpaceNames.CONSTANT_SPACE_NAME,0,2));\n  assertEquals(vec[7].getOpcode(),PcodeOp.PTRADD);\n  assertNull(vec[7].getOutput());\n  assertEquals(vec[7].getInput().length,1);\n  assertTrue(testVarnode(vec[7].getInput()[0],SpaceNames.CONSTANT_SPACE_NAME,0,4));\n  assertEquals(vec[8].getOpcode(),PcodeOp.INT_LEFT);\n  assertTrue(testVarnode(vec[8].getOutput(),\"register\",0xc,2));\n  assertEquals(vec[8].getInput().length,2);\n  assertTrue(testVarnode(vec[8].getInput()[0],\"register\",0x4,2));\n  assertTrue(testVarnode(vec[8].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,2,4));\n  assertEquals(vec[9].getOpcode(),PcodeOp.INT_ADD);\n  assertTrue(testParameter(vec[9].getOutput(),0));\n  assertEquals(vec[9].getInput().length,2);\n  assertTrue(testParameter(vec[9].getInput()[0],1));\n  assertTrue(testVarnodeHandleSize(vec[9].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,7,0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 700,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3737,
        "startLineNumber" : 170,
        "startColumnNumber" : 1,
        "endLineNumber" : 251,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testCompilePcode() throws Exception {\n  SleighLanguage lang=(SleighLanguage)getSLEIGH_X86_LANGUAGE();\n  long uniqueBase=UniqueLayout.INJECT.getOffset(lang);\n  String pcodeStatements=\"tmp:1 = inst_next;\\n\" + \"if (AX == 0) goto inst_next;\\n\" + \"call [ECX];\\n\"+ \"if (BX != 1) goto <lab>;\\n\"+ \"CX = 0;\\n\"+ \"<lab>\\n\"+ \"BX = CX << 2;\\n\"+ \"in1 = in2 + 7;\";\n  PcodeParser parser=new PcodeParser(lang,uniqueBase);\n  Location loc=new Location(\"pcodetest\",5);\n  parser.addOperand(loc,\"in1\",0);\n  parser.addOperand(loc,\"in2\",1);\n  ConstructTpl template=parser.compilePcode(pcodeStatements,\"test\",200);\n  assertNull(template.getResult());\n  assertEquals(template.getNumLabels(),1);\n  OpTpl[] vec=template.getOpVec();\n  assertEquals(vec.length,10);\n  assertEquals(vec[0].getOpcode(),PcodeOp.COPY);\n  assertTrue(testVarnode(vec[0].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase,1));\n  assertEquals(vec[0].getInput().length,1);\n  assertTrue(testInstNextConstant(vec[0].getInput()[0],1));\n  assertEquals(vec[1].getOpcode(),PcodeOp.INT_EQUAL);\n  assertTrue(testVarnode(vec[1].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x80,1));\n  assertEquals(vec[1].getInput().length,2);\n  assertTrue(testVarnode(vec[1].getInput()[0],\"register\",0,2));\n  assertTrue(testVarnode(vec[1].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,0,2));\n  assertEquals(vec[2].getOpcode(),PcodeOp.CBRANCH);\n  assertNull(vec[2].getOutput());\n  assertEquals(vec[2].getInput().length,2);\n  assertTrue(testInstNext(vec[2].getInput()[0]));\n  assertTrue(testVarnode(vec[2].getInput()[1],SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x80,1));\n  assertEquals(vec[3].getOpcode(),PcodeOp.CALLIND);\n  assertNull(vec[3].getOutput());\n  assertEquals(vec[3].getInput().length,1);\n  assertTrue(testVarnode(vec[3].getInput()[0],\"register\",4,4));\n  assertEquals(vec[4].getOpcode(),PcodeOp.INT_NOTEQUAL);\n  assertTrue(testVarnode(vec[4].getOutput(),SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x100,1));\n  assertEquals(vec[4].getInput().length,2);\n  assertTrue(testVarnode(vec[4].getInput()[0],\"register\",0xc,2));\n  assertTrue(testVarnode(vec[4].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,1,2));\n  assertEquals(vec[5].getOpcode(),PcodeOp.CBRANCH);\n  assertNull(vec[5].getOutput());\n  assertEquals(vec[5].getInput().length,2);\n  assertTrue(testRelative(vec[5].getInput()[0],0,4));\n  assertTrue(testVarnode(vec[5].getInput()[1],SpaceNames.UNIQUE_SPACE_NAME,uniqueBase + 0x100,1));\n  assertEquals(vec[6].getOpcode(),PcodeOp.COPY);\n  assertTrue(testVarnode(vec[6].getOutput(),\"register\",4,2));\n  assertEquals(vec[6].getInput().length,1);\n  assertTrue(testVarnode(vec[6].getInput()[0],SpaceNames.CONSTANT_SPACE_NAME,0,2));\n  assertEquals(vec[7].getOpcode(),PcodeOp.PTRADD);\n  assertNull(vec[7].getOutput());\n  assertEquals(vec[7].getInput().length,1);\n  assertTrue(testVarnode(vec[7].getInput()[0],SpaceNames.CONSTANT_SPACE_NAME,0,4));\n  assertEquals(vec[8].getOpcode(),PcodeOp.INT_LEFT);\n  assertTrue(testVarnode(vec[8].getOutput(),\"register\",0xc,2));\n  assertEquals(vec[8].getInput().length,2);\n  assertTrue(testVarnode(vec[8].getInput()[0],\"register\",0x4,2));\n  assertTrue(testVarnode(vec[8].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,2,4));\n  assertEquals(vec[9].getOpcode(),PcodeOp.INT_ADD);\n  assertTrue(testParameter(vec[9].getOutput(),0));\n  assertEquals(vec[9].getInput().length,2);\n  assertTrue(testParameter(vec[9].getInput()[0],1));\n  assertTrue(testVarnodeHandleSize(vec[9].getInput()[1],SpaceNames.CONSTANT_SPACE_NAME,7,0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 708,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "ConstructTpl template=parser.compilePcode(pcodeStatements,\"test\",200);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 185,
    "startColumnNumber" : 71,
    "endLineNumber" : 185,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}