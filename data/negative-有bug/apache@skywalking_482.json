{
  "id" : 482,
  "expression" : "new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB))",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 84,
      "startLineNumber" : 60,
      "startColumnNumber" : 22,
      "endLineNumber" : 60,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 11,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 106
      },
      "nodeContext" : "tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 107
      },
      "nodeContext" : "tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (startTB > 0 && endTB > 0) {\n  tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2234,
        "startLineNumber" : 57,
        "startColumnNumber" : 142,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TimestampRange tsRange=null;\n  if (startTB > 0 && endTB > 0) {\n    tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n  }\n  StreamQueryResponse resp=query(AlarmRecord.INDEX_NAME,TAGS,tsRange,new QueryBuilder<StreamQuery>(){\n    @Override public void apply(    StreamQuery query){\n      if (Objects.nonNull(scopeId)) {\n        query.and(eq(AlarmRecord.SCOPE,(long)scopeId));\n      }\n      if (CollectionUtils.isNotEmpty(tags)) {\n        List<String> tagsConditions=new ArrayList<>(tags.size());\n        for (        final Tag tag : tags) {\n          tagsConditions.add(tag.toString());\n        }\n        query.and(having(AlarmRecord.TAGS,tagsConditions));\n      }\n      query.setLimit(limit);\n      query.setOffset(from);\n    }\n  }\n);\n  Alarms alarms=new Alarms();\n  for (  final RowEntity rowEntity : resp.getElements()) {\n    AlarmRecord.Builder builder=new AlarmRecord.Builder();\n    AlarmRecord alarmRecord=builder.storage2Entity(new BanyanDBConverter.StorageToStream(AlarmRecord.INDEX_NAME,rowEntity));\n    AlarmMessage message=new AlarmMessage();\n    message.setId(String.valueOf(alarmRecord.getId0()));\n    message.setId1(String.valueOf(alarmRecord.getId1()));\n    message.setMessage(alarmRecord.getAlarmMessage());\n    message.setStartTime(alarmRecord.getStartTime());\n    message.setScope(Scope.Finder.valueOf(alarmRecord.getScope()));\n    message.setScopeId(alarmRecord.getScope());\n    if (!CollectionUtils.isEmpty(alarmRecord.getTagsRawData())) {\n      parserDataBinary(alarmRecord.getTagsRawData(),message.getTags());\n    }\n    alarms.getMsgs().add(message);\n  }\n  return alarms;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Alarms getAlarm(Integer scopeId,String keyword,int limit,int from,long startTB,long endTB,List<Tag> tags) throws IOException {\n  TimestampRange tsRange=null;\n  if (startTB > 0 && endTB > 0) {\n    tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n  }\n  StreamQueryResponse resp=query(AlarmRecord.INDEX_NAME,TAGS,tsRange,new QueryBuilder<StreamQuery>(){\n    @Override public void apply(    StreamQuery query){\n      if (Objects.nonNull(scopeId)) {\n        query.and(eq(AlarmRecord.SCOPE,(long)scopeId));\n      }\n      if (CollectionUtils.isNotEmpty(tags)) {\n        List<String> tagsConditions=new ArrayList<>(tags.size());\n        for (        final Tag tag : tags) {\n          tagsConditions.add(tag.toString());\n        }\n        query.and(having(AlarmRecord.TAGS,tagsConditions));\n      }\n      query.setLimit(limit);\n      query.setOffset(from);\n    }\n  }\n);\n  Alarms alarms=new Alarms();\n  for (  final RowEntity rowEntity : resp.getElements()) {\n    AlarmRecord.Builder builder=new AlarmRecord.Builder();\n    AlarmRecord alarmRecord=builder.storage2Entity(new BanyanDBConverter.StorageToStream(AlarmRecord.INDEX_NAME,rowEntity));\n    AlarmMessage message=new AlarmMessage();\n    message.setId(String.valueOf(alarmRecord.getId0()));\n    message.setId1(String.valueOf(alarmRecord.getId1()));\n    message.setMessage(alarmRecord.getAlarmMessage());\n    message.setStartTime(alarmRecord.getStartTime());\n    message.setScope(Scope.Finder.valueOf(alarmRecord.getScope()));\n    message.setScopeId(alarmRecord.getScope());\n    if (!CollectionUtils.isEmpty(alarmRecord.getTagsRawData())) {\n      parserDataBinary(alarmRecord.getTagsRawData(),message.getTags());\n    }\n    alarms.getMsgs().add(message);\n  }\n  return alarms;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 305,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 107
      },
      "nodeContext" : "tsRange=new TimestampRange(TimeBucket.getTimestamp(startTB),TimeBucket.getTimestamp(endTB));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "org.apache.skywalking.oap.server.storage.plugin.banyandb.stream.TimestampRange"
  } ],
  "positionList" : [ {
    "charLength" : 84,
    "startLineNumber" : 60,
    "startColumnNumber" : 22,
    "endLineNumber" : 60,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}