{
  "id" : 379,
  "expression" : "IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList()))",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/java/util/common/parsers/CloseableIteratorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList()))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 121,
      "startLineNumber" : 47,
      "startColumnNumber" : 45,
      "endLineNumber" : 48,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 30,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 47,
        "startColumnNumber" : 45,
        "endLineNumber" : 49,
        "endColumnNumber" : 19
      },
      "nodeContext" : "IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 47,
        "startColumnNumber" : 34,
        "endLineNumber" : 49,
        "endColumnNumber" : 19
      },
      "nodeContext" : "expected=IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 20
      },
      "nodeContext" : "final Iterator<List<Integer>> expected=IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 684,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final CloseableIterator<List<Integer>> actual=generateTestIterator(8).map(list -> {\n    final List<Integer> newList=new ArrayList<>(list.size());\n    for (    Integer i : list) {\n      newList.add(i * 10);\n    }\n    return newList;\n  }\n);\n  final Iterator<List<Integer>> expected=IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator();\n  while (expected.hasNext() && actual.hasNext()) {\n    Assert.assertEquals(expected.next(),actual.next());\n  }\n  Assert.assertFalse(actual.hasNext());\n  Assert.assertFalse(expected.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMap(){\n  final CloseableIterator<List<Integer>> actual=generateTestIterator(8).map(list -> {\n    final List<Integer> newList=new ArrayList<>(list.size());\n    for (    Integer i : list) {\n      newList.add(i * 10);\n    }\n    return newList;\n  }\n);\n  final Iterator<List<Integer>> expected=IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator();\n  while (expected.hasNext() && actual.hasNext()) {\n    Assert.assertEquals(expected.next(),actual.next());\n  }\n  Assert.assertFalse(actual.hasNext());\n  Assert.assertFalse(expected.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 47,
        "startColumnNumber" : 45,
        "endLineNumber" : 49,
        "endColumnNumber" : 19
      },
      "nodeContext" : "IntStream.range(0,8).mapToObj(i -> IntStream.range(0,i).map(j -> j * 10).boxed().collect(Collectors.toList())).iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 9
    },
    "tokenLength" : 21,
    "type" : "java.util.stream.Stream<java.util.List<java.lang.Integer>>"
  } ],
  "positionList" : [ {
    "charLength" : 121,
    "startLineNumber" : 47,
    "startColumnNumber" : 45,
    "endLineNumber" : 48,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}