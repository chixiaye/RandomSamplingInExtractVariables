{
  "id" : 127,
  "expression" : "actualTypeArgsLength",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-metadata/dubbo-metadata-api/src/main/java/org/apache/dubbo/metadata/definition/builder/MapTypeBuilder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actualTypeArgsLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 57,
      "startColumnNumber" : 12,
      "endLineNumber" : 57,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 37
      },
      "nodeContext" : "actualTypeArgsLength != 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actualTypeArgsLength != 2) {\n  throw new IllegalArgumentException(MessageFormat.format(\"[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}].\" + Arrays.toString(actualTypeArgs),type,actualTypeArgs));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 48,
        "startColumnNumber" : 98,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(type instanceof ParameterizedType)) {\n    return new TypeDefinition(clazz.getCanonicalName());\n  }\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] actualTypeArgs=parameterizedType.getActualTypeArguments();\n  int actualTypeArgsLength=actualTypeArgs == null ? 0 : actualTypeArgs.length;\n  if (actualTypeArgsLength != 2) {\n    throw new IllegalArgumentException(MessageFormat.format(\"[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}].\" + Arrays.toString(actualTypeArgs),type,actualTypeArgs));\n  }\n  String mapType=ClassUtils.getCanonicalNameForParameterizedType(parameterizedType);\n  mapType=replace(mapType,\", \",\",\");\n  TypeDefinition td=typeCache.get(mapType);\n  if (td != null) {\n    return td;\n  }\n  td=new TypeDefinition(mapType);\n  typeCache.put(mapType,td);\n  for (int i=0; i < actualTypeArgsLength; i++) {\n    Type actualType=actualTypeArgs[i];\n    TypeDefinition item=null;\n    Class<?> rawType=getRawClass(actualType);\n    if (isParameterizedType(actualType)) {\n      item=TypeDefinitionBuilder.build(actualType,rawType,typeCache);\n    }\n else     if (isClass(actualType)) {\n      item=TypeDefinitionBuilder.build(null,rawType,typeCache);\n    }\n    if (item != null) {\n      td.getItems().add(item.getType());\n    }\n  }\n  return td;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public TypeDefinition build(Type type,Class<?> clazz,Map<String,TypeDefinition> typeCache){\n  if (!(type instanceof ParameterizedType)) {\n    return new TypeDefinition(clazz.getCanonicalName());\n  }\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] actualTypeArgs=parameterizedType.getActualTypeArguments();\n  int actualTypeArgsLength=actualTypeArgs == null ? 0 : actualTypeArgs.length;\n  if (actualTypeArgsLength != 2) {\n    throw new IllegalArgumentException(MessageFormat.format(\"[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}].\" + Arrays.toString(actualTypeArgs),type,actualTypeArgs));\n  }\n  String mapType=ClassUtils.getCanonicalNameForParameterizedType(parameterizedType);\n  mapType=replace(mapType,\", \",\",\");\n  TypeDefinition td=typeCache.get(mapType);\n  if (td != null) {\n    return td;\n  }\n  td=new TypeDefinition(mapType);\n  typeCache.put(mapType,td);\n  for (int i=0; i < actualTypeArgsLength; i++) {\n    Type actualType=actualTypeArgs[i];\n    TypeDefinition item=null;\n    Class<?> rawType=getRawClass(actualType);\n    if (isParameterizedType(actualType)) {\n      item=TypeDefinitionBuilder.build(actualType,rawType,typeCache);\n    }\n else     if (isClass(actualType)) {\n      item=TypeDefinitionBuilder.build(null,rawType,typeCache);\n    }\n    if (item != null) {\n      td.getItems().add(item.getType());\n    }\n  }\n  return td;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 37
      },
      "nodeContext" : "actualTypeArgsLength != 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "actualTypeArgsLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 79,
      "startColumnNumber" : 28,
      "endLineNumber" : 79,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 79,
        "startColumnNumber" : 24,
        "endLineNumber" : 79,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < actualTypeArgsLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < actualTypeArgsLength; i++) {\n  Type actualType=actualTypeArgs[i];\n  TypeDefinition item=null;\n  Class<?> rawType=getRawClass(actualType);\n  if (isParameterizedType(actualType)) {\n    item=TypeDefinitionBuilder.build(actualType,rawType,typeCache);\n  }\n else   if (isClass(actualType)) {\n    item=TypeDefinitionBuilder.build(null,rawType,typeCache);\n  }\n  if (item != null) {\n    td.getItems().add(item.getType());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 48,
        "startColumnNumber" : 98,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(type instanceof ParameterizedType)) {\n    return new TypeDefinition(clazz.getCanonicalName());\n  }\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] actualTypeArgs=parameterizedType.getActualTypeArguments();\n  int actualTypeArgsLength=actualTypeArgs == null ? 0 : actualTypeArgs.length;\n  if (actualTypeArgsLength != 2) {\n    throw new IllegalArgumentException(MessageFormat.format(\"[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}].\" + Arrays.toString(actualTypeArgs),type,actualTypeArgs));\n  }\n  String mapType=ClassUtils.getCanonicalNameForParameterizedType(parameterizedType);\n  mapType=replace(mapType,\", \",\",\");\n  TypeDefinition td=typeCache.get(mapType);\n  if (td != null) {\n    return td;\n  }\n  td=new TypeDefinition(mapType);\n  typeCache.put(mapType,td);\n  for (int i=0; i < actualTypeArgsLength; i++) {\n    Type actualType=actualTypeArgs[i];\n    TypeDefinition item=null;\n    Class<?> rawType=getRawClass(actualType);\n    if (isParameterizedType(actualType)) {\n      item=TypeDefinitionBuilder.build(actualType,rawType,typeCache);\n    }\n else     if (isClass(actualType)) {\n      item=TypeDefinitionBuilder.build(null,rawType,typeCache);\n    }\n    if (item != null) {\n      td.getItems().add(item.getType());\n    }\n  }\n  return td;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public TypeDefinition build(Type type,Class<?> clazz,Map<String,TypeDefinition> typeCache){\n  if (!(type instanceof ParameterizedType)) {\n    return new TypeDefinition(clazz.getCanonicalName());\n  }\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type[] actualTypeArgs=parameterizedType.getActualTypeArguments();\n  int actualTypeArgsLength=actualTypeArgs == null ? 0 : actualTypeArgs.length;\n  if (actualTypeArgsLength != 2) {\n    throw new IllegalArgumentException(MessageFormat.format(\"[ServiceDefinitionBuilder] Map type [{0}] with unexpected amount of arguments [{1}].\" + Arrays.toString(actualTypeArgs),type,actualTypeArgs));\n  }\n  String mapType=ClassUtils.getCanonicalNameForParameterizedType(parameterizedType);\n  mapType=replace(mapType,\", \",\",\");\n  TypeDefinition td=typeCache.get(mapType);\n  if (td != null) {\n    return td;\n  }\n  td=new TypeDefinition(mapType);\n  typeCache.put(mapType,td);\n  for (int i=0; i < actualTypeArgsLength; i++) {\n    Type actualType=actualTypeArgs[i];\n    TypeDefinition item=null;\n    Class<?> rawType=getRawClass(actualType);\n    if (isParameterizedType(actualType)) {\n      item=TypeDefinitionBuilder.build(actualType,rawType,typeCache);\n    }\n else     if (isClass(actualType)) {\n      item=TypeDefinitionBuilder.build(null,rawType,typeCache);\n    }\n    if (item != null) {\n      td.getItems().add(item.getType());\n    }\n  }\n  return td;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 79,
        "startColumnNumber" : 24,
        "endLineNumber" : 79,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < actualTypeArgsLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 57,
    "startColumnNumber" : 12,
    "endLineNumber" : 57,
    "endColumnNumber" : 32
  }, {
    "charLength" : 20,
    "startLineNumber" : 79,
    "startColumnNumber" : 28,
    "endLineNumber" : 79,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}