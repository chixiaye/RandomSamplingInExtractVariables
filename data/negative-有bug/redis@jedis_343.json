{
  "id" : 343,
  "expression" : "\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\"",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/modules/search/SearchTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 78,
      "startLineNumber" : 1140,
      "startColumnNumber" : 15,
      "endLineNumber" : 1140,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 1140,
        "startColumnNumber" : 4,
        "endLineNumber" : 1141,
        "endColumnNumber" : 111
      },
      "nodeContext" : "assertTrue(\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 1140,
        "startColumnNumber" : 4,
        "endLineNumber" : 1141,
        "endColumnNumber" : 112
      },
      "nodeContext" : "assertTrue(\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3879,
        "startLineNumber" : 1087,
        "startColumnNumber" : 59,
        "endLineNumber" : 1183,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,Object> attr=new HashMap<>();\n  attr.put(\"TYPE\",\"FLOAT32\");\n  attr.put(\"DIM\",2);\n  attr.put(\"DISTANCE_METRIC\",\"L2\");\n  Schema sc=new Schema().addFlatVectorField(\"v\",attr).addTagField(\"title\").addTextField(\"t1\",1.0).addTextField(\"t2\",1.0).addNumericField(\"num\");\n  assertEquals(\"OK\",client.ftCreate(index,IndexOptions.defaultOptions(),sc));\n  client.hset(\"1\",\"t1\",\"hello\");\n  String q=\"(*)\";\n  Query query=new Query(q).dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).dialect(2);\n  assertTrue(\"Should contain 'WILDCARD'\",client.ftExplain(index,query).contains(\"WILDCARD\"));\n  q=\"$hello\";\n  query=new Query(q).dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).dialect(2).addParam(\"hello\",\"hello\");\n  assertTrue(\"Should contain 'UNION {\\n  hello\\n  +hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"UNION {\\n  hello\\n  +hello(expanded)\\n}\\n\"));\n  q=\"@title:(@num:[0 10])\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain 'NUMERIC {0.000000 <= @num <= 10.000000}'\",client.ftExplain(index,query).contains(\"NUMERIC {0.000000 <= @num <= 10.000000}\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"@t1:@t2:@t3:hello\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"@title:{foo}}}}}\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain 'TAG:@title {\\n  foo\\n}\\n'\",client.ftExplain(index,query).contains(\"TAG:@title {\\n  foo\\n}\\n\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"*=>[KNN 10 @v $BLOB]\";\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").dialect(2);\n  assertTrue(\"Should contain '{K=10 nearest vector'\",client.ftExplain(index,query).contains(\"{K=10 nearest vector\"));\n  q=\"*=>[knn $K @vec_field $BLOB as score]\";\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").addParam(\"K\",\"10\").dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").addParam(\"K\",\"10\").dialect(2);\n  assertTrue(\"Should contain '{K=10 nearest vector'\",client.ftExplain(index,query).contains(\"{K=10 nearest vector\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 551,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3945,
        "startLineNumber" : 1086,
        "startColumnNumber" : 2,
        "endLineNumber" : 1183,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testDialectsWithFTExplain() throws Exception {\n  Map<String,Object> attr=new HashMap<>();\n  attr.put(\"TYPE\",\"FLOAT32\");\n  attr.put(\"DIM\",2);\n  attr.put(\"DISTANCE_METRIC\",\"L2\");\n  Schema sc=new Schema().addFlatVectorField(\"v\",attr).addTagField(\"title\").addTextField(\"t1\",1.0).addTextField(\"t2\",1.0).addNumericField(\"num\");\n  assertEquals(\"OK\",client.ftCreate(index,IndexOptions.defaultOptions(),sc));\n  client.hset(\"1\",\"t1\",\"hello\");\n  String q=\"(*)\";\n  Query query=new Query(q).dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).dialect(2);\n  assertTrue(\"Should contain 'WILDCARD'\",client.ftExplain(index,query).contains(\"WILDCARD\"));\n  q=\"$hello\";\n  query=new Query(q).dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).dialect(2).addParam(\"hello\",\"hello\");\n  assertTrue(\"Should contain 'UNION {\\n  hello\\n  +hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"UNION {\\n  hello\\n  +hello(expanded)\\n}\\n\"));\n  q=\"@title:(@num:[0 10])\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain 'NUMERIC {0.000000 <= @num <= 10.000000}'\",client.ftExplain(index,query).contains(\"NUMERIC {0.000000 <= @num <= 10.000000}\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"@t1:@t2:@t3:hello\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"@title:{foo}}}}}\";\n  query=new Query(q).dialect(1);\n  assertTrue(\"Should contain 'TAG:@title {\\n  foo\\n}\\n'\",client.ftExplain(index,query).contains(\"TAG:@title {\\n  foo\\n}\\n\"));\n  query=new Query(q).dialect(2);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  q=\"*=>[KNN 10 @v $BLOB]\";\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").dialect(2);\n  assertTrue(\"Should contain '{K=10 nearest vector'\",client.ftExplain(index,query).contains(\"{K=10 nearest vector\"));\n  q=\"*=>[knn $K @vec_field $BLOB as score]\";\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").addParam(\"K\",\"10\").dialect(1);\n  try {\n    client.ftExplain(index,query);\n    fail();\n  }\n catch (  JedisDataException e) {\n    assertTrue(\"Should contain 'Syntax error'\",e.getMessage().contains(\"Syntax error\"));\n  }\n  query=new Query(q).addParam(\"BLOB\",\"aaaa\").addParam(\"K\",\"10\").dialect(2);\n  assertTrue(\"Should contain '{K=10 nearest vector'\",client.ftExplain(index,query).contains(\"{K=10 nearest vector\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 1140,
        "startColumnNumber" : 4,
        "endLineNumber" : 1141,
        "endColumnNumber" : 111
      },
      "nodeContext" : "assertTrue(\"Should contain '@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n'\",client.ftExplain(index,query).contains(\"@NULL:UNION {\\n  @NULL:hello\\n  @NULL:+hello(expanded)\\n}\\n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 13,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 78,
    "startLineNumber" : 1140,
    "startColumnNumber" : 15,
    "endLineNumber" : 1140,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}