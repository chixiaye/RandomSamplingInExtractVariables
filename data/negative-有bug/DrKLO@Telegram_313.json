{
  "id" : 313,
  "expression" : "-1",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/messenger/video/AudioRecoder.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 119,
      "startColumnNumber" : 71,
      "endLineNumber" : 119,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 31,
        "endLineNumber" : 119,
        "endColumnNumber" : 73
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 119,
        "startColumnNumber" : 15,
        "endLineNumber" : 119,
        "endColumnNumber" : 73
      },
      "nodeContext" : "!decoderDone && pendingAudioDecoderOutputBufferIndex == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 994,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n  int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n  if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    break;\n  }\n  if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n    decoderOutputBuffers=decoder.getOutputBuffers();\n    break;\n  }\n  if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n    break;\n  }\n  if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n    decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n    break;\n  }\n  pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n  break;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5592,
        "startLineNumber" : 77,
        "startColumnNumber" : 80,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5668,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean step(MP4Builder muxer,int audioTrackIndex) throws Exception {\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 456,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 119,
        "startColumnNumber" : 15,
        "endLineNumber" : 119,
        "endColumnNumber" : 73
      },
      "nodeContext" : "!decoderDone && pendingAudioDecoderOutputBufferIndex == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 145,
      "startColumnNumber" : 55,
      "endLineNumber" : 145,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 145,
        "startColumnNumber" : 15,
        "endLineNumber" : 145,
        "endColumnNumber" : 57
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1546,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (pendingAudioDecoderOutputBufferIndex != -1) {\n  int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    break;\n  }\n  ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n  int size=decoderOutputBufferInfo.size;\n  long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n  if (size >= 0) {\n    ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n    decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n    decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n    encoderInputBuffer.position(0);\n    encoderInputBuffer.put(decoderOutputBuffer);\n    encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n  }\n  decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n  pendingAudioDecoderOutputBufferIndex=-1;\n  if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    decoderDone=true;\n  }\n  break;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 124,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5592,
        "startLineNumber" : 77,
        "startColumnNumber" : 80,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5668,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean step(MP4Builder muxer,int audioTrackIndex) throws Exception {\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 456,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 145,
        "startColumnNumber" : 15,
        "endLineNumber" : 145,
        "endColumnNumber" : 57
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 170,
      "startColumnNumber" : 51,
      "endLineNumber" : 170,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 53
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex=-1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1495,
        "startLineNumber" : 145,
        "startColumnNumber" : 59,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    break;\n  }\n  ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n  int size=decoderOutputBufferInfo.size;\n  long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n  if (size >= 0) {\n    ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n    decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n    decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n    encoderInputBuffer.position(0);\n    encoderInputBuffer.put(decoderOutputBuffer);\n    encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n  }\n  decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n  pendingAudioDecoderOutputBufferIndex=-1;\n  if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    decoderDone=true;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1546,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (pendingAudioDecoderOutputBufferIndex != -1) {\n  int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    break;\n  }\n  ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n  int size=decoderOutputBufferInfo.size;\n  long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n  if (size >= 0) {\n    ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n    decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n    decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n    encoderInputBuffer.position(0);\n    encoderInputBuffer.put(decoderOutputBuffer);\n    encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n  }\n  decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n  pendingAudioDecoderOutputBufferIndex=-1;\n  if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    decoderDone=true;\n  }\n  break;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 124,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5592,
        "startLineNumber" : 77,
        "startColumnNumber" : 80,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5668,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean step(MP4Builder muxer,int audioTrackIndex) throws Exception {\n  while (!extractorDone) {\n    int decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer decoderInputBuffer;\n    if (android.os.Build.VERSION.SDK_INT >= 21) {\n      decoderInputBuffer=decoder.getInputBuffer(decoderInputBufferIndex);\n    }\n else {\n      decoderInputBuffer=decoderInputBuffers[decoderInputBufferIndex];\n    }\n    int size=extractor.readSampleData(decoderInputBuffer,0);\n    long presentationTime=extractor.getSampleTime();\n    if (endTime > 0 && presentationTime >= endTime) {\n      encoderDone=true;\n      decoderOutputBufferInfo.flags|=MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n    }\n    if (size >= 0) {\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,size,extractor.getSampleTime(),extractor.getSampleFlags());\n    }\n    extractorDone=!extractor.advance();\n    if (extractorDone) {\n      decoderInputBufferIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      decoder.queueInputBuffer(decoderInputBufferIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n    break;\n  }\n  while (!decoderDone && pendingAudioDecoderOutputBufferIndex == -1) {\n    int decoderOutputBufferIndex=decoder.dequeueOutputBuffer(decoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      decoderOutputBuffers=decoder.getOutputBuffers();\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      decoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    pendingAudioDecoderOutputBufferIndex=decoderOutputBufferIndex;\n    break;\n  }\n  while (pendingAudioDecoderOutputBufferIndex != -1) {\n    int encoderInputBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (encoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    ByteBuffer encoderInputBuffer=encoderInputBuffers[encoderInputBufferIndex];\n    int size=decoderOutputBufferInfo.size;\n    long presentationTime=decoderOutputBufferInfo.presentationTimeUs;\n    if (size >= 0) {\n      ByteBuffer decoderOutputBuffer=decoderOutputBuffers[pendingAudioDecoderOutputBufferIndex].duplicate();\n      decoderOutputBuffer.position(decoderOutputBufferInfo.offset);\n      decoderOutputBuffer.limit(decoderOutputBufferInfo.offset + size);\n      encoderInputBuffer.position(0);\n      encoderInputBuffer.put(decoderOutputBuffer);\n      encoder.queueInputBuffer(encoderInputBufferIndex,0,size,presentationTime,decoderOutputBufferInfo.flags);\n    }\n    decoder.releaseOutputBuffer(pendingAudioDecoderOutputBufferIndex,false);\n    pendingAudioDecoderOutputBufferIndex=-1;\n    if ((decoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      decoderDone=true;\n    }\n    break;\n  }\n  while (!encoderDone) {\n    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      encoderOutputBuffers=encoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      break;\n    }\n    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (encoderOutputBufferInfo.size != 0) {\n      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);\n    }\n    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      encoderDone=true;\n    }\n    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  return encoderDone;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 456,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pendingAudioDecoderOutputBufferIndex=-1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 119,
    "startColumnNumber" : 71,
    "endLineNumber" : 119,
    "endColumnNumber" : 73
  }, {
    "charLength" : 2,
    "startLineNumber" : 145,
    "startColumnNumber" : 55,
    "endLineNumber" : 145,
    "endColumnNumber" : 57
  }, {
    "charLength" : 2,
    "startLineNumber" : 170,
    "startColumnNumber" : 51,
    "endLineNumber" : 170,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}