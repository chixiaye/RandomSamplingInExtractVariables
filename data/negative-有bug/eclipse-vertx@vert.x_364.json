{
  "id" : 364,
  "expression" : "useAlpn",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/NetTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "useAlpn",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 340,
      "startColumnNumber" : 23,
      "endLineNumber" : 340,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 340,
        "startColumnNumber" : 4,
        "endLineNumber" : 340,
        "endColumnNumber" : 31
      },
      "nodeContext" : "options.setUseAlpn(useAlpn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 340,
        "startColumnNumber" : 4,
        "endLineNumber" : 340,
        "endColumnNumber" : 32
      },
      "nodeContext" : "options.setUseAlpn(useAlpn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3891,
        "startLineNumber" : 293,
        "startColumnNumber" : 38,
        "endLineNumber" : 369,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NetClientOptions options=new NetClientOptions();\n  int sendBufferSize=TestUtils.randomPositiveInt();\n  int receiverBufferSize=TestUtils.randomPortInt();\n  Random rand=new Random();\n  boolean reuseAddress=rand.nextBoolean();\n  int trafficClass=TestUtils.randomByte() + 128;\n  boolean tcpNoDelay=rand.nextBoolean();\n  boolean tcpKeepAlive=rand.nextBoolean();\n  int soLinger=TestUtils.randomPositiveInt();\n  boolean usePooledBuffers=rand.nextBoolean();\n  int idleTimeout=TestUtils.randomPositiveInt();\n  boolean ssl=rand.nextBoolean();\n  JksOptions keyStoreOptions=new JksOptions();\n  String ksPassword=TestUtils.randomAlphaString(100);\n  keyStoreOptions.setPassword(ksPassword);\n  JksOptions trustStoreOptions=new JksOptions();\n  String tsPassword=TestUtils.randomAlphaString(100);\n  trustStoreOptions.setPassword(tsPassword);\n  String enabledCipher=TestUtils.randomAlphaString(100);\n  int connectTimeout=TestUtils.randomPositiveInt();\n  boolean trustAll=rand.nextBoolean();\n  String crlPath=TestUtils.randomUnicodeString(100);\n  Buffer crlValue=TestUtils.randomBuffer(100);\n  int reconnectAttempts=TestUtils.randomPositiveInt();\n  long reconnectInterval=TestUtils.randomPositiveInt();\n  boolean useAlpn=TestUtils.randomBoolean();\n  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;\n  options.setSendBufferSize(sendBufferSize);\n  options.setReceiveBufferSize(receiverBufferSize);\n  options.setReuseAddress(reuseAddress);\n  options.setTrafficClass(trafficClass);\n  options.setSsl(ssl);\n  options.setTcpNoDelay(tcpNoDelay);\n  options.setTcpKeepAlive(tcpKeepAlive);\n  options.setSoLinger(soLinger);\n  options.setUsePooledBuffers(usePooledBuffers);\n  options.setIdleTimeout(idleTimeout);\n  options.setKeyStoreOptions(keyStoreOptions);\n  options.setTrustStoreOptions(trustStoreOptions);\n  options.addEnabledCipherSuite(enabledCipher);\n  options.setConnectTimeout(connectTimeout);\n  options.setTrustAll(trustAll);\n  options.addCrlPath(crlPath);\n  options.addCrlValue(crlValue);\n  options.setReconnectAttempts(reconnectAttempts);\n  options.setReconnectInterval(reconnectInterval);\n  options.setUseAlpn(useAlpn);\n  options.setSslEngine(sslEngine);\n  NetClientOptions copy=new NetClientOptions(options);\n  assertEquals(sendBufferSize,copy.getSendBufferSize());\n  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());\n  assertEquals(reuseAddress,copy.isReuseAddress());\n  assertEquals(trafficClass,copy.getTrafficClass());\n  assertEquals(tcpNoDelay,copy.isTcpNoDelay());\n  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());\n  assertEquals(soLinger,copy.getSoLinger());\n  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());\n  assertEquals(idleTimeout,copy.getIdleTimeout());\n  assertEquals(ssl,copy.isSsl());\n  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());\n  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());\n  assertNotSame(trustStoreOptions,copy.getTrustOptions());\n  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());\n  assertEquals(1,copy.getEnabledCipherSuites().size());\n  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));\n  assertEquals(connectTimeout,copy.getConnectTimeout());\n  assertEquals(trustAll,copy.isTrustAll());\n  assertEquals(1,copy.getCrlPaths().size());\n  assertEquals(crlPath,copy.getCrlPaths().get(0));\n  assertEquals(1,copy.getCrlValues().size());\n  assertEquals(crlValue,copy.getCrlValues().get(0));\n  assertEquals(reconnectAttempts,copy.getReconnectAttempts());\n  assertEquals(reconnectInterval,copy.getReconnectInterval());\n  assertEquals(useAlpn,copy.isUseAlpn());\n  assertEquals(sslEngine,copy.getSslEngine());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3935,
        "startLineNumber" : 292,
        "startColumnNumber" : 2,
        "endLineNumber" : 369,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testCopyClientOptions(){\n  NetClientOptions options=new NetClientOptions();\n  int sendBufferSize=TestUtils.randomPositiveInt();\n  int receiverBufferSize=TestUtils.randomPortInt();\n  Random rand=new Random();\n  boolean reuseAddress=rand.nextBoolean();\n  int trafficClass=TestUtils.randomByte() + 128;\n  boolean tcpNoDelay=rand.nextBoolean();\n  boolean tcpKeepAlive=rand.nextBoolean();\n  int soLinger=TestUtils.randomPositiveInt();\n  boolean usePooledBuffers=rand.nextBoolean();\n  int idleTimeout=TestUtils.randomPositiveInt();\n  boolean ssl=rand.nextBoolean();\n  JksOptions keyStoreOptions=new JksOptions();\n  String ksPassword=TestUtils.randomAlphaString(100);\n  keyStoreOptions.setPassword(ksPassword);\n  JksOptions trustStoreOptions=new JksOptions();\n  String tsPassword=TestUtils.randomAlphaString(100);\n  trustStoreOptions.setPassword(tsPassword);\n  String enabledCipher=TestUtils.randomAlphaString(100);\n  int connectTimeout=TestUtils.randomPositiveInt();\n  boolean trustAll=rand.nextBoolean();\n  String crlPath=TestUtils.randomUnicodeString(100);\n  Buffer crlValue=TestUtils.randomBuffer(100);\n  int reconnectAttempts=TestUtils.randomPositiveInt();\n  long reconnectInterval=TestUtils.randomPositiveInt();\n  boolean useAlpn=TestUtils.randomBoolean();\n  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;\n  options.setSendBufferSize(sendBufferSize);\n  options.setReceiveBufferSize(receiverBufferSize);\n  options.setReuseAddress(reuseAddress);\n  options.setTrafficClass(trafficClass);\n  options.setSsl(ssl);\n  options.setTcpNoDelay(tcpNoDelay);\n  options.setTcpKeepAlive(tcpKeepAlive);\n  options.setSoLinger(soLinger);\n  options.setUsePooledBuffers(usePooledBuffers);\n  options.setIdleTimeout(idleTimeout);\n  options.setKeyStoreOptions(keyStoreOptions);\n  options.setTrustStoreOptions(trustStoreOptions);\n  options.addEnabledCipherSuite(enabledCipher);\n  options.setConnectTimeout(connectTimeout);\n  options.setTrustAll(trustAll);\n  options.addCrlPath(crlPath);\n  options.addCrlValue(crlValue);\n  options.setReconnectAttempts(reconnectAttempts);\n  options.setReconnectInterval(reconnectInterval);\n  options.setUseAlpn(useAlpn);\n  options.setSslEngine(sslEngine);\n  NetClientOptions copy=new NetClientOptions(options);\n  assertEquals(sendBufferSize,copy.getSendBufferSize());\n  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());\n  assertEquals(reuseAddress,copy.isReuseAddress());\n  assertEquals(trafficClass,copy.getTrafficClass());\n  assertEquals(tcpNoDelay,copy.isTcpNoDelay());\n  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());\n  assertEquals(soLinger,copy.getSoLinger());\n  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());\n  assertEquals(idleTimeout,copy.getIdleTimeout());\n  assertEquals(ssl,copy.isSsl());\n  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());\n  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());\n  assertNotSame(trustStoreOptions,copy.getTrustOptions());\n  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());\n  assertEquals(1,copy.getEnabledCipherSuites().size());\n  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));\n  assertEquals(connectTimeout,copy.getConnectTimeout());\n  assertEquals(trustAll,copy.isTrustAll());\n  assertEquals(1,copy.getCrlPaths().size());\n  assertEquals(crlPath,copy.getCrlPaths().get(0));\n  assertEquals(1,copy.getCrlValues().size());\n  assertEquals(crlValue,copy.getCrlValues().get(0));\n  assertEquals(reconnectAttempts,copy.getReconnectAttempts());\n  assertEquals(reconnectInterval,copy.getReconnectInterval());\n  assertEquals(useAlpn,copy.isUseAlpn());\n  assertEquals(sslEngine,copy.getSslEngine());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 538,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 340,
        "startColumnNumber" : 4,
        "endLineNumber" : 340,
        "endColumnNumber" : 32
      },
      "nodeContext" : "options.setUseAlpn(useAlpn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "useAlpn",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 367,
      "startColumnNumber" : 17,
      "endLineNumber" : 367,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 367,
        "startColumnNumber" : 4,
        "endLineNumber" : 367,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertEquals(useAlpn,copy.isUseAlpn())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 367,
        "startColumnNumber" : 4,
        "endLineNumber" : 367,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(useAlpn,copy.isUseAlpn());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3891,
        "startLineNumber" : 293,
        "startColumnNumber" : 38,
        "endLineNumber" : 369,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  NetClientOptions options=new NetClientOptions();\n  int sendBufferSize=TestUtils.randomPositiveInt();\n  int receiverBufferSize=TestUtils.randomPortInt();\n  Random rand=new Random();\n  boolean reuseAddress=rand.nextBoolean();\n  int trafficClass=TestUtils.randomByte() + 128;\n  boolean tcpNoDelay=rand.nextBoolean();\n  boolean tcpKeepAlive=rand.nextBoolean();\n  int soLinger=TestUtils.randomPositiveInt();\n  boolean usePooledBuffers=rand.nextBoolean();\n  int idleTimeout=TestUtils.randomPositiveInt();\n  boolean ssl=rand.nextBoolean();\n  JksOptions keyStoreOptions=new JksOptions();\n  String ksPassword=TestUtils.randomAlphaString(100);\n  keyStoreOptions.setPassword(ksPassword);\n  JksOptions trustStoreOptions=new JksOptions();\n  String tsPassword=TestUtils.randomAlphaString(100);\n  trustStoreOptions.setPassword(tsPassword);\n  String enabledCipher=TestUtils.randomAlphaString(100);\n  int connectTimeout=TestUtils.randomPositiveInt();\n  boolean trustAll=rand.nextBoolean();\n  String crlPath=TestUtils.randomUnicodeString(100);\n  Buffer crlValue=TestUtils.randomBuffer(100);\n  int reconnectAttempts=TestUtils.randomPositiveInt();\n  long reconnectInterval=TestUtils.randomPositiveInt();\n  boolean useAlpn=TestUtils.randomBoolean();\n  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;\n  options.setSendBufferSize(sendBufferSize);\n  options.setReceiveBufferSize(receiverBufferSize);\n  options.setReuseAddress(reuseAddress);\n  options.setTrafficClass(trafficClass);\n  options.setSsl(ssl);\n  options.setTcpNoDelay(tcpNoDelay);\n  options.setTcpKeepAlive(tcpKeepAlive);\n  options.setSoLinger(soLinger);\n  options.setUsePooledBuffers(usePooledBuffers);\n  options.setIdleTimeout(idleTimeout);\n  options.setKeyStoreOptions(keyStoreOptions);\n  options.setTrustStoreOptions(trustStoreOptions);\n  options.addEnabledCipherSuite(enabledCipher);\n  options.setConnectTimeout(connectTimeout);\n  options.setTrustAll(trustAll);\n  options.addCrlPath(crlPath);\n  options.addCrlValue(crlValue);\n  options.setReconnectAttempts(reconnectAttempts);\n  options.setReconnectInterval(reconnectInterval);\n  options.setUseAlpn(useAlpn);\n  options.setSslEngine(sslEngine);\n  NetClientOptions copy=new NetClientOptions(options);\n  assertEquals(sendBufferSize,copy.getSendBufferSize());\n  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());\n  assertEquals(reuseAddress,copy.isReuseAddress());\n  assertEquals(trafficClass,copy.getTrafficClass());\n  assertEquals(tcpNoDelay,copy.isTcpNoDelay());\n  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());\n  assertEquals(soLinger,copy.getSoLinger());\n  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());\n  assertEquals(idleTimeout,copy.getIdleTimeout());\n  assertEquals(ssl,copy.isSsl());\n  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());\n  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());\n  assertNotSame(trustStoreOptions,copy.getTrustOptions());\n  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());\n  assertEquals(1,copy.getEnabledCipherSuites().size());\n  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));\n  assertEquals(connectTimeout,copy.getConnectTimeout());\n  assertEquals(trustAll,copy.isTrustAll());\n  assertEquals(1,copy.getCrlPaths().size());\n  assertEquals(crlPath,copy.getCrlPaths().get(0));\n  assertEquals(1,copy.getCrlValues().size());\n  assertEquals(crlValue,copy.getCrlValues().get(0));\n  assertEquals(reconnectAttempts,copy.getReconnectAttempts());\n  assertEquals(reconnectInterval,copy.getReconnectInterval());\n  assertEquals(useAlpn,copy.isUseAlpn());\n  assertEquals(sslEngine,copy.getSslEngine());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 532,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3935,
        "startLineNumber" : 292,
        "startColumnNumber" : 2,
        "endLineNumber" : 369,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testCopyClientOptions(){\n  NetClientOptions options=new NetClientOptions();\n  int sendBufferSize=TestUtils.randomPositiveInt();\n  int receiverBufferSize=TestUtils.randomPortInt();\n  Random rand=new Random();\n  boolean reuseAddress=rand.nextBoolean();\n  int trafficClass=TestUtils.randomByte() + 128;\n  boolean tcpNoDelay=rand.nextBoolean();\n  boolean tcpKeepAlive=rand.nextBoolean();\n  int soLinger=TestUtils.randomPositiveInt();\n  boolean usePooledBuffers=rand.nextBoolean();\n  int idleTimeout=TestUtils.randomPositiveInt();\n  boolean ssl=rand.nextBoolean();\n  JksOptions keyStoreOptions=new JksOptions();\n  String ksPassword=TestUtils.randomAlphaString(100);\n  keyStoreOptions.setPassword(ksPassword);\n  JksOptions trustStoreOptions=new JksOptions();\n  String tsPassword=TestUtils.randomAlphaString(100);\n  trustStoreOptions.setPassword(tsPassword);\n  String enabledCipher=TestUtils.randomAlphaString(100);\n  int connectTimeout=TestUtils.randomPositiveInt();\n  boolean trustAll=rand.nextBoolean();\n  String crlPath=TestUtils.randomUnicodeString(100);\n  Buffer crlValue=TestUtils.randomBuffer(100);\n  int reconnectAttempts=TestUtils.randomPositiveInt();\n  long reconnectInterval=TestUtils.randomPositiveInt();\n  boolean useAlpn=TestUtils.randomBoolean();\n  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;\n  options.setSendBufferSize(sendBufferSize);\n  options.setReceiveBufferSize(receiverBufferSize);\n  options.setReuseAddress(reuseAddress);\n  options.setTrafficClass(trafficClass);\n  options.setSsl(ssl);\n  options.setTcpNoDelay(tcpNoDelay);\n  options.setTcpKeepAlive(tcpKeepAlive);\n  options.setSoLinger(soLinger);\n  options.setUsePooledBuffers(usePooledBuffers);\n  options.setIdleTimeout(idleTimeout);\n  options.setKeyStoreOptions(keyStoreOptions);\n  options.setTrustStoreOptions(trustStoreOptions);\n  options.addEnabledCipherSuite(enabledCipher);\n  options.setConnectTimeout(connectTimeout);\n  options.setTrustAll(trustAll);\n  options.addCrlPath(crlPath);\n  options.addCrlValue(crlValue);\n  options.setReconnectAttempts(reconnectAttempts);\n  options.setReconnectInterval(reconnectInterval);\n  options.setUseAlpn(useAlpn);\n  options.setSslEngine(sslEngine);\n  NetClientOptions copy=new NetClientOptions(options);\n  assertEquals(sendBufferSize,copy.getSendBufferSize());\n  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());\n  assertEquals(reuseAddress,copy.isReuseAddress());\n  assertEquals(trafficClass,copy.getTrafficClass());\n  assertEquals(tcpNoDelay,copy.isTcpNoDelay());\n  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());\n  assertEquals(soLinger,copy.getSoLinger());\n  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());\n  assertEquals(idleTimeout,copy.getIdleTimeout());\n  assertEquals(ssl,copy.isSsl());\n  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());\n  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());\n  assertNotSame(trustStoreOptions,copy.getTrustOptions());\n  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());\n  assertEquals(1,copy.getEnabledCipherSuites().size());\n  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));\n  assertEquals(connectTimeout,copy.getConnectTimeout());\n  assertEquals(trustAll,copy.isTrustAll());\n  assertEquals(1,copy.getCrlPaths().size());\n  assertEquals(crlPath,copy.getCrlPaths().get(0));\n  assertEquals(1,copy.getCrlValues().size());\n  assertEquals(crlValue,copy.getCrlValues().get(0));\n  assertEquals(reconnectAttempts,copy.getReconnectAttempts());\n  assertEquals(reconnectInterval,copy.getReconnectInterval());\n  assertEquals(useAlpn,copy.isUseAlpn());\n  assertEquals(sslEngine,copy.getSslEngine());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 538,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 367,
        "startColumnNumber" : 4,
        "endLineNumber" : 367,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(useAlpn,copy.isUseAlpn());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 340,
    "startColumnNumber" : 23,
    "endLineNumber" : 340,
    "endColumnNumber" : 30
  }, {
    "charLength" : 7,
    "startLineNumber" : 367,
    "startColumnNumber" : 17,
    "endLineNumber" : 367,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}