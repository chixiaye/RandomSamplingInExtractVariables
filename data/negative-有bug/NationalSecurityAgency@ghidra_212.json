{
  "id" : 212,
  "expression" : "sections[i].getVirtualSize()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/dump/cmd/DumpPeShim.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sections[i].getVirtualSize()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 175,
      "startColumnNumber" : 18,
      "endLineNumber" : 175,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 46
      },
      "nodeContext" : "virtualSize=sections[i].getVirtualSize()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 47
      },
      "nodeContext" : "virtualSize=sections[i].getVirtualSize();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1958,
        "startLineNumber" : 164,
        "startColumnNumber" : 45,
        "endLineNumber" : 224,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (monitor.isCancelled()) {\n    return sectionToAddress;\n  }\n  addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n  address=space.getAddress(addr);\n  int rawDataSize=sections[i].getSizeOfRawData();\n  int rawDataPtr=sections[i].getPointerToRawData();\n  virtualSize=sections[i].getVirtualSize();\n  if (rawDataSize != 0 && rawDataPtr != 0) {\n    int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n    if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n      if (!ntHeader.checkRVA(dataSize)) {\n        Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n      }\n      String sectionName=sections[i].getReadableName();\n      if (sectionName.isBlank()) {\n        sectionName=\"SECTION.\" + i;\n      }\n      sectionToAddress.put(sections[i],address);\n      adjustBlock(address,virtualSize,sectionName);\n    }\n    if (rawDataSize == virtualSize) {\n      continue;\n    }\n else     if (rawDataSize > virtualSize) {\n      continue;\n    }\n    if (rawDataSize < 0) {\n      Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n      break;\n    }\n    virtualSize-=rawDataSize;\n    address=address.add(rawDataSize);\n  }\n  if (virtualSize == 0) {\n    Msg.error(this,\"Section[\" + i + \"] has size zero\");\n  }\n else {\n    int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n    if (dataSize > 0) {\n      sectionToAddress.put(sections[i],address);\n      adjustBlock(address,virtualSize,sections[i].getReadableName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2000,
        "startLineNumber" : 164,
        "startColumnNumber" : 3,
        "endLineNumber" : 224,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < sections.length; ++i) {\n  if (monitor.isCancelled()) {\n    return sectionToAddress;\n  }\n  addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n  address=space.getAddress(addr);\n  int rawDataSize=sections[i].getSizeOfRawData();\n  int rawDataPtr=sections[i].getPointerToRawData();\n  virtualSize=sections[i].getVirtualSize();\n  if (rawDataSize != 0 && rawDataPtr != 0) {\n    int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n    if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n      if (!ntHeader.checkRVA(dataSize)) {\n        Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n      }\n      String sectionName=sections[i].getReadableName();\n      if (sectionName.isBlank()) {\n        sectionName=\"SECTION.\" + i;\n      }\n      sectionToAddress.put(sections[i],address);\n      adjustBlock(address,virtualSize,sectionName);\n    }\n    if (rawDataSize == virtualSize) {\n      continue;\n    }\n else     if (rawDataSize > virtualSize) {\n      continue;\n    }\n    if (rawDataSize < 0) {\n      Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n      break;\n    }\n    virtualSize-=rawDataSize;\n    address=address.add(rawDataSize);\n  }\n  if (virtualSize == 0) {\n    Msg.error(this,\"Section[\" + i + \"] has size zero\");\n  }\n else {\n    int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n    if (dataSize > 0) {\n      sectionToAddress.put(sections[i],address);\n      adjustBlock(address,virtualSize,sections[i].getReadableName());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 268,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2011,
        "startLineNumber" : 163,
        "startColumnNumber" : 6,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < sections.length; ++i) {\n    if (monitor.isCancelled()) {\n      return sectionToAddress;\n    }\n    addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n    address=space.getAddress(addr);\n    int rawDataSize=sections[i].getSizeOfRawData();\n    int rawDataPtr=sections[i].getPointerToRawData();\n    virtualSize=sections[i].getVirtualSize();\n    if (rawDataSize != 0 && rawDataPtr != 0) {\n      int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n      if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n        if (!ntHeader.checkRVA(dataSize)) {\n          Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n        }\n        String sectionName=sections[i].getReadableName();\n        if (sectionName.isBlank()) {\n          sectionName=\"SECTION.\" + i;\n        }\n        sectionToAddress.put(sections[i],address);\n        adjustBlock(address,virtualSize,sectionName);\n      }\n      if (rawDataSize == virtualSize) {\n        continue;\n      }\n else       if (rawDataSize > virtualSize) {\n        continue;\n      }\n      if (rawDataSize < 0) {\n        Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n        break;\n      }\n      virtualSize-=rawDataSize;\n      address=address.add(rawDataSize);\n    }\n    if (virtualSize == 0) {\n      Msg.error(this,\"Section[\" + i + \"] has size zero\");\n    }\n else {\n      int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n      if (dataSize > 0) {\n        sectionToAddress.put(sections[i],address);\n        adjustBlock(address,virtualSize,sections[i].getReadableName());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  for (int i=0; i < sections.length; ++i) {\n    if (monitor.isCancelled()) {\n      return sectionToAddress;\n    }\n    addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n    address=space.getAddress(addr);\n    int rawDataSize=sections[i].getSizeOfRawData();\n    int rawDataPtr=sections[i].getPointerToRawData();\n    virtualSize=sections[i].getVirtualSize();\n    if (rawDataSize != 0 && rawDataPtr != 0) {\n      int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n      if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n        if (!ntHeader.checkRVA(dataSize)) {\n          Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n        }\n        String sectionName=sections[i].getReadableName();\n        if (sectionName.isBlank()) {\n          sectionName=\"SECTION.\" + i;\n        }\n        sectionToAddress.put(sections[i],address);\n        adjustBlock(address,virtualSize,sectionName);\n      }\n      if (rawDataSize == virtualSize) {\n        continue;\n      }\n else       if (rawDataSize > virtualSize) {\n        continue;\n      }\n      if (rawDataSize < 0) {\n        Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n        break;\n      }\n      virtualSize-=rawDataSize;\n      address=address.add(rawDataSize);\n    }\n    if (virtualSize == 0) {\n      Msg.error(this,\"Section[\" + i + \"] has size zero\");\n    }\n else {\n      int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n      if (dataSize > 0) {\n        sectionToAddress.put(sections[i],address);\n        adjustBlock(address,virtualSize,sections[i].getReadableName());\n      }\n    }\n  }\n}\n catch (IllegalStateException ise) {\n  if (optionalHeader.getFileAlignment() != optionalHeader.getSectionAlignment()) {\n    throw new IllegalStateException(ise);\n  }\n  Msg.warn(this,\"Section header processing aborted\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 296,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3189,
        "startLineNumber" : 135,
        "startColumnNumber" : 35,
        "endLineNumber" : 234,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AddressFactory af=prog.getAddressFactory();\n  AddressSpace space=af.getDefaultAddressSpace();\n  Map<SectionHeader,Address> sectionToAddress=new HashMap<>();\n  if (monitor.isCancelled()) {\n    return sectionToAddress;\n  }\n  monitor.setMessage(\"[\" + prog.getName() + \"]: processing memory blocks...\");\n  NTHeader ntHeader=pe.getNTHeader();\n  FileHeader fileHeader=ntHeader.getFileHeader();\n  OptionalHeader optionalHeader=ntHeader.getOptionalHeader();\n  SectionHeader[] sections=fileHeader.getSectionHeaders();\n  if (sections.length == 0) {\n    Msg.warn(this,\"No sections found\");\n  }\n  int virtualSize=(int)Math.min(getVirtualSize(pe,sections,space),fileBytes.getSize());\n  long addr=optionalHeader.getImageBase();\n  Address address=space.getAddress(addr);\n  adjustBlock(address,virtualSize,HEADERS);\n  try {\n    for (int i=0; i < sections.length; ++i) {\n      if (monitor.isCancelled()) {\n        return sectionToAddress;\n      }\n      addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n      address=space.getAddress(addr);\n      int rawDataSize=sections[i].getSizeOfRawData();\n      int rawDataPtr=sections[i].getPointerToRawData();\n      virtualSize=sections[i].getVirtualSize();\n      if (rawDataSize != 0 && rawDataPtr != 0) {\n        int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n        if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n          if (!ntHeader.checkRVA(dataSize)) {\n            Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n          }\n          String sectionName=sections[i].getReadableName();\n          if (sectionName.isBlank()) {\n            sectionName=\"SECTION.\" + i;\n          }\n          sectionToAddress.put(sections[i],address);\n          adjustBlock(address,virtualSize,sectionName);\n        }\n        if (rawDataSize == virtualSize) {\n          continue;\n        }\n else         if (rawDataSize > virtualSize) {\n          continue;\n        }\n        if (rawDataSize < 0) {\n          Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n          break;\n        }\n        virtualSize-=rawDataSize;\n        address=address.add(rawDataSize);\n      }\n      if (virtualSize == 0) {\n        Msg.error(this,\"Section[\" + i + \"] has size zero\");\n      }\n else {\n        int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n        if (dataSize > 0) {\n          sectionToAddress.put(sections[i],address);\n          adjustBlock(address,virtualSize,sections[i].getReadableName());\n        }\n      }\n    }\n  }\n catch (  IllegalStateException ise) {\n    if (optionalHeader.getFileAlignment() != optionalHeader.getSectionAlignment()) {\n      throw new IllegalStateException(ise);\n    }\n    Msg.warn(this,\"Section header processing aborted\");\n  }\n  return sectionToAddress;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3382,
        "startLineNumber" : 133,
        "startColumnNumber" : 1,
        "endLineNumber" : 234,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected Map<SectionHeader,Address> processMemoryBlocks(PortableExecutable pe,Program prog,FileBytes fileBytes,TaskMonitor monitor,MessageLog log) throws AddressOverflowException {\n  AddressFactory af=prog.getAddressFactory();\n  AddressSpace space=af.getDefaultAddressSpace();\n  Map<SectionHeader,Address> sectionToAddress=new HashMap<>();\n  if (monitor.isCancelled()) {\n    return sectionToAddress;\n  }\n  monitor.setMessage(\"[\" + prog.getName() + \"]: processing memory blocks...\");\n  NTHeader ntHeader=pe.getNTHeader();\n  FileHeader fileHeader=ntHeader.getFileHeader();\n  OptionalHeader optionalHeader=ntHeader.getOptionalHeader();\n  SectionHeader[] sections=fileHeader.getSectionHeaders();\n  if (sections.length == 0) {\n    Msg.warn(this,\"No sections found\");\n  }\n  int virtualSize=(int)Math.min(getVirtualSize(pe,sections,space),fileBytes.getSize());\n  long addr=optionalHeader.getImageBase();\n  Address address=space.getAddress(addr);\n  adjustBlock(address,virtualSize,HEADERS);\n  try {\n    for (int i=0; i < sections.length; ++i) {\n      if (monitor.isCancelled()) {\n        return sectionToAddress;\n      }\n      addr=sections[i].getVirtualAddress() + optionalHeader.getImageBase();\n      address=space.getAddress(addr);\n      int rawDataSize=sections[i].getSizeOfRawData();\n      int rawDataPtr=sections[i].getPointerToRawData();\n      virtualSize=sections[i].getVirtualSize();\n      if (rawDataSize != 0 && rawDataPtr != 0) {\n        int dataSize=((rawDataSize > virtualSize && virtualSize > 0) || rawDataSize < 0) ? virtualSize : rawDataSize;\n        if (ntHeader.checkRVA(dataSize) || (0 < dataSize && dataSize < pe.getFileLength())) {\n          if (!ntHeader.checkRVA(dataSize)) {\n            Msg.warn(this,\"OptionalHeader.SizeOfImage < size of \" + sections[i].getName() + \" section\");\n          }\n          String sectionName=sections[i].getReadableName();\n          if (sectionName.isBlank()) {\n            sectionName=\"SECTION.\" + i;\n          }\n          sectionToAddress.put(sections[i],address);\n          adjustBlock(address,virtualSize,sectionName);\n        }\n        if (rawDataSize == virtualSize) {\n          continue;\n        }\n else         if (rawDataSize > virtualSize) {\n          continue;\n        }\n        if (rawDataSize < 0) {\n          Msg.error(this,\"Section[\" + i + \"] has invalid size \"+ Integer.toHexString(rawDataSize)+ \" (\"+ Integer.toHexString(virtualSize)+ \")\");\n          break;\n        }\n        virtualSize-=rawDataSize;\n        address=address.add(rawDataSize);\n      }\n      if (virtualSize == 0) {\n        Msg.error(this,\"Section[\" + i + \"] has size zero\");\n      }\n else {\n        int dataSize=(virtualSize > 0 || rawDataSize < 0) ? virtualSize : 0;\n        if (dataSize > 0) {\n          sectionToAddress.put(sections[i],address);\n          adjustBlock(address,virtualSize,sections[i].getReadableName());\n        }\n      }\n    }\n  }\n catch (  IllegalStateException ise) {\n    if (optionalHeader.getFileAlignment() != optionalHeader.getSectionAlignment()) {\n      throw new IllegalStateException(ise);\n    }\n    Msg.warn(this,\"Section header processing aborted\");\n  }\n  return sectionToAddress;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 464,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 47
      },
      "nodeContext" : "virtualSize=sections[i].getVirtualSize();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 175,
    "startColumnNumber" : 18,
    "endLineNumber" : 175,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}