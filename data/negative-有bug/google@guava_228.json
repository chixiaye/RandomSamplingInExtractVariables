{
  "id" : 228,
  "expression" : "from == Bound.INCLUSIVE",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "from == Bound.INCLUSIVE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 412,
      "startColumnNumber" : 17,
      "endLineNumber" : 412,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 412,
        "startColumnNumber" : 17,
        "endLineNumber" : 412,
        "endColumnNumber" : 64
      },
      "nodeContext" : "from == Bound.INCLUSIVE && to == Bound.NO_BOUND",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 412,
        "startColumnNumber" : 13,
        "endLineNumber" : 418,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n  return set.tailSet(firstInclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n  return set.subSet(firstInclusive,lastExclusive);\n}\n else {\n  throw new IllegalArgumentException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 410,
        "startColumnNumber" : 6,
        "endLineNumber" : 418,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n  return set.headSet(lastExclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n  return set.tailSet(firstInclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n  return set.subSet(firstInclusive,lastExclusive);\n}\n else {\n  throw new IllegalArgumentException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 409,
        "startColumnNumber" : 83,
        "endLineNumber" : 419,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n    return set.headSet(lastExclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n    return set.tailSet(firstInclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n    return set.subSet(firstInclusive,lastExclusive);\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 408,
        "startColumnNumber" : 4,
        "endLineNumber" : 419,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Calls the smallest subSet overload that filters out the extreme values. \n */\nSortedSet<E> createSubSet(SortedSet<E> set,E firstExclusive,E lastExclusive){\n  if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n    return set.headSet(lastExclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n    return set.tailSet(firstInclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n    return set.subSet(firstInclusive,lastExclusive);\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 412,
        "startColumnNumber" : 17,
        "endLineNumber" : 412,
        "endColumnNumber" : 64
      },
      "nodeContext" : "from == Bound.INCLUSIVE && to == Bound.NO_BOUND",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "from == Bound.INCLUSIVE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 414,
      "startColumnNumber" : 17,
      "endLineNumber" : 414,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 414,
        "startColumnNumber" : 17,
        "endLineNumber" : 414,
        "endColumnNumber" : 65
      },
      "nodeContext" : "from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 414,
        "startColumnNumber" : 13,
        "endLineNumber" : 418,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n  return set.subSet(firstInclusive,lastExclusive);\n}\n else {\n  throw new IllegalArgumentException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 412,
        "startColumnNumber" : 13,
        "endLineNumber" : 418,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n  return set.tailSet(firstInclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n  return set.subSet(firstInclusive,lastExclusive);\n}\n else {\n  throw new IllegalArgumentException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 410,
        "startColumnNumber" : 6,
        "endLineNumber" : 418,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n  return set.headSet(lastExclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n  return set.tailSet(firstInclusive);\n}\n else if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n  return set.subSet(firstInclusive,lastExclusive);\n}\n else {\n  throw new IllegalArgumentException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 409,
        "startColumnNumber" : 83,
        "endLineNumber" : 419,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n    return set.headSet(lastExclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n    return set.tailSet(firstInclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n    return set.subSet(firstInclusive,lastExclusive);\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 408,
        "startColumnNumber" : 4,
        "endLineNumber" : 419,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Calls the smallest subSet overload that filters out the extreme values. \n */\nSortedSet<E> createSubSet(SortedSet<E> set,E firstExclusive,E lastExclusive){\n  if (from == Bound.NO_BOUND && to == Bound.EXCLUSIVE) {\n    return set.headSet(lastExclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.NO_BOUND) {\n    return set.tailSet(firstInclusive);\n  }\n else   if (from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE) {\n    return set.subSet(firstInclusive,lastExclusive);\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 414,
        "startColumnNumber" : 17,
        "endLineNumber" : 414,
        "endColumnNumber" : 65
      },
      "nodeContext" : "from == Bound.INCLUSIVE && to == Bound.EXCLUSIVE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 412,
    "startColumnNumber" : 17,
    "endLineNumber" : 412,
    "endColumnNumber" : 40
  }, {
    "charLength" : 23,
    "startLineNumber" : 414,
    "startColumnNumber" : 17,
    "endLineNumber" : 414,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}