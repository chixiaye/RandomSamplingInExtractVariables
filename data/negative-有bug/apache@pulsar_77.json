{
  "id" : 77,
  "expression" : "0",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/jdbc/sqlite/src/test/java/org/apache/pulsar/io/jdbc/JdbcUtilsTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 88,
      "startColumnNumber" : 51,
      "endLineNumber" : 88,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 88,
        "startColumnNumber" : 28,
        "endLineNumber" : 88,
        "endColumnNumber" : 53
      },
      "nodeContext" : "table.getColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 88,
        "startColumnNumber" : 28,
        "endLineNumber" : 88,
        "endColumnNumber" : 63
      },
      "nodeContext" : "table.getColumns().get(0).getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 89,
      "startColumnNumber" : 51,
      "endLineNumber" : 89,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 89,
        "startColumnNumber" : 28,
        "endLineNumber" : 89,
        "endColumnNumber" : 53
      },
      "nodeContext" : "table.getColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 89,
        "startColumnNumber" : 28,
        "endLineNumber" : 89,
        "endColumnNumber" : 67
      },
      "nodeContext" : "table.getColumns().get(0).getTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 94,
      "startColumnNumber" : 54,
      "endLineNumber" : 94,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 56
      },
      "nodeContext" : "table.getKeyColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 66
      },
      "nodeContext" : "table.getKeyColumns().get(0).getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 95,
      "startColumnNumber" : 54,
      "endLineNumber" : 95,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 95,
        "endColumnNumber" : 56
      },
      "nodeContext" : "table.getKeyColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 95,
        "endColumnNumber" : 70
      },
      "nodeContext" : "table.getKeyColumns().get(0).getTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 98,
      "startColumnNumber" : 57,
      "endLineNumber" : 98,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 98,
        "startColumnNumber" : 28,
        "endLineNumber" : 98,
        "endColumnNumber" : 59
      },
      "nodeContext" : "table.getNonKeyColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 98,
        "startColumnNumber" : 28,
        "endLineNumber" : 98,
        "endColumnNumber" : 69
      },
      "nodeContext" : "table.getNonKeyColumns().get(0).getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 57,
      "endLineNumber" : 99,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 99,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 59
      },
      "nodeContext" : "table.getNonKeyColumns().get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 99,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 73
      },
      "nodeContext" : "table.getNonKeyColumns().get(0).getTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3429,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3485,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void TestGetTableId() throws Exception {\n  String tableName=\"TestGetTableId\";\n  sqliteUtils.createTable(\"CREATE TABLE \" + tableName + \"(\"+ \"    firstName  TEXT,\"+ \"    lastName  TEXT,\"+ \"    age INTEGER,\"+ \"    bool  NUMERIC,\"+ \"    byte  INTEGER,\"+ \"    short INTEGER NULL,\"+ \"    long INTEGER,\"+ \"    float NUMERIC,\"+ \"    double NUMERIC,\"+ \"    bytes BLOB, \"+ \"PRIMARY KEY (firstName, lastName));\");\n  Connection connection=sqliteUtils.getConnection();\n  log.info(\"verify getTableId\");\n  TableId id=JdbcUtils.getTableId(connection,tableName);\n  Assert.assertEquals(id.getTableName(),tableName);\n  log.info(\"verify getTableDefinition\");\n  List<String> keyList=Lists.newArrayList();\n  keyList.add(\"firstName\");\n  keyList.add(\"lastName\");\n  List<String> nonKeyList=Lists.newArrayList();\n  nonKeyList.add(\"age\");\n  nonKeyList.add(\"long\");\n  TableDefinition table=JdbcUtils.getTableDefinition(connection,id,keyList,nonKeyList);\n  Assert.assertEquals(table.getColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getColumns().get(2).getName(),\"age\");\n  Assert.assertEquals(table.getColumns().get(2).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getColumns().get(7).getName(),\"float\");\n  Assert.assertEquals(table.getColumns().get(7).getTypeName(),\"NUMERIC\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getName(),\"firstName\");\n  Assert.assertEquals(table.getKeyColumns().get(0).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getName(),\"lastName\");\n  Assert.assertEquals(table.getKeyColumns().get(1).getTypeName(),\"TEXT\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getName(),\"age\");\n  Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getName(),\"long\");\n  Assert.assertEquals(table.getNonKeyColumns().get(1).getTypeName(),\"INTEGER\");\n  log.info(\"verify buildInsertSql\");\n  String expctedInsertStatement=\"INSERT INTO \" + tableName + \"(firstName,lastName,age,bool,byte,short,long,float,double,bytes)\"+ \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\n  String insertStatement=JdbcUtils.buildInsertSql(table);\n  Assert.assertEquals(insertStatement,expctedInsertStatement);\n  log.info(\"verify buildUpdateSql\");\n  String expectedUpdateStatement=\"UPDATE \" + tableName + \" SET age=? ,long=?  WHERE firstName=? AND lastName=?\";\n  String updateStatement=JdbcUtils.buildUpdateSql(table);\n  Assert.assertEquals(updateStatement,expectedUpdateStatement);\n  log.info(\"verify buildDeleteSql\");\n  String expectedDeleteStatement=\"DELETE FROM \" + tableName + \" WHERE firstName=? AND lastName=?\";\n  String deleteStatement=JdbcUtils.buildDeleteSql(table);\n  Assert.assertEquals(deleteStatement,expectedDeleteStatement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(table.getNonKeyColumns().get(0).getTypeName(),\"INTEGER\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 88,
    "startColumnNumber" : 51,
    "endLineNumber" : 88,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 89,
    "startColumnNumber" : 51,
    "endLineNumber" : 89,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 94,
    "startColumnNumber" : 54,
    "endLineNumber" : 94,
    "endColumnNumber" : 55
  }, {
    "charLength" : 1,
    "startLineNumber" : 95,
    "startColumnNumber" : 54,
    "endLineNumber" : 95,
    "endColumnNumber" : 55
  }, {
    "charLength" : 1,
    "startLineNumber" : 98,
    "startColumnNumber" : 57,
    "endLineNumber" : 98,
    "endColumnNumber" : 58
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 57,
    "endLineNumber" : 99,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}