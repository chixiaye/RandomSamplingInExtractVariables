{
  "id" : 504,
  "expression" : "consumer == null",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/devtools/Connection.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumer == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 201,
      "startColumnNumber" : 10,
      "endLineNumber" : 201,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (consumer == null) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 199,
        "startColumnNumber" : 70,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Consumer<JsonInput> consumer=methodCallbacks.remove(((Number)raw.get(\"id\")).longValue());\n  if (consumer == null) {\n    return;\n  }\n  try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n    input.beginObject();\n    while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"result\":        consumer.accept(input);\n      break;\ndefault:    input.skipValue();\n}\n}\ninput.endObject();\n}\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2568,
        "startLineNumber" : 199,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (raw.get(\"id\") instanceof Number && raw.get(\"result\") != null) {\n  Consumer<JsonInput> consumer=methodCallbacks.remove(((Number)raw.get(\"id\")).longValue());\n  if (consumer == null) {\n    return;\n  }\n  try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n    input.beginObject();\n    while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"result\":        consumer.accept(input);\n      break;\ndefault:    input.skipValue();\n}\n}\ninput.endObject();\n}\n }\n else if (raw.get(\"method\") instanceof String && raw.get(\"params\") instanceof Map) {\nLOG.log(getDebugLogLevel(),String.format(\"Method %s called with %d callbacks available\",raw.get(\"method\"),eventCallbacks.keySet().size()));\nsynchronized (eventCallbacks) {\neventCallbacks.keySet().stream().peek(event -> LOG.log(getDebugLogLevel(),String.format(\"Matching %s with %s\",raw.get(\"method\"),event.getMethod()))).filter(event -> raw.get(\"method\").equals(event.getMethod())).forEach(event -> {\ntry (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n  Object value=null;\n  input.beginObject();\n  while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"params\":      value=event.getMapper().apply(input);\n    break;\ndefault:  input.skipValue();\nbreak;\n}\n}\ninput.endObject();\nif (value == null) {\nreturn;\n}\nfinal Object finalValue=value;\nfor (Consumer<?> action : eventCallbacks.get(event)) {\n@SuppressWarnings(\"unchecked\") Consumer<Object> obj=(Consumer<Object>)action;\nLOG.log(getDebugLogLevel(),String.format(\"Calling callback for %s using %s being passed %s\",event,obj,finalValue));\nobj.accept(finalValue);\n}\n}\n }\n);\n}\n}\n else {\nLOG.warning(\"Unhandled type: \" + data);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 309,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2927,
        "startLineNumber" : 190,
        "startColumnNumber" : 41,
        "endLineNumber" : 270,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String asString=String.valueOf(data);\n  LOG.log(getDebugLogLevel(),() -> String.format(\"<- %s\",asString));\n  Map<String,Object> raw=JSON.toType(asString,MAP_TYPE);\n  if (raw.get(\"id\") instanceof Number && raw.get(\"result\") != null) {\n    Consumer<JsonInput> consumer=methodCallbacks.remove(((Number)raw.get(\"id\")).longValue());\n    if (consumer == null) {\n      return;\n    }\n    try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n      input.beginObject();\n      while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"result\":          consumer.accept(input);\n        break;\ndefault:      input.skipValue();\n  }\n}\ninput.endObject();\n}\n }\n else if (raw.get(\"method\") instanceof String && raw.get(\"params\") instanceof Map) {\nLOG.log(getDebugLogLevel(),String.format(\"Method %s called with %d callbacks available\",raw.get(\"method\"),eventCallbacks.keySet().size()));\nsynchronized (eventCallbacks) {\neventCallbacks.keySet().stream().peek(event -> LOG.log(getDebugLogLevel(),String.format(\"Matching %s with %s\",raw.get(\"method\"),event.getMethod()))).filter(event -> raw.get(\"method\").equals(event.getMethod())).forEach(event -> {\n  try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n    Object value=null;\n    input.beginObject();\n    while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"params\":        value=event.getMapper().apply(input);\n      break;\ndefault:    input.skipValue();\n  break;\n}\n}\ninput.endObject();\nif (value == null) {\nreturn;\n}\nfinal Object finalValue=value;\nfor (Consumer<?> action : eventCallbacks.get(event)) {\n@SuppressWarnings(\"unchecked\") Consumer<Object> obj=(Consumer<Object>)action;\nLOG.log(getDebugLogLevel(),String.format(\"Calling callback for %s using %s being passed %s\",event,obj,finalValue));\nobj.accept(finalValue);\n}\n}\n }\n);\n}\n}\n else {\nLOG.warning(\"Unhandled type: \" + data);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2966,
        "startLineNumber" : 190,
        "startColumnNumber" : 2,
        "endLineNumber" : 270,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void handle(CharSequence data){\n  String asString=String.valueOf(data);\n  LOG.log(getDebugLogLevel(),() -> String.format(\"<- %s\",asString));\n  Map<String,Object> raw=JSON.toType(asString,MAP_TYPE);\n  if (raw.get(\"id\") instanceof Number && raw.get(\"result\") != null) {\n    Consumer<JsonInput> consumer=methodCallbacks.remove(((Number)raw.get(\"id\")).longValue());\n    if (consumer == null) {\n      return;\n    }\n    try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n      input.beginObject();\n      while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"result\":          consumer.accept(input);\n        break;\ndefault:      input.skipValue();\n  }\n}\ninput.endObject();\n}\n }\n else if (raw.get(\"method\") instanceof String && raw.get(\"params\") instanceof Map) {\nLOG.log(getDebugLogLevel(),String.format(\"Method %s called with %d callbacks available\",raw.get(\"method\"),eventCallbacks.keySet().size()));\nsynchronized (eventCallbacks) {\neventCallbacks.keySet().stream().peek(event -> LOG.log(getDebugLogLevel(),String.format(\"Matching %s with %s\",raw.get(\"method\"),event.getMethod()))).filter(event -> raw.get(\"method\").equals(event.getMethod())).forEach(event -> {\n  try (StringReader reader=new StringReader(asString);JsonInput input=JSON.newInput(reader)){\n    Object value=null;\n    input.beginObject();\n    while (input.hasNext()) {\nswitch (input.nextName()) {\ncase \"params\":        value=event.getMapper().apply(input);\n      break;\ndefault:    input.skipValue();\n  break;\n}\n}\ninput.endObject();\nif (value == null) {\nreturn;\n}\nfinal Object finalValue=value;\nfor (Consumer<?> action : eventCallbacks.get(event)) {\n@SuppressWarnings(\"unchecked\") Consumer<Object> obj=(Consumer<Object>)action;\nLOG.log(getDebugLogLevel(),String.format(\"Calling callback for %s using %s being passed %s\",event,obj,finalValue));\nobj.accept(finalValue);\n}\n}\n }\n);\n}\n}\n else {\nLOG.warning(\"Unhandled type: \" + data);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (consumer == null) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 201,
    "startColumnNumber" : 10,
    "endLineNumber" : 201,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}