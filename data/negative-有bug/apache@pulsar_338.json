{
  "id" : 338,
  "expression" : "pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/MessageIdTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 141,
      "startLineNumber" : 80,
      "startColumnNumber" : 36,
      "endLineNumber" : 83,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 11,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 80,
        "startColumnNumber" : 25,
        "endLineNumber" : 83,
        "endColumnNumber" : 28
      },
      "nodeContext" : "consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 62,
        "startColumnNumber" : 106,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String key=\"producerSendAsync-\" + topicType;\n  final String topicName=\"persistent://prop/cluster/namespace/topic-\" + key;\n  final String subscriptionName=\"my-subscription-\" + key;\n  final String messagePrefix=\"my-message-\" + key + \"-\";\n  final int numberOfMessages=30;\n  if (topicType == TopicType.PARTITIONED) {\n    int numberOfPartitions=3;\n    admin.topics().createPartitionedTopic(topicName,numberOfPartitions);\n  }\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe();\n  List<Future<MessageId>> futures=new ArrayList<>();\n  for (int i=0; i < numberOfMessages; i++) {\n    String message=messagePrefix + i;\n    futures.add(producer.sendAsync(message.getBytes()));\n  }\n  Set<MessageId> messageIds=new HashSet<>();\n  MessageIdImpl previousMessageId=null;\n  for (  Future<MessageId> f : futures) {\n    try {\n      MessageIdImpl currentMessageId=(MessageIdImpl)f.get();\n      if (previousMessageId != null) {\n        assertTrue(currentMessageId.compareTo(previousMessageId) > 0,\"Message Ids should be in ascending order\");\n      }\n      messageIds.add(currentMessageId);\n      previousMessageId=currentMessageId;\n    }\n catch (    Exception e) {\n      fail(\"Failed to publish message\",e);\n    }\n  }\n  log.info(\"Message IDs = {}\",messageIds);\n  assertEquals(messageIds.size(),numberOfMessages,\"Not all messages published successfully\");\n  for (int i=0; i < numberOfMessages; i++) {\n    Message<byte[]> message=consumer.receive();\n    assertEquals(new String(message.getData()),messagePrefix + i);\n    MessageId messageId=message.getMessageId();\n    if (topicType == TopicType.PARTITIONED) {\n      messageId=((TopicMessageIdImpl)messageId).getInnerMessageId();\n    }\n    assertTrue(messageIds.remove(messageId),\"Failed to receive message\");\n  }\n  log.info(\"Remaining message IDs = {}\",messageIds);\n  assertEquals(messageIds.size(),0,\"Not all messages received successfully\");\n  consumer.unsubscribe();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3201,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=10000,dataProviderClass=EnumValuesDataProvider.class,dataProvider=\"values\") public void producerSendAsync(TopicType topicType) throws PulsarClientException, PulsarAdminException {\n  String key=\"producerSendAsync-\" + topicType;\n  final String topicName=\"persistent://prop/cluster/namespace/topic-\" + key;\n  final String subscriptionName=\"my-subscription-\" + key;\n  final String messagePrefix=\"my-message-\" + key + \"-\";\n  final int numberOfMessages=30;\n  if (topicType == TopicType.PARTITIONED) {\n    int numberOfPartitions=3;\n    admin.topics().createPartitionedTopic(topicName,numberOfPartitions);\n  }\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe();\n  List<Future<MessageId>> futures=new ArrayList<>();\n  for (int i=0; i < numberOfMessages; i++) {\n    String message=messagePrefix + i;\n    futures.add(producer.sendAsync(message.getBytes()));\n  }\n  Set<MessageId> messageIds=new HashSet<>();\n  MessageIdImpl previousMessageId=null;\n  for (  Future<MessageId> f : futures) {\n    try {\n      MessageIdImpl currentMessageId=(MessageIdImpl)f.get();\n      if (previousMessageId != null) {\n        assertTrue(currentMessageId.compareTo(previousMessageId) > 0,\"Message Ids should be in ascending order\");\n      }\n      messageIds.add(currentMessageId);\n      previousMessageId=currentMessageId;\n    }\n catch (    Exception e) {\n      fail(\"Failed to publish message\",e);\n    }\n  }\n  log.info(\"Message IDs = {}\",messageIds);\n  assertEquals(messageIds.size(),numberOfMessages,\"Not all messages published successfully\");\n  for (int i=0; i < numberOfMessages; i++) {\n    Message<byte[]> message=consumer.receive();\n    assertEquals(new String(message.getData()),messagePrefix + i);\n    MessageId messageId=message.getMessageId();\n    if (topicType == TopicType.PARTITIONED) {\n      messageId=((TopicMessageIdImpl)messageId).getInnerMessageId();\n    }\n    assertTrue(messageIds.remove(messageId),\"Failed to receive message\");\n  }\n  log.info(\"Remaining message IDs = {}\",messageIds);\n  assertEquals(messageIds.size(),0,\"Not all messages received successfully\");\n  consumer.unsubscribe();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "org.apache.pulsar.client.api.Consumer<byte[]>"
  } ],
  "positionList" : [ {
    "charLength" : 141,
    "startLineNumber" : 80,
    "startColumnNumber" : 36,
    "endLineNumber" : 83,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}