{
  "id" : 431,
  "expression" : "new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\")",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 281,
      "startLineNumber" : 372,
      "startColumnNumber" : 42,
      "endLineNumber" : 375,
      "endColumnNumber" : 130
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 372,
        "startColumnNumber" : 36,
        "endLineNumber" : 375,
        "endColumnNumber" : 131
      },
      "nodeContext" : "throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 371,
        "startColumnNumber" : 164,
        "endLineNumber" : 376,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 370,
        "startColumnNumber" : 32,
        "endLineNumber" : 376,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n  throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 369,
        "startColumnNumber" : 64,
        "endLineNumber" : 377,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n    throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 667,
        "startLineNumber" : 369,
        "startColumnNumber" : 28,
        "endLineNumber" : 377,
        "endColumnNumber" : 29
      },
      "nodeContext" : "for (Expression sortKey : sortKeys) {\n  if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n    throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1115,
        "startLineNumber" : 362,
        "startColumnNumber" : 47,
        "endLineNumber" : 378,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n  for (  Expression sortKey : sortKeys) {\n    if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n      throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1138,
        "startLineNumber" : 362,
        "startColumnNumber" : 24,
        "endLineNumber" : 378,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (node.isDistinct()) {\n  List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n  for (  Expression sortKey : sortKeys) {\n    if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n      throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2022,
        "startLineNumber" : 358,
        "startColumnNumber" : 55,
        "endLineNumber" : 388,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n  if (node.isDistinct()) {\n    List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n    for (    Expression sortKey : sortKeys) {\n      if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n        throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n      }\n    }\n  }\n  if (orderByScope.isPresent()) {\n    for (    Expression sortKey : sortKeys) {\n      verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2057,
        "startLineNumber" : 358,
        "startColumnNumber" : 20,
        "endLineNumber" : 388,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (node.getOrderBy().isPresent()) {\n  List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n  if (node.isDistinct()) {\n    List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n    for (    Expression sortKey : sortKeys) {\n      if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n        throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n      }\n    }\n  }\n  if (orderByScope.isPresent()) {\n    for (    Expression sortKey : sortKeys) {\n      verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 137,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3742,
        "startLineNumber" : 338,
        "startColumnNumber" : 51,
        "endLineNumber" : 400,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n  List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n  if (!aggregateFunctions.isEmpty()) {\n    throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n  }\n  if (!windowFunctions.isEmpty()) {\n    throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n  }\n  if (node.getOrderBy().isPresent()) {\n    List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n    if (node.isDistinct()) {\n      List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n      for (      Expression sortKey : sortKeys) {\n        if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n          throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n        }\n      }\n    }\n    if (orderByScope.isPresent()) {\n      for (      Expression sortKey : sortKeys) {\n        verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n      }\n    }\n  }\n  if (orderByScope.isPresent()) {\n    node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3777,
        "startLineNumber" : 338,
        "startColumnNumber" : 16,
        "endLineNumber" : 400,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!node.getWindow().isPresent()) {\n  List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n  List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n  if (!aggregateFunctions.isEmpty()) {\n    throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n  }\n  if (!windowFunctions.isEmpty()) {\n    throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n  }\n  if (node.getOrderBy().isPresent()) {\n    List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n    if (node.isDistinct()) {\n      List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n      for (      Expression sortKey : sortKeys) {\n        if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n          throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n        }\n      }\n    }\n    if (orderByScope.isPresent()) {\n      for (      Expression sortKey : sortKeys) {\n        verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n      }\n    }\n  }\n  if (orderByScope.isPresent()) {\n    node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n  }\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 234,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4239,
        "startLineNumber" : 332,
        "startColumnNumber" : 139,
        "endLineNumber" : 401,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (functionResolution.isCountFunction(analysis.getFunctionHandle(node)) && node.isDistinct()) {\n    warningCollector.add(new PrestoWarning(PERFORMANCE_WARNING,\"COUNT(DISTINCT xxx) can be a very expensive operation when the cardinality is high for xxx. In most scenarios, using approx_distinct instead would be enough\"));\n  }\n  if (!node.getWindow().isPresent()) {\n    List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n    List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n    if (!aggregateFunctions.isEmpty()) {\n      throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n    }\n    if (!windowFunctions.isEmpty()) {\n      throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n    }\n    if (node.getOrderBy().isPresent()) {\n      List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n      if (node.isDistinct()) {\n        List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n        for (        Expression sortKey : sortKeys) {\n          if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n            throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n          }\n        }\n      }\n      if (orderByScope.isPresent()) {\n        for (        Expression sortKey : sortKeys) {\n          verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n        }\n      }\n    }\n    if (orderByScope.isPresent()) {\n      node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n    }\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4902,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 412,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (metadata.getFunctionAndTypeManager().getFunctionMetadata(analysis.getFunctionHandle(node)).getFunctionKind() == AGGREGATE) {\n  if (functionResolution.isCountFunction(analysis.getFunctionHandle(node)) && node.isDistinct()) {\n    warningCollector.add(new PrestoWarning(PERFORMANCE_WARNING,\"COUNT(DISTINCT xxx) can be a very expensive operation when the cardinality is high for xxx. In most scenarios, using approx_distinct instead would be enough\"));\n  }\n  if (!node.getWindow().isPresent()) {\n    List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n    List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n    if (!aggregateFunctions.isEmpty()) {\n      throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n    }\n    if (!windowFunctions.isEmpty()) {\n      throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n    }\n    if (node.getOrderBy().isPresent()) {\n      List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n      if (node.isDistinct()) {\n        List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n        for (        Expression sortKey : sortKeys) {\n          if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n            throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n          }\n        }\n      }\n      if (orderByScope.isPresent()) {\n        for (        Expression sortKey : sortKeys) {\n          verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n        }\n      }\n    }\n    if (orderByScope.isPresent()) {\n      node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n    }\n    return true;\n  }\n}\n else {\n  if (node.getFilter().isPresent()) {\n    throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"Filter is only valid for aggregation functions\",node);\n  }\n  if (node.getOrderBy().isPresent()) {\n    throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"ORDER BY is only valid for aggregation functions\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 301,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5167,
        "startLineNumber" : 331,
        "startColumnNumber" : 8,
        "endLineNumber" : 419,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (metadata.getFunctionAndTypeManager().getFunctionMetadata(analysis.getFunctionHandle(node)).getFunctionKind() == AGGREGATE) {\n    if (functionResolution.isCountFunction(analysis.getFunctionHandle(node)) && node.isDistinct()) {\n      warningCollector.add(new PrestoWarning(PERFORMANCE_WARNING,\"COUNT(DISTINCT xxx) can be a very expensive operation when the cardinality is high for xxx. In most scenarios, using approx_distinct instead would be enough\"));\n    }\n    if (!node.getWindow().isPresent()) {\n      List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n      List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n      if (!aggregateFunctions.isEmpty()) {\n        throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n      }\n      if (!windowFunctions.isEmpty()) {\n        throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n      }\n      if (node.getOrderBy().isPresent()) {\n        List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n        if (node.isDistinct()) {\n          List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n          for (          Expression sortKey : sortKeys) {\n            if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n              throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n            }\n          }\n        }\n        if (orderByScope.isPresent()) {\n          for (          Expression sortKey : sortKeys) {\n            verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n          }\n        }\n      }\n      if (orderByScope.isPresent()) {\n        node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n      }\n      return true;\n    }\n  }\n else {\n    if (node.getFilter().isPresent()) {\n      throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"Filter is only valid for aggregation functions\",node);\n    }\n    if (node.getOrderBy().isPresent()) {\n      throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"ORDER BY is only valid for aggregation functions\");\n    }\n  }\n  if (node.getWindow().isPresent() && !process(node.getWindow().get(),context)) {\n    return false;\n  }\n  return node.getArguments().stream().allMatch(expression -> process(expression,context));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5262,
        "startLineNumber" : 329,
        "startColumnNumber" : 8,
        "endLineNumber" : 419,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override protected Boolean visitFunctionCall(FunctionCall node,Void context){\n  if (metadata.getFunctionAndTypeManager().getFunctionMetadata(analysis.getFunctionHandle(node)).getFunctionKind() == AGGREGATE) {\n    if (functionResolution.isCountFunction(analysis.getFunctionHandle(node)) && node.isDistinct()) {\n      warningCollector.add(new PrestoWarning(PERFORMANCE_WARNING,\"COUNT(DISTINCT xxx) can be a very expensive operation when the cardinality is high for xxx. In most scenarios, using approx_distinct instead would be enough\"));\n    }\n    if (!node.getWindow().isPresent()) {\n      List<FunctionCall> aggregateFunctions=extractAggregateFunctions(analysis.getFunctionHandles(),node.getArguments(),metadata.getFunctionAndTypeManager());\n      List<FunctionCall> windowFunctions=extractWindowFunctions(node.getArguments());\n      if (!aggregateFunctions.isEmpty()) {\n        throw new SemanticException(NESTED_AGGREGATION,node,\"Cannot nest aggregations inside aggregation '%s': %s\",node.getName(),aggregateFunctions);\n      }\n      if (!windowFunctions.isEmpty()) {\n        throw new SemanticException(NESTED_WINDOW,node,\"Cannot nest window functions inside aggregation '%s': %s\",node.getName(),windowFunctions);\n      }\n      if (node.getOrderBy().isPresent()) {\n        List<Expression> sortKeys=node.getOrderBy().get().getSortItems().stream().map(SortItem::getSortKey).collect(toImmutableList());\n        if (node.isDistinct()) {\n          List<FieldId> fieldIds=node.getArguments().stream().map(NodeRef::of).map(columnReferences::get).filter(Objects::nonNull).flatMap(Collection::stream).collect(toImmutableList());\n          for (          Expression sortKey : sortKeys) {\n            if (!node.getArguments().contains(sortKey) && !(columnReferences.containsKey(NodeRef.of(sortKey)) && fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey))))) {\n              throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n            }\n          }\n        }\n        if (orderByScope.isPresent()) {\n          for (          Expression sortKey : sortKeys) {\n            verifyNoOrderByReferencesToOutputColumns(sortKey,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"ORDER BY clause in aggregation function must not reference query output columns\");\n          }\n        }\n      }\n      if (orderByScope.isPresent()) {\n        node.getArguments().stream().forEach(argument -> verifyNoOrderByReferencesToOutputColumns(argument,REFERENCE_TO_OUTPUT_ATTRIBUTE_WITHIN_ORDER_BY_AGGREGATION,\"Invalid reference to output projection attribute from ORDER BY aggregation\"));\n      }\n      return true;\n    }\n  }\n else {\n    if (node.getFilter().isPresent()) {\n      throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"Filter is only valid for aggregation functions\",node);\n    }\n    if (node.getOrderBy().isPresent()) {\n      throw new SemanticException(MUST_BE_AGGREGATION_FUNCTION,node,\"ORDER BY is only valid for aggregation functions\");\n    }\n  }\n  if (node.getWindow().isPresent() && !process(node.getWindow().get(),context)) {\n    return false;\n  }\n  return node.getArguments().stream().allMatch(expression -> process(expression,context));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 351,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 372,
        "startColumnNumber" : 36,
        "endLineNumber" : 375,
        "endColumnNumber" : 131
      },
      "nodeContext" : "throw new SemanticException(ORDER_BY_MUST_BE_IN_AGGREGATE,sortKey,\"For aggregate function with DISTINCT, ORDER BY expressions must appear in arguments\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 20,
    "type" : "com.facebook.presto.sql.analyzer.SemanticException"
  } ],
  "positionList" : [ {
    "charLength" : 281,
    "startLineNumber" : 372,
    "startColumnNumber" : 42,
    "endLineNumber" : 375,
    "endColumnNumber" : 130
  } ],
  "layoutRelationDataList" : [ ]
}