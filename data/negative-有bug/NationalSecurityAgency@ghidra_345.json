{
  "id" : 345,
  "expression" : "true",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/test/java/ghidra/util/PropertyFileTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 57,
      "startColumnNumber" : 35,
      "endLineNumber" : 57,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 40
      },
      "nodeContext" : "pf.putBoolean(\"TestBooleanTrue\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 41
      },
      "nodeContext" : "pf.putBoolean(\"TestBooleanTrue\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 45,
        "startColumnNumber" : 49,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testPropertyFile() throws Exception {\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 57,
        "endColumnNumber" : 41
      },
      "nodeContext" : "pf.putBoolean(\"TestBooleanTrue\",true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 79,
      "startColumnNumber" : 49,
      "endLineNumber" : 79,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 79,
        "startColumnNumber" : 14,
        "endLineNumber" : 79,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pf2.getBoolean(\"TestBooleanFalse\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 79,
        "startColumnNumber" : 13,
        "endLineNumber" : 79,
        "endColumnNumber" : 54
      },
      "nodeContext" : "!pf2.getBoolean(\"TestBooleanFalse\",true)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 45,
        "startColumnNumber" : 49,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testPropertyFile() throws Exception {\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 80,
      "startColumnNumber" : 46,
      "endLineNumber" : 80,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 80,
        "startColumnNumber" : 13,
        "endLineNumber" : 80,
        "endColumnNumber" : 51
      },
      "nodeContext" : "pf2.getBoolean(\"TestBooleanBad\",true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertTrue(pf2.getBoolean(\"TestBooleanBad\",true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 45,
        "startColumnNumber" : 49,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 85,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testPropertyFile() throws Exception {\n  String storageName=NamingUtilities.mangle(NAME);\n  File parent=createTempDirectory(getName());\n  PropertyFile pf=new PropertyFile(parent,storageName,\"/\",NAME);\n  assertEquals(storageName,pf.getStorageName());\n  assertEquals(NAME,pf.getName());\n  assertEquals(\"/\",pf.getParentPath());\n  assertEquals(\"/\" + NAME,pf.getPath());\n  pf.putBoolean(\"TestBooleanTrue\",true);\n  pf.putBoolean(\"TestBooleanFalse\",false);\n  pf.putInt(\"TestInt\",1234);\n  pf.putLong(\"TestLong\",0x12345678);\n  StringBuffer sb=new StringBuffer(\"Line1\\nLine2\\n\\\"Ugly\\\" & Special <Values>; \");\n  for (int i=1; i < 35; i++) {\n    sb.append((char)i);\n  }\n  for (int i=0x70; i <= 0x80; i++) {\n    sb.append((char)i);\n  }\n  String str=sb.toString();\n  pf.putString(\"TestString\",URLEncoder.encode(str,\"UTF-8\"));\n  pf.writeState();\n  PropertyFile pf2=new PropertyFile(parent,storageName,\"/\",NAME);\n  pf2.readState();\n  assertTrue(pf2.getBoolean(\"TestBooleanTrue\",false));\n  assertTrue(!pf2.getBoolean(\"TestBooleanFalse\",true));\n  assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n  assertEquals(1234,pf2.getInt(\"TestInt\",-1));\n  assertEquals(0x12345678,pf2.getLong(\"TestLong\",-1));\n  assertEquals(str,URLDecoder.decode(pf2.getString(\"TestString\",null),\"UTF-8\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertTrue(pf2.getBoolean(\"TestBooleanBad\",true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 57,
    "startColumnNumber" : 35,
    "endLineNumber" : 57,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 79,
    "startColumnNumber" : 49,
    "endLineNumber" : 79,
    "endColumnNumber" : 53
  }, {
    "charLength" : 4,
    "startLineNumber" : 80,
    "startColumnNumber" : 46,
    "endLineNumber" : 80,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}