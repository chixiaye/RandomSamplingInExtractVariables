{
  "id" : 246,
  "expression" : "BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/expressions/converter/OverConvertRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 132,
      "startLineNumber" : 186,
      "startColumnNumber" : 16,
      "endLineNumber" : 187,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n  SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n  return RexWindowBound.create(unbounded,null);\n}\n else if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n  SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n  return RexWindowBound.create(currentRow,null);\n}\n else {\n  throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 183,
        "startColumnNumber" : 45,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CallExpression callExpr=(CallExpression)bound;\n  FunctionDefinition func=callExpr.getFunctionDefinition();\n  if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n    SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n    return RexWindowBound.create(unbounded,null);\n  }\n else   if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n    SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n    return RexWindowBound.create(currentRow,null);\n  }\n else {\n    throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2789,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bound instanceof CallExpression) {\n  CallExpression callExpr=(CallExpression)bound;\n  FunctionDefinition func=callExpr.getFunctionDefinition();\n  if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n    SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n    return RexWindowBound.create(unbounded,null);\n  }\n else   if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n    SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n    return RexWindowBound.create(currentRow,null);\n  }\n else {\n    throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n  }\n}\n else if (bound instanceof ValueLiteralExpression) {\n  RelDataType returnType=context.getTypeFactory().createFieldTypeFromLogicalType(new DecimalType(true,19,0));\n  SqlOperator sqlOperator=new SqlPostfixOperator(sqlKind.name(),sqlKind,2,new OrdinalReturnTypeInference(0),null,null);\n  SqlNode[] operands=new SqlNode[]{SqlLiteral.createExactNumeric(\"1\",SqlParserPos.ZERO)};\n  SqlNode node=new SqlBasicCall(sqlOperator,operands,SqlParserPos.ZERO);\n  ValueLiteralExpression literalExpr=(ValueLiteralExpression)bound;\n  RexNode literalRexNode=literalExpr.getValueAs(BigDecimal.class).map(v -> context.getRelBuilder().literal(v)).orElse(context.getRelBuilder().literal(extractValue(literalExpr,Object.class)));\n  List<RexNode> expressions=new ArrayList<>();\n  expressions.add(literalRexNode);\n  RexNode rexNode=context.getRelBuilder().getRexBuilder().makeCall(returnType,sqlOperator,expressions);\n  return RexWindowBound.create(node,rexNode);\n}\n else {\n  throw new TableException(\"Unexpected expression: \" + bound);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 272,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2805,
        "startLineNumber" : 182,
        "startColumnNumber" : 98,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (bound instanceof CallExpression) {\n    CallExpression callExpr=(CallExpression)bound;\n    FunctionDefinition func=callExpr.getFunctionDefinition();\n    if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n      SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n      return RexWindowBound.create(unbounded,null);\n    }\n else     if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n      SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n      return RexWindowBound.create(currentRow,null);\n    }\n else {\n      throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n    }\n  }\n else   if (bound instanceof ValueLiteralExpression) {\n    RelDataType returnType=context.getTypeFactory().createFieldTypeFromLogicalType(new DecimalType(true,19,0));\n    SqlOperator sqlOperator=new SqlPostfixOperator(sqlKind.name(),sqlKind,2,new OrdinalReturnTypeInference(0),null,null);\n    SqlNode[] operands=new SqlNode[]{SqlLiteral.createExactNumeric(\"1\",SqlParserPos.ZERO)};\n    SqlNode node=new SqlBasicCall(sqlOperator,operands,SqlParserPos.ZERO);\n    ValueLiteralExpression literalExpr=(ValueLiteralExpression)bound;\n    RexNode literalRexNode=literalExpr.getValueAs(BigDecimal.class).map(v -> context.getRelBuilder().literal(v)).orElse(context.getRelBuilder().literal(extractValue(literalExpr,Object.class)));\n    List<RexNode> expressions=new ArrayList<>();\n    expressions.add(literalRexNode);\n    RexNode rexNode=context.getRelBuilder().getRexBuilder().makeCall(returnType,sqlOperator,expressions);\n    return RexWindowBound.create(node,rexNode);\n  }\n else {\n    throw new TableException(\"Unexpected expression: \" + bound);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RexWindowBound createBound(ConvertContext context,Expression bound,SqlKind sqlKind){\n  if (bound instanceof CallExpression) {\n    CallExpression callExpr=(CallExpression)bound;\n    FunctionDefinition func=callExpr.getFunctionDefinition();\n    if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n      SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n      return RexWindowBound.create(unbounded,null);\n    }\n else     if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n      SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n      return RexWindowBound.create(currentRow,null);\n    }\n else {\n      throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n    }\n  }\n else   if (bound instanceof ValueLiteralExpression) {\n    RelDataType returnType=context.getTypeFactory().createFieldTypeFromLogicalType(new DecimalType(true,19,0));\n    SqlOperator sqlOperator=new SqlPostfixOperator(sqlKind.name(),sqlKind,2,new OrdinalReturnTypeInference(0),null,null);\n    SqlNode[] operands=new SqlNode[]{SqlLiteral.createExactNumeric(\"1\",SqlParserPos.ZERO)};\n    SqlNode node=new SqlBasicCall(sqlOperator,operands,SqlParserPos.ZERO);\n    ValueLiteralExpression literalExpr=(ValueLiteralExpression)bound;\n    RexNode literalRexNode=literalExpr.getValueAs(BigDecimal.class).map(v -> context.getRelBuilder().literal(v)).orElse(context.getRelBuilder().literal(extractValue(literalExpr,Object.class)));\n    List<RexNode> expressions=new ArrayList<>();\n    expressions.add(literalRexNode);\n    RexNode rexNode=context.getRelBuilder().getRexBuilder().makeCall(returnType,sqlOperator,expressions);\n    return RexWindowBound.create(node,rexNode);\n  }\n else {\n    throw new TableException(\"Unexpected expression: \" + bound);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BuiltInFunctionDefinitions.UNBOUNDED_ROW.equals(func) || BuiltInFunctionDefinitions.UNBOUNDED_RANGE.equals(func)) {\n  SqlNode unbounded=sqlKind.equals(SqlKind.PRECEDING) ? SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO) : SqlWindow.createUnboundedFollowing(SqlParserPos.ZERO);\n  return RexWindowBound.create(unbounded,null);\n}\n else if (BuiltInFunctionDefinitions.CURRENT_ROW.equals(func) || BuiltInFunctionDefinitions.CURRENT_RANGE.equals(func)) {\n  SqlNode currentRow=SqlWindow.createCurrentRow(SqlParserPos.ZERO);\n  return RexWindowBound.create(currentRow,null);\n}\n else {\n  throw new IllegalArgumentException(\"Unexpected expression: \" + bound);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 8
    },
    "tokenLength" : 11,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 132,
    "startLineNumber" : 186,
    "startColumnNumber" : 16,
    "endLineNumber" : 187,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}