{
  "id" : 172,
  "expression" : "\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-test/src/main/java/org/springframework/test/web/servlet/result/ContentResultMatchers.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 76,
      "startLineNumber" : 105,
      "startColumnNumber" : 15,
      "endLineNumber" : 105,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 6,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 107,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  MediaType actualContentType=MediaType.parseMediaType(actual);\n  assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 103,
        "startColumnNumber" : 3,
        "endLineNumber" : 107,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (actual != null) {\n  MediaType actualContentType=MediaType.parseMediaType(actual);\n  assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 100,
        "startColumnNumber" : 19,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String actual=result.getResponse().getContentType();\n  assertTrue(\"Content type not set\",actual != null);\n  if (actual != null) {\n    MediaType actualContentType=MediaType.parseMediaType(actual);\n    assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 100,
        "startColumnNumber" : 9,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "result -> {\n  String actual=result.getResponse().getContentType();\n  assertTrue(\"Content type not set\",actual != null);\n  if (actual != null) {\n    MediaType actualContentType=MediaType.parseMediaType(actual);\n    assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType));\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 48,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertTrue(\"Content type [\" + actual + \"] is not compatible with [\"+ contentType+ \"]\",actualContentType.isCompatibleWith(contentType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    },
    "tokenLength" : 11,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 76,
    "startLineNumber" : 105,
    "startColumnNumber" : 15,
    "endLineNumber" : 105,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}