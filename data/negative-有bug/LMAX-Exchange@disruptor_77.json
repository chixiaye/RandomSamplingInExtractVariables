{
  "id" : 77,
  "expression" : "Runtime.getRuntime().availableProcessors()",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/perftest/java/com/lmax/disruptor/AbstractPerfTestQueueVsDisruptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Runtime.getRuntime().availableProcessors()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 27,
      "startColumnNumber" : 40,
      "endLineNumber" : 27,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 27,
        "startColumnNumber" : 18,
        "endLineNumber" : 27,
        "endColumnNumber" : 82
      },
      "nodeContext" : "availableProcessors=Runtime.getRuntime().availableProcessors()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 83
      },
      "nodeContext" : "final int availableProcessors=Runtime.getRuntime().availableProcessors();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1537,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int availableProcessors=Runtime.getRuntime().availableProcessors();\n  if (getRequiredProcessorCount() > availableProcessors) {\n    System.out.print(\"*** Warning ***: your system has insufficient processors to execute the test efficiently. \");\n    System.out.println(\"Processors required = \" + getRequiredProcessorCount() + \" available = \"+ availableProcessors);\n  }\n  long queueOps[]=new long[RUNS];\n  long disruptorOps[]=new long[RUNS];\n  if (\"true\".equalsIgnoreCase(System.getProperty(\"com.lmax.runQueueTests\",\"false\"))) {\n    System.out.println(\"Starting Queue tests\");\n    for (int i=0; i < RUNS; i++) {\n      System.gc();\n      queueOps[i]=runQueuePass();\n      System.out.format(\"Run %d, BlockingQueue=%,d ops/sec%n\",i,Long.valueOf(queueOps[i]));\n    }\n  }\n else {\n    System.out.println(\"Skipping Queue tests\");\n  }\n  System.out.println(\"Starting Disruptor tests\");\n  for (int i=0; i < RUNS; i++) {\n    System.gc();\n    disruptorOps[i]=runDisruptorPass();\n    System.out.format(\"Run %d, Disruptor=%,d ops/sec%n\",i,Long.valueOf(disruptorOps[i]));\n  }\n  for (int i=0; i < RUNS; i++) {\n    Assert.assertTrue(\"Performance degraded\",disruptorOps[i] > queueOps[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 186,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1603,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void testImplementations() throws Exception {\n  final int availableProcessors=Runtime.getRuntime().availableProcessors();\n  if (getRequiredProcessorCount() > availableProcessors) {\n    System.out.print(\"*** Warning ***: your system has insufficient processors to execute the test efficiently. \");\n    System.out.println(\"Processors required = \" + getRequiredProcessorCount() + \" available = \"+ availableProcessors);\n  }\n  long queueOps[]=new long[RUNS];\n  long disruptorOps[]=new long[RUNS];\n  if (\"true\".equalsIgnoreCase(System.getProperty(\"com.lmax.runQueueTests\",\"false\"))) {\n    System.out.println(\"Starting Queue tests\");\n    for (int i=0; i < RUNS; i++) {\n      System.gc();\n      queueOps[i]=runQueuePass();\n      System.out.format(\"Run %d, BlockingQueue=%,d ops/sec%n\",i,Long.valueOf(queueOps[i]));\n    }\n  }\n else {\n    System.out.println(\"Skipping Queue tests\");\n  }\n  System.out.println(\"Starting Disruptor tests\");\n  for (int i=0; i < RUNS; i++) {\n    System.gc();\n    disruptorOps[i]=runDisruptorPass();\n    System.out.format(\"Run %d, Disruptor=%,d ops/sec%n\",i,Long.valueOf(disruptorOps[i]));\n  }\n  for (int i=0; i < RUNS; i++) {\n    Assert.assertTrue(\"Performance degraded\",disruptorOps[i] > queueOps[i]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 83
      },
      "nodeContext" : "final int availableProcessors=Runtime.getRuntime().availableProcessors();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 27,
    "startColumnNumber" : 40,
    "endLineNumber" : 27,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}