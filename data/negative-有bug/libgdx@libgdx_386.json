{
  "id" : 386,
  "expression" : "srcX * invTexWidth",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonSpriteBatch.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "srcX * invTexWidth",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 456,
      "startColumnNumber" : 12,
      "endLineNumber" : 456,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 456,
        "startColumnNumber" : 8,
        "endLineNumber" : 456,
        "endColumnNumber" : 30
      },
      "nodeContext" : "u=srcX * invTexWidth",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 456,
        "startColumnNumber" : 2,
        "endLineNumber" : 456,
        "endColumnNumber" : 31
      },
      "nodeContext" : "float u=srcX * invTexWidth;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3253,
        "startLineNumber" : 361,
        "startColumnNumber" : 111,
        "endLineNumber" : 499,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!drawing)   throw new IllegalStateException(\"PolygonSpriteBatch.begin must be called before draw.\");\n  final short[] triangles=this.triangles;\n  final float[] vertices=this.vertices;\n  if (texture != lastTexture)   switchTexture(texture);\n else   if (triangleIndex + 6 > triangles.length || vertexIndex + SPRITE_SIZE > vertices.length)   flush();\n  int triangleIndex=this.triangleIndex;\n  final int startVertex=vertexIndex / VERTEX_SIZE;\n  triangles[triangleIndex++]=(short)startVertex;\n  triangles[triangleIndex++]=(short)(startVertex + 1);\n  triangles[triangleIndex++]=(short)(startVertex + 2);\n  triangles[triangleIndex++]=(short)(startVertex + 2);\n  triangles[triangleIndex++]=(short)(startVertex + 3);\n  triangles[triangleIndex++]=(short)startVertex;\n  this.triangleIndex=triangleIndex;\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float fx=-originX;\n  float fy=-originY;\n  float fx2=width - originX;\n  float fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx*=scaleX;\n    fy*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx;\n  final float p1y=fy;\n  final float p2x=fx;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    final float cos=MathUtils.cosDeg(rotation);\n    final float sin=MathUtils.sinDeg(rotation);\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  float u=srcX * invTexWidth;\n  float v=(srcY + srcHeight) * invTexHeight;\n  float u2=(srcX + srcWidth) * invTexWidth;\n  float v2=srcY * invTexHeight;\n  if (flipX) {\n    float tmp=u;\n    u=u2;\n    u2=tmp;\n  }\n  if (flipY) {\n    float tmp=v;\n    v=v2;\n    v2=tmp;\n  }\n  float color=this.colorPacked;\n  int idx=this.vertexIndex;\n  vertices[idx++]=x1;\n  vertices[idx++]=y1;\n  vertices[idx++]=color;\n  vertices[idx++]=u;\n  vertices[idx++]=v;\n  vertices[idx++]=x2;\n  vertices[idx++]=y2;\n  vertices[idx++]=color;\n  vertices[idx++]=u;\n  vertices[idx++]=v2;\n  vertices[idx++]=x3;\n  vertices[idx++]=y3;\n  vertices[idx++]=color;\n  vertices[idx++]=u2;\n  vertices[idx++]=v2;\n  vertices[idx++]=x4;\n  vertices[idx++]=y4;\n  vertices[idx++]=color;\n  vertices[idx++]=u2;\n  vertices[idx++]=v;\n  this.vertexIndex=idx;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 682,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3501,
        "startLineNumber" : 359,
        "startColumnNumber" : 1,
        "endLineNumber" : 499,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void draw(Texture texture,float x,float y,float originX,float originY,float width,float height,float scaleX,float scaleY,float rotation,int srcX,int srcY,int srcWidth,int srcHeight,boolean flipX,boolean flipY){\n  if (!drawing)   throw new IllegalStateException(\"PolygonSpriteBatch.begin must be called before draw.\");\n  final short[] triangles=this.triangles;\n  final float[] vertices=this.vertices;\n  if (texture != lastTexture)   switchTexture(texture);\n else   if (triangleIndex + 6 > triangles.length || vertexIndex + SPRITE_SIZE > vertices.length)   flush();\n  int triangleIndex=this.triangleIndex;\n  final int startVertex=vertexIndex / VERTEX_SIZE;\n  triangles[triangleIndex++]=(short)startVertex;\n  triangles[triangleIndex++]=(short)(startVertex + 1);\n  triangles[triangleIndex++]=(short)(startVertex + 2);\n  triangles[triangleIndex++]=(short)(startVertex + 2);\n  triangles[triangleIndex++]=(short)(startVertex + 3);\n  triangles[triangleIndex++]=(short)startVertex;\n  this.triangleIndex=triangleIndex;\n  final float worldOriginX=x + originX;\n  final float worldOriginY=y + originY;\n  float fx=-originX;\n  float fy=-originY;\n  float fx2=width - originX;\n  float fy2=height - originY;\n  if (scaleX != 1 || scaleY != 1) {\n    fx*=scaleX;\n    fy*=scaleY;\n    fx2*=scaleX;\n    fy2*=scaleY;\n  }\n  final float p1x=fx;\n  final float p1y=fy;\n  final float p2x=fx;\n  final float p2y=fy2;\n  final float p3x=fx2;\n  final float p3y=fy2;\n  final float p4x=fx2;\n  final float p4y=fy;\n  float x1;\n  float y1;\n  float x2;\n  float y2;\n  float x3;\n  float y3;\n  float x4;\n  float y4;\n  if (rotation != 0) {\n    final float cos=MathUtils.cosDeg(rotation);\n    final float sin=MathUtils.sinDeg(rotation);\n    x1=cos * p1x - sin * p1y;\n    y1=sin * p1x + cos * p1y;\n    x2=cos * p2x - sin * p2y;\n    y2=sin * p2x + cos * p2y;\n    x3=cos * p3x - sin * p3y;\n    y3=sin * p3x + cos * p3y;\n    x4=x1 + (x3 - x2);\n    y4=y3 - (y2 - y1);\n  }\n else {\n    x1=p1x;\n    y1=p1y;\n    x2=p2x;\n    y2=p2y;\n    x3=p3x;\n    y3=p3y;\n    x4=p4x;\n    y4=p4y;\n  }\n  x1+=worldOriginX;\n  y1+=worldOriginY;\n  x2+=worldOriginX;\n  y2+=worldOriginY;\n  x3+=worldOriginX;\n  y3+=worldOriginY;\n  x4+=worldOriginX;\n  y4+=worldOriginY;\n  float u=srcX * invTexWidth;\n  float v=(srcY + srcHeight) * invTexHeight;\n  float u2=(srcX + srcWidth) * invTexWidth;\n  float v2=srcY * invTexHeight;\n  if (flipX) {\n    float tmp=u;\n    u=u2;\n    u2=tmp;\n  }\n  if (flipY) {\n    float tmp=v;\n    v=v2;\n    v2=tmp;\n  }\n  float color=this.colorPacked;\n  int idx=this.vertexIndex;\n  vertices[idx++]=x1;\n  vertices[idx++]=y1;\n  vertices[idx++]=color;\n  vertices[idx++]=u;\n  vertices[idx++]=v;\n  vertices[idx++]=x2;\n  vertices[idx++]=y2;\n  vertices[idx++]=color;\n  vertices[idx++]=u;\n  vertices[idx++]=v2;\n  vertices[idx++]=x3;\n  vertices[idx++]=y3;\n  vertices[idx++]=color;\n  vertices[idx++]=u2;\n  vertices[idx++]=v2;\n  vertices[idx++]=x4;\n  vertices[idx++]=y4;\n  vertices[idx++]=color;\n  vertices[idx++]=u2;\n  vertices[idx++]=v;\n  this.vertexIndex=idx;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 737,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 456,
        "startColumnNumber" : 2,
        "endLineNumber" : 456,
        "endColumnNumber" : 31
      },
      "nodeContext" : "float u=srcX * invTexWidth;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 456,
    "startColumnNumber" : 12,
    "endLineNumber" : 456,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}