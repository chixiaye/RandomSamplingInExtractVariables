{
  "id" : 29,
  "expression" : "\"success\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/SqlExecutionReporter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"success\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 109,
      "startColumnNumber" : 33,
      "endLineNumber" : 109,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 109,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 68
      },
      "nodeContext" : "metricBuilder.setDimension(\"success\",String.valueOf(success))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 109,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 69
      },
      "nodeContext" : "metricBuilder.setDimension(\"success\",String.valueOf(success));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2713,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n  if (plannerContext != null) {\n    metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n    metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  if (stmt.fullResourceActions != null) {\n    metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n  }\n  metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n  metricBuilder.setDimension(\"success\",String.valueOf(success));\n  emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n  if (bytesWritten >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n  }\n  if (planningTimeNanos >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n  }\n  final Map<String,Object> statsMap=new LinkedHashMap<>();\n  statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n  statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n  statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n  statsMap.put(\"success\",success);\n  QueryContext queryContext;\n  if (plannerContext == null) {\n    queryContext=stmt.queryPlus.context();\n  }\n else {\n    statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n    queryContext=stmt.queryPlus.context();\n    queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  final Map<String,Object> context=queryContext.getMergedParams();\n  statsMap.put(\"context\",context);\n  if (e != null) {\n    statsMap.put(\"exception\",e.toString());\n    if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n      statsMap.put(\"interrupted\",true);\n      statsMap.put(\"reason\",e.toString());\n    }\n  }\n  stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2823,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n  if (plannerContext != null) {\n    metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n    metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  if (stmt.fullResourceActions != null) {\n    metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n  }\n  metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n  metricBuilder.setDimension(\"success\",String.valueOf(success));\n  emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n  if (bytesWritten >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n  }\n  if (planningTimeNanos >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n  }\n  final Map<String,Object> statsMap=new LinkedHashMap<>();\n  statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n  statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n  statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n  statsMap.put(\"success\",success);\n  QueryContext queryContext;\n  if (plannerContext == null) {\n    queryContext=stmt.queryPlus.context();\n  }\n else {\n    statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n    queryContext=stmt.queryPlus.context();\n    queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  final Map<String,Object> context=queryContext.getMergedParams();\n  statsMap.put(\"context\",context);\n  if (e != null) {\n    statsMap.put(\"exception\",e.toString());\n    if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n      statsMap.put(\"interrupted\",true);\n      statsMap.put(\"reason\",e.toString());\n    }\n  }\n  stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n}\n catch (Exception ex) {\n  log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 331,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3049,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean success=e == null;\n  final long queryTimeNs=System.nanoTime() - startNs;\n  ServiceEmitter emitter=stmt.sqlToolbox.emitter;\n  PlannerContext plannerContext=stmt.plannerContext;\n  try {\n    ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n    if (plannerContext != null) {\n      metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n      metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    if (stmt.fullResourceActions != null) {\n      metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n    }\n    metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n    metricBuilder.setDimension(\"success\",String.valueOf(success));\n    emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n    if (bytesWritten >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n    }\n    if (planningTimeNanos >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n    }\n    final Map<String,Object> statsMap=new LinkedHashMap<>();\n    statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n    statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n    statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n    statsMap.put(\"success\",success);\n    QueryContext queryContext;\n    if (plannerContext == null) {\n      queryContext=stmt.queryPlus.context();\n    }\n else {\n      statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n      queryContext=stmt.queryPlus.context();\n      queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    final Map<String,Object> context=queryContext.getMergedParams();\n    statsMap.put(\"context\",context);\n    if (e != null) {\n      statsMap.put(\"exception\",e.toString());\n      if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n        statsMap.put(\"interrupted\",true);\n        statsMap.put(\"reason\",e.toString());\n      }\n    }\n    stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n  }\n catch (  Exception ex) {\n    log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3071,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void emit(){\n  final boolean success=e == null;\n  final long queryTimeNs=System.nanoTime() - startNs;\n  ServiceEmitter emitter=stmt.sqlToolbox.emitter;\n  PlannerContext plannerContext=stmt.plannerContext;\n  try {\n    ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n    if (plannerContext != null) {\n      metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n      metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    if (stmt.fullResourceActions != null) {\n      metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n    }\n    metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n    metricBuilder.setDimension(\"success\",String.valueOf(success));\n    emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n    if (bytesWritten >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n    }\n    if (planningTimeNanos >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n    }\n    final Map<String,Object> statsMap=new LinkedHashMap<>();\n    statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n    statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n    statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n    statsMap.put(\"success\",success);\n    QueryContext queryContext;\n    if (plannerContext == null) {\n      queryContext=stmt.queryPlus.context();\n    }\n else {\n      statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n      queryContext=stmt.queryPlus.context();\n      queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    final Map<String,Object> context=queryContext.getMergedParams();\n    statsMap.put(\"context\",context);\n    if (e != null) {\n      statsMap.put(\"exception\",e.toString());\n      if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n        statsMap.put(\"interrupted\",true);\n        statsMap.put(\"reason\",e.toString());\n      }\n    }\n    stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n  }\n catch (  Exception ex) {\n    log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 109,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 69
      },
      "nodeContext" : "metricBuilder.setDimension(\"success\",String.valueOf(success));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"success\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 125,
      "startColumnNumber" : 19,
      "endLineNumber" : 125,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 38
      },
      "nodeContext" : "statsMap.put(\"success\",success)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 39
      },
      "nodeContext" : "statsMap.put(\"success\",success);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2713,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n  if (plannerContext != null) {\n    metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n    metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  if (stmt.fullResourceActions != null) {\n    metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n  }\n  metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n  metricBuilder.setDimension(\"success\",String.valueOf(success));\n  emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n  if (bytesWritten >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n  }\n  if (planningTimeNanos >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n  }\n  final Map<String,Object> statsMap=new LinkedHashMap<>();\n  statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n  statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n  statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n  statsMap.put(\"success\",success);\n  QueryContext queryContext;\n  if (plannerContext == null) {\n    queryContext=stmt.queryPlus.context();\n  }\n else {\n    statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n    queryContext=stmt.queryPlus.context();\n    queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  final Map<String,Object> context=queryContext.getMergedParams();\n  statsMap.put(\"context\",context);\n  if (e != null) {\n    statsMap.put(\"exception\",e.toString());\n    if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n      statsMap.put(\"interrupted\",true);\n      statsMap.put(\"reason\",e.toString());\n    }\n  }\n  stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2823,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n  if (plannerContext != null) {\n    metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n    metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  if (stmt.fullResourceActions != null) {\n    metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n  }\n  metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n  metricBuilder.setDimension(\"success\",String.valueOf(success));\n  emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n  if (bytesWritten >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n  }\n  if (planningTimeNanos >= 0) {\n    emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n  }\n  final Map<String,Object> statsMap=new LinkedHashMap<>();\n  statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n  statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n  statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n  statsMap.put(\"success\",success);\n  QueryContext queryContext;\n  if (plannerContext == null) {\n    queryContext=stmt.queryPlus.context();\n  }\n else {\n    statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n    queryContext=stmt.queryPlus.context();\n    queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n  }\n  final Map<String,Object> context=queryContext.getMergedParams();\n  statsMap.put(\"context\",context);\n  if (e != null) {\n    statsMap.put(\"exception\",e.toString());\n    if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n      statsMap.put(\"interrupted\",true);\n      statsMap.put(\"reason\",e.toString());\n    }\n  }\n  stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n}\n catch (Exception ex) {\n  log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 331,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3049,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final boolean success=e == null;\n  final long queryTimeNs=System.nanoTime() - startNs;\n  ServiceEmitter emitter=stmt.sqlToolbox.emitter;\n  PlannerContext plannerContext=stmt.plannerContext;\n  try {\n    ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n    if (plannerContext != null) {\n      metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n      metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    if (stmt.fullResourceActions != null) {\n      metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n    }\n    metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n    metricBuilder.setDimension(\"success\",String.valueOf(success));\n    emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n    if (bytesWritten >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n    }\n    if (planningTimeNanos >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n    }\n    final Map<String,Object> statsMap=new LinkedHashMap<>();\n    statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n    statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n    statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n    statsMap.put(\"success\",success);\n    QueryContext queryContext;\n    if (plannerContext == null) {\n      queryContext=stmt.queryPlus.context();\n    }\n else {\n      statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n      queryContext=stmt.queryPlus.context();\n      queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    final Map<String,Object> context=queryContext.getMergedParams();\n    statsMap.put(\"context\",context);\n    if (e != null) {\n      statsMap.put(\"exception\",e.toString());\n      if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n        statsMap.put(\"interrupted\",true);\n        statsMap.put(\"reason\",e.toString());\n      }\n    }\n    stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n  }\n catch (  Exception ex) {\n    log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3071,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void emit(){\n  final boolean success=e == null;\n  final long queryTimeNs=System.nanoTime() - startNs;\n  ServiceEmitter emitter=stmt.sqlToolbox.emitter;\n  PlannerContext plannerContext=stmt.plannerContext;\n  try {\n    ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder();\n    if (plannerContext != null) {\n      metricBuilder.setDimension(\"id\",plannerContext.getSqlQueryId());\n      metricBuilder.setDimension(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    if (stmt.fullResourceActions != null) {\n      metricBuilder.setDimension(\"dataSource\",stmt.fullResourceActions.stream().map(action -> action.getResource().getName()).collect(Collectors.toList()).toString());\n    }\n    metricBuilder.setDimension(\"remoteAddress\",StringUtils.nullToEmptyNonDruidDataString(remoteAddress));\n    metricBuilder.setDimension(\"success\",String.valueOf(success));\n    emitter.emit(metricBuilder.build(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs)));\n    if (bytesWritten >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/bytes\",bytesWritten));\n    }\n    if (planningTimeNanos >= 0) {\n      emitter.emit(metricBuilder.build(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos)));\n    }\n    final Map<String,Object> statsMap=new LinkedHashMap<>();\n    statsMap.put(\"sqlQuery/time\",TimeUnit.NANOSECONDS.toMillis(queryTimeNs));\n    statsMap.put(\"sqlQuery/planningTimeMs\",TimeUnit.NANOSECONDS.toMillis(planningTimeNanos));\n    statsMap.put(\"sqlQuery/bytes\",bytesWritten);\n    statsMap.put(\"success\",success);\n    QueryContext queryContext;\n    if (plannerContext == null) {\n      queryContext=stmt.queryPlus.context();\n    }\n else {\n      statsMap.put(\"identity\",plannerContext.getAuthenticationResult().getIdentity());\n      queryContext=stmt.queryPlus.context();\n      queryContext.addSystemParam(\"nativeQueryIds\",plannerContext.getNativeQueryIds().toString());\n    }\n    final Map<String,Object> context=queryContext.getMergedParams();\n    statsMap.put(\"context\",context);\n    if (e != null) {\n      statsMap.put(\"exception\",e.toString());\n      if (e instanceof QueryInterruptedException || e instanceof QueryTimeoutException) {\n        statsMap.put(\"interrupted\",true);\n        statsMap.put(\"reason\",e.toString());\n      }\n    }\n    stmt.sqlToolbox.requestLogger.logSqlQuery(RequestLogLine.forSql(stmt.queryPlus.sql(),context,DateTimes.utc(startMs),remoteAddress,new QueryStats(statsMap)));\n  }\n catch (  Exception ex) {\n    log.error(ex,\"Unable to log SQL [%s]!\",stmt.queryPlus.sql());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 39
      },
      "nodeContext" : "statsMap.put(\"success\",success);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 109,
    "startColumnNumber" : 33,
    "endLineNumber" : 109,
    "endColumnNumber" : 42
  }, {
    "charLength" : 9,
    "startLineNumber" : 125,
    "startColumnNumber" : 19,
    "endLineNumber" : 125,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}