{
  "id" : 116,
  "expression" : "field",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 264,
      "startColumnNumber" : 63,
      "endLineNumber" : 264,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 69
      },
      "nodeContext" : "object.linkingObjects(AllJavaTypes.CLASS_NAME,field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 70
      },
      "nodeContext" : "object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 263,
        "startColumnNumber" : 16,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n  fail();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 268,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n  fail();\n}\n catch (IllegalArgumentException expected) {\n  assertTrue(expected.getMessage().contains(\"does not exist\"));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 262,
        "startColumnNumber" : 100,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n    fail();\n  }\n catch (  IllegalArgumentException expected) {\n    assertTrue(expected.getMessage().contains(\"does not exist\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String field : new String[]{AllJavaTypes.FIELD_LO_OBJECT,AllJavaTypes.FIELD_LO_LIST}) {\n  try {\n    object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n    fail();\n  }\n catch (  IllegalArgumentException expected) {\n    assertTrue(expected.getMessage().contains(\"does not exist\"));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5143,
        "startLineNumber" : 167,
        "startColumnNumber" : 50,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  dynamicRealm.beginTransaction();\n  final DynamicRealmObject object=dynamicRealm.createObject(AllJavaTypes.CLASS_NAME,1L);\n  dynamicRealm.commitTransaction();\n  for (  RealmFieldType fieldType : RealmFieldType.values()) {\n    if (fieldType == RealmFieldType.TYPED_LINK)     continue;\n    try {\nswitch (fieldType) {\ncase OBJECT:case LIST:        continue;\ncase LINKING_OBJECTS:      continue;\ncase INTEGER:    object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_INT);\n  break;\ncase BOOLEAN:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BOOLEAN);\nbreak;\ncase STRING:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_STRING);\nbreak;\ncase BINARY:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BINARY);\nbreak;\ncase DATE:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DATE);\nbreak;\ncase FLOAT:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_FLOAT);\nbreak;\ncase DOUBLE:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DOUBLE);\nbreak;\ncase DECIMAL128:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DECIMAL128);\nbreak;\ncase OBJECT_ID:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_OBJECT_ID);\nbreak;\ncase UUID:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_UUID);\nbreak;\ncase MIXED:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_MIXED);\nbreak;\ncase INTEGER_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_INTEGER_LIST);\nbreak;\ncase BOOLEAN_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BOOLEAN_LIST);\nbreak;\ncase STRING_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_STRING_LIST);\nbreak;\ncase BINARY_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BINARY_LIST);\nbreak;\ncase DATE_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DATE_LIST);\nbreak;\ncase FLOAT_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_FLOAT_LIST);\nbreak;\ncase DOUBLE_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DOUBLE_LIST);\nbreak;\ncase DECIMAL128_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DECIMAL128_LIST);\nbreak;\ncase OBJECT_ID_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_OBJECT_ID_LIST);\nbreak;\ncase UUID_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_UUID_LIST);\nbreak;\ncase MIXED_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_MIXED_LIST);\nbreak;\ndefault:fail(\"unknown type: \" + fieldType);\nbreak;\n}\nfail();\n}\n catch (IllegalArgumentException expected) {\nassertTrue(expected.getMessage().startsWith(\"Unexpected field type\"));\n}\n}\nfor (String field : new String[]{AllJavaTypes.FIELD_LO_OBJECT,AllJavaTypes.FIELD_LO_LIST}) {\ntry {\nobject.linkingObjects(AllJavaTypes.CLASS_NAME,field);\nfail();\n}\n catch (IllegalArgumentException expected) {\nassertTrue(expected.getMessage().contains(\"does not exist\"));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 408,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5199,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void linkingObjects_invalidFieldType(){\n  dynamicRealm.beginTransaction();\n  final DynamicRealmObject object=dynamicRealm.createObject(AllJavaTypes.CLASS_NAME,1L);\n  dynamicRealm.commitTransaction();\n  for (  RealmFieldType fieldType : RealmFieldType.values()) {\n    if (fieldType == RealmFieldType.TYPED_LINK)     continue;\n    try {\nswitch (fieldType) {\ncase OBJECT:case LIST:        continue;\ncase LINKING_OBJECTS:      continue;\ncase INTEGER:    object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_INT);\n  break;\ncase BOOLEAN:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BOOLEAN);\nbreak;\ncase STRING:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_STRING);\nbreak;\ncase BINARY:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BINARY);\nbreak;\ncase DATE:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DATE);\nbreak;\ncase FLOAT:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_FLOAT);\nbreak;\ncase DOUBLE:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DOUBLE);\nbreak;\ncase DECIMAL128:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DECIMAL128);\nbreak;\ncase OBJECT_ID:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_OBJECT_ID);\nbreak;\ncase UUID:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_UUID);\nbreak;\ncase MIXED:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_MIXED);\nbreak;\ncase INTEGER_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_INTEGER_LIST);\nbreak;\ncase BOOLEAN_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BOOLEAN_LIST);\nbreak;\ncase STRING_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_STRING_LIST);\nbreak;\ncase BINARY_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_BINARY_LIST);\nbreak;\ncase DATE_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DATE_LIST);\nbreak;\ncase FLOAT_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_FLOAT_LIST);\nbreak;\ncase DOUBLE_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DOUBLE_LIST);\nbreak;\ncase DECIMAL128_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_DECIMAL128_LIST);\nbreak;\ncase OBJECT_ID_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_OBJECT_ID_LIST);\nbreak;\ncase UUID_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_UUID_LIST);\nbreak;\ncase MIXED_LIST:object.linkingObjects(AllJavaTypes.CLASS_NAME,AllJavaTypes.FIELD_MIXED_LIST);\nbreak;\ndefault:fail(\"unknown type: \" + fieldType);\nbreak;\n}\nfail();\n}\n catch (IllegalArgumentException expected) {\nassertTrue(expected.getMessage().startsWith(\"Unexpected field type\"));\n}\n}\nfor (String field : new String[]{AllJavaTypes.FIELD_LO_OBJECT,AllJavaTypes.FIELD_LO_LIST}) {\ntry {\nobject.linkingObjects(AllJavaTypes.CLASS_NAME,field);\nfail();\n}\n catch (IllegalArgumentException expected) {\nassertTrue(expected.getMessage().contains(\"does not exist\"));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 70
      },
      "nodeContext" : "object.linkingObjects(AllJavaTypes.CLASS_NAME,field);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 264,
    "startColumnNumber" : 63,
    "endLineNumber" : 264,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}