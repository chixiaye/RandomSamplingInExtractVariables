{
  "id" : 327,
  "expression" : "destBitmap",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline/src/main/java/com/facebook/imagepipeline/request/BasePostprocessor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "destBitmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 86,
      "startColumnNumber" : 23,
      "endLineNumber" : 86,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 48
      },
      "nodeContext" : "internalCopyBitmap(destBitmap,sourceBitmap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 49
      },
      "nodeContext" : "internalCopyBitmap(destBitmap,sourceBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 85,
        "startColumnNumber" : 62,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  internalCopyBitmap(destBitmap,sourceBitmap);\n  process(destBitmap);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Clients should override this method if the post-processing cannot be done in place. If the post-processing can be done in place, clients should override the  {@link #process(Bitmap)}method. <p>The provided destination bitmap is of the same size as the source bitmap. There are no guarantees on the initial content of the destination bitmap, so the implementation has to make sure that it properly populates it. <p>The source bitmap must not be modified as it may be shared by the other clients. The implementation must use the provided destination bitmap as its output.\n * @param destBitmap the destination bitmap to be used as output\n * @param sourceBitmap the source bitmap to be used as input\n */\npublic void process(Bitmap destBitmap,Bitmap sourceBitmap){\n  internalCopyBitmap(destBitmap,sourceBitmap);\n  process(destBitmap);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 23,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 49
      },
      "nodeContext" : "internalCopyBitmap(destBitmap,sourceBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.request.Bitmap"
  }, {
    "nodeContext" : "destBitmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 87,
      "startColumnNumber" : 12,
      "endLineNumber" : 87,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 23
      },
      "nodeContext" : "process(destBitmap)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "process(destBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 85,
        "startColumnNumber" : 62,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  internalCopyBitmap(destBitmap,sourceBitmap);\n  process(destBitmap);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Clients should override this method if the post-processing cannot be done in place. If the post-processing can be done in place, clients should override the  {@link #process(Bitmap)}method. <p>The provided destination bitmap is of the same size as the source bitmap. There are no guarantees on the initial content of the destination bitmap, so the implementation has to make sure that it properly populates it. <p>The source bitmap must not be modified as it may be shared by the other clients. The implementation must use the provided destination bitmap as its output.\n * @param destBitmap the destination bitmap to be used as output\n * @param sourceBitmap the source bitmap to be used as input\n */\npublic void process(Bitmap destBitmap,Bitmap sourceBitmap){\n  internalCopyBitmap(destBitmap,sourceBitmap);\n  process(destBitmap);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 23,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "process(destBitmap);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.imagepipeline.request.Bitmap"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 86,
    "startColumnNumber" : 23,
    "endLineNumber" : 86,
    "endColumnNumber" : 33
  }, {
    "charLength" : 10,
    "startLineNumber" : 87,
    "startColumnNumber" : 12,
    "endLineNumber" : 87,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}