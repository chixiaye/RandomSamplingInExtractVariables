{
  "id" : 384,
  "expression" : "requestObject",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/par/ParTest.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 237,
      "startColumnNumber" : 12,
      "endLineNumber" : 237,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 61
      },
      "nodeContext" : "requestObject.id(KeycloakModelUtils.generateId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 62
      },
      "nodeContext" : "requestObject.id(KeycloakModelUtils.generateId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 62
      },
      "nodeContext" : "requestObject.id(KeycloakModelUtils.generateId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 238,
      "startColumnNumber" : 12,
      "endLineNumber" : 238,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 238,
        "endColumnNumber" : 63
      },
      "nodeContext" : "requestObject.iat(Long.valueOf(Time.currentTime()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 238,
        "endColumnNumber" : 64
      },
      "nodeContext" : "requestObject.iat(Long.valueOf(Time.currentTime()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 238,
        "startColumnNumber" : 12,
        "endLineNumber" : 238,
        "endColumnNumber" : 64
      },
      "nodeContext" : "requestObject.iat(Long.valueOf(Time.currentTime()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 239,
      "startColumnNumber" : 12,
      "endLineNumber" : 239,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 73
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 74
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 74
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 239,
      "startColumnNumber" : 30,
      "endLineNumber" : 239,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 239,
        "startColumnNumber" : 30,
        "endLineNumber" : 239,
        "endColumnNumber" : 52
      },
      "nodeContext" : "requestObject.getIat()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 239,
        "startColumnNumber" : 30,
        "endLineNumber" : 239,
        "endColumnNumber" : 72
      },
      "nodeContext" : "requestObject.getIat() + Long.valueOf(300)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 73
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 74
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 74
      },
      "nodeContext" : "requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 240,
      "startColumnNumber" : 12,
      "endLineNumber" : 240,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 53
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 54
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 54
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 240,
      "startColumnNumber" : 30,
      "endLineNumber" : 240,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 240,
        "startColumnNumber" : 30,
        "endLineNumber" : 240,
        "endColumnNumber" : 52
      },
      "nodeContext" : "requestObject.getIat()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 53
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 54
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 240,
        "endColumnNumber" : 54
      },
      "nodeContext" : "requestObject.nbf(requestObject.getIat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 241,
      "startColumnNumber" : 12,
      "endLineNumber" : 241,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 58
      },
      "nodeContext" : "requestObject.setClientId(oauth.getClientId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 59
      },
      "nodeContext" : "requestObject.setClientId(oauth.getClientId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 241,
        "startColumnNumber" : 12,
        "endLineNumber" : 241,
        "endColumnNumber" : 59
      },
      "nodeContext" : "requestObject.setClientId(oauth.getClientId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 242,
      "startColumnNumber" : 12,
      "endLineNumber" : 242,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 49
      },
      "nodeContext" : "requestObject.setResponseType(\"code\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 50
      },
      "nodeContext" : "requestObject.setResponseType(\"code\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 50
      },
      "nodeContext" : "requestObject.setResponseType(\"code\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 243,
      "startColumnNumber" : 12,
      "endLineNumber" : 243,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 66
      },
      "nodeContext" : "requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 67
      },
      "nodeContext" : "requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 67
      },
      "nodeContext" : "requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 244,
      "startColumnNumber" : 12,
      "endLineNumber" : 244,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 44
      },
      "nodeContext" : "requestObject.setScope(\"openid\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestObject.setScope(\"openid\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 244,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestObject.setScope(\"openid\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 245,
      "startColumnNumber" : 12,
      "endLineNumber" : 245,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 67
      },
      "nodeContext" : "requestObject.setNonce(KeycloakModelUtils.generateId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 68
      },
      "nodeContext" : "requestObject.setNonce(KeycloakModelUtils.generateId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 245,
        "endColumnNumber" : 68
      },
      "nodeContext" : "requestObject.setNonce(KeycloakModelUtils.generateId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  }, {
    "nodeContext" : "requestObject",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 247,
      "startColumnNumber" : 70,
      "endLineNumber" : 247,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 247,
        "startColumnNumber" : 34,
        "endLineNumber" : 247,
        "endColumnNumber" : 84
      },
      "nodeContext" : "JsonSerialization.writeValueAsBytes(requestObject)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 247,
        "startColumnNumber" : 19,
        "endLineNumber" : 247,
        "endColumnNumber" : 84
      },
      "nodeContext" : "contentBytes=JsonSerialization.writeValueAsBytes(requestObject)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 85
      },
      "nodeContext" : "byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int requestUriLifespan=45;\n  setParRealmSettings(requestUriLifespan);\n  String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(  OIDCClientRepresentation clientRep) -> {\n    clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n    clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n    clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n  }\n);\n  oauth.clientId(clientId);\n  OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n  String clientSecret=oidcCRep.getClientSecret();\n  assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n  assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n  assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n  TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n  requestObject.id(KeycloakModelUtils.generateId());\n  requestObject.iat(Long.valueOf(Time.currentTime()));\n  requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n  requestObject.nbf(requestObject.getIat());\n  requestObject.setClientId(oauth.getClientId());\n  requestObject.setResponseType(\"code\");\n  requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n  requestObject.setScope(\"openid\");\n  requestObject.setNonce(KeycloakModelUtils.generateId());\n  byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n  String encodedRequestObject=Base64Url.encode(contentBytes);\n  TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n  clientResource.update(clientRep);\n  client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n  client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n  oauth.request(client.getOIDCRequest());\n  oauth.responseType(null);\n  oauth.redirectUri(null);\n  oauth.scope(null);\n  ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n  assertEquals(400,pResp.getStatusCode());\n  assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n}\n  finally {\n  restoreParRealmSettings();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3379,
        "startLineNumber" : 214,
        "startColumnNumber" : 77,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3462,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 273,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWrongSigningAlgorithmForRequestObject() throws Exception {\n  try {\n    int requestUriLifespan=45;\n    setParRealmSettings(requestUriLifespan);\n    String clientId=createClientDynamically(generateSuffixedName(CLIENT_NAME),(    OIDCClientRepresentation clientRep) -> {\n      clientRep.setRequirePushedAuthorizationRequests(Boolean.TRUE);\n      clientRep.setRedirectUris(new ArrayList<>(Arrays.asList(CLIENT_REDIRECT_URI)));\n      clientRep.setRequestObjectSigningAlg(Algorithm.PS256);\n    }\n);\n    oauth.clientId(clientId);\n    OIDCClientRepresentation oidcCRep=getClientDynamically(clientId);\n    String clientSecret=oidcCRep.getClientSecret();\n    assertEquals(Boolean.TRUE,oidcCRep.getRequirePushedAuthorizationRequests());\n    assertTrue(oidcCRep.getRedirectUris().contains(CLIENT_REDIRECT_URI));\n    assertEquals(OIDCLoginProtocol.CLIENT_SECRET_BASIC,oidcCRep.getTokenEndpointAuthMethod());\n    TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject requestObject=new TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject();\n    requestObject.id(KeycloakModelUtils.generateId());\n    requestObject.iat(Long.valueOf(Time.currentTime()));\n    requestObject.exp(requestObject.getIat() + Long.valueOf(300));\n    requestObject.nbf(requestObject.getIat());\n    requestObject.setClientId(oauth.getClientId());\n    requestObject.setResponseType(\"code\");\n    requestObject.setRedirectUriParam(CLIENT_REDIRECT_URI);\n    requestObject.setScope(\"openid\");\n    requestObject.setNonce(KeycloakModelUtils.generateId());\n    byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n    String encodedRequestObject=Base64Url.encode(contentBytes);\n    TestOIDCEndpointsApplicationResource client=testingClient.testApp().oidcClientEndpoints();\n    ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(oauth.getRealm()),oauth.getClientId());\n    ClientRepresentation clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(TestApplicationResourceUrls.clientJwksUri());\n    clientResource.update(clientRep);\n    client.generateKeys(org.keycloak.crypto.Algorithm.RS256);\n    client.registerOIDCRequest(encodedRequestObject,org.keycloak.crypto.Algorithm.RS256);\n    oauth.request(client.getOIDCRequest());\n    oauth.responseType(null);\n    oauth.redirectUri(null);\n    oauth.scope(null);\n    ParResponse pResp=oauth.doPushedAuthorizationRequest(clientId,clientSecret);\n    assertEquals(400,pResp.getStatusCode());\n    assertEquals(OAuthErrorException.INVALID_REQUEST_OBJECT,pResp.getError());\n  }\n  finally {\n    restoreParRealmSettings();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 343,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 85
      },
      "nodeContext" : "byte[] contentBytes=JsonSerialization.writeValueAsBytes(requestObject);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.testsuite.rest.resource.TestingOIDCEndpointsApplicationResource.AuthorizationEndpointRequestObject"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 237,
    "startColumnNumber" : 12,
    "endLineNumber" : 237,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 238,
    "startColumnNumber" : 12,
    "endLineNumber" : 238,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 239,
    "startColumnNumber" : 12,
    "endLineNumber" : 239,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 239,
    "startColumnNumber" : 30,
    "endLineNumber" : 239,
    "endColumnNumber" : 43
  }, {
    "charLength" : 13,
    "startLineNumber" : 240,
    "startColumnNumber" : 12,
    "endLineNumber" : 240,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 240,
    "startColumnNumber" : 30,
    "endLineNumber" : 240,
    "endColumnNumber" : 43
  }, {
    "charLength" : 13,
    "startLineNumber" : 241,
    "startColumnNumber" : 12,
    "endLineNumber" : 241,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 242,
    "startColumnNumber" : 12,
    "endLineNumber" : 242,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 243,
    "startColumnNumber" : 12,
    "endLineNumber" : 243,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 244,
    "startColumnNumber" : 12,
    "endLineNumber" : 244,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 245,
    "startColumnNumber" : 12,
    "endLineNumber" : 245,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 247,
    "startColumnNumber" : 70,
    "endLineNumber" : 247,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  } ]
}