{
  "id" : 312,
  "expression" : "(i - 1) / 2 - diameter / 2",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/ManachersAlgorithm.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(i - 1) / 2 - diameter / 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 64,
      "startColumnNumber" : 24,
      "endLineNumber" : 64,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 64,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 50
      },
      "nodeContext" : "index=(i - 1) / 2 - diameter / 2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 51
      },
      "nodeContext" : "int index=(i - 1) / 2 - diameter / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 63,
        "startColumnNumber" : 31,
        "endLineNumber" : 67,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  int index=(i - 1) / 2 - diameter / 2;\n  palindromes.add(new String(S,index,diameter));\n  diameter-=2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 63,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 11
      },
      "nodeContext" : "while (diameter > 1) {\n  int index=(i - 1) / 2 - diameter / 2;\n  palindromes.add(new String(S,index,diameter));\n  diameter-=2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 62,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (diameter > 1) {\n    int index=(i - 1) / 2 - diameter / 2;\n    palindromes.add(new String(S,index,diameter));\n    diameter-=2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i % 2 == 1) {\n  while (diameter > 1) {\n    int index=(i - 1) / 2 - diameter / 2;\n    palindromes.add(new String(S,index,diameter));\n    diameter-=2;\n  }\n}\n else {\n  while (diameter >= 1) {\n    int index=(i - 2) / 2 - (diameter - 1) / 2;\n    palindromes.add(new String(S,index,diameter));\n    diameter-=2;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (i % 2 == 1) {\n    while (diameter > 1) {\n      int index=(i - 1) / 2 - diameter / 2;\n      palindromes.add(new String(S,index,diameter));\n      diameter-=2;\n    }\n  }\n else {\n    while (diameter >= 1) {\n      int index=(i - 2) / 2 - (diameter - 1) / 2;\n      palindromes.add(new String(S,index,diameter));\n      diameter-=2;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 534,
        "startLineNumber" : 59,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (diameter >= 1) {\n  if (i % 2 == 1) {\n    while (diameter > 1) {\n      int index=(i - 1) / 2 - diameter / 2;\n      palindromes.add(new String(S,index,diameter));\n      diameter-=2;\n    }\n  }\n else {\n    while (diameter >= 1) {\n      int index=(i - 2) / 2 - (diameter - 1) / 2;\n      palindromes.add(new String(S,index,diameter));\n      diameter-=2;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 57,
        "startColumnNumber" : 45,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int diameter=centers[i];\n  if (diameter >= 1) {\n    if (i % 2 == 1) {\n      while (diameter > 1) {\n        int index=(i - 1) / 2 - diameter / 2;\n        palindromes.add(new String(S,index,diameter));\n        diameter-=2;\n      }\n    }\n else {\n      while (diameter >= 1) {\n        int index=(i - 2) / 2 - (diameter - 1) / 2;\n        palindromes.add(new String(S,index,diameter));\n        diameter-=2;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < centers.length; i++) {\n  int diameter=centers[i];\n  if (diameter >= 1) {\n    if (i % 2 == 1) {\n      while (diameter > 1) {\n        int index=(i - 1) / 2 - diameter / 2;\n        palindromes.add(new String(S,index,diameter));\n        diameter-=2;\n      }\n    }\n else {\n      while (diameter >= 1) {\n        int index=(i - 2) / 2 - (diameter - 1) / 2;\n        palindromes.add(new String(S,index,diameter));\n        diameter-=2;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 52,
        "startColumnNumber" : 79,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] S=str.toCharArray();\n  int[] centers=manachers(S);\n  java.util.TreeSet<String> palindromes=new java.util.TreeSet<>();\n  for (int i=0; i < centers.length; i++) {\n    int diameter=centers[i];\n    if (diameter >= 1) {\n      if (i % 2 == 1) {\n        while (diameter > 1) {\n          int index=(i - 1) / 2 - diameter / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n else {\n        while (diameter >= 1) {\n          int index=(i - 2) / 2 - (diameter - 1) / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n    }\n  }\n  return palindromes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static java.util.TreeSet<String> findPalindromeSubstrings(String str){\n  char[] S=str.toCharArray();\n  int[] centers=manachers(S);\n  java.util.TreeSet<String> palindromes=new java.util.TreeSet<>();\n  for (int i=0; i < centers.length; i++) {\n    int diameter=centers[i];\n    if (diameter >= 1) {\n      if (i % 2 == 1) {\n        while (diameter > 1) {\n          int index=(i - 1) / 2 - diameter / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n else {\n        while (diameter >= 1) {\n          int index=(i - 2) / 2 - (diameter - 1) / 2;\n          palindromes.add(new String(S,index,diameter));\n          diameter-=2;\n        }\n      }\n    }\n  }\n  return palindromes;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 51
      },
      "nodeContext" : "int index=(i - 1) / 2 - diameter / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 9,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 64,
    "startColumnNumber" : 24,
    "endLineNumber" : 64,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}