{
  "id" : 76,
  "expression" : "metrics.generate()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/ManagedCursorMetricsTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "metrics.generate()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 58,
      "startColumnNumber" : 36,
      "endLineNumber" : 58,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 58,
        "startColumnNumber" : 22,
        "endLineNumber" : 58,
        "endColumnNumber" : 54
      },
      "nodeContext" : "metricsList=metrics.generate()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 55
      },
      "nodeContext" : "List<Metrics> metricsList=metrics.generate();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 51,
        "startColumnNumber" : 60,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testManagedCursorMetrics() throws Exception {\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 55
      },
      "nodeContext" : "List<Metrics> metricsList=metrics.generate();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.apache.pulsar.common.stats.Metrics>"
  }, {
    "nodeContext" : "metrics.generate()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 61,
      "startColumnNumber" : 22,
      "endLineNumber" : 61,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "metricsList=metrics.generate()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "metricsList=metrics.generate();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 51,
        "startColumnNumber" : 60,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testManagedCursorMetrics() throws Exception {\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 41
      },
      "nodeContext" : "metricsList=metrics.generate();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.apache.pulsar.common.stats.Metrics>"
  }, {
    "nodeContext" : "metrics.generate()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 84,
      "startColumnNumber" : 22,
      "endLineNumber" : 84,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 40
      },
      "nodeContext" : "metricsList=metrics.generate()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 41
      },
      "nodeContext" : "metricsList=metrics.generate();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 51,
        "startColumnNumber" : 60,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testManagedCursorMetrics() throws Exception {\n  final String subName=\"my-sub\";\n  final String topicName=\"persistent://my-namespace/use/my-ns/my-topic1\";\n  final int messageSize=10;\n  ManagedCursorMetrics metrics=new ManagedCursorMetrics(pulsar);\n  List<Metrics> metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  metricsList=metrics.generate();\n  Assert.assertTrue(metricsList.isEmpty());\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionType(SubscriptionType.Shared).ackTimeout(1,TimeUnit.SECONDS).subscriptionName(subName).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  for (  PulsarMockLedgerHandle ledgerHandle : mockBookKeeper.getLedgerMap().values()) {\n    ledgerHandle.close();\n  }\n  for (int i=0; i < messageSize; i++) {\n    String message=\"my-message-\" + i;\n    producer.send(message.getBytes());\n    consumer.acknowledge(consumer.receive().getMessageId());\n  }\n  metricsList=metrics.generate();\n  Assert.assertFalse(metricsList.isEmpty());\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerSucceed\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistLedgerErrors\"),0L);\n  Assert.assertNotEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperSucceed\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_persistZookeeperErrors\"),0L);\n  Assert.assertEquals(metricsList.get(0).getMetrics().get(\"brk_ml_cursor_nonContiguousDeletedMessagesRange\"),0L);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 249,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 41
      },
      "nodeContext" : "metricsList=metrics.generate();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.apache.pulsar.common.stats.Metrics>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 58,
    "startColumnNumber" : 36,
    "endLineNumber" : 58,
    "endColumnNumber" : 54
  }, {
    "charLength" : 18,
    "startLineNumber" : 61,
    "startColumnNumber" : 22,
    "endLineNumber" : 61,
    "endColumnNumber" : 40
  }, {
    "charLength" : 18,
    "startLineNumber" : 84,
    "startColumnNumber" : 22,
    "endLineNumber" : 84,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}