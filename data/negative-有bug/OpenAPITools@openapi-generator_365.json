{
  "id" : 365,
  "expression" : "(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name)",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CSharpNetCoreClientCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 100,
      "startLineNumber" : 612,
      "startColumnNumber" : 32,
      "endLineNumber" : 612,
      "endColumnNumber" : 132
    },
    "astNodeNumber" : 12,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 612,
        "startColumnNumber" : 15,
        "endLineNumber" : 612,
        "endColumnNumber" : 132
      },
      "nodeContext" : "inputFramework=(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 612,
        "startColumnNumber" : 8,
        "endLineNumber" : 612,
        "endColumnNumber" : 133
      },
      "nodeContext" : "String inputFramework=(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9885,
        "startLineNumber" : 544,
        "startColumnNumber" : 30,
        "endLineNumber" : 728,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.setLegacyDiscriminatorBehavior(false);\n  super.processOpts();\n  if (additionalProperties.containsKey(CodegenConstants.DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT)) {\n    this.setDisallowAdditionalPropertiesIfNotPresent(Boolean.parseBoolean(additionalProperties.get(CodegenConstants.DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT).toString()));\n  }\n  if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES)) {\n    setOptionalEmitDefaultValuesFlag(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES));\n  }\n else {\n    additionalProperties.put(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES,optionalEmitDefaultValuesFlag);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION)) {\n    setConditionalSerialization(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION));\n  }\n else {\n    additionalProperties.put(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION,conditionalSerialization);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.MODEL_PROPERTY_NAMING)) {\n    setModelPropertyNaming((String)additionalProperties.get(CodegenConstants.MODEL_PROPERTY_NAMING));\n  }\n  if (additionalProperties.containsKey((CodegenConstants.LICENSE_ID))) {\n    setLicenseId((String)additionalProperties.get(CodegenConstants.LICENSE_ID));\n  }\n  if (additionalProperties.containsKey(CodegenConstants.API_NAME)) {\n    setApiName((String)additionalProperties.get(CodegenConstants.API_NAME));\n  }\n else {\n    additionalProperties.put(CodegenConstants.API_NAME,apiName);\n  }\n  if (isEmpty(apiPackage)) {\n    setApiPackage(\"Api\");\n  }\n  if (isEmpty(modelPackage)) {\n    setModelPackage(\"Model\");\n  }\n  clientPackage=\"Client\";\n  if (GENERICHOST.equals(getLibrary())) {\n    setLibrary(GENERICHOST);\n    additionalProperties.put(\"useGenericHost\",true);\n  }\n else   if (RESTSHARP.equals(getLibrary())) {\n    additionalProperties.put(\"useRestSharp\",true);\n    needsCustomHttpMethod=true;\n  }\n else   if (HTTPCLIENT.equals(getLibrary())) {\n    setLibrary(HTTPCLIENT);\n    additionalProperties.put(\"useHttpClient\",true);\n    needsUriBuilder=true;\n  }\n else {\n    throw new RuntimeException(\"Invalid HTTP library \" + getLibrary() + \". Only restsharp, httpclient are supported.\");\n  }\n  String inputFramework=(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name);\n  String[] frameworks;\n  List<FrameworkStrategy> strategies=new ArrayList<>();\n  if (inputFramework.contains(\";\")) {\n    frameworks=inputFramework.split(\";\");\n    additionalProperties.put(\"multiTarget\",true);\n  }\n else {\n    frameworks=new String[]{inputFramework};\n  }\n  for (  String framework : frameworks) {\n    boolean strategyMatched=false;\n    for (    FrameworkStrategy frameworkStrategy : frameworkStrategies) {\n      if (framework.equals(frameworkStrategy.name)) {\n        strategies.add(frameworkStrategy);\n        strategyMatched=true;\n      }\n      if (frameworkStrategy != FrameworkStrategy.NETSTANDARD_2_0 && \"restsharp\".equals(getLibrary())) {\n        LOGGER.warn(\"If using built-in templates, RestSharp only supports netstandard 2.0 or later.\");\n      }\n    }\n    if (!strategyMatched) {\n      throw new IllegalArgumentException(\"The input (\" + inputFramework + \") contains Invalid .NET framework version: \"+ framework+ \". List of supported versions: \"+ frameworkStrategies.stream().map(p -> p.name).collect(Collectors.joining(\", \")));\n    }\n  }\n  configureAdditionalPropertiesForFrameworks(additionalProperties,strategies);\n  setTargetFrameworkNuget(strategies);\n  setTargetFramework(strategies);\n  setTestTargetFramework(strategies);\n  setSupportsAsync(Boolean.TRUE);\n  setNetStandard(strategies.stream().anyMatch(p -> Boolean.TRUE.equals(p.isNetStandard)));\n  if (!netStandard) {\n    setNetCoreProjectFileFlag(true);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.GENERATE_PROPERTY_CHANGED)) {\n    LOGGER.warn(\"{} is not supported in the .NET Standard generator.\",CodegenConstants.GENERATE_PROPERTY_CHANGED);\n    additionalProperties.remove(CodegenConstants.GENERATE_PROPERTY_CHANGED);\n  }\n  final AtomicReference<Boolean> excludeTests=new AtomicReference<>();\n  syncBooleanProperty(additionalProperties,CodegenConstants.EXCLUDE_TESTS,excludeTests::set,false);\n  syncStringProperty(additionalProperties,\"clientPackage\",(s) -> {\n  }\n,clientPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.API_PACKAGE,this::setApiPackage,apiPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.MODEL_PACKAGE,this::setModelPackage,modelPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.OPTIONAL_PROJECT_GUID,this::setPackageGuid,packageGuid);\n  syncStringProperty(additionalProperties,\"targetFrameworkNuget\",this::setTargetFrameworkNuget,this.targetFrameworkNuget);\n  syncStringProperty(additionalProperties,\"testTargetFramework\",this::setTestTargetFramework,this.testTargetFramework);\n  syncBooleanProperty(additionalProperties,\"netStandard\",this::setNetStandard,this.netStandard);\n  syncBooleanProperty(additionalProperties,CodegenConstants.VALIDATABLE,this::setValidatable,this.validatable);\n  syncBooleanProperty(additionalProperties,CodegenConstants.SUPPORTS_ASYNC,this::setSupportsAsync,this.supportsAsync);\n  syncBooleanProperty(additionalProperties,SUPPORTS_RETRY,this::setSupportsRetry,this.supportsRetry);\n  syncBooleanProperty(additionalProperties,CodegenConstants.OPTIONAL_METHOD_ARGUMENT,this::setOptionalMethodArgumentFlag,optionalMethodArgumentFlag);\n  syncBooleanProperty(additionalProperties,CodegenConstants.NON_PUBLIC_API,this::setNonPublicApi,isNonPublicApi());\n  syncBooleanProperty(additionalProperties,CodegenConstants.USE_ONEOF_DISCRIMINATOR_LOOKUP,this::setUseOneOfDiscriminatorLookup,this.useOneOfDiscriminatorLookup);\n  final String testPackageName=testPackageName();\n  String packageFolder=sourceFolder + File.separator + packageName;\n  String clientPackageDir=packageFolder + File.separator + clientPackage;\n  String modelPackageDir=packageFolder + File.separator + modelPackage;\n  String testPackageFolder=testFolder + File.separator + testPackageName;\n  additionalProperties.put(\"testPackageName\",testPackageName);\n  int packageDepth=packageFolder.length() - packageFolder.replace(java.io.File.separator,\"\").length();\n  String binRelativePath=\"..\\\\\";\n  for (int i=0; i < packageDepth; i=i + 1) {\n    binRelativePath+=\"..\\\\\";\n  }\n  binRelativePath+=\"vendor\";\n  additionalProperties.put(\"binRelativePath\",binRelativePath);\n  if (Boolean.FALSE.equals(excludeTests.get())) {\n    modelTestTemplateFiles.put(\"model_test.mustache\",\".cs\");\n    apiTestTemplateFiles.put(\"api_test.mustache\",\".cs\");\n  }\n  if (HTTPCLIENT.equals(getLibrary())) {\n    supportingFiles.add(new SupportingFile(\"FileParameter.mustache\",clientPackageDir,\"FileParameter.cs\"));\n    typeMapping.put(\"file\",\"FileParameter\");\n    addRestSharpSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath);\n    additionalProperties.put(\"modelDocPath\",modelDocPath);\n  }\n else   if (GENERICHOST.equals(getLibrary())) {\n    addGenericHostSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath + File.separatorChar + \"apis\");\n    additionalProperties.put(\"modelDocPath\",modelDocPath + File.separatorChar + \"models\");\n  }\n else {\n    addRestSharpSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath);\n    additionalProperties.put(\"modelDocPath\",modelDocPath);\n  }\n  addTestInstructions();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 879,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9925,
        "startLineNumber" : 543,
        "startColumnNumber" : 4,
        "endLineNumber" : 728,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  this.setLegacyDiscriminatorBehavior(false);\n  super.processOpts();\n  if (additionalProperties.containsKey(CodegenConstants.DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT)) {\n    this.setDisallowAdditionalPropertiesIfNotPresent(Boolean.parseBoolean(additionalProperties.get(CodegenConstants.DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT).toString()));\n  }\n  if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES)) {\n    setOptionalEmitDefaultValuesFlag(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES));\n  }\n else {\n    additionalProperties.put(CodegenConstants.OPTIONAL_EMIT_DEFAULT_VALUES,optionalEmitDefaultValuesFlag);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION)) {\n    setConditionalSerialization(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION));\n  }\n else {\n    additionalProperties.put(CodegenConstants.OPTIONAL_CONDITIONAL_SERIALIZATION,conditionalSerialization);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.MODEL_PROPERTY_NAMING)) {\n    setModelPropertyNaming((String)additionalProperties.get(CodegenConstants.MODEL_PROPERTY_NAMING));\n  }\n  if (additionalProperties.containsKey((CodegenConstants.LICENSE_ID))) {\n    setLicenseId((String)additionalProperties.get(CodegenConstants.LICENSE_ID));\n  }\n  if (additionalProperties.containsKey(CodegenConstants.API_NAME)) {\n    setApiName((String)additionalProperties.get(CodegenConstants.API_NAME));\n  }\n else {\n    additionalProperties.put(CodegenConstants.API_NAME,apiName);\n  }\n  if (isEmpty(apiPackage)) {\n    setApiPackage(\"Api\");\n  }\n  if (isEmpty(modelPackage)) {\n    setModelPackage(\"Model\");\n  }\n  clientPackage=\"Client\";\n  if (GENERICHOST.equals(getLibrary())) {\n    setLibrary(GENERICHOST);\n    additionalProperties.put(\"useGenericHost\",true);\n  }\n else   if (RESTSHARP.equals(getLibrary())) {\n    additionalProperties.put(\"useRestSharp\",true);\n    needsCustomHttpMethod=true;\n  }\n else   if (HTTPCLIENT.equals(getLibrary())) {\n    setLibrary(HTTPCLIENT);\n    additionalProperties.put(\"useHttpClient\",true);\n    needsUriBuilder=true;\n  }\n else {\n    throw new RuntimeException(\"Invalid HTTP library \" + getLibrary() + \". Only restsharp, httpclient are supported.\");\n  }\n  String inputFramework=(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name);\n  String[] frameworks;\n  List<FrameworkStrategy> strategies=new ArrayList<>();\n  if (inputFramework.contains(\";\")) {\n    frameworks=inputFramework.split(\";\");\n    additionalProperties.put(\"multiTarget\",true);\n  }\n else {\n    frameworks=new String[]{inputFramework};\n  }\n  for (  String framework : frameworks) {\n    boolean strategyMatched=false;\n    for (    FrameworkStrategy frameworkStrategy : frameworkStrategies) {\n      if (framework.equals(frameworkStrategy.name)) {\n        strategies.add(frameworkStrategy);\n        strategyMatched=true;\n      }\n      if (frameworkStrategy != FrameworkStrategy.NETSTANDARD_2_0 && \"restsharp\".equals(getLibrary())) {\n        LOGGER.warn(\"If using built-in templates, RestSharp only supports netstandard 2.0 or later.\");\n      }\n    }\n    if (!strategyMatched) {\n      throw new IllegalArgumentException(\"The input (\" + inputFramework + \") contains Invalid .NET framework version: \"+ framework+ \". List of supported versions: \"+ frameworkStrategies.stream().map(p -> p.name).collect(Collectors.joining(\", \")));\n    }\n  }\n  configureAdditionalPropertiesForFrameworks(additionalProperties,strategies);\n  setTargetFrameworkNuget(strategies);\n  setTargetFramework(strategies);\n  setTestTargetFramework(strategies);\n  setSupportsAsync(Boolean.TRUE);\n  setNetStandard(strategies.stream().anyMatch(p -> Boolean.TRUE.equals(p.isNetStandard)));\n  if (!netStandard) {\n    setNetCoreProjectFileFlag(true);\n  }\n  if (additionalProperties.containsKey(CodegenConstants.GENERATE_PROPERTY_CHANGED)) {\n    LOGGER.warn(\"{} is not supported in the .NET Standard generator.\",CodegenConstants.GENERATE_PROPERTY_CHANGED);\n    additionalProperties.remove(CodegenConstants.GENERATE_PROPERTY_CHANGED);\n  }\n  final AtomicReference<Boolean> excludeTests=new AtomicReference<>();\n  syncBooleanProperty(additionalProperties,CodegenConstants.EXCLUDE_TESTS,excludeTests::set,false);\n  syncStringProperty(additionalProperties,\"clientPackage\",(s) -> {\n  }\n,clientPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.API_PACKAGE,this::setApiPackage,apiPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.MODEL_PACKAGE,this::setModelPackage,modelPackage);\n  syncStringProperty(additionalProperties,CodegenConstants.OPTIONAL_PROJECT_GUID,this::setPackageGuid,packageGuid);\n  syncStringProperty(additionalProperties,\"targetFrameworkNuget\",this::setTargetFrameworkNuget,this.targetFrameworkNuget);\n  syncStringProperty(additionalProperties,\"testTargetFramework\",this::setTestTargetFramework,this.testTargetFramework);\n  syncBooleanProperty(additionalProperties,\"netStandard\",this::setNetStandard,this.netStandard);\n  syncBooleanProperty(additionalProperties,CodegenConstants.VALIDATABLE,this::setValidatable,this.validatable);\n  syncBooleanProperty(additionalProperties,CodegenConstants.SUPPORTS_ASYNC,this::setSupportsAsync,this.supportsAsync);\n  syncBooleanProperty(additionalProperties,SUPPORTS_RETRY,this::setSupportsRetry,this.supportsRetry);\n  syncBooleanProperty(additionalProperties,CodegenConstants.OPTIONAL_METHOD_ARGUMENT,this::setOptionalMethodArgumentFlag,optionalMethodArgumentFlag);\n  syncBooleanProperty(additionalProperties,CodegenConstants.NON_PUBLIC_API,this::setNonPublicApi,isNonPublicApi());\n  syncBooleanProperty(additionalProperties,CodegenConstants.USE_ONEOF_DISCRIMINATOR_LOOKUP,this::setUseOneOfDiscriminatorLookup,this.useOneOfDiscriminatorLookup);\n  final String testPackageName=testPackageName();\n  String packageFolder=sourceFolder + File.separator + packageName;\n  String clientPackageDir=packageFolder + File.separator + clientPackage;\n  String modelPackageDir=packageFolder + File.separator + modelPackage;\n  String testPackageFolder=testFolder + File.separator + testPackageName;\n  additionalProperties.put(\"testPackageName\",testPackageName);\n  int packageDepth=packageFolder.length() - packageFolder.replace(java.io.File.separator,\"\").length();\n  String binRelativePath=\"..\\\\\";\n  for (int i=0; i < packageDepth; i=i + 1) {\n    binRelativePath+=\"..\\\\\";\n  }\n  binRelativePath+=\"vendor\";\n  additionalProperties.put(\"binRelativePath\",binRelativePath);\n  if (Boolean.FALSE.equals(excludeTests.get())) {\n    modelTestTemplateFiles.put(\"model_test.mustache\",\".cs\");\n    apiTestTemplateFiles.put(\"api_test.mustache\",\".cs\");\n  }\n  if (HTTPCLIENT.equals(getLibrary())) {\n    supportingFiles.add(new SupportingFile(\"FileParameter.mustache\",clientPackageDir,\"FileParameter.cs\"));\n    typeMapping.put(\"file\",\"FileParameter\");\n    addRestSharpSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath);\n    additionalProperties.put(\"modelDocPath\",modelDocPath);\n  }\n else   if (GENERICHOST.equals(getLibrary())) {\n    addGenericHostSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath + File.separatorChar + \"apis\");\n    additionalProperties.put(\"modelDocPath\",modelDocPath + File.separatorChar + \"models\");\n  }\n else {\n    addRestSharpSupportingFiles(clientPackageDir,packageFolder,excludeTests,testPackageFolder,testPackageName,modelPackageDir);\n    additionalProperties.put(\"apiDocPath\",apiDocPath);\n    additionalProperties.put(\"modelDocPath\",modelDocPath);\n  }\n  addTestInstructions();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 885,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 612,
        "startColumnNumber" : 8,
        "endLineNumber" : 612,
        "endColumnNumber" : 133
      },
      "nodeContext" : "String inputFramework=(String)additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK,defaultFramework.name);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 100,
    "startLineNumber" : 612,
    "startColumnNumber" : 32,
    "endLineNumber" : 612,
    "endColumnNumber" : 132
  } ],
  "layoutRelationDataList" : [ ]
}