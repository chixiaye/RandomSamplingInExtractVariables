{
  "id" : 381,
  "expression" : "\" @GlideExtension is using a legacy\"",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsExtensionGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" @GlideExtension is using a legacy\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 66,
      "startColumnNumber" : 16,
      "endLineNumber" : 66,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 69,
        "endColumnNumber" : 27
      },
      "nodeContext" : "\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 500,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 28
      },
      "nodeContext" : "new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 507,
        "startLineNumber" : 61,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 29
      },
      "nodeContext" : "throw new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 60,
        "startColumnNumber" : 60,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (element.getReturnType().getKind() == TypeKind.VOID) {\n  throw new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3392,
        "startLineNumber" : 58,
        "startColumnNumber" : 90,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (element.getReturnType().getKind() == TypeKind.VOID) {\n    throw new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\");\n  }\n  int overrideType=processorUtil.getOverrideType(element);\n  String methodName=element.getSimpleName().toString();\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC).addJavadoc(processorUtil.generateSeeMethodJavadoc(element)).varargs(element.isVarArgs()).returns(containingClassName).addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember(\"value\",\"$S\",\"unchecked\").build());\n  List<? extends VariableElement> paramElements=element.getParameters().subList(1,element.getParameters().size());\n  List<ParameterSpec> parameters=processorUtil.getParameters(paramElements);\n  builder.addParameters(parameters);\n  String extensionRequestOptionsArgument;\n  if (overrideType == OVERRIDE_EXTEND) {\n    builder.addJavadoc(processorUtil.generateSeeMethodJavadoc(containingClassName,methodName,paramElements)).addAnnotation(Override.class);\n    List<Object> methodArgs=new ArrayList<>();\n    methodArgs.add(element.getSimpleName().toString());\n    StringBuilder methodLiterals=new StringBuilder();\n    if (!parameters.isEmpty()) {\n      for (      ParameterSpec parameter : parameters) {\n        methodLiterals.append(\"$L, \");\n        methodArgs.add(parameter.name);\n      }\n      methodLiterals=new StringBuilder(methodLiterals.substring(0,methodLiterals.length() - 2));\n    }\n    extensionRequestOptionsArgument=CodeBlock.builder().add(\"super.$N(\" + methodLiterals + \")\",methodArgs.toArray(new Object[0])).build().toString();\n  }\n else {\n    extensionRequestOptionsArgument=\"this\";\n  }\n  List<Object> args=new ArrayList<>();\n  StringBuilder code=new StringBuilder(\"return ($T) $T.$L($L, \");\n  args.add(containingClassName);\n  args.add(ClassName.get(element.getEnclosingElement().asType()));\n  args.add(element.getSimpleName().toString());\n  args.add(extensionRequestOptionsArgument);\n  if (!parameters.isEmpty()) {\n    for (    ParameterSpec parameter : parameters) {\n      code.append(\"$L, \");\n      args.add(parameter.name);\n    }\n  }\n  code=new StringBuilder(code.substring(0,code.length() - 2));\n  code.append(\")\");\n  builder.addStatement(code.toString(),args.toArray(new Object[0]));\n  builder.addAnnotation(processorUtil.checkResult()).addAnnotation(processorUtil.nonNull());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3480,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private MethodSpec generateMethodsForRequestOptionsExtension(ExecutableElement element){\n  if (element.getReturnType().getKind() == TypeKind.VOID) {\n    throw new IllegalArgumentException(\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\");\n  }\n  int overrideType=processorUtil.getOverrideType(element);\n  String methodName=element.getSimpleName().toString();\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC).addJavadoc(processorUtil.generateSeeMethodJavadoc(element)).varargs(element.isVarArgs()).returns(containingClassName).addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember(\"value\",\"$S\",\"unchecked\").build());\n  List<? extends VariableElement> paramElements=element.getParameters().subList(1,element.getParameters().size());\n  List<ParameterSpec> parameters=processorUtil.getParameters(paramElements);\n  builder.addParameters(parameters);\n  String extensionRequestOptionsArgument;\n  if (overrideType == OVERRIDE_EXTEND) {\n    builder.addJavadoc(processorUtil.generateSeeMethodJavadoc(containingClassName,methodName,paramElements)).addAnnotation(Override.class);\n    List<Object> methodArgs=new ArrayList<>();\n    methodArgs.add(element.getSimpleName().toString());\n    StringBuilder methodLiterals=new StringBuilder();\n    if (!parameters.isEmpty()) {\n      for (      ParameterSpec parameter : parameters) {\n        methodLiterals.append(\"$L, \");\n        methodArgs.add(parameter.name);\n      }\n      methodLiterals=new StringBuilder(methodLiterals.substring(0,methodLiterals.length() - 2));\n    }\n    extensionRequestOptionsArgument=CodeBlock.builder().add(\"super.$N(\" + methodLiterals + \")\",methodArgs.toArray(new Object[0])).build().toString();\n  }\n else {\n    extensionRequestOptionsArgument=\"this\";\n  }\n  List<Object> args=new ArrayList<>();\n  StringBuilder code=new StringBuilder(\"return ($T) $T.$L($L, \");\n  args.add(containingClassName);\n  args.add(ClassName.get(element.getEnclosingElement().asType()));\n  args.add(element.getSimpleName().toString());\n  args.add(extensionRequestOptionsArgument);\n  if (!parameters.isEmpty()) {\n    for (    ParameterSpec parameter : parameters) {\n      code.append(\"$L, \");\n      args.add(parameter.name);\n    }\n  }\n  code=new StringBuilder(code.substring(0,code.length() - 2));\n  code.append(\")\");\n  builder.addStatement(code.toString(),args.toArray(new Object[0]));\n  builder.addAnnotation(processorUtil.checkResult()).addAnnotation(processorUtil.nonNull());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 393,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 69,
        "endColumnNumber" : 27
      },
      "nodeContext" : "\"The \" + element.getSimpleName() + \" method annotated with @GlideOption in the \"+ element.getEnclosingElement().getSimpleName()+ \" @GlideExtension is using a legacy\"+ \" format that is no longer supported. Please change your method definition so that\"+ \" your @GlideModule annotated methods return BaseRequestOptions<?> objects instead\"+ \" of null.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 66,
    "startColumnNumber" : 16,
    "endLineNumber" : 66,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}