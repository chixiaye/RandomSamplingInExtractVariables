{
  "id" : 456,
  "expression" : "0",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/Generator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 74,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 17
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 17
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 74,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < equeue.errors.size(); i++) {\n  ANTLRMessage msg=equeue.errors.get(i);\n  ST msgST=antlr.errMgr.getMessageTemplate(msg);\n  errors.add(msgST.render());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 73,
        "startColumnNumber" : 54,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < equeue.errors.size(); i++) {\n    ANTLRMessage msg=equeue.errors.get(i);\n    ST msgST=antlr.errMgr.getMessageTemplate(msg);\n    errors.add(msgST.render());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!defaultListener && !equeue.errors.isEmpty()) {\n  for (int i=0; i < equeue.errors.size(); i++) {\n    ANTLRMessage msg=equeue.errors.get(i);\n    ST msgST=antlr.errMgr.getMessageTemplate(msg);\n    errors.add(msgST.render());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 41,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final List<String> options=new ArrayList<>();\n  Collections.addAll(options,extraOptions);\n  if (targetName != null) {\n    options.add(\"-Dlanguage=\" + targetName);\n  }\n  if (!options.contains(\"-o\")) {\n    options.add(\"-o\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-lib\")) {\n    options.add(\"-lib\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-encoding\")) {\n    options.add(\"-encoding\");\n    options.add(\"UTF-8\");\n  }\n  options.add(new File(workdir,grammarFileName).toString());\n  final String[] optionsA=new String[options.size()];\n  options.toArray(optionsA);\n  Tool antlr=new Tool(optionsA);\n  ErrorQueue equeue=new ErrorQueue(antlr);\n  antlr.addListener(equeue);\n  if (defaultListener) {\n    antlr.addListener(new DefaultToolListener(antlr));\n  }\n  antlr.processGrammarsOnCommandLine();\n  List<String> errors=new ArrayList<>();\n  if (!defaultListener && !equeue.errors.isEmpty()) {\n    for (int i=0; i < equeue.errors.size(); i++) {\n      ANTLRMessage msg=equeue.errors.get(i);\n      ST msgST=antlr.errMgr.getMessageTemplate(msg);\n      errors.add(msgST.render());\n    }\n  }\n  if (!defaultListener && !equeue.warnings.isEmpty()) {\n    for (int i=0; i < equeue.warnings.size(); i++) {\n      ANTLRMessage msg=equeue.warnings.get(i);\n    }\n  }\n  return equeue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Run ANTLR on stuff in workdir and error queue back \n */\npublic static ErrorQueue antlrOnString(String workdir,String targetName,String grammarFileName,boolean defaultListener,String... extraOptions){\n  final List<String> options=new ArrayList<>();\n  Collections.addAll(options,extraOptions);\n  if (targetName != null) {\n    options.add(\"-Dlanguage=\" + targetName);\n  }\n  if (!options.contains(\"-o\")) {\n    options.add(\"-o\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-lib\")) {\n    options.add(\"-lib\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-encoding\")) {\n    options.add(\"-encoding\");\n    options.add(\"UTF-8\");\n  }\n  options.add(new File(workdir,grammarFileName).toString());\n  final String[] optionsA=new String[options.size()];\n  options.toArray(optionsA);\n  Tool antlr=new Tool(optionsA);\n  ErrorQueue equeue=new ErrorQueue(antlr);\n  antlr.addListener(equeue);\n  if (defaultListener) {\n    antlr.addListener(new DefaultToolListener(antlr));\n  }\n  antlr.processGrammarsOnCommandLine();\n  List<String> errors=new ArrayList<>();\n  if (!defaultListener && !equeue.errors.isEmpty()) {\n    for (int i=0; i < equeue.errors.size(); i++) {\n      ANTLRMessage msg=equeue.errors.get(i);\n      ST msgST=antlr.errMgr.getMessageTemplate(msg);\n      errors.add(msgST.render());\n    }\n  }\n  if (!defaultListener && !equeue.warnings.isEmpty()) {\n    for (int i=0; i < equeue.warnings.size(); i++) {\n      ANTLRMessage msg=equeue.warnings.get(i);\n    }\n  }\n  return equeue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 17
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 16,
      "endLineNumber" : 81,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 81,
        "startColumnNumber" : 3,
        "endLineNumber" : 84,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < equeue.warnings.size(); i++) {\n  ANTLRMessage msg=equeue.warnings.get(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 80,
        "startColumnNumber" : 56,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < equeue.warnings.size(); i++) {\n    ANTLRMessage msg=equeue.warnings.get(i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!defaultListener && !equeue.warnings.isEmpty()) {\n  for (int i=0; i < equeue.warnings.size(); i++) {\n    ANTLRMessage msg=equeue.warnings.get(i);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 41,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final List<String> options=new ArrayList<>();\n  Collections.addAll(options,extraOptions);\n  if (targetName != null) {\n    options.add(\"-Dlanguage=\" + targetName);\n  }\n  if (!options.contains(\"-o\")) {\n    options.add(\"-o\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-lib\")) {\n    options.add(\"-lib\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-encoding\")) {\n    options.add(\"-encoding\");\n    options.add(\"UTF-8\");\n  }\n  options.add(new File(workdir,grammarFileName).toString());\n  final String[] optionsA=new String[options.size()];\n  options.toArray(optionsA);\n  Tool antlr=new Tool(optionsA);\n  ErrorQueue equeue=new ErrorQueue(antlr);\n  antlr.addListener(equeue);\n  if (defaultListener) {\n    antlr.addListener(new DefaultToolListener(antlr));\n  }\n  antlr.processGrammarsOnCommandLine();\n  List<String> errors=new ArrayList<>();\n  if (!defaultListener && !equeue.errors.isEmpty()) {\n    for (int i=0; i < equeue.errors.size(); i++) {\n      ANTLRMessage msg=equeue.errors.get(i);\n      ST msgST=antlr.errMgr.getMessageTemplate(msg);\n      errors.add(msgST.render());\n    }\n  }\n  if (!defaultListener && !equeue.warnings.isEmpty()) {\n    for (int i=0; i < equeue.warnings.size(); i++) {\n      ANTLRMessage msg=equeue.warnings.get(i);\n    }\n  }\n  return equeue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Run ANTLR on stuff in workdir and error queue back \n */\npublic static ErrorQueue antlrOnString(String workdir,String targetName,String grammarFileName,boolean defaultListener,String... extraOptions){\n  final List<String> options=new ArrayList<>();\n  Collections.addAll(options,extraOptions);\n  if (targetName != null) {\n    options.add(\"-Dlanguage=\" + targetName);\n  }\n  if (!options.contains(\"-o\")) {\n    options.add(\"-o\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-lib\")) {\n    options.add(\"-lib\");\n    options.add(workdir);\n  }\n  if (!options.contains(\"-encoding\")) {\n    options.add(\"-encoding\");\n    options.add(\"UTF-8\");\n  }\n  options.add(new File(workdir,grammarFileName).toString());\n  final String[] optionsA=new String[options.size()];\n  options.toArray(optionsA);\n  Tool antlr=new Tool(optionsA);\n  ErrorQueue equeue=new ErrorQueue(antlr);\n  antlr.addListener(equeue);\n  if (defaultListener) {\n    antlr.addListener(new DefaultToolListener(antlr));\n  }\n  antlr.processGrammarsOnCommandLine();\n  List<String> errors=new ArrayList<>();\n  if (!defaultListener && !equeue.errors.isEmpty()) {\n    for (int i=0; i < equeue.errors.size(); i++) {\n      ANTLRMessage msg=equeue.errors.get(i);\n      ST msgST=antlr.errMgr.getMessageTemplate(msg);\n      errors.add(msgST.render());\n    }\n  }\n  if (!defaultListener && !equeue.warnings.isEmpty()) {\n    for (int i=0; i < equeue.warnings.size(); i++) {\n      ANTLRMessage msg=equeue.warnings.get(i);\n    }\n  }\n  return equeue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 74,
    "endColumnNumber" : 17
  }, {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 16,
    "endLineNumber" : 81,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}