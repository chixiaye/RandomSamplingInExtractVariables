{
  "id" : 315,
  "expression" : "earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskRunner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 136,
      "startLineNumber" : 131,
      "startColumnNumber" : 12,
      "endLineNumber" : 132,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 14,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n  if (task.getTuningConfig().isResetOffsetAutomatically()) {\n    log.info(\"Attempting to reset sequences automatically for all partitions\");\n    try {\n      sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n    }\n catch (    IOException e) {\n      throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n    }\n  }\n else {\n    throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 128,
        "startColumnNumber" : 71,
        "endLineNumber" : 154,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String sequence=currOffsets.get(streamPartition.getPartitionId());\n  String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n  if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n    if (task.getTuningConfig().isResetOffsetAutomatically()) {\n      log.info(\"Attempting to reset sequences automatically for all partitions\");\n      try {\n        sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n      }\n catch (      IOException e) {\n        throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n      }\n    }\n else {\n      throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1311,
        "startLineNumber" : 128,
        "startColumnNumber" : 6,
        "endLineNumber" : 154,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (final StreamPartition<String> streamPartition : assignment) {\n  String sequence=currOffsets.get(streamPartition.getPartitionId());\n  String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n  if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n    if (task.getTuningConfig().isResetOffsetAutomatically()) {\n      log.info(\"Attempting to reset sequences automatically for all partitions\");\n      try {\n        sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n      }\n catch (      IOException e) {\n        throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n      }\n    }\n else {\n      throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 126,
        "startColumnNumber" : 73,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ConcurrentMap<String,String> currOffsets=getCurrentOffsets();\n  for (  final StreamPartition<String> streamPartition : assignment) {\n    String sequence=currOffsets.get(streamPartition.getPartitionId());\n    String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n    if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n      if (task.getTuningConfig().isResetOffsetAutomatically()) {\n        log.info(\"Attempting to reset sequences automatically for all partitions\");\n        try {\n          sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n        }\n catch (        IOException e) {\n          throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n        }\n      }\n else {\n        throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1471,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!task.getTuningConfig().isSkipSequenceNumberAvailabilityCheck()) {\n  final ConcurrentMap<String,String> currOffsets=getCurrentOffsets();\n  for (  final StreamPartition<String> streamPartition : assignment) {\n    String sequence=currOffsets.get(streamPartition.getPartitionId());\n    String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n    if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n      if (task.getTuningConfig().isResetOffsetAutomatically()) {\n        log.info(\"Attempting to reset sequences automatically for all partitions\");\n        try {\n          sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n        }\n catch (        IOException e) {\n          throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n        }\n      }\n else {\n        throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!task.getTuningConfig().isSkipSequenceNumberAvailabilityCheck()) {\n    final ConcurrentMap<String,String> currOffsets=getCurrentOffsets();\n    for (    final StreamPartition<String> streamPartition : assignment) {\n      String sequence=currOffsets.get(streamPartition.getPartitionId());\n      String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n      if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n        if (task.getTuningConfig().isResetOffsetAutomatically()) {\n          log.info(\"Attempting to reset sequences automatically for all partitions\");\n          try {\n            sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n          }\n catch (          IOException e) {\n            throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n          }\n        }\n else {\n          throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void possiblyResetDataSourceMetadata(TaskToolbox toolbox,RecordSupplier<String,String,ByteEntity> recordSupplier,Set<StreamPartition<String>> assignment){\n  if (!task.getTuningConfig().isSkipSequenceNumberAvailabilityCheck()) {\n    final ConcurrentMap<String,String> currOffsets=getCurrentOffsets();\n    for (    final StreamPartition<String> streamPartition : assignment) {\n      String sequence=currOffsets.get(streamPartition.getPartitionId());\n      String earliestSequenceNumber=recordSupplier.getEarliestSequenceNumber(streamPartition);\n      if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n        if (task.getTuningConfig().isResetOffsetAutomatically()) {\n          log.info(\"Attempting to reset sequences automatically for all partitions\");\n          try {\n            sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n          }\n catch (          IOException e) {\n            throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n          }\n        }\n else {\n          throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (earliestSequenceNumber == null || createSequenceNumber(earliestSequenceNumber).compareTo(createSequenceNumber(sequence)) > 0) {\n  if (task.getTuningConfig().isResetOffsetAutomatically()) {\n    log.info(\"Attempting to reset sequences automatically for all partitions\");\n    try {\n      sendResetRequestAndWait(assignment.stream().collect(Collectors.toMap(x -> x,x -> currOffsets.get(x.getPartitionId()))),toolbox);\n    }\n catch (    IOException e) {\n      throw new ISE(e,\"Exception while attempting to automatically reset sequences\");\n    }\n  }\n else {\n    throw new ISE(\"Starting sequenceNumber [%s] is no longer available for partition [%s] (earliest: [%s]) and resetOffsetAutomatically is not enabled\",sequence,streamPartition.getPartitionId(),earliestSequenceNumber);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 14
    },
    "tokenLength" : 11,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 136,
    "startLineNumber" : 131,
    "startColumnNumber" : 12,
    "endLineNumber" : 132,
    "endColumnNumber" : 105
  } ],
  "layoutRelationDataList" : [ ]
}