{
  "id" : 454,
  "expression" : "null",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/queue/MpscLinkedQueue.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 77,
      "startColumnNumber" : 24,
      "endLineNumber" : 77,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "nextNode != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (nextNode != null) {\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n else if (currConsumerNode != lvProducerNode()) {\n  while ((nextNode=currConsumerNode.lvNext()) == null)   ;\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * {@inheritDoc} <br><p> IMPLEMENTATION NOTES:<br> Poll is allowed from a SINGLE thread.<br> Poll reads the next node from the consumerNode and: <ol> <li>If it is null, the queue is assumed empty (though it might not be). <li>If it is not null set it as the consumer node and return it's now evacuated value. </ol> This means the consumerNode.value is always null, which is also the starting point for the queue. Because null values are not allowed to be offered this is the only node with it's value set to null at any one time.\n * @see java.util.Queue#poll()\n */\n@Override public T poll(){\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "nextNode != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 85,
      "startColumnNumber" : 60,
      "endLineNumber" : 85,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 85,
        "startColumnNumber" : 18,
        "endLineNumber" : 85,
        "endColumnNumber" : 64
      },
      "nodeContext" : "(nextNode=currConsumerNode.lvNext()) == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "while ((nextNode=currConsumerNode.lvNext()) == null) ;\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 83,
        "startColumnNumber" : 55,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while ((nextNode=currConsumerNode.lvNext()) == null)   ;\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 83,
        "startColumnNumber" : 13,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currConsumerNode != lvProducerNode()) {\n  while ((nextNode=currConsumerNode.lvNext()) == null)   ;\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (nextNode != null) {\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n else if (currConsumerNode != lvProducerNode()) {\n  while ((nextNode=currConsumerNode.lvNext()) == null)   ;\n  final T nextValue=nextNode.getAndNullValue();\n  spConsumerNode(nextNode);\n  return nextValue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * {@inheritDoc} <br><p> IMPLEMENTATION NOTES:<br> Poll is allowed from a SINGLE thread.<br> Poll reads the next node from the consumerNode and: <ol> <li>If it is null, the queue is assumed empty (though it might not be). <li>If it is not null set it as the consumer node and return it's now evacuated value. </ol> This means the consumerNode.value is always null, which is also the starting point for the queue. Because null values are not allowed to be offered this is the only node with it's value set to null at any one time.\n * @see java.util.Queue#poll()\n */\n@Override public T poll(){\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "while ((nextNode=currConsumerNode.lvNext()) == null) ;\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 93,
      "startColumnNumber" : 15,
      "endLineNumber" : 93,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * {@inheritDoc} <br><p> IMPLEMENTATION NOTES:<br> Poll is allowed from a SINGLE thread.<br> Poll reads the next node from the consumerNode and: <ol> <li>If it is null, the queue is assumed empty (though it might not be). <li>If it is not null set it as the consumer node and return it's now evacuated value. </ol> This means the consumerNode.value is always null, which is also the starting point for the queue. Because null values are not allowed to be offered this is the only node with it's value set to null at any one time.\n * @see java.util.Queue#poll()\n */\n@Override public T poll(){\n  LinkedQueueNode<T> currConsumerNode=lpConsumerNode();\n  LinkedQueueNode<T> nextNode=currConsumerNode.lvNext();\n  if (nextNode != null) {\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n else   if (currConsumerNode != lvProducerNode()) {\n    while ((nextNode=currConsumerNode.lvNext()) == null)     ;\n    final T nextValue=nextNode.getAndNullValue();\n    spConsumerNode(nextNode);\n    return nextValue;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 77,
    "startColumnNumber" : 24,
    "endLineNumber" : 77,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 85,
    "startColumnNumber" : 60,
    "endLineNumber" : 85,
    "endColumnNumber" : 64
  }, {
    "charLength" : 4,
    "startLineNumber" : 93,
    "startColumnNumber" : 15,
    "endLineNumber" : 93,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}