{
  "id" : 34,
  "expression" : "!connectionManager.register(connectionId,connection)",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/core/src/main/java/com/alibaba/nacos/core/remote/grpc/GrpcBiStreamRequestAcceptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!connectionManager.register(connectionId,connection)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 121,
      "startColumnNumber" : 36,
      "endLineNumber" : 121,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 121,
        "endColumnNumber" : 89
      },
      "nodeContext" : "!started || !connectionManager.register(connectionId,connection)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 121,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!started || !connectionManager.register(connectionId,connection)) {\n  try {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Connection register fail,reason:{}\",connectionId,started ? \" server is not started\" : \" server is over limited.\");\n    connection.request(new ConnectResetRequest(),3000L);\n    connection.close();\n  }\n catch (  Exception e) {\n    if (connectionManager.traced(clientIp)) {\n      Loggers.REMOTE_DIGEST.warn(\"[{}]Send connect reset request error,error={}\",connectionId,e);\n    }\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1919,
        "startLineNumber" : 108,
        "startColumnNumber" : 64,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ConnectionSetupRequest setUpRequest=(ConnectionSetupRequest)parseObj;\n  Map<String,String> labels=setUpRequest.getLabels();\n  String appName=\"-\";\n  if (labels != null && labels.containsKey(Constants.APPNAME)) {\n    appName=labels.get(Constants.APPNAME);\n  }\n  ConnectionMeta metaInfo=new ConnectionMeta(connectionId,clientIp,clientPort,localPort,ConnectionType.GRPC.getType(),setUpRequest.getClientVersion(),appName,setUpRequest.getLabels());\n  Connection connection=new GrpcConnection(metaInfo,responseObserver,CONTEXT_KEY_CHANNEL.get());\n  boolean started=ApplicationUtils.isStarted();\n  if (!started || !connectionManager.register(connectionId,connection)) {\n    try {\n      Loggers.REMOTE_DIGEST.warn(\"[{}]Connection register fail,reason:{}\",connectionId,started ? \" server is not started\" : \" server is over limited.\");\n      connection.request(new ConnectResetRequest(),3000L);\n      connection.close();\n    }\n catch (    Exception e) {\n      if (connectionManager.traced(clientIp)) {\n        Loggers.REMOTE_DIGEST.warn(\"[{}]Send connect reset request error,error={}\",connectionId,e);\n      }\n    }\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2766,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (parseObj instanceof ConnectionSetupRequest) {\n  ConnectionSetupRequest setUpRequest=(ConnectionSetupRequest)parseObj;\n  Map<String,String> labels=setUpRequest.getLabels();\n  String appName=\"-\";\n  if (labels != null && labels.containsKey(Constants.APPNAME)) {\n    appName=labels.get(Constants.APPNAME);\n  }\n  ConnectionMeta metaInfo=new ConnectionMeta(connectionId,clientIp,clientPort,localPort,ConnectionType.GRPC.getType(),setUpRequest.getClientVersion(),appName,setUpRequest.getLabels());\n  Connection connection=new GrpcConnection(metaInfo,responseObserver,CONTEXT_KEY_CHANNEL.get());\n  boolean started=ApplicationUtils.isStarted();\n  if (!started || !connectionManager.register(connectionId,connection)) {\n    try {\n      Loggers.REMOTE_DIGEST.warn(\"[{}]Connection register fail,reason:{}\",connectionId,started ? \" server is not started\" : \" server is over limited.\");\n      connection.request(new ConnectResetRequest(),3000L);\n      connection.close();\n    }\n catch (    Exception e) {\n      if (connectionManager.traced(clientIp)) {\n        Loggers.REMOTE_DIGEST.warn(\"[{}]Send connect reset request error,error={}\",connectionId,e);\n      }\n    }\n    return;\n  }\n}\n else if (parseObj != null && parseObj instanceof Response) {\n  Response response=(Response)parseObj;\n  if (connectionManager.traced(clientIp)) {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Receive response of server request  ,response={}\",connectionId,response);\n  }\n  RpcAckCallbackSynchronizer.ackNotify(connectionId,response);\n  connectionManager.refreshActiveTime(connectionId);\n}\n else {\n  Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,unknown payload receive ,parseObj={}\",connectionId,parseObj);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3630,
        "startLineNumber" : 89,
        "startColumnNumber" : 48,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  traceDetailIfNecessary(payload);\n  Object parseObj=null;\n  try {\n    parseObj=GrpcUtils.parse(payload);\n  }\n catch (  Throwable throwable) {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,payload parse error={}\",connectionId,throwable);\n    return;\n  }\n  if (parseObj == null) {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,payload parse null ,body={},meta={}\",connectionId,payload.getBody().getValue().toStringUtf8(),payload.getMetadata());\n    return;\n  }\n  if (parseObj instanceof ConnectionSetupRequest) {\n    ConnectionSetupRequest setUpRequest=(ConnectionSetupRequest)parseObj;\n    Map<String,String> labels=setUpRequest.getLabels();\n    String appName=\"-\";\n    if (labels != null && labels.containsKey(Constants.APPNAME)) {\n      appName=labels.get(Constants.APPNAME);\n    }\n    ConnectionMeta metaInfo=new ConnectionMeta(connectionId,clientIp,clientPort,localPort,ConnectionType.GRPC.getType(),setUpRequest.getClientVersion(),appName,setUpRequest.getLabels());\n    Connection connection=new GrpcConnection(metaInfo,responseObserver,CONTEXT_KEY_CHANNEL.get());\n    boolean started=ApplicationUtils.isStarted();\n    if (!started || !connectionManager.register(connectionId,connection)) {\n      try {\n        Loggers.REMOTE_DIGEST.warn(\"[{}]Connection register fail,reason:{}\",connectionId,started ? \" server is not started\" : \" server is over limited.\");\n        connection.request(new ConnectResetRequest(),3000L);\n        connection.close();\n      }\n catch (      Exception e) {\n        if (connectionManager.traced(clientIp)) {\n          Loggers.REMOTE_DIGEST.warn(\"[{}]Send connect reset request error,error={}\",connectionId,e);\n        }\n      }\n      return;\n    }\n  }\n else   if (parseObj != null && parseObj instanceof Response) {\n    Response response=(Response)parseObj;\n    if (connectionManager.traced(clientIp)) {\n      Loggers.REMOTE_DIGEST.warn(\"[{}]Receive response of server request  ,response={}\",connectionId,response);\n    }\n    RpcAckCallbackSynchronizer.ackNotify(connectionId,response);\n    connectionManager.refreshActiveTime(connectionId);\n  }\n else {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,unknown payload receive ,parseObj={}\",connectionId,parseObj);\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3688,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public void onNext(Payload payload){\n  traceDetailIfNecessary(payload);\n  Object parseObj=null;\n  try {\n    parseObj=GrpcUtils.parse(payload);\n  }\n catch (  Throwable throwable) {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,payload parse error={}\",connectionId,throwable);\n    return;\n  }\n  if (parseObj == null) {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,payload parse null ,body={},meta={}\",connectionId,payload.getBody().getValue().toStringUtf8(),payload.getMetadata());\n    return;\n  }\n  if (parseObj instanceof ConnectionSetupRequest) {\n    ConnectionSetupRequest setUpRequest=(ConnectionSetupRequest)parseObj;\n    Map<String,String> labels=setUpRequest.getLabels();\n    String appName=\"-\";\n    if (labels != null && labels.containsKey(Constants.APPNAME)) {\n      appName=labels.get(Constants.APPNAME);\n    }\n    ConnectionMeta metaInfo=new ConnectionMeta(connectionId,clientIp,clientPort,localPort,ConnectionType.GRPC.getType(),setUpRequest.getClientVersion(),appName,setUpRequest.getLabels());\n    Connection connection=new GrpcConnection(metaInfo,responseObserver,CONTEXT_KEY_CHANNEL.get());\n    boolean started=ApplicationUtils.isStarted();\n    if (!started || !connectionManager.register(connectionId,connection)) {\n      try {\n        Loggers.REMOTE_DIGEST.warn(\"[{}]Connection register fail,reason:{}\",connectionId,started ? \" server is not started\" : \" server is over limited.\");\n        connection.request(new ConnectResetRequest(),3000L);\n        connection.close();\n      }\n catch (      Exception e) {\n        if (connectionManager.traced(clientIp)) {\n          Loggers.REMOTE_DIGEST.warn(\"[{}]Send connect reset request error,error={}\",connectionId,e);\n        }\n      }\n      return;\n    }\n  }\n else   if (parseObj != null && parseObj instanceof Response) {\n    Response response=(Response)parseObj;\n    if (connectionManager.traced(clientIp)) {\n      Loggers.REMOTE_DIGEST.warn(\"[{}]Receive response of server request  ,response={}\",connectionId,response);\n    }\n    RpcAckCallbackSynchronizer.ackNotify(connectionId,response);\n    connectionManager.refreshActiveTime(connectionId);\n  }\n else {\n    Loggers.REMOTE_DIGEST.warn(\"[{}]Grpc request bi stream,unknown payload receive ,parseObj={}\",connectionId,parseObj);\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 121,
        "startColumnNumber" : 24,
        "endLineNumber" : 121,
        "endColumnNumber" : 89
      },
      "nodeContext" : "!started || !connectionManager.register(connectionId,connection)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 121,
    "startColumnNumber" : 36,
    "endLineNumber" : 121,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}