{
  "id" : 397,
  "expression" : "\"c4\"",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-python/src/test/java/org/apache/flink/table/runtime/operators/python/aggregate/arrow/stream/StreamArrowPythonRowTimeBoundedRowsOperatorTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"c4\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 60,
      "endLineNumber" : 74,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 74,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "newBinaryRow(true,\"c1\",\"c4\",1L,1L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 92
      },
      "nodeContext" : "testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 93
      },
      "nodeContext" : "testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 62,
        "startColumnNumber" : 67,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,1L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,2L),initialTime + 3));\n  testHarness.processWatermark(Long.MAX_VALUE);\n  testHarness.close();\n  expectedOutput.add(new Watermark(Long.MAX_VALUE));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c2\",0L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",\"c8\",3L,2L,3L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c6\",2L,10L,1L)));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOverWindowAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,1L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,2L),initialTime + 3));\n  testHarness.processWatermark(Long.MAX_VALUE);\n  testHarness.close();\n  expectedOutput.add(new Watermark(Long.MAX_VALUE));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c2\",0L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",\"c8\",3L,2L,3L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c6\",2L,10L,1L)));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 74,
        "startColumnNumber" : 16,
        "endLineNumber" : 74,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"c4\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 85,
      "startColumnNumber" : 65,
      "endLineNumber" : 85,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 85,
        "startColumnNumber" : 46,
        "endLineNumber" : 85,
        "endColumnNumber" : 82
      },
      "nodeContext" : "newRow(true,\"c1\",\"c4\",1L,1L,0L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 85,
        "startColumnNumber" : 27,
        "endLineNumber" : 85,
        "endColumnNumber" : 83
      },
      "nodeContext" : "new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 84
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 85
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 62,
        "startColumnNumber" : 67,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,1L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,2L),initialTime + 3));\n  testHarness.processWatermark(Long.MAX_VALUE);\n  testHarness.close();\n  expectedOutput.add(new Watermark(Long.MAX_VALUE));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c2\",0L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",\"c8\",3L,2L,3L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c6\",2L,10L,1L)));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOverWindowAggregateFunction() throws Exception {\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=getTestHarness(new Configuration());\n  long initialTime=0L;\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c2\",0L,1L),initialTime + 1));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c4\",1L,1L),initialTime + 2));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c1\",\"c6\",2L,10L),initialTime + 3));\n  testHarness.processElement(new StreamRecord<>(newBinaryRow(true,\"c2\",\"c8\",3L,2L),initialTime + 3));\n  testHarness.processWatermark(Long.MAX_VALUE);\n  testHarness.close();\n  expectedOutput.add(new Watermark(Long.MAX_VALUE));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c2\",0L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c2\",\"c8\",3L,2L,3L)));\n  expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c6\",2L,10L,1L)));\n  assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 85
      },
      "nodeContext" : "expectedOutput.add(new StreamRecord<>(newRow(true,\"c1\",\"c4\",1L,1L,0L)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 60,
    "endLineNumber" : 74,
    "endColumnNumber" : 64
  }, {
    "charLength" : 4,
    "startLineNumber" : 85,
    "startColumnNumber" : 65,
    "endLineNumber" : 85,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}