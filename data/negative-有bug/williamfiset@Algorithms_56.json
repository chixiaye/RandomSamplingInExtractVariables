{
  "id" : 56,
  "expression" : "graph[to]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "graph[to]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 187,
      "startColumnNumber" : 6,
      "endLineNumber" : 187,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 187,
        "startColumnNumber" : 6,
        "endLineNumber" : 187,
        "endColumnNumber" : 23
      },
      "nodeContext" : "graph[to].add(e2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 187,
        "startColumnNumber" : 6,
        "endLineNumber" : 187,
        "endColumnNumber" : 24
      },
      "nodeContext" : "graph[to].add(e2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 180,
        "startColumnNumber" : 57,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (capacity <= 0)   throw new IllegalArgumentException(\"Forward edge capacity <= 0\");\n  Edge e1=new Edge(from,to,capacity);\n  Edge e2=new Edge(to,from,0);\n  e1.residual=e2;\n  e2.residual=e1;\n  graph[from].add(e1);\n  graph[to].add(e2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Adds a directed edge (and its residual edge) to the flow graph.\n * @param from - The index of the node the directed edge starts at.\n * @param to - The index of the node the directed edge ends at.\n * @param capacity - The capacity of the edge\n */\npublic void addEdge(int from,int to,long capacity){\n  if (capacity <= 0)   throw new IllegalArgumentException(\"Forward edge capacity <= 0\");\n  Edge e1=new Edge(from,to,capacity);\n  Edge e2=new Edge(to,from,0);\n  e1.residual=e2;\n  e2.residual=e1;\n  graph[from].add(e1);\n  graph[to].add(e2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 187,
        "startColumnNumber" : 6,
        "endLineNumber" : 187,
        "endColumnNumber" : 24
      },
      "nodeContext" : "graph[to].add(e2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls.Edge>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 187,
    "startColumnNumber" : 6,
    "endLineNumber" : 187,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}