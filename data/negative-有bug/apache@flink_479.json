{
  "id" : 479,
  "expression" : "serializer.copy(buildSideRecord)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/operators/CoGroupWithSolutionSetSecondDriver.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "serializer.copy(buildSideRecord)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 208,
      "startColumnNumber" : 35,
      "endLineNumber" : 208,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 208,
        "startColumnNumber" : 24,
        "endLineNumber" : 208,
        "endColumnNumber" : 68
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 208,
        "startColumnNumber" : 24,
        "endLineNumber" : 208,
        "endColumnNumber" : 69
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 207,
        "startColumnNumber" : 49,
        "endLineNumber" : 210,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  siIter.set(serializer.copy(buildSideRecord));\n  coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 207,
        "startColumnNumber" : 20,
        "endLineNumber" : 213,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (buildSideRecord != null) {\n  siIter.set(serializer.copy(buildSideRecord));\n  coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n}\n else {\n  coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 203,
        "startColumnNumber" : 65,
        "endLineNumber" : 214,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  IT1 current=probeSideInput.getCurrent();\n  IT2 buildSideRecord=prober.lookupMatch(current);\n  if (buildSideRecord != null) {\n    siIter.set(serializer.copy(buildSideRecord));\n    coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n  }\n else {\n    coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 214,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (this.running && probeSideInput.nextKey()) {\n  IT1 current=probeSideInput.getCurrent();\n  IT2 buildSideRecord=prober.lookupMatch(current);\n  if (buildSideRecord != null) {\n    siIter.set(serializer.copy(buildSideRecord));\n    coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n  }\n else {\n    coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 197,
        "startColumnNumber" : 19,
        "endLineNumber" : 215,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final JoinHashMap<IT2> join=this.objectMap;\n  final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n  final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    IT2 buildSideRecord=prober.lookupMatch(current);\n    if (buildSideRecord != null) {\n      siIter.set(serializer.copy(buildSideRecord));\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 178,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.hashTable != null) {\n  final CompactingHashTable<IT2> join=hashTable;\n  final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n  IT2 buildSideRecord=solutionSideRecord;\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n    if (matchedRecord != null) {\n      siIter.set(matchedRecord);\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n else {\n  final JoinHashMap<IT2> join=this.objectMap;\n  final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n  final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    IT2 buildSideRecord=prober.lookupMatch(current);\n    if (buildSideRecord != null) {\n      siIter.set(serializer.copy(buildSideRecord));\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2130,
        "startLineNumber" : 173,
        "startColumnNumber" : 32,
        "endLineNumber" : 216,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord=solutionSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n      if (matchedRecord != null) {\n        siIter.set(matchedRecord);\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4267,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (objectReuseEnabled) {\n  final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord=solutionSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n      if (matchedRecord != null) {\n        siIter.set(matchedRecord);\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n else {\n  final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      buildSideRecord=prober.getMatchFor(current);\n      if (buildSideRecord != null) {\n        siIter.set(solutionSetSerializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4599,
        "startLineNumber" : 165,
        "startColumnNumber" : 39,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();\n  final Collector<OT> collector=taskContext.getOutputCollector();\n  final SingleElementIterator<IT2> siIter=new SingleElementIterator<IT2>();\n  final Iterable<IT2> emptySolutionSide=EmptyIterator.<IT2>get();\n  if (objectReuseEnabled) {\n    final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord=solutionSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n        if (matchedRecord != null) {\n          siIter.set(matchedRecord);\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n else {\n    final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        buildSideRecord=prober.getMatchFor(current);\n        if (buildSideRecord != null) {\n          siIter.set(solutionSetSerializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 522,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run() throws Exception {\n  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();\n  final Collector<OT> collector=taskContext.getOutputCollector();\n  final SingleElementIterator<IT2> siIter=new SingleElementIterator<IT2>();\n  final Iterable<IT2> emptySolutionSide=EmptyIterator.<IT2>get();\n  if (objectReuseEnabled) {\n    final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord=solutionSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n        if (matchedRecord != null) {\n          siIter.set(matchedRecord);\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n else {\n    final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        buildSideRecord=prober.getMatchFor(current);\n        if (buildSideRecord != null) {\n          siIter.set(solutionSetSerializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 530,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 208,
        "startColumnNumber" : 24,
        "endLineNumber" : 208,
        "endColumnNumber" : 69
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "IT2"
  }, {
    "nodeContext" : "serializer.copy(buildSideRecord)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 251,
      "startColumnNumber" : 35,
      "endLineNumber" : 251,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 251,
        "startColumnNumber" : 24,
        "endLineNumber" : 251,
        "endColumnNumber" : 68
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 251,
        "startColumnNumber" : 24,
        "endLineNumber" : 251,
        "endColumnNumber" : 69
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 250,
        "startColumnNumber" : 49,
        "endLineNumber" : 253,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  siIter.set(serializer.copy(buildSideRecord));\n  coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 250,
        "startColumnNumber" : 20,
        "endLineNumber" : 256,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (buildSideRecord != null) {\n  siIter.set(serializer.copy(buildSideRecord));\n  coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n}\n else {\n  coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 246,
        "startColumnNumber" : 65,
        "endLineNumber" : 257,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  IT1 current=probeSideInput.getCurrent();\n  IT2 buildSideRecord=prober.lookupMatch(current);\n  if (buildSideRecord != null) {\n    siIter.set(serializer.copy(buildSideRecord));\n    coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n  }\n else {\n    coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (this.running && probeSideInput.nextKey()) {\n  IT1 current=probeSideInput.getCurrent();\n  IT2 buildSideRecord=prober.lookupMatch(current);\n  if (buildSideRecord != null) {\n    siIter.set(serializer.copy(buildSideRecord));\n    coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n  }\n else {\n    coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 240,
        "startColumnNumber" : 19,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final JoinHashMap<IT2> join=this.objectMap;\n  final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n  final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    IT2 buildSideRecord=prober.lookupMatch(current);\n    if (buildSideRecord != null) {\n      siIter.set(serializer.copy(buildSideRecord));\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1874,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (this.hashTable != null) {\n  final CompactingHashTable<IT2> join=hashTable;\n  final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n  IT2 buildSideRecord;\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    buildSideRecord=prober.getMatchFor(current);\n    if (buildSideRecord != null) {\n      siIter.set(solutionSetSerializer.copy(buildSideRecord));\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n else {\n  final JoinHashMap<IT2> join=this.objectMap;\n  final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n  final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n  while (this.running && probeSideInput.nextKey()) {\n    IT1 current=probeSideInput.getCurrent();\n    IT2 buildSideRecord=prober.lookupMatch(current);\n    if (buildSideRecord != null) {\n      siIter.set(serializer.copy(buildSideRecord));\n      coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n    }\n else {\n      coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2107,
        "startLineNumber" : 216,
        "startColumnNumber" : 15,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      buildSideRecord=prober.getMatchFor(current);\n      if (buildSideRecord != null) {\n        siIter.set(solutionSetSerializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4267,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (objectReuseEnabled) {\n  final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord=solutionSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n      if (matchedRecord != null) {\n        siIter.set(matchedRecord);\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n else {\n  final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n  if (this.hashTable != null) {\n    final CompactingHashTable<IT2> join=hashTable;\n    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n    IT2 buildSideRecord;\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      buildSideRecord=prober.getMatchFor(current);\n      if (buildSideRecord != null) {\n        siIter.set(solutionSetSerializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n else {\n    final JoinHashMap<IT2> join=this.objectMap;\n    final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n    final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n    while (this.running && probeSideInput.nextKey()) {\n      IT1 current=probeSideInput.getCurrent();\n      IT2 buildSideRecord=prober.lookupMatch(current);\n      if (buildSideRecord != null) {\n        siIter.set(serializer.copy(buildSideRecord));\n        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n      }\n else {\n        coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4599,
        "startLineNumber" : 165,
        "startColumnNumber" : 39,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();\n  final Collector<OT> collector=taskContext.getOutputCollector();\n  final SingleElementIterator<IT2> siIter=new SingleElementIterator<IT2>();\n  final Iterable<IT2> emptySolutionSide=EmptyIterator.<IT2>get();\n  if (objectReuseEnabled) {\n    final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord=solutionSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n        if (matchedRecord != null) {\n          siIter.set(matchedRecord);\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n else {\n    final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        buildSideRecord=prober.getMatchFor(current);\n        if (buildSideRecord != null) {\n          siIter.set(solutionSetSerializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 522,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4648,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run() throws Exception {\n  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();\n  final Collector<OT> collector=taskContext.getOutputCollector();\n  final SingleElementIterator<IT2> siIter=new SingleElementIterator<IT2>();\n  final Iterable<IT2> emptySolutionSide=EmptyIterator.<IT2>get();\n  if (objectReuseEnabled) {\n    final ReusingKeyGroupedIterator<IT1> probeSideInput=new ReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideSerializer,probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord=solutionSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 matchedRecord=prober.getMatchFor(current,buildSideRecord);\n        if (matchedRecord != null) {\n          siIter.set(matchedRecord);\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n else {\n    final NonReusingKeyGroupedIterator<IT1> probeSideInput=new NonReusingKeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),probeSideComparator);\n    if (this.hashTable != null) {\n      final CompactingHashTable<IT2> join=hashTable;\n      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(this.probeSideComparator,this.pairComparator);\n      IT2 buildSideRecord;\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        buildSideRecord=prober.getMatchFor(current);\n        if (buildSideRecord != null) {\n          siIter.set(solutionSetSerializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n else {\n      final JoinHashMap<IT2> join=this.objectMap;\n      final JoinHashMap<IT2>.Prober<IT1> prober=join.createProber(this.probeSideComparator,this.pairComparator);\n      final TypeSerializer<IT2> serializer=join.getBuildSerializer();\n      while (this.running && probeSideInput.nextKey()) {\n        IT1 current=probeSideInput.getCurrent();\n        IT2 buildSideRecord=prober.lookupMatch(current);\n        if (buildSideRecord != null) {\n          siIter.set(serializer.copy(buildSideRecord));\n          coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);\n        }\n else {\n          coGroupStub.coGroup(probeSideInput.getValues(),emptySolutionSide,collector);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 530,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 251,
        "startColumnNumber" : 24,
        "endLineNumber" : 251,
        "endColumnNumber" : 69
      },
      "nodeContext" : "siIter.set(serializer.copy(buildSideRecord));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "IT2"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 208,
    "startColumnNumber" : 35,
    "endLineNumber" : 208,
    "endColumnNumber" : 67
  }, {
    "charLength" : 32,
    "startLineNumber" : 251,
    "startColumnNumber" : 35,
    "endLineNumber" : 251,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  } ]
}