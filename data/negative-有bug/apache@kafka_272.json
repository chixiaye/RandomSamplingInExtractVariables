{
  "id" : 272,
  "expression" : "partitions",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerRebalanceListener.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "partitions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 198,
      "startColumnNumber" : 28,
      "endLineNumber" : 198,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 39
      },
      "nodeContext" : "onPartitionsRevoked(partitions)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 40
      },
      "nodeContext" : "onPartitionsRevoked(partitions);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 197,
        "startColumnNumber" : 73,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  onPartitionsRevoked(partitions);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 171,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * A callback method you can implement to provide handling of cleaning up resources for partitions that have already been reassigned to other consumers. This method will not be called during normal execution as the owned partitions would first be revoked by calling the  {@link ConsumerRebalanceListener#onPartitionsRevoked}, before being reassigned to other consumers during a rebalance event. However, during exceptional scenarios when the consumer realized that it does not own this partition any longer, i.e. not revoked via a normal rebalance event, then this method would be invoked. <p> For example, this function is called if a consumer's session timeout has expired, or if a fatal error has been received indicating the consumer is no longer part of the group. <p> By default it will just trigger  {@link ConsumerRebalanceListener#onPartitionsRevoked}; for users who want to distinguish the handling logic of revoked partitions v.s. lost partitions, they can override the default implementation. <p> It is possible for a  {@link org.apache.kafka.common.errors.WakeupException} or {@link org.apache.kafka.common.errors.InterruptException}to be raised from one of these nested invocations. In this case, the exception will be propagated to the current invocation of  {@link KafkaConsumer#poll(java.time.Duration)} in which this callback is being executed. This means it is notnecessary to catch these exceptions and re-attempt to wakeup or interrupt the consumer thread.\n * @param partitions The list of partitions that were assigned to the consumer and now have been reassignedto other consumers. With the current protocol this will always include all of the consumer's previously assigned partitions, but this may change in future protocols (ie there would still be some partitions left)\n * @throws org.apache.kafka.common.errors.WakeupException If raised from a nested call to {@link KafkaConsumer}\n * @throws org.apache.kafka.common.errors.InterruptException If raised from a nested call to {@link KafkaConsumer}\n */\ndefault void onPartitionsLost(Collection<TopicPartition> partitions){\n  onPartitionsRevoked(partitions);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 17,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 40
      },
      "nodeContext" : "onPartitionsRevoked(partitions);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<org.apache.kafka.common.TopicPartition>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 198,
    "startColumnNumber" : 28,
    "endLineNumber" : 198,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}