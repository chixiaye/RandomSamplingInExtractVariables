{
  "id" : 422,
  "expression" : "a == EMPTY",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "a == EMPTY",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 314,
      "startColumnNumber" : 8,
      "endLineNumber" : 314,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 314,
        "startColumnNumber" : 3,
        "endLineNumber" : 314,
        "endColumnNumber" : 34
      },
      "nodeContext" : "if (a == EMPTY) return EMPTY;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 313,
        "startColumnNumber" : 24,
        "endLineNumber" : 316,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (a == EMPTY)   return EMPTY;\n  if (b == EMPTY)   return EMPTY;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 313,
        "startColumnNumber" : 2,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (rootIsWildcard) {\n  if (a == EMPTY)   return EMPTY;\n  if (b == EMPTY)   return EMPTY;\n}\n else {\n  if (a == EMPTY && b == EMPTY)   return EMPTY;\n  if (a == EMPTY) {\n    int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={b.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n  if (b == EMPTY) {\n    int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={a.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 312,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 271,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handle case where at least one of  {@code a} or {@code b} is{@link #EMPTY}. In the following diagrams, the symbol  {@code $} is usedto represent  {@link #EMPTY}. <h2>Local-Context Merges</h2> <p>These local-context merge operations are used when  {@code rootIsWildcard}is true.</p> <p> {@link #EMPTY} is superset of any graph; return {@link #EMPTY}.<br> <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p> {@link #EMPTY} and anything is {@code #EMPTY}, so merged parent is {@code #EMPTY}; return left graph.<br> <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p> <p>Special case of last merge if local context.<br> <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p> <h2>Full-Context Merges</h2> <p>These full-context merge operations are used when  {@code rootIsWildcard}is false.</p> <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p> <p>Must keep all contexts;  {@link #EMPTY} in array is a special value (andnull parent).<br> <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,otherwise false to indicate a full-context merge\n */\npublic static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 314,
        "startColumnNumber" : 3,
        "endLineNumber" : 314,
        "endColumnNumber" : 34
      },
      "nodeContext" : "if (a == EMPTY) return EMPTY;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "a == EMPTY",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 318,
      "startColumnNumber" : 8,
      "endLineNumber" : 318,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 318,
        "startColumnNumber" : 8,
        "endLineNumber" : 318,
        "endColumnNumber" : 32
      },
      "nodeContext" : "a == EMPTY && b == EMPTY",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 318,
        "startColumnNumber" : 3,
        "endLineNumber" : 318,
        "endColumnNumber" : 48
      },
      "nodeContext" : "if (a == EMPTY && b == EMPTY) return EMPTY;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 317,
        "startColumnNumber" : 7,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (a == EMPTY && b == EMPTY)   return EMPTY;\n  if (a == EMPTY) {\n    int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={b.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n  if (b == EMPTY) {\n    int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={a.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 313,
        "startColumnNumber" : 2,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (rootIsWildcard) {\n  if (a == EMPTY)   return EMPTY;\n  if (b == EMPTY)   return EMPTY;\n}\n else {\n  if (a == EMPTY && b == EMPTY)   return EMPTY;\n  if (a == EMPTY) {\n    int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={b.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n  if (b == EMPTY) {\n    int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={a.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 312,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 271,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handle case where at least one of  {@code a} or {@code b} is{@link #EMPTY}. In the following diagrams, the symbol  {@code $} is usedto represent  {@link #EMPTY}. <h2>Local-Context Merges</h2> <p>These local-context merge operations are used when  {@code rootIsWildcard}is true.</p> <p> {@link #EMPTY} is superset of any graph; return {@link #EMPTY}.<br> <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p> {@link #EMPTY} and anything is {@code #EMPTY}, so merged parent is {@code #EMPTY}; return left graph.<br> <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p> <p>Special case of last merge if local context.<br> <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p> <h2>Full-Context Merges</h2> <p>These full-context merge operations are used when  {@code rootIsWildcard}is false.</p> <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p> <p>Must keep all contexts;  {@link #EMPTY} in array is a special value (andnull parent).<br> <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,otherwise false to indicate a full-context merge\n */\npublic static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 318,
        "startColumnNumber" : 3,
        "endLineNumber" : 318,
        "endColumnNumber" : 48
      },
      "nodeContext" : "if (a == EMPTY && b == EMPTY) return EMPTY;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "a == EMPTY",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 319,
      "startColumnNumber" : 8,
      "endLineNumber" : 319,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 319,
        "startColumnNumber" : 3,
        "endLineNumber" : 325,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (a == EMPTY) {\n  int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n  PredictionContext[] parents={b.parent,null};\n  PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n  return joined;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 317,
        "startColumnNumber" : 7,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (a == EMPTY && b == EMPTY)   return EMPTY;\n  if (a == EMPTY) {\n    int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={b.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n  if (b == EMPTY) {\n    int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={a.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 313,
        "startColumnNumber" : 2,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (rootIsWildcard) {\n  if (a == EMPTY)   return EMPTY;\n  if (b == EMPTY)   return EMPTY;\n}\n else {\n  if (a == EMPTY && b == EMPTY)   return EMPTY;\n  if (a == EMPTY) {\n    int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={b.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n  if (b == EMPTY) {\n    int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n    PredictionContext[] parents={a.parent,null};\n    PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n    return joined;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 312,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 271,
        "startColumnNumber" : 1,
        "endLineNumber" : 335,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handle case where at least one of  {@code a} or {@code b} is{@link #EMPTY}. In the following diagrams, the symbol  {@code $} is usedto represent  {@link #EMPTY}. <h2>Local-Context Merges</h2> <p>These local-context merge operations are used when  {@code rootIsWildcard}is true.</p> <p> {@link #EMPTY} is superset of any graph; return {@link #EMPTY}.<br> <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p> {@link #EMPTY} and anything is {@code #EMPTY}, so merged parent is {@code #EMPTY}; return left graph.<br> <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p> <p>Special case of last merge if local context.<br> <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p> <h2>Full-Context Merges</h2> <p>These full-context merge operations are used when  {@code rootIsWildcard}is false.</p> <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p> <p>Must keep all contexts;  {@link #EMPTY} in array is a special value (andnull parent).<br> <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p> <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,otherwise false to indicate a full-context merge\n */\npublic static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){\n  if (rootIsWildcard) {\n    if (a == EMPTY)     return EMPTY;\n    if (b == EMPTY)     return EMPTY;\n  }\n else {\n    if (a == EMPTY && b == EMPTY)     return EMPTY;\n    if (a == EMPTY) {\n      int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={b.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n    if (b == EMPTY) {\n      int[] payloads={a.returnState,EMPTY_RETURN_STATE};\n      PredictionContext[] parents={a.parent,null};\n      PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n      return joined;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 319,
        "startColumnNumber" : 3,
        "endLineNumber" : 325,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (a == EMPTY) {\n  int[] payloads={b.returnState,EMPTY_RETURN_STATE};\n  PredictionContext[] parents={b.parent,null};\n  PredictionContext joined=new ArrayPredictionContext(parents,payloads);\n  return joined;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 314,
    "startColumnNumber" : 8,
    "endLineNumber" : 314,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 318,
    "startColumnNumber" : 8,
    "endLineNumber" : 318,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 319,
    "startColumnNumber" : 8,
    "endLineNumber" : 319,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}