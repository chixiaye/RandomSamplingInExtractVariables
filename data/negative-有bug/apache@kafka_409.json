{
  "id" : 409,
  "expression" : "\"Struct \"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/generator/src/main/java/org/apache/kafka/message/StructRegistry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Struct \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 107,
      "startColumnNumber" : 47,
      "endLineNumber" : 107,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 107,
        "startColumnNumber" : 47,
        "endLineNumber" : 108,
        "endColumnNumber" : 47
      },
      "nodeContext" : "\"Struct \" + typeName + \" was specified twice.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 107,
        "startColumnNumber" : 26,
        "endLineNumber" : 108,
        "endColumnNumber" : 48
      },
      "nodeContext" : "new RuntimeException(\"Struct \" + typeName + \" was specified twice.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 107,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 49
      },
      "nodeContext" : "throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 105,
        "startColumnNumber" : 58,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 576,
        "startLineNumber" : 105,
        "startColumnNumber" : 23,
        "endLineNumber" : 115,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (structs.containsKey(typeName)) {\n  throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n}\n else {\n  StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n  structs.put(typeName,new StructInfo(spec,parentVersions));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1046,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 115,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (commonStructNames.contains(typeName)) {\n  if (!field.fields().isEmpty()) {\n    throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n  }\n}\n else if (structs.containsKey(typeName)) {\n  throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n}\n else {\n  StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n  structs.put(typeName,new StructInfo(spec,parentVersions));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 97,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (commonStructNames.contains(typeName)) {\n    if (!field.fields().isEmpty()) {\n      throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n    }\n  }\n else   if (structs.containsKey(typeName)) {\n    throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n  }\n else {\n    StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n    structs.put(typeName,new StructInfo(spec,parentVersions));\n  }\n  addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1193,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (typeName != null) {\n  if (commonStructNames.contains(typeName)) {\n    if (!field.fields().isEmpty()) {\n      throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n    }\n  }\n else   if (structs.containsKey(typeName)) {\n    throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n  }\n else {\n    StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n    structs.put(typeName,new StructInfo(spec,parentVersions));\n  }\n  addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 88,
        "startColumnNumber" : 39,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String typeName=null;\n  if (field.type().isStructArray()) {\n    FieldType.ArrayType arrayType=(FieldType.ArrayType)field.type();\n    typeName=arrayType.elementName();\n  }\n else   if (field.type().isStruct()) {\n    FieldType.StructType structType=(FieldType.StructType)field.type();\n    typeName=structType.typeName();\n  }\n  if (typeName != null) {\n    if (commonStructNames.contains(typeName)) {\n      if (!field.fields().isEmpty()) {\n        throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n      }\n    }\n else     if (structs.containsKey(typeName)) {\n      throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n    }\n else {\n      StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n      structs.put(typeName,new StructInfo(spec,parentVersions));\n    }\n    addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1669,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldSpec field : fields) {\n  String typeName=null;\n  if (field.type().isStructArray()) {\n    FieldType.ArrayType arrayType=(FieldType.ArrayType)field.type();\n    typeName=arrayType.elementName();\n  }\n else   if (field.type().isStruct()) {\n    FieldType.StructType structType=(FieldType.StructType)field.type();\n    typeName=structType.typeName();\n  }\n  if (typeName != null) {\n    if (commonStructNames.contains(typeName)) {\n      if (!field.fields().isEmpty()) {\n        throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n      }\n    }\n else     if (structs.containsKey(typeName)) {\n      throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n    }\n else {\n      StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n      structs.put(typeName,new StructInfo(spec,parentVersions));\n    }\n    addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 87,
        "startColumnNumber" : 81,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  FieldSpec field : fields) {\n    String typeName=null;\n    if (field.type().isStructArray()) {\n      FieldType.ArrayType arrayType=(FieldType.ArrayType)field.type();\n      typeName=arrayType.elementName();\n    }\n else     if (field.type().isStruct()) {\n      FieldType.StructType structType=(FieldType.StructType)field.type();\n      typeName=structType.typeName();\n    }\n    if (typeName != null) {\n      if (commonStructNames.contains(typeName)) {\n        if (!field.fields().isEmpty()) {\n          throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n        }\n      }\n else       if (structs.containsKey(typeName)) {\n        throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n      }\n else {\n        StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n        structs.put(typeName,new StructInfo(spec,parentVersions));\n      }\n      addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") private void addStructSpecs(Versions parentVersions,List<FieldSpec> fields){\n  for (  FieldSpec field : fields) {\n    String typeName=null;\n    if (field.type().isStructArray()) {\n      FieldType.ArrayType arrayType=(FieldType.ArrayType)field.type();\n      typeName=arrayType.elementName();\n    }\n else     if (field.type().isStruct()) {\n      FieldType.StructType structType=(FieldType.StructType)field.type();\n      typeName=structType.typeName();\n    }\n    if (typeName != null) {\n      if (commonStructNames.contains(typeName)) {\n        if (!field.fields().isEmpty()) {\n          throw new RuntimeException(\"Can't re-specify the common struct \" + typeName + \" as an inline struct.\");\n        }\n      }\n else       if (structs.containsKey(typeName)) {\n        throw new RuntimeException(\"Struct \" + typeName + \" was specified twice.\");\n      }\n else {\n        StructSpec spec=new StructSpec(typeName,field.versions().toString(),field.fields());\n        structs.put(typeName,new StructInfo(spec,parentVersions));\n      }\n      addStructSpecs(parentVersions.intersect(field.versions()),field.fields());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 107,
        "startColumnNumber" : 47,
        "endLineNumber" : 108,
        "endColumnNumber" : 47
      },
      "nodeContext" : "\"Struct \" + typeName + \" was specified twice.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 107,
    "startColumnNumber" : 47,
    "endLineNumber" : 107,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}