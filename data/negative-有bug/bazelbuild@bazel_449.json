{
  "id" : 449,
  "expression" : "\"build_config/a.txt\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/bazel/rules/ninja/NinjaBuildTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"build_config/a.txt\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 267,
      "startColumnNumber" : 17,
      "endLineNumber" : 267,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 267,
        "endColumnNumber" : 43
      },
      "nodeContext" : "scratch.file(\"build_config/a.txt\",\"A\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 267,
        "endColumnNumber" : 44
      },
      "nodeContext" : "scratch.file(\"build_config/a.txt\",\"A\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4056,
        "startLineNumber" : 263,
        "startColumnNumber" : 65,
        "endLineNumber" : 355,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  rewriteWorkspace(\"workspace(name = 'test')\",\"toplevel_output_directories(paths = ['build_config'])\");\n  scratch.file(\"build_config/a.txt\",\"A\");\n  scratch.file(\"build_config/b.txt\",\"B\");\n  scratch.file(\"build_config/c.txt\",\"C\");\n  scratch.file(\"build_config/d.txt\",\"D\");\n  scratch.file(\"build_config/e.txt\",\"E\");\n  scratch.file(\"build_config/build.ninja\",\"rule cat\",\"  command = cat ${in} > ${out}\",\"rule echo\",\"  command = echo \\\"Hello $$(cat ${in} | tr '\\\\r\\\\n' ' ')!\\\" > ${out}\",\"build a: cat a.txt\",\"build b: cat b.txt\",\"build c: cat c.txt\",\"build d: cat d.txt\",\"build e: cat e.txt always_dirty\",\"build always_dirty: phony\",\"build group1: phony a b c\",\"build group2: phony d e\",\"build inputs_alias: phony group1 group2\",\"build hello.txt: echo inputs_alias\",\"build alias: phony hello.txt\");\n  ConfiguredTarget configuredTarget=scratchConfiguredTarget(\"\",\"ninja_target\",\"ninja_graph(name = 'graph', output_root = 'build_config',\",\" working_directory = 'build_config',\",\" main = 'build_config/build.ninja',\",\" output_root_inputs = ['a.txt', 'b.txt', 'c.txt', 'd.txt', 'e.txt'])\",\"ninja_build(name = 'ninja_target', ninja_graph = 'graph',\",\" output_groups= {'main': ['alias']})\");\n  assertThat(configuredTarget).isInstanceOf(RuleConfiguredTarget.class);\n  RuleConfiguredTarget ninjaConfiguredTarget=(RuleConfiguredTarget)configuredTarget;\n  ImmutableList<ActionAnalysisMetadata> actions=ninjaConfiguredTarget.getActions();\n  assertThat(actions).hasSize(6);\n  List<String> outputs=Lists.newArrayList();\n  actions.forEach(a -> outputs.add(Iterables.getOnlyElement(a.getOutputs()).getExecPathString()));\n  assertThat(outputs).containsExactlyElementsIn(new String[]{\"build_config/hello.txt\",\"build_config/a\",\"build_config/b\",\"build_config/c\",\"build_config/d\",\"build_config/e\"});\n  for (  ActionAnalysisMetadata action : actions) {\n    Artifact artifact=action.getPrimaryOutput();\n    if (\"hello.txt\".equals(artifact.getFilename())) {\n      assertThat(action).isInstanceOf(NinjaAction.class);\n      NinjaAction ninjaAction=(NinjaAction)action;\n      List<CommandLineAndParamFileInfo> commandLines=ninjaAction.getCommandLines().getCommandLines();\n      assertThat(commandLines).hasSize(1);\n      assertThat(commandLines.get(0).commandLine.toString()).contains(\"cd build_config && echo \\\"Hello $(cat inputs_alias | tr '\\\\r\\\\n' ' ')!\\\"\" + \" > hello.txt\");\n      List<String> inputPaths=ninjaAction.getInputs().toList().stream().map(Artifact::getExecPathString).collect(Collectors.toList());\n      assertThat(inputPaths).containsExactly(\"build_config/a\",\"build_config/b\",\"build_config/c\",\"build_config/d\",\"build_config/e\");\n      assertThat(ninjaAction.getPrimaryOutput().getExecPathString()).isEqualTo(\"build_config/hello.txt\");\n    }\n else     if (\"e\".equals(artifact.getFilename())) {\n      assertThat(action).isInstanceOf(NinjaAction.class);\n      NinjaAction ninjaAction=(NinjaAction)action;\n      List<CommandLineAndParamFileInfo> commandLines=ninjaAction.getCommandLines().getCommandLines();\n      assertThat(commandLines).hasSize(1);\n      assertThat(commandLines.get(0).commandLine.toString()).endsWith(\"cd build_config && cat e.txt always_dirty > e\");\n      assertThat(ninjaAction.executeUnconditionally()).isTrue();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4127,
        "startLineNumber" : 262,
        "startColumnNumber" : 2,
        "endLineNumber" : 355,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNinjaGraphRuleWithPhonyTree() throws Exception {\n  rewriteWorkspace(\"workspace(name = 'test')\",\"toplevel_output_directories(paths = ['build_config'])\");\n  scratch.file(\"build_config/a.txt\",\"A\");\n  scratch.file(\"build_config/b.txt\",\"B\");\n  scratch.file(\"build_config/c.txt\",\"C\");\n  scratch.file(\"build_config/d.txt\",\"D\");\n  scratch.file(\"build_config/e.txt\",\"E\");\n  scratch.file(\"build_config/build.ninja\",\"rule cat\",\"  command = cat ${in} > ${out}\",\"rule echo\",\"  command = echo \\\"Hello $$(cat ${in} | tr '\\\\r\\\\n' ' ')!\\\" > ${out}\",\"build a: cat a.txt\",\"build b: cat b.txt\",\"build c: cat c.txt\",\"build d: cat d.txt\",\"build e: cat e.txt always_dirty\",\"build always_dirty: phony\",\"build group1: phony a b c\",\"build group2: phony d e\",\"build inputs_alias: phony group1 group2\",\"build hello.txt: echo inputs_alias\",\"build alias: phony hello.txt\");\n  ConfiguredTarget configuredTarget=scratchConfiguredTarget(\"\",\"ninja_target\",\"ninja_graph(name = 'graph', output_root = 'build_config',\",\" working_directory = 'build_config',\",\" main = 'build_config/build.ninja',\",\" output_root_inputs = ['a.txt', 'b.txt', 'c.txt', 'd.txt', 'e.txt'])\",\"ninja_build(name = 'ninja_target', ninja_graph = 'graph',\",\" output_groups= {'main': ['alias']})\");\n  assertThat(configuredTarget).isInstanceOf(RuleConfiguredTarget.class);\n  RuleConfiguredTarget ninjaConfiguredTarget=(RuleConfiguredTarget)configuredTarget;\n  ImmutableList<ActionAnalysisMetadata> actions=ninjaConfiguredTarget.getActions();\n  assertThat(actions).hasSize(6);\n  List<String> outputs=Lists.newArrayList();\n  actions.forEach(a -> outputs.add(Iterables.getOnlyElement(a.getOutputs()).getExecPathString()));\n  assertThat(outputs).containsExactlyElementsIn(new String[]{\"build_config/hello.txt\",\"build_config/a\",\"build_config/b\",\"build_config/c\",\"build_config/d\",\"build_config/e\"});\n  for (  ActionAnalysisMetadata action : actions) {\n    Artifact artifact=action.getPrimaryOutput();\n    if (\"hello.txt\".equals(artifact.getFilename())) {\n      assertThat(action).isInstanceOf(NinjaAction.class);\n      NinjaAction ninjaAction=(NinjaAction)action;\n      List<CommandLineAndParamFileInfo> commandLines=ninjaAction.getCommandLines().getCommandLines();\n      assertThat(commandLines).hasSize(1);\n      assertThat(commandLines.get(0).commandLine.toString()).contains(\"cd build_config && echo \\\"Hello $(cat inputs_alias | tr '\\\\r\\\\n' ' ')!\\\"\" + \" > hello.txt\");\n      List<String> inputPaths=ninjaAction.getInputs().toList().stream().map(Artifact::getExecPathString).collect(Collectors.toList());\n      assertThat(inputPaths).containsExactly(\"build_config/a\",\"build_config/b\",\"build_config/c\",\"build_config/d\",\"build_config/e\");\n      assertThat(ninjaAction.getPrimaryOutput().getExecPathString()).isEqualTo(\"build_config/hello.txt\");\n    }\n else     if (\"e\".equals(artifact.getFilename())) {\n      assertThat(action).isInstanceOf(NinjaAction.class);\n      NinjaAction ninjaAction=(NinjaAction)action;\n      List<CommandLineAndParamFileInfo> commandLines=ninjaAction.getCommandLines().getCommandLines();\n      assertThat(commandLines).hasSize(1);\n      assertThat(commandLines.get(0).commandLine.toString()).endsWith(\"cd build_config && cat e.txt always_dirty > e\");\n      assertThat(ninjaAction.executeUnconditionally()).isTrue();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 267,
        "endColumnNumber" : 44
      },
      "nodeContext" : "scratch.file(\"build_config/a.txt\",\"A\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 267,
    "startColumnNumber" : 17,
    "endLineNumber" : 267,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}