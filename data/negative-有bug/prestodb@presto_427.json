{
  "id" : 427,
  "expression" : "totalBitLength - 1",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-hive-common/src/main/java/com/facebook/presto/hive/zorder/ZOrder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "totalBitLength - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 120,
      "startColumnNumber" : 27,
      "endLineNumber" : 120,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 45
      },
      "nodeContext" : "bitIndex=totalBitLength - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int bitIndex=totalBitLength - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 118,
        "startColumnNumber" : 35,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int bitIndex=totalBitLength - 1;\n  for (  int value : input) {\n    byte signBit=(value < 0) ? (byte)0 : 1;\n    address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n    bitIndex--;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!positiveIntegersOnly) {\n  int bitIndex=totalBitLength - 1;\n  for (  int value : input) {\n    byte signBit=(value < 0) ? (byte)0 : 1;\n    address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n    bitIndex--;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1360,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkEncodeInputValidity(input);\n  byte[] address=new byte[(totalBitLength + 7) >> 3];\n  if (!positiveIntegersOnly) {\n    int bitIndex=totalBitLength - 1;\n    for (    int value : input) {\n      byte signBit=(value < 0) ? (byte)0 : 1;\n      address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n  for (int bitsProcessed=0; bitsProcessed < maxBitLength; bitsProcessed++) {\n    for (int index=0; index < input.size(); index++) {\n      if (bitsProcessed >= encodingBits.get(index)) {\n        continue;\n      }\n      int bitPosition=encodingBits.get(index) - bitsProcessed - 1;\n      byte maskedBit=(byte)((input.get(index) >> bitPosition) & 1);\n      address[bitIndex >> 3]|=maskedBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  return address;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Encodes the input list into its corresponding z-address and returns a byte array, with the least significant bit at index 0. <p/> <code>encode</code> interweaves the bit representations of the input values from the most significant bit to create the final z-address. <p/> For example: for a list of (7, 128) = (0b00000111, 0b10000000), <code>encode</code> returns a z-address of 16426 = 0b0100000000101010.\n * @param input the list of integer values to be encoded\n * @return the byte array representation of the z-address\n */\npublic byte[] encodeToByteArray(List<Integer> input){\n  checkEncodeInputValidity(input);\n  byte[] address=new byte[(totalBitLength + 7) >> 3];\n  if (!positiveIntegersOnly) {\n    int bitIndex=totalBitLength - 1;\n    for (    int value : input) {\n      byte signBit=(value < 0) ? (byte)0 : 1;\n      address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n  for (int bitsProcessed=0; bitsProcessed < maxBitLength; bitsProcessed++) {\n    for (int index=0; index < input.size(); index++) {\n      if (bitsProcessed >= encodingBits.get(index)) {\n        continue;\n      }\n      int bitPosition=encodingBits.get(index) - bitsProcessed - 1;\n      byte maskedBit=(byte)((input.get(index) >> bitPosition) & 1);\n      address[bitIndex >> 3]|=maskedBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  return address;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int bitIndex=totalBitLength - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "totalBitLength - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 128,
      "startColumnNumber" : 46,
      "endLineNumber" : 128,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 128,
        "startColumnNumber" : 23,
        "endLineNumber" : 128,
        "endColumnNumber" : 107
      },
      "nodeContext" : "positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 107
      },
      "nodeContext" : "bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 108
      },
      "nodeContext" : "int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1360,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkEncodeInputValidity(input);\n  byte[] address=new byte[(totalBitLength + 7) >> 3];\n  if (!positiveIntegersOnly) {\n    int bitIndex=totalBitLength - 1;\n    for (    int value : input) {\n      byte signBit=(value < 0) ? (byte)0 : 1;\n      address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n  for (int bitsProcessed=0; bitsProcessed < maxBitLength; bitsProcessed++) {\n    for (int index=0; index < input.size(); index++) {\n      if (bitsProcessed >= encodingBits.get(index)) {\n        continue;\n      }\n      int bitPosition=encodingBits.get(index) - bitsProcessed - 1;\n      byte maskedBit=(byte)((input.get(index) >> bitPosition) & 1);\n      address[bitIndex >> 3]|=maskedBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  return address;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Encodes the input list into its corresponding z-address and returns a byte array, with the least significant bit at index 0. <p/> <code>encode</code> interweaves the bit representations of the input values from the most significant bit to create the final z-address. <p/> For example: for a list of (7, 128) = (0b00000111, 0b10000000), <code>encode</code> returns a z-address of 16426 = 0b0100000000101010.\n * @param input the list of integer values to be encoded\n * @return the byte array representation of the z-address\n */\npublic byte[] encodeToByteArray(List<Integer> input){\n  checkEncodeInputValidity(input);\n  byte[] address=new byte[(totalBitLength + 7) >> 3];\n  if (!positiveIntegersOnly) {\n    int bitIndex=totalBitLength - 1;\n    for (    int value : input) {\n      byte signBit=(value < 0) ? (byte)0 : 1;\n      address[bitIndex >> 3]|=signBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n  for (int bitsProcessed=0; bitsProcessed < maxBitLength; bitsProcessed++) {\n    for (int index=0; index < input.size(); index++) {\n      if (bitsProcessed >= encodingBits.get(index)) {\n        continue;\n      }\n      int bitPosition=encodingBits.get(index) - bitsProcessed - 1;\n      byte maskedBit=(byte)((input.get(index) >> bitPosition) & 1);\n      address[bitIndex >> 3]|=maskedBit << (bitIndex & 7);\n      bitIndex--;\n    }\n  }\n  return address;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 108
      },
      "nodeContext" : "int bitIndex=positiveIntegersOnly ? totalBitLength - 1 : totalBitLength - encodingBits.size() - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 120,
    "startColumnNumber" : 27,
    "endLineNumber" : 120,
    "endColumnNumber" : 45
  }, {
    "charLength" : 18,
    "startLineNumber" : 128,
    "startColumnNumber" : 46,
    "endLineNumber" : 128,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}