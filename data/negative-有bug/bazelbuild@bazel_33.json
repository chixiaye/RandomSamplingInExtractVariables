{
  "id" : 33,
  "expression" : "(TargetParsingException)exception",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/skyframe/SkyframeTargetPatternEvaluator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(TargetParsingException)exception",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 128,
      "startColumnNumber" : 37,
      "endLineNumber" : 128,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 71
      },
      "nodeContext" : "targetParsingException=(TargetParsingException)exception",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 72
      },
      "nodeContext" : "targetParsingException=(TargetParsingException)exception;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 127,
        "startColumnNumber" : 59,
        "endLineNumber" : 129,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  targetParsingException=(TargetParsingException)exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1049,
        "startLineNumber" : 127,
        "startColumnNumber" : 10,
        "endLineNumber" : 146,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (exception instanceof TargetParsingException) {\n  targetParsingException=(TargetParsingException)exception;\n}\n else if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n  targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n}\n else {\n  BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n  targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 121,
        "startColumnNumber" : 42,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Exception exception=error.getException();\n  errorMessage=exception.getMessage();\n  if (exception instanceof TargetParsingException) {\n    targetParsingException=(TargetParsingException)exception;\n  }\n else   if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n    targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n  }\n else {\n    BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n    targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1902,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (error.getException() != null) {\n  Exception exception=error.getException();\n  errorMessage=exception.getMessage();\n  if (exception instanceof TargetParsingException) {\n    targetParsingException=(TargetParsingException)exception;\n  }\n else   if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n    targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n  }\n else {\n    BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n    targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n  }\n}\n else if (!error.getCycleInfo().isEmpty()) {\n  errorMessage=\"cycles detected during target parsing\";\n  targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n  skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n}\n else {\n  throw new IllegalStateException(error.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 145,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 112,
        "startColumnNumber" : 13,
        "endLineNumber" : 165,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String rawPattern=patternLookup.pattern;\n  ErrorInfo error=result.errorMap().get(key);\n  if (error == null) {\n    Preconditions.checkState(!keepGoing);\n    continue;\n  }\n  String errorMessage;\n  TargetParsingException targetParsingException;\n  if (error.getException() != null) {\n    Exception exception=error.getException();\n    errorMessage=exception.getMessage();\n    if (exception instanceof TargetParsingException) {\n      targetParsingException=(TargetParsingException)exception;\n    }\n else     if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n      targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n    }\n else {\n      BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n      targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n    }\n  }\n else   if (!error.getCycleInfo().isEmpty()) {\n    errorMessage=\"cycles detected during target parsing\";\n    targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n    skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n  }\n else {\n    throw new IllegalStateException(error.toString());\n  }\n  if (keepGoing) {\n    eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n    eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n  }\n else {\n    eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n    throw targetParsingException;\n  }\n  resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3283,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 165,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (resultValue != null) {\n  try {\n    Collection<Target> resolvedTargets=patternLookup.process(eventHandler,resultValue,walkableGraph,keepGoing);\n    resultBuilder.put(patternLookup.pattern,resolvedTargets);\n  }\n catch (  TargetParsingException e) {\n    if (!keepGoing) {\n      throw e;\n    }\n    eventHandler.handle(createPatternParsingError(e,patternLookup.pattern));\n    eventHandler.post(PatternExpandingError.skipped(patternLookup.pattern,e.getMessage()));\n    resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n  }\n}\n else {\n  String rawPattern=patternLookup.pattern;\n  ErrorInfo error=result.errorMap().get(key);\n  if (error == null) {\n    Preconditions.checkState(!keepGoing);\n    continue;\n  }\n  String errorMessage;\n  TargetParsingException targetParsingException;\n  if (error.getException() != null) {\n    Exception exception=error.getException();\n    errorMessage=exception.getMessage();\n    if (exception instanceof TargetParsingException) {\n      targetParsingException=(TargetParsingException)exception;\n    }\n else     if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n      targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n    }\n else {\n      BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n      targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n    }\n  }\n else   if (!error.getCycleInfo().isEmpty()) {\n    errorMessage=\"cycles detected during target parsing\";\n    targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n    skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n  }\n else {\n    throw new IllegalStateException(error.toString());\n  }\n  if (keepGoing) {\n    eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n    eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n  }\n else {\n    eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n    throw targetParsingException;\n  }\n  resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 306,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3384,
        "startLineNumber" : 96,
        "startColumnNumber" : 55,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SkyKey key=patternLookup.skyKey;\n  SkyValue resultValue=result.get(key);\n  if (resultValue != null) {\n    try {\n      Collection<Target> resolvedTargets=patternLookup.process(eventHandler,resultValue,walkableGraph,keepGoing);\n      resultBuilder.put(patternLookup.pattern,resolvedTargets);\n    }\n catch (    TargetParsingException e) {\n      if (!keepGoing) {\n        throw e;\n      }\n      eventHandler.handle(createPatternParsingError(e,patternLookup.pattern));\n      eventHandler.post(PatternExpandingError.skipped(patternLookup.pattern,e.getMessage()));\n      resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n    }\n  }\n else {\n    String rawPattern=patternLookup.pattern;\n    ErrorInfo error=result.errorMap().get(key);\n    if (error == null) {\n      Preconditions.checkState(!keepGoing);\n      continue;\n    }\n    String errorMessage;\n    TargetParsingException targetParsingException;\n    if (error.getException() != null) {\n      Exception exception=error.getException();\n      errorMessage=exception.getMessage();\n      if (exception instanceof TargetParsingException) {\n        targetParsingException=(TargetParsingException)exception;\n      }\n else       if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n        targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n      }\n else {\n        BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n        targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n      }\n    }\n else     if (!error.getCycleInfo().isEmpty()) {\n      errorMessage=\"cycles detected during target parsing\";\n      targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n      skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n    }\n else {\n      throw new IllegalStateException(error.toString());\n    }\n    if (keepGoing) {\n      eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n      eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n    }\n else {\n      eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n      throw targetParsingException;\n    }\n    resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3435,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (PatternLookup patternLookup : patternLookups) {\n  SkyKey key=patternLookup.skyKey;\n  SkyValue resultValue=result.get(key);\n  if (resultValue != null) {\n    try {\n      Collection<Target> resolvedTargets=patternLookup.process(eventHandler,resultValue,walkableGraph,keepGoing);\n      resultBuilder.put(patternLookup.pattern,resolvedTargets);\n    }\n catch (    TargetParsingException e) {\n      if (!keepGoing) {\n        throw e;\n      }\n      eventHandler.handle(createPatternParsingError(e,patternLookup.pattern));\n      eventHandler.post(PatternExpandingError.skipped(patternLookup.pattern,e.getMessage()));\n      resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n    }\n  }\n else {\n    String rawPattern=patternLookup.pattern;\n    ErrorInfo error=result.errorMap().get(key);\n    if (error == null) {\n      Preconditions.checkState(!keepGoing);\n      continue;\n    }\n    String errorMessage;\n    TargetParsingException targetParsingException;\n    if (error.getException() != null) {\n      Exception exception=error.getException();\n      errorMessage=exception.getMessage();\n      if (exception instanceof TargetParsingException) {\n        targetParsingException=(TargetParsingException)exception;\n      }\n else       if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n        targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n      }\n else {\n        BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n        targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n      }\n    }\n else     if (!error.getCycleInfo().isEmpty()) {\n      errorMessage=\"cycles detected during target parsing\";\n      targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n      skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n    }\n else {\n      throw new IllegalStateException(error.toString());\n    }\n    if (keepGoing) {\n      eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n      eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n    }\n else {\n      eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n      throw targetParsingException;\n    }\n    resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 330,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4731,
        "startLineNumber" : 68,
        "startColumnNumber" : 58,
        "endLineNumber" : 168,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableMap.Builder<String,Collection<Target>> resultBuilder=ImmutableMap.builder();\n  List<PatternLookup> patternLookups=new ArrayList<>();\n  List<SkyKey> allKeys=new ArrayList<>();\n  for (  String pattern : patterns) {\n    Preconditions.checkArgument(!pattern.startsWith(\"-\"));\n    PatternLookup patternLookup=createPatternLookup(relativeWorkingDirectory,eventHandler,pattern,keepGoing);\n    if (patternLookup == null) {\n      resultBuilder.put(pattern,ImmutableSet.of());\n    }\n else {\n      patternLookups.add(patternLookup);\n      allKeys.add(patternLookup.skyKey);\n    }\n  }\n  EvaluationResult<SkyValue> result=skyframeExecutor.targetPatterns(allKeys,SkyframeExecutor.DEFAULT_THREAD_COUNT,keepGoing,eventHandler);\n  Exception catastrophe=result.getCatastrophe();\n  Throwables.propagateIfPossible(catastrophe,TargetParsingException.class);\n  if (catastrophe != null) {\n    BugReport.sendBugReport(new IllegalStateException(\"Non-TargetParsingException catastrophe for \" + result + \" and \"+ patterns,catastrophe));\n  }\n  WalkableGraph walkableGraph=Preconditions.checkNotNull(result.getWalkableGraph(),result);\n  for (  PatternLookup patternLookup : patternLookups) {\n    SkyKey key=patternLookup.skyKey;\n    SkyValue resultValue=result.get(key);\n    if (resultValue != null) {\n      try {\n        Collection<Target> resolvedTargets=patternLookup.process(eventHandler,resultValue,walkableGraph,keepGoing);\n        resultBuilder.put(patternLookup.pattern,resolvedTargets);\n      }\n catch (      TargetParsingException e) {\n        if (!keepGoing) {\n          throw e;\n        }\n        eventHandler.handle(createPatternParsingError(e,patternLookup.pattern));\n        eventHandler.post(PatternExpandingError.skipped(patternLookup.pattern,e.getMessage()));\n        resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n      }\n    }\n else {\n      String rawPattern=patternLookup.pattern;\n      ErrorInfo error=result.errorMap().get(key);\n      if (error == null) {\n        Preconditions.checkState(!keepGoing);\n        continue;\n      }\n      String errorMessage;\n      TargetParsingException targetParsingException;\n      if (error.getException() != null) {\n        Exception exception=error.getException();\n        errorMessage=exception.getMessage();\n        if (exception instanceof TargetParsingException) {\n          targetParsingException=(TargetParsingException)exception;\n        }\n else         if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n          targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n        }\n else {\n          BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n          targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n        }\n      }\n else       if (!error.getCycleInfo().isEmpty()) {\n        errorMessage=\"cycles detected during target parsing\";\n        targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n        skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n      }\n else {\n        throw new IllegalStateException(error.toString());\n      }\n      if (keepGoing) {\n        eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n        eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n      }\n else {\n        eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n        throw targetParsingException;\n      }\n      resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n    }\n  }\n  return resultBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 493,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5009,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 168,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Map<String,Collection<Target>> preloadTargetPatterns(ExtendedEventHandler eventHandler,PathFragment relativeWorkingDirectory,Collection<String> patterns,boolean keepGoing) throws TargetParsingException, InterruptedException {\n  ImmutableMap.Builder<String,Collection<Target>> resultBuilder=ImmutableMap.builder();\n  List<PatternLookup> patternLookups=new ArrayList<>();\n  List<SkyKey> allKeys=new ArrayList<>();\n  for (  String pattern : patterns) {\n    Preconditions.checkArgument(!pattern.startsWith(\"-\"));\n    PatternLookup patternLookup=createPatternLookup(relativeWorkingDirectory,eventHandler,pattern,keepGoing);\n    if (patternLookup == null) {\n      resultBuilder.put(pattern,ImmutableSet.of());\n    }\n else {\n      patternLookups.add(patternLookup);\n      allKeys.add(patternLookup.skyKey);\n    }\n  }\n  EvaluationResult<SkyValue> result=skyframeExecutor.targetPatterns(allKeys,SkyframeExecutor.DEFAULT_THREAD_COUNT,keepGoing,eventHandler);\n  Exception catastrophe=result.getCatastrophe();\n  Throwables.propagateIfPossible(catastrophe,TargetParsingException.class);\n  if (catastrophe != null) {\n    BugReport.sendBugReport(new IllegalStateException(\"Non-TargetParsingException catastrophe for \" + result + \" and \"+ patterns,catastrophe));\n  }\n  WalkableGraph walkableGraph=Preconditions.checkNotNull(result.getWalkableGraph(),result);\n  for (  PatternLookup patternLookup : patternLookups) {\n    SkyKey key=patternLookup.skyKey;\n    SkyValue resultValue=result.get(key);\n    if (resultValue != null) {\n      try {\n        Collection<Target> resolvedTargets=patternLookup.process(eventHandler,resultValue,walkableGraph,keepGoing);\n        resultBuilder.put(patternLookup.pattern,resolvedTargets);\n      }\n catch (      TargetParsingException e) {\n        if (!keepGoing) {\n          throw e;\n        }\n        eventHandler.handle(createPatternParsingError(e,patternLookup.pattern));\n        eventHandler.post(PatternExpandingError.skipped(patternLookup.pattern,e.getMessage()));\n        resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n      }\n    }\n else {\n      String rawPattern=patternLookup.pattern;\n      ErrorInfo error=result.errorMap().get(key);\n      if (error == null) {\n        Preconditions.checkState(!keepGoing);\n        continue;\n      }\n      String errorMessage;\n      TargetParsingException targetParsingException;\n      if (error.getException() != null) {\n        Exception exception=error.getException();\n        errorMessage=exception.getMessage();\n        if (exception instanceof TargetParsingException) {\n          targetParsingException=(TargetParsingException)exception;\n        }\n else         if (key instanceof PackageValue.Key && exception instanceof NoSuchPackageException) {\n          targetParsingException=new TargetParsingException(errorMessage,exception,((NoSuchPackageException)exception).getDetailedExitCode());\n        }\n else {\n          BugReport.sendBugReport(new IllegalStateException(\"Unexpected exception when processing \" + key,exception));\n          targetParsingException=DetailedException.getDetailedExitCode(exception) != null ? new TargetParsingException(errorMessage,exception,DetailedException.getDetailedExitCode(exception)) : new TargetParsingException(errorMessage,TargetPatterns.Code.CANNOT_PRELOAD_TARGET);\n        }\n      }\n else       if (!error.getCycleInfo().isEmpty()) {\n        errorMessage=\"cycles detected during target parsing\";\n        targetParsingException=new TargetParsingException(errorMessage,TargetPatterns.Code.CYCLE);\n        skyframeExecutor.getCyclesReporter().reportCycles(error.getCycleInfo(),key,eventHandler);\n      }\n else {\n        throw new IllegalStateException(error.toString());\n      }\n      if (keepGoing) {\n        eventHandler.handle(createPatternParsingError(targetParsingException,rawPattern));\n        eventHandler.post(PatternExpandingError.skipped(rawPattern,errorMessage));\n      }\n else {\n        eventHandler.post(PatternExpandingError.failed(patternLookup.pattern,errorMessage));\n        throw targetParsingException;\n      }\n      resultBuilder.put(patternLookup.pattern,ImmutableSet.of());\n    }\n  }\n  return resultBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 530,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 72
      },
      "nodeContext" : "targetParsingException=(TargetParsingException)exception;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.google.devtools.build.lib.cmdline.TargetParsingException"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 128,
    "startColumnNumber" : 37,
    "endLineNumber" : 128,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}