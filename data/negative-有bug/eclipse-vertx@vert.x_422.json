{
  "id" : 422,
  "expression" : "s",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/LocalSharedDataTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 77,
      "startColumnNumber" : 17,
      "endLineNumber" : 77,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 19
      },
      "nodeContext" : "map.put(key,s)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 20
      },
      "nodeContext" : "map.put(key,s);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 58,
        "startColumnNumber" : 46,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  LocalMap map=sharedData.getLocalMap(\"foo\");\n  String key=\"key\";\n  double d=new Random().nextDouble();\n  map.put(key,d);\n  assertEquals(d,map.get(key));\n  float f=new Random().nextFloat();\n  map.put(key,f);\n  assertEquals(f,map.get(key));\n  byte b=(byte)new Random().nextInt();\n  map.put(key,b);\n  assertEquals(b,map.get(key));\n  short s=(short)new Random().nextInt();\n  map.put(key,s);\n  assertEquals(s,map.get(key));\n  int i=new Random().nextInt();\n  map.put(key,i);\n  assertEquals(i,map.get(key));\n  long l=new Random().nextLong();\n  map.put(key,l);\n  assertEquals(l,map.get(key));\n  map.put(key,true);\n  assertTrue((Boolean)map.get(key));\n  map.put(key,false);\n  assertFalse((Boolean)map.get(key));\n  char c=(char)new Random().nextLong();\n  map.put(key,c);\n  assertEquals(c,map.get(key));\n  Buffer buff=TestUtils.randomBuffer(100);\n  map.put(key,buff);\n  Buffer got1=(Buffer)map.get(key);\n  assertTrue(got1 != buff);\n  assertEquals(buff,map.get(key));\n  Buffer got2=(Buffer)map.get(key);\n  assertTrue(got1 != got2);\n  assertTrue(got2 != buff);\n  assertEquals(buff,map.get(key));\n  byte[] bytes=TestUtils.randomByteArray(100);\n  map.put(key,bytes);\n  byte[] bgot1=(byte[])map.get(key);\n  assertTrue(bgot1 != bytes);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot1));\n  byte[] bgot2=(byte[])map.get(key);\n  assertTrue(bgot2 != bytes);\n  assertTrue(bgot1 != bgot2);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot2));\n  assertIllegalArgumentException(() -> map.put(key,new SomeOtherClass()));\n  JsonObject obj=new JsonObject().put(\"foo\",\"bar\");\n  map.put(\"obj\",obj);\n  JsonObject other=(JsonObject)map.get(\"obj\");\n  assertEquals(obj,other);\n  assertNotSame(obj,other);\n  JsonArray arr=new JsonArray().add(\"foo\");\n  map.put(\"arr\",arr);\n  JsonArray otherArr=(JsonArray)map.get(\"arr\");\n  assertEquals(arr,otherArr);\n  assertNotSame(arr,otherArr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 456,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMapTypes() throws Exception {\n  LocalMap map=sharedData.getLocalMap(\"foo\");\n  String key=\"key\";\n  double d=new Random().nextDouble();\n  map.put(key,d);\n  assertEquals(d,map.get(key));\n  float f=new Random().nextFloat();\n  map.put(key,f);\n  assertEquals(f,map.get(key));\n  byte b=(byte)new Random().nextInt();\n  map.put(key,b);\n  assertEquals(b,map.get(key));\n  short s=(short)new Random().nextInt();\n  map.put(key,s);\n  assertEquals(s,map.get(key));\n  int i=new Random().nextInt();\n  map.put(key,i);\n  assertEquals(i,map.get(key));\n  long l=new Random().nextLong();\n  map.put(key,l);\n  assertEquals(l,map.get(key));\n  map.put(key,true);\n  assertTrue((Boolean)map.get(key));\n  map.put(key,false);\n  assertFalse((Boolean)map.get(key));\n  char c=(char)new Random().nextLong();\n  map.put(key,c);\n  assertEquals(c,map.get(key));\n  Buffer buff=TestUtils.randomBuffer(100);\n  map.put(key,buff);\n  Buffer got1=(Buffer)map.get(key);\n  assertTrue(got1 != buff);\n  assertEquals(buff,map.get(key));\n  Buffer got2=(Buffer)map.get(key);\n  assertTrue(got1 != got2);\n  assertTrue(got2 != buff);\n  assertEquals(buff,map.get(key));\n  byte[] bytes=TestUtils.randomByteArray(100);\n  map.put(key,bytes);\n  byte[] bgot1=(byte[])map.get(key);\n  assertTrue(bgot1 != bytes);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot1));\n  byte[] bgot2=(byte[])map.get(key);\n  assertTrue(bgot2 != bytes);\n  assertTrue(bgot1 != bgot2);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot2));\n  assertIllegalArgumentException(() -> map.put(key,new SomeOtherClass()));\n  JsonObject obj=new JsonObject().put(\"foo\",\"bar\");\n  map.put(\"obj\",obj);\n  JsonObject other=(JsonObject)map.get(\"obj\");\n  assertEquals(obj,other);\n  assertNotSame(obj,other);\n  JsonArray arr=new JsonArray().add(\"foo\");\n  map.put(\"arr\",arr);\n  JsonArray otherArr=(JsonArray)map.get(\"arr\");\n  assertEquals(arr,otherArr);\n  assertNotSame(arr,otherArr);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 464,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 20
      },
      "nodeContext" : "map.put(key,s);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "short"
  }, {
    "nodeContext" : "s",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 78,
      "startColumnNumber" : 17,
      "endLineNumber" : 78,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertEquals(s,map.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertEquals(s,map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 58,
        "startColumnNumber" : 46,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  LocalMap map=sharedData.getLocalMap(\"foo\");\n  String key=\"key\";\n  double d=new Random().nextDouble();\n  map.put(key,d);\n  assertEquals(d,map.get(key));\n  float f=new Random().nextFloat();\n  map.put(key,f);\n  assertEquals(f,map.get(key));\n  byte b=(byte)new Random().nextInt();\n  map.put(key,b);\n  assertEquals(b,map.get(key));\n  short s=(short)new Random().nextInt();\n  map.put(key,s);\n  assertEquals(s,map.get(key));\n  int i=new Random().nextInt();\n  map.put(key,i);\n  assertEquals(i,map.get(key));\n  long l=new Random().nextLong();\n  map.put(key,l);\n  assertEquals(l,map.get(key));\n  map.put(key,true);\n  assertTrue((Boolean)map.get(key));\n  map.put(key,false);\n  assertFalse((Boolean)map.get(key));\n  char c=(char)new Random().nextLong();\n  map.put(key,c);\n  assertEquals(c,map.get(key));\n  Buffer buff=TestUtils.randomBuffer(100);\n  map.put(key,buff);\n  Buffer got1=(Buffer)map.get(key);\n  assertTrue(got1 != buff);\n  assertEquals(buff,map.get(key));\n  Buffer got2=(Buffer)map.get(key);\n  assertTrue(got1 != got2);\n  assertTrue(got2 != buff);\n  assertEquals(buff,map.get(key));\n  byte[] bytes=TestUtils.randomByteArray(100);\n  map.put(key,bytes);\n  byte[] bgot1=(byte[])map.get(key);\n  assertTrue(bgot1 != bytes);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot1));\n  byte[] bgot2=(byte[])map.get(key);\n  assertTrue(bgot2 != bytes);\n  assertTrue(bgot1 != bgot2);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot2));\n  assertIllegalArgumentException(() -> map.put(key,new SomeOtherClass()));\n  JsonObject obj=new JsonObject().put(\"foo\",\"bar\");\n  map.put(\"obj\",obj);\n  JsonObject other=(JsonObject)map.get(\"obj\");\n  assertEquals(obj,other);\n  assertNotSame(obj,other);\n  JsonArray arr=new JsonArray().add(\"foo\");\n  map.put(\"arr\",arr);\n  JsonArray otherArr=(JsonArray)map.get(\"arr\");\n  assertEquals(arr,otherArr);\n  assertNotSame(arr,otherArr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 456,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMapTypes() throws Exception {\n  LocalMap map=sharedData.getLocalMap(\"foo\");\n  String key=\"key\";\n  double d=new Random().nextDouble();\n  map.put(key,d);\n  assertEquals(d,map.get(key));\n  float f=new Random().nextFloat();\n  map.put(key,f);\n  assertEquals(f,map.get(key));\n  byte b=(byte)new Random().nextInt();\n  map.put(key,b);\n  assertEquals(b,map.get(key));\n  short s=(short)new Random().nextInt();\n  map.put(key,s);\n  assertEquals(s,map.get(key));\n  int i=new Random().nextInt();\n  map.put(key,i);\n  assertEquals(i,map.get(key));\n  long l=new Random().nextLong();\n  map.put(key,l);\n  assertEquals(l,map.get(key));\n  map.put(key,true);\n  assertTrue((Boolean)map.get(key));\n  map.put(key,false);\n  assertFalse((Boolean)map.get(key));\n  char c=(char)new Random().nextLong();\n  map.put(key,c);\n  assertEquals(c,map.get(key));\n  Buffer buff=TestUtils.randomBuffer(100);\n  map.put(key,buff);\n  Buffer got1=(Buffer)map.get(key);\n  assertTrue(got1 != buff);\n  assertEquals(buff,map.get(key));\n  Buffer got2=(Buffer)map.get(key);\n  assertTrue(got1 != got2);\n  assertTrue(got2 != buff);\n  assertEquals(buff,map.get(key));\n  byte[] bytes=TestUtils.randomByteArray(100);\n  map.put(key,bytes);\n  byte[] bgot1=(byte[])map.get(key);\n  assertTrue(bgot1 != bytes);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot1));\n  byte[] bgot2=(byte[])map.get(key);\n  assertTrue(bgot2 != bytes);\n  assertTrue(bgot1 != bgot2);\n  assertTrue(TestUtils.byteArraysEqual(bytes,bgot2));\n  assertIllegalArgumentException(() -> map.put(key,new SomeOtherClass()));\n  JsonObject obj=new JsonObject().put(\"foo\",\"bar\");\n  map.put(\"obj\",obj);\n  JsonObject other=(JsonObject)map.get(\"obj\");\n  assertEquals(obj,other);\n  assertNotSame(obj,other);\n  JsonArray arr=new JsonArray().add(\"foo\");\n  map.put(\"arr\",arr);\n  JsonArray otherArr=(JsonArray)map.get(\"arr\");\n  assertEquals(arr,otherArr);\n  assertNotSame(arr,otherArr);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 464,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertEquals(s,map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 77,
    "startColumnNumber" : 17,
    "endLineNumber" : 77,
    "endColumnNumber" : 18
  }, {
    "charLength" : 1,
    "startLineNumber" : 78,
    "startColumnNumber" : 17,
    "endLineNumber" : 78,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}