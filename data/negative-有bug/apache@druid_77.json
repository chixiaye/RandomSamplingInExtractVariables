{
  "id" : 77,
  "expression" : "\"5.0\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/transform/TransformSpecTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"5.0\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 98,
      "startColumnNumber" : 41,
      "endLineNumber" : 98,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 98,
        "endColumnNumber" : 47
      },
      "nodeContext" : "ImmutableList.of(\"5.0\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Assert.assertEquals(ImmutableList.of(\"5.0\"),row.getDimension(\"g\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(ImmutableList.of(\"5.0\"),row.getDimension(\"g\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final TransformSpec transformSpec=new TransformSpec(null,ImmutableList.of(new ExpressionTransform(\"f\",\"concat(x,y)\",TestExprMacroTable.INSTANCE),new ExpressionTransform(\"g\",\"a + b\",TestExprMacroTable.INSTANCE),new ExpressionTransform(\"h\",\"concat(f,g)\",TestExprMacroTable.INSTANCE)));\n  Assert.assertEquals(ImmutableSet.of(\"x\",\"y\",\"a\",\"b\",\"f\",\"g\"),transformSpec.getRequiredColumns());\n  final InputRowParser<Map<String,Object>> parser=transformSpec.decorate(PARSER);\n  final InputRow row=parser.parseBatch(ROW1).get(0);\n  Assert.assertNotNull(row);\n  Assert.assertEquals(DateTimes.of(\"2000-01-01\").getMillis(),row.getTimestampFromEpoch());\n  Assert.assertEquals(DateTimes.of(\"2000-01-01\"),row.getTimestamp());\n  Assert.assertEquals(ImmutableList.of(\"f\",\"x\",\"y\"),row.getDimensions());\n  Assert.assertEquals(ImmutableList.of(\"foo\"),row.getDimension(\"x\"));\n  Assert.assertEquals(3.0,row.getMetric(\"b\").doubleValue(),0);\n  Assert.assertEquals(\"foobar\",row.getRaw(\"f\"));\n  Assert.assertEquals(ImmutableList.of(\"foobar\"),row.getDimension(\"f\"));\n  Assert.assertEquals(ImmutableList.of(\"5.0\"),row.getDimension(\"g\"));\n  Assert.assertEquals(ImmutableList.of(),row.getDimension(\"h\"));\n  Assert.assertEquals(5L,row.getMetric(\"g\").longValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1435,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTransforms(){\n  final TransformSpec transformSpec=new TransformSpec(null,ImmutableList.of(new ExpressionTransform(\"f\",\"concat(x,y)\",TestExprMacroTable.INSTANCE),new ExpressionTransform(\"g\",\"a + b\",TestExprMacroTable.INSTANCE),new ExpressionTransform(\"h\",\"concat(f,g)\",TestExprMacroTable.INSTANCE)));\n  Assert.assertEquals(ImmutableSet.of(\"x\",\"y\",\"a\",\"b\",\"f\",\"g\"),transformSpec.getRequiredColumns());\n  final InputRowParser<Map<String,Object>> parser=transformSpec.decorate(PARSER);\n  final InputRow row=parser.parseBatch(ROW1).get(0);\n  Assert.assertNotNull(row);\n  Assert.assertEquals(DateTimes.of(\"2000-01-01\").getMillis(),row.getTimestampFromEpoch());\n  Assert.assertEquals(DateTimes.of(\"2000-01-01\"),row.getTimestamp());\n  Assert.assertEquals(ImmutableList.of(\"f\",\"x\",\"y\"),row.getDimensions());\n  Assert.assertEquals(ImmutableList.of(\"foo\"),row.getDimension(\"x\"));\n  Assert.assertEquals(3.0,row.getMetric(\"b\").doubleValue(),0);\n  Assert.assertEquals(\"foobar\",row.getRaw(\"f\"));\n  Assert.assertEquals(ImmutableList.of(\"foobar\"),row.getDimension(\"f\"));\n  Assert.assertEquals(ImmutableList.of(\"5.0\"),row.getDimension(\"g\"));\n  Assert.assertEquals(ImmutableList.of(),row.getDimension(\"h\"));\n  Assert.assertEquals(5L,row.getMetric(\"g\").longValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(ImmutableList.of(\"5.0\"),row.getDimension(\"g\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 98,
    "startColumnNumber" : 41,
    "endLineNumber" : 98,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}