{
  "id" : 248,
  "expression" : "requestedScopes != null",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/oauth2-framework-impl/oauth2-authorization-server/src/main/java/com/baeldung/oauth2/authorization/server/handler/RefreshTokenGrantTypeHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "requestedScopes != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 48,
      "startColumnNumber" : 12,
      "endLineNumber" : 48,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 65
      },
      "nodeContext" : "requestedScopes != null && !requestedScopes.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (requestedScopes != null && !requestedScopes.isEmpty()) {\n  Set<String> rScopes=new HashSet(Arrays.asList(requestedScopes.split(\" \")));\n  Set<String> aScopes=new HashSet(Arrays.asList(approvedScopes.split(\" \")));\n  if (!aScopes.containsAll(rScopes)) {\n    JsonObject error=Json.createObjectBuilder().add(\"error\",\"Invalid_request\").add(\"error_description\",\"Requested scopes should be a subset of the original scopes.\").build();\n    Response response=Response.status(Response.Status.BAD_REQUEST).entity(error).build();\n    throw new WebApplicationException(response);\n  }\n}\n else {\n  requestedScopes=approvedScopes;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2523,
        "startLineNumber" : 21,
        "startColumnNumber" : 113,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String refreshToken=params.getFirst(\"refresh_token\");\n  if (refreshToken == null || \"\".equals(refreshToken)) {\n    throw new WebApplicationException(\"invalid_grant\");\n  }\n  SignedJWT signedRefreshToken=SignedJWT.parse(refreshToken);\n  JWSVerifier verifier=getJWSVerifier();\n  if (!signedRefreshToken.verify(verifier)) {\n    throw new WebApplicationException(\"Invalid refresh token.\");\n  }\n  if (!(new Date().before(signedRefreshToken.getJWTClaimsSet().getExpirationTime()))) {\n    throw new WebApplicationException(\"Refresh token expired.\");\n  }\n  String refreshTokenClientId=signedRefreshToken.getJWTClaimsSet().getStringClaim(\"client_id\");\n  if (!clientId.equals(refreshTokenClientId)) {\n    throw new WebApplicationException(\"Invalid client_id.\");\n  }\n  String subject=signedRefreshToken.getJWTClaimsSet().getSubject();\n  String approvedScopes=signedRefreshToken.getJWTClaimsSet().getStringClaim(\"scope\");\n  String requestedScopes=params.getFirst(\"scope\");\n  if (requestedScopes != null && !requestedScopes.isEmpty()) {\n    Set<String> rScopes=new HashSet(Arrays.asList(requestedScopes.split(\" \")));\n    Set<String> aScopes=new HashSet(Arrays.asList(approvedScopes.split(\" \")));\n    if (!aScopes.containsAll(rScopes)) {\n      JsonObject error=Json.createObjectBuilder().add(\"error\",\"Invalid_request\").add(\"error_description\",\"Requested scopes should be a subset of the original scopes.\").build();\n      Response response=Response.status(Response.Status.BAD_REQUEST).entity(error).build();\n      throw new WebApplicationException(response);\n    }\n  }\n else {\n    requestedScopes=approvedScopes;\n  }\n  String accessToken=getAccessToken(clientId,subject,requestedScopes);\n  return Json.createObjectBuilder().add(\"token_type\",\"Bearer\").add(\"access_token\",accessToken).add(\"expires_in\",expiresInMin * 60).add(\"scope\",requestedScopes).add(\"refresh_token\",refreshToken).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2647,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public JsonObject createAccessToken(String clientId,MultivaluedMap<String,String> params) throws Exception {\n  String refreshToken=params.getFirst(\"refresh_token\");\n  if (refreshToken == null || \"\".equals(refreshToken)) {\n    throw new WebApplicationException(\"invalid_grant\");\n  }\n  SignedJWT signedRefreshToken=SignedJWT.parse(refreshToken);\n  JWSVerifier verifier=getJWSVerifier();\n  if (!signedRefreshToken.verify(verifier)) {\n    throw new WebApplicationException(\"Invalid refresh token.\");\n  }\n  if (!(new Date().before(signedRefreshToken.getJWTClaimsSet().getExpirationTime()))) {\n    throw new WebApplicationException(\"Refresh token expired.\");\n  }\n  String refreshTokenClientId=signedRefreshToken.getJWTClaimsSet().getStringClaim(\"client_id\");\n  if (!clientId.equals(refreshTokenClientId)) {\n    throw new WebApplicationException(\"Invalid client_id.\");\n  }\n  String subject=signedRefreshToken.getJWTClaimsSet().getSubject();\n  String approvedScopes=signedRefreshToken.getJWTClaimsSet().getStringClaim(\"scope\");\n  String requestedScopes=params.getFirst(\"scope\");\n  if (requestedScopes != null && !requestedScopes.isEmpty()) {\n    Set<String> rScopes=new HashSet(Arrays.asList(requestedScopes.split(\" \")));\n    Set<String> aScopes=new HashSet(Arrays.asList(approvedScopes.split(\" \")));\n    if (!aScopes.containsAll(rScopes)) {\n      JsonObject error=Json.createObjectBuilder().add(\"error\",\"Invalid_request\").add(\"error_description\",\"Requested scopes should be a subset of the original scopes.\").build();\n      Response response=Response.status(Response.Status.BAD_REQUEST).entity(error).build();\n      throw new WebApplicationException(response);\n    }\n  }\n else {\n    requestedScopes=approvedScopes;\n  }\n  String accessToken=getAccessToken(clientId,subject,requestedScopes);\n  return Json.createObjectBuilder().add(\"token_type\",\"Bearer\").add(\"access_token\",accessToken).add(\"expires_in\",expiresInMin * 60).add(\"scope\",requestedScopes).add(\"refresh_token\",refreshToken).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 65
      },
      "nodeContext" : "requestedScopes != null && !requestedScopes.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 48,
    "startColumnNumber" : 12,
    "endLineNumber" : 48,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}