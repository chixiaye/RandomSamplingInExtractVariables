{
  "id" : 28,
  "expression" : "ze",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/util/JRTExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ze",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 53,
      "startColumnNumber" : 47,
      "endLineNumber" : 53,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 53,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 50
      },
      "nodeContext" : "zipStream.putNextEntry(ze)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 53,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 51
      },
      "nodeContext" : "zipStream.putNextEntry(ze);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 51,
        "startColumnNumber" : 64,
        "endLineNumber" : 55,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ZipEntry ze=new ZipEntry(outPath);\n  zipStream.putNextEntry(ze);\n  zipStream.write(data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 55,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!outPath.endsWith(\"module-info.class\")) {\n  ZipEntry ze=new ZipEntry(outPath);\n  zipStream.putNextEntry(ze);\n  zipStream.write(data);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 771,
        "startLineNumber" : 37,
        "startColumnNumber" : 20,
        "endLineNumber" : 56,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  byte[] data=Files.readAllBytes(p);\n  List<String> list=new ArrayList<>();\n  p.iterator().forEachRemaining(p2 -> list.add(p2.toString()));\n  assert list.remove(0).equals(\"modules\");\n  if (!list.get(list.size() - 1).equals(\"module-info.class\")) {\n    list.remove(0);\n  }\n  list.remove(0);\n  String outPath=String.join(\"/\",list);\n  if (!outPath.endsWith(\"module-info.class\")) {\n    ZipEntry ze=new ZipEntry(outPath);\n    zipStream.putNextEntry(ze);\n    zipStream.write(data);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 58,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  byte[] data=Files.readAllBytes(p);\n  List<String> list=new ArrayList<>();\n  p.iterator().forEachRemaining(p2 -> list.add(p2.toString()));\n  assert list.remove(0).equals(\"modules\");\n  if (!list.get(list.size() - 1).equals(\"module-info.class\")) {\n    list.remove(0);\n  }\n  list.remove(0);\n  String outPath=String.join(\"/\",list);\n  if (!outPath.endsWith(\"module-info.class\")) {\n    ZipEntry ze=new ZipEntry(outPath);\n    zipStream.putNextEntry(ze);\n    zipStream.write(data);\n  }\n}\n catch (Throwable t) {\n  throw new RuntimeException(t);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 118,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 32,
        "startColumnNumber" : 53,
        "endLineNumber" : 59,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!Files.isRegularFile(p)) {\n    return;\n  }\n  try {\n    byte[] data=Files.readAllBytes(p);\n    List<String> list=new ArrayList<>();\n    p.iterator().forEachRemaining(p2 -> list.add(p2.toString()));\n    assert list.remove(0).equals(\"modules\");\n    if (!list.get(list.size() - 1).equals(\"module-info.class\")) {\n      list.remove(0);\n    }\n    list.remove(0);\n    String outPath=String.join(\"/\",list);\n    if (!outPath.endsWith(\"module-info.class\")) {\n      ZipEntry ze=new ZipEntry(outPath);\n      zipStream.putNextEntry(ze);\n      zipStream.write(data);\n    }\n  }\n catch (  Throwable t) {\n    throw new RuntimeException(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 32,
        "startColumnNumber" : 48,
        "endLineNumber" : 59,
        "endColumnNumber" : 13
      },
      "nodeContext" : "p -> {\n  if (!Files.isRegularFile(p)) {\n    return;\n  }\n  try {\n    byte[] data=Files.readAllBytes(p);\n    List<String> list=new ArrayList<>();\n    p.iterator().forEachRemaining(p2 -> list.add(p2.toString()));\n    assert list.remove(0).equals(\"modules\");\n    if (!list.get(list.size() - 1).equals(\"module-info.class\")) {\n      list.remove(0);\n    }\n    list.remove(0);\n    String outPath=String.join(\"/\",list);\n    if (!outPath.endsWith(\"module-info.class\")) {\n      ZipEntry ze=new ZipEntry(outPath);\n      zipStream.putNextEntry(ze);\n      zipStream.write(data);\n    }\n  }\n catch (  Throwable t) {\n    throw new RuntimeException(t);\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 130,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 53,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 51
      },
      "nodeContext" : "zipStream.putNextEntry(ze);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.zip.ZipEntry"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 53,
    "startColumnNumber" : 47,
    "endLineNumber" : 53,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}