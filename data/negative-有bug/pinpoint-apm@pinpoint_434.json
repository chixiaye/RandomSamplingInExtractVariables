{
  "id" : 434,
  "expression" : "SERVICE_TYPE.getCode()",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/plugins/jboss/src/test/java/com/navercorp/pinpoint/plugin/jboss/StandardHostValveInvokeModifierTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SERVICE_TYPE.getCode()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 129,
      "startColumnNumber" : 48,
      "endLineNumber" : 129,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertEquals(rootSpan.getServiceType(),SERVICE_TYPE.getCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(rootSpan.getServiceType(),SERVICE_TYPE.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 119,
        "startColumnNumber" : 56,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  host.invoke(mockRequest,mockResponse);\n  final List<SpanBo> rootSpans=getCurrentRootSpans();\n  assertEquals(rootSpans.size(),1);\n  final SpanBo rootSpan=rootSpans.get(0);\n  assertEquals(rootSpan.getParentSpanId(),-1);\n  assertEquals(rootSpan.getServiceType(),SERVICE_TYPE.getCode());\n  assertEquals(rootSpan.getRpc(),REQUEST_URI);\n  assertEquals(rootSpan.getEndPoint(),SERVER_NAME + \":\" + SERVER_PORT);\n  assertTrue(StringUtils.isNotBlank(rootSpan.getRemoteAddr()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 762,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Invoke should be traced.\n * @throws Exception the exception\n */\n@Test @IsRootSpan public void invokeShouldBeTraced() throws Exception {\n  host.invoke(mockRequest,mockResponse);\n  final List<SpanBo> rootSpans=getCurrentRootSpans();\n  assertEquals(rootSpans.size(),1);\n  final SpanBo rootSpan=rootSpans.get(0);\n  assertEquals(rootSpan.getParentSpanId(),-1);\n  assertEquals(rootSpan.getServiceType(),SERVICE_TYPE.getCode());\n  assertEquals(rootSpan.getRpc(),REQUEST_URI);\n  assertEquals(rootSpan.getEndPoint(),SERVER_NAME + \":\" + SERVER_PORT);\n  assertTrue(StringUtils.isNotBlank(rootSpan.getRemoteAddr()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(rootSpan.getServiceType(),SERVICE_TYPE.getCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 129,
    "startColumnNumber" : 48,
    "endLineNumber" : 129,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}