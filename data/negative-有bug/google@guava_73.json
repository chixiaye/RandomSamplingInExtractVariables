{
  "id" : 73,
  "expression" : "domain.toString()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/net/HostSpecifier.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "domain.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 99,
      "startColumnNumber" : 31,
      "endLineNumber" : 99,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 99,
        "startColumnNumber" : 13,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new HostSpecifier(domain.toString())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 50
      },
      "nodeContext" : "return new HostSpecifier(domain.toString());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 98,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return new HostSpecifier(domain.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (domain.hasPublicSuffix()) {\n  return new HostSpecifier(domain.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 71,
        "startColumnNumber" : 58,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HostAndPort parsedHost=HostAndPort.fromString(specifier);\n  Preconditions.checkArgument(!parsedHost.hasPort());\n  String host=parsedHost.getHost();\n  InetAddress addr=null;\n  try {\n    addr=InetAddresses.forString(host);\n  }\n catch (  IllegalArgumentException e) {\n  }\n  if (addr != null) {\n    return new HostSpecifier(InetAddresses.toUriString(addr));\n  }\n  InternetDomainName domain=InternetDomainName.from(host);\n  if (domain.hasPublicSuffix()) {\n    return new HostSpecifier(domain.toString());\n  }\n  throw new IllegalArgumentException(\"Domain name does not have a recognized public suffix: \" + host);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1903,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 104,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@code HostSpecifier} built from the provided {@code specifier}, which is already known to be valid. If the  {@code specifier} might be invalid, use {@link #from(String)}instead. <p>The specifier must be in one of these formats: <ul> <li>A domain name, like  {@code google.com}<li>A IPv4 address string, like  {@code 127.0.0.1}<li>An IPv6 address string with or without brackets, like  {@code [2001:db8::1]} or {@code 2001:db8::1}</ul>\n * @throws IllegalArgumentException if the specifier is not valid.\n */\npublic static HostSpecifier fromValid(String specifier){\n  HostAndPort parsedHost=HostAndPort.fromString(specifier);\n  Preconditions.checkArgument(!parsedHost.hasPort());\n  String host=parsedHost.getHost();\n  InetAddress addr=null;\n  try {\n    addr=InetAddresses.forString(host);\n  }\n catch (  IllegalArgumentException e) {\n  }\n  if (addr != null) {\n    return new HostSpecifier(InetAddresses.toUriString(addr));\n  }\n  InternetDomainName domain=InternetDomainName.from(host);\n  if (domain.hasPublicSuffix()) {\n    return new HostSpecifier(domain.toString());\n  }\n  throw new IllegalArgumentException(\"Domain name does not have a recognized public suffix: \" + host);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 50
      },
      "nodeContext" : "return new HostSpecifier(domain.toString());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 99,
    "startColumnNumber" : 31,
    "endLineNumber" : 99,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}