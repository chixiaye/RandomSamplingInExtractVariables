{
  "id" : 171,
  "expression" : "BrokerServiceException.ConsumerAssignException",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/HashRangeExclusiveStickyKeyConsumerSelectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BrokerServiceException.ConsumerAssignException",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 178,
      "startColumnNumber" : 21,
      "endLineNumber" : 178,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 178,
        "startColumnNumber" : 21,
        "endLineNumber" : 178,
        "endColumnNumber" : 67
      },
      "nodeContext" : "BrokerServiceException.ConsumerAssignException",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 178,
        "startColumnNumber" : 21,
        "endLineNumber" : 178,
        "endColumnNumber" : 74
      },
      "nodeContext" : "BrokerServiceException.ConsumerAssignException ignore",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 178,
        "startColumnNumber" : 14,
        "endLineNumber" : 179,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (BrokerServiceException.ConsumerAssignException ignore) {\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 175,
        "startColumnNumber" : 12,
        "endLineNumber" : 179,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  selector.addConsumer(consumer);\n  Assert.fail(\"should be failed\");\n}\n catch (BrokerServiceException.ConsumerAssignException ignore) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 678,
        "startLineNumber" : 168,
        "startColumnNumber" : 46,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Consumer consumer=mock(Consumer.class);\n  KeySharedMeta keySharedMeta=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n  keySharedMeta.addHashRange().copyFrom(testRange);\n  when(consumer.getKeySharedMeta()).thenReturn(keySharedMeta);\n  Assert.assertEquals(consumer.getKeySharedMeta(),keySharedMeta);\n  try {\n    selector.addConsumer(consumer);\n    Assert.fail(\"should be failed\");\n  }\n catch (  BrokerServiceException.ConsumerAssignException ignore) {\n  }\n  Assert.assertEquals(selector.getRangeConsumer().size(),2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (IntRange testRange : testRanges) {\n  Consumer consumer=mock(Consumer.class);\n  KeySharedMeta keySharedMeta=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n  keySharedMeta.addHashRange().copyFrom(testRange);\n  when(consumer.getKeySharedMeta()).thenReturn(keySharedMeta);\n  Assert.assertEquals(consumer.getKeySharedMeta(),keySharedMeta);\n  try {\n    selector.addConsumer(consumer);\n    Assert.fail(\"should be failed\");\n  }\n catch (  BrokerServiceException.ConsumerAssignException ignore) {\n  }\n  Assert.assertEquals(selector.getRangeConsumer().size(),2);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1951,
        "startLineNumber" : 146,
        "startColumnNumber" : 96,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashRangeExclusiveStickyKeyConsumerSelector selector=new HashRangeExclusiveStickyKeyConsumerSelector(10);\n  Consumer consumer1=mock(Consumer.class);\n  KeySharedMeta keySharedMeta1=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n  keySharedMeta1.addHashRange().setStart(2).setEnd(5);\n  when(consumer1.getKeySharedMeta()).thenReturn(keySharedMeta1);\n  Assert.assertEquals(consumer1.getKeySharedMeta(),keySharedMeta1);\n  selector.addConsumer(consumer1);\n  Assert.assertEquals(selector.getRangeConsumer().size(),2);\n  final List<IntRange> testRanges=new ArrayList<>();\n  testRanges.add(new IntRange().setStart(4).setEnd(6));\n  testRanges.add(new IntRange().setStart(1).setEnd(3));\n  testRanges.add(new IntRange().setStart(2).setEnd(2));\n  testRanges.add(new IntRange().setStart(5).setEnd(5));\n  testRanges.add(new IntRange().setStart(1).setEnd(5));\n  testRanges.add(new IntRange().setStart(2).setEnd(6));\n  testRanges.add(new IntRange().setStart(2).setEnd(5));\n  testRanges.add(new IntRange().setStart(1).setEnd(6));\n  testRanges.add(new IntRange().setStart(8).setEnd(6));\n  for (  IntRange testRange : testRanges) {\n    Consumer consumer=mock(Consumer.class);\n    KeySharedMeta keySharedMeta=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n    keySharedMeta.addHashRange().copyFrom(testRange);\n    when(consumer.getKeySharedMeta()).thenReturn(keySharedMeta);\n    Assert.assertEquals(consumer.getKeySharedMeta(),keySharedMeta);\n    try {\n      selector.addConsumer(consumer);\n      Assert.fail(\"should be failed\");\n    }\n catch (    BrokerServiceException.ConsumerAssignException ignore) {\n    }\n    Assert.assertEquals(selector.getRangeConsumer().size(),2);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSingleRangeConflict() throws BrokerServiceException.ConsumerAssignException {\n  HashRangeExclusiveStickyKeyConsumerSelector selector=new HashRangeExclusiveStickyKeyConsumerSelector(10);\n  Consumer consumer1=mock(Consumer.class);\n  KeySharedMeta keySharedMeta1=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n  keySharedMeta1.addHashRange().setStart(2).setEnd(5);\n  when(consumer1.getKeySharedMeta()).thenReturn(keySharedMeta1);\n  Assert.assertEquals(consumer1.getKeySharedMeta(),keySharedMeta1);\n  selector.addConsumer(consumer1);\n  Assert.assertEquals(selector.getRangeConsumer().size(),2);\n  final List<IntRange> testRanges=new ArrayList<>();\n  testRanges.add(new IntRange().setStart(4).setEnd(6));\n  testRanges.add(new IntRange().setStart(1).setEnd(3));\n  testRanges.add(new IntRange().setStart(2).setEnd(2));\n  testRanges.add(new IntRange().setStart(5).setEnd(5));\n  testRanges.add(new IntRange().setStart(1).setEnd(5));\n  testRanges.add(new IntRange().setStart(2).setEnd(6));\n  testRanges.add(new IntRange().setStart(2).setEnd(5));\n  testRanges.add(new IntRange().setStart(1).setEnd(6));\n  testRanges.add(new IntRange().setStart(8).setEnd(6));\n  for (  IntRange testRange : testRanges) {\n    Consumer consumer=mock(Consumer.class);\n    KeySharedMeta keySharedMeta=new KeySharedMeta().setKeySharedMode(KeySharedMode.STICKY);\n    keySharedMeta.addHashRange().copyFrom(testRange);\n    when(consumer.getKeySharedMeta()).thenReturn(keySharedMeta);\n    Assert.assertEquals(consumer.getKeySharedMeta(),keySharedMeta);\n    try {\n      selector.addConsumer(consumer);\n      Assert.fail(\"should be failed\");\n    }\n catch (    BrokerServiceException.ConsumerAssignException ignore) {\n    }\n    Assert.assertEquals(selector.getRangeConsumer().size(),2);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 178,
        "startColumnNumber" : 21,
        "endLineNumber" : 178,
        "endColumnNumber" : 74
      },
      "nodeContext" : "BrokerServiceException.ConsumerAssignException ignore",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.broker.service.BrokerServiceException.ConsumerAssignException"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 178,
    "startColumnNumber" : 21,
    "endLineNumber" : 178,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}