{
  "id" : 207,
  "expression" : "ParticleEmitter",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-tools/src/com/badlogic/gdx/tools/particleeditor/ScaledNumericPanel.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ParticleEmitter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 53,
      "startColumnNumber" : 50,
      "endLineNumber" : 53,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 53,
        "startColumnNumber" : 50,
        "endLineNumber" : 53,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 53,
        "startColumnNumber" : 50,
        "endLineNumber" : 53,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 53,
        "startColumnNumber" : 33,
        "endLineNumber" : 53,
        "endColumnNumber" : 95
      },
      "nodeContext" : "value instanceof ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 53,
        "startColumnNumber" : 16,
        "endLineNumber" : 53,
        "endColumnNumber" : 95
      },
      "nodeContext" : "hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 96
      },
      "nodeContext" : "final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 49,
        "startColumnNumber" : 112,
        "endLineNumber" : 158,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super(value,name,description);\n  this.value=value;\n  final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n  initializeComponents(chartTitle,hasIndependent);\n  lowMinSlider.setValue(value.getLowMin());\n  lowMaxSlider.setValue(value.getLowMax());\n  highMinSlider.setValue(value.getHighMin());\n  highMaxSlider.setValue(value.getHighMax());\n  chart.setValues(value.getTimeline(),value.getScaling());\n  relativeCheckBox.setSelected(value.isRelative());\n  if (hasIndependent)   independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n  lowMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMin((Float)lowMinSlider.getValue());\n      if (!lowMaxSlider.isVisible())       value.setLowMax((Float)lowMinSlider.getValue());\n    }\n  }\n);\n  lowMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMax((Float)lowMaxSlider.getValue());\n    }\n  }\n);\n  highMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMin((Float)highMinSlider.getValue());\n      if (!highMaxSlider.isVisible())       value.setHighMax((Float)highMinSlider.getValue());\n    }\n  }\n);\n  highMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMax((Float)highMaxSlider.getValue());\n    }\n  }\n);\n  relativeCheckBox.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      value.setRelative(relativeCheckBox.isSelected());\n    }\n  }\n);\n  if (hasIndependent) {\n    independentCheckbox.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent event){\n        ((ParticleEmitter.IndependentScaledNumericValue)value).setIndependent(independentCheckbox.isSelected());\n      }\n    }\n);\n  }\n  lowRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!lowMaxSlider.isVisible();\n      lowMaxSlider.setVisible(visible);\n      lowRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(lowRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(lowRangeButton,constraints);\n      Slider slider=visible ? lowMaxSlider : lowMinSlider;\n      value.setLowMax((Float)slider.getValue());\n    }\n  }\n);\n  highRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!highMaxSlider.isVisible();\n      highMaxSlider.setVisible(visible);\n      highRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(highRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(highRangeButton,constraints);\n      Slider slider=visible ? highMaxSlider : highMinSlider;\n      value.setHighMax((Float)slider.getValue());\n    }\n  }\n);\n  expandButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      chart.setExpanded(!chart.isExpanded());\n      boolean expanded=chart.isExpanded();\n      GridBagLayout layout=(GridBagLayout)getContentPanel().getLayout();\n      GridBagConstraints chartConstraints=layout.getConstraints(chart);\n      GridBagConstraints expandButtonConstraints=layout.getConstraints(expandButton);\n      if (expanded) {\n        chart.setPreferredSize(new Dimension(150,200));\n        expandButton.setText(\"-\");\n        chartConstraints.weightx=1;\n        expandButtonConstraints.weightx=0;\n      }\n else {\n        chart.setPreferredSize(new Dimension(150,30));\n        expandButton.setText(\"+\");\n        chartConstraints.weightx=0;\n        expandButtonConstraints.weightx=1;\n      }\n      layout.setConstraints(chart,chartConstraints);\n      layout.setConstraints(expandButton,expandButtonConstraints);\n      relativeCheckBox.setVisible(!expanded);\n      if (hasIndependent)       independentCheckbox.setVisible(!expanded);\n      formPanel.setVisible(!expanded);\n      chart.revalidate();\n    }\n  }\n);\n  if (value.getLowMin() == value.getLowMax())   lowRangeButton.doClick(0);\n  if (value.getHighMin() == value.getHighMax())   highRangeButton.doClick(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 646,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4622,
        "startLineNumber" : 49,
        "startColumnNumber" : 1,
        "endLineNumber" : 158,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public ScaledNumericPanel(final ScaledNumericValue value,String chartTitle,String name,String description){\n  super(value,name,description);\n  this.value=value;\n  final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n  initializeComponents(chartTitle,hasIndependent);\n  lowMinSlider.setValue(value.getLowMin());\n  lowMaxSlider.setValue(value.getLowMax());\n  highMinSlider.setValue(value.getHighMin());\n  highMaxSlider.setValue(value.getHighMax());\n  chart.setValues(value.getTimeline(),value.getScaling());\n  relativeCheckBox.setSelected(value.isRelative());\n  if (hasIndependent)   independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n  lowMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMin((Float)lowMinSlider.getValue());\n      if (!lowMaxSlider.isVisible())       value.setLowMax((Float)lowMinSlider.getValue());\n    }\n  }\n);\n  lowMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMax((Float)lowMaxSlider.getValue());\n    }\n  }\n);\n  highMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMin((Float)highMinSlider.getValue());\n      if (!highMaxSlider.isVisible())       value.setHighMax((Float)highMinSlider.getValue());\n    }\n  }\n);\n  highMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMax((Float)highMaxSlider.getValue());\n    }\n  }\n);\n  relativeCheckBox.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      value.setRelative(relativeCheckBox.isSelected());\n    }\n  }\n);\n  if (hasIndependent) {\n    independentCheckbox.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent event){\n        ((ParticleEmitter.IndependentScaledNumericValue)value).setIndependent(independentCheckbox.isSelected());\n      }\n    }\n);\n  }\n  lowRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!lowMaxSlider.isVisible();\n      lowMaxSlider.setVisible(visible);\n      lowRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(lowRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(lowRangeButton,constraints);\n      Slider slider=visible ? lowMaxSlider : lowMinSlider;\n      value.setLowMax((Float)slider.getValue());\n    }\n  }\n);\n  highRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!highMaxSlider.isVisible();\n      highMaxSlider.setVisible(visible);\n      highRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(highRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(highRangeButton,constraints);\n      Slider slider=visible ? highMaxSlider : highMinSlider;\n      value.setHighMax((Float)slider.getValue());\n    }\n  }\n);\n  expandButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      chart.setExpanded(!chart.isExpanded());\n      boolean expanded=chart.isExpanded();\n      GridBagLayout layout=(GridBagLayout)getContentPanel().getLayout();\n      GridBagConstraints chartConstraints=layout.getConstraints(chart);\n      GridBagConstraints expandButtonConstraints=layout.getConstraints(expandButton);\n      if (expanded) {\n        chart.setPreferredSize(new Dimension(150,200));\n        expandButton.setText(\"-\");\n        chartConstraints.weightx=1;\n        expandButtonConstraints.weightx=0;\n      }\n else {\n        chart.setPreferredSize(new Dimension(150,30));\n        expandButton.setText(\"+\");\n        chartConstraints.weightx=0;\n        expandButtonConstraints.weightx=1;\n      }\n      layout.setConstraints(chart,chartConstraints);\n      layout.setConstraints(expandButton,expandButtonConstraints);\n      relativeCheckBox.setVisible(!expanded);\n      if (hasIndependent)       independentCheckbox.setVisible(!expanded);\n      formPanel.setVisible(!expanded);\n      chart.revalidate();\n    }\n  }\n);\n  if (value.getLowMin() == value.getLowMax())   lowRangeButton.doClick(0);\n  if (value.getHighMin() == value.getHighMax())   highRangeButton.doClick(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 666,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 96
      },
      "nodeContext" : "final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.graphics.g2d.ParticleEmitter"
  }, {
    "nodeContext" : "ParticleEmitter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 63,
      "startColumnNumber" : 37,
      "endLineNumber" : 63,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 63,
        "startColumnNumber" : 37,
        "endLineNumber" : 63,
        "endColumnNumber" : 82
      },
      "nodeContext" : "ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 63,
        "startColumnNumber" : 37,
        "endLineNumber" : 63,
        "endColumnNumber" : 82
      },
      "nodeContext" : "ParticleEmitter.IndependentScaledNumericValue",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 63,
        "endColumnNumber" : 88
      },
      "nodeContext" : "(ParticleEmitter.IndependentScaledNumericValue)value",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 63,
        "startColumnNumber" : 35,
        "endLineNumber" : 63,
        "endColumnNumber" : 89
      },
      "nodeContext" : "((ParticleEmitter.IndependentScaledNumericValue)value)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 63,
        "startColumnNumber" : 35,
        "endLineNumber" : 63,
        "endColumnNumber" : 105
      },
      "nodeContext" : "((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 63,
        "startColumnNumber" : 3,
        "endLineNumber" : 63,
        "endColumnNumber" : 106
      },
      "nodeContext" : "independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 63,
        "startColumnNumber" : 3,
        "endLineNumber" : 63,
        "endColumnNumber" : 107
      },
      "nodeContext" : "independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 107
      },
      "nodeContext" : "if (hasIndependent) independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4511,
        "startLineNumber" : 49,
        "startColumnNumber" : 112,
        "endLineNumber" : 158,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super(value,name,description);\n  this.value=value;\n  final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n  initializeComponents(chartTitle,hasIndependent);\n  lowMinSlider.setValue(value.getLowMin());\n  lowMaxSlider.setValue(value.getLowMax());\n  highMinSlider.setValue(value.getHighMin());\n  highMaxSlider.setValue(value.getHighMax());\n  chart.setValues(value.getTimeline(),value.getScaling());\n  relativeCheckBox.setSelected(value.isRelative());\n  if (hasIndependent)   independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n  lowMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMin((Float)lowMinSlider.getValue());\n      if (!lowMaxSlider.isVisible())       value.setLowMax((Float)lowMinSlider.getValue());\n    }\n  }\n);\n  lowMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMax((Float)lowMaxSlider.getValue());\n    }\n  }\n);\n  highMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMin((Float)highMinSlider.getValue());\n      if (!highMaxSlider.isVisible())       value.setHighMax((Float)highMinSlider.getValue());\n    }\n  }\n);\n  highMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMax((Float)highMaxSlider.getValue());\n    }\n  }\n);\n  relativeCheckBox.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      value.setRelative(relativeCheckBox.isSelected());\n    }\n  }\n);\n  if (hasIndependent) {\n    independentCheckbox.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent event){\n        ((ParticleEmitter.IndependentScaledNumericValue)value).setIndependent(independentCheckbox.isSelected());\n      }\n    }\n);\n  }\n  lowRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!lowMaxSlider.isVisible();\n      lowMaxSlider.setVisible(visible);\n      lowRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(lowRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(lowRangeButton,constraints);\n      Slider slider=visible ? lowMaxSlider : lowMinSlider;\n      value.setLowMax((Float)slider.getValue());\n    }\n  }\n);\n  highRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!highMaxSlider.isVisible();\n      highMaxSlider.setVisible(visible);\n      highRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(highRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(highRangeButton,constraints);\n      Slider slider=visible ? highMaxSlider : highMinSlider;\n      value.setHighMax((Float)slider.getValue());\n    }\n  }\n);\n  expandButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      chart.setExpanded(!chart.isExpanded());\n      boolean expanded=chart.isExpanded();\n      GridBagLayout layout=(GridBagLayout)getContentPanel().getLayout();\n      GridBagConstraints chartConstraints=layout.getConstraints(chart);\n      GridBagConstraints expandButtonConstraints=layout.getConstraints(expandButton);\n      if (expanded) {\n        chart.setPreferredSize(new Dimension(150,200));\n        expandButton.setText(\"-\");\n        chartConstraints.weightx=1;\n        expandButtonConstraints.weightx=0;\n      }\n else {\n        chart.setPreferredSize(new Dimension(150,30));\n        expandButton.setText(\"+\");\n        chartConstraints.weightx=0;\n        expandButtonConstraints.weightx=1;\n      }\n      layout.setConstraints(chart,chartConstraints);\n      layout.setConstraints(expandButton,expandButtonConstraints);\n      relativeCheckBox.setVisible(!expanded);\n      if (hasIndependent)       independentCheckbox.setVisible(!expanded);\n      formPanel.setVisible(!expanded);\n      chart.revalidate();\n    }\n  }\n);\n  if (value.getLowMin() == value.getLowMax())   lowRangeButton.doClick(0);\n  if (value.getHighMin() == value.getHighMax())   highRangeButton.doClick(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 646,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4622,
        "startLineNumber" : 49,
        "startColumnNumber" : 1,
        "endLineNumber" : 158,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public ScaledNumericPanel(final ScaledNumericValue value,String chartTitle,String name,String description){\n  super(value,name,description);\n  this.value=value;\n  final boolean hasIndependent=value instanceof ParticleEmitter.IndependentScaledNumericValue;\n  initializeComponents(chartTitle,hasIndependent);\n  lowMinSlider.setValue(value.getLowMin());\n  lowMaxSlider.setValue(value.getLowMax());\n  highMinSlider.setValue(value.getHighMin());\n  highMaxSlider.setValue(value.getHighMax());\n  chart.setValues(value.getTimeline(),value.getScaling());\n  relativeCheckBox.setSelected(value.isRelative());\n  if (hasIndependent)   independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n  lowMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMin((Float)lowMinSlider.getValue());\n      if (!lowMaxSlider.isVisible())       value.setLowMax((Float)lowMinSlider.getValue());\n    }\n  }\n);\n  lowMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setLowMax((Float)lowMaxSlider.getValue());\n    }\n  }\n);\n  highMinSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMin((Float)highMinSlider.getValue());\n      if (!highMaxSlider.isVisible())       value.setHighMax((Float)highMinSlider.getValue());\n    }\n  }\n);\n  highMaxSlider.addChangeListener(new ChangeListener(){\n    public void stateChanged(    ChangeEvent event){\n      value.setHighMax((Float)highMaxSlider.getValue());\n    }\n  }\n);\n  relativeCheckBox.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      value.setRelative(relativeCheckBox.isSelected());\n    }\n  }\n);\n  if (hasIndependent) {\n    independentCheckbox.addActionListener(new ActionListener(){\n      public void actionPerformed(      ActionEvent event){\n        ((ParticleEmitter.IndependentScaledNumericValue)value).setIndependent(independentCheckbox.isSelected());\n      }\n    }\n);\n  }\n  lowRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!lowMaxSlider.isVisible();\n      lowMaxSlider.setVisible(visible);\n      lowRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(lowRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(lowRangeButton,constraints);\n      Slider slider=visible ? lowMaxSlider : lowMinSlider;\n      value.setLowMax((Float)slider.getValue());\n    }\n  }\n);\n  highRangeButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      boolean visible=!highMaxSlider.isVisible();\n      highMaxSlider.setVisible(visible);\n      highRangeButton.setText(visible ? \"<\" : \">\");\n      GridBagLayout layout=(GridBagLayout)formPanel.getLayout();\n      GridBagConstraints constraints=layout.getConstraints(highRangeButton);\n      constraints.gridx=visible ? 5 : 4;\n      layout.setConstraints(highRangeButton,constraints);\n      Slider slider=visible ? highMaxSlider : highMinSlider;\n      value.setHighMax((Float)slider.getValue());\n    }\n  }\n);\n  expandButton.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent event){\n      chart.setExpanded(!chart.isExpanded());\n      boolean expanded=chart.isExpanded();\n      GridBagLayout layout=(GridBagLayout)getContentPanel().getLayout();\n      GridBagConstraints chartConstraints=layout.getConstraints(chart);\n      GridBagConstraints expandButtonConstraints=layout.getConstraints(expandButton);\n      if (expanded) {\n        chart.setPreferredSize(new Dimension(150,200));\n        expandButton.setText(\"-\");\n        chartConstraints.weightx=1;\n        expandButtonConstraints.weightx=0;\n      }\n else {\n        chart.setPreferredSize(new Dimension(150,30));\n        expandButton.setText(\"+\");\n        chartConstraints.weightx=0;\n        expandButtonConstraints.weightx=1;\n      }\n      layout.setConstraints(chart,chartConstraints);\n      layout.setConstraints(expandButton,expandButtonConstraints);\n      relativeCheckBox.setVisible(!expanded);\n      if (hasIndependent)       independentCheckbox.setVisible(!expanded);\n      formPanel.setVisible(!expanded);\n      chart.revalidate();\n    }\n  }\n);\n  if (value.getLowMin() == value.getLowMax())   lowRangeButton.doClick(0);\n  if (value.getHighMin() == value.getHighMax())   highRangeButton.doClick(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 666,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 63,
        "startColumnNumber" : 3,
        "endLineNumber" : 63,
        "endColumnNumber" : 107
      },
      "nodeContext" : "independentCheckbox.setSelected(((ParticleEmitter.IndependentScaledNumericValue)value).isIndependent());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "com.badlogic.gdx.graphics.g2d.ParticleEmitter"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 53,
    "startColumnNumber" : 50,
    "endLineNumber" : 53,
    "endColumnNumber" : 65
  }, {
    "charLength" : 15,
    "startLineNumber" : 63,
    "startColumnNumber" : 37,
    "endLineNumber" : 63,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}