{
  "id" : 61,
  "expression" : "targetPrecision",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/functions/casting/TimestampToTimestampCastRule.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "targetPrecision",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 92,
      "startColumnNumber" : 30,
      "endLineNumber" : 92,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 45
      },
      "nodeContext" : "inputPrecision <= targetPrecision",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputPrecision <= targetPrecision) {\n  return operand;\n}\n else {\n  return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 57,
        "startColumnNumber" : 43,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int inputPrecision=LogicalTypeChecks.getPrecision(inputLogicalType);\n  int targetPrecision=LogicalTypeChecks.getPrecision(targetLogicalType);\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    final TimestampKind inputTimestampKind=((TimestampType)inputLogicalType).getKind();\n    final TimestampKind targetTimestampKind=((TimestampType)targetLogicalType).getKind();\n    if (inputTimestampKind == TimestampKind.ROWTIME || inputTimestampKind == TimestampKind.PROCTIME || targetTimestampKind == TimestampKind.ROWTIME || targetTimestampKind == TimestampKind.PROCTIME) {\n      targetPrecision=3;\n    }\n  }\n  final String operand;\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_TO_TIMESTAMP_WITH_LOCAL_ZONE(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else   if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_WITH_LOCAL_ZONE_TO_TIMESTAMP(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else {\n    operand=inputTerm;\n  }\n  if (inputPrecision <= targetPrecision) {\n    return operand;\n  }\n else {\n    return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2201,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String generateExpression(CodeGeneratorCastRule.Context context,String inputTerm,LogicalType inputLogicalType,LogicalType targetLogicalType){\n  final int inputPrecision=LogicalTypeChecks.getPrecision(inputLogicalType);\n  int targetPrecision=LogicalTypeChecks.getPrecision(targetLogicalType);\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    final TimestampKind inputTimestampKind=((TimestampType)inputLogicalType).getKind();\n    final TimestampKind targetTimestampKind=((TimestampType)targetLogicalType).getKind();\n    if (inputTimestampKind == TimestampKind.ROWTIME || inputTimestampKind == TimestampKind.PROCTIME || targetTimestampKind == TimestampKind.ROWTIME || targetTimestampKind == TimestampKind.PROCTIME) {\n      targetPrecision=3;\n    }\n  }\n  final String operand;\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_TO_TIMESTAMP_WITH_LOCAL_ZONE(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else   if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_WITH_LOCAL_ZONE_TO_TIMESTAMP(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else {\n    operand=inputTerm;\n  }\n  if (inputPrecision <= targetPrecision) {\n    return operand;\n  }\n else {\n    return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 45
      },
      "nodeContext" : "inputPrecision <= targetPrecision",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "targetPrecision",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 95,
      "startColumnNumber" : 80,
      "endLineNumber" : 95,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 95,
        "startColumnNumber" : 19,
        "endLineNumber" : 95,
        "endColumnNumber" : 96
      },
      "nodeContext" : "staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 94,
        "startColumnNumber" : 15,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputPrecision <= targetPrecision) {\n  return operand;\n}\n else {\n  return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 57,
        "startColumnNumber" : 43,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int inputPrecision=LogicalTypeChecks.getPrecision(inputLogicalType);\n  int targetPrecision=LogicalTypeChecks.getPrecision(targetLogicalType);\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    final TimestampKind inputTimestampKind=((TimestampType)inputLogicalType).getKind();\n    final TimestampKind targetTimestampKind=((TimestampType)targetLogicalType).getKind();\n    if (inputTimestampKind == TimestampKind.ROWTIME || inputTimestampKind == TimestampKind.PROCTIME || targetTimestampKind == TimestampKind.ROWTIME || targetTimestampKind == TimestampKind.PROCTIME) {\n      targetPrecision=3;\n    }\n  }\n  final String operand;\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_TO_TIMESTAMP_WITH_LOCAL_ZONE(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else   if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_WITH_LOCAL_ZONE_TO_TIMESTAMP(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else {\n    operand=inputTerm;\n  }\n  if (inputPrecision <= targetPrecision) {\n    return operand;\n  }\n else {\n    return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2201,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String generateExpression(CodeGeneratorCastRule.Context context,String inputTerm,LogicalType inputLogicalType,LogicalType targetLogicalType){\n  final int inputPrecision=LogicalTypeChecks.getPrecision(inputLogicalType);\n  int targetPrecision=LogicalTypeChecks.getPrecision(targetLogicalType);\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    final TimestampKind inputTimestampKind=((TimestampType)inputLogicalType).getKind();\n    final TimestampKind targetTimestampKind=((TimestampType)targetLogicalType).getKind();\n    if (inputTimestampKind == TimestampKind.ROWTIME || inputTimestampKind == TimestampKind.PROCTIME || targetTimestampKind == TimestampKind.ROWTIME || targetTimestampKind == TimestampKind.PROCTIME) {\n      targetPrecision=3;\n    }\n  }\n  final String operand;\n  if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_TO_TIMESTAMP_WITH_LOCAL_ZONE(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else   if (inputLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) && targetLogicalType.is(LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n    operand=staticCall(BuiltInMethods.TIMESTAMP_WITH_LOCAL_ZONE_TO_TIMESTAMP(),inputTerm,context.getSessionTimeZoneTerm());\n  }\n else {\n    operand=inputTerm;\n  }\n  if (inputPrecision <= targetPrecision) {\n    return operand;\n  }\n else {\n    return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 97
      },
      "nodeContext" : "return staticCall(BuiltInMethods.TRUNCATE_SQL_TIMESTAMP(),operand,targetPrecision);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 92,
    "startColumnNumber" : 30,
    "endLineNumber" : 92,
    "endColumnNumber" : 45
  }, {
    "charLength" : 15,
    "startLineNumber" : 95,
    "startColumnNumber" : 80,
    "endLineNumber" : 95,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}