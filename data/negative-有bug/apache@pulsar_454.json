{
  "id" : 454,
  "expression" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-package-management/core/src/test/java/org/apache/pulsar/packages/management/core/impl/PackagesManagementImplTest.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 66,
      "startColumnNumber" : 17,
      "endLineNumber" : 66,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 66,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 65,
        "startColumnNumber" : 30,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.getMeta(packageName).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 66,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 77,
      "startColumnNumber" : 17,
      "endLineNumber" : 77,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 76,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 76,
        "startColumnNumber" : 10,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 86,
      "startColumnNumber" : 17,
      "endLineNumber" : 86,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 85,
        "startColumnNumber" : 30,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 85,
        "startColumnNumber" : 10,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n  packagesManagement.download(packageName,outputStream).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 95,
      "startColumnNumber" : 17,
      "endLineNumber" : 95,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 94,
        "startColumnNumber" : 30,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 94,
        "startColumnNumber" : 10,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.delete(packageName).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 104,
      "startColumnNumber" : 17,
      "endLineNumber" : 104,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 103,
        "startColumnNumber" : 30,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 103,
        "startColumnNumber" : 10,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.list(packageName).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 113,
      "startColumnNumber" : 17,
      "endLineNumber" : 113,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 113,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 113,
        "startColumnNumber" : 12,
        "endLineNumber" : 115,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 112,
        "startColumnNumber" : 30,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 112,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 113,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 151,
      "startColumnNumber" : 17,
      "endLineNumber" : 151,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 150,
        "startColumnNumber" : 30,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 150,
        "startColumnNumber" : 10,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  packagesManagement.updateMeta(packageName,metadata).get();\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 170,
      "startColumnNumber" : 17,
      "endLineNumber" : 170,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 170,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 172,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 169,
        "startColumnNumber" : 30,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 169,
        "startColumnNumber" : 10,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  List<String> versions=packagesManagement.list(packageName).get();\n  Assert.assertEquals(1,versions.size());\n  Assert.assertEquals(packageName.getVersion(),versions.get(0));\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 170,
        "startColumnNumber" : 16,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "(e.getCause() instanceof PackagesManagementException.NotFoundException)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 182,
      "startColumnNumber" : 17,
      "endLineNumber" : 182,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 182,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 182,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n  Assert.fail(\"should not throw any exception\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 181,
        "startColumnNumber" : 30,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 517,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  Assert.assertEquals(1,packageNames.size());\n  Assert.assertEquals(packageName.getName(),packageNames.get(0));\n}\n catch (Exception e) {\n  if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5866,
        "startLineNumber" : 60,
        "startColumnNumber" : 45,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 578,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5917,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPackagesManagementFlow(){\n  PackageName packageName=PackageName.get(\"function://tenant/ns/non-existent-package@v1\");\n  try {\n    packagesManagement.getMeta(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata failedUpdateMetadata=PackageMetadata.builder().description(\"Failed update package metadata\").build();\n  try {\n    packagesManagement.updateMeta(packageName,failedUpdateMetadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  PackageMetadata metadata=PackageMetadata.builder().contact(\"test@apache.org\").description(\"A mocked test package\").createTime(System.currentTimeMillis()).build();\n  try (ByteArrayInputStream inputStream=new ByteArrayInputStream(PackageMetadataUtil.toBytes(metadata))){\n    packagesManagement.upload(packageName,metadata,inputStream).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    PackageMetadata getPackageMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,getPackageMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){\n    packagesManagement.download(packageName,outputStream).get();\n    PackageMetadata getPackage=PackageMetadataUtil.fromBytes(outputStream.toByteArray());\n    Assert.assertEquals(metadata,getPackage);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  metadata.setModificationTime(System.currentTimeMillis());\n  try {\n    packagesManagement.updateMeta(packageName,metadata).get();\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    PackageMetadata updatedMetadata=packagesManagement.getMeta(packageName).get();\n    Assert.assertEquals(metadata,updatedMetadata);\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n  try {\n    List<String> versions=packagesManagement.list(packageName).get();\n    Assert.assertEquals(1,versions.size());\n    Assert.assertEquals(packageName.getVersion(),versions.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    List<String> packageNames=packagesManagement.list(packageName.getPkgType(),packageName.getTenant(),packageName.getNamespace()).get();\n    Assert.assertEquals(1,packageNames.size());\n    Assert.assertEquals(packageName.getName(),packageNames.get(0));\n  }\n catch (  Exception e) {\n    if (!(e.getCause() instanceof PackagesManagementException.NotFoundException)) {\n      Assert.fail(\"should not throw any exception\");\n    }\n  }\n  try {\n    packagesManagement.delete(packageName).get();\n  }\n catch (  Exception e) {\n    Assert.fail(\"should not throw any exception\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 182,
        "startColumnNumber" : 16,
        "endLineNumber" : 182,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!(e.getCause() instanceof PackagesManagementException.NotFoundException)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 71,
    "startLineNumber" : 66,
    "startColumnNumber" : 17,
    "endLineNumber" : 66,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 77,
    "startColumnNumber" : 17,
    "endLineNumber" : 77,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 86,
    "startColumnNumber" : 17,
    "endLineNumber" : 86,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 95,
    "startColumnNumber" : 17,
    "endLineNumber" : 95,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 104,
    "startColumnNumber" : 17,
    "endLineNumber" : 104,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 113,
    "startColumnNumber" : 17,
    "endLineNumber" : 113,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 151,
    "startColumnNumber" : 17,
    "endLineNumber" : 151,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 170,
    "startColumnNumber" : 17,
    "endLineNumber" : 170,
    "endColumnNumber" : 88
  }, {
    "charLength" : 71,
    "startLineNumber" : 182,
    "startColumnNumber" : 17,
    "endLineNumber" : 182,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  } ]
}