{
  "id" : 69,
  "expression" : "callback.ignoredExtensions().get(\"nothing\")",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerExtensionsValidatorCallbackTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "callback.ignoredExtensions().get(\"nothing\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 79,
      "startColumnNumber" : 32,
      "endLineNumber" : 79,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(\"nothing\",callback.ignoredExtensions().get(\"nothing\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(\"nothing\",callback.ignoredExtensions().get(\"nothing\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 67,
        "startColumnNumber" : 54,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> extensions=new HashMap<>();\n  extensions.put(\"valid\",\"valid\");\n  extensions.put(\"error\",\"error\");\n  extensions.put(\"nothing\",\"nothing\");\n  OAuthBearerExtensionsValidatorCallback callback=new OAuthBearerExtensionsValidatorCallback(TOKEN,new SaslExtensions(extensions));\n  callback.error(\"error\",\"error\");\n  callback.valid(\"valid\");\n  assertFalse(callback.validatedExtensions().containsKey(\"nothing\"));\n  assertFalse(callback.invalidExtensions().containsKey(\"nothing\"));\n  assertEquals(\"nothing\",callback.ignoredExtensions().get(\"nothing\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Extensions that are neither validated or invalidated must not be present in either maps\n */\n@Test public void testUnvalidatedExtensionsAreIgnored(){\n  Map<String,String> extensions=new HashMap<>();\n  extensions.put(\"valid\",\"valid\");\n  extensions.put(\"error\",\"error\");\n  extensions.put(\"nothing\",\"nothing\");\n  OAuthBearerExtensionsValidatorCallback callback=new OAuthBearerExtensionsValidatorCallback(TOKEN,new SaslExtensions(extensions));\n  callback.error(\"error\",\"error\");\n  callback.valid(\"valid\");\n  assertFalse(callback.validatedExtensions().containsKey(\"nothing\"));\n  assertFalse(callback.invalidExtensions().containsKey(\"nothing\"));\n  assertEquals(\"nothing\",callback.ignoredExtensions().get(\"nothing\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(\"nothing\",callback.ignoredExtensions().get(\"nothing\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 79,
    "startColumnNumber" : 32,
    "endLineNumber" : 79,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}