{
  "id" : 431,
  "expression" : "testInstance",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 133,
      "startColumnNumber" : 23,
      "endLineNumber" : 133,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 133,
        "startColumnNumber" : 23,
        "endLineNumber" : 133,
        "endColumnNumber" : 46
      },
      "nodeContext" : "testInstance.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 133,
        "startColumnNumber" : 11,
        "endLineNumber" : 133,
        "endColumnNumber" : 46
      },
      "nodeContext" : "testClass=testInstance.getClass()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Class<?> testClass=testInstance.getClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Class<?> testClass=testInstance.getClass();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 137,
      "startColumnNumber" : 67,
      "endLineNumber" : 137,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 137,
        "startColumnNumber" : 14,
        "endLineNumber" : 137,
        "endColumnNumber" : 100
      },
      "nodeContext" : "withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 100
      },
      "nodeContext" : "statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 101
      },
      "nodeContext" : "statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 101
      },
      "nodeContext" : "statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 138,
      "startColumnNumber" : 66,
      "endLineNumber" : 138,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 138,
        "startColumnNumber" : 14,
        "endLineNumber" : 138,
        "endColumnNumber" : 99
      },
      "nodeContext" : "withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 99
      },
      "nodeContext" : "statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 100
      },
      "nodeContext" : "statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 138,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 100
      },
      "nodeContext" : "statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 139,
      "startColumnNumber" : 53,
      "endLineNumber" : 139,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 139,
        "startColumnNumber" : 14,
        "endLineNumber" : 139,
        "endColumnNumber" : 86
      },
      "nodeContext" : "withTestInstancePreparation(statement,testInstance,testContextManager)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 86
      },
      "nodeContext" : "statement=withTestInstancePreparation(statement,testInstance,testContextManager)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 87
      },
      "nodeContext" : "statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 87
      },
      "nodeContext" : "statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 140,
      "startColumnNumber" : 57,
      "endLineNumber" : 140,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 140,
        "startColumnNumber" : 14,
        "endLineNumber" : 140,
        "endColumnNumber" : 70
      },
      "nodeContext" : "withPotentialRepeat(statement,testMethod,testInstance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 70
      },
      "nodeContext" : "statement=withPotentialRepeat(statement,testMethod,testInstance)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 71
      },
      "nodeContext" : "statement=withPotentialRepeat(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 71
      },
      "nodeContext" : "statement=withPotentialRepeat(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 141,
      "startColumnNumber" : 58,
      "endLineNumber" : 141,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 141,
        "startColumnNumber" : 14,
        "endLineNumber" : 141,
        "endColumnNumber" : 71
      },
      "nodeContext" : "withPotentialTimeout(statement,testMethod,testInstance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 71
      },
      "nodeContext" : "statement=withPotentialTimeout(statement,testMethod,testInstance)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 72
      },
      "nodeContext" : "statement=withPotentialTimeout(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 141,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 72
      },
      "nodeContext" : "statement=withPotentialTimeout(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "testInstance",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 142,
      "startColumnNumber" : 59,
      "endLineNumber" : 142,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 142,
        "startColumnNumber" : 14,
        "endLineNumber" : 142,
        "endColumnNumber" : 72
      },
      "nodeContext" : "withProfileValueCheck(statement,testMethod,testInstance)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 72
      },
      "nodeContext" : "statement=withProfileValueCheck(statement,testMethod,testInstance)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 73
      },
      "nodeContext" : "statement=withProfileValueCheck(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 128,
        "startColumnNumber" : 94,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 144,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Apply <em>instance-level</em> and <em>method-level</em> features of the <em>Spring TestContext Framework</em> to the supplied  {@code base}statement. <p>Specifically, this method invokes the {@link TestContextManager#prepareTestInstance prepareTestInstance()}, {@link TestContextManager#beforeTestMethod beforeTestMethod()}, and {@link TestContextManager#afterTestMethod afterTestMethod()} methodson the  {@code TestContextManager}, potentially with Spring timeouts and repetitions. <p>In addition, this method checks whether the test is enabled in the current execution environment. This prevents methods with a non-matching  {@code @IfProfileValue} annotation from running altogether,even skipping the execution of  {@code prepareTestInstance()} methodsin  {@code TestExecutionListeners}.\n * @param base the base {@code Statement} that this rule should be applied to\n * @param frameworkMethod the method which is about to be invoked on the test instance\n * @param testInstance the current test instance\n * @return a statement that wraps the supplied {@code base} with instance-leveland method-level features of the Spring TestContext Framework\n * @see #withBeforeTestMethodCallbacks\n * @see #withAfterTestMethodCallbacks\n * @see #withPotentialRepeat\n * @see #withPotentialTimeout\n * @see #withTestInstancePreparation\n * @see #withProfileValueCheck\n */\n@Override public Statement apply(Statement base,FrameworkMethod frameworkMethod,Object testInstance){\n  Method testMethod=frameworkMethod.getMethod();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Applying SpringMethodRule to test method [\" + testMethod + \"]\");\n  }\n  Class<?> testClass=testInstance.getClass();\n  TestContextManager testContextManager=SpringClassRule.getTestContextManager(testClass);\n  Statement statement=base;\n  statement=withBeforeTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withAfterTestMethodCallbacks(statement,testMethod,testInstance,testContextManager);\n  statement=withTestInstancePreparation(statement,testInstance,testContextManager);\n  statement=withPotentialRepeat(statement,testMethod,testInstance);\n  statement=withPotentialTimeout(statement,testMethod,testInstance);\n  statement=withProfileValueCheck(statement,testMethod,testInstance);\n  return statement;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 73
      },
      "nodeContext" : "statement=withProfileValueCheck(statement,testMethod,testInstance);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 133,
    "startColumnNumber" : 23,
    "endLineNumber" : 133,
    "endColumnNumber" : 35
  }, {
    "charLength" : 12,
    "startLineNumber" : 137,
    "startColumnNumber" : 67,
    "endLineNumber" : 137,
    "endColumnNumber" : 79
  }, {
    "charLength" : 12,
    "startLineNumber" : 138,
    "startColumnNumber" : 66,
    "endLineNumber" : 138,
    "endColumnNumber" : 78
  }, {
    "charLength" : 12,
    "startLineNumber" : 139,
    "startColumnNumber" : 53,
    "endLineNumber" : 139,
    "endColumnNumber" : 65
  }, {
    "charLength" : 12,
    "startLineNumber" : 140,
    "startColumnNumber" : 57,
    "endLineNumber" : 140,
    "endColumnNumber" : 69
  }, {
    "charLength" : 12,
    "startLineNumber" : 141,
    "startColumnNumber" : 58,
    "endLineNumber" : 141,
    "endColumnNumber" : 70
  }, {
    "charLength" : 12,
    "startLineNumber" : 142,
    "startColumnNumber" : 59,
    "endLineNumber" : 142,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}