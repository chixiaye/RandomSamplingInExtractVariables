{
  "id" : 199,
  "expression" : "RandomStringUtils",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/test/java/org/thingsboard/server/controller/BaseDashboardControllerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RandomStringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 247,
      "startColumnNumber" : 28,
      "endLineNumber" : 247,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 247,
        "startColumnNumber" : 28,
        "endLineNumber" : 247,
        "endColumnNumber" : 89
      },
      "nodeContext" : "RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 247,
        "startColumnNumber" : 19,
        "endLineNumber" : 247,
        "endColumnNumber" : 89
      },
      "nodeContext" : "suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 245,
        "startColumnNumber" : 32,
        "endLineNumber" : 252,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Dashboard dashboard=new Dashboard();\n  String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n  String title=title1 + suffix;\n  title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n  dashboard.setTitle(title);\n  dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 252,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 134; i++) {\n  Dashboard dashboard=new Dashboard();\n  String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n  String title=title1 + suffix;\n  title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n  dashboard.setTitle(title);\n  dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3620,
        "startLineNumber" : 242,
        "startColumnNumber" : 67,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String title1=\"Dashboard title 1\";\n  List<DashboardInfo> dashboardsTitle1=new ArrayList<>();\n  for (int i=0; i < 134; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title1 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  String title2=\"Dashboard title 2\";\n  List<DashboardInfo> dashboardsTitle2=new ArrayList<>();\n  for (int i=0; i < 112; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title2 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  List<DashboardInfo> loadedDashboardsTitle1=new ArrayList<>();\n  PageLink pageLink=new PageLink(15,0,title1);\n  PageData<DashboardInfo> pageData=null;\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle1.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle1,idComparator);\n  Collections.sort(loadedDashboardsTitle1,idComparator);\n  Assert.assertEquals(dashboardsTitle1,loadedDashboardsTitle1);\n  List<DashboardInfo> loadedDashboardsTitle2=new ArrayList<>();\n  pageLink=new PageLink(4,0,title2);\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle2.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle2,idComparator);\n  Collections.sort(loadedDashboardsTitle2,idComparator);\n  Assert.assertEquals(dashboardsTitle2,loadedDashboardsTitle2);\n  for (  DashboardInfo dashboard : loadedDashboardsTitle1) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title1);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n  for (  DashboardInfo dashboard : loadedDashboardsTitle2) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title2);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 498,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3693,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFindTenantDashboardsByTitle() throws Exception {\n  String title1=\"Dashboard title 1\";\n  List<DashboardInfo> dashboardsTitle1=new ArrayList<>();\n  for (int i=0; i < 134; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title1 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  String title2=\"Dashboard title 2\";\n  List<DashboardInfo> dashboardsTitle2=new ArrayList<>();\n  for (int i=0; i < 112; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title2 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  List<DashboardInfo> loadedDashboardsTitle1=new ArrayList<>();\n  PageLink pageLink=new PageLink(15,0,title1);\n  PageData<DashboardInfo> pageData=null;\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle1.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle1,idComparator);\n  Collections.sort(loadedDashboardsTitle1,idComparator);\n  Assert.assertEquals(dashboardsTitle1,loadedDashboardsTitle1);\n  List<DashboardInfo> loadedDashboardsTitle2=new ArrayList<>();\n  pageLink=new PageLink(4,0,title2);\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle2.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle2,idComparator);\n  Collections.sort(loadedDashboardsTitle2,idComparator);\n  Assert.assertEquals(dashboardsTitle2,loadedDashboardsTitle2);\n  for (  DashboardInfo dashboard : loadedDashboardsTitle1) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title1);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n  for (  DashboardInfo dashboard : loadedDashboardsTitle2) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title2);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 247,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "RandomStringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 257,
      "startColumnNumber" : 28,
      "endLineNumber" : 257,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 257,
        "startColumnNumber" : 28,
        "endLineNumber" : 257,
        "endColumnNumber" : 89
      },
      "nodeContext" : "RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 257,
        "startColumnNumber" : 19,
        "endLineNumber" : 257,
        "endColumnNumber" : 89
      },
      "nodeContext" : "suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 257,
        "startColumnNumber" : 12,
        "endLineNumber" : 257,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 255,
        "startColumnNumber" : 32,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Dashboard dashboard=new Dashboard();\n  String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n  String title=title2 + suffix;\n  title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n  dashboard.setTitle(title);\n  dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 255,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 112; i++) {\n  Dashboard dashboard=new Dashboard();\n  String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n  String title=title2 + suffix;\n  title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n  dashboard.setTitle(title);\n  dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3620,
        "startLineNumber" : 242,
        "startColumnNumber" : 67,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String title1=\"Dashboard title 1\";\n  List<DashboardInfo> dashboardsTitle1=new ArrayList<>();\n  for (int i=0; i < 134; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title1 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  String title2=\"Dashboard title 2\";\n  List<DashboardInfo> dashboardsTitle2=new ArrayList<>();\n  for (int i=0; i < 112; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title2 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  List<DashboardInfo> loadedDashboardsTitle1=new ArrayList<>();\n  PageLink pageLink=new PageLink(15,0,title1);\n  PageData<DashboardInfo> pageData=null;\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle1.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle1,idComparator);\n  Collections.sort(loadedDashboardsTitle1,idComparator);\n  Assert.assertEquals(dashboardsTitle1,loadedDashboardsTitle1);\n  List<DashboardInfo> loadedDashboardsTitle2=new ArrayList<>();\n  pageLink=new PageLink(4,0,title2);\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle2.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle2,idComparator);\n  Collections.sort(loadedDashboardsTitle2,idComparator);\n  Assert.assertEquals(dashboardsTitle2,loadedDashboardsTitle2);\n  for (  DashboardInfo dashboard : loadedDashboardsTitle1) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title1);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n  for (  DashboardInfo dashboard : loadedDashboardsTitle2) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title2);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 498,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3693,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 318,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFindTenantDashboardsByTitle() throws Exception {\n  String title1=\"Dashboard title 1\";\n  List<DashboardInfo> dashboardsTitle1=new ArrayList<>();\n  for (int i=0; i < 134; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title1 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle1.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  String title2=\"Dashboard title 2\";\n  List<DashboardInfo> dashboardsTitle2=new ArrayList<>();\n  for (int i=0; i < 112; i++) {\n    Dashboard dashboard=new Dashboard();\n    String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n    String title=title2 + suffix;\n    title=i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n    dashboard.setTitle(title);\n    dashboardsTitle2.add(new DashboardInfo(doPost(\"/api/dashboard\",dashboard,Dashboard.class)));\n  }\n  List<DashboardInfo> loadedDashboardsTitle1=new ArrayList<>();\n  PageLink pageLink=new PageLink(15,0,title1);\n  PageData<DashboardInfo> pageData=null;\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle1.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle1,idComparator);\n  Collections.sort(loadedDashboardsTitle1,idComparator);\n  Assert.assertEquals(dashboardsTitle1,loadedDashboardsTitle1);\n  List<DashboardInfo> loadedDashboardsTitle2=new ArrayList<>();\n  pageLink=new PageLink(4,0,title2);\n  do {\n    pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n    }\n,pageLink);\n    loadedDashboardsTitle2.addAll(pageData.getData());\n    if (pageData.hasNext()) {\n      pageLink=pageLink.nextPageLink();\n    }\n  }\n while (pageData.hasNext());\n  Collections.sort(dashboardsTitle2,idComparator);\n  Collections.sort(loadedDashboardsTitle2,idComparator);\n  Assert.assertEquals(dashboardsTitle2,loadedDashboardsTitle2);\n  for (  DashboardInfo dashboard : loadedDashboardsTitle1) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title1);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n  for (  DashboardInfo dashboard : loadedDashboardsTitle2) {\n    doDelete(\"/api/dashboard/\" + dashboard.getId().getId().toString()).andExpect(status().isOk());\n  }\n  pageLink=new PageLink(4,0,title2);\n  pageData=doGetTypedWithPageLink(\"/api/tenant/dashboards?\",new TypeReference<PageData<DashboardInfo>>(){\n  }\n,pageLink);\n  Assert.assertFalse(pageData.hasNext());\n  Assert.assertEquals(0,pageData.getData().size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 257,
        "startColumnNumber" : 12,
        "endLineNumber" : 257,
        "endColumnNumber" : 90
      },
      "nodeContext" : "String suffix=RandomStringUtils.randomAlphanumeric((int)(Math.random() * 15));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 247,
    "startColumnNumber" : 28,
    "endLineNumber" : 247,
    "endColumnNumber" : 45
  }, {
    "charLength" : 17,
    "startLineNumber" : 257,
    "startColumnNumber" : 28,
    "endLineNumber" : 257,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}