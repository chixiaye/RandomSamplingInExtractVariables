{
  "id" : 144,
  "expression" : "SMALLINT.equals(type)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SMALLINT.equals(type)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 143,
      "startColumnNumber" : 23,
      "endLineNumber" : 143,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 141,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 50
      },
      "nodeContext" : "BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n  TypeUtils.writeNativeValue(type,builder,obj);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 140,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n    TypeUtils.writeNativeValue(type,builder,obj);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 862,
        "startLineNumber" : 131,
        "startColumnNumber" : 13,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof MapType) {\n  MapType mapType=(MapType)type;\n  BlockBuilder mapBlockBuilder=builder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)obj).entrySet()) {\n    writeObject(mapBlockBuilder,mapType.getKeyType(),entry.getKey());\n    writeObject(mapBlockBuilder,mapType.getValueType(),entry.getValue());\n  }\n  builder.closeEntry();\n}\n else {\n  if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n    TypeUtils.writeNativeValue(type,builder,obj);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (type instanceof ArrayType) {\n  Type elementType=((ArrayType)type).getElementType();\n  BlockBuilder arrayBuilder=builder.beginBlockEntry();\n  for (  Object item : (List<?>)obj) {\n    writeObject(arrayBuilder,elementType,item);\n  }\n  builder.closeEntry();\n}\n else if (type instanceof MapType) {\n  MapType mapType=(MapType)type;\n  BlockBuilder mapBlockBuilder=builder.beginBlockEntry();\n  for (  Map.Entry<?,?> entry : ((Map<?,?>)obj).entrySet()) {\n    writeObject(mapBlockBuilder,mapType.getKeyType(),entry.getKey());\n    writeObject(mapBlockBuilder,mapType.getValueType(),entry.getValue());\n  }\n  builder.closeEntry();\n}\n else {\n  if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n    TypeUtils.writeNativeValue(type,builder,obj);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type instanceof ArrayType) {\n    Type elementType=((ArrayType)type).getElementType();\n    BlockBuilder arrayBuilder=builder.beginBlockEntry();\n    for (    Object item : (List<?>)obj) {\n      writeObject(arrayBuilder,elementType,item);\n    }\n    builder.closeEntry();\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    BlockBuilder mapBlockBuilder=builder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)obj).entrySet()) {\n      writeObject(mapBlockBuilder,mapType.getKeyType(),entry.getKey());\n      writeObject(mapBlockBuilder,mapType.getValueType(),entry.getValue());\n    }\n    builder.closeEntry();\n  }\n else {\n    if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n      TypeUtils.writeNativeValue(type,builder,obj);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void writeObject(BlockBuilder builder,Type type,Object obj){\n  if (type instanceof ArrayType) {\n    Type elementType=((ArrayType)type).getElementType();\n    BlockBuilder arrayBuilder=builder.beginBlockEntry();\n    for (    Object item : (List<?>)obj) {\n      writeObject(arrayBuilder,elementType,item);\n    }\n    builder.closeEntry();\n  }\n else   if (type instanceof MapType) {\n    MapType mapType=(MapType)type;\n    BlockBuilder mapBlockBuilder=builder.beginBlockEntry();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)obj).entrySet()) {\n      writeObject(mapBlockBuilder,mapType.getKeyType(),entry.getKey());\n      writeObject(mapBlockBuilder,mapType.getValueType(),entry.getValue());\n    }\n    builder.closeEntry();\n  }\n else {\n    if (BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType) {\n      TypeUtils.writeNativeValue(type,builder,obj);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 141,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 50
      },
      "nodeContext" : "BOOLEAN.equals(type) || TINYINT.equals(type) || SMALLINT.equals(type)|| INTEGER.equals(type)|| BIGINT.equals(type)|| DOUBLE.equals(type)|| type instanceof VarcharType",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 143,
    "startColumnNumber" : 23,
    "endLineNumber" : 143,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}