{
  "id" : 376,
  "expression" : "average[i]",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestPerformance.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "average[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 584,
      "startColumnNumber" : 82,
      "endLineNumber" : 584,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 584,
        "startColumnNumber" : 31,
        "endLineNumber" : 584,
        "endColumnNumber" : 92
      },
      "nodeContext" : "TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i]",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 584,
        "startColumnNumber" : 16,
        "endLineNumber" : 584,
        "endColumnNumber" : 92
      },
      "nodeContext" : "averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 584,
        "startColumnNumber" : 3,
        "endLineNumber" : 584,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 570,
        "startColumnNumber" : 42,
        "endLineNumber" : 598,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  double[] points=new double[PASSES];\n  for (int j=0; j < PASSES; j++) {\n    long totalTransitions=totalTransitionsPerFile[j][i];\n    if (totalTransitions > 0) {\n      points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n    }\n else {\n      points[j]=0;\n    }\n  }\n  Arrays.sort(points);\n  final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n  double value=0;\n  for (int j=0; j < PASSES; j++) {\n    double diff=points[j] - averageValue;\n    value+=diff * diff;\n  }\n  int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n  int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n  low95[i]=points[ignoreCount95];\n  high95[i]=points[points.length - 1 - ignoreCount95];\n  low67[i]=points[ignoreCount67];\n  high67[i]=points[points.length - 1 - ignoreCount67];\n  stddev[i]=Math.sqrt(value / PASSES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 570,
        "startColumnNumber" : 2,
        "endLineNumber" : 598,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < stddev.length; i++) {\n  double[] points=new double[PASSES];\n  for (int j=0; j < PASSES; j++) {\n    long totalTransitions=totalTransitionsPerFile[j][i];\n    if (totalTransitions > 0) {\n      points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n    }\n else {\n      points[j]=0;\n    }\n  }\n  Arrays.sort(points);\n  final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n  double value=0;\n  for (int j=0; j < PASSES; j++) {\n    double diff=points[j] - averageValue;\n    value+=diff * diff;\n  }\n  int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n  int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n  low95[i]=points[ignoreCount95];\n  high95[i]=points[points.length - 1 - ignoreCount95];\n  low67[i]=points[ignoreCount67];\n  high67[i]=points[points.length - 1 - ignoreCount67];\n  stddev[i]=Math.sqrt(value / PASSES);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 216,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3066,
        "startLineNumber" : 522,
        "startColumnNumber" : 44,
        "endLineNumber" : 605,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (TRANSITION_RUNNING_AVERAGE) {\n    for (int i=0; i < PASSES; i++) {\n      long[] data=computedTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n      data=totalTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n    }\n  }\n  long[] sumNum=new long[totalTransitionsPerFile[0].length];\n  long[] sumDen=new long[totalTransitionsPerFile[0].length];\n  double[] sumNormalized=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < PASSES; i++) {\n    long[] num=computedTransitionsPerFile[i];\n    long[] den=totalTransitionsPerFile[i];\n    for (int j=0; j < den.length; j++) {\n      sumNum[j]+=num[j];\n      sumDen[j]+=den[j];\n      if (den[j] > 0) {\n        sumNormalized[j]+=(double)num[j] / (double)den[j];\n      }\n    }\n  }\n  double[] weightedAverage=new double[totalTransitionsPerFile[0].length];\n  double[] average=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < average.length; i++) {\n    if (sumDen[i] > 0) {\n      weightedAverage[i]=(double)sumNum[i] / (double)sumDen[i];\n    }\n else {\n      weightedAverage[i]=0;\n    }\n    average[i]=sumNormalized[i] / PASSES;\n  }\n  double[] low95=new double[totalTransitionsPerFile[0].length];\n  double[] high95=new double[totalTransitionsPerFile[0].length];\n  double[] low67=new double[totalTransitionsPerFile[0].length];\n  double[] high67=new double[totalTransitionsPerFile[0].length];\n  double[] stddev=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < stddev.length; i++) {\n    double[] points=new double[PASSES];\n    for (int j=0; j < PASSES; j++) {\n      long totalTransitions=totalTransitionsPerFile[j][i];\n      if (totalTransitions > 0) {\n        points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n      }\n else {\n        points[j]=0;\n      }\n    }\n    Arrays.sort(points);\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    double value=0;\n    for (int j=0; j < PASSES; j++) {\n      double diff=points[j] - averageValue;\n      value+=diff * diff;\n    }\n    int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n    int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n    low95[i]=points[ignoreCount95];\n    high95[i]=points[points.length - 1 - ignoreCount95];\n    low67[i]=points[ignoreCount67];\n    high67[i]=points[points.length - 1 - ignoreCount67];\n    stddev[i]=Math.sqrt(value / PASSES);\n  }\n  System.out.format(\"File\\tAverage\\tStd. Dev.\\t95%% Low\\t95%% High\\t66.7%% Low\\t66.7%% High%n\");\n  for (int i=0; i < stddev.length; i++) {\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 654,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3175,
        "startLineNumber" : 519,
        "startColumnNumber" : 1,
        "endLineNumber" : 605,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Compute and print ATN/DFA transition statistics.\n */\nprivate void computeTransitionStatistics(){\n  if (TRANSITION_RUNNING_AVERAGE) {\n    for (int i=0; i < PASSES; i++) {\n      long[] data=computedTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n      data=totalTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n    }\n  }\n  long[] sumNum=new long[totalTransitionsPerFile[0].length];\n  long[] sumDen=new long[totalTransitionsPerFile[0].length];\n  double[] sumNormalized=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < PASSES; i++) {\n    long[] num=computedTransitionsPerFile[i];\n    long[] den=totalTransitionsPerFile[i];\n    for (int j=0; j < den.length; j++) {\n      sumNum[j]+=num[j];\n      sumDen[j]+=den[j];\n      if (den[j] > 0) {\n        sumNormalized[j]+=(double)num[j] / (double)den[j];\n      }\n    }\n  }\n  double[] weightedAverage=new double[totalTransitionsPerFile[0].length];\n  double[] average=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < average.length; i++) {\n    if (sumDen[i] > 0) {\n      weightedAverage[i]=(double)sumNum[i] / (double)sumDen[i];\n    }\n else {\n      weightedAverage[i]=0;\n    }\n    average[i]=sumNormalized[i] / PASSES;\n  }\n  double[] low95=new double[totalTransitionsPerFile[0].length];\n  double[] high95=new double[totalTransitionsPerFile[0].length];\n  double[] low67=new double[totalTransitionsPerFile[0].length];\n  double[] high67=new double[totalTransitionsPerFile[0].length];\n  double[] stddev=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < stddev.length; i++) {\n    double[] points=new double[PASSES];\n    for (int j=0; j < PASSES; j++) {\n      long totalTransitions=totalTransitionsPerFile[j][i];\n      if (totalTransitions > 0) {\n        points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n      }\n else {\n        points[j]=0;\n      }\n    }\n    Arrays.sort(points);\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    double value=0;\n    for (int j=0; j < PASSES; j++) {\n      double diff=points[j] - averageValue;\n      value+=diff * diff;\n    }\n    int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n    int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n    low95[i]=points[ignoreCount95];\n    high95[i]=points[points.length - 1 - ignoreCount95];\n    low67[i]=points[ignoreCount67];\n    high67[i]=points[points.length - 1 - ignoreCount67];\n    stddev[i]=Math.sqrt(value / PASSES);\n  }\n  System.out.format(\"File\\tAverage\\tStd. Dev.\\t95%% Low\\t95%% High\\t66.7%% Low\\t66.7%% High%n\");\n  for (int i=0; i < stddev.length; i++) {\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 659,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 584,
        "startColumnNumber" : 3,
        "endLineNumber" : 584,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "double"
  }, {
    "nodeContext" : "average[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 602,
      "startColumnNumber" : 82,
      "endLineNumber" : 602,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 602,
        "startColumnNumber" : 31,
        "endLineNumber" : 602,
        "endColumnNumber" : 92
      },
      "nodeContext" : "TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i]",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 602,
        "startColumnNumber" : 16,
        "endLineNumber" : 602,
        "endColumnNumber" : 92
      },
      "nodeContext" : "averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 602,
        "startColumnNumber" : 3,
        "endLineNumber" : 602,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 601,
        "startColumnNumber" : 42,
        "endLineNumber" : 604,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n  System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 601,
        "startColumnNumber" : 2,
        "endLineNumber" : 604,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < stddev.length; i++) {\n  final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n  System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3066,
        "startLineNumber" : 522,
        "startColumnNumber" : 44,
        "endLineNumber" : 605,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (TRANSITION_RUNNING_AVERAGE) {\n    for (int i=0; i < PASSES; i++) {\n      long[] data=computedTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n      data=totalTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n    }\n  }\n  long[] sumNum=new long[totalTransitionsPerFile[0].length];\n  long[] sumDen=new long[totalTransitionsPerFile[0].length];\n  double[] sumNormalized=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < PASSES; i++) {\n    long[] num=computedTransitionsPerFile[i];\n    long[] den=totalTransitionsPerFile[i];\n    for (int j=0; j < den.length; j++) {\n      sumNum[j]+=num[j];\n      sumDen[j]+=den[j];\n      if (den[j] > 0) {\n        sumNormalized[j]+=(double)num[j] / (double)den[j];\n      }\n    }\n  }\n  double[] weightedAverage=new double[totalTransitionsPerFile[0].length];\n  double[] average=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < average.length; i++) {\n    if (sumDen[i] > 0) {\n      weightedAverage[i]=(double)sumNum[i] / (double)sumDen[i];\n    }\n else {\n      weightedAverage[i]=0;\n    }\n    average[i]=sumNormalized[i] / PASSES;\n  }\n  double[] low95=new double[totalTransitionsPerFile[0].length];\n  double[] high95=new double[totalTransitionsPerFile[0].length];\n  double[] low67=new double[totalTransitionsPerFile[0].length];\n  double[] high67=new double[totalTransitionsPerFile[0].length];\n  double[] stddev=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < stddev.length; i++) {\n    double[] points=new double[PASSES];\n    for (int j=0; j < PASSES; j++) {\n      long totalTransitions=totalTransitionsPerFile[j][i];\n      if (totalTransitions > 0) {\n        points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n      }\n else {\n        points[j]=0;\n      }\n    }\n    Arrays.sort(points);\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    double value=0;\n    for (int j=0; j < PASSES; j++) {\n      double diff=points[j] - averageValue;\n      value+=diff * diff;\n    }\n    int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n    int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n    low95[i]=points[ignoreCount95];\n    high95[i]=points[points.length - 1 - ignoreCount95];\n    low67[i]=points[ignoreCount67];\n    high67[i]=points[points.length - 1 - ignoreCount67];\n    stddev[i]=Math.sqrt(value / PASSES);\n  }\n  System.out.format(\"File\\tAverage\\tStd. Dev.\\t95%% Low\\t95%% High\\t66.7%% Low\\t66.7%% High%n\");\n  for (int i=0; i < stddev.length; i++) {\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 654,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3175,
        "startLineNumber" : 519,
        "startColumnNumber" : 1,
        "endLineNumber" : 605,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Compute and print ATN/DFA transition statistics.\n */\nprivate void computeTransitionStatistics(){\n  if (TRANSITION_RUNNING_AVERAGE) {\n    for (int i=0; i < PASSES; i++) {\n      long[] data=computedTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n      data=totalTransitionsPerFile[i];\n      for (int j=0; j < data.length - 1; j++) {\n        data[j + 1]+=data[j];\n      }\n    }\n  }\n  long[] sumNum=new long[totalTransitionsPerFile[0].length];\n  long[] sumDen=new long[totalTransitionsPerFile[0].length];\n  double[] sumNormalized=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < PASSES; i++) {\n    long[] num=computedTransitionsPerFile[i];\n    long[] den=totalTransitionsPerFile[i];\n    for (int j=0; j < den.length; j++) {\n      sumNum[j]+=num[j];\n      sumDen[j]+=den[j];\n      if (den[j] > 0) {\n        sumNormalized[j]+=(double)num[j] / (double)den[j];\n      }\n    }\n  }\n  double[] weightedAverage=new double[totalTransitionsPerFile[0].length];\n  double[] average=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < average.length; i++) {\n    if (sumDen[i] > 0) {\n      weightedAverage[i]=(double)sumNum[i] / (double)sumDen[i];\n    }\n else {\n      weightedAverage[i]=0;\n    }\n    average[i]=sumNormalized[i] / PASSES;\n  }\n  double[] low95=new double[totalTransitionsPerFile[0].length];\n  double[] high95=new double[totalTransitionsPerFile[0].length];\n  double[] low67=new double[totalTransitionsPerFile[0].length];\n  double[] high67=new double[totalTransitionsPerFile[0].length];\n  double[] stddev=new double[totalTransitionsPerFile[0].length];\n  for (int i=0; i < stddev.length; i++) {\n    double[] points=new double[PASSES];\n    for (int j=0; j < PASSES; j++) {\n      long totalTransitions=totalTransitionsPerFile[j][i];\n      if (totalTransitions > 0) {\n        points[j]=((double)computedTransitionsPerFile[j][i] / (double)totalTransitionsPerFile[j][i]);\n      }\n else {\n        points[j]=0;\n      }\n    }\n    Arrays.sort(points);\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    double value=0;\n    for (int j=0; j < PASSES; j++) {\n      double diff=points[j] - averageValue;\n      value+=diff * diff;\n    }\n    int ignoreCount95=(int)Math.round(PASSES * (1 - 0.95) / 2.0);\n    int ignoreCount67=(int)Math.round(PASSES * (1 - 0.667) / 2.0);\n    low95[i]=points[ignoreCount95];\n    high95[i]=points[points.length - 1 - ignoreCount95];\n    low67[i]=points[ignoreCount67];\n    high67[i]=points[points.length - 1 - ignoreCount67];\n    stddev[i]=Math.sqrt(value / PASSES);\n  }\n  System.out.format(\"File\\tAverage\\tStd. Dev.\\t95%% Low\\t95%% High\\t66.7%% Low\\t66.7%% High%n\");\n  for (int i=0; i < stddev.length; i++) {\n    final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n    System.out.format(\"%d\\t%e\\t%e\\t%e\\t%e\\t%e\\t%e%n\",i + 1,averageValue,stddev[i],averageValue - low95[i],high95[i] - averageValue,averageValue - low67[i],high67[i] - averageValue);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 659,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 602,
        "startColumnNumber" : 3,
        "endLineNumber" : 602,
        "endColumnNumber" : 93
      },
      "nodeContext" : "final double averageValue=TRANSITION_WEIGHTED_AVERAGE ? weightedAverage[i] : average[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 584,
    "startColumnNumber" : 82,
    "endLineNumber" : 584,
    "endColumnNumber" : 92
  }, {
    "charLength" : 10,
    "startLineNumber" : 602,
    "startColumnNumber" : 82,
    "endLineNumber" : 602,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}