{
  "id" : 65,
  "expression" : "g",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestTopologicalSort.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 27,
      "startColumnNumber" : 8,
      "endLineNumber" : 27,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"C\",\"F\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 28,
      "startColumnNumber" : 8,
      "endLineNumber" : 28,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"C\",\"G\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"G\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"G\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 29,
      "startColumnNumber" : 8,
      "endLineNumber" : 29,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"C\",\"A\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"A\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"A\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 30,
      "startColumnNumber" : 8,
      "endLineNumber" : 30,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"C\",\"B\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"B\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"C\",\"B\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 31,
      "startColumnNumber" : 8,
      "endLineNumber" : 31,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"A\",\"D\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"A\",\"D\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"A\",\"D\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 32,
      "startColumnNumber" : 8,
      "endLineNumber" : 32,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"A\",\"E\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"A\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"A\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 33,
      "startColumnNumber" : 8,
      "endLineNumber" : 33,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"B\",\"E\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"B\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"B\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 34,
      "startColumnNumber" : 8,
      "endLineNumber" : 34,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"D\",\"E\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"D\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"D\",\"E\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 35,
      "startColumnNumber" : 8,
      "endLineNumber" : 35,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"D\",\"F\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"D\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"D\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 36,
      "startColumnNumber" : 8,
      "endLineNumber" : 36,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"F\",\"H\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"F\",\"H\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 36,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"F\",\"H\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 8,
      "endLineNumber" : 37,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g.addEdge(\"E\",\"F\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"E\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 28
      },
      "nodeContext" : "g.addEdge(\"E\",\"F\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  }, {
    "nodeContext" : "g",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 40,
      "startColumnNumber" : 29,
      "endLineNumber" : 40,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 40,
        "startColumnNumber" : 29,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "g.sort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 40,
        "startColumnNumber" : 21,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "nodes=g.sort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "List<String> nodes=g.sort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 25,
        "startColumnNumber" : 56,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 632,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFairlyLargeGraph() throws Exception {\n  Graph<String> g=new Graph<String>();\n  g.addEdge(\"C\",\"F\");\n  g.addEdge(\"C\",\"G\");\n  g.addEdge(\"C\",\"A\");\n  g.addEdge(\"C\",\"B\");\n  g.addEdge(\"A\",\"D\");\n  g.addEdge(\"A\",\"E\");\n  g.addEdge(\"B\",\"E\");\n  g.addEdge(\"D\",\"E\");\n  g.addEdge(\"D\",\"F\");\n  g.addEdge(\"F\",\"H\");\n  g.addEdge(\"E\",\"F\");\n  String expecting=\"[H, F, G, E, D, A, B, C]\";\n  List<String> nodes=g.sort();\n  String result=nodes.toString();\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 38
      },
      "nodeContext" : "List<String> nodes=g.sort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.misc.Graph<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 27,
    "startColumnNumber" : 8,
    "endLineNumber" : 27,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 28,
    "startColumnNumber" : 8,
    "endLineNumber" : 28,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 29,
    "startColumnNumber" : 8,
    "endLineNumber" : 29,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 30,
    "startColumnNumber" : 8,
    "endLineNumber" : 30,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 31,
    "startColumnNumber" : 8,
    "endLineNumber" : 31,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 32,
    "startColumnNumber" : 8,
    "endLineNumber" : 32,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 33,
    "startColumnNumber" : 8,
    "endLineNumber" : 33,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 34,
    "startColumnNumber" : 8,
    "endLineNumber" : 34,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 35,
    "startColumnNumber" : 8,
    "endLineNumber" : 35,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 36,
    "startColumnNumber" : 8,
    "endLineNumber" : 36,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 8,
    "endLineNumber" : 37,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 40,
    "startColumnNumber" : 29,
    "endLineNumber" : 40,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  } ]
}