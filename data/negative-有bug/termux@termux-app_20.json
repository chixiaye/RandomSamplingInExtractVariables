{
  "id" : 20,
  "expression" : "BackgroundJob",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/app/TermuxService.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BackgroundJob",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 244,
      "startColumnNumber" : 23,
      "endLineNumber" : 244,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 244,
        "startColumnNumber" : 23,
        "endLineNumber" : 244,
        "endColumnNumber" : 68
      },
      "nodeContext" : "BackgroundJob.buildEnvironment(failSafe,cwd)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 244,
        "startColumnNumber" : 17,
        "endLineNumber" : 244,
        "endColumnNumber" : 68
      },
      "nodeContext" : "env=BackgroundJob.buildEnvironment(failSafe,cwd)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 244,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2419,
        "startLineNumber" : 239,
        "startColumnNumber" : 111,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  new File(HOME_PATH).mkdirs();\n  if (cwd == null)   cwd=HOME_PATH;\n  String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n  boolean isLoginShell=false;\n  if (executablePath == null) {\n    File shell=new File(HOME_PATH,\".termux/shell\");\n    if (shell.exists()) {\n      try {\n        File canonicalFile=shell.getCanonicalFile();\n        if (canonicalFile.isFile() && canonicalFile.canExecute()) {\n          executablePath=canonicalFile.getName().equals(\"busybox\") ? (PREFIX_PATH + \"/bin/ash\") : canonicalFile.getAbsolutePath();\n        }\n else {\n          Log.w(EmulatorDebug.LOG_TAG,\"$HOME/.termux/shell points to non-executable shell: \" + canonicalFile.getAbsolutePath());\n        }\n      }\n catch (      IOException e) {\n        Log.e(EmulatorDebug.LOG_TAG,\"Error checking $HOME/.termux/shell\",e);\n      }\n    }\n    if (executablePath == null) {\n      for (      String shellBinary : new String[]{\"bash\",\"zsh\",\"ash\"}) {\n        File shellFile=new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n        if (shellFile.canExecute()) {\n          executablePath=shellFile.getAbsolutePath();\n          break;\n        }\n      }\n    }\n    if (executablePath == null) {\n      executablePath=\"/system/bin/sh\";\n    }\n    isLoginShell=true;\n  }\n  String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n  executablePath=processArgs[0];\n  int lastSlashIndex=executablePath.lastIndexOf('/');\n  String processName=(isLoginShell ? \"-\" : \"\") + (lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1));\n  String[] args=new String[processArgs.length];\n  args[0]=processName;\n  if (processArgs.length > 1)   System.arraycopy(processArgs,1,args,1,processArgs.length - 1);\n  TerminalSession session=new TerminalSession(executablePath,cwd,args,env,this);\n  mTerminalSessions.add(session);\n  updateNotification();\n  return session;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "TerminalSession createTermSession(String executablePath,String[] arguments,String cwd,boolean failSafe){\n  new File(HOME_PATH).mkdirs();\n  if (cwd == null)   cwd=HOME_PATH;\n  String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n  boolean isLoginShell=false;\n  if (executablePath == null) {\n    File shell=new File(HOME_PATH,\".termux/shell\");\n    if (shell.exists()) {\n      try {\n        File canonicalFile=shell.getCanonicalFile();\n        if (canonicalFile.isFile() && canonicalFile.canExecute()) {\n          executablePath=canonicalFile.getName().equals(\"busybox\") ? (PREFIX_PATH + \"/bin/ash\") : canonicalFile.getAbsolutePath();\n        }\n else {\n          Log.w(EmulatorDebug.LOG_TAG,\"$HOME/.termux/shell points to non-executable shell: \" + canonicalFile.getAbsolutePath());\n        }\n      }\n catch (      IOException e) {\n        Log.e(EmulatorDebug.LOG_TAG,\"Error checking $HOME/.termux/shell\",e);\n      }\n    }\n    if (executablePath == null) {\n      for (      String shellBinary : new String[]{\"bash\",\"zsh\",\"ash\"}) {\n        File shellFile=new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n        if (shellFile.canExecute()) {\n          executablePath=shellFile.getAbsolutePath();\n          break;\n        }\n      }\n    }\n    if (executablePath == null) {\n      executablePath=\"/system/bin/sh\";\n    }\n    isLoginShell=true;\n  }\n  String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n  executablePath=processArgs[0];\n  int lastSlashIndex=executablePath.lastIndexOf('/');\n  String processName=(isLoginShell ? \"-\" : \"\") + (lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1));\n  String[] args=new String[processArgs.length];\n  args[0]=processName;\n  if (processArgs.length > 1)   System.arraycopy(processArgs,1,args,1,processArgs.length - 1);\n  TerminalSession session=new TerminalSession(executablePath,cwd,args,env,this);\n  mTerminalSessions.add(session);\n  updateNotification();\n  return session;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 244,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.termux.app.BackgroundJob"
  }, {
    "nodeContext" : "BackgroundJob",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 280,
      "startColumnNumber" : 31,
      "endLineNumber" : 280,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 280,
        "startColumnNumber" : 31,
        "endLineNumber" : 280,
        "endColumnNumber" : 88
      },
      "nodeContext" : "BackgroundJob.setupProcessArgs(executablePath,arguments)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 280,
        "startColumnNumber" : 17,
        "endLineNumber" : 280,
        "endColumnNumber" : 88
      },
      "nodeContext" : "processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 89
      },
      "nodeContext" : "String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2419,
        "startLineNumber" : 239,
        "startColumnNumber" : 111,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  new File(HOME_PATH).mkdirs();\n  if (cwd == null)   cwd=HOME_PATH;\n  String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n  boolean isLoginShell=false;\n  if (executablePath == null) {\n    File shell=new File(HOME_PATH,\".termux/shell\");\n    if (shell.exists()) {\n      try {\n        File canonicalFile=shell.getCanonicalFile();\n        if (canonicalFile.isFile() && canonicalFile.canExecute()) {\n          executablePath=canonicalFile.getName().equals(\"busybox\") ? (PREFIX_PATH + \"/bin/ash\") : canonicalFile.getAbsolutePath();\n        }\n else {\n          Log.w(EmulatorDebug.LOG_TAG,\"$HOME/.termux/shell points to non-executable shell: \" + canonicalFile.getAbsolutePath());\n        }\n      }\n catch (      IOException e) {\n        Log.e(EmulatorDebug.LOG_TAG,\"Error checking $HOME/.termux/shell\",e);\n      }\n    }\n    if (executablePath == null) {\n      for (      String shellBinary : new String[]{\"bash\",\"zsh\",\"ash\"}) {\n        File shellFile=new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n        if (shellFile.canExecute()) {\n          executablePath=shellFile.getAbsolutePath();\n          break;\n        }\n      }\n    }\n    if (executablePath == null) {\n      executablePath=\"/system/bin/sh\";\n    }\n    isLoginShell=true;\n  }\n  String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n  executablePath=processArgs[0];\n  int lastSlashIndex=executablePath.lastIndexOf('/');\n  String processName=(isLoginShell ? \"-\" : \"\") + (lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1));\n  String[] args=new String[processArgs.length];\n  args[0]=processName;\n  if (processArgs.length > 1)   System.arraycopy(processArgs,1,args,1,processArgs.length - 1);\n  TerminalSession session=new TerminalSession(executablePath,cwd,args,env,this);\n  mTerminalSessions.add(session);\n  updateNotification();\n  return session;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 239,
        "startColumnNumber" : 4,
        "endLineNumber" : 294,
        "endColumnNumber" : 5
      },
      "nodeContext" : "TerminalSession createTermSession(String executablePath,String[] arguments,String cwd,boolean failSafe){\n  new File(HOME_PATH).mkdirs();\n  if (cwd == null)   cwd=HOME_PATH;\n  String[] env=BackgroundJob.buildEnvironment(failSafe,cwd);\n  boolean isLoginShell=false;\n  if (executablePath == null) {\n    File shell=new File(HOME_PATH,\".termux/shell\");\n    if (shell.exists()) {\n      try {\n        File canonicalFile=shell.getCanonicalFile();\n        if (canonicalFile.isFile() && canonicalFile.canExecute()) {\n          executablePath=canonicalFile.getName().equals(\"busybox\") ? (PREFIX_PATH + \"/bin/ash\") : canonicalFile.getAbsolutePath();\n        }\n else {\n          Log.w(EmulatorDebug.LOG_TAG,\"$HOME/.termux/shell points to non-executable shell: \" + canonicalFile.getAbsolutePath());\n        }\n      }\n catch (      IOException e) {\n        Log.e(EmulatorDebug.LOG_TAG,\"Error checking $HOME/.termux/shell\",e);\n      }\n    }\n    if (executablePath == null) {\n      for (      String shellBinary : new String[]{\"bash\",\"zsh\",\"ash\"}) {\n        File shellFile=new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n        if (shellFile.canExecute()) {\n          executablePath=shellFile.getAbsolutePath();\n          break;\n        }\n      }\n    }\n    if (executablePath == null) {\n      executablePath=\"/system/bin/sh\";\n    }\n    isLoginShell=true;\n  }\n  String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n  executablePath=processArgs[0];\n  int lastSlashIndex=executablePath.lastIndexOf('/');\n  String processName=(isLoginShell ? \"-\" : \"\") + (lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1));\n  String[] args=new String[processArgs.length];\n  args[0]=processName;\n  if (processArgs.length > 1)   System.arraycopy(processArgs,1,args,1,processArgs.length - 1);\n  TerminalSession session=new TerminalSession(executablePath,cwd,args,env,this);\n  mTerminalSessions.add(session);\n  updateNotification();\n  return session;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 89
      },
      "nodeContext" : "String[] processArgs=BackgroundJob.setupProcessArgs(executablePath,arguments);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.termux.app.BackgroundJob"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 244,
    "startColumnNumber" : 23,
    "endLineNumber" : 244,
    "endColumnNumber" : 36
  }, {
    "charLength" : 13,
    "startLineNumber" : 280,
    "startColumnNumber" : 31,
    "endLineNumber" : 280,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}