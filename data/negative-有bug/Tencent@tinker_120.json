{
  "id" : 120,
  "expression" : "insnHolder1.c",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/aosp-dexutils/src/main/java/com/tencent/tinker/android/dx/instruction/InstructionComparator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "insnHolder1.c",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 388,
      "startColumnNumber" : 20,
      "endLineNumber" : 388,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 388,
        "startColumnNumber" : 20,
        "endLineNumber" : 388,
        "endColumnNumber" : 50
      },
      "nodeContext" : "insnHolder1.c != insnHolder2.c",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 388,
        "startColumnNumber" : 16,
        "endLineNumber" : 390,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (insnHolder1.c != insnHolder2.c) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 822,
        "startLineNumber" : 375,
        "startColumnNumber" : 21,
        "endLineNumber" : 398,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (insnHolder1.literal != insnHolder2.literal) {\n    return false;\n  }\n  if (insnHolder1.registerCount != insnHolder2.registerCount) {\n    return false;\n  }\n  if (insnHolder1.a != insnHolder2.a) {\n    return false;\n  }\n  if (insnHolder1.b != insnHolder2.b) {\n    return false;\n  }\n  if (insnHolder1.c != insnHolder2.c) {\n    return false;\n  }\n  if (insnHolder1.d != insnHolder2.d) {\n    return false;\n  }\n  if (insnHolder1.e != insnHolder2.e) {\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5970,
        "startLineNumber" : 279,
        "startColumnNumber" : 8,
        "endLineNumber" : 399,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (insnFormat) {\ncase InstructionCodec.INSN_FORMAT_10T:case InstructionCodec.INSN_FORMAT_20T:case InstructionCodec.INSN_FORMAT_21T:case InstructionCodec.INSN_FORMAT_22T:case InstructionCodec.INSN_FORMAT_30T:case InstructionCodec.INSN_FORMAT_31T:{\n    final String addrPairStr=insnHolder1.address + \"-\" + insnHolder2.address;\n    if (this.visitedInsnAddrPairs.add(addrPairStr)) {\n      return isSameInstruction(insnHolder1.target,insnHolder2.target);\n    }\n else {\n      return true;\n    }\n  }\ncase InstructionCodec.INSN_FORMAT_21C:case InstructionCodec.INSN_FORMAT_22C:case InstructionCodec.INSN_FORMAT_31C:case InstructionCodec.INSN_FORMAT_35C:case InstructionCodec.INSN_FORMAT_3RC:{\n  return compareIndex(opcode,insnHolder1.index,insnHolder2.index);\n}\ncase InstructionCodec.INSN_FORMAT_PACKED_SWITCH_PAYLOAD:{\nPackedSwitchPayloadInsntructionHolder specInsnHolder1=(PackedSwitchPayloadInsntructionHolder)insnHolder1;\nPackedSwitchPayloadInsntructionHolder specInsnHolder2=(PackedSwitchPayloadInsntructionHolder)insnHolder2;\nif (specInsnHolder1.firstKey != specInsnHolder2.firstKey) {\n  return false;\n}\nif (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\n  return false;\n}\nint targetCount=specInsnHolder1.targets.length;\nfor (int i=0; i < targetCount; ++i) {\n  if (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n    return false;\n  }\n}\nreturn true;\n}\ncase InstructionCodec.INSN_FORMAT_SPARSE_SWITCH_PAYLOAD:{\nSparseSwitchPayloadInsntructionHolder specInsnHolder1=(SparseSwitchPayloadInsntructionHolder)insnHolder1;\nSparseSwitchPayloadInsntructionHolder specInsnHolder2=(SparseSwitchPayloadInsntructionHolder)insnHolder2;\nif (CompareUtils.uArrCompare(specInsnHolder1.keys,specInsnHolder2.keys) != 0) {\nreturn false;\n}\nif (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\nreturn false;\n}\nint targetCount=specInsnHolder1.targets.length;\nfor (int i=0; i < targetCount; ++i) {\nif (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n  return false;\n}\n}\nreturn true;\n}\ncase InstructionCodec.INSN_FORMAT_FILL_ARRAY_DATA_PAYLOAD:{\nFillArrayDataPayloadInstructionHolder specInsnHolder1=(FillArrayDataPayloadInstructionHolder)insnHolder1;\nFillArrayDataPayloadInstructionHolder specInsnHolder2=(FillArrayDataPayloadInstructionHolder)insnHolder2;\nif (specInsnHolder1.elementWidth != specInsnHolder2.elementWidth) {\nreturn false;\n}\nif (specInsnHolder1.size != specInsnHolder2.size) {\nreturn false;\n}\nint elementWidth=specInsnHolder1.elementWidth;\nswitch (elementWidth) {\ncase 1:{\nbyte[] array1=(byte[])specInsnHolder1.data;\nbyte[] array2=(byte[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 2:{\nshort[] array1=(short[])specInsnHolder1.data;\nshort[] array2=(short[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 4:{\nint[] array1=(int[])specInsnHolder1.data;\nint[] array2=(int[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 8:{\nlong[] array1=(long[])specInsnHolder1.data;\nlong[] array2=(long[])specInsnHolder2.data;\nreturn CompareUtils.sArrCompare(array1,array2) == 0;\n}\ndefault:{\nthrow new DexException(\"bogus element_width: \" + Hex.u2(elementWidth));\n}\n}\n}\ndefault:{\nif (insnHolder1.literal != insnHolder2.literal) {\nreturn false;\n}\nif (insnHolder1.registerCount != insnHolder2.registerCount) {\nreturn false;\n}\nif (insnHolder1.a != insnHolder2.a) {\nreturn false;\n}\nif (insnHolder1.b != insnHolder2.b) {\nreturn false;\n}\nif (insnHolder1.c != insnHolder2.c) {\nreturn false;\n}\nif (insnHolder1.d != insnHolder2.d) {\nreturn false;\n}\nif (insnHolder1.e != insnHolder2.e) {\nreturn false;\n}\nreturn true;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 569,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6395,
        "startLineNumber" : 267,
        "startColumnNumber" : 99,
        "endLineNumber" : 400,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (insnHolder1 == null && insnHolder2 == null) {\n    return true;\n  }\n  if (insnHolder1 == null || insnHolder2 == null) {\n    return false;\n  }\n  if (getPromotedOpCodeOnDemand(insnHolder1) != getPromotedOpCodeOnDemand(insnHolder2)) {\n    return false;\n  }\n  int opcode=insnHolder1.opcode;\n  int insnFormat=insnHolder1.insnFormat;\nswitch (insnFormat) {\ncase InstructionCodec.INSN_FORMAT_10T:case InstructionCodec.INSN_FORMAT_20T:case InstructionCodec.INSN_FORMAT_21T:case InstructionCodec.INSN_FORMAT_22T:case InstructionCodec.INSN_FORMAT_30T:case InstructionCodec.INSN_FORMAT_31T:{\n      final String addrPairStr=insnHolder1.address + \"-\" + insnHolder2.address;\n      if (this.visitedInsnAddrPairs.add(addrPairStr)) {\n        return isSameInstruction(insnHolder1.target,insnHolder2.target);\n      }\n else {\n        return true;\n      }\n    }\ncase InstructionCodec.INSN_FORMAT_21C:case InstructionCodec.INSN_FORMAT_22C:case InstructionCodec.INSN_FORMAT_31C:case InstructionCodec.INSN_FORMAT_35C:case InstructionCodec.INSN_FORMAT_3RC:{\n    return compareIndex(opcode,insnHolder1.index,insnHolder2.index);\n  }\ncase InstructionCodec.INSN_FORMAT_PACKED_SWITCH_PAYLOAD:{\n  PackedSwitchPayloadInsntructionHolder specInsnHolder1=(PackedSwitchPayloadInsntructionHolder)insnHolder1;\n  PackedSwitchPayloadInsntructionHolder specInsnHolder2=(PackedSwitchPayloadInsntructionHolder)insnHolder2;\n  if (specInsnHolder1.firstKey != specInsnHolder2.firstKey) {\n    return false;\n  }\n  if (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\n    return false;\n  }\n  int targetCount=specInsnHolder1.targets.length;\n  for (int i=0; i < targetCount; ++i) {\n    if (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n      return false;\n    }\n  }\n  return true;\n}\ncase InstructionCodec.INSN_FORMAT_SPARSE_SWITCH_PAYLOAD:{\nSparseSwitchPayloadInsntructionHolder specInsnHolder1=(SparseSwitchPayloadInsntructionHolder)insnHolder1;\nSparseSwitchPayloadInsntructionHolder specInsnHolder2=(SparseSwitchPayloadInsntructionHolder)insnHolder2;\nif (CompareUtils.uArrCompare(specInsnHolder1.keys,specInsnHolder2.keys) != 0) {\n  return false;\n}\nif (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\n  return false;\n}\nint targetCount=specInsnHolder1.targets.length;\nfor (int i=0; i < targetCount; ++i) {\n  if (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n    return false;\n  }\n}\nreturn true;\n}\ncase InstructionCodec.INSN_FORMAT_FILL_ARRAY_DATA_PAYLOAD:{\nFillArrayDataPayloadInstructionHolder specInsnHolder1=(FillArrayDataPayloadInstructionHolder)insnHolder1;\nFillArrayDataPayloadInstructionHolder specInsnHolder2=(FillArrayDataPayloadInstructionHolder)insnHolder2;\nif (specInsnHolder1.elementWidth != specInsnHolder2.elementWidth) {\nreturn false;\n}\nif (specInsnHolder1.size != specInsnHolder2.size) {\nreturn false;\n}\nint elementWidth=specInsnHolder1.elementWidth;\nswitch (elementWidth) {\ncase 1:{\n  byte[] array1=(byte[])specInsnHolder1.data;\n  byte[] array2=(byte[])specInsnHolder2.data;\n  return CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 2:{\nshort[] array1=(short[])specInsnHolder1.data;\nshort[] array2=(short[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 4:{\nint[] array1=(int[])specInsnHolder1.data;\nint[] array2=(int[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 8:{\nlong[] array1=(long[])specInsnHolder1.data;\nlong[] array2=(long[])specInsnHolder2.data;\nreturn CompareUtils.sArrCompare(array1,array2) == 0;\n}\ndefault:{\nthrow new DexException(\"bogus element_width: \" + Hex.u2(elementWidth));\n}\n}\n}\ndefault:{\nif (insnHolder1.literal != insnHolder2.literal) {\nreturn false;\n}\nif (insnHolder1.registerCount != insnHolder2.registerCount) {\nreturn false;\n}\nif (insnHolder1.a != insnHolder2.a) {\nreturn false;\n}\nif (insnHolder1.b != insnHolder2.b) {\nreturn false;\n}\nif (insnHolder1.c != insnHolder2.c) {\nreturn false;\n}\nif (insnHolder1.d != insnHolder2.d) {\nreturn false;\n}\nif (insnHolder1.e != insnHolder2.e) {\nreturn false;\n}\nreturn true;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 617,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6490,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 400,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isSameInstruction(InstructionHolder insnHolder1,InstructionHolder insnHolder2){\n  if (insnHolder1 == null && insnHolder2 == null) {\n    return true;\n  }\n  if (insnHolder1 == null || insnHolder2 == null) {\n    return false;\n  }\n  if (getPromotedOpCodeOnDemand(insnHolder1) != getPromotedOpCodeOnDemand(insnHolder2)) {\n    return false;\n  }\n  int opcode=insnHolder1.opcode;\n  int insnFormat=insnHolder1.insnFormat;\nswitch (insnFormat) {\ncase InstructionCodec.INSN_FORMAT_10T:case InstructionCodec.INSN_FORMAT_20T:case InstructionCodec.INSN_FORMAT_21T:case InstructionCodec.INSN_FORMAT_22T:case InstructionCodec.INSN_FORMAT_30T:case InstructionCodec.INSN_FORMAT_31T:{\n      final String addrPairStr=insnHolder1.address + \"-\" + insnHolder2.address;\n      if (this.visitedInsnAddrPairs.add(addrPairStr)) {\n        return isSameInstruction(insnHolder1.target,insnHolder2.target);\n      }\n else {\n        return true;\n      }\n    }\ncase InstructionCodec.INSN_FORMAT_21C:case InstructionCodec.INSN_FORMAT_22C:case InstructionCodec.INSN_FORMAT_31C:case InstructionCodec.INSN_FORMAT_35C:case InstructionCodec.INSN_FORMAT_3RC:{\n    return compareIndex(opcode,insnHolder1.index,insnHolder2.index);\n  }\ncase InstructionCodec.INSN_FORMAT_PACKED_SWITCH_PAYLOAD:{\n  PackedSwitchPayloadInsntructionHolder specInsnHolder1=(PackedSwitchPayloadInsntructionHolder)insnHolder1;\n  PackedSwitchPayloadInsntructionHolder specInsnHolder2=(PackedSwitchPayloadInsntructionHolder)insnHolder2;\n  if (specInsnHolder1.firstKey != specInsnHolder2.firstKey) {\n    return false;\n  }\n  if (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\n    return false;\n  }\n  int targetCount=specInsnHolder1.targets.length;\n  for (int i=0; i < targetCount; ++i) {\n    if (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n      return false;\n    }\n  }\n  return true;\n}\ncase InstructionCodec.INSN_FORMAT_SPARSE_SWITCH_PAYLOAD:{\nSparseSwitchPayloadInsntructionHolder specInsnHolder1=(SparseSwitchPayloadInsntructionHolder)insnHolder1;\nSparseSwitchPayloadInsntructionHolder specInsnHolder2=(SparseSwitchPayloadInsntructionHolder)insnHolder2;\nif (CompareUtils.uArrCompare(specInsnHolder1.keys,specInsnHolder2.keys) != 0) {\n  return false;\n}\nif (specInsnHolder1.targets.length != specInsnHolder2.targets.length) {\n  return false;\n}\nint targetCount=specInsnHolder1.targets.length;\nfor (int i=0; i < targetCount; ++i) {\n  if (!isSameInstruction(specInsnHolder1.targets[i],specInsnHolder2.targets[i])) {\n    return false;\n  }\n}\nreturn true;\n}\ncase InstructionCodec.INSN_FORMAT_FILL_ARRAY_DATA_PAYLOAD:{\nFillArrayDataPayloadInstructionHolder specInsnHolder1=(FillArrayDataPayloadInstructionHolder)insnHolder1;\nFillArrayDataPayloadInstructionHolder specInsnHolder2=(FillArrayDataPayloadInstructionHolder)insnHolder2;\nif (specInsnHolder1.elementWidth != specInsnHolder2.elementWidth) {\nreturn false;\n}\nif (specInsnHolder1.size != specInsnHolder2.size) {\nreturn false;\n}\nint elementWidth=specInsnHolder1.elementWidth;\nswitch (elementWidth) {\ncase 1:{\n  byte[] array1=(byte[])specInsnHolder1.data;\n  byte[] array2=(byte[])specInsnHolder2.data;\n  return CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 2:{\nshort[] array1=(short[])specInsnHolder1.data;\nshort[] array2=(short[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 4:{\nint[] array1=(int[])specInsnHolder1.data;\nint[] array2=(int[])specInsnHolder2.data;\nreturn CompareUtils.uArrCompare(array1,array2) == 0;\n}\ncase 8:{\nlong[] array1=(long[])specInsnHolder1.data;\nlong[] array2=(long[])specInsnHolder2.data;\nreturn CompareUtils.sArrCompare(array1,array2) == 0;\n}\ndefault:{\nthrow new DexException(\"bogus element_width: \" + Hex.u2(elementWidth));\n}\n}\n}\ndefault:{\nif (insnHolder1.literal != insnHolder2.literal) {\nreturn false;\n}\nif (insnHolder1.registerCount != insnHolder2.registerCount) {\nreturn false;\n}\nif (insnHolder1.a != insnHolder2.a) {\nreturn false;\n}\nif (insnHolder1.b != insnHolder2.b) {\nreturn false;\n}\nif (insnHolder1.c != insnHolder2.c) {\nreturn false;\n}\nif (insnHolder1.d != insnHolder2.d) {\nreturn false;\n}\nif (insnHolder1.e != insnHolder2.e) {\nreturn false;\n}\nreturn true;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 629,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 388,
        "startColumnNumber" : 20,
        "endLineNumber" : 388,
        "endColumnNumber" : 50
      },
      "nodeContext" : "insnHolder1.c != insnHolder2.c",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 388,
    "startColumnNumber" : 20,
    "endLineNumber" : 388,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}