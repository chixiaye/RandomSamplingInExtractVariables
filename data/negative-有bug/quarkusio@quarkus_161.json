{
  "id" : 161,
  "expression" : "Readiness",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ExpectedBeansUnitTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Readiness",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 64,
      "startColumnNumber" : 32,
      "endLineNumber" : 64,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 64,
        "startColumnNumber" : 32,
        "endLineNumber" : 64,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Readiness.Literal",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 64,
        "startColumnNumber" : 32,
        "endLineNumber" : 64,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Readiness.Literal.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 64,
        "startColumnNumber" : 18,
        "endLineNumber" : 64,
        "endColumnNumber" : 59
      },
      "nodeContext" : "checks.select(Readiness.Literal.INSTANCE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 59
      },
      "nodeContext" : "selects=checks.select(Readiness.Literal.INSTANCE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 60
      },
      "nodeContext" : "selects=checks.select(Readiness.Literal.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1010,
        "startLineNumber" : 58,
        "startColumnNumber" : 42,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Instance<HealthCheck> selects;\n  selects=checks.select(Liveness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Readiness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Startup.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group1\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  Assertions.assertTrue(checks.select(HealthGroup.Literal.of(\"group3\")).isUnsatisfied());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test metadata on HealthCheck procedure beans\n */\n@Test public void testHealthCheckMetadata(){\n  Instance<HealthCheck> selects;\n  selects=checks.select(Liveness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Readiness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Startup.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group1\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  Assertions.assertTrue(checks.select(HealthGroup.Literal.of(\"group3\")).isUnsatisfied());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 60
      },
      "nodeContext" : "selects=checks.select(Readiness.Literal.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Readiness",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 77,
      "startColumnNumber" : 16,
      "endLineNumber" : 77,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Readiness.Literal",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Readiness.Literal.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 76,
        "startColumnNumber" : 18,
        "endLineNumber" : 80,
        "endColumnNumber" : 49
      },
      "nodeContext" : "checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 49
      },
      "nodeContext" : "selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 32,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 50
      },
      "nodeContext" : "selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1010,
        "startLineNumber" : 58,
        "startColumnNumber" : 42,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Instance<HealthCheck> selects;\n  selects=checks.select(Liveness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Readiness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Startup.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group1\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  Assertions.assertTrue(checks.select(HealthGroup.Literal.of(\"group3\")).isUnsatisfied());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test metadata on HealthCheck procedure beans\n */\n@Test public void testHealthCheckMetadata(){\n  Instance<HealthCheck> selects;\n  selects=checks.select(Liveness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Readiness.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Startup.Literal.INSTANCE);\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group1\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  selects=checks.select(Liveness.Literal.INSTANCE,Readiness.Literal.INSTANCE,Startup.Literal.INSTANCE,HealthGroup.Literal.of(\"group1\"),HealthGroup.Literal.of(\"group2\"));\n  Assertions.assertTrue(isUnique(selects));\n  Assertions.assertTrue(checks.select(HealthGroup.Literal.of(\"group3\")).isUnsatisfied());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Readiness.Literal.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 64,
    "startColumnNumber" : 32,
    "endLineNumber" : 64,
    "endColumnNumber" : 41
  }, {
    "charLength" : 9,
    "startLineNumber" : 77,
    "startColumnNumber" : 16,
    "endLineNumber" : 77,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}