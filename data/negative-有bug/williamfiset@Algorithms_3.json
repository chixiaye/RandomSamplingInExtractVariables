{
  "id" : 3,
  "expression" : "soln[2][4]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolverTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "soln[2][4]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 109,
      "startColumnNumber" : 15,
      "endLineNumber" : 109,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 26
      },
      "nodeContext" : "assertThat(soln[2][4])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(soln[2][4]).isEqualTo(NEG_INF)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertThat(soln[2][4]).isEqualTo(NEG_INF);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 93,
        "startColumnNumber" : 39,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  FloydWarshallSolver solver=new FloydWarshallSolver(matrix2);\n  double[][] soln=solver.getApspMatrix();\n  assertThat(soln[0][0]).isEqualTo(0.0);\n  assertThat(soln[0][1]).isEqualTo(3.0);\n  assertThat(soln[0][2]).isEqualTo(NEG_INF);\n  assertThat(soln[0][3]).isEqualTo(NEG_INF);\n  assertThat(soln[0][4]).isEqualTo(NEG_INF);\n  assertThat(soln[1][0]).isEqualTo(2.0);\n  assertThat(soln[1][1]).isEqualTo(0.0);\n  assertThat(soln[1][2]).isEqualTo(NEG_INF);\n  assertThat(soln[1][3]).isEqualTo(NEG_INF);\n  assertThat(soln[1][4]).isEqualTo(NEG_INF);\n  assertThat(soln[2][2]).isEqualTo(NEG_INF);\n  assertThat(soln[2][3]).isEqualTo(NEG_INF);\n  assertThat(soln[2][4]).isEqualTo(NEG_INF);\n  assertThat(soln[3][2]).isEqualTo(NEG_INF);\n  assertThat(soln[3][3]).isEqualTo(NEG_INF);\n  assertThat(soln[3][4]).isEqualTo(NEG_INF);\n  assertThat(soln[4][2]).isEqualTo(NEG_INF);\n  assertThat(soln[4][3]).isEqualTo(NEG_INF);\n  assertThat(soln[4][4]).isEqualTo(NEG_INF);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNegativeCycleGraph(){\n  FloydWarshallSolver solver=new FloydWarshallSolver(matrix2);\n  double[][] soln=solver.getApspMatrix();\n  assertThat(soln[0][0]).isEqualTo(0.0);\n  assertThat(soln[0][1]).isEqualTo(3.0);\n  assertThat(soln[0][2]).isEqualTo(NEG_INF);\n  assertThat(soln[0][3]).isEqualTo(NEG_INF);\n  assertThat(soln[0][4]).isEqualTo(NEG_INF);\n  assertThat(soln[1][0]).isEqualTo(2.0);\n  assertThat(soln[1][1]).isEqualTo(0.0);\n  assertThat(soln[1][2]).isEqualTo(NEG_INF);\n  assertThat(soln[1][3]).isEqualTo(NEG_INF);\n  assertThat(soln[1][4]).isEqualTo(NEG_INF);\n  assertThat(soln[2][2]).isEqualTo(NEG_INF);\n  assertThat(soln[2][3]).isEqualTo(NEG_INF);\n  assertThat(soln[2][4]).isEqualTo(NEG_INF);\n  assertThat(soln[3][2]).isEqualTo(NEG_INF);\n  assertThat(soln[3][3]).isEqualTo(NEG_INF);\n  assertThat(soln[3][4]).isEqualTo(NEG_INF);\n  assertThat(soln[4][2]).isEqualTo(NEG_INF);\n  assertThat(soln[4][3]).isEqualTo(NEG_INF);\n  assertThat(soln[4][4]).isEqualTo(NEG_INF);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertThat(soln[2][4]).isEqualTo(NEG_INF);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 109,
    "startColumnNumber" : 15,
    "endLineNumber" : 109,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}