{
  "id" : 376,
  "expression" : "\"Note that the built-in numerical serdes do not follow this for negative numbers\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Note that the built-in numerical serdes do not follow this for negative numbers\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 81,
      "startLineNumber" : 420,
      "startColumnNumber" : 20,
      "endLineNumber" : 420,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 417,
        "startColumnNumber" : 21,
        "endLineNumber" : 420,
        "endColumnNumber" : 101
      },
      "nodeContext" : "\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 417,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 102
      },
      "nodeContext" : "log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 417,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 103
      },
      "nodeContext" : "log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 416,
        "startColumnNumber" : 84,
        "endLineNumber" : 422,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\");\n  return KeyValueIterators.emptyIterator();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 544,
        "startLineNumber" : 416,
        "startColumnNumber" : 8,
        "endLineNumber" : 422,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Objects.nonNull(from) && Objects.nonNull(to) && from.compareTo(to) > 0) {\n  log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\");\n  return KeyValueIterators.emptyIterator();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 415,
        "startColumnNumber" : 65,
        "endLineNumber" : 430,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Objects.nonNull(from) && Objects.nonNull(to) && from.compareTo(to) > 0) {\n    log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\");\n    return KeyValueIterators.emptyIterator();\n  }\n  validateStoreOpen();\n  final KeyValueIterator<Bytes,byte[]> rocksDBRangeIterator=dbAccessor.range(from,to,forward);\n  openIterators.add(rocksDBRangeIterator);\n  return rocksDBRangeIterator;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 413,
        "startColumnNumber" : 4,
        "endLineNumber" : 430,
        "endColumnNumber" : 5
      },
      "nodeContext" : "KeyValueIterator<Bytes,byte[]> range(final Bytes from,final Bytes to,final boolean forward){\n  if (Objects.nonNull(from) && Objects.nonNull(to) && from.compareTo(to) > 0) {\n    log.warn(\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\");\n    return KeyValueIterators.emptyIterator();\n  }\n  validateStoreOpen();\n  final KeyValueIterator<Bytes,byte[]> rocksDBRangeIterator=dbAccessor.range(from,to,forward);\n  openIterators.add(rocksDBRangeIterator);\n  return rocksDBRangeIterator;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 417,
        "startColumnNumber" : 21,
        "endLineNumber" : 420,
        "endColumnNumber" : 101
      },
      "nodeContext" : "\"Returning empty iterator for fetch with invalid key range: from > to. \" + \"This may be due to range arguments set in the wrong order, \" + \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes. \"+ \"Note that the built-in numerical serdes do not follow this for negative numbers\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 10,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 81,
    "startLineNumber" : 420,
    "startColumnNumber" : 20,
    "endLineNumber" : 420,
    "endColumnNumber" : 101
  } ],
  "layoutRelationDataList" : [ ]
}