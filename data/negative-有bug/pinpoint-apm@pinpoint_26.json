{
  "id" : 26,
  "expression" : "newEntry",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/collect/RegularImmutableBiMap.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 102,
      "startColumnNumber" : 28,
      "endLineNumber" : 102,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 36
      },
      "nodeContext" : "keyTable[keyBucket]=newEntry",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 37
      },
      "nodeContext" : "keyTable[keyBucket]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 70,
        "startColumnNumber" : 32,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 56,
        "startColumnNumber" : 92,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static <K,V>RegularImmutableBiMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 37
      },
      "nodeContext" : "keyTable[keyBucket]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.common.collect.ImmutableMapEntry<K,V>"
  }, {
    "nodeContext" : "newEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 103,
      "startColumnNumber" : 32,
      "endLineNumber" : 103,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 40
      },
      "nodeContext" : "valueTable[valueBucket]=newEntry",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 41
      },
      "nodeContext" : "valueTable[valueBucket]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 70,
        "startColumnNumber" : 32,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 56,
        "startColumnNumber" : 92,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static <K,V>RegularImmutableBiMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 41
      },
      "nodeContext" : "valueTable[valueBucket]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.common.collect.ImmutableMapEntry<K,V>"
  }, {
    "nodeContext" : "newEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 104,
      "startColumnNumber" : 19,
      "endLineNumber" : 104,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 27
      },
      "nodeContext" : "entries[i]=newEntry",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 28
      },
      "nodeContext" : "entries[i]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 70,
        "startColumnNumber" : 32,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n  K key=entry.getKey();\n  V value=entry.getValue();\n  checkEntryNotNull(key,value);\n  int keyHash=key.hashCode();\n  int valueHash=value.hashCode();\n  int keyBucket=Hashing.smear(keyHash) & mask;\n  int valueBucket=Hashing.smear(valueHash) & mask;\n  ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n  checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n  ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n  checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n  ImmutableMapEntry<K,V> newEntry;\n  if (nextInValueBucket == null && nextInKeyBucket == null) {\n    boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n    newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n  }\n else {\n    newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n  }\n  keyTable[keyBucket]=newEntry;\n  valueTable[valueBucket]=newEntry;\n  entries[i]=newEntry;\n  hashCode+=keyHash ^ valueHash;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 56,
        "startColumnNumber" : 92,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static <K,V>RegularImmutableBiMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){\n  checkPositionIndex(n,entryArray.length);\n  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  ImmutableMapEntry<K,V>[] keyTable=createEntryArray(tableSize);\n  ImmutableMapEntry<K,V>[] valueTable=createEntryArray(tableSize);\n  Entry<K,V>[] entries;\n  if (n == entryArray.length) {\n    entries=entryArray;\n  }\n else {\n    entries=createEntryArray(n);\n  }\n  int hashCode=0;\n  for (int i=0; i < n; i++) {\n    @SuppressWarnings(\"unchecked\") Entry<K,V> entry=entryArray[i];\n    K key=entry.getKey();\n    V value=entry.getValue();\n    checkEntryNotNull(key,value);\n    int keyHash=key.hashCode();\n    int valueHash=value.hashCode();\n    int keyBucket=Hashing.smear(keyHash) & mask;\n    int valueBucket=Hashing.smear(valueHash) & mask;\n    ImmutableMapEntry<K,V> nextInKeyBucket=keyTable[keyBucket];\n    checkNoConflictInKeyBucket(key,entry,nextInKeyBucket);\n    ImmutableMapEntry<K,V> nextInValueBucket=valueTable[valueBucket];\n    checkNoConflictInValueBucket(value,entry,nextInValueBucket);\n    ImmutableMapEntry<K,V> newEntry;\n    if (nextInValueBucket == null && nextInKeyBucket == null) {\n      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();\n      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);\n    }\n else {\n      newEntry=new NonTerminalImmutableBiMapEntry<K,V>(key,value,nextInKeyBucket,nextInValueBucket);\n    }\n    keyTable[keyBucket]=newEntry;\n    valueTable[valueBucket]=newEntry;\n    entries[i]=newEntry;\n    hashCode+=keyHash ^ valueHash;\n  }\n  return new RegularImmutableBiMap<K,V>(keyTable,valueTable,entries,mask,hashCode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 356,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 28
      },
      "nodeContext" : "entries[i]=newEntry;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.common.collect.ImmutableMapEntry<K,V>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 102,
    "startColumnNumber" : 28,
    "endLineNumber" : 102,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 103,
    "startColumnNumber" : 32,
    "endLineNumber" : 103,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 104,
    "startColumnNumber" : 19,
    "endLineNumber" : 104,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}