{
  "id" : 157,
  "expression" : "new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n  seen.set(true);\n  return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n}\n))",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/test/org/openqa/selenium/devtools/NetworkInterceptorRestTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n  seen.set(true);\n  return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n}\n))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 356,
      "startLineNumber" : 113,
      "startColumnNumber" : 18,
      "endLineNumber" : 122,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 46,
    "astHeight" : 12,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 11
      },
      "nodeContext" : "interceptor=new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n  seen.set(true);\n  return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n}\n))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 48,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 12
      },
      "nodeContext" : "interceptor=new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n  seen.set(true);\n  return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 49,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1057,
        "startLineNumber" : 111,
        "startColumnNumber" : 71,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AtomicBoolean seen=new AtomicBoolean(false);\n  interceptor=new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n    seen.set(true);\n    return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n  }\n));\n  JavascriptExecutor js=(JavascriptExecutor)driver;\n  Object response=js.executeAsyncScript(\"var url = arguments[0];\" + \"var callback = arguments[arguments.length - 1];\" + \"var xhr = new XMLHttpRequest();\"+ \"xhr.open('PUT', url, true);\"+ \"xhr.onload = function() {\"+ \"  if (xhr.readyState == 4) {\"+ \"    callback(xhr.responseText);\"+ \"  }\"+ \"};\"+ \"xhr.send('Hey');\",new URL(appServer.whereIs(\"/\")).toString());\n  assertThat(seen.get()).isTrue();\n  assertThat(response.toString()).contains(\"Received response for PUT\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1134,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void shouldInterceptPutRequest() throws MalformedURLException {\n  AtomicBoolean seen=new AtomicBoolean(false);\n  interceptor=new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n    seen.set(true);\n    return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n  }\n));\n  JavascriptExecutor js=(JavascriptExecutor)driver;\n  Object response=js.executeAsyncScript(\"var url = arguments[0];\" + \"var callback = arguments[arguments.length - 1];\" + \"var xhr = new XMLHttpRequest();\"+ \"xhr.open('PUT', url, true);\"+ \"xhr.onload = function() {\"+ \"  if (xhr.readyState == 4) {\"+ \"    callback(xhr.responseText);\"+ \"  }\"+ \"};\"+ \"xhr.send('Hey');\",new URL(appServer.whereIs(\"/\")).toString());\n  assertThat(seen.get()).isTrue();\n  assertThat(response.toString()).contains(\"Received response for PUT\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 12
      },
      "nodeContext" : "interceptor=new NetworkInterceptor(driver,Route.matching(req -> (req.getMethod() == HttpMethod.PUT)).to(() -> req -> {\n  seen.set(true);\n  return new HttpResponse().setStatus(200).addHeader(\"Access-Control-Allow-Origin\",\"*\").setContent(utf8String(\"Received response for PUT\"));\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 49,
      "astHeight" : 14
    },
    "tokenLength" : 29,
    "type" : "org.openqa.selenium.devtools.NetworkInterceptor"
  } ],
  "positionList" : [ {
    "charLength" : 356,
    "startLineNumber" : 113,
    "startColumnNumber" : 18,
    "endLineNumber" : 122,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}