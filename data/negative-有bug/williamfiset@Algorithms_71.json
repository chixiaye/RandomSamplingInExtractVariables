{
  "id" : 71,
  "expression" : "System.out",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System.out",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 269,
      "startColumnNumber" : 4,
      "endLineNumber" : 269,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 269,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 67
      },
      "nodeContext" : "System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 269,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 68
      },
      "nodeContext" : "System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 234,
        "startColumnNumber" : 41,
        "endLineNumber" : 275,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=11;\n  int s=n - 2;\n  int t=n - 1;\n  NetworkFlowSolverBase solver=new EdmondsKarpSolver(n,s,t);\n  solver.addEdge(s,0,5);\n  solver.addEdge(s,1,10);\n  solver.addEdge(s,2,5);\n  solver.addEdge(0,3,10);\n  solver.addEdge(1,0,15);\n  solver.addEdge(1,4,20);\n  solver.addEdge(2,5,10);\n  solver.addEdge(3,4,25);\n  solver.addEdge(3,6,10);\n  solver.addEdge(4,2,5);\n  solver.addEdge(4,7,30);\n  solver.addEdge(5,7,5);\n  solver.addEdge(5,8,10);\n  solver.addEdge(7,3,15);\n  solver.addEdge(7,8,5);\n  solver.addEdge(6,t,5);\n  solver.addEdge(7,t,15);\n  solver.addEdge(8,t,10);\n  System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n  List<Edge>[] resultGraph=solver.getGraph();\n  for (  List<Edge> edges : resultGraph)   for (  Edge e : edges)   System.out.println(e.toString(s,t));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 275,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=11;\n  int s=n - 2;\n  int t=n - 1;\n  NetworkFlowSolverBase solver=new EdmondsKarpSolver(n,s,t);\n  solver.addEdge(s,0,5);\n  solver.addEdge(s,1,10);\n  solver.addEdge(s,2,5);\n  solver.addEdge(0,3,10);\n  solver.addEdge(1,0,15);\n  solver.addEdge(1,4,20);\n  solver.addEdge(2,5,10);\n  solver.addEdge(3,4,25);\n  solver.addEdge(3,6,10);\n  solver.addEdge(4,2,5);\n  solver.addEdge(4,7,30);\n  solver.addEdge(5,7,5);\n  solver.addEdge(5,8,10);\n  solver.addEdge(7,3,15);\n  solver.addEdge(7,8,5);\n  solver.addEdge(6,t,5);\n  solver.addEdge(7,t,15);\n  solver.addEdge(8,t,10);\n  System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n  List<Edge>[] resultGraph=solver.getGraph();\n  for (  List<Edge> edges : resultGraph)   for (  Edge e : edges)   System.out.println(e.toString(s,t));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 269,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 68
      },
      "nodeContext" : "System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.io.PrintStream"
  }, {
    "nodeContext" : "System.out",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 274,
      "startColumnNumber" : 62,
      "endLineNumber" : 274,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 274,
        "startColumnNumber" : 62,
        "endLineNumber" : 274,
        "endColumnNumber" : 98
      },
      "nodeContext" : "System.out.println(e.toString(s,t))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 274,
        "startColumnNumber" : 62,
        "endLineNumber" : 274,
        "endColumnNumber" : 99
      },
      "nodeContext" : "System.out.println(e.toString(s,t));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 274,
        "startColumnNumber" : 41,
        "endLineNumber" : 274,
        "endColumnNumber" : 99
      },
      "nodeContext" : "for (Edge e : edges) System.out.println(e.toString(s,t));\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 274,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 99
      },
      "nodeContext" : "for (List<Edge> edges : resultGraph) for (Edge e : edges) System.out.println(e.toString(s,t));\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 234,
        "startColumnNumber" : 41,
        "endLineNumber" : 275,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=11;\n  int s=n - 2;\n  int t=n - 1;\n  NetworkFlowSolverBase solver=new EdmondsKarpSolver(n,s,t);\n  solver.addEdge(s,0,5);\n  solver.addEdge(s,1,10);\n  solver.addEdge(s,2,5);\n  solver.addEdge(0,3,10);\n  solver.addEdge(1,0,15);\n  solver.addEdge(1,4,20);\n  solver.addEdge(2,5,10);\n  solver.addEdge(3,4,25);\n  solver.addEdge(3,6,10);\n  solver.addEdge(4,2,5);\n  solver.addEdge(4,7,30);\n  solver.addEdge(5,7,5);\n  solver.addEdge(5,8,10);\n  solver.addEdge(7,3,15);\n  solver.addEdge(7,8,5);\n  solver.addEdge(6,t,5);\n  solver.addEdge(7,t,15);\n  solver.addEdge(8,t,10);\n  System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n  List<Edge>[] resultGraph=solver.getGraph();\n  for (  List<Edge> edges : resultGraph)   for (  Edge e : edges)   System.out.println(e.toString(s,t));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1165,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 275,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=11;\n  int s=n - 2;\n  int t=n - 1;\n  NetworkFlowSolverBase solver=new EdmondsKarpSolver(n,s,t);\n  solver.addEdge(s,0,5);\n  solver.addEdge(s,1,10);\n  solver.addEdge(s,2,5);\n  solver.addEdge(0,3,10);\n  solver.addEdge(1,0,15);\n  solver.addEdge(1,4,20);\n  solver.addEdge(2,5,10);\n  solver.addEdge(3,4,25);\n  solver.addEdge(3,6,10);\n  solver.addEdge(4,2,5);\n  solver.addEdge(4,7,30);\n  solver.addEdge(5,7,5);\n  solver.addEdge(5,8,10);\n  solver.addEdge(7,3,15);\n  solver.addEdge(7,8,5);\n  solver.addEdge(6,t,5);\n  solver.addEdge(7,t,15);\n  solver.addEdge(8,t,10);\n  System.out.printf(\"Maximum Flow is: %d\\n\",solver.getMaxFlow());\n  List<Edge>[] resultGraph=solver.getGraph();\n  for (  List<Edge> edges : resultGraph)   for (  Edge e : edges)   System.out.println(e.toString(s,t));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 274,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 99
      },
      "nodeContext" : "for (List<Edge> edges : resultGraph) for (Edge e : edges) System.out.println(e.toString(s,t));\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.io.PrintStream"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 269,
    "startColumnNumber" : 4,
    "endLineNumber" : 269,
    "endColumnNumber" : 14
  }, {
    "charLength" : 10,
    "startLineNumber" : 274,
    "startColumnNumber" : 62,
    "endLineNumber" : 274,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}