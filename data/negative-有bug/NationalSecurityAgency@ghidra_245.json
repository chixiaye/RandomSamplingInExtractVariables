{
  "id" : 245,
  "expression" : "language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/LanguageVersionException.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 97,
      "startLineNumber" : 113,
      "startColumnNumber" : 11,
      "endLineNumber" : 114,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 113,
        "startColumnNumber" : 7,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n  return new LanguageVersionException();\n}\n else if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n  throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 109,
        "startColumnNumber" : 7,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (language.getVersion() == languageVersion && languageMinorVersion < 0) {\n  return null;\n}\n else if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n  return new LanguageVersionException();\n}\n else if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n  throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2129,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (language.getVersion() > languageVersion) {\n  Language newLanguage=language;\n  Language oldLanguage=OldLanguageFactory.getOldLanguageFactory().getOldLanguage(languageID,languageVersion);\n  if (oldLanguage == null) {\n    Msg.error(LanguageVersionException.class,\"Old language specification not found: \" + languageID + \" (Version \"+ languageVersion+ \")\");\n    return new LanguageVersionException();\n  }\n  LanguageTranslator languageUpgradeTranslator=LanguageTranslatorFactory.getLanguageTranslatorFactory().getLanguageTranslator(oldLanguage,newLanguage);\n  if (languageUpgradeTranslator == null) {\n    throw new LanguageNotFoundException(language.getLanguageID(),\"(Ver \" + languageVersion + \".\"+ languageMinorVersion+ \" -> \"+ newLanguage.getVersion()+ \".\"+ newLanguage.getMinorVersion()+ \") language version translation not supported\");\n  }\n  language=oldLanguage;\n  return new LanguageVersionException(oldLanguage,languageUpgradeTranslator);\n}\n else if (language.getVersion() == languageVersion && languageMinorVersion < 0) {\n  return null;\n}\n else if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n  return new LanguageVersionException();\n}\n else if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n  throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2231,
        "startLineNumber" : 74,
        "startColumnNumber" : 62,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LanguageID languageID=language.getLanguageID();\n  if (language.getVersion() > languageVersion) {\n    Language newLanguage=language;\n    Language oldLanguage=OldLanguageFactory.getOldLanguageFactory().getOldLanguage(languageID,languageVersion);\n    if (oldLanguage == null) {\n      Msg.error(LanguageVersionException.class,\"Old language specification not found: \" + languageID + \" (Version \"+ languageVersion+ \")\");\n      return new LanguageVersionException();\n    }\n    LanguageTranslator languageUpgradeTranslator=LanguageTranslatorFactory.getLanguageTranslatorFactory().getLanguageTranslator(oldLanguage,newLanguage);\n    if (languageUpgradeTranslator == null) {\n      throw new LanguageNotFoundException(language.getLanguageID(),\"(Ver \" + languageVersion + \".\"+ languageMinorVersion+ \" -> \"+ newLanguage.getVersion()+ \".\"+ newLanguage.getMinorVersion()+ \") language version translation not supported\");\n    }\n    language=oldLanguage;\n    return new LanguageVersionException(oldLanguage,languageUpgradeTranslator);\n  }\n else   if (language.getVersion() == languageVersion && languageMinorVersion < 0) {\n    return null;\n  }\n else   if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n    return new LanguageVersionException();\n  }\n else   if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n    throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 62,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Check language against required version information.  If not a match or upgradeable a  {@link LanguageNotFoundException} will be thrown.  If an upgradeable {@link LanguageVersionException}is returned, a major version change will also include the appropriate Old-Language stub and {@link LanguageTranslator} required to facilitate a language upgrade.\n * @param language language corresponding to desired language ID\n * @param languageVersion required major language version\n * @param languageMinorVersion required minor language version.  A negative minor version will be ignored.\n * @return null if language matches, otherwise an upgradeable {@link LanguageVersionException}.\n * @throws LanguageNotFoundException if language is a mismatch and is not upgradeable.\n */\npublic static LanguageVersionException check(Language language,int languageVersion,int languageMinorVersion) throws LanguageNotFoundException {\n  LanguageID languageID=language.getLanguageID();\n  if (language.getVersion() > languageVersion) {\n    Language newLanguage=language;\n    Language oldLanguage=OldLanguageFactory.getOldLanguageFactory().getOldLanguage(languageID,languageVersion);\n    if (oldLanguage == null) {\n      Msg.error(LanguageVersionException.class,\"Old language specification not found: \" + languageID + \" (Version \"+ languageVersion+ \")\");\n      return new LanguageVersionException();\n    }\n    LanguageTranslator languageUpgradeTranslator=LanguageTranslatorFactory.getLanguageTranslatorFactory().getLanguageTranslator(oldLanguage,newLanguage);\n    if (languageUpgradeTranslator == null) {\n      throw new LanguageNotFoundException(language.getLanguageID(),\"(Ver \" + languageVersion + \".\"+ languageMinorVersion+ \" -> \"+ newLanguage.getVersion()+ \".\"+ newLanguage.getMinorVersion()+ \") language version translation not supported\");\n    }\n    language=oldLanguage;\n    return new LanguageVersionException(oldLanguage,languageUpgradeTranslator);\n  }\n else   if (language.getVersion() == languageVersion && languageMinorVersion < 0) {\n    return null;\n  }\n else   if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n    return new LanguageVersionException();\n  }\n else   if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n    throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 113,
        "startColumnNumber" : 7,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (language.getVersion() == languageVersion && language.getMinorVersion() > languageMinorVersion) {\n  return new LanguageVersionException();\n}\n else if (language.getMinorVersion() != languageMinorVersion || language.getVersion() != languageVersion) {\n  throw new LanguageNotFoundException(language.getLanguageID(),languageVersion,languageMinorVersion);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 97,
    "startLineNumber" : 113,
    "startColumnNumber" : 11,
    "endLineNumber" : 114,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}