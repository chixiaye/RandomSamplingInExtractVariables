{
  "id" : 136,
  "expression" : "elements",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/collect/Ordering.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "elements",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 853,
      "startColumnNumber" : 40,
      "endLineNumber" : 853,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 853,
        "startColumnNumber" : 22,
        "endLineNumber" : 853,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Iterables.toArray(elements)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 853,
        "startColumnNumber" : 16,
        "endLineNumber" : 853,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(E[])Iterables.toArray(elements)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 853,
        "startColumnNumber" : 8,
        "endLineNumber" : 853,
        "endColumnNumber" : 49
      },
      "nodeContext" : "array=(E[])Iterables.toArray(elements)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 852,
        "startColumnNumber" : 4,
        "endLineNumber" : 853,
        "endColumnNumber" : 50
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") E[] array=(E[])Iterables.toArray(elements);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 851,
        "startColumnNumber" : 64,
        "endLineNumber" : 856,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  @SuppressWarnings(\"unchecked\") E[] array=(E[])Iterables.toArray(elements);\n  Arrays.sort(array,this);\n  return Lists.newArrayList(Arrays.asList(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 835,
        "startColumnNumber" : 2,
        "endLineNumber" : 856,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a <b>mutable</b> list containing  {@code elements} sorted by this ordering; use thisonly when the resulting list may need further modification, or may contain  {@code null}. The input is not modified. The returned list is serializable and has random access. <p>Unlike  {@link Sets#newTreeSet(Iterable)}, this method does not discard elements that are duplicates according to the comparator. The sort performed is <i>stable</i>, meaning that such elements will appear in the returned list in the same order they appeared in  {@code elements}. <p><b>Performance note:</b> According to our benchmarking on Open JDK 7,  {@link #immutableSortedCopy} generally performs better (in both time and space)than this method, and this method in turn generally performs better than copying the list and calling  {@link Collections#sort(List)}.\n */\npublic <E extends T>List<E> sortedCopy(Iterable<E> elements){\n  @SuppressWarnings(\"unchecked\") E[] array=(E[])Iterables.toArray(elements);\n  Arrays.sort(array,this);\n  return Lists.newArrayList(Arrays.asList(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 853,
        "startColumnNumber" : 8,
        "endLineNumber" : 853,
        "endColumnNumber" : 49
      },
      "nodeContext" : "array=(E[])Iterables.toArray(elements)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Iterable<E>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 853,
    "startColumnNumber" : 40,
    "endLineNumber" : 853,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}