{
  "id" : 258,
  "expression" : "i",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/FieldNamingPolicy.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 124,
      "startColumnNumber" : 20,
      "endLineNumber" : 124,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 124,
        "startColumnNumber" : 20,
        "endLineNumber" : 124,
        "endColumnNumber" : 37
      },
      "nodeContext" : "i < name.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < name.length(); i++) {\n  char character=name.charAt(i);\n  if (Character.isUpperCase(character) && translation.length() != 0) {\n    translation.append(separator);\n  }\n  translation.append(character);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 122,
        "startColumnNumber" : 73,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder translation=new StringBuilder();\n  for (int i=0; i < name.length(); i++) {\n    char character=name.charAt(i);\n    if (Character.isUpperCase(character) && translation.length() != 0) {\n      translation.append(separator);\n    }\n    translation.append(character);\n  }\n  return translation.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts the field name that uses camel-case define word separation into separate words that are separated by the provided  {@code separatorString}.\n */\nprivate static String separateCamelCase(String name,String separator){\n  StringBuilder translation=new StringBuilder();\n  for (int i=0; i < name.length(); i++) {\n    char character=name.charAt(i);\n    if (Character.isUpperCase(character) && translation.length() != 0) {\n      translation.append(separator);\n    }\n    translation.append(character);\n  }\n  return translation.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 124,
        "startColumnNumber" : 20,
        "endLineNumber" : 124,
        "endColumnNumber" : 37
      },
      "nodeContext" : "i < name.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 125,
      "startColumnNumber" : 35,
      "endLineNumber" : 125,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 125,
        "startColumnNumber" : 23,
        "endLineNumber" : 125,
        "endColumnNumber" : 37
      },
      "nodeContext" : "name.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 125,
        "startColumnNumber" : 11,
        "endLineNumber" : 125,
        "endColumnNumber" : 37
      },
      "nodeContext" : "character=name.charAt(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 38
      },
      "nodeContext" : "char character=name.charAt(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 124,
        "startColumnNumber" : 44,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char character=name.charAt(i);\n  if (Character.isUpperCase(character) && translation.length() != 0) {\n    translation.append(separator);\n  }\n  translation.append(character);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < name.length(); i++) {\n  char character=name.charAt(i);\n  if (Character.isUpperCase(character) && translation.length() != 0) {\n    translation.append(separator);\n  }\n  translation.append(character);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 122,
        "startColumnNumber" : 73,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder translation=new StringBuilder();\n  for (int i=0; i < name.length(); i++) {\n    char character=name.charAt(i);\n    if (Character.isUpperCase(character) && translation.length() != 0) {\n      translation.append(separator);\n    }\n    translation.append(character);\n  }\n  return translation.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts the field name that uses camel-case define word separation into separate words that are separated by the provided  {@code separatorString}.\n */\nprivate static String separateCamelCase(String name,String separator){\n  StringBuilder translation=new StringBuilder();\n  for (int i=0; i < name.length(); i++) {\n    char character=name.charAt(i);\n    if (Character.isUpperCase(character) && translation.length() != 0) {\n      translation.append(separator);\n    }\n    translation.append(character);\n  }\n  return translation.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 125,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 38
      },
      "nodeContext" : "char character=name.charAt(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 124,
    "startColumnNumber" : 20,
    "endLineNumber" : 124,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 125,
    "startColumnNumber" : 35,
    "endLineNumber" : 125,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}