{
  "id" : 186,
  "expression" : "v.x",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/org/jbox2d/collision/WorldManifold.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "v.x",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 30,
      "endLineNumber" : 81,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 33
      },
      "nodeContext" : "xfA.q.c * v.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "xfA.q.c * v.x - xfA.q.s * v.y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 19,
        "endLineNumber" : 81,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(xfA.q.c * v.x - xfA.q.s * v.y)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 81,
        "startColumnNumber" : 19,
        "endLineNumber" : 81,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x",
      "nodeType" : "Assignment",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 61
      },
      "nodeContext" : "pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1234,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 102,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final Vec2 pointA=pool3;\n  final Vec2 pointB=pool4;\n  normal.x=1;\n  normal.y=0;\n  Vec2 v=manifold.localPoint;\n  pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n  pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n  Vec2 mp0p=manifold.points[0].localPoint;\n  pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n  pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n  if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n    normal.x=pointB.x - pointA.x;\n    normal.y=pointB.y - pointA.y;\n    normal.normalize();\n  }\n  final float cAx=normal.x * radiusA + pointA.x;\n  final float cAy=normal.y * radiusA + pointA.y;\n  final float cBx=-normal.x * radiusB + pointB.x;\n  final float cBy=-normal.y * radiusB + pointB.y;\n  points[0].x=(cAx + cBx) * .5f;\n  points[0].y=(cAy + cBy) * .5f;\n  separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5378,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (manifold.type) {\ncase CIRCLES:{\n    final Vec2 pointA=pool3;\n    final Vec2 pointB=pool4;\n    normal.x=1;\n    normal.y=0;\n    Vec2 v=manifold.localPoint;\n    pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n    pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n    Vec2 mp0p=manifold.points[0].localPoint;\n    pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n    pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n    if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n      normal.x=pointB.x - pointA.x;\n      normal.y=pointB.y - pointA.y;\n      normal.normalize();\n    }\n    final float cAx=normal.x * radiusA + pointA.x;\n    final float cAy=normal.y * radiusA + pointA.y;\n    final float cBx=-normal.x * radiusB + pointB.x;\n    final float cBy=-normal.y * radiusB + pointB.y;\n    points[0].x=(cAx + cBx) * .5f;\n    points[0].y=(cAy + cBy) * .5f;\n    separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\nbreak;\ncase FACE_A:{\nfinal Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\nTransform.mulToOut(xfA,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\n  Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n  final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n  final float cAx=normal.x * scalar + clipPoint.x;\n  final float cAy=normal.y * scalar + clipPoint.y;\n  final float cBx=-normal.x * radiusB + clipPoint.x;\n  final float cBy=-normal.y * radiusB + clipPoint.y;\n  points[i].x=(cAx + cBx) * .5f;\n  points[i].y=(cAy + cBy) * .5f;\n  separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n}\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 752,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5445,
        "startLineNumber" : 66,
        "startColumnNumber" : 42,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (manifold.pointCount == 0) {\n    return;\n  }\nswitch (manifold.type) {\ncase CIRCLES:{\n      final Vec2 pointA=pool3;\n      final Vec2 pointB=pool4;\n      normal.x=1;\n      normal.y=0;\n      Vec2 v=manifold.localPoint;\n      pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n      pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n      Vec2 mp0p=manifold.points[0].localPoint;\n      pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n      pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n      if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n        normal.x=pointB.x - pointA.x;\n        normal.y=pointB.y - pointA.y;\n        normal.normalize();\n      }\n      final float cAx=normal.x * radiusA + pointA.x;\n      final float cAy=normal.y * radiusA + pointA.y;\n      final float cBx=-normal.x * radiusB + pointB.x;\n      final float cBy=-normal.y * radiusB + pointB.y;\n      points[0].x=(cAx + cBx) * .5f;\n      points[0].y=(cAy + cBy) * .5f;\n      separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n    }\n  break;\ncase FACE_A:{\n  final Vec2 planePoint=pool3;\n  Rot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\n  Transform.mulToOut(xfA,manifold.localPoint,planePoint);\n  final Vec2 clipPoint=pool4;\n  for (int i=0; i < manifold.pointCount; i++) {\n    Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n    final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n    final float cAx=normal.x * scalar + clipPoint.x;\n    final float cAy=normal.y * scalar + clipPoint.y;\n    final float cBx=-normal.x * radiusB + clipPoint.x;\n    final float cBy=-normal.y * radiusB + clipPoint.y;\n    points[i].x=(cAx + cBx) * .5f;\n    points[i].y=(cAy + cBy) * .5f;\n    separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 761,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5577,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public final void initialize(final Manifold manifold,final Transform xfA,float radiusA,final Transform xfB,float radiusB){\n  if (manifold.pointCount == 0) {\n    return;\n  }\nswitch (manifold.type) {\ncase CIRCLES:{\n      final Vec2 pointA=pool3;\n      final Vec2 pointB=pool4;\n      normal.x=1;\n      normal.y=0;\n      Vec2 v=manifold.localPoint;\n      pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n      pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n      Vec2 mp0p=manifold.points[0].localPoint;\n      pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n      pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n      if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n        normal.x=pointB.x - pointA.x;\n        normal.y=pointB.y - pointA.y;\n        normal.normalize();\n      }\n      final float cAx=normal.x * radiusA + pointA.x;\n      final float cAy=normal.y * radiusA + pointA.y;\n      final float cBx=-normal.x * radiusB + pointB.x;\n      final float cBy=-normal.y * radiusB + pointB.y;\n      points[0].x=(cAx + cBx) * .5f;\n      points[0].y=(cAy + cBy) * .5f;\n      separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n    }\n  break;\ncase FACE_A:{\n  final Vec2 planePoint=pool3;\n  Rot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\n  Transform.mulToOut(xfA,manifold.localPoint,planePoint);\n  final Vec2 clipPoint=pool4;\n  for (int i=0; i < manifold.pointCount; i++) {\n    Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n    final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n    final float cAx=normal.x * scalar + clipPoint.x;\n    final float cAy=normal.y * scalar + clipPoint.y;\n    final float cBx=-normal.x * radiusB + clipPoint.x;\n    final float cBy=-normal.y * radiusB + clipPoint.y;\n    points[i].x=(cAx + cBx) * .5f;\n    points[i].y=(cAy + cBy) * .5f;\n    separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 787,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 61
      },
      "nodeContext" : "pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "float"
  }, {
    "nodeContext" : "v.x",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 82,
      "startColumnNumber" : 30,
      "endLineNumber" : 82,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 82,
        "endColumnNumber" : 33
      },
      "nodeContext" : "xfA.q.s * v.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 82,
        "endColumnNumber" : 49
      },
      "nodeContext" : "xfA.q.s * v.x + xfA.q.c * v.y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(xfA.q.s * v.x + xfA.q.c * v.y)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 82,
        "startColumnNumber" : 19,
        "endLineNumber" : 82,
        "endColumnNumber" : 60
      },
      "nodeContext" : "(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y",
      "nodeType" : "Assignment",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 61
      },
      "nodeContext" : "pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1234,
        "startLineNumber" : 72,
        "startColumnNumber" : 20,
        "endLineNumber" : 102,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final Vec2 pointA=pool3;\n  final Vec2 pointB=pool4;\n  normal.x=1;\n  normal.y=0;\n  Vec2 v=manifold.localPoint;\n  pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n  pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n  Vec2 mp0p=manifold.points[0].localPoint;\n  pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n  pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n  if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n    normal.x=pointB.x - pointA.x;\n    normal.y=pointB.y - pointA.y;\n    normal.normalize();\n  }\n  final float cAx=normal.x * radiusA + pointA.x;\n  final float cAy=normal.y * radiusA + pointA.y;\n  final float cBx=-normal.x * radiusB + pointB.x;\n  final float cBy=-normal.y * radiusB + pointB.y;\n  points[0].x=(cAx + cBx) * .5f;\n  points[0].y=(cAy + cBy) * .5f;\n  separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5378,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (manifold.type) {\ncase CIRCLES:{\n    final Vec2 pointA=pool3;\n    final Vec2 pointB=pool4;\n    normal.x=1;\n    normal.y=0;\n    Vec2 v=manifold.localPoint;\n    pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n    pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n    Vec2 mp0p=manifold.points[0].localPoint;\n    pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n    pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n    if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n      normal.x=pointB.x - pointA.x;\n      normal.y=pointB.y - pointA.y;\n      normal.normalize();\n    }\n    final float cAx=normal.x * radiusA + pointA.x;\n    final float cAy=normal.y * radiusA + pointA.y;\n    final float cBx=-normal.x * radiusB + pointB.x;\n    final float cBy=-normal.y * radiusB + pointB.y;\n    points[0].x=(cAx + cBx) * .5f;\n    points[0].y=(cAy + cBy) * .5f;\n    separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\nbreak;\ncase FACE_A:{\nfinal Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\nTransform.mulToOut(xfA,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\n  Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n  final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n  final float cAx=normal.x * scalar + clipPoint.x;\n  final float cAy=normal.y * scalar + clipPoint.y;\n  final float cBx=-normal.x * radiusB + clipPoint.x;\n  final float cBy=-normal.y * radiusB + clipPoint.y;\n  points[i].x=(cAx + cBx) * .5f;\n  points[i].y=(cAy + cBy) * .5f;\n  separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n}\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 752,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5445,
        "startLineNumber" : 66,
        "startColumnNumber" : 42,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (manifold.pointCount == 0) {\n    return;\n  }\nswitch (manifold.type) {\ncase CIRCLES:{\n      final Vec2 pointA=pool3;\n      final Vec2 pointB=pool4;\n      normal.x=1;\n      normal.y=0;\n      Vec2 v=manifold.localPoint;\n      pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n      pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n      Vec2 mp0p=manifold.points[0].localPoint;\n      pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n      pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n      if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n        normal.x=pointB.x - pointA.x;\n        normal.y=pointB.y - pointA.y;\n        normal.normalize();\n      }\n      final float cAx=normal.x * radiusA + pointA.x;\n      final float cAy=normal.y * radiusA + pointA.y;\n      final float cBx=-normal.x * radiusB + pointB.x;\n      final float cBy=-normal.y * radiusB + pointB.y;\n      points[0].x=(cAx + cBx) * .5f;\n      points[0].y=(cAy + cBy) * .5f;\n      separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n    }\n  break;\ncase FACE_A:{\n  final Vec2 planePoint=pool3;\n  Rot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\n  Transform.mulToOut(xfA,manifold.localPoint,planePoint);\n  final Vec2 clipPoint=pool4;\n  for (int i=0; i < manifold.pointCount; i++) {\n    Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n    final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n    final float cAx=normal.x * scalar + clipPoint.x;\n    final float cAy=normal.y * scalar + clipPoint.y;\n    final float cBx=-normal.x * radiusB + clipPoint.x;\n    final float cBy=-normal.y * radiusB + clipPoint.y;\n    points[i].x=(cAx + cBx) * .5f;\n    points[i].y=(cAy + cBy) * .5f;\n    separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 761,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5577,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public final void initialize(final Manifold manifold,final Transform xfA,float radiusA,final Transform xfB,float radiusB){\n  if (manifold.pointCount == 0) {\n    return;\n  }\nswitch (manifold.type) {\ncase CIRCLES:{\n      final Vec2 pointA=pool3;\n      final Vec2 pointB=pool4;\n      normal.x=1;\n      normal.y=0;\n      Vec2 v=manifold.localPoint;\n      pointA.x=(xfA.q.c * v.x - xfA.q.s * v.y) + xfA.p.x;\n      pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n      Vec2 mp0p=manifold.points[0].localPoint;\n      pointB.x=(xfB.q.c * mp0p.x - xfB.q.s * mp0p.y) + xfB.p.x;\n      pointB.y=(xfB.q.s * mp0p.x + xfB.q.c * mp0p.y) + xfB.p.y;\n      if (MathUtils.distanceSquared(pointA,pointB) > Settings.EPSILON * Settings.EPSILON) {\n        normal.x=pointB.x - pointA.x;\n        normal.y=pointB.y - pointA.y;\n        normal.normalize();\n      }\n      final float cAx=normal.x * radiusA + pointA.x;\n      final float cAy=normal.y * radiusA + pointA.y;\n      final float cBx=-normal.x * radiusB + pointB.x;\n      final float cBy=-normal.y * radiusB + pointB.y;\n      points[0].x=(cAx + cBx) * .5f;\n      points[0].y=(cAy + cBy) * .5f;\n      separations[0]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n    }\n  break;\ncase FACE_A:{\n  final Vec2 planePoint=pool3;\n  Rot.mulToOutUnsafe(xfA.q,manifold.localNormal,normal);\n  Transform.mulToOut(xfA,manifold.localPoint,planePoint);\n  final Vec2 clipPoint=pool4;\n  for (int i=0; i < manifold.pointCount; i++) {\n    Transform.mulToOut(xfB,manifold.points[i].localPoint,clipPoint);\n    final float scalar=radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\n    final float cAx=normal.x * scalar + clipPoint.x;\n    final float cAy=normal.y * scalar + clipPoint.y;\n    final float cBx=-normal.x * radiusB + clipPoint.x;\n    final float cBy=-normal.y * radiusB + clipPoint.y;\n    points[i].x=(cAx + cBx) * .5f;\n    points[i].y=(cAy + cBy) * .5f;\n    separations[i]=(cBx - cAx) * normal.x + (cBy - cAy) * normal.y;\n  }\n}\nbreak;\ncase FACE_B:final Vec2 planePoint=pool3;\nRot.mulToOutUnsafe(xfB.q,manifold.localNormal,normal);\nTransform.mulToOut(xfB,manifold.localPoint,planePoint);\nfinal Vec2 clipPoint=pool4;\nfor (int i=0; i < manifold.pointCount; i++) {\nTransform.mulToOut(xfA,manifold.points[i].localPoint,clipPoint);\nfinal float scalar=radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y);\nfinal float cBx=normal.x * scalar + clipPoint.x;\nfinal float cBy=normal.y * scalar + clipPoint.y;\nfinal float cAx=-normal.x * radiusA + clipPoint.x;\nfinal float cAy=-normal.y * radiusA + clipPoint.y;\npoints[i].x=(cAx + cBx) * .5f;\npoints[i].y=(cAy + cBy) * .5f;\nseparations[i]=(cAx - cBx) * normal.x + (cAy - cBy) * normal.y;\n}\nnormal.x=-normal.x;\nnormal.y=-normal.y;\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 787,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 61
      },
      "nodeContext" : "pointA.y=(xfA.q.s * v.x + xfA.q.c * v.y) + xfA.p.y;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 30,
    "endLineNumber" : 81,
    "endColumnNumber" : 33
  }, {
    "charLength" : 3,
    "startLineNumber" : 82,
    "startColumnNumber" : 30,
    "endLineNumber" : 82,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}