{
  "id" : 145,
  "expression" : "METHOD_NOT_ALLOWED",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushMessageSender.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "METHOD_NOT_ALLOWED",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 94,
      "startColumnNumber" : 47,
      "endLineNumber" : 94,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 72
      },
      "nodeContext" : "sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 73
      },
      "nodeContext" : "sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 93,
        "startColumnNumber" : 75,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((method != HttpMethod.POST) && (method != HttpMethod.GET)) {\n  sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2214,
        "startLineNumber" : 89,
        "startColumnNumber" : 36,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logPushAttempt();\n  final HttpMethod method=request.method();\n  if ((method != HttpMethod.POST) && (method != HttpMethod.GET)) {\n    sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n    return;\n  }\n  final PushUserAuth userAuth=getPushUserAuth(request);\n  if (!userAuth.isSuccess()) {\n    sendHttpResponse(ctx,request,UNAUTHORIZED,userAuth);\n    logNoIdentity();\n    return;\n  }\n  final PushConnection pushConn=pushConnectionRegistry.get(userAuth.getClientIdentity());\n  if (pushConn == null) {\n    sendHttpResponse(ctx,request,NOT_FOUND,userAuth);\n    logClientNotConnected();\n    return;\n  }\n  if (!verifySecureToken(request,pushConn)) {\n    sendHttpResponse(ctx,request,FORBIDDEN,userAuth);\n    logSecurityTokenVerificationFail();\n    return;\n  }\n  if (method == HttpMethod.GET) {\n    sendHttpResponse(ctx,request,OK,userAuth);\n    return;\n  }\n  final ByteBuf body=request.content().retain();\n  if (body.readableBytes() <= 0) {\n    sendHttpResponse(ctx,request,NO_CONTENT,userAuth);\n    return;\n  }\n  if (pushConn.isRateLimited()) {\n    sendHttpResponse(ctx,request,HttpResponseStatus.SERVICE_UNAVAILABLE,userAuth);\n    logRateLimited();\n    return;\n  }\n  final ChannelFuture clientFuture=pushConn.sendPushMessage(body);\n  clientFuture.addListener(cf -> {\n    HttpResponseStatus status;\n    if (cf.isSuccess()) {\n      logPushSuccess();\n      status=OK;\n    }\n else {\n      logPushError(cf.cause());\n      status=INTERNAL_SERVER_ERROR;\n    }\n    sendHttpResponse(ctx,request,status,userAuth);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2370,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (path.endsWith(\"/push\")) {\n  logPushAttempt();\n  final HttpMethod method=request.method();\n  if ((method != HttpMethod.POST) && (method != HttpMethod.GET)) {\n    sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n    return;\n  }\n  final PushUserAuth userAuth=getPushUserAuth(request);\n  if (!userAuth.isSuccess()) {\n    sendHttpResponse(ctx,request,UNAUTHORIZED,userAuth);\n    logNoIdentity();\n    return;\n  }\n  final PushConnection pushConn=pushConnectionRegistry.get(userAuth.getClientIdentity());\n  if (pushConn == null) {\n    sendHttpResponse(ctx,request,NOT_FOUND,userAuth);\n    logClientNotConnected();\n    return;\n  }\n  if (!verifySecureToken(request,pushConn)) {\n    sendHttpResponse(ctx,request,FORBIDDEN,userAuth);\n    logSecurityTokenVerificationFail();\n    return;\n  }\n  if (method == HttpMethod.GET) {\n    sendHttpResponse(ctx,request,OK,userAuth);\n    return;\n  }\n  final ByteBuf body=request.content().retain();\n  if (body.readableBytes() <= 0) {\n    sendHttpResponse(ctx,request,NO_CONTENT,userAuth);\n    return;\n  }\n  if (pushConn.isRateLimited()) {\n    sendHttpResponse(ctx,request,HttpResponseStatus.SERVICE_UNAVAILABLE,userAuth);\n    logRateLimited();\n    return;\n  }\n  final ChannelFuture clientFuture=pushConn.sendPushMessage(body);\n  clientFuture.addListener(cf -> {\n    HttpResponseStatus status;\n    if (cf.isSuccess()) {\n      logPushSuccess();\n      status=OK;\n    }\n else {\n      logPushError(cf.cause());\n      status=INTERNAL_SERVER_ERROR;\n    }\n    sendHttpResponse(ctx,request,status,userAuth);\n  }\n);\n}\n else {\n  sendHttpResponse(ctx,request,BAD_REQUEST,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 233,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2697,
        "startLineNumber" : 77,
        "startColumnNumber" : 113,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!request.decoderResult().isSuccess()) {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n    return;\n  }\n  final String path=request.uri();\n  if (path == null) {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n    return;\n  }\n  if (path.endsWith(\"/push\")) {\n    logPushAttempt();\n    final HttpMethod method=request.method();\n    if ((method != HttpMethod.POST) && (method != HttpMethod.GET)) {\n      sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n      return;\n    }\n    final PushUserAuth userAuth=getPushUserAuth(request);\n    if (!userAuth.isSuccess()) {\n      sendHttpResponse(ctx,request,UNAUTHORIZED,userAuth);\n      logNoIdentity();\n      return;\n    }\n    final PushConnection pushConn=pushConnectionRegistry.get(userAuth.getClientIdentity());\n    if (pushConn == null) {\n      sendHttpResponse(ctx,request,NOT_FOUND,userAuth);\n      logClientNotConnected();\n      return;\n    }\n    if (!verifySecureToken(request,pushConn)) {\n      sendHttpResponse(ctx,request,FORBIDDEN,userAuth);\n      logSecurityTokenVerificationFail();\n      return;\n    }\n    if (method == HttpMethod.GET) {\n      sendHttpResponse(ctx,request,OK,userAuth);\n      return;\n    }\n    final ByteBuf body=request.content().retain();\n    if (body.readableBytes() <= 0) {\n      sendHttpResponse(ctx,request,NO_CONTENT,userAuth);\n      return;\n    }\n    if (pushConn.isRateLimited()) {\n      sendHttpResponse(ctx,request,HttpResponseStatus.SERVICE_UNAVAILABLE,userAuth);\n      logRateLimited();\n      return;\n    }\n    final ChannelFuture clientFuture=pushConn.sendPushMessage(body);\n    clientFuture.addListener(cf -> {\n      HttpResponseStatus status;\n      if (cf.isSuccess()) {\n        logPushSuccess();\n        status=OK;\n      }\n else {\n        logPushError(cf.cause());\n        status=INTERNAL_SERVER_ERROR;\n      }\n      sendHttpResponse(ctx,request,status,userAuth);\n    }\n);\n  }\n else {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2820,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void channelRead0(final ChannelHandlerContext ctx,final FullHttpRequest request) throws Exception {\n  if (!request.decoderResult().isSuccess()) {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n    return;\n  }\n  final String path=request.uri();\n  if (path == null) {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n    return;\n  }\n  if (path.endsWith(\"/push\")) {\n    logPushAttempt();\n    final HttpMethod method=request.method();\n    if ((method != HttpMethod.POST) && (method != HttpMethod.GET)) {\n      sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n      return;\n    }\n    final PushUserAuth userAuth=getPushUserAuth(request);\n    if (!userAuth.isSuccess()) {\n      sendHttpResponse(ctx,request,UNAUTHORIZED,userAuth);\n      logNoIdentity();\n      return;\n    }\n    final PushConnection pushConn=pushConnectionRegistry.get(userAuth.getClientIdentity());\n    if (pushConn == null) {\n      sendHttpResponse(ctx,request,NOT_FOUND,userAuth);\n      logClientNotConnected();\n      return;\n    }\n    if (!verifySecureToken(request,pushConn)) {\n      sendHttpResponse(ctx,request,FORBIDDEN,userAuth);\n      logSecurityTokenVerificationFail();\n      return;\n    }\n    if (method == HttpMethod.GET) {\n      sendHttpResponse(ctx,request,OK,userAuth);\n      return;\n    }\n    final ByteBuf body=request.content().retain();\n    if (body.readableBytes() <= 0) {\n      sendHttpResponse(ctx,request,NO_CONTENT,userAuth);\n      return;\n    }\n    if (pushConn.isRateLimited()) {\n      sendHttpResponse(ctx,request,HttpResponseStatus.SERVICE_UNAVAILABLE,userAuth);\n      logRateLimited();\n      return;\n    }\n    final ChannelFuture clientFuture=pushConn.sendPushMessage(body);\n    clientFuture.addListener(cf -> {\n      HttpResponseStatus status;\n      if (cf.isSuccess()) {\n        logPushSuccess();\n        status=OK;\n      }\n else {\n        logPushError(cf.cause());\n        status=INTERNAL_SERVER_ERROR;\n      }\n      sendHttpResponse(ctx,request,status,userAuth);\n    }\n);\n  }\n else {\n    sendHttpResponse(ctx,request,BAD_REQUEST,null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 73
      },
      "nodeContext" : "sendHttpResponse(ctx,request,METHOD_NOT_ALLOWED,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 94,
    "startColumnNumber" : 47,
    "endLineNumber" : 94,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}