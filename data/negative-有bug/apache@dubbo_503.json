{
  "id" : 503,
  "expression" : "ReflectUtils.getCodeBase(exception.getClass())",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ReflectUtils.getCodeBase(exception.getClass())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 83,
      "startColumnNumber" : 39,
      "endLineNumber" : 83,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 83,
        "startColumnNumber" : 23,
        "endLineNumber" : 83,
        "endColumnNumber" : 85
      },
      "nodeContext" : "exceptionFile=ReflectUtils.getCodeBase(exception.getClass())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 86
      },
      "nodeContext" : "String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2385,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Throwable exception=appResponse.getException();\n  if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n    return;\n  }\n  try {\n    Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n    Class<?>[] exceptionClassses=method.getExceptionTypes();\n    for (    Class<?> exceptionClass : exceptionClassses) {\n      if (exception.getClass().equals(exceptionClass)) {\n        return;\n      }\n    }\n  }\n catch (  NoSuchMethodException e) {\n    return;\n  }\n  logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n  String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n  String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n  if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n    return;\n  }\n  String className=exception.getClass().getName();\n  if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n    return;\n  }\n  if (exception instanceof RpcException) {\n    return;\n  }\n  appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2711,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Throwable exception=appResponse.getException();\n  if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n    return;\n  }\n  try {\n    Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n    Class<?>[] exceptionClassses=method.getExceptionTypes();\n    for (    Class<?> exceptionClass : exceptionClassses) {\n      if (exception.getClass().equals(exceptionClass)) {\n        return;\n      }\n    }\n  }\n catch (  NoSuchMethodException e) {\n    return;\n  }\n  logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n  String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n  String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n  if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n    return;\n  }\n  String className=exception.getClass().getName();\n  if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n    return;\n  }\n  if (exception instanceof RpcException) {\n    return;\n  }\n  appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n}\n catch (Throwable e) {\n  logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ e.getClass().getName()+ \": \"+ e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 57,
        "startColumnNumber" : 90,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Throwable exception=appResponse.getException();\n    if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n      return;\n    }\n    try {\n      Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n      Class<?>[] exceptionClassses=method.getExceptionTypes();\n      for (      Class<?> exceptionClass : exceptionClassses) {\n        if (exception.getClass().equals(exceptionClass)) {\n          return;\n        }\n      }\n    }\n catch (    NoSuchMethodException e) {\n      return;\n    }\n    logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n    String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n    String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n    if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n      return;\n    }\n    String className=exception.getClass().getName();\n    if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n      return;\n    }\n    if (exception instanceof RpcException) {\n      return;\n    }\n    appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n  }\n catch (  Throwable e) {\n    logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ e.getClass().getName()+ \": \"+ e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2817,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (appResponse.hasException() && GenericService.class != invoker.getInterface()) {\n  try {\n    Throwable exception=appResponse.getException();\n    if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n      return;\n    }\n    try {\n      Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n      Class<?>[] exceptionClassses=method.getExceptionTypes();\n      for (      Class<?> exceptionClass : exceptionClassses) {\n        if (exception.getClass().equals(exceptionClass)) {\n          return;\n        }\n      }\n    }\n catch (    NoSuchMethodException e) {\n      return;\n    }\n    logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n    String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n    String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n    if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n      return;\n    }\n    String className=exception.getClass().getName();\n    if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n      return;\n    }\n    if (exception instanceof RpcException) {\n      return;\n    }\n    appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n  }\n catch (  Throwable e) {\n    logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ e.getClass().getName()+ \": \"+ e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 240,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 56,
        "startColumnNumber" : 90,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (appResponse.hasException() && GenericService.class != invoker.getInterface()) {\n    try {\n      Throwable exception=appResponse.getException();\n      if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n        return;\n      }\n      try {\n        Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n        Class<?>[] exceptionClassses=method.getExceptionTypes();\n        for (        Class<?> exceptionClass : exceptionClassses) {\n          if (exception.getClass().equals(exceptionClass)) {\n            return;\n          }\n        }\n      }\n catch (      NoSuchMethodException e) {\n        return;\n      }\n      logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n      String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n      String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n      if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n        return;\n      }\n      String className=exception.getClass().getName();\n      if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n        return;\n      }\n      if (exception instanceof RpcException) {\n        return;\n      }\n      appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n    }\n catch (    Throwable e) {\n      logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ e.getClass().getName()+ \": \"+ e.getMessage(),e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2933,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onResponse(Result appResponse,Invoker<?> invoker,Invocation invocation){\n  if (appResponse.hasException() && GenericService.class != invoker.getInterface()) {\n    try {\n      Throwable exception=appResponse.getException();\n      if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n        return;\n      }\n      try {\n        Method method=invoker.getInterface().getMethod(invocation.getMethodName(),invocation.getParameterTypes());\n        Class<?>[] exceptionClassses=method.getExceptionTypes();\n        for (        Class<?> exceptionClass : exceptionClassses) {\n          if (exception.getClass().equals(exceptionClass)) {\n            return;\n          }\n        }\n      }\n catch (      NoSuchMethodException e) {\n        return;\n      }\n      logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ exception.getClass().getName()+ \": \"+ exception.getMessage(),exception);\n      String serviceFile=ReflectUtils.getCodeBase(invoker.getInterface());\n      String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n      if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n        return;\n      }\n      String className=exception.getClass().getName();\n      if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n        return;\n      }\n      if (exception instanceof RpcException) {\n        return;\n      }\n      appResponse.setException(new RuntimeException(StringUtils.toString(exception)));\n    }\n catch (    Throwable e) {\n      logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getServiceContext().getRemoteHost() + \". service: \"+ invoker.getInterface().getName()+ \", method: \"+ invocation.getMethodName()+ \", exception: \"+ e.getClass().getName()+ \": \"+ e.getMessage(),e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 86
      },
      "nodeContext" : "String exceptionFile=ReflectUtils.getCodeBase(exception.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 83,
    "startColumnNumber" : 39,
    "endLineNumber" : 83,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}