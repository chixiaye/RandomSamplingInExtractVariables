{
  "id" : 431,
  "expression" : "0x180",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Debug/Debugger/src/test/java/ghidra/app/plugin/core/debug/gui/modules/DebuggerStaticMappingProviderTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0x180",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 168,
      "startColumnNumber" : 37,
      "endLineNumber" : 168,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 168,
        "startColumnNumber" : 24,
        "endLineNumber" : 168,
        "endColumnNumber" : 42
      },
      "nodeContext" : "0xdeadbeef + 0x180",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 168,
        "startColumnNumber" : 15,
        "endLineNumber" : 168,
        "endColumnNumber" : 63
      },
      "nodeContext" : "tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 168,
        "startColumnNumber" : 3,
        "endLineNumber" : 169,
        "endColumnNumber" : 43
      },
      "nodeContext" : "manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 168,
        "startColumnNumber" : 3,
        "endLineNumber" : 169,
        "endColumnNumber" : 44
      },
      "nodeContext" : "manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 163,
        "startColumnNumber" : 56,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n  manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n  manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 163,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try (UndoableTransaction tid=tb.startTransaction()){\n  manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n  manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n  manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1767,
        "startLineNumber" : 159,
        "startColumnNumber" : 76,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1850,
        "startLineNumber" : 158,
        "startColumnNumber" : 1,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRemoveActionRemovesFromProviderAndTrace() throws Exception {\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 168,
        "startColumnNumber" : 15,
        "endLineNumber" : 168,
        "endColumnNumber" : 63
      },
      "nodeContext" : "tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0x180",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 189,
      "startColumnNumber" : 36,
      "endLineNumber" : 189,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 189,
        "startColumnNumber" : 23,
        "endLineNumber" : 189,
        "endColumnNumber" : 41
      },
      "nodeContext" : "0xdeadbeef + 0x180",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 189,
        "startColumnNumber" : 15,
        "endLineNumber" : 189,
        "endColumnNumber" : 42
      },
      "nodeContext" : "tb.addr(0xdeadbeef + 0x180)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1767,
        "startLineNumber" : 159,
        "startColumnNumber" : 76,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1850,
        "startLineNumber" : 158,
        "startColumnNumber" : 1,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRemoveActionRemovesFromProviderAndTrace() throws Exception {\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0x180",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 195,
      "startColumnNumber" : 36,
      "endLineNumber" : 195,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 195,
        "startColumnNumber" : 23,
        "endLineNumber" : 195,
        "endColumnNumber" : 41
      },
      "nodeContext" : "0xdeadbeef + 0x180",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 195,
        "startColumnNumber" : 15,
        "endLineNumber" : 195,
        "endColumnNumber" : 42
      },
      "nodeContext" : "tb.addr(0xdeadbeef + 0x180)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 195,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 195,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1767,
        "startLineNumber" : 159,
        "startColumnNumber" : 76,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1850,
        "startLineNumber" : 158,
        "startColumnNumber" : 1,
        "endLineNumber" : 197,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRemoveActionRemovesFromProviderAndTrace() throws Exception {\n  traceManager.openTrace(tb.trace);\n  traceManager.activateTrace(tb.trace);\n  try (UndoableTransaction tid=tb.startTransaction()){\n    manager.add(tb.range(0xdeadbeef,0xdeadbeef + 0xff),Range.atLeast(0L),new URL(\"ghidra://static\"),\"DEADBEEF\");\n    manager.add(tb.range(0xdeadbeef + 0x100,0xdeadbeef + 0x17f),Range.atLeast(0L),new URL(\"ghidra://static\"),\"C0DE1234\");\n    manager.add(tb.range(0xdeadbeef + 0x180,0xdeadbeef + 0x1bf),Range.atLeast(0L),new URL(\"ghidra://static\"),\"1E55C0DE\");\n  }\n   waitForDomainObject(tb.trace);\n  waitForPass(() -> assertEquals(3,mappingsProvider.mappingTable.getRowCount()));\n  List<StaticMappingRow> mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(3,mappingsDisplayed.size());\n  mappingsProvider.mappingTable.getSelectionModel().setSelectionInterval(0,1);\n  performAction(mappingsProvider.actionRemove);\n  waitForDomainObject(tb.trace);\n  mappingsDisplayed=mappingsProvider.mappingTableModel.getModelData();\n  assertEquals(1,mappingsDisplayed.size());\n  StaticMappingRow record=mappingsDisplayed.get(0);\n  assertEquals(tb.addr(0xdeadbeef + 0x180),record.getTraceAddress());\n  Iterator<? extends TraceStaticMapping> it=manager.getAllEntries().iterator();\n  assertTrue(it.hasNext());\n  TraceStaticMapping entry=it.next();\n  assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n  assertFalse(it.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 195,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(tb.addr(0xdeadbeef + 0x180),entry.getMinTraceAddress());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 168,
    "startColumnNumber" : 37,
    "endLineNumber" : 168,
    "endColumnNumber" : 42
  }, {
    "charLength" : 5,
    "startLineNumber" : 189,
    "startColumnNumber" : 36,
    "endLineNumber" : 189,
    "endColumnNumber" : 41
  }, {
    "charLength" : 5,
    "startLineNumber" : 195,
    "startColumnNumber" : 36,
    "endLineNumber" : 195,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}