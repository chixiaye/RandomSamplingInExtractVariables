{
  "id" : 67,
  "expression" : "System",
  "projectName" : "greenrobot@greenDAO",
  "commitID" : "bdaad7806db3e4db0ec5cc73835576e0aa9067a0",
  "filePath" : "/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 90,
      "startColumnNumber" : 12,
      "endLineNumber" : 90,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 23
      },
      "nodeContext" : "System.gc()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "System.gc();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 88,
        "startColumnNumber" : 57,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DaoLog.d(\"Queries left after \" + i + \". GC: \"+ map.size());\n  System.gc();\n  gcMethod.invoke(queryData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; map.size() > 1 && i < 1000; i++) {\n  DaoLog.d(\"Queries left after \" + i + \". GC: \"+ map.size());\n  System.gc();\n  gcMethod.invoke(queryData);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 60,
        "startColumnNumber" : 79,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1) {\n    DaoLog.i(\"testGetForCurrentThread_ManyThreadsDontLeak does not work on API level \" + VERSION.SDK_INT);\n    return;\n  }\n  QueryBuilder<TestEntity> builder=dao.queryBuilder().where(Properties.SimpleInteger.eq(\"dummy\"));\n  final Query<TestEntity> query=builder.build();\n  for (int i=1; i <= LEAK_TEST_ITERATIONS; i++) {\n    Thread thread=new Thread(){\n      public void run(){\n        query.forCurrentThread();\n      }\n    }\n;\n    thread.start();\n    if (i % 10 == 0) {\n      thread.join();\n    }\n  }\n  Field queryDataField=Query.class.getDeclaredField(\"queryData\");\n  queryDataField.setAccessible(true);\n  Object queryData=queryDataField.get(query);\n  Class<?> dataSuperclass=queryData.getClass().getSuperclass();\n  Field mapField=dataSuperclass.getDeclaredField(\"queriesForThreads\");\n  mapField.setAccessible(true);\n  Method gcMethod=dataSuperclass.getDeclaredMethod(\"gc\");\n  gcMethod.setAccessible(true);\n  Map map=(Map)mapField.get(queryData);\n  for (int i=0; map.size() > 1 && i < 1000; i++) {\n    DaoLog.d(\"Queries left after \" + i + \". GC: \"+ map.size());\n    System.gc();\n    gcMethod.invoke(queryData);\n  }\n  assertEquals(1,map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1574,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testGetForCurrentThread_ManyThreadsDontLeak() throws Exception {\n  if (VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1) {\n    DaoLog.i(\"testGetForCurrentThread_ManyThreadsDontLeak does not work on API level \" + VERSION.SDK_INT);\n    return;\n  }\n  QueryBuilder<TestEntity> builder=dao.queryBuilder().where(Properties.SimpleInteger.eq(\"dummy\"));\n  final Query<TestEntity> query=builder.build();\n  for (int i=1; i <= LEAK_TEST_ITERATIONS; i++) {\n    Thread thread=new Thread(){\n      public void run(){\n        query.forCurrentThread();\n      }\n    }\n;\n    thread.start();\n    if (i % 10 == 0) {\n      thread.join();\n    }\n  }\n  Field queryDataField=Query.class.getDeclaredField(\"queryData\");\n  queryDataField.setAccessible(true);\n  Object queryData=queryDataField.get(query);\n  Class<?> dataSuperclass=queryData.getClass().getSuperclass();\n  Field mapField=dataSuperclass.getDeclaredField(\"queriesForThreads\");\n  mapField.setAccessible(true);\n  Method gcMethod=dataSuperclass.getDeclaredMethod(\"gc\");\n  gcMethod.setAccessible(true);\n  Map map=(Map)mapField.get(queryData);\n  for (int i=0; map.size() > 1 && i < 1000; i++) {\n    DaoLog.d(\"Queries left after \" + i + \". GC: \"+ map.size());\n    System.gc();\n    gcMethod.invoke(queryData);\n  }\n  assertEquals(1,map.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "System.gc();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.System"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 90,
    "startColumnNumber" : 12,
    "endLineNumber" : 90,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}