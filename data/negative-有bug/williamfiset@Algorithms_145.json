{
  "id" : 145,
  "expression" : "mod",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/ModPow.java",
  "occurrences" : 15,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 58,
      "startColumnNumber" : 8,
      "endLineNumber" : 58,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 16
      },
      "nodeContext" : "mod <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (mod <= 0) throw new ArithmeticException(\"mod must be > 0\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (mod <= 0) throw new ArithmeticException(\"mod must be > 0\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 59,
      "startColumnNumber" : 19,
      "endLineNumber" : 59,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 59,
        "startColumnNumber" : 19,
        "endLineNumber" : 59,
        "endColumnNumber" : 28
      },
      "nodeContext" : "mod > MAX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 28
      },
      "nodeContext" : "a > MAX || mod > MAX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 96
      },
      "nodeContext" : "if (a > MAX || mod > MAX) throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 28
      },
      "nodeContext" : "a > MAX || mod > MAX",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 61,
      "startColumnNumber" : 19,
      "endLineNumber" : 61,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 61,
        "startColumnNumber" : 19,
        "endLineNumber" : 61,
        "endColumnNumber" : 28
      },
      "nodeContext" : "mod < MIN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 28
      },
      "nodeContext" : "a < MIN || mod < MIN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "if (a < MIN || mod < MIN) throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 28
      },
      "nodeContext" : "a < MIN || mod < MIN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 67,
      "startColumnNumber" : 17,
      "endLineNumber" : 67,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 21
      },
      "nodeContext" : "gcd(a,mod)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 26
      },
      "nodeContext" : "gcd(a,mod) != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 67,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 81
      },
      "nodeContext" : "if (gcd(a,mod) != 1) throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (n < 0) {\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 26
      },
      "nodeContext" : "gcd(a,mod) != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 69,
      "startColumnNumber" : 30,
      "endLineNumber" : 69,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 69,
        "startColumnNumber" : 20,
        "endLineNumber" : 69,
        "endColumnNumber" : 34
      },
      "nodeContext" : "modInv(a,mod)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 69,
        "startColumnNumber" : 13,
        "endLineNumber" : 69,
        "endColumnNumber" : 44
      },
      "nodeContext" : "modPow(modInv(a,mod),-n,mod)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return modPow(modInv(a,mod),-n,mod);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (n < 0) {\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return modPow(modInv(a,mod),-n,mod);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 69,
      "startColumnNumber" : 40,
      "endLineNumber" : 69,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 69,
        "startColumnNumber" : 13,
        "endLineNumber" : 69,
        "endColumnNumber" : 44
      },
      "nodeContext" : "modPow(modInv(a,mod),-n,mod)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return modPow(modInv(a,mod),-n,mod);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (n < 0) {\n  if (gcd(a,mod) != 1)   throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n  return modPow(modInv(a,mod),-n,mod);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return modPow(modInv(a,mod),-n,mod);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 24,
      "endLineNumber" : 78,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 78,
        "startColumnNumber" : 14,
        "endLineNumber" : 78,
        "endColumnNumber" : 27
      },
      "nodeContext" : "(r * p) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 78,
        "startColumnNumber" : 13,
        "endLineNumber" : 78,
        "endColumnNumber" : 28
      },
      "nodeContext" : "((r * p) % mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 78,
        "startColumnNumber" : 13,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r * p) % mod) + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(((r * p) % mod) + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(((r * p) % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if ((n & mask) == mask) {\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 31,
      "endLineNumber" : 78,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 78,
        "startColumnNumber" : 13,
        "endLineNumber" : 78,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r * p) % mod) + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 35
      },
      "nodeContext" : "(((r * p) % mod) + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(((r * p) % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if ((n & mask) == mask) {\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 38,
      "endLineNumber" : 78,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(((r * p) % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if ((n & mask) == mask) {\n  r=(((r * p) % mod) + mod) % mod;\n  n-=mask;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 42
      },
      "nodeContext" : "r=(((r * p) % mod) + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 21,
      "endLineNumber" : 81,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 81,
        "startColumnNumber" : 11,
        "endLineNumber" : 81,
        "endColumnNumber" : 24
      },
      "nodeContext" : "(p * p) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 81,
        "startColumnNumber" : 11,
        "endLineNumber" : 81,
        "endColumnNumber" : 30
      },
      "nodeContext" : "(p * p) % mod + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 31
      },
      "nodeContext" : "((p * p) % mod + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "((p * p) % mod + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 27,
      "endLineNumber" : 81,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 81,
        "startColumnNumber" : 11,
        "endLineNumber" : 81,
        "endColumnNumber" : 30
      },
      "nodeContext" : "(p * p) % mod + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 31
      },
      "nodeContext" : "((p * p) % mod + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "((p * p) % mod + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 34,
      "endLineNumber" : 81,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "((p * p) % mod + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 75,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long i=0; n != 0; i++) {\n  long mask=1L << i;\n  if ((n & mask) == mask) {\n    r=(((r * p) % mod) + mod) % mod;\n    n-=mask;\n  }\n  p=((p * p) % mod + mod) % mod;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p=((p * p) % mod + mod) % mod;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 84,
      "startColumnNumber" : 17,
      "endLineNumber" : 84,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 84,
        "startColumnNumber" : 13,
        "endLineNumber" : 84,
        "endColumnNumber" : 20
      },
      "nodeContext" : "r % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "(r % mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 27
      },
      "nodeContext" : "(r % mod) + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 28
      },
      "nodeContext" : "((r % mod) + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 84,
      "startColumnNumber" : 24,
      "endLineNumber" : 84,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 27
      },
      "nodeContext" : "(r % mod) + mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 28
      },
      "nodeContext" : "((r % mod) + mod)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "mod",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 84,
      "startColumnNumber" : 31,
      "endLineNumber" : 84,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 34
      },
      "nodeContext" : "((r % mod) + mod) % mod",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 56,
        "startColumnNumber" : 54,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long modPow(long a,long n,long mod){\n  if (mod <= 0)   throw new ArithmeticException(\"mod must be > 0\");\n  if (a > MAX || mod > MAX)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too high!\");\n  if (a < MIN || mod < MIN)   throw new IllegalArgumentException(\"Long overflow is upon you, mod or base is too low!\");\n  if (n < 0) {\n    if (gcd(a,mod) != 1)     throw new ArithmeticException(\"If n < 0 then must have gcd(a, mod) = 1\");\n    return modPow(modInv(a,mod),-n,mod);\n  }\n  if (n == 0L)   return 1L;\n  long p=a, r=1L;\n  for (long i=0; n != 0; i++) {\n    long mask=1L << i;\n    if ((n & mask) == mask) {\n      r=(((r * p) % mod) + mod) % mod;\n      n-=mask;\n    }\n    p=((p * p) % mod + mod) % mod;\n  }\n  return ((r % mod) + mod) % mod;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return ((r % mod) + mod) % mod;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 58,
    "startColumnNumber" : 8,
    "endLineNumber" : 58,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 59,
    "startColumnNumber" : 19,
    "endLineNumber" : 59,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 61,
    "startColumnNumber" : 19,
    "endLineNumber" : 61,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 67,
    "startColumnNumber" : 17,
    "endLineNumber" : 67,
    "endColumnNumber" : 20
  }, {
    "charLength" : 3,
    "startLineNumber" : 69,
    "startColumnNumber" : 30,
    "endLineNumber" : 69,
    "endColumnNumber" : 33
  }, {
    "charLength" : 3,
    "startLineNumber" : 69,
    "startColumnNumber" : 40,
    "endLineNumber" : 69,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 24,
    "endLineNumber" : 78,
    "endColumnNumber" : 27
  }, {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 31,
    "endLineNumber" : 78,
    "endColumnNumber" : 34
  }, {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 38,
    "endLineNumber" : 78,
    "endColumnNumber" : 41
  }, {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 21,
    "endLineNumber" : 81,
    "endColumnNumber" : 24
  }, {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 27,
    "endLineNumber" : 81,
    "endColumnNumber" : 30
  }, {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 34,
    "endLineNumber" : 81,
    "endColumnNumber" : 37
  }, {
    "charLength" : 3,
    "startLineNumber" : 84,
    "startColumnNumber" : 17,
    "endLineNumber" : 84,
    "endColumnNumber" : 20
  }, {
    "charLength" : 3,
    "startLineNumber" : 84,
    "startColumnNumber" : 24,
    "endLineNumber" : 84,
    "endColumnNumber" : 27
  }, {
    "charLength" : 3,
    "startLineNumber" : 84,
    "startColumnNumber" : 31,
    "endLineNumber" : 84,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 0
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 0
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 0
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 0
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 0
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 0
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 0
  } ]
}