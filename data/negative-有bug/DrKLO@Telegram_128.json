{
  "id" : 128,
  "expression" : "pointerUp",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/GestureDetector2.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pointerUp",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 211,
      "startColumnNumber" : 30,
      "endLineNumber" : 211,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 211,
        "startColumnNumber" : 30,
        "endLineNumber" : 211,
        "endColumnNumber" : 66
      },
      "nodeContext" : "pointerUp ? ev.getActionIndex() : -1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 211,
        "startColumnNumber" : 18,
        "endLineNumber" : 211,
        "endColumnNumber" : 66
      },
      "nodeContext" : "skipIndex=pointerUp ? ev.getActionIndex() : -1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9508,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int action=ev.getAction();\n  if (mCurrentMotionEvent != null) {\n    mCurrentMotionEvent.recycle();\n  }\n  mCurrentMotionEvent=MotionEvent.obtain(ev);\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\n  final boolean pointerUp=(action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_UP;\n  final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n  float sumX=0, sumY=0;\n  final int count=ev.getPointerCount();\n  for (int i=0; i < count; i++) {\n    if (skipIndex == i)     continue;\n    sumX+=ev.getX(i);\n    sumY+=ev.getY(i);\n  }\n  final int div=pointerUp ? count - 1 : count;\n  final float focusX=sumX / div;\n  final float focusY=sumY / div;\n  boolean handled=false;\nswitch (action & MotionEvent.ACTION_MASK) {\ncase MotionEvent.ACTION_POINTER_DOWN:    mDownFocusX=mLastFocusX=focusX;\n  mDownFocusY=mLastFocusY=focusY;\ncancelTaps();\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:mDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nmVelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal int upIndex=ev.getActionIndex();\nfinal int id1=ev.getPointerId(upIndex);\nfinal float x1=mVelocityTracker.getXVelocity(id1);\nfinal float y1=mVelocityTracker.getYVelocity(id1);\nfor (int i=0; i < count; i++) {\nif (i == upIndex) continue;\nfinal int id2=ev.getPointerId(i);\nfinal float x=x1 * mVelocityTracker.getXVelocity(id2);\nfinal float y=y1 * mVelocityTracker.getYVelocity(id2);\nfinal float dot=x + y;\nif (dot < 0) {\nmVelocityTracker.clear();\nbreak;\n}\n}\nbreak;\ncase MotionEvent.ACTION_DOWN:mDeferConfirmSingleTap=false;\nif (mDoubleTapListener != null) {\nif (mDoubleTapListener.canDoubleTap(ev)) {\nboolean hadTapMessage=mHandler.hasMessages(TAP);\nif (hadTapMessage) mHandler.removeMessages(TAP);\nif ((mCurrentDownEvent != null) && (mPreviousUpEvent != null) && hadTapMessage&& isConsideredDoubleTap(mCurrentDownEvent,mPreviousUpEvent,ev)) {\nmIsDoubleTapping=true;\nhandled|=mDoubleTapListener.onDoubleTap(mCurrentDownEvent);\nhandled|=mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else {\nmHandler.sendEmptyMessageDelayed(TAP,DOUBLE_TAP_TIMEOUT);\n}\n}\n else {\nmDeferConfirmSingleTap=true;\n}\n}\nmDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nif (mCurrentDownEvent != null) {\nmCurrentDownEvent.recycle();\n}\nmCurrentDownEvent=MotionEvent.obtain(ev);\nmAlwaysInTapRegion=true;\nmAlwaysInBiggerTapRegion=true;\nmStillDown=true;\nmInLongPress=false;\nif (mIsLongpressEnabled) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),mCurrentDownEvent.getDownTime() + ViewConfiguration.getLongPressTimeout());\n}\nmHandler.sendEmptyMessageAtTime(SHOW_PRESS,mCurrentDownEvent.getDownTime() + TAP_TIMEOUT);\nhandled|=mListener.onDown(ev);\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInLongPress || mInContextClick) {\nbreak;\n}\nfinal int motionClassification=Build.VERSION.SDK_INT >= 29 ? ev.getClassification() : 0;\nfinal boolean hasPendingLongPress=mHandler.hasMessages(LONG_PRESS);\nfinal float scrollX=mLastFocusX - focusX;\nfinal float scrollY=mLastFocusY - focusY;\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mAlwaysInTapRegion) {\nfinal int deltaX=(int)(focusX - mDownFocusX);\nfinal int deltaY=(int)(focusY - mDownFocusY);\nint distance=(deltaX * deltaX) + (deltaY * deltaY);\nint slopSquare=mTouchSlopSquare;\nfinal boolean ambiguousGesture=Build.VERSION.SDK_INT >= 29 && motionClassification == MotionEvent.CLASSIFICATION_AMBIGUOUS_GESTURE;\nfinal boolean shouldInhibitDefaultAction=hasPendingLongPress && ambiguousGesture;\nif (shouldInhibitDefaultAction) {\nfinal float multiplier=2f;\nif (distance > slopSquare) {\nmHandler.removeMessages(LONG_PRESS);\nfinal long longPressTimeout=ViewConfiguration.getLongPressTimeout();\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),ev.getDownTime() + (long)(longPressTimeout * multiplier));\n}\nslopSquare*=multiplier * multiplier;\n}\nif (distance > slopSquare) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\nmAlwaysInTapRegion=false;\nmHandler.removeMessages(TAP);\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\n}\nint doubleTapSlopSquare=mDoubleTapTouchSlopSquare;\nif (distance > doubleTapSlopSquare) {\nmAlwaysInBiggerTapRegion=false;\n}\n}\n else if ((Math.abs(scrollX) >= 1) || (Math.abs(scrollY) >= 1)) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\n}\nif (Build.VERSION.SDK_INT >= 29) {\nfinal boolean deepPress=motionClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS;\nif (deepPress && hasPendingLongPress) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessage(mHandler.obtainMessage(LONG_PRESS,0,0));\n}\n}\nbreak;\ncase MotionEvent.ACTION_UP:mStillDown=false;\nmListener.onUp(ev);\nMotionEvent currentUpEvent=MotionEvent.obtain(ev);\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mInLongPress) {\nmHandler.removeMessages(TAP);\nmInLongPress=false;\n}\n else if (mAlwaysInTapRegion && !mIgnoreNextUpEvent) {\nhandled=mListener.onSingleTapUp(ev);\nif (mDeferConfirmSingleTap && mDoubleTapListener != null) {\nmDoubleTapListener.onSingleTapConfirmed(ev);\n}\n}\n else if (!mIgnoreNextUpEvent) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nfinal int pointerId=ev.getPointerId(0);\nvelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal float velocityY=velocityTracker.getYVelocity(pointerId);\nfinal float velocityX=velocityTracker.getXVelocity(pointerId);\nif ((Math.abs(velocityY) > mMinimumFlingVelocity) || (Math.abs(velocityX) > mMinimumFlingVelocity)) {\nhandled=mListener.onFling(mCurrentDownEvent,ev,velocityX,velocityY);\n}\n}\nif (mPreviousUpEvent != null) {\nmPreviousUpEvent.recycle();\n}\nmPreviousUpEvent=currentUpEvent;\nif (mVelocityTracker != null) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nmIsDoubleTapping=false;\nmDeferConfirmSingleTap=false;\nmIgnoreNextUpEvent=false;\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\nbreak;\ncase MotionEvent.ACTION_CANCEL:cancel();\nbreak;\n}\nreturn handled;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 987,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9552,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean onTouchEvent(MotionEvent ev){\n  final int action=ev.getAction();\n  if (mCurrentMotionEvent != null) {\n    mCurrentMotionEvent.recycle();\n  }\n  mCurrentMotionEvent=MotionEvent.obtain(ev);\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\n  final boolean pointerUp=(action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_UP;\n  final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n  float sumX=0, sumY=0;\n  final int count=ev.getPointerCount();\n  for (int i=0; i < count; i++) {\n    if (skipIndex == i)     continue;\n    sumX+=ev.getX(i);\n    sumY+=ev.getY(i);\n  }\n  final int div=pointerUp ? count - 1 : count;\n  final float focusX=sumX / div;\n  final float focusY=sumY / div;\n  boolean handled=false;\nswitch (action & MotionEvent.ACTION_MASK) {\ncase MotionEvent.ACTION_POINTER_DOWN:    mDownFocusX=mLastFocusX=focusX;\n  mDownFocusY=mLastFocusY=focusY;\ncancelTaps();\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:mDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nmVelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal int upIndex=ev.getActionIndex();\nfinal int id1=ev.getPointerId(upIndex);\nfinal float x1=mVelocityTracker.getXVelocity(id1);\nfinal float y1=mVelocityTracker.getYVelocity(id1);\nfor (int i=0; i < count; i++) {\nif (i == upIndex) continue;\nfinal int id2=ev.getPointerId(i);\nfinal float x=x1 * mVelocityTracker.getXVelocity(id2);\nfinal float y=y1 * mVelocityTracker.getYVelocity(id2);\nfinal float dot=x + y;\nif (dot < 0) {\nmVelocityTracker.clear();\nbreak;\n}\n}\nbreak;\ncase MotionEvent.ACTION_DOWN:mDeferConfirmSingleTap=false;\nif (mDoubleTapListener != null) {\nif (mDoubleTapListener.canDoubleTap(ev)) {\nboolean hadTapMessage=mHandler.hasMessages(TAP);\nif (hadTapMessage) mHandler.removeMessages(TAP);\nif ((mCurrentDownEvent != null) && (mPreviousUpEvent != null) && hadTapMessage&& isConsideredDoubleTap(mCurrentDownEvent,mPreviousUpEvent,ev)) {\nmIsDoubleTapping=true;\nhandled|=mDoubleTapListener.onDoubleTap(mCurrentDownEvent);\nhandled|=mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else {\nmHandler.sendEmptyMessageDelayed(TAP,DOUBLE_TAP_TIMEOUT);\n}\n}\n else {\nmDeferConfirmSingleTap=true;\n}\n}\nmDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nif (mCurrentDownEvent != null) {\nmCurrentDownEvent.recycle();\n}\nmCurrentDownEvent=MotionEvent.obtain(ev);\nmAlwaysInTapRegion=true;\nmAlwaysInBiggerTapRegion=true;\nmStillDown=true;\nmInLongPress=false;\nif (mIsLongpressEnabled) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),mCurrentDownEvent.getDownTime() + ViewConfiguration.getLongPressTimeout());\n}\nmHandler.sendEmptyMessageAtTime(SHOW_PRESS,mCurrentDownEvent.getDownTime() + TAP_TIMEOUT);\nhandled|=mListener.onDown(ev);\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInLongPress || mInContextClick) {\nbreak;\n}\nfinal int motionClassification=Build.VERSION.SDK_INT >= 29 ? ev.getClassification() : 0;\nfinal boolean hasPendingLongPress=mHandler.hasMessages(LONG_PRESS);\nfinal float scrollX=mLastFocusX - focusX;\nfinal float scrollY=mLastFocusY - focusY;\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mAlwaysInTapRegion) {\nfinal int deltaX=(int)(focusX - mDownFocusX);\nfinal int deltaY=(int)(focusY - mDownFocusY);\nint distance=(deltaX * deltaX) + (deltaY * deltaY);\nint slopSquare=mTouchSlopSquare;\nfinal boolean ambiguousGesture=Build.VERSION.SDK_INT >= 29 && motionClassification == MotionEvent.CLASSIFICATION_AMBIGUOUS_GESTURE;\nfinal boolean shouldInhibitDefaultAction=hasPendingLongPress && ambiguousGesture;\nif (shouldInhibitDefaultAction) {\nfinal float multiplier=2f;\nif (distance > slopSquare) {\nmHandler.removeMessages(LONG_PRESS);\nfinal long longPressTimeout=ViewConfiguration.getLongPressTimeout();\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),ev.getDownTime() + (long)(longPressTimeout * multiplier));\n}\nslopSquare*=multiplier * multiplier;\n}\nif (distance > slopSquare) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\nmAlwaysInTapRegion=false;\nmHandler.removeMessages(TAP);\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\n}\nint doubleTapSlopSquare=mDoubleTapTouchSlopSquare;\nif (distance > doubleTapSlopSquare) {\nmAlwaysInBiggerTapRegion=false;\n}\n}\n else if ((Math.abs(scrollX) >= 1) || (Math.abs(scrollY) >= 1)) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\n}\nif (Build.VERSION.SDK_INT >= 29) {\nfinal boolean deepPress=motionClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS;\nif (deepPress && hasPendingLongPress) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessage(mHandler.obtainMessage(LONG_PRESS,0,0));\n}\n}\nbreak;\ncase MotionEvent.ACTION_UP:mStillDown=false;\nmListener.onUp(ev);\nMotionEvent currentUpEvent=MotionEvent.obtain(ev);\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mInLongPress) {\nmHandler.removeMessages(TAP);\nmInLongPress=false;\n}\n else if (mAlwaysInTapRegion && !mIgnoreNextUpEvent) {\nhandled=mListener.onSingleTapUp(ev);\nif (mDeferConfirmSingleTap && mDoubleTapListener != null) {\nmDoubleTapListener.onSingleTapConfirmed(ev);\n}\n}\n else if (!mIgnoreNextUpEvent) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nfinal int pointerId=ev.getPointerId(0);\nvelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal float velocityY=velocityTracker.getYVelocity(pointerId);\nfinal float velocityX=velocityTracker.getXVelocity(pointerId);\nif ((Math.abs(velocityY) > mMinimumFlingVelocity) || (Math.abs(velocityX) > mMinimumFlingVelocity)) {\nhandled=mListener.onFling(mCurrentDownEvent,ev,velocityX,velocityY);\n}\n}\nif (mPreviousUpEvent != null) {\nmPreviousUpEvent.recycle();\n}\nmPreviousUpEvent=currentUpEvent;\nif (mVelocityTracker != null) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nmIsDoubleTapping=false;\nmDeferConfirmSingleTap=false;\nmIgnoreNextUpEvent=false;\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\nbreak;\ncase MotionEvent.ACTION_CANCEL:cancel();\nbreak;\n}\nreturn handled;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 995,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 67
      },
      "nodeContext" : "final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "pointerUp",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 220,
      "startColumnNumber" : 24,
      "endLineNumber" : 220,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 220,
        "startColumnNumber" : 24,
        "endLineNumber" : 220,
        "endColumnNumber" : 53
      },
      "nodeContext" : "pointerUp ? count - 1 : count",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 220,
        "startColumnNumber" : 18,
        "endLineNumber" : 220,
        "endColumnNumber" : 53
      },
      "nodeContext" : "div=pointerUp ? count - 1 : count",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 54
      },
      "nodeContext" : "final int div=pointerUp ? count - 1 : count;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9508,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int action=ev.getAction();\n  if (mCurrentMotionEvent != null) {\n    mCurrentMotionEvent.recycle();\n  }\n  mCurrentMotionEvent=MotionEvent.obtain(ev);\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\n  final boolean pointerUp=(action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_UP;\n  final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n  float sumX=0, sumY=0;\n  final int count=ev.getPointerCount();\n  for (int i=0; i < count; i++) {\n    if (skipIndex == i)     continue;\n    sumX+=ev.getX(i);\n    sumY+=ev.getY(i);\n  }\n  final int div=pointerUp ? count - 1 : count;\n  final float focusX=sumX / div;\n  final float focusY=sumY / div;\n  boolean handled=false;\nswitch (action & MotionEvent.ACTION_MASK) {\ncase MotionEvent.ACTION_POINTER_DOWN:    mDownFocusX=mLastFocusX=focusX;\n  mDownFocusY=mLastFocusY=focusY;\ncancelTaps();\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:mDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nmVelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal int upIndex=ev.getActionIndex();\nfinal int id1=ev.getPointerId(upIndex);\nfinal float x1=mVelocityTracker.getXVelocity(id1);\nfinal float y1=mVelocityTracker.getYVelocity(id1);\nfor (int i=0; i < count; i++) {\nif (i == upIndex) continue;\nfinal int id2=ev.getPointerId(i);\nfinal float x=x1 * mVelocityTracker.getXVelocity(id2);\nfinal float y=y1 * mVelocityTracker.getYVelocity(id2);\nfinal float dot=x + y;\nif (dot < 0) {\nmVelocityTracker.clear();\nbreak;\n}\n}\nbreak;\ncase MotionEvent.ACTION_DOWN:mDeferConfirmSingleTap=false;\nif (mDoubleTapListener != null) {\nif (mDoubleTapListener.canDoubleTap(ev)) {\nboolean hadTapMessage=mHandler.hasMessages(TAP);\nif (hadTapMessage) mHandler.removeMessages(TAP);\nif ((mCurrentDownEvent != null) && (mPreviousUpEvent != null) && hadTapMessage&& isConsideredDoubleTap(mCurrentDownEvent,mPreviousUpEvent,ev)) {\nmIsDoubleTapping=true;\nhandled|=mDoubleTapListener.onDoubleTap(mCurrentDownEvent);\nhandled|=mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else {\nmHandler.sendEmptyMessageDelayed(TAP,DOUBLE_TAP_TIMEOUT);\n}\n}\n else {\nmDeferConfirmSingleTap=true;\n}\n}\nmDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nif (mCurrentDownEvent != null) {\nmCurrentDownEvent.recycle();\n}\nmCurrentDownEvent=MotionEvent.obtain(ev);\nmAlwaysInTapRegion=true;\nmAlwaysInBiggerTapRegion=true;\nmStillDown=true;\nmInLongPress=false;\nif (mIsLongpressEnabled) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),mCurrentDownEvent.getDownTime() + ViewConfiguration.getLongPressTimeout());\n}\nmHandler.sendEmptyMessageAtTime(SHOW_PRESS,mCurrentDownEvent.getDownTime() + TAP_TIMEOUT);\nhandled|=mListener.onDown(ev);\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInLongPress || mInContextClick) {\nbreak;\n}\nfinal int motionClassification=Build.VERSION.SDK_INT >= 29 ? ev.getClassification() : 0;\nfinal boolean hasPendingLongPress=mHandler.hasMessages(LONG_PRESS);\nfinal float scrollX=mLastFocusX - focusX;\nfinal float scrollY=mLastFocusY - focusY;\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mAlwaysInTapRegion) {\nfinal int deltaX=(int)(focusX - mDownFocusX);\nfinal int deltaY=(int)(focusY - mDownFocusY);\nint distance=(deltaX * deltaX) + (deltaY * deltaY);\nint slopSquare=mTouchSlopSquare;\nfinal boolean ambiguousGesture=Build.VERSION.SDK_INT >= 29 && motionClassification == MotionEvent.CLASSIFICATION_AMBIGUOUS_GESTURE;\nfinal boolean shouldInhibitDefaultAction=hasPendingLongPress && ambiguousGesture;\nif (shouldInhibitDefaultAction) {\nfinal float multiplier=2f;\nif (distance > slopSquare) {\nmHandler.removeMessages(LONG_PRESS);\nfinal long longPressTimeout=ViewConfiguration.getLongPressTimeout();\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),ev.getDownTime() + (long)(longPressTimeout * multiplier));\n}\nslopSquare*=multiplier * multiplier;\n}\nif (distance > slopSquare) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\nmAlwaysInTapRegion=false;\nmHandler.removeMessages(TAP);\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\n}\nint doubleTapSlopSquare=mDoubleTapTouchSlopSquare;\nif (distance > doubleTapSlopSquare) {\nmAlwaysInBiggerTapRegion=false;\n}\n}\n else if ((Math.abs(scrollX) >= 1) || (Math.abs(scrollY) >= 1)) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\n}\nif (Build.VERSION.SDK_INT >= 29) {\nfinal boolean deepPress=motionClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS;\nif (deepPress && hasPendingLongPress) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessage(mHandler.obtainMessage(LONG_PRESS,0,0));\n}\n}\nbreak;\ncase MotionEvent.ACTION_UP:mStillDown=false;\nmListener.onUp(ev);\nMotionEvent currentUpEvent=MotionEvent.obtain(ev);\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mInLongPress) {\nmHandler.removeMessages(TAP);\nmInLongPress=false;\n}\n else if (mAlwaysInTapRegion && !mIgnoreNextUpEvent) {\nhandled=mListener.onSingleTapUp(ev);\nif (mDeferConfirmSingleTap && mDoubleTapListener != null) {\nmDoubleTapListener.onSingleTapConfirmed(ev);\n}\n}\n else if (!mIgnoreNextUpEvent) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nfinal int pointerId=ev.getPointerId(0);\nvelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal float velocityY=velocityTracker.getYVelocity(pointerId);\nfinal float velocityX=velocityTracker.getXVelocity(pointerId);\nif ((Math.abs(velocityY) > mMinimumFlingVelocity) || (Math.abs(velocityX) > mMinimumFlingVelocity)) {\nhandled=mListener.onFling(mCurrentDownEvent,ev,velocityX,velocityY);\n}\n}\nif (mPreviousUpEvent != null) {\nmPreviousUpEvent.recycle();\n}\nmPreviousUpEvent=currentUpEvent;\nif (mVelocityTracker != null) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nmIsDoubleTapping=false;\nmDeferConfirmSingleTap=false;\nmIgnoreNextUpEvent=false;\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\nbreak;\ncase MotionEvent.ACTION_CANCEL:cancel();\nbreak;\n}\nreturn handled;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 987,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9552,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean onTouchEvent(MotionEvent ev){\n  final int action=ev.getAction();\n  if (mCurrentMotionEvent != null) {\n    mCurrentMotionEvent.recycle();\n  }\n  mCurrentMotionEvent=MotionEvent.obtain(ev);\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\n  final boolean pointerUp=(action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_UP;\n  final int skipIndex=pointerUp ? ev.getActionIndex() : -1;\n  float sumX=0, sumY=0;\n  final int count=ev.getPointerCount();\n  for (int i=0; i < count; i++) {\n    if (skipIndex == i)     continue;\n    sumX+=ev.getX(i);\n    sumY+=ev.getY(i);\n  }\n  final int div=pointerUp ? count - 1 : count;\n  final float focusX=sumX / div;\n  final float focusY=sumY / div;\n  boolean handled=false;\nswitch (action & MotionEvent.ACTION_MASK) {\ncase MotionEvent.ACTION_POINTER_DOWN:    mDownFocusX=mLastFocusX=focusX;\n  mDownFocusY=mLastFocusY=focusY;\ncancelTaps();\nbreak;\ncase MotionEvent.ACTION_POINTER_UP:mDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nmVelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal int upIndex=ev.getActionIndex();\nfinal int id1=ev.getPointerId(upIndex);\nfinal float x1=mVelocityTracker.getXVelocity(id1);\nfinal float y1=mVelocityTracker.getYVelocity(id1);\nfor (int i=0; i < count; i++) {\nif (i == upIndex) continue;\nfinal int id2=ev.getPointerId(i);\nfinal float x=x1 * mVelocityTracker.getXVelocity(id2);\nfinal float y=y1 * mVelocityTracker.getYVelocity(id2);\nfinal float dot=x + y;\nif (dot < 0) {\nmVelocityTracker.clear();\nbreak;\n}\n}\nbreak;\ncase MotionEvent.ACTION_DOWN:mDeferConfirmSingleTap=false;\nif (mDoubleTapListener != null) {\nif (mDoubleTapListener.canDoubleTap(ev)) {\nboolean hadTapMessage=mHandler.hasMessages(TAP);\nif (hadTapMessage) mHandler.removeMessages(TAP);\nif ((mCurrentDownEvent != null) && (mPreviousUpEvent != null) && hadTapMessage&& isConsideredDoubleTap(mCurrentDownEvent,mPreviousUpEvent,ev)) {\nmIsDoubleTapping=true;\nhandled|=mDoubleTapListener.onDoubleTap(mCurrentDownEvent);\nhandled|=mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else {\nmHandler.sendEmptyMessageDelayed(TAP,DOUBLE_TAP_TIMEOUT);\n}\n}\n else {\nmDeferConfirmSingleTap=true;\n}\n}\nmDownFocusX=mLastFocusX=focusX;\nmDownFocusY=mLastFocusY=focusY;\nif (mCurrentDownEvent != null) {\nmCurrentDownEvent.recycle();\n}\nmCurrentDownEvent=MotionEvent.obtain(ev);\nmAlwaysInTapRegion=true;\nmAlwaysInBiggerTapRegion=true;\nmStillDown=true;\nmInLongPress=false;\nif (mIsLongpressEnabled) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),mCurrentDownEvent.getDownTime() + ViewConfiguration.getLongPressTimeout());\n}\nmHandler.sendEmptyMessageAtTime(SHOW_PRESS,mCurrentDownEvent.getDownTime() + TAP_TIMEOUT);\nhandled|=mListener.onDown(ev);\nbreak;\ncase MotionEvent.ACTION_MOVE:if (mInLongPress || mInContextClick) {\nbreak;\n}\nfinal int motionClassification=Build.VERSION.SDK_INT >= 29 ? ev.getClassification() : 0;\nfinal boolean hasPendingLongPress=mHandler.hasMessages(LONG_PRESS);\nfinal float scrollX=mLastFocusX - focusX;\nfinal float scrollY=mLastFocusY - focusY;\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mAlwaysInTapRegion) {\nfinal int deltaX=(int)(focusX - mDownFocusX);\nfinal int deltaY=(int)(focusY - mDownFocusY);\nint distance=(deltaX * deltaX) + (deltaY * deltaY);\nint slopSquare=mTouchSlopSquare;\nfinal boolean ambiguousGesture=Build.VERSION.SDK_INT >= 29 && motionClassification == MotionEvent.CLASSIFICATION_AMBIGUOUS_GESTURE;\nfinal boolean shouldInhibitDefaultAction=hasPendingLongPress && ambiguousGesture;\nif (shouldInhibitDefaultAction) {\nfinal float multiplier=2f;\nif (distance > slopSquare) {\nmHandler.removeMessages(LONG_PRESS);\nfinal long longPressTimeout=ViewConfiguration.getLongPressTimeout();\nmHandler.sendMessageAtTime(mHandler.obtainMessage(LONG_PRESS,0,0),ev.getDownTime() + (long)(longPressTimeout * multiplier));\n}\nslopSquare*=multiplier * multiplier;\n}\nif (distance > slopSquare) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\nmAlwaysInTapRegion=false;\nmHandler.removeMessages(TAP);\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\n}\nint doubleTapSlopSquare=mDoubleTapTouchSlopSquare;\nif (distance > doubleTapSlopSquare) {\nmAlwaysInBiggerTapRegion=false;\n}\n}\n else if ((Math.abs(scrollX) >= 1) || (Math.abs(scrollY) >= 1)) {\nhandled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);\nmLastFocusX=focusX;\nmLastFocusY=focusY;\n}\nif (Build.VERSION.SDK_INT >= 29) {\nfinal boolean deepPress=motionClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS;\nif (deepPress && hasPendingLongPress) {\nmHandler.removeMessages(LONG_PRESS);\nmHandler.sendMessage(mHandler.obtainMessage(LONG_PRESS,0,0));\n}\n}\nbreak;\ncase MotionEvent.ACTION_UP:mStillDown=false;\nmListener.onUp(ev);\nMotionEvent currentUpEvent=MotionEvent.obtain(ev);\nif (mIsDoubleTapping) {\nhandled|=mDoubleTapListener != null && mDoubleTapListener.onDoubleTapEvent(ev);\n}\n else if (mInLongPress) {\nmHandler.removeMessages(TAP);\nmInLongPress=false;\n}\n else if (mAlwaysInTapRegion && !mIgnoreNextUpEvent) {\nhandled=mListener.onSingleTapUp(ev);\nif (mDeferConfirmSingleTap && mDoubleTapListener != null) {\nmDoubleTapListener.onSingleTapConfirmed(ev);\n}\n}\n else if (!mIgnoreNextUpEvent) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nfinal int pointerId=ev.getPointerId(0);\nvelocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);\nfinal float velocityY=velocityTracker.getYVelocity(pointerId);\nfinal float velocityX=velocityTracker.getXVelocity(pointerId);\nif ((Math.abs(velocityY) > mMinimumFlingVelocity) || (Math.abs(velocityX) > mMinimumFlingVelocity)) {\nhandled=mListener.onFling(mCurrentDownEvent,ev,velocityX,velocityY);\n}\n}\nif (mPreviousUpEvent != null) {\nmPreviousUpEvent.recycle();\n}\nmPreviousUpEvent=currentUpEvent;\nif (mVelocityTracker != null) {\nmVelocityTracker.recycle();\nmVelocityTracker=null;\n}\nmIsDoubleTapping=false;\nmDeferConfirmSingleTap=false;\nmIgnoreNextUpEvent=false;\nmHandler.removeMessages(SHOW_PRESS);\nmHandler.removeMessages(LONG_PRESS);\nbreak;\ncase MotionEvent.ACTION_CANCEL:cancel();\nbreak;\n}\nreturn handled;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 995,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 54
      },
      "nodeContext" : "final int div=pointerUp ? count - 1 : count;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 211,
    "startColumnNumber" : 30,
    "endLineNumber" : 211,
    "endColumnNumber" : 39
  }, {
    "charLength" : 9,
    "startLineNumber" : 220,
    "startColumnNumber" : 24,
    "endLineNumber" : 220,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}