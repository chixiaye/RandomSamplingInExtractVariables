{
  "id" : 254,
  "expression" : "argsSeen",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/query2/engine/QueryParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "argsSeen",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 213,
      "startColumnNumber" : 50,
      "endLineNumber" : 213,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 213,
        "startColumnNumber" : 50,
        "endLineNumber" : 213,
        "endColumnNumber" : 94
      },
      "nodeContext" : "argsSeen >= function.getMandatoryArguments()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 94
      },
      "nodeContext" : "token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 213,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 699,
        "startLineNumber" : 212,
        "startColumnNumber" : 64,
        "endLineNumber" : 237,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n    break;\n  }\n  consume(tokenKind);\n  tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:    args.add(Argument.of(parseExpression()));\n  break;\ncase WORD:args.add(Argument.of(consume(TokenKind.WORD)));\nbreak;\ncase INTEGER:args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 753,
        "startLineNumber" : 212,
        "startColumnNumber" : 10,
        "endLineNumber" : 237,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (ArgumentType type : function.getArgumentTypes()) {\n  if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n    break;\n  }\n  consume(tokenKind);\n  tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:    args.add(Argument.of(parseExpression()));\n  break;\ncase WORD:args.add(Argument.of(consume(TokenKind.WORD)));\nbreak;\ncase INTEGER:args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 204,
        "startColumnNumber" : 44,
        "endLineNumber" : 241,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  QueryFunction function=functions.get(word);\n  if (function == null) {\n    throw syntaxError(token);\n  }\n  List<Argument> args=new ArrayList<>();\n  TokenKind tokenKind=TokenKind.LPAREN;\n  int argsSeen=0;\n  for (  ArgumentType type : function.getArgumentTypes()) {\n    if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n      break;\n    }\n    consume(tokenKind);\n    tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:      args.add(Argument.of(parseExpression()));\n    break;\ncase WORD:  args.add(Argument.of(consume(TokenKind.WORD)));\nbreak;\ncase INTEGER:args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (token.kind == TokenKind.LPAREN) {\n  QueryFunction function=functions.get(word);\n  if (function == null) {\n    throw syntaxError(token);\n  }\n  List<Argument> args=new ArrayList<>();\n  TokenKind tokenKind=TokenKind.LPAREN;\n  int argsSeen=0;\n  for (  ArgumentType type : function.getArgumentTypes()) {\n    if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n      break;\n    }\n    consume(tokenKind);\n    tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:      args.add(Argument.of(parseExpression()));\n    break;\ncase WORD:  args.add(Argument.of(consume(TokenKind.WORD)));\nbreak;\ncase INTEGER:args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n else {\nreturn validateTargetLiteral(word);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 202,
        "startColumnNumber" : 17,
        "endLineNumber" : 244,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String word=consume(TokenKind.WORD);\n  if (token.kind == TokenKind.LPAREN) {\n    QueryFunction function=functions.get(word);\n    if (function == null) {\n      throw syntaxError(token);\n    }\n    List<Argument> args=new ArrayList<>();\n    TokenKind tokenKind=TokenKind.LPAREN;\n    int argsSeen=0;\n    for (    ArgumentType type : function.getArgumentTypes()) {\n      if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n        break;\n      }\n      consume(tokenKind);\n      tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:        args.add(Argument.of(parseExpression()));\n      break;\ncase WORD:    args.add(Argument.of(consume(TokenKind.WORD)));\n  break;\ncase INTEGER:args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n else {\nreturn validateTargetLiteral(word);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2247,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (token.kind) {\ncase WORD:{\n    String word=consume(TokenKind.WORD);\n    if (token.kind == TokenKind.LPAREN) {\n      QueryFunction function=functions.get(word);\n      if (function == null) {\n        throw syntaxError(token);\n      }\n      List<Argument> args=new ArrayList<>();\n      TokenKind tokenKind=TokenKind.LPAREN;\n      int argsSeen=0;\n      for (      ArgumentType type : function.getArgumentTypes()) {\n        if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n          break;\n        }\n        consume(tokenKind);\n        tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:          args.add(Argument.of(parseExpression()));\n        break;\ncase WORD:      args.add(Argument.of(consume(TokenKind.WORD)));\n    break;\ncase INTEGER:  args.add(Argument.of(consumeIntLiteral()));\nbreak;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n else {\nreturn validateTargetLiteral(word);\n}\n}\ncase LET:{\nconsume(TokenKind.LET);\nString name=consume(TokenKind.WORD);\nconsume(TokenKind.EQUALS);\nQueryExpression varExpr=parseExpression();\nconsume(TokenKind.IN);\nQueryExpression bodyExpr=parseExpression();\nreturn new LetExpression(name,varExpr,bodyExpr);\n}\ncase LPAREN:{\nconsume(TokenKind.LPAREN);\nQueryExpression expr=parseExpression();\nconsume(TokenKind.RPAREN);\nreturn expr;\n}\ncase SET:{\nnextToken();\nconsume(TokenKind.LPAREN);\nList<TargetLiteral> words=new ArrayList<>();\nwhile (token.kind == TokenKind.WORD) {\nwords.add(validateTargetLiteral(consume(TokenKind.WORD)));\n}\nconsume(TokenKind.RPAREN);\nreturn new SetExpression(words);\n}\ndefault:throw syntaxError(token);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 306,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2257,
        "startLineNumber" : 200,
        "startColumnNumber" : 69,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nswitch (token.kind) {\ncase WORD:{\n      String word=consume(TokenKind.WORD);\n      if (token.kind == TokenKind.LPAREN) {\n        QueryFunction function=functions.get(word);\n        if (function == null) {\n          throw syntaxError(token);\n        }\n        List<Argument> args=new ArrayList<>();\n        TokenKind tokenKind=TokenKind.LPAREN;\n        int argsSeen=0;\n        for (        ArgumentType type : function.getArgumentTypes()) {\n          if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n            break;\n          }\n          consume(tokenKind);\n          tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:            args.add(Argument.of(parseExpression()));\n          break;\ncase WORD:        args.add(Argument.of(consume(TokenKind.WORD)));\n      break;\ncase INTEGER:    args.add(Argument.of(consumeIntLiteral()));\n  break;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n else {\nreturn validateTargetLiteral(word);\n}\n}\ncase LET:{\nconsume(TokenKind.LET);\nString name=consume(TokenKind.WORD);\nconsume(TokenKind.EQUALS);\nQueryExpression varExpr=parseExpression();\nconsume(TokenKind.IN);\nQueryExpression bodyExpr=parseExpression();\nreturn new LetExpression(name,varExpr,bodyExpr);\n}\ncase LPAREN:{\nconsume(TokenKind.LPAREN);\nQueryExpression expr=parseExpression();\nconsume(TokenKind.RPAREN);\nreturn expr;\n}\ncase SET:{\nnextToken();\nconsume(TokenKind.LPAREN);\nList<TargetLiteral> words=new ArrayList<>();\nwhile (token.kind == TokenKind.WORD) {\nwords.add(validateTargetLiteral(consume(TokenKind.WORD)));\n}\nconsume(TokenKind.RPAREN);\nreturn new SetExpression(words);\n}\ndefault:throw syntaxError(token);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2602,
        "startLineNumber" : 187,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <pre> primary ::= WORD | WORD '(' arg ( ',' arg ) * ')' | LET WORD = expr IN expr | '(' expr ')' | SET '(' WORD * ')' arg ::= expr | WORD | INT </pre>\n */\nprivate QueryExpression parsePrimary() throws QuerySyntaxException {\nswitch (token.kind) {\ncase WORD:{\n      String word=consume(TokenKind.WORD);\n      if (token.kind == TokenKind.LPAREN) {\n        QueryFunction function=functions.get(word);\n        if (function == null) {\n          throw syntaxError(token);\n        }\n        List<Argument> args=new ArrayList<>();\n        TokenKind tokenKind=TokenKind.LPAREN;\n        int argsSeen=0;\n        for (        ArgumentType type : function.getArgumentTypes()) {\n          if (token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()) {\n            break;\n          }\n          consume(tokenKind);\n          tokenKind=TokenKind.COMMA;\nswitch (type) {\ncase EXPRESSION:            args.add(Argument.of(parseExpression()));\n          break;\ncase WORD:        args.add(Argument.of(consume(TokenKind.WORD)));\n      break;\ncase INTEGER:    args.add(Argument.of(consumeIntLiteral()));\n  break;\ndefault:throw new IllegalStateException();\n}\nargsSeen++;\n}\nconsume(TokenKind.RPAREN);\nreturn new FunctionExpression(function,args);\n}\n else {\nreturn validateTargetLiteral(word);\n}\n}\ncase LET:{\nconsume(TokenKind.LET);\nString name=consume(TokenKind.WORD);\nconsume(TokenKind.EQUALS);\nQueryExpression varExpr=parseExpression();\nconsume(TokenKind.IN);\nQueryExpression bodyExpr=parseExpression();\nreturn new LetExpression(name,varExpr,bodyExpr);\n}\ncase LPAREN:{\nconsume(TokenKind.LPAREN);\nQueryExpression expr=parseExpression();\nconsume(TokenKind.RPAREN);\nreturn expr;\n}\ncase SET:{\nnextToken();\nconsume(TokenKind.LPAREN);\nList<TargetLiteral> words=new ArrayList<>();\nwhile (token.kind == TokenKind.WORD) {\nwords.add(validateTargetLiteral(consume(TokenKind.WORD)));\n}\nconsume(TokenKind.RPAREN);\nreturn new SetExpression(words);\n}\ndefault:throw syntaxError(token);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 94
      },
      "nodeContext" : "token.kind == TokenKind.RPAREN && argsSeen >= function.getMandatoryArguments()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 213,
    "startColumnNumber" : 50,
    "endLineNumber" : 213,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}