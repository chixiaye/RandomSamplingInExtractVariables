{
  "id" : 405,
  "expression" : "msg.getProperties()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/example/src/main/java/org/apache/rocketmq/example/benchmark/timer/TimerProducer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "msg.getProperties()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 171,
      "startColumnNumber" : 28,
      "endLineNumber" : 171,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 118
      },
      "nodeContext" : "msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 119
      },
      "nodeContext" : "msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2857,
        "startLineNumber" : 158,
        "startColumnNumber" : 88,
        "endLineNumber" : 204,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  final long beginTimestamp=System.currentTimeMillis();\n  long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n  final Message msg;\n  try {\n    msg=buildMessage(messageSize,topic);\n  }\n catch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n    return;\n  }\n  msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n  msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n  try {\n    producer.send(msg);\n    statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n    statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n    final long currentRT=System.currentTimeMillis() - beginTimestamp;\n    statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n    long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n    while (currentRT > prevMaxRT) {\n      if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n        break;\n      }\n      prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n    }\n  }\n catch (  RemotingException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    sleep(3000);\n  }\ncatch (  InterruptedException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    sleep(3000);\n  }\ncatch (  MQClientException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n  }\ncatch (  MQBrokerException e) {\n    statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    sleep(3000);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2921,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 204,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int msgCnt=0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {\n  final long beginTimestamp=System.currentTimeMillis();\n  long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n  final Message msg;\n  try {\n    msg=buildMessage(messageSize,topic);\n  }\n catch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n    return;\n  }\n  msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n  msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n  try {\n    producer.send(msg);\n    statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n    statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n    final long currentRT=System.currentTimeMillis() - beginTimestamp;\n    statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n    long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n    while (currentRT > prevMaxRT) {\n      if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n        break;\n      }\n      prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n    }\n  }\n catch (  RemotingException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    sleep(3000);\n  }\ncatch (  InterruptedException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    sleep(3000);\n  }\ncatch (  MQClientException e) {\n    statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n  }\ncatch (  MQBrokerException e) {\n    statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n    LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    sleep(3000);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 226,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2975,
        "startLineNumber" : 156,
        "startColumnNumber" : 75,
        "endLineNumber" : 206,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (int msgCnt=0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {\n    final long beginTimestamp=System.currentTimeMillis();\n    long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n    final Message msg;\n    try {\n      msg=buildMessage(messageSize,topic);\n    }\n catch (    UnsupportedEncodingException e) {\n      e.printStackTrace();\n      return;\n    }\n    msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n    msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n    try {\n      producer.send(msg);\n      statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n      statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n      final long currentRT=System.currentTimeMillis() - beginTimestamp;\n      statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n      long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n      while (currentRT > prevMaxRT) {\n        if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n          break;\n        }\n        prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n      }\n    }\n catch (    RemotingException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      sleep(3000);\n    }\ncatch (    InterruptedException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      sleep(3000);\n    }\ncatch (    MQClientException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    }\ncatch (    MQBrokerException e) {\n      statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      sleep(3000);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 156,
        "startColumnNumber" : 20,
        "endLineNumber" : 206,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int slotCnt=0; slotCnt < slotsTotal; slotCnt++) {\n  for (int msgCnt=0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {\n    final long beginTimestamp=System.currentTimeMillis();\n    long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n    final Message msg;\n    try {\n      msg=buildMessage(messageSize,topic);\n    }\n catch (    UnsupportedEncodingException e) {\n      e.printStackTrace();\n      return;\n    }\n    msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n    msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n    try {\n      producer.send(msg);\n      statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n      statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n      final long currentRT=System.currentTimeMillis() - beginTimestamp;\n      statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n      long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n      while (currentRT > prevMaxRT) {\n        if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n          break;\n        }\n        prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n      }\n    }\n catch (    RemotingException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      sleep(3000);\n    }\ncatch (    InterruptedException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      sleep(3000);\n    }\ncatch (    MQClientException e) {\n      statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n    }\ncatch (    MQBrokerException e) {\n      statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n      LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      sleep(3000);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3072,
        "startLineNumber" : 155,
        "startColumnNumber" : 34,
        "endLineNumber" : 207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (int slotCnt=0; slotCnt < slotsTotal; slotCnt++) {\n    for (int msgCnt=0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {\n      final long beginTimestamp=System.currentTimeMillis();\n      long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n      final Message msg;\n      try {\n        msg=buildMessage(messageSize,topic);\n      }\n catch (      UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return;\n      }\n      msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n      msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n      try {\n        producer.send(msg);\n        statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n        statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n        final long currentRT=System.currentTimeMillis() - beginTimestamp;\n        statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n        long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n        while (currentRT > prevMaxRT) {\n          if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n            break;\n          }\n          prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n        }\n      }\n catch (      RemotingException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n        sleep(3000);\n      }\ncatch (      InterruptedException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        sleep(3000);\n      }\ncatch (      MQClientException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      }\ncatch (      MQBrokerException e) {\n        statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n        sleep(3000);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3117,
        "startLineNumber" : 154,
        "startColumnNumber" : 16,
        "endLineNumber" : 207,
        "endColumnNumber" : 17
      },
      "nodeContext" : "@Override public void run(){\n  for (int slotCnt=0; slotCnt < slotsTotal; slotCnt++) {\n    for (int msgCnt=0; msgCnt < msgsTotalPerSlotThread; msgCnt++) {\n      final long beginTimestamp=System.currentTimeMillis();\n      long delayTime=delayList.get(slotCnt * msgsTotalPerSlotThread + msgCnt);\n      final Message msg;\n      try {\n        msg=buildMessage(messageSize,topic);\n      }\n catch (      UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return;\n      }\n      msg.putUserProperty(\"MY_RECORD_TIMER_DELIVER_MS\",String.valueOf(delayTime));\n      msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n      try {\n        producer.send(msg);\n        statsBenchmark.getSendRequestSuccessCount().incrementAndGet();\n        statsBenchmark.getReceiveResponseSuccessCount().incrementAndGet();\n        final long currentRT=System.currentTimeMillis() - beginTimestamp;\n        statsBenchmark.getSendMessageSuccessTimeTotal().addAndGet(currentRT);\n        long prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n        while (currentRT > prevMaxRT) {\n          if (statsBenchmark.getSendMessageMaxRT().compareAndSet(prevMaxRT,currentRT)) {\n            break;\n          }\n          prevMaxRT=statsBenchmark.getSendMessageMaxRT().get();\n        }\n      }\n catch (      RemotingException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n        sleep(3000);\n      }\ncatch (      InterruptedException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        sleep(3000);\n      }\ncatch (      MQClientException e) {\n        statsBenchmark.getSendRequestFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n      }\ncatch (      MQBrokerException e) {\n        statsBenchmark.getReceiveResponseFailedCount().incrementAndGet();\n        LOGGER.error(\"[BENCHMARK_PRODUCER] Send Exception\",e);\n        sleep(3000);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 119
      },
      "nodeContext" : "msg.getProperties().put(MessageConst.PROPERTY_TIMER_DELIVER_MS,String.valueOf(delayTime));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 171,
    "startColumnNumber" : 28,
    "endLineNumber" : 171,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}