{
  "id" : 23,
  "expression" : "equalNum * 2 - i > sf * 2 - lenFromOld",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSDiff.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "equalNum * 2 - i > sf * 2 - lenFromOld",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 415,
      "startColumnNumber" : 24,
      "endLineNumber" : 415,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 415,
        "startColumnNumber" : 20,
        "endLineNumber" : 418,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n  sf=equalNum;\n  lenFromOld=i;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 410,
        "startColumnNumber" : 79,
        "endLineNumber" : 419,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n    equalNum++;\n  }\n  i++;\n  if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n    sf=equalNum;\n    lenFromOld=i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 410,
        "startColumnNumber" : 16,
        "endLineNumber" : 419,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n  if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n    equalNum++;\n  }\n  i++;\n  if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n    sf=equalNum;\n    lenFromOld=i;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2981,
        "startLineNumber" : 405,
        "startColumnNumber" : 61,
        "endLineNumber" : 478,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int equalNum=0;\n  int sf=0;\n  int lenFromOld=0;\n  for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n    if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n      equalNum++;\n    }\n    i++;\n    if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n      sf=equalNum;\n      lenFromOld=i;\n    }\n  }\n  int lenb=0;\n  if (scan < newsize) {\n    equalNum=0;\n    int sb=0;\n    for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n      if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n        equalNum++;\n      }\n      if (equalNum * 2 - i > sb * 2 - lenb) {\n        sb=equalNum;\n        lenb=i;\n      }\n    }\n  }\n  if (lastscan + lenFromOld > scan - lenb) {\n    overlap=(lastscan + lenFromOld) - (scan - lenb);\n    equalNum=0;\n    ss=0;\n    lens=0;\n    for (i=0; i < overlap; i++) {\n      if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n        equalNum++;\n      }\n      if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n        equalNum--;\n      }\n      if (equalNum > ss) {\n        ss=equalNum;\n        lens=i + 1;\n      }\n    }\n    lenFromOld+=lens - overlap;\n    lenb-=lens;\n  }\n  for (i=0; i < lenFromOld; i++) {\n    diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n  }\n  for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n    extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n  }\n  diffBLockLen+=lenFromOld;\n  extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n  dataOut.writeInt(lenFromOld);\n  dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n  dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n  lastscan=scan - lenb;\n  lastpos=pos.value - lenb;\n  lastoffset=pos.value - scan;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 405,
        "startColumnNumber" : 12,
        "endLineNumber" : 478,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((matchLen != oldscore) || (scan == newsize)) {\n  int equalNum=0;\n  int sf=0;\n  int lenFromOld=0;\n  for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n    if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n      equalNum++;\n    }\n    i++;\n    if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n      sf=equalNum;\n      lenFromOld=i;\n    }\n  }\n  int lenb=0;\n  if (scan < newsize) {\n    equalNum=0;\n    int sb=0;\n    for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n      if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n        equalNum++;\n      }\n      if (equalNum * 2 - i > sb * 2 - lenb) {\n        sb=equalNum;\n        lenb=i;\n      }\n    }\n  }\n  if (lastscan + lenFromOld > scan - lenb) {\n    overlap=(lastscan + lenFromOld) - (scan - lenb);\n    equalNum=0;\n    ss=0;\n    lens=0;\n    for (i=0; i < overlap; i++) {\n      if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n        equalNum++;\n      }\n      if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n        equalNum--;\n      }\n      if (equalNum > ss) {\n        ss=equalNum;\n        lens=i + 1;\n      }\n    }\n    lenFromOld+=lens - overlap;\n    lenb-=lens;\n  }\n  for (i=0; i < lenFromOld; i++) {\n    diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n  }\n  for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n    extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n  }\n  diffBLockLen+=lenFromOld;\n  extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n  dataOut.writeInt(lenFromOld);\n  dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n  dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n  lastscan=scan - lenb;\n  lastpos=pos.value - lenb;\n  lastoffset=pos.value - scan;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 409,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3884,
        "startLineNumber" : 383,
        "startColumnNumber" : 31,
        "endLineNumber" : 479,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  oldscore=0;\n  for (scsc=scan+=matchLen; scan < newsize; scan++) {\n    matchLen=search(arrayI,oldBuf,oldsize,newBuf,newsize,scan,0,oldsize,pos);\n    for (; scsc < scan + matchLen; scsc++) {\n      if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) {\n        oldscore++;\n      }\n    }\n    if (((matchLen == oldscore) && (matchLen != 0)) || (matchLen > oldscore + 8)) {\n      break;\n    }\n    if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) {\n      oldscore--;\n    }\n  }\n  if ((matchLen != oldscore) || (scan == newsize)) {\n    int equalNum=0;\n    int sf=0;\n    int lenFromOld=0;\n    for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n      if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n        equalNum++;\n      }\n      i++;\n      if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n        sf=equalNum;\n        lenFromOld=i;\n      }\n    }\n    int lenb=0;\n    if (scan < newsize) {\n      equalNum=0;\n      int sb=0;\n      for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n        if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n          equalNum++;\n        }\n        if (equalNum * 2 - i > sb * 2 - lenb) {\n          sb=equalNum;\n          lenb=i;\n        }\n      }\n    }\n    if (lastscan + lenFromOld > scan - lenb) {\n      overlap=(lastscan + lenFromOld) - (scan - lenb);\n      equalNum=0;\n      ss=0;\n      lens=0;\n      for (i=0; i < overlap; i++) {\n        if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n          equalNum++;\n        }\n        if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n          equalNum--;\n        }\n        if (equalNum > ss) {\n          ss=equalNum;\n          lens=i + 1;\n        }\n      }\n      lenFromOld+=lens - overlap;\n      lenb-=lens;\n    }\n    for (i=0; i < lenFromOld; i++) {\n      diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n    }\n    for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n      extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n    }\n    diffBLockLen+=lenFromOld;\n    extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n    dataOut.writeInt(lenFromOld);\n    dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n    dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n    lastscan=scan - lenb;\n    lastpos=pos.value - lenb;\n    lastoffset=pos.value - scan;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3907,
        "startLineNumber" : 383,
        "startColumnNumber" : 8,
        "endLineNumber" : 479,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (scan < newsize) {\n  oldscore=0;\n  for (scsc=scan+=matchLen; scan < newsize; scan++) {\n    matchLen=search(arrayI,oldBuf,oldsize,newBuf,newsize,scan,0,oldsize,pos);\n    for (; scsc < scan + matchLen; scsc++) {\n      if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) {\n        oldscore++;\n      }\n    }\n    if (((matchLen == oldscore) && (matchLen != 0)) || (matchLen > oldscore + 8)) {\n      break;\n    }\n    if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) {\n      oldscore--;\n    }\n  }\n  if ((matchLen != oldscore) || (scan == newsize)) {\n    int equalNum=0;\n    int sf=0;\n    int lenFromOld=0;\n    for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n      if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n        equalNum++;\n      }\n      i++;\n      if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n        sf=equalNum;\n        lenFromOld=i;\n      }\n    }\n    int lenb=0;\n    if (scan < newsize) {\n      equalNum=0;\n      int sb=0;\n      for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n        if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n          equalNum++;\n        }\n        if (equalNum * 2 - i > sb * 2 - lenb) {\n          sb=equalNum;\n          lenb=i;\n        }\n      }\n    }\n    if (lastscan + lenFromOld > scan - lenb) {\n      overlap=(lastscan + lenFromOld) - (scan - lenb);\n      equalNum=0;\n      ss=0;\n      lens=0;\n      for (i=0; i < overlap; i++) {\n        if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n          equalNum++;\n        }\n        if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n          equalNum--;\n        }\n        if (equalNum > ss) {\n          ss=equalNum;\n          lens=i + 1;\n        }\n      }\n      lenFromOld+=lens - overlap;\n      lenb-=lens;\n    }\n    for (i=0; i < lenFromOld; i++) {\n      diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n    }\n    for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n      extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n    }\n    diffBLockLen+=lenFromOld;\n    extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n    dataOut.writeInt(lenFromOld);\n    dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n    dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n    lastscan=scan - lenb;\n    lastpos=pos.value - lenb;\n    lastoffset=pos.value - scan;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 517,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7498,
        "startLineNumber" : 324,
        "startColumnNumber" : 107,
        "endLineNumber" : 527,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] arrayI=new int[oldsize + 1];\n  qsufsort(arrayI,new int[oldsize + 1],oldBuf,oldsize);\n  int diffBLockLen=0;\n  byte[] diffBlock=new byte[newsize];\n  int extraBlockLen=0;\n  byte[] extraBlock=new byte[newsize];\n  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();\n  DataOutputStream diffOut=new DataOutputStream(byteOut);\n  diffOut.write(MAGIC_BYTES);\n  diffOut.writeLong(-1);\n  diffOut.writeLong(-1);\n  diffOut.writeLong(newsize);\n  diffOut.flush();\n  GZIPOutputStream bzip2Out=new GZIPOutputStream(diffOut);\n  DataOutputStream dataOut=new DataOutputStream(bzip2Out);\n  int oldscore, scsc;\n  int overlap, ss, lens;\n  int i;\n  int scan=0;\n  int matchLen=0;\n  int lastscan=0;\n  int lastpos=0;\n  int lastoffset=0;\n  IntByRef pos=new IntByRef();\n  while (scan < newsize) {\n    oldscore=0;\n    for (scsc=scan+=matchLen; scan < newsize; scan++) {\n      matchLen=search(arrayI,oldBuf,oldsize,newBuf,newsize,scan,0,oldsize,pos);\n      for (; scsc < scan + matchLen; scsc++) {\n        if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) {\n          oldscore++;\n        }\n      }\n      if (((matchLen == oldscore) && (matchLen != 0)) || (matchLen > oldscore + 8)) {\n        break;\n      }\n      if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) {\n        oldscore--;\n      }\n    }\n    if ((matchLen != oldscore) || (scan == newsize)) {\n      int equalNum=0;\n      int sf=0;\n      int lenFromOld=0;\n      for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n        if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n          equalNum++;\n        }\n        i++;\n        if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n          sf=equalNum;\n          lenFromOld=i;\n        }\n      }\n      int lenb=0;\n      if (scan < newsize) {\n        equalNum=0;\n        int sb=0;\n        for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n          if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n            equalNum++;\n          }\n          if (equalNum * 2 - i > sb * 2 - lenb) {\n            sb=equalNum;\n            lenb=i;\n          }\n        }\n      }\n      if (lastscan + lenFromOld > scan - lenb) {\n        overlap=(lastscan + lenFromOld) - (scan - lenb);\n        equalNum=0;\n        ss=0;\n        lens=0;\n        for (i=0; i < overlap; i++) {\n          if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n            equalNum++;\n          }\n          if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n            equalNum--;\n          }\n          if (equalNum > ss) {\n            ss=equalNum;\n            lens=i + 1;\n          }\n        }\n        lenFromOld+=lens - overlap;\n        lenb-=lens;\n      }\n      for (i=0; i < lenFromOld; i++) {\n        diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n      }\n      for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n        extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n      }\n      diffBLockLen+=lenFromOld;\n      extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n      dataOut.writeInt(lenFromOld);\n      dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n      dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n      lastscan=scan - lenb;\n      lastpos=pos.value - lenb;\n      lastoffset=pos.value - scan;\n    }\n  }\n  dataOut.flush();\n  bzip2Out.finish();\n  int ctrlBlockLen=diffOut.size() - BSUtil.HEADER_SIZE;\n  bzip2Out=new GZIPOutputStream(diffOut);\n  bzip2Out.write(diffBlock,0,diffBLockLen);\n  bzip2Out.finish();\n  bzip2Out.flush();\n  int diffBlockLen=diffOut.size() - ctrlBlockLen - BSUtil.HEADER_SIZE;\n  bzip2Out=new GZIPOutputStream(diffOut);\n  bzip2Out.write(extraBlock,0,extraBlockLen);\n  bzip2Out.finish();\n  bzip2Out.flush();\n  diffOut.close();\n  ByteArrayOutputStream byteHeaderOut=new ByteArrayOutputStream(BSUtil.HEADER_SIZE);\n  DataOutputStream headerOut=new DataOutputStream(byteHeaderOut);\n  headerOut.write(MAGIC_BYTES);\n  headerOut.writeLong(ctrlBlockLen);\n  headerOut.writeLong(diffBlockLen);\n  headerOut.writeLong(newsize);\n  headerOut.close();\n  byte[] diffBytes=byteOut.toByteArray();\n  byte[] headerBytes=byteHeaderOut.toByteArray();\n  System.arraycopy(headerBytes,0,diffBytes,0,headerBytes.length);\n  return diffBytes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 842,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7601,
        "startLineNumber" : 324,
        "startColumnNumber" : 4,
        "endLineNumber" : 527,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static byte[] bsdiff(byte[] oldBuf,int oldsize,byte[] newBuf,int newsize) throws IOException {\n  int[] arrayI=new int[oldsize + 1];\n  qsufsort(arrayI,new int[oldsize + 1],oldBuf,oldsize);\n  int diffBLockLen=0;\n  byte[] diffBlock=new byte[newsize];\n  int extraBlockLen=0;\n  byte[] extraBlock=new byte[newsize];\n  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();\n  DataOutputStream diffOut=new DataOutputStream(byteOut);\n  diffOut.write(MAGIC_BYTES);\n  diffOut.writeLong(-1);\n  diffOut.writeLong(-1);\n  diffOut.writeLong(newsize);\n  diffOut.flush();\n  GZIPOutputStream bzip2Out=new GZIPOutputStream(diffOut);\n  DataOutputStream dataOut=new DataOutputStream(bzip2Out);\n  int oldscore, scsc;\n  int overlap, ss, lens;\n  int i;\n  int scan=0;\n  int matchLen=0;\n  int lastscan=0;\n  int lastpos=0;\n  int lastoffset=0;\n  IntByRef pos=new IntByRef();\n  while (scan < newsize) {\n    oldscore=0;\n    for (scsc=scan+=matchLen; scan < newsize; scan++) {\n      matchLen=search(arrayI,oldBuf,oldsize,newBuf,newsize,scan,0,oldsize,pos);\n      for (; scsc < scan + matchLen; scsc++) {\n        if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) {\n          oldscore++;\n        }\n      }\n      if (((matchLen == oldscore) && (matchLen != 0)) || (matchLen > oldscore + 8)) {\n        break;\n      }\n      if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) {\n        oldscore--;\n      }\n    }\n    if ((matchLen != oldscore) || (scan == newsize)) {\n      int equalNum=0;\n      int sf=0;\n      int lenFromOld=0;\n      for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {\n        if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {\n          equalNum++;\n        }\n        i++;\n        if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n          sf=equalNum;\n          lenFromOld=i;\n        }\n      }\n      int lenb=0;\n      if (scan < newsize) {\n        equalNum=0;\n        int sb=0;\n        for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {\n          if (oldBuf[pos.value - i] == newBuf[scan - i]) {\n            equalNum++;\n          }\n          if (equalNum * 2 - i > sb * 2 - lenb) {\n            sb=equalNum;\n            lenb=i;\n          }\n        }\n      }\n      if (lastscan + lenFromOld > scan - lenb) {\n        overlap=(lastscan + lenFromOld) - (scan - lenb);\n        equalNum=0;\n        ss=0;\n        lens=0;\n        for (i=0; i < overlap; i++) {\n          if (newBuf[lastscan + lenFromOld - overlap + i] == oldBuf[lastpos + lenFromOld - overlap + i]) {\n            equalNum++;\n          }\n          if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {\n            equalNum--;\n          }\n          if (equalNum > ss) {\n            ss=equalNum;\n            lens=i + 1;\n          }\n        }\n        lenFromOld+=lens - overlap;\n        lenb-=lens;\n      }\n      for (i=0; i < lenFromOld; i++) {\n        diffBlock[diffBLockLen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);\n      }\n      for (i=0; i < (scan - lenb) - (lastscan + lenFromOld); i++) {\n        extraBlock[extraBlockLen + i]=newBuf[lastscan + lenFromOld + i];\n      }\n      diffBLockLen+=lenFromOld;\n      extraBlockLen+=(scan - lenb) - (lastscan + lenFromOld);\n      dataOut.writeInt(lenFromOld);\n      dataOut.writeInt((scan - lenb) - (lastscan + lenFromOld));\n      dataOut.writeInt((pos.value - lenb) - (lastpos + lenFromOld));\n      lastscan=scan - lenb;\n      lastpos=pos.value - lenb;\n      lastoffset=pos.value - scan;\n    }\n  }\n  dataOut.flush();\n  bzip2Out.finish();\n  int ctrlBlockLen=diffOut.size() - BSUtil.HEADER_SIZE;\n  bzip2Out=new GZIPOutputStream(diffOut);\n  bzip2Out.write(diffBlock,0,diffBLockLen);\n  bzip2Out.finish();\n  bzip2Out.flush();\n  int diffBlockLen=diffOut.size() - ctrlBlockLen - BSUtil.HEADER_SIZE;\n  bzip2Out=new GZIPOutputStream(diffOut);\n  bzip2Out.write(extraBlock,0,extraBlockLen);\n  bzip2Out.finish();\n  bzip2Out.flush();\n  diffOut.close();\n  ByteArrayOutputStream byteHeaderOut=new ByteArrayOutputStream(BSUtil.HEADER_SIZE);\n  DataOutputStream headerOut=new DataOutputStream(byteHeaderOut);\n  headerOut.write(MAGIC_BYTES);\n  headerOut.writeLong(ctrlBlockLen);\n  headerOut.writeLong(diffBlockLen);\n  headerOut.writeLong(newsize);\n  headerOut.close();\n  byte[] diffBytes=byteOut.toByteArray();\n  byte[] headerBytes=byteHeaderOut.toByteArray();\n  System.arraycopy(headerBytes,0,diffBytes,0,headerBytes.length);\n  return diffBytes;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 867,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 415,
        "startColumnNumber" : 20,
        "endLineNumber" : 418,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (equalNum * 2 - i > sf * 2 - lenFromOld) {\n  sf=equalNum;\n  lenFromOld=i;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 11,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 415,
    "startColumnNumber" : 24,
    "endLineNumber" : 415,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}