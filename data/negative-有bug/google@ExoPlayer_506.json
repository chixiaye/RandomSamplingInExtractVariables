{
  "id" : 506,
  "expression" : "download.request",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileUpgradeUtilTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 259,
      "startColumnNumber" : 15,
      "endLineNumber" : 259,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 259,
        "startColumnNumber" : 15,
        "endLineNumber" : 259,
        "endColumnNumber" : 40
      },
      "nodeContext" : "download.request.mimeType",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertThat(download.request.mimeType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 259,
        "startColumnNumber" : 4,
        "endLineNumber" : 259,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  }, {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 260,
      "startColumnNumber" : 15,
      "endLineNumber" : 260,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 260,
        "startColumnNumber" : 15,
        "endLineNumber" : 260,
        "endColumnNumber" : 46
      },
      "nodeContext" : "download.request.customCacheKey",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertThat(download.request.customCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  }, {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 261,
      "startColumnNumber" : 15,
      "endLineNumber" : 261,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 261,
        "startColumnNumber" : 15,
        "endLineNumber" : 261,
        "endColumnNumber" : 36
      },
      "nodeContext" : "download.request.data",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertThat(download.request.data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(download.request.data).isEqualTo(request2.data)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(download.request.data).isEqualTo(request2.data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 261,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(download.request.data).isEqualTo(request2.data);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  }, {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 262,
      "startColumnNumber" : 15,
      "endLineNumber" : 262,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 262,
        "startColumnNumber" : 15,
        "endLineNumber" : 262,
        "endColumnNumber" : 35
      },
      "nodeContext" : "download.request.uri",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertThat(download.request.uri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertThat(download.request.uri).isEqualTo(request2.uri)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(download.request.uri).isEqualTo(request2.uri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 262,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(download.request.uri).isEqualTo(request2.uri);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  }, {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 263,
      "startColumnNumber" : 15,
      "endLineNumber" : 263,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 263,
        "startColumnNumber" : 15,
        "endLineNumber" : 263,
        "endColumnNumber" : 42
      },
      "nodeContext" : "download.request.streamKeys",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(download.request.streamKeys)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 263,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  }, {
    "nodeContext" : "download.request",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 264,
      "startColumnNumber" : 15,
      "endLineNumber" : 264,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 264,
        "startColumnNumber" : 15,
        "endLineNumber" : 264,
        "endColumnNumber" : 40
      },
      "nodeContext" : "download.request.keySetId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertThat(download.request.keySetId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 70
      },
      "nodeContext" : "assertThat(download.request.keySetId).isEqualTo(request2.keySetId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1839,
        "startLineNumber" : 231,
        "startColumnNumber" : 87,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1932,
        "startLineNumber" : 230,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeRequest_existingDownload_createsMergedDownload() throws IOException {\n  StreamKey streamKey1=new StreamKey(3,4,5);\n  StreamKey streamKey2=new StreamKey(0,1,2);\n  DownloadRequest request1=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download1\")).setStreamKeys(ImmutableList.of(streamKey1)).setKeySetId(new byte[]{1,2,3,4}).setCustomCacheKey(\"key123\").setData(new byte[]{1,2,3,4}).build();\n  DownloadRequest request2=new DownloadRequest.Builder(\"id\",Uri.parse(\"https://www.test.com/download2\")).setMimeType(MimeTypes.APPLICATION_MP4).setStreamKeys(ImmutableList.of(streamKey2)).setKeySetId(new byte[]{5,4,3,2,1}).setCustomCacheKey(\"key345\").setData(new byte[]{5,4,3,2,1}).build();\n  ActionFileUpgradeUtil.mergeRequest(request1,downloadIndex,false,NOW_MS);\n  ActionFileUpgradeUtil.mergeRequest(request2,downloadIndex,false,NOW_MS);\n  Download download=downloadIndex.getDownload(request2.id);\n  assertThat(download).isNotNull();\n  assertThat(download.request.mimeType).isEqualTo(MimeTypes.APPLICATION_MP4);\n  assertThat(download.request.customCacheKey).isEqualTo(request2.customCacheKey);\n  assertThat(download.request.data).isEqualTo(request2.data);\n  assertThat(download.request.uri).isEqualTo(request2.uri);\n  assertThat(download.request.streamKeys).containsExactly(streamKey1,streamKey2);\n  assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n  assertThat(download.state).isEqualTo(Download.STATE_QUEUED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 264,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertThat(download.request.keySetId).isEqualTo(request2.keySetId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.offline.DownloadRequest"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 259,
    "startColumnNumber" : 15,
    "endLineNumber" : 259,
    "endColumnNumber" : 31
  }, {
    "charLength" : 16,
    "startLineNumber" : 260,
    "startColumnNumber" : 15,
    "endLineNumber" : 260,
    "endColumnNumber" : 31
  }, {
    "charLength" : 16,
    "startLineNumber" : 261,
    "startColumnNumber" : 15,
    "endLineNumber" : 261,
    "endColumnNumber" : 31
  }, {
    "charLength" : 16,
    "startLineNumber" : 262,
    "startColumnNumber" : 15,
    "endLineNumber" : 262,
    "endColumnNumber" : 31
  }, {
    "charLength" : 16,
    "startLineNumber" : 263,
    "startColumnNumber" : 15,
    "endLineNumber" : 263,
    "endColumnNumber" : 31
  }, {
    "charLength" : 16,
    "startLineNumber" : 264,
    "startColumnNumber" : 15,
    "endLineNumber" : 264,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}