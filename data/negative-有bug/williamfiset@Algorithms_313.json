{
  "id" : 313,
  "expression" : "dist < d",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dist < d",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 85,
      "startColumnNumber" : 12,
      "endLineNumber" : 85,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dist < d) {\n  pt1=nextPoint;\n  pt2=next;\n  d=dist;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 83,
        "startColumnNumber" : 51,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double dist=nextPoint.dist(next);\n  if (dist < d) {\n    pt1=nextPoint;\n    pt2=next;\n    d=dist;\n  }\n  next=yWorkingSet.higher(next);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 83,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (next != null && next.y <= upperBound) {\n  double dist=nextPoint.dist(next);\n  if (dist < d) {\n    pt1=nextPoint;\n    pt2=next;\n    d=dist;\n  }\n  next=yWorkingSet.higher(next);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1542,
        "startLineNumber" : 68,
        "startColumnNumber" : 32,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PT nextPoint=points[i];\n  while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n    PT pt=points[xQueueFront++];\n    yWorkingSet.remove(pt);\n  }\n  double upperBound=nextPoint.y + d;\n  PT next=yWorkingSet.higher(nextPoint);\n  while (next != null && next.y <= upperBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.higher(next);\n  }\n  double lowerBound=nextPoint.y - d;\n  next=yWorkingSet.lower(nextPoint);\n  while (next != null && next.y > lowerBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.lower(next);\n  }\n  if (yWorkingSet.contains(nextPoint)) {\n    pt1=pt2=nextPoint;\n    d=0;\n    break;\n  }\n  yWorkingSet.add(nextPoint);\n  xQueueBack++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1570,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  PT nextPoint=points[i];\n  while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n    PT pt=points[xQueueFront++];\n    yWorkingSet.remove(pt);\n  }\n  double upperBound=nextPoint.y + d;\n  PT next=yWorkingSet.higher(nextPoint);\n  while (next != null && next.y <= upperBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.higher(next);\n  }\n  double lowerBound=nextPoint.y - d;\n  next=yWorkingSet.lower(nextPoint);\n  while (next != null && next.y > lowerBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.lower(next);\n  }\n  if (yWorkingSet.contains(nextPoint)) {\n    pt1=pt2=nextPoint;\n    d=0;\n    break;\n  }\n  yWorkingSet.add(nextPoint);\n  xQueueBack++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1966,
        "startLineNumber" : 54,
        "startColumnNumber" : 46,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (points == null || points.length < 2)   return new PT[]{};\n  final int n=points.length;\n  int xQueueFront=0, xQueueBack=0;\n  Arrays.sort(points,new X_Sort());\n  TreeSet<PT> yWorkingSet=new TreeSet<>(new YX_Sort());\n  PT pt1=null, pt2=null;\n  double d=Double.POSITIVE_INFINITY;\n  for (int i=0; i < n; i++) {\n    PT nextPoint=points[i];\n    while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n      PT pt=points[xQueueFront++];\n      yWorkingSet.remove(pt);\n    }\n    double upperBound=nextPoint.y + d;\n    PT next=yWorkingSet.higher(nextPoint);\n    while (next != null && next.y <= upperBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.higher(next);\n    }\n    double lowerBound=nextPoint.y - d;\n    next=yWorkingSet.lower(nextPoint);\n    while (next != null && next.y > lowerBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.lower(next);\n    }\n    if (yWorkingSet.contains(nextPoint)) {\n      pt1=pt2=nextPoint;\n      d=0;\n      break;\n    }\n    yWorkingSet.add(nextPoint);\n    xQueueBack++;\n  }\n  return new PT[]{pt1,pt2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2010,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static PT[] closestPair(PT[] points){\n  if (points == null || points.length < 2)   return new PT[]{};\n  final int n=points.length;\n  int xQueueFront=0, xQueueBack=0;\n  Arrays.sort(points,new X_Sort());\n  TreeSet<PT> yWorkingSet=new TreeSet<>(new YX_Sort());\n  PT pt1=null, pt2=null;\n  double d=Double.POSITIVE_INFINITY;\n  for (int i=0; i < n; i++) {\n    PT nextPoint=points[i];\n    while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n      PT pt=points[xQueueFront++];\n      yWorkingSet.remove(pt);\n    }\n    double upperBound=nextPoint.y + d;\n    PT next=yWorkingSet.higher(nextPoint);\n    while (next != null && next.y <= upperBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.higher(next);\n    }\n    double lowerBound=nextPoint.y - d;\n    next=yWorkingSet.lower(nextPoint);\n    while (next != null && next.y > lowerBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.lower(next);\n    }\n    if (yWorkingSet.contains(nextPoint)) {\n      pt1=pt2=nextPoint;\n      d=0;\n      break;\n    }\n    yWorkingSet.add(nextPoint);\n    xQueueBack++;\n  }\n  return new PT[]{pt1,pt2};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dist < d) {\n  pt1=nextPoint;\n  pt2=next;\n  d=dist;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "dist < d",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 99,
      "startColumnNumber" : 12,
      "endLineNumber" : 99,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dist < d) {\n  pt1=nextPoint;\n  pt2=next;\n  d=dist;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 97,
        "startColumnNumber" : 50,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double dist=nextPoint.dist(next);\n  if (dist < d) {\n    pt1=nextPoint;\n    pt2=next;\n    d=dist;\n  }\n  next=yWorkingSet.lower(next);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (next != null && next.y > lowerBound) {\n  double dist=nextPoint.dist(next);\n  if (dist < d) {\n    pt1=nextPoint;\n    pt2=next;\n    d=dist;\n  }\n  next=yWorkingSet.lower(next);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1542,
        "startLineNumber" : 68,
        "startColumnNumber" : 32,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PT nextPoint=points[i];\n  while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n    PT pt=points[xQueueFront++];\n    yWorkingSet.remove(pt);\n  }\n  double upperBound=nextPoint.y + d;\n  PT next=yWorkingSet.higher(nextPoint);\n  while (next != null && next.y <= upperBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.higher(next);\n  }\n  double lowerBound=nextPoint.y - d;\n  next=yWorkingSet.lower(nextPoint);\n  while (next != null && next.y > lowerBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.lower(next);\n  }\n  if (yWorkingSet.contains(nextPoint)) {\n    pt1=pt2=nextPoint;\n    d=0;\n    break;\n  }\n  yWorkingSet.add(nextPoint);\n  xQueueBack++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1570,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  PT nextPoint=points[i];\n  while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n    PT pt=points[xQueueFront++];\n    yWorkingSet.remove(pt);\n  }\n  double upperBound=nextPoint.y + d;\n  PT next=yWorkingSet.higher(nextPoint);\n  while (next != null && next.y <= upperBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.higher(next);\n  }\n  double lowerBound=nextPoint.y - d;\n  next=yWorkingSet.lower(nextPoint);\n  while (next != null && next.y > lowerBound) {\n    double dist=nextPoint.dist(next);\n    if (dist < d) {\n      pt1=nextPoint;\n      pt2=next;\n      d=dist;\n    }\n    next=yWorkingSet.lower(next);\n  }\n  if (yWorkingSet.contains(nextPoint)) {\n    pt1=pt2=nextPoint;\n    d=0;\n    break;\n  }\n  yWorkingSet.add(nextPoint);\n  xQueueBack++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1966,
        "startLineNumber" : 54,
        "startColumnNumber" : 46,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (points == null || points.length < 2)   return new PT[]{};\n  final int n=points.length;\n  int xQueueFront=0, xQueueBack=0;\n  Arrays.sort(points,new X_Sort());\n  TreeSet<PT> yWorkingSet=new TreeSet<>(new YX_Sort());\n  PT pt1=null, pt2=null;\n  double d=Double.POSITIVE_INFINITY;\n  for (int i=0; i < n; i++) {\n    PT nextPoint=points[i];\n    while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n      PT pt=points[xQueueFront++];\n      yWorkingSet.remove(pt);\n    }\n    double upperBound=nextPoint.y + d;\n    PT next=yWorkingSet.higher(nextPoint);\n    while (next != null && next.y <= upperBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.higher(next);\n    }\n    double lowerBound=nextPoint.y - d;\n    next=yWorkingSet.lower(nextPoint);\n    while (next != null && next.y > lowerBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.lower(next);\n    }\n    if (yWorkingSet.contains(nextPoint)) {\n      pt1=pt2=nextPoint;\n      d=0;\n      break;\n    }\n    yWorkingSet.add(nextPoint);\n    xQueueBack++;\n  }\n  return new PT[]{pt1,pt2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2010,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static PT[] closestPair(PT[] points){\n  if (points == null || points.length < 2)   return new PT[]{};\n  final int n=points.length;\n  int xQueueFront=0, xQueueBack=0;\n  Arrays.sort(points,new X_Sort());\n  TreeSet<PT> yWorkingSet=new TreeSet<>(new YX_Sort());\n  PT pt1=null, pt2=null;\n  double d=Double.POSITIVE_INFINITY;\n  for (int i=0; i < n; i++) {\n    PT nextPoint=points[i];\n    while (xQueueFront != xQueueBack && nextPoint.x - points[xQueueFront].x > d) {\n      PT pt=points[xQueueFront++];\n      yWorkingSet.remove(pt);\n    }\n    double upperBound=nextPoint.y + d;\n    PT next=yWorkingSet.higher(nextPoint);\n    while (next != null && next.y <= upperBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.higher(next);\n    }\n    double lowerBound=nextPoint.y - d;\n    next=yWorkingSet.lower(nextPoint);\n    while (next != null && next.y > lowerBound) {\n      double dist=nextPoint.dist(next);\n      if (dist < d) {\n        pt1=nextPoint;\n        pt2=next;\n        d=dist;\n      }\n      next=yWorkingSet.lower(next);\n    }\n    if (yWorkingSet.contains(nextPoint)) {\n      pt1=pt2=nextPoint;\n      d=0;\n      break;\n    }\n    yWorkingSet.add(nextPoint);\n    xQueueBack++;\n  }\n  return new PT[]{pt1,pt2};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 292,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dist < d) {\n  pt1=nextPoint;\n  pt2=next;\n  d=dist;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 85,
    "startColumnNumber" : 12,
    "endLineNumber" : 85,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 99,
    "startColumnNumber" : 12,
    "endLineNumber" : 99,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}