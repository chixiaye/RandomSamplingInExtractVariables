{
  "id" : 461,
  "expression" : "new TLRPC.TL_channels_getMessages()",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TLRPC.TL_channels_getMessages()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 3037,
      "startColumnNumber" : 48,
      "endLineNumber" : 3037,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 3037,
        "startColumnNumber" : 42,
        "endLineNumber" : 3037,
        "endColumnNumber" : 83
      },
      "nodeContext" : "req=new TLRPC.TL_channels_getMessages()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 3037,
        "startColumnNumber" : 12,
        "endLineNumber" : 3037,
        "endColumnNumber" : 84
      },
      "nodeContext" : "TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 3036,
        "startColumnNumber" : 40,
        "endLineNumber" : 3041,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n  req.channel=getInputChannel(chat);\n  req.id=result;\n  request=req;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 3036,
        "startColumnNumber" : 8,
        "endLineNumber" : 3045,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ChatObject.isChannel(chat)) {\n  TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n  req.channel=getInputChannel(chat);\n  req.id=result;\n  request=req;\n}\n else {\n  TLRPC.TL_messages_getMessages req=new TLRPC.TL_messages_getMessages();\n  req.id=result;\n  request=req;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5078,
        "startLineNumber" : 3029,
        "startColumnNumber" : 104,
        "endLineNumber" : 3135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mids.isEmpty()) {\n    return;\n  }\n  TLObject request;\n  final ArrayList<Integer> result=new ArrayList<>();\n  final TLRPC.Chat chat=ChatObject.getChatByDialog(dialog_id,currentAccount);\n  if (ChatObject.isChannel(chat)) {\n    TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n    req.channel=getInputChannel(chat);\n    req.id=result;\n    request=req;\n  }\n else {\n    TLRPC.TL_messages_getMessages req=new TLRPC.TL_messages_getMessages();\n    req.id=result;\n    request=req;\n  }\n  ArrayList<Integer> arrayList=reloadingMessages.get(dialog_id);\n  for (int a=0; a < mids.size(); a++) {\n    Integer mid=mids.get(a);\n    if (arrayList != null && arrayList.contains(mid)) {\n      continue;\n    }\n    result.add(mid);\n  }\n  if (result.isEmpty()) {\n    return;\n  }\n  if (arrayList == null) {\n    arrayList=new ArrayList<>();\n    reloadingMessages.put(dialog_id,arrayList);\n  }\n  arrayList.addAll(result);\n  getConnectionsManager().sendRequest(request,(response,error) -> {\n    if (error == null) {\n      TLRPC.messages_Messages messagesRes=(TLRPC.messages_Messages)response;\n      final SparseArray<TLRPC.User> usersLocal=new SparseArray<>();\n      for (int a=0; a < messagesRes.users.size(); a++) {\n        TLRPC.User u=messagesRes.users.get(a);\n        usersLocal.put(u.id,u);\n      }\n      final SparseArray<TLRPC.Chat> chatsLocal=new SparseArray<>();\n      for (int a=0; a < messagesRes.chats.size(); a++) {\n        TLRPC.Chat c=messagesRes.chats.get(a);\n        chatsLocal.put(c.id,c);\n      }\n      Integer inboxValue=dialogs_read_inbox_max.get(dialog_id);\n      if (inboxValue == null) {\n        inboxValue=getMessagesStorage().getDialogReadMax(false,dialog_id);\n        dialogs_read_inbox_max.put(dialog_id,inboxValue);\n      }\n      Integer outboxValue=dialogs_read_outbox_max.get(dialog_id);\n      if (outboxValue == null) {\n        outboxValue=getMessagesStorage().getDialogReadMax(true,dialog_id);\n        dialogs_read_outbox_max.put(dialog_id,outboxValue);\n      }\n      final ArrayList<MessageObject> objects=new ArrayList<>();\n      for (int a=0; a < messagesRes.messages.size(); a++) {\n        TLRPC.Message message=messagesRes.messages.get(a);\n        if (chat != null && chat.megagroup) {\n          message.flags|=TLRPC.MESSAGE_FLAG_MEGAGROUP;\n        }\n        message.dialog_id=dialog_id;\n        if (!scheduled) {\n          message.unread=(message.out ? outboxValue : inboxValue) < message.id;\n        }\n        objects.add(new MessageObject(currentAccount,message,usersLocal,chatsLocal,true,true));\n      }\n      ImageLoader.saveMessagesThumbs(messagesRes.messages);\n      getMessagesStorage().putMessages(messagesRes,dialog_id,-1,0,false,scheduled);\n      AndroidUtilities.runOnUIThread(() -> {\n        ArrayList<Integer> arrayList1=reloadingMessages.get(dialog_id);\n        if (arrayList1 != null) {\n          arrayList1.removeAll(result);\n          if (arrayList1.isEmpty()) {\n            reloadingMessages.remove(dialog_id);\n          }\n        }\n        MessageObject dialogObj=dialogMessage.get(dialog_id);\n        if (dialogObj != null) {\n          for (int a=0; a < objects.size(); a++) {\n            MessageObject obj=objects.get(a);\n            if (dialogObj.getId() == obj.getId()) {\n              dialogMessage.put(dialog_id,obj);\n              if (obj.messageOwner.peer_id.channel_id == 0) {\n                MessageObject obj2=dialogMessagesByIds.get(obj.getId());\n                dialogMessagesByIds.remove(obj.getId());\n                if (obj2 != null) {\n                  dialogMessagesByIds.put(obj2.getId(),obj2);\n                }\n              }\n              getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);\n              break;\n            }\n          }\n        }\n        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects,dialog_id,objects);\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 637,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 3029,
        "startColumnNumber" : 4,
        "endLineNumber" : 3135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void reloadMessages(final ArrayList<Integer> mids,final long dialog_id,boolean scheduled){\n  if (mids.isEmpty()) {\n    return;\n  }\n  TLObject request;\n  final ArrayList<Integer> result=new ArrayList<>();\n  final TLRPC.Chat chat=ChatObject.getChatByDialog(dialog_id,currentAccount);\n  if (ChatObject.isChannel(chat)) {\n    TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n    req.channel=getInputChannel(chat);\n    req.id=result;\n    request=req;\n  }\n else {\n    TLRPC.TL_messages_getMessages req=new TLRPC.TL_messages_getMessages();\n    req.id=result;\n    request=req;\n  }\n  ArrayList<Integer> arrayList=reloadingMessages.get(dialog_id);\n  for (int a=0; a < mids.size(); a++) {\n    Integer mid=mids.get(a);\n    if (arrayList != null && arrayList.contains(mid)) {\n      continue;\n    }\n    result.add(mid);\n  }\n  if (result.isEmpty()) {\n    return;\n  }\n  if (arrayList == null) {\n    arrayList=new ArrayList<>();\n    reloadingMessages.put(dialog_id,arrayList);\n  }\n  arrayList.addAll(result);\n  getConnectionsManager().sendRequest(request,(response,error) -> {\n    if (error == null) {\n      TLRPC.messages_Messages messagesRes=(TLRPC.messages_Messages)response;\n      final SparseArray<TLRPC.User> usersLocal=new SparseArray<>();\n      for (int a=0; a < messagesRes.users.size(); a++) {\n        TLRPC.User u=messagesRes.users.get(a);\n        usersLocal.put(u.id,u);\n      }\n      final SparseArray<TLRPC.Chat> chatsLocal=new SparseArray<>();\n      for (int a=0; a < messagesRes.chats.size(); a++) {\n        TLRPC.Chat c=messagesRes.chats.get(a);\n        chatsLocal.put(c.id,c);\n      }\n      Integer inboxValue=dialogs_read_inbox_max.get(dialog_id);\n      if (inboxValue == null) {\n        inboxValue=getMessagesStorage().getDialogReadMax(false,dialog_id);\n        dialogs_read_inbox_max.put(dialog_id,inboxValue);\n      }\n      Integer outboxValue=dialogs_read_outbox_max.get(dialog_id);\n      if (outboxValue == null) {\n        outboxValue=getMessagesStorage().getDialogReadMax(true,dialog_id);\n        dialogs_read_outbox_max.put(dialog_id,outboxValue);\n      }\n      final ArrayList<MessageObject> objects=new ArrayList<>();\n      for (int a=0; a < messagesRes.messages.size(); a++) {\n        TLRPC.Message message=messagesRes.messages.get(a);\n        if (chat != null && chat.megagroup) {\n          message.flags|=TLRPC.MESSAGE_FLAG_MEGAGROUP;\n        }\n        message.dialog_id=dialog_id;\n        if (!scheduled) {\n          message.unread=(message.out ? outboxValue : inboxValue) < message.id;\n        }\n        objects.add(new MessageObject(currentAccount,message,usersLocal,chatsLocal,true,true));\n      }\n      ImageLoader.saveMessagesThumbs(messagesRes.messages);\n      getMessagesStorage().putMessages(messagesRes,dialog_id,-1,0,false,scheduled);\n      AndroidUtilities.runOnUIThread(() -> {\n        ArrayList<Integer> arrayList1=reloadingMessages.get(dialog_id);\n        if (arrayList1 != null) {\n          arrayList1.removeAll(result);\n          if (arrayList1.isEmpty()) {\n            reloadingMessages.remove(dialog_id);\n          }\n        }\n        MessageObject dialogObj=dialogMessage.get(dialog_id);\n        if (dialogObj != null) {\n          for (int a=0; a < objects.size(); a++) {\n            MessageObject obj=objects.get(a);\n            if (dialogObj.getId() == obj.getId()) {\n              dialogMessage.put(dialog_id,obj);\n              if (obj.messageOwner.peer_id.channel_id == 0) {\n                MessageObject obj2=dialogMessagesByIds.get(obj.getId());\n                dialogMessagesByIds.remove(obj.getId());\n                if (obj2 != null) {\n                  dialogMessagesByIds.put(obj2.getId(),obj2);\n                }\n              }\n              getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);\n              break;\n            }\n          }\n        }\n        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects,dialog_id,objects);\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 656,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 3037,
        "startColumnNumber" : 12,
        "endLineNumber" : 3037,
        "endColumnNumber" : 84
      },
      "nodeContext" : "TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "org.telegram.tgnet.TLRPC.TL_channels_getMessages"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 3037,
    "startColumnNumber" : 48,
    "endLineNumber" : 3037,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}