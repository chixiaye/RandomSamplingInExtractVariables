{
  "id" : 373,
  "expression" : "map",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/base/Splitter.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 531,
      "startColumnNumber" : 23,
      "endLineNumber" : 531,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 531,
        "startColumnNumber" : 23,
        "endLineNumber" : 531,
        "endColumnNumber" : 43
      },
      "nodeContext" : "map.containsKey(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 531,
        "startColumnNumber" : 22,
        "endLineNumber" : 531,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!map.containsKey(key)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 531,
        "startColumnNumber" : 8,
        "endLineNumber" : 531,
        "endColumnNumber" : 78
      },
      "nodeContext" : "checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 531,
        "startColumnNumber" : 8,
        "endLineNumber" : 531,
        "endColumnNumber" : 79
      },
      "nodeContext" : "checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 526,
        "startColumnNumber" : 57,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String key=entryFields.next();\n  checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String value=entryFields.next();\n  map.put(key,value);\n  checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 526,
        "startColumnNumber" : 6,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String entry : outerSplitter.split(sequence)) {\n  Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String key=entryFields.next();\n  checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String value=entryFields.next();\n  map.put(key,value);\n  checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 524,
        "startColumnNumber" : 60,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1423,
        "startLineNumber" : 508,
        "startColumnNumber" : 4,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Splits  {@code sequence} into substrings, splits each substring intoan entry, and returns an unmodifiable map with each of the entries. For example, <code> Splitter.on(';').trimResults().withKeyValueSeparator(\"=>\") .split(\"a=>b ; c=>b\") </code> will return a mapping from  {@code \"a\"} to {@code \"b\"} and{@code \"c\"} to {@code b}. <p>The returned map preserves the order of the entries from {@code sequence}.\n * @throws IllegalArgumentException if the specified sequence does not splitinto valid map entries, or if there are duplicate keys\n */\n@CheckReturnValue public Map<String,String> split(CharSequence sequence){\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 531,
        "startColumnNumber" : 8,
        "endLineNumber" : 531,
        "endColumnNumber" : 79
      },
      "nodeContext" : "checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 535,
      "startColumnNumber" : 8,
      "endLineNumber" : 535,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 535,
        "startColumnNumber" : 8,
        "endLineNumber" : 535,
        "endColumnNumber" : 27
      },
      "nodeContext" : "map.put(key,value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 535,
        "startColumnNumber" : 8,
        "endLineNumber" : 535,
        "endColumnNumber" : 28
      },
      "nodeContext" : "map.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 526,
        "startColumnNumber" : 57,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String key=entryFields.next();\n  checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String value=entryFields.next();\n  map.put(key,value);\n  checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 526,
        "startColumnNumber" : 6,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String entry : outerSplitter.split(sequence)) {\n  Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String key=entryFields.next();\n  checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n  checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  String value=entryFields.next();\n  map.put(key,value);\n  checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 524,
        "startColumnNumber" : 60,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1423,
        "startLineNumber" : 508,
        "startColumnNumber" : 4,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Splits  {@code sequence} into substrings, splits each substring intoan entry, and returns an unmodifiable map with each of the entries. For example, <code> Splitter.on(';').trimResults().withKeyValueSeparator(\"=>\") .split(\"a=>b ; c=>b\") </code> will return a mapping from  {@code \"a\"} to {@code \"b\"} and{@code \"c\"} to {@code b}. <p>The returned map preserves the order of the entries from {@code sequence}.\n * @throws IllegalArgumentException if the specified sequence does not splitinto valid map entries, or if there are duplicate keys\n */\n@CheckReturnValue public Map<String,String> split(CharSequence sequence){\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 535,
        "startColumnNumber" : 8,
        "endLineNumber" : 535,
        "endColumnNumber" : 28
      },
      "nodeContext" : "map.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 539,
      "startColumnNumber" : 41,
      "endLineNumber" : 539,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 539,
        "startColumnNumber" : 13,
        "endLineNumber" : 539,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Collections.unmodifiableMap(map)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 539,
        "startColumnNumber" : 6,
        "endLineNumber" : 539,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return Collections.unmodifiableMap(map);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 524,
        "startColumnNumber" : 60,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1423,
        "startLineNumber" : 508,
        "startColumnNumber" : 4,
        "endLineNumber" : 540,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Splits  {@code sequence} into substrings, splits each substring intoan entry, and returns an unmodifiable map with each of the entries. For example, <code> Splitter.on(';').trimResults().withKeyValueSeparator(\"=>\") .split(\"a=>b ; c=>b\") </code> will return a mapping from  {@code \"a\"} to {@code \"b\"} and{@code \"c\"} to {@code b}. <p>The returned map preserves the order of the entries from {@code sequence}.\n * @throws IllegalArgumentException if the specified sequence does not splitinto valid map entries, or if there are duplicate keys\n */\n@CheckReturnValue public Map<String,String> split(CharSequence sequence){\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  for (  String entry : outerSplitter.split(sequence)) {\n    Iterator<String> entryFields=entrySplitter.splittingIterator(entry);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String key=entryFields.next();\n    checkArgument(!map.containsKey(key),\"Duplicate key [%s] found.\",key);\n    checkArgument(entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n    String value=entryFields.next();\n    map.put(key,value);\n    checkArgument(!entryFields.hasNext(),INVALID_ENTRY_MESSAGE,entry);\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 539,
        "startColumnNumber" : 6,
        "endLineNumber" : 539,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return Collections.unmodifiableMap(map);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 531,
    "startColumnNumber" : 23,
    "endLineNumber" : 531,
    "endColumnNumber" : 26
  }, {
    "charLength" : 3,
    "startLineNumber" : 535,
    "startColumnNumber" : 8,
    "endLineNumber" : 535,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 539,
    "startColumnNumber" : 41,
    "endLineNumber" : 539,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}