{
  "id" : 391,
  "expression" : "len - pos",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/util/TextFile.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "len - pos",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 183,
      "startColumnNumber" : 42,
      "endLineNumber" : 183,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 183,
        "startColumnNumber" : 41,
        "endLineNumber" : 183,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(len - pos)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 183,
        "startColumnNumber" : 35,
        "endLineNumber" : 183,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(int)(len - pos)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 183,
        "startColumnNumber" : 26,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new byte[(int)(len - pos)]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 183,
        "startColumnNumber" : 19,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "tail=new byte[(int)(len - pos)]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 183,
        "startColumnNumber" : 12,
        "endLineNumber" : 183,
        "endColumnNumber" : 54
      },
      "nodeContext" : "byte[] tail=new byte[(int)(len - pos)];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 176,
        "startColumnNumber" : 69,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long len=raf.length();\n  long pos=Math.max(0,len - (numChars * 4 + 1024));\n  raf.seek(pos);\n  byte[] tail=new byte[(int)(len - pos)];\n  raf.readFully(tail);\n  String tails=cs.decode(java.nio.ByteBuffer.wrap(tail)).toString();\n  return tails.substring(Math.max(0,tails.length() - numChars));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (RandomAccessFile raf=new RandomAccessFile(file,\"r\")){\n  long len=raf.length();\n  long pos=Math.max(0,len - (numChars * 4 + 1024));\n  raf.seek(pos);\n  byte[] tail=new byte[(int)(len - pos)];\n  raf.readFully(tail);\n  String tails=cs.decode(java.nio.ByteBuffer.wrap(tail)).toString();\n  return tails.substring(Math.max(0,tails.length() - numChars));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 678,
        "startLineNumber" : 174,
        "startColumnNumber" : 81,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (RandomAccessFile raf=new RandomAccessFile(file,\"r\")){\n    long len=raf.length();\n    long pos=Math.max(0,len - (numChars * 4 + 1024));\n    raf.seek(pos);\n    byte[] tail=new byte[(int)(len - pos)];\n    raf.readFully(tail);\n    String tails=cs.decode(java.nio.ByteBuffer.wrap(tail)).toString();\n    return tails.substring(Math.max(0,tails.length() - numChars));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2514,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Efficiently reads the last N characters (or shorter, if the whole file is shorter than that.) <p> This method first tries to just read the tail section of the file to get the necessary chars. To handle multi-byte variable length encoding (such as UTF-8), we read a larger than necessary chunk. <p> Some multi-byte encoding, such as Shift-JIS (http://en.wikipedia.org/wiki/Shift_JIS) doesn't allow the first byte and the second byte of a single char to be unambiguously identified, so it is possible that we end up decoding incorrectly if we start reading in the middle of a multi-byte character. All the CJK multi-byte encodings that I know of are self-correcting; as they are ASCII-compatible, any ASCII characters or control characters will bring the decoding back in sync, so the worst case we just have some garbage in the beginning that needs to be discarded. To accommodate this, we read additional 1024 bytes. <p> Other encodings, such as UTF-8, are better in that the character boundary is unambiguous, so there can be at most one garbage char. For dealing with UTF-16 and UTF-32, we read at 4 bytes boundary (all the constants and multipliers are multiples of 4.) <p> Note that it is possible to construct a contrived input that fools this algorithm, and in this method we are willing to live with a small possibility of that to avoid reading the whole text. In practice, such an input is very unlikely. <p> So all in all, this algorithm should work decently, and it works quite efficiently on a large text.\n */\npublic @NonNull String fastTail(int numChars,Charset cs) throws IOException {\n  try (RandomAccessFile raf=new RandomAccessFile(file,\"r\")){\n    long len=raf.length();\n    long pos=Math.max(0,len - (numChars * 4 + 1024));\n    raf.seek(pos);\n    byte[] tail=new byte[(int)(len - pos)];\n    raf.readFully(tail);\n    String tails=cs.decode(java.nio.ByteBuffer.wrap(tail)).toString();\n    return tails.substring(Math.max(0,tails.length() - numChars));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 110,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 183,
        "startColumnNumber" : 12,
        "endLineNumber" : 183,
        "endColumnNumber" : 54
      },
      "nodeContext" : "byte[] tail=new byte[(int)(len - pos)];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 183,
    "startColumnNumber" : 42,
    "endLineNumber" : 183,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}