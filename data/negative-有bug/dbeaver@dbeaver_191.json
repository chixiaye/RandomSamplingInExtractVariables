{
  "id" : 191,
  "expression" : "atts.getValue(RegistryConstants.ATTR_ID)",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerLegacy.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "atts.getValue(RegistryConstants.ATTR_ID)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 442,
      "startColumnNumber" : 32,
      "endLineNumber" : 442,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 442,
        "startColumnNumber" : 27,
        "endLineNumber" : 442,
        "endColumnNumber" : 72
      },
      "nodeContext" : "id=atts.getValue(RegistryConstants.ATTR_ID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 442,
        "startColumnNumber" : 20,
        "endLineNumber" : 442,
        "endColumnNumber" : 73
      },
      "nodeContext" : "String id=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 5232,
        "startLineNumber" : 440,
        "startColumnNumber" : 56,
        "endLineNumber" : 514,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String name=atts.getValue(RegistryConstants.ATTR_NAME);\n  String id=atts.getValue(RegistryConstants.ATTR_ID);\n  if (id == null) {\n    id=name;\n  }\n  String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n  DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n  if (provider == null) {\n    log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n    curDataSource=null;\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n  DriverDescriptor driver=provider.getDriver(driverId);\n  if (driver == null) {\n    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n    driver=provider.createDriver(driverId);\n    provider.addDriver(driver);\n  }\n  curDataSource=registry.getDataSource(id);\n  boolean newDataSource=(curDataSource == null);\n  if (newDataSource) {\n    curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n  }\n else {\n    curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n    curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n    curDataSource.clearFilters();\n  }\n  curDataSource.setName(name);\n  curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n  navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n  navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n  navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n  navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n  navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n  navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n  navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n  curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n  final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n  if (folderPath != null) {\n    curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n  }\n  curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n    String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n    if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n      curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n    }\n    String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n    if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n      curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n    }\n  }\n  if (newDataSource) {\n    registry.addDataSourceToList(curDataSource);\n    parseResults.addedDataSources.add(curDataSource);\n  }\n else {\n    parseResults.updatedDataSources.add(curDataSource);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 444,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18989,
        "startLineNumber" : 425,
        "startColumnNumber" : 12,
        "endLineNumber" : 705,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n    String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n    DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n    DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n    if (folder == null) {\n      folder=new DataSourceFolder(registry,parent,name,description);\n      registry.addDataSourceFolder(folder);\n    }\n else {\n      folder.setDescription(description);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n  String name=atts.getValue(RegistryConstants.ATTR_NAME);\n  String id=atts.getValue(RegistryConstants.ATTR_ID);\n  if (id == null) {\n    id=name;\n  }\n  String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n  DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n  if (provider == null) {\n    log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n    curDataSource=null;\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n  DriverDescriptor driver=provider.getDriver(driverId);\n  if (driver == null) {\n    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n    driver=provider.createDriver(driverId);\n    provider.addDriver(driver);\n  }\n  curDataSource=registry.getDataSource(id);\n  boolean newDataSource=(curDataSource == null);\n  if (newDataSource) {\n    curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n  }\n else {\n    curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n    curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n    curDataSource.clearFilters();\n  }\n  curDataSource.setName(name);\n  curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n  navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n  navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n  navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n  navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n  navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n  navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n  navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n  curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n  final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n  if (folderPath != null) {\n    curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n  }\n  curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n    String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n    if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n      curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n    }\n    String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n    if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n      curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n    }\n  }\n  if (newDataSource) {\n    registry.addDataSourceToList(curDataSource);\n    parseResults.addedDataSources.add(curDataSource);\n  }\n else {\n    parseResults.updatedDataSources.add(curDataSource);\n  }\n  break;\n}\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\nDBPDriver driver=curDataSource.getDriver();\nif (CommonUtils.isEmpty(driver.getName())) {\n  if (driver instanceof DriverDescriptor) {\n    ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n    ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n  }\n}\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nconfig.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\nconfig.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\nconfig.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\nconfig.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\nconfig.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\nif (!passwordReadCanceled) {\n  final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n  config.setUserName(creds[0]);\n  if (curDataSource.isSavePassword()) {\n    config.setUserPassword(creds[1]);\n  }\n}\nconfig.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\nconfig.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\nString colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\nif (!CommonUtils.isEmpty(colorValue)) {\n  config.setConnectionColor(colorValue);\n}\nString keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\nif (!CommonUtils.isEmpty(keepAlive)) {\n  try {\n    config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n  }\n catch (  NumberFormatException e) {\n    log.warn(\"Bad keep-alive interval value\",e);\n  }\n}\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1613,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19079,
        "startLineNumber" : 422,
        "startColumnNumber" : 110,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19199,
        "startLineNumber" : 421,
        "startColumnNumber" : 8,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void saxStartElement(SAXReader reader,String namespaceURI,String localName,Attributes atts){\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1644,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 442,
        "startColumnNumber" : 20,
        "endLineNumber" : 442,
        "endColumnNumber" : 73
      },
      "nodeContext" : "String id=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "atts.getValue(RegistryConstants.ATTR_ID)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 646,
      "startColumnNumber" : 43,
      "endLineNumber" : 646,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 646,
        "startColumnNumber" : 31,
        "endLineNumber" : 646,
        "endColumnNumber" : 83
      },
      "nodeContext" : "handlerId=atts.getValue(RegistryConstants.ATTR_ID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 646,
        "startColumnNumber" : 24,
        "endLineNumber" : 646,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String handlerId=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1422,
        "startLineNumber" : 645,
        "startColumnNumber" : 47,
        "endLineNumber" : 665,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String handlerId=atts.getValue(RegistryConstants.ATTR_ID);\n  NetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n  if (handlerDescriptor == null) {\n    log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  curNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\n  curNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\n  curNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\n    curNetworkHandler.setUserName(creds[0]);\n    if (curNetworkHandler.isSavePassword()) {\n      curNetworkHandler.setPassword(creds[1]);\n    }\n  }\n  curDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1449,
        "startLineNumber" : 645,
        "startColumnNumber" : 20,
        "endLineNumber" : 665,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (curDataSource != null) {\n  String handlerId=atts.getValue(RegistryConstants.ATTR_ID);\n  NetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n  if (handlerDescriptor == null) {\n    log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  curNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\n  curNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\n  curNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\n    curNetworkHandler.setUserName(creds[0]);\n    if (curNetworkHandler.isSavePassword()) {\n      curNetworkHandler.setPassword(creds[1]);\n    }\n  }\n  curDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18989,
        "startLineNumber" : 425,
        "startColumnNumber" : 12,
        "endLineNumber" : 705,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n    String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n    DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n    DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n    if (folder == null) {\n      folder=new DataSourceFolder(registry,parent,name,description);\n      registry.addDataSourceFolder(folder);\n    }\n else {\n      folder.setDescription(description);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n  String name=atts.getValue(RegistryConstants.ATTR_NAME);\n  String id=atts.getValue(RegistryConstants.ATTR_ID);\n  if (id == null) {\n    id=name;\n  }\n  String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n  DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n  if (provider == null) {\n    log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n    curDataSource=null;\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n  DriverDescriptor driver=provider.getDriver(driverId);\n  if (driver == null) {\n    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n    driver=provider.createDriver(driverId);\n    provider.addDriver(driver);\n  }\n  curDataSource=registry.getDataSource(id);\n  boolean newDataSource=(curDataSource == null);\n  if (newDataSource) {\n    curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n  }\n else {\n    curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n    curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n    curDataSource.clearFilters();\n  }\n  curDataSource.setName(name);\n  curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n  navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n  navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n  navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n  navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n  navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n  navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n  navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n  curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n  final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n  if (folderPath != null) {\n    curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n  }\n  curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n    String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n    if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n      curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n    }\n    String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n    if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n      curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n    }\n  }\n  if (newDataSource) {\n    registry.addDataSourceToList(curDataSource);\n    parseResults.addedDataSources.add(curDataSource);\n  }\n else {\n    parseResults.updatedDataSources.add(curDataSource);\n  }\n  break;\n}\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\nDBPDriver driver=curDataSource.getDriver();\nif (CommonUtils.isEmpty(driver.getName())) {\n  if (driver instanceof DriverDescriptor) {\n    ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n    ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n  }\n}\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nconfig.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\nconfig.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\nconfig.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\nconfig.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\nconfig.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\nif (!passwordReadCanceled) {\n  final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n  config.setUserName(creds[0]);\n  if (curDataSource.isSavePassword()) {\n    config.setUserPassword(creds[1]);\n  }\n}\nconfig.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\nconfig.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\nString colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\nif (!CommonUtils.isEmpty(colorValue)) {\n  config.setConnectionColor(colorValue);\n}\nString keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\nif (!CommonUtils.isEmpty(keepAlive)) {\n  try {\n    config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n  }\n catch (  NumberFormatException e) {\n    log.warn(\"Bad keep-alive interval value\",e);\n  }\n}\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1613,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19079,
        "startLineNumber" : 422,
        "startColumnNumber" : 110,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19199,
        "startLineNumber" : 421,
        "startColumnNumber" : 8,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void saxStartElement(SAXReader reader,String namespaceURI,String localName,Attributes atts){\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1644,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 646,
        "startColumnNumber" : 24,
        "endLineNumber" : 646,
        "endColumnNumber" : 84
      },
      "nodeContext" : "String handlerId=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "atts.getValue(RegistryConstants.ATTR_ID)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 670,
      "startColumnNumber" : 42,
      "endLineNumber" : 670,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 670,
        "startColumnNumber" : 31,
        "endLineNumber" : 670,
        "endColumnNumber" : 82
      },
      "nodeContext" : "objectID=atts.getValue(RegistryConstants.ATTR_ID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 670,
        "startColumnNumber" : 24,
        "endLineNumber" : 670,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String objectID=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 747,
        "startLineNumber" : 668,
        "startColumnNumber" : 47,
        "endLineNumber" : 679,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\n  String objectID=atts.getValue(RegistryConstants.ATTR_ID);\n  if (typeName != null) {\n    curFilter=new DBSObjectFilter();\n    curFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\n    curFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\n    curFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\n    curDataSource.updateObjectFilter(typeName,objectID,curFilter);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 668,
        "startColumnNumber" : 20,
        "endLineNumber" : 685,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (curDataSource != null) {\n  String typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\n  String objectID=atts.getValue(RegistryConstants.ATTR_ID);\n  if (typeName != null) {\n    curFilter=new DBSObjectFilter();\n    curFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\n    curFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\n    curFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\n    curDataSource.updateObjectFilter(typeName,objectID,curFilter);\n  }\n}\n else {\n  curFilter=new DBSObjectFilter();\n  curFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\n  curFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\n  curFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\n  registry.addSavedFilter(curFilter);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18989,
        "startLineNumber" : 425,
        "startColumnNumber" : 12,
        "endLineNumber" : 705,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n    String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n    DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n    DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n    if (folder == null) {\n      folder=new DataSourceFolder(registry,parent,name,description);\n      registry.addDataSourceFolder(folder);\n    }\n else {\n      folder.setDescription(description);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n  String name=atts.getValue(RegistryConstants.ATTR_NAME);\n  String id=atts.getValue(RegistryConstants.ATTR_ID);\n  if (id == null) {\n    id=name;\n  }\n  String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n  DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n  if (provider == null) {\n    log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n    curDataSource=null;\n    reader.setListener(EMPTY_LISTENER);\n    return;\n  }\n  String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n  DriverDescriptor driver=provider.getDriver(driverId);\n  if (driver == null) {\n    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n    driver=provider.createDriver(driverId);\n    provider.addDriver(driver);\n  }\n  curDataSource=registry.getDataSource(id);\n  boolean newDataSource=(curDataSource == null);\n  if (newDataSource) {\n    curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n  }\n else {\n    curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n    curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n    curDataSource.clearFilters();\n  }\n  curDataSource.setName(name);\n  curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n  DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n  navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n  navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n  navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n  navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n  navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n  navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n  navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n  curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n  final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n  if (folderPath != null) {\n    curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n  }\n  curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n    String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n    if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n      curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n    }\n    String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n    if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n      curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n    }\n  }\n  if (newDataSource) {\n    registry.addDataSourceToList(curDataSource);\n    parseResults.addedDataSources.add(curDataSource);\n  }\n else {\n    parseResults.updatedDataSources.add(curDataSource);\n  }\n  break;\n}\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\nDBPDriver driver=curDataSource.getDriver();\nif (CommonUtils.isEmpty(driver.getName())) {\n  if (driver instanceof DriverDescriptor) {\n    ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n    ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n  }\n}\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nconfig.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\nconfig.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\nconfig.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\nconfig.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\nconfig.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\nif (!passwordReadCanceled) {\n  final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n  config.setUserName(creds[0]);\n  if (curDataSource.isSavePassword()) {\n    config.setUserPassword(creds[1]);\n  }\n}\nconfig.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\nconfig.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\nString colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\nif (!CommonUtils.isEmpty(colorValue)) {\n  config.setConnectionColor(colorValue);\n}\nString keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\nif (!CommonUtils.isEmpty(keepAlive)) {\n  try {\n    config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n  }\n catch (  NumberFormatException e) {\n    log.warn(\"Bad keep-alive interval value\",e);\n  }\n}\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1613,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19079,
        "startLineNumber" : 422,
        "startColumnNumber" : 110,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19199,
        "startLineNumber" : 421,
        "startColumnNumber" : 8,
        "endLineNumber" : 706,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void saxStartElement(SAXReader reader,String namespaceURI,String localName,Attributes atts){\n  isDescription=false;\n  curCommand=null;\nswitch (localName) {\ncase RegistryConstants.TAG_FOLDER:{\n      String name=atts.getValue(RegistryConstants.ATTR_NAME);\n      String description=atts.getValue(RegistryConstants.ATTR_DESCRIPTION);\n      String parentFolder=atts.getValue(RegistryConstants.ATTR_PARENT);\n      DataSourceFolder parent=parentFolder == null ? null : registry.findFolderByPath(parentFolder,true);\n      DataSourceFolder folder=parent == null ? registry.findFolderByPath(name,true) : parent.getChild(name);\n      if (folder == null) {\n        folder=new DataSourceFolder(registry,parent,name,description);\n        registry.addDataSourceFolder(folder);\n      }\n else {\n        folder.setDescription(description);\n      }\n      break;\n    }\ncase RegistryConstants.TAG_DATA_SOURCE:{\n    String name=atts.getValue(RegistryConstants.ATTR_NAME);\n    String id=atts.getValue(RegistryConstants.ATTR_ID);\n    if (id == null) {\n      id=name;\n    }\n    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);\n    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n    if (provider == null) {\n      log.warn(\"Can't find datasource provider \" + providerId + \" for datasource '\"+ name+ \"'\");\n      curDataSource=null;\n      reader.setListener(EMPTY_LISTENER);\n      return;\n    }\n    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);\n    DriverDescriptor driver=provider.getDriver(driverId);\n    if (driver == null) {\n      log.warn(\"Can't find driver \" + driverId + \" in datasource provider \"+ provider.getId()+ \" for datasource '\"+ name+ \"'. Create new driver\");\n      driver=provider.createDriver(driverId);\n      provider.addDriver(driver);\n    }\n    curDataSource=registry.getDataSource(id);\n    boolean newDataSource=(curDataSource == null);\n    if (newDataSource) {\n      curDataSource=new DataSourceDescriptor(registry,storage,DataSourceOriginLocal.INSTANCE,id,driver,new DBPConnectionConfiguration());\n    }\n else {\n      curDataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n      curDataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n      curDataSource.clearFilters();\n    }\n    curDataSource.setName(name);\n    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\n    DataSourceNavigatorSettings navSettings=curDataSource.getNavigatorSettings();\n    navSettings.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS)));\n    navSettings.setShowUtilityObjects(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS)));\n    navSettings.setShowOnlyEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES)));\n    navSettings.setHideFolders(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS)));\n    navSettings.setHideSchemas(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS)));\n    navSettings.setHideVirtualModel(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL)));\n    navSettings.setMergeEntities(CommonUtils.getBoolean(atts.getValue(DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES)));\n    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));\n    final String folderPath=atts.getValue(RegistryConstants.ATTR_FOLDER);\n    if (folderPath != null) {\n      curDataSource.setFolder(registry.findFolderByPath(folderPath,true));\n    }\n    curDataSource.setLockPasswordHash(atts.getValue(RegistryConstants.ATTR_LOCK_PASSWORD));\n{\n      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);\n      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {\n        curDataSource.updateObjectFilter(DBSCatalog.class.getName(),null,new DBSObjectFilter(legacyCatalogFilter,null));\n      }\n      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);\n      if (!CommonUtils.isEmpty(legacySchemaFilter)) {\n        curDataSource.updateObjectFilter(DBSSchema.class.getName(),null,new DBSObjectFilter(legacySchemaFilter,null));\n      }\n    }\n    if (newDataSource) {\n      registry.addDataSourceToList(curDataSource);\n      parseResults.addedDataSources.add(curDataSource);\n    }\n else {\n      parseResults.updatedDataSources.add(curDataSource);\n    }\n    break;\n  }\ncase RegistryConstants.TAG_CONNECTION:if (curDataSource != null) {\n  DBPDriver driver=curDataSource.getDriver();\n  if (CommonUtils.isEmpty(driver.getName())) {\n    if (driver instanceof DriverDescriptor) {\n      ((DriverDescriptor)driver).setName(atts.getValue(RegistryConstants.ATTR_URL));\n      ((DriverDescriptor)driver).setDriverClassName(\"java.sql.Driver\");\n    }\n  }\n  DBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\n  config.setHostName(atts.getValue(RegistryConstants.ATTR_HOST));\n  config.setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));\n  config.setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));\n  config.setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));\n  config.setUrl(atts.getValue(RegistryConstants.ATTR_URL));\n  if (!passwordReadCanceled) {\n    final String[] creds=readSecuredCredentials(atts,curDataSource,null);\n    config.setUserName(creds[0]);\n    if (curDataSource.isSavePassword()) {\n      config.setUserPassword(creds[1]);\n    }\n  }\n  config.setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));\n  config.setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));\n  String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);\n  if (!CommonUtils.isEmpty(colorValue)) {\n    config.setConnectionColor(colorValue);\n  }\n  String keepAlive=atts.getValue(RegistryConstants.ATTR_KEEP_ALIVE);\n  if (!CommonUtils.isEmpty(keepAlive)) {\n    try {\n      config.setKeepAliveInterval(Integer.parseInt(keepAlive));\n    }\n catch (    NumberFormatException e) {\n      log.warn(\"Bad keep-alive interval value\",e);\n    }\n  }\n}\nbreak;\ncase RegistryConstants.TAG_BOOTSTRAP:if (curDataSource != null) {\nDBPConnectionConfiguration config=curDataSource.getConnectionConfiguration();\nif (atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT) != null) {\nconfig.getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_AUTOCOMMIT)));\n}\nif (atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION) != null) {\nconfig.getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_TXN_ISOLATION)));\n}\nif (!CommonUtils.isEmpty(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT))) {\nconfig.getBootstrap().setDefaultCatalogName(atts.getValue(RegistryConstants.ATTR_DEFAULT_OBJECT));\n}\nif (atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS) != null) {\nconfig.getBootstrap().setIgnoreErrors(CommonUtils.toBoolean(atts.getValue(RegistryConstants.ATTR_IGNORE_ERRORS)));\n}\n}\nbreak;\ncase RegistryConstants.TAG_QUERY:curQuery=new StringBuilder();\nbreak;\ncase RegistryConstants.TAG_PROPERTY:if (curNetworkHandler != null) {\ncurNetworkHandler.setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\n else if (curDataSource != null) {\nfinal String propName=atts.getValue(RegistryConstants.ATTR_NAME);\nfinal String propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nif (propName != null) {\nif (propName.startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(propName,propValue);\n}\n else {\ncurDataSource.getConnectionConfiguration().setProperty(propName,propValue);\n}\n}\n}\nbreak;\ncase RegistryConstants.TAG_PROVIDER_PROPERTY:if (curDataSource != null) {\ncurDataSource.getConnectionConfiguration().setProviderProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));\n}\nbreak;\ncase RegistryConstants.TAG_EVENT:if (curDataSource != null) {\nDBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));\ncurCommand=new DBRShellCommand(\"\");\ncurCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));\ncurCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));\nif (curCommand.isWaitProcessFinish()) {\nString timeoutString=atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT);\nint timeoutMs=CommonUtils.toInt(timeoutString,DBRShellCommand.WAIT_PROCESS_TIMEOUT_FOREVER);\ncurCommand.setWaitProcessTimeoutMs(timeoutMs);\n}\ncurCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));\ncurCommand.setPauseAfterExecute(CommonUtils.toInt(atts.getValue(RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE)));\ncurCommand.setWorkingDirectory(atts.getValue(RegistryConstants.ATTR_WORKING_DIRECTORY));\ncurDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);\n}\nbreak;\ncase RegistryConstants.TAG_CUSTOM_PROPERTY:if (curDataSource != null) {\nString propName=atts.getValue(RegistryConstants.ATTR_NAME);\nString propValue=atts.getValue(RegistryConstants.ATTR_VALUE);\nswitch (propName) {\ncase DataSourceRegistry.DEFAULT_AUTO_COMMIT:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultAutoCommit(CommonUtils.toBoolean(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ISOLATION:curDataSource.getConnectionConfiguration().getBootstrap().setDefaultTransactionIsolation(CommonUtils.toInt(propValue));\nbreak;\ncase DataSourceRegistry.DEFAULT_ACTIVE_OBJECT:if (!CommonUtils.isEmpty(propValue)) {\ncurDataSource.getConnectionConfiguration().getBootstrap().setDefaultCatalogName(propValue);\n}\nbreak;\ndefault:curDataSource.getPreferenceStore().getProperties().put(propName,propValue);\nbreak;\n}\n}\nbreak;\ncase RegistryConstants.TAG_NETWORK_HANDLER:if (curDataSource != null) {\nString handlerId=atts.getValue(RegistryConstants.ATTR_ID);\nNetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\nif (handlerDescriptor == null) {\nlog.warn(\"Can't find network handler '\" + handlerId + \"'\");\nreader.setListener(EMPTY_LISTENER);\nreturn;\n}\ncurNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource);\ncurNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));\ncurNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));\nif (!passwordReadCanceled) {\nfinal String[] creds=readSecuredCredentials(atts,curDataSource,\"network/\" + handlerId);\ncurNetworkHandler.setUserName(creds[0]);\nif (curNetworkHandler.isSavePassword()) {\ncurNetworkHandler.setPassword(creds[1]);\n}\n}\ncurDataSource.getConnectionConfiguration().updateHandler(curNetworkHandler);\n}\nbreak;\ncase RegistryConstants.TAG_FILTER:if (curDataSource != null) {\nString typeName=atts.getValue(RegistryConstants.ATTR_TYPE);\nString objectID=atts.getValue(RegistryConstants.ATTR_ID);\nif (typeName != null) {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\ncurDataSource.updateObjectFilter(typeName,objectID,curFilter);\n}\n}\n else {\ncurFilter=new DBSObjectFilter();\ncurFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));\ncurFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));\ncurFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));\nregistry.addSavedFilter(curFilter);\n}\nbreak;\ncase RegistryConstants.TAG_INCLUDE:if (curFilter != null) {\ncurFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_EXCLUDE:if (curFilter != null) {\ncurFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));\n}\nbreak;\ncase RegistryConstants.TAG_DESCRIPTION:isDescription=true;\nbreak;\ncase RegistryConstants.TAG_VIRTUAL_META_DATA:if (curDataSource != null) {\nreader.setListener(curDataSource.getVirtualModel().getModelParser());\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1644,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 670,
        "startColumnNumber" : 24,
        "endLineNumber" : 670,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String objectID=atts.getValue(RegistryConstants.ATTR_ID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 442,
    "startColumnNumber" : 32,
    "endLineNumber" : 442,
    "endColumnNumber" : 72
  }, {
    "charLength" : 40,
    "startLineNumber" : 646,
    "startColumnNumber" : 43,
    "endLineNumber" : 646,
    "endColumnNumber" : 83
  }, {
    "charLength" : 40,
    "startLineNumber" : 670,
    "startColumnNumber" : 42,
    "endLineNumber" : 670,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}