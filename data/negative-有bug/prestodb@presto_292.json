{
  "id" : 292,
  "expression" : "tile.getZoomLevel()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tile.getZoomLevel()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 309,
      "startColumnNumber" : 101,
      "endLineNumber" : 309,
      "endColumnNumber" : 120
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 309,
        "startColumnNumber" : 45,
        "endLineNumber" : 309,
        "endColumnNumber" : 121
      },
      "nodeContext" : "tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 309,
        "startColumnNumber" : 26,
        "endLineNumber" : 309,
        "endColumnNumber" : 121
      },
      "nodeContext" : "bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 309,
        "startColumnNumber" : 20,
        "endLineNumber" : 309,
        "endColumnNumber" : 122
      },
      "nodeContext" : "Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 308,
        "startColumnNumber" : 21,
        "endLineNumber" : 314,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 305,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (include) {\n  BIGINT.writeLong(blockBuilder,tile.encode());\n}\n else {\n  Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 303,
        "startColumnNumber" : 57,
        "endLineNumber" : 315,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 315,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int y=topTile.getY(); y < tileY; y++) {\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1440,
        "startLineNumber" : 300,
        "startColumnNumber" : 88,
        "endLineNumber" : 332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1520,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5787,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6427,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Description(\"Given a (latitude, longitude) point, a radius in kilometers and a zoom level, \" + \"returns a minimum set of Bing tiles at specified zoom level that cover a circle of \" + \"specified radius around the specified point.\") @ScalarFunction(\"bing_tiles_around\") @SqlType(\"array(\" + BingTileType.NAME + \")\") public static Block bingTilesAround(@SqlType(StandardTypes.DOUBLE) double latitude,@SqlType(StandardTypes.DOUBLE) double longitude,@SqlType(StandardTypes.INTEGER) long zoomLevelAsLong,@SqlType(StandardTypes.DOUBLE) double radiusInKm){\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 731,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 309,
        "startColumnNumber" : 20,
        "endLineNumber" : 309,
        "endColumnNumber" : 122
      },
      "nodeContext" : "Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "tile.getZoomLevel()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 325,
      "startColumnNumber" : 94,
      "endLineNumber" : 325,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 325,
        "startColumnNumber" : 42,
        "endLineNumber" : 325,
        "endColumnNumber" : 114
      },
      "nodeContext" : "tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 325,
        "startColumnNumber" : 26,
        "endLineNumber" : 325,
        "endColumnNumber" : 114
      },
      "nodeContext" : "topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 325,
        "startColumnNumber" : 20,
        "endLineNumber" : 325,
        "endColumnNumber" : 115
      },
      "nodeContext" : "Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 324,
        "startColumnNumber" : 21,
        "endLineNumber" : 330,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 321,
        "startColumnNumber" : 16,
        "endLineNumber" : 330,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (include) {\n  BIGINT.writeLong(blockBuilder,tile.encode());\n}\n else {\n  Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 319,
        "startColumnNumber" : 60,
        "endLineNumber" : 331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 319,
        "startColumnNumber" : 12,
        "endLineNumber" : 331,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int y=bottomTile.getY(); y > tileY; y--) {\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1440,
        "startLineNumber" : 300,
        "startColumnNumber" : 88,
        "endLineNumber" : 332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1520,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 332,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5787,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6427,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Description(\"Given a (latitude, longitude) point, a radius in kilometers and a zoom level, \" + \"returns a minimum set of Bing tiles at specified zoom level that cover a circle of \" + \"specified radius around the specified point.\") @ScalarFunction(\"bing_tiles_around\") @SqlType(\"array(\" + BingTileType.NAME + \")\") public static Block bingTilesAround(@SqlType(StandardTypes.DOUBLE) double latitude,@SqlType(StandardTypes.DOUBLE) double longitude,@SqlType(StandardTypes.INTEGER) long zoomLevelAsLong,@SqlType(StandardTypes.DOUBLE) double radiusInKm){\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 731,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 325,
        "startColumnNumber" : 20,
        "endLineNumber" : 325,
        "endColumnNumber" : 115
      },
      "nodeContext" : "Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "tile.getZoomLevel()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 343,
      "startColumnNumber" : 106,
      "endLineNumber" : 343,
      "endColumnNumber" : 125
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 343,
        "startColumnNumber" : 46,
        "endLineNumber" : 343,
        "endColumnNumber" : 126
      },
      "nodeContext" : "tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 343,
        "startColumnNumber" : 26,
        "endLineNumber" : 343,
        "endColumnNumber" : 126
      },
      "nodeContext" : "bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 343,
        "startColumnNumber" : 20,
        "endLineNumber" : 343,
        "endColumnNumber" : 127
      },
      "nodeContext" : "Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 342,
        "startColumnNumber" : 21,
        "endLineNumber" : 348,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 339,
        "startColumnNumber" : 16,
        "endLineNumber" : 348,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (include) {\n  BIGINT.writeLong(blockBuilder,tile.encode());\n}\n else {\n  Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 599,
        "startLineNumber" : 337,
        "startColumnNumber" : 57,
        "endLineNumber" : 349,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 337,
        "startColumnNumber" : 12,
        "endLineNumber" : 349,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int y=topTile.getY(); y < tileY; y++) {\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 334,
        "startColumnNumber" : 84,
        "endLineNumber" : 366,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1526,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 366,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5787,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6427,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Description(\"Given a (latitude, longitude) point, a radius in kilometers and a zoom level, \" + \"returns a minimum set of Bing tiles at specified zoom level that cover a circle of \" + \"specified radius around the specified point.\") @ScalarFunction(\"bing_tiles_around\") @SqlType(\"array(\" + BingTileType.NAME + \")\") public static Block bingTilesAround(@SqlType(StandardTypes.DOUBLE) double latitude,@SqlType(StandardTypes.DOUBLE) double longitude,@SqlType(StandardTypes.INTEGER) long zoomLevelAsLong,@SqlType(StandardTypes.DOUBLE) double radiusInKm){\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 731,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 343,
        "startColumnNumber" : 20,
        "endLineNumber" : 343,
        "endColumnNumber" : 127
      },
      "nodeContext" : "Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "tile.getZoomLevel()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 359,
      "startColumnNumber" : 99,
      "endLineNumber" : 359,
      "endColumnNumber" : 118
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 359,
        "startColumnNumber" : 43,
        "endLineNumber" : 359,
        "endColumnNumber" : 119
      },
      "nodeContext" : "tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 359,
        "startColumnNumber" : 26,
        "endLineNumber" : 359,
        "endColumnNumber" : 119
      },
      "nodeContext" : "topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 359,
        "startColumnNumber" : 20,
        "endLineNumber" : 359,
        "endColumnNumber" : 120
      },
      "nodeContext" : "Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 358,
        "startColumnNumber" : 21,
        "endLineNumber" : 364,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 355,
        "startColumnNumber" : 16,
        "endLineNumber" : 364,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (include) {\n  BIGINT.writeLong(blockBuilder,tile.encode());\n}\n else {\n  Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n  if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n    include=true;\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 353,
        "startColumnNumber" : 60,
        "endLineNumber" : 365,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 353,
        "startColumnNumber" : 12,
        "endLineNumber" : 365,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int y=bottomTile.getY(); y > tileY; y--) {\n  BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n  if (include) {\n    BIGINT.writeLong(blockBuilder,tile.encode());\n  }\n else {\n    Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n    if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n      include=true;\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 334,
        "startColumnNumber" : 84,
        "endLineNumber" : 366,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1526,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 366,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n  boolean include=false;\n  for (int y=topTile.getY(); y < tileY; y++) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n  include=false;\n  for (int y=bottomTile.getY(); y > tileY; y--) {\n    BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n    if (include) {\n      BIGINT.writeLong(blockBuilder,tile.encode());\n    }\n else {\n      Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n      if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n        include=true;\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5787,
        "startLineNumber" : 244,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 676,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6427,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Description(\"Given a (latitude, longitude) point, a radius in kilometers and a zoom level, \" + \"returns a minimum set of Bing tiles at specified zoom level that cover a circle of \" + \"specified radius around the specified point.\") @ScalarFunction(\"bing_tiles_around\") @SqlType(\"array(\" + BingTileType.NAME + \")\") public static Block bingTilesAround(@SqlType(StandardTypes.DOUBLE) double latitude,@SqlType(StandardTypes.DOUBLE) double longitude,@SqlType(StandardTypes.INTEGER) long zoomLevelAsLong,@SqlType(StandardTypes.DOUBLE) double radiusInKm){\n  checkLatitude(latitude,LATITUDE_OUT_OF_RANGE);\n  checkLongitude(longitude,LONGITUDE_OUT_OF_RANGE);\n  checkZoomLevel(zoomLevelAsLong);\n  checkCondition(radiusInKm >= 0,\"Radius must be >= 0\");\n  checkCondition(radiusInKm <= 1_000,\"Radius must be <= 1,000 km\");\n  int zoomLevel=toIntExact(zoomLevelAsLong);\n  long mapSize=mapSize(zoomLevel);\n  int maxTileIndex=(int)(mapSize / TILE_PIXELS) - 1;\n  int tileY=latitudeToTileY(latitude,mapSize);\n  int tileX=longitudeToTileX(longitude,mapSize);\n  double topLatitude=addDistanceToLatitude(latitude,radiusInKm,0);\n  BingTile topTile=latitudeLongitudeToTile(topLatitude,longitude,zoomLevel);\n  double bottomLatitude=addDistanceToLatitude(latitude,radiusInKm,180);\n  BingTile bottomTile=latitudeLongitudeToTile(bottomLatitude,longitude,zoomLevel);\n  double leftLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,270);\n  BingTile leftTile=latitudeLongitudeToTile(latitude,leftLongitude,zoomLevel);\n  double rightLongitude=addDistanceToLongitude(latitude,longitude,radiusInKm,90);\n  BingTile rightTile=latitudeLongitudeToTile(latitude,rightLongitude,zoomLevel);\n  boolean wrapAroundX=rightTile.getX() < leftTile.getX();\n  int tileCountX=wrapAroundX ? (rightTile.getX() + maxTileIndex - leftTile.getX() + 2) : (rightTile.getX() - leftTile.getX() + 1);\n  int tileCountY=bottomTile.getY() - topTile.getY() + 1;\n  int totalTileCount=tileCountX * tileCountY;\n  checkCondition(totalTileCount <= 1_000_000,\"The number of tiles covering input rectangle exceeds the limit of 1M. Number of tiles: %d. Radius: %.1f km. Zoom level: %d.\",totalTileCount,radiusInKm,zoomLevel);\n  BlockBuilder blockBuilder=BIGINT.createBlockBuilder(null,totalTileCount);\n  for (int i=0; i < tileCountX; i++) {\n    int x=(leftTile.getX() + i) % (maxTileIndex + 1);\n    BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(x,tileY,zoomLevel).encode());\n  }\n  for (int y=topTile.getY(); y <= bottomTile.getY(); y++) {\n    if (y != tileY) {\n      BIGINT.writeLong(blockBuilder,BingTile.fromCoordinates(tileX,y,zoomLevel).encode());\n    }\n  }\n  GreatCircleDistanceToPoint distanceToCenter=new GreatCircleDistanceToPoint(latitude,longitude);\n  for (int x=rightTile.getX(); x != tileX; x=(x == 0) ? maxTileIndex : x - 1) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topLeftCorner=tileXYToLatitudeLongitude(tile.getX(),tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topLeftCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  for (int x=leftTile.getX(); x != tileX; x=(x + 1) % (maxTileIndex + 1)) {\n    boolean include=false;\n    for (int y=topTile.getY(); y < tileY; y++) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point bottomRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY() + 1,tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,bottomRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n    include=false;\n    for (int y=bottomTile.getY(); y > tileY; y--) {\n      BingTile tile=BingTile.fromCoordinates(x,y,zoomLevel);\n      if (include) {\n        BIGINT.writeLong(blockBuilder,tile.encode());\n      }\n else {\n        Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n        if (withinDistance(distanceToCenter,radiusInKm,topRightCorner)) {\n          include=true;\n          BIGINT.writeLong(blockBuilder,tile.encode());\n        }\n      }\n    }\n  }\n  return blockBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 731,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 359,
        "startColumnNumber" : 20,
        "endLineNumber" : 359,
        "endColumnNumber" : 120
      },
      "nodeContext" : "Point topRightCorner=tileXYToLatitudeLongitude(tile.getX() + 1,tile.getY(),tile.getZoomLevel());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 309,
    "startColumnNumber" : 101,
    "endLineNumber" : 309,
    "endColumnNumber" : 120
  }, {
    "charLength" : 19,
    "startLineNumber" : 325,
    "startColumnNumber" : 94,
    "endLineNumber" : 325,
    "endColumnNumber" : 113
  }, {
    "charLength" : 19,
    "startLineNumber" : 343,
    "startColumnNumber" : 106,
    "endLineNumber" : 343,
    "endColumnNumber" : 125
  }, {
    "charLength" : 19,
    "startLineNumber" : 359,
    "startColumnNumber" : 99,
    "endLineNumber" : 359,
    "endColumnNumber" : 118
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  } ]
}