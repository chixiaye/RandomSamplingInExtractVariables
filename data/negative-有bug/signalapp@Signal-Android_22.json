{
  "id" : 22,
  "expression" : "\"video encoder: returned output buffer: \"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/video/videoconverter/VideoTrackConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"video encoder: returned output buffer: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 322,
      "startColumnNumber" : 27,
      "endLineNumber" : 322,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 322,
        "startColumnNumber" : 27,
        "endLineNumber" : 322,
        "endColumnNumber" : 95
      },
      "nodeContext" : "\"video encoder: returned output buffer: \" + encoderOutputBufferIndex",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 321,
        "startColumnNumber" : 25,
        "endLineNumber" : 324,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n  Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 321,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (VERBOSE) {\n  Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n  Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3149,
        "startLineNumber" : 297,
        "startColumnNumber" : 92,
        "endLineNumber" : 347,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int encoderOutputBufferIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderOutputBufferInfo,TIMEOUT_USEC);\n  if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    if (VERBOSE)     Log.d(TAG,\"no video encoder output buffer\");\n    if (mVideoDecoderDone) {\n      Log.w(TAG,\"mVideoDecoderDone, but didn't get BUFFER_FLAG_END_OF_STREAM\");\n      mVideoEncodedFrameCount=mVideoDecodedFrameCount;\n      mVideoEncoderDone=true;\n    }\n    break;\n  }\n  if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: output buffers changed\");\n    mVideoEncoderOutputBuffers=mVideoEncoder.getOutputBuffers();\n    break;\n  }\n  if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: output format changed\");\n    Preconditions.checkState(\"video encoder changed its output format again?\",mOutputVideoTrack < 0);\n    mEncoderOutputVideoFormat=mVideoEncoder.getOutputFormat();\n    break;\n  }\n  Preconditions.checkState(\"should have added track before processing output\",mMuxer != null);\n  if (VERBOSE) {\n    Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n    Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n  }\n  final ByteBuffer encoderOutputBuffer=mVideoEncoderOutputBuffers[encoderOutputBufferIndex];\n  if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: codec config buffer\");\n    mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  if (VERBOSE) {\n    Log.d(TAG,\"video encoder: returned buffer for time \" + mVideoEncoderOutputBufferInfo.presentationTimeUs);\n  }\n  if (mVideoEncoderOutputBufferInfo.size != 0) {\n    mMuxer.writeSampleData(mOutputVideoTrack,encoderOutputBuffer,mVideoEncoderOutputBufferInfo);\n    mMuxingVideoPresentationTime=Math.max(mMuxingVideoPresentationTime,mVideoEncoderOutputBufferInfo.presentationTimeUs);\n  }\n  if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: EOS\");\n    mVideoEncoderDone=true;\n  }\n  mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n  mVideoEncodedFrameCount++;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3233,
        "startLineNumber" : 297,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (!mVideoEncoderDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n  final int encoderOutputBufferIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderOutputBufferInfo,TIMEOUT_USEC);\n  if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n    if (VERBOSE)     Log.d(TAG,\"no video encoder output buffer\");\n    if (mVideoDecoderDone) {\n      Log.w(TAG,\"mVideoDecoderDone, but didn't get BUFFER_FLAG_END_OF_STREAM\");\n      mVideoEncodedFrameCount=mVideoDecodedFrameCount;\n      mVideoEncoderDone=true;\n    }\n    break;\n  }\n  if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: output buffers changed\");\n    mVideoEncoderOutputBuffers=mVideoEncoder.getOutputBuffers();\n    break;\n  }\n  if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: output format changed\");\n    Preconditions.checkState(\"video encoder changed its output format again?\",mOutputVideoTrack < 0);\n    mEncoderOutputVideoFormat=mVideoEncoder.getOutputFormat();\n    break;\n  }\n  Preconditions.checkState(\"should have added track before processing output\",mMuxer != null);\n  if (VERBOSE) {\n    Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n    Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n  }\n  final ByteBuffer encoderOutputBuffer=mVideoEncoderOutputBuffers[encoderOutputBufferIndex];\n  if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: codec config buffer\");\n    mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    break;\n  }\n  if (VERBOSE) {\n    Log.d(TAG,\"video encoder: returned buffer for time \" + mVideoEncoderOutputBufferInfo.presentationTimeUs);\n  }\n  if (mVideoEncoderOutputBufferInfo.size != 0) {\n    mMuxer.writeSampleData(mOutputVideoTrack,encoderOutputBuffer,mVideoEncoderOutputBufferInfo);\n    mMuxingVideoPresentationTime=Math.max(mMuxingVideoPresentationTime,mVideoEncoderOutputBufferInfo.presentationTimeUs);\n  }\n  if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    if (VERBOSE)     Log.d(TAG,\"video encoder: EOS\");\n    mVideoEncoderDone=true;\n  }\n  mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n  mVideoEncodedFrameCount++;\n  break;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 244,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8969,
        "startLineNumber" : 189,
        "startColumnNumber" : 57,
        "endLineNumber" : 348,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  while (!mVideoExtractorDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    int decoderInputBufferIndex=mVideoDecoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video decoder input buffer\");\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned input buffer: \" + decoderInputBufferIndex);\n    }\n    final ByteBuffer decoderInputBuffer=mVideoDecoderInputBuffers[decoderInputBufferIndex];\n    final int size=mVideoExtractor.readSampleData(decoderInputBuffer,0);\n    final long presentationTime=mVideoExtractor.getSampleTime();\n    if (VERBOSE) {\n      Log.d(TAG,\"video extractor: returned buffer of size \" + size);\n      Log.d(TAG,\"video extractor: returned buffer for time \" + presentationTime);\n    }\n    mVideoExtractorDone=size < 0 || (mTimeTo > 0 && presentationTime > mTimeTo * 1000);\n    if (mVideoExtractorDone) {\n      if (VERBOSE)       Log.d(TAG,\"video extractor: EOS\");\n      mVideoDecoder.queueInputBuffer(decoderInputBufferIndex,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n else {\n      mVideoDecoder.queueInputBuffer(decoderInputBufferIndex,0,size,presentationTime,mVideoExtractor.getSampleFlags());\n    }\n    mVideoExtractor.advance();\n    mVideoExtractedFrameCount++;\n    break;\n  }\n  while (!mVideoDecoderDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    final int decoderOutputBufferIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video decoder output buffer\");\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: output buffers changed\");\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      if (VERBOSE) {\n        Log.d(TAG,\"video decoder: output format changed: \" + mVideoDecoder.getOutputFormat());\n      }\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned output buffer: \" + decoderOutputBufferIndex);\n      Log.d(TAG,\"video decoder: returned buffer of size \" + mVideoDecoderOutputBufferInfo.size);\n    }\n    if ((mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: codec config buffer\");\n      mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    if (mVideoDecoderOutputBufferInfo.presentationTimeUs < mTimeFrom * 1000 && (mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) == 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: frame prior to \" + mVideoDecoderOutputBufferInfo.presentationTimeUs);\n      mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned buffer for time \" + mVideoDecoderOutputBufferInfo.presentationTimeUs);\n    }\n    boolean render=mVideoDecoderOutputBufferInfo.size != 0;\n    mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,render);\n    if (render) {\n      if (VERBOSE)       Log.d(TAG,\"output surface: await new image\");\n      mOutputSurface.awaitNewImage();\n      if (VERBOSE)       Log.d(TAG,\"output surface: draw image\");\n      mOutputSurface.drawImage();\n      mInputSurface.setPresentationTime(mVideoDecoderOutputBufferInfo.presentationTimeUs * 1000);\n      if (VERBOSE)       Log.d(TAG,\"input surface: swap buffers\");\n      mInputSurface.swapBuffers();\n      if (VERBOSE)       Log.d(TAG,\"video encoder: notified of new frame\");\n    }\n    if ((mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: EOS\");\n      mVideoDecoderDone=true;\n      mVideoEncoder.signalEndOfInputStream();\n    }\n    mVideoDecodedFrameCount++;\n    break;\n  }\n  while (!mVideoEncoderDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    final int encoderOutputBufferIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video encoder output buffer\");\n      if (mVideoDecoderDone) {\n        Log.w(TAG,\"mVideoDecoderDone, but didn't get BUFFER_FLAG_END_OF_STREAM\");\n        mVideoEncodedFrameCount=mVideoDecodedFrameCount;\n        mVideoEncoderDone=true;\n      }\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: output buffers changed\");\n      mVideoEncoderOutputBuffers=mVideoEncoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: output format changed\");\n      Preconditions.checkState(\"video encoder changed its output format again?\",mOutputVideoTrack < 0);\n      mEncoderOutputVideoFormat=mVideoEncoder.getOutputFormat();\n      break;\n    }\n    Preconditions.checkState(\"should have added track before processing output\",mMuxer != null);\n    if (VERBOSE) {\n      Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n      Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n    }\n    final ByteBuffer encoderOutputBuffer=mVideoEncoderOutputBuffers[encoderOutputBufferIndex];\n    if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: codec config buffer\");\n      mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video encoder: returned buffer for time \" + mVideoEncoderOutputBufferInfo.presentationTimeUs);\n    }\n    if (mVideoEncoderOutputBufferInfo.size != 0) {\n      mMuxer.writeSampleData(mOutputVideoTrack,encoderOutputBuffer,mVideoEncoderOutputBufferInfo);\n      mMuxingVideoPresentationTime=Math.max(mMuxingVideoPresentationTime,mVideoEncoderOutputBufferInfo.presentationTimeUs);\n    }\n    if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: EOS\");\n      mVideoEncoderDone=true;\n    }\n    mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    mVideoEncodedFrameCount++;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 677,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9022,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 348,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void step() throws IOException, TranscodingException {\n  while (!mVideoExtractorDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    int decoderInputBufferIndex=mVideoDecoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (decoderInputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video decoder input buffer\");\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned input buffer: \" + decoderInputBufferIndex);\n    }\n    final ByteBuffer decoderInputBuffer=mVideoDecoderInputBuffers[decoderInputBufferIndex];\n    final int size=mVideoExtractor.readSampleData(decoderInputBuffer,0);\n    final long presentationTime=mVideoExtractor.getSampleTime();\n    if (VERBOSE) {\n      Log.d(TAG,\"video extractor: returned buffer of size \" + size);\n      Log.d(TAG,\"video extractor: returned buffer for time \" + presentationTime);\n    }\n    mVideoExtractorDone=size < 0 || (mTimeTo > 0 && presentationTime > mTimeTo * 1000);\n    if (mVideoExtractorDone) {\n      if (VERBOSE)       Log.d(TAG,\"video extractor: EOS\");\n      mVideoDecoder.queueInputBuffer(decoderInputBufferIndex,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    }\n else {\n      mVideoDecoder.queueInputBuffer(decoderInputBufferIndex,0,size,presentationTime,mVideoExtractor.getSampleFlags());\n    }\n    mVideoExtractor.advance();\n    mVideoExtractedFrameCount++;\n    break;\n  }\n  while (!mVideoDecoderDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    final int decoderOutputBufferIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderOutputBufferInfo,TIMEOUT_USEC);\n    if (decoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video decoder output buffer\");\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: output buffers changed\");\n      break;\n    }\n    if (decoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      if (VERBOSE) {\n        Log.d(TAG,\"video decoder: output format changed: \" + mVideoDecoder.getOutputFormat());\n      }\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned output buffer: \" + decoderOutputBufferIndex);\n      Log.d(TAG,\"video decoder: returned buffer of size \" + mVideoDecoderOutputBufferInfo.size);\n    }\n    if ((mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: codec config buffer\");\n      mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    if (mVideoDecoderOutputBufferInfo.presentationTimeUs < mTimeFrom * 1000 && (mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) == 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: frame prior to \" + mVideoDecoderOutputBufferInfo.presentationTimeUs);\n      mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,false);\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video decoder: returned buffer for time \" + mVideoDecoderOutputBufferInfo.presentationTimeUs);\n    }\n    boolean render=mVideoDecoderOutputBufferInfo.size != 0;\n    mVideoDecoder.releaseOutputBuffer(decoderOutputBufferIndex,render);\n    if (render) {\n      if (VERBOSE)       Log.d(TAG,\"output surface: await new image\");\n      mOutputSurface.awaitNewImage();\n      if (VERBOSE)       Log.d(TAG,\"output surface: draw image\");\n      mOutputSurface.drawImage();\n      mInputSurface.setPresentationTime(mVideoDecoderOutputBufferInfo.presentationTimeUs * 1000);\n      if (VERBOSE)       Log.d(TAG,\"input surface: swap buffers\");\n      mInputSurface.swapBuffers();\n      if (VERBOSE)       Log.d(TAG,\"video encoder: notified of new frame\");\n    }\n    if ((mVideoDecoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video decoder: EOS\");\n      mVideoDecoderDone=true;\n      mVideoEncoder.signalEndOfInputStream();\n    }\n    mVideoDecodedFrameCount++;\n    break;\n  }\n  while (!mVideoEncoderDone && (mEncoderOutputVideoFormat == null || mMuxer != null)) {\n    final int encoderOutputBufferIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderOutputBufferInfo,TIMEOUT_USEC);\n    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n      if (VERBOSE)       Log.d(TAG,\"no video encoder output buffer\");\n      if (mVideoDecoderDone) {\n        Log.w(TAG,\"mVideoDecoderDone, but didn't get BUFFER_FLAG_END_OF_STREAM\");\n        mVideoEncodedFrameCount=mVideoDecodedFrameCount;\n        mVideoEncoderDone=true;\n      }\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: output buffers changed\");\n      mVideoEncoderOutputBuffers=mVideoEncoder.getOutputBuffers();\n      break;\n    }\n    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: output format changed\");\n      Preconditions.checkState(\"video encoder changed its output format again?\",mOutputVideoTrack < 0);\n      mEncoderOutputVideoFormat=mVideoEncoder.getOutputFormat();\n      break;\n    }\n    Preconditions.checkState(\"should have added track before processing output\",mMuxer != null);\n    if (VERBOSE) {\n      Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n      Log.d(TAG,\"video encoder: returned buffer of size \" + mVideoEncoderOutputBufferInfo.size);\n    }\n    final ByteBuffer encoderOutputBuffer=mVideoEncoderOutputBuffers[encoderOutputBufferIndex];\n    if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: codec config buffer\");\n      mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n      break;\n    }\n    if (VERBOSE) {\n      Log.d(TAG,\"video encoder: returned buffer for time \" + mVideoEncoderOutputBufferInfo.presentationTimeUs);\n    }\n    if (mVideoEncoderOutputBufferInfo.size != 0) {\n      mMuxer.writeSampleData(mOutputVideoTrack,encoderOutputBuffer,mVideoEncoderOutputBufferInfo);\n      mMuxingVideoPresentationTime=Math.max(mMuxingVideoPresentationTime,mVideoEncoderOutputBufferInfo.presentationTimeUs);\n    }\n    if ((mVideoEncoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      if (VERBOSE)       Log.d(TAG,\"video encoder: EOS\");\n      mVideoEncoderDone=true;\n    }\n    mVideoEncoder.releaseOutputBuffer(encoderOutputBufferIndex,false);\n    mVideoEncodedFrameCount++;\n    break;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 684,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Log.d(TAG,\"video encoder: returned output buffer: \" + encoderOutputBufferIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 322,
    "startColumnNumber" : 27,
    "endLineNumber" : 322,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}