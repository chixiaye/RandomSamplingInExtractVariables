{
  "id" : 366,
  "expression" : "initializationLatch.getCount() > 0",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/server/coordination/ChangeRequestHttpSyncer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "initializationLatch.getCount() > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 258,
      "startColumnNumber" : 22,
      "endLineNumber" : 258,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 258,
        "startColumnNumber" : 18,
        "endLineNumber" : 261,
        "endColumnNumber" : 19
      },
      "nodeContext" : "if (initializationLatch.getCount() > 0) {\n  initializationLatch.countDown();\n  log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1791,
        "startLineNumber" : 228,
        "startColumnNumber" : 20,
        "endLineNumber" : 269,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n    log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n    lastSuccessfulSyncTime=System.currentTimeMillis();\n    return;\n  }\n else   if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n    handleFailure(new RE(\"Bad Sync Response.\"));\n    return;\n  }\n  log.debug(\"Received sync response from [%s]\",logIdentity);\n  ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n  log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n  if (changes.isResetCounter()) {\n    log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n    counter=null;\n    return;\n  }\n  if (counter == null) {\n    listener.fullSync(changes.getRequests());\n  }\n else {\n    listener.deltaSync(changes.getRequests());\n  }\n  counter=changes.getCounter();\n  if (initializationLatch.getCount() > 0) {\n    initializationLatch.countDown();\n    log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n  }\n  if (consecutiveFailedAttemptCount > 0) {\n    consecutiveFailedAttemptCount=0;\n    log.info(\"[%s] synced successfully.\",logIdentity);\n  }\n  lastSuccessfulSyncTime=System.currentTimeMillis();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2449,
        "startLineNumber" : 228,
        "startColumnNumber" : 16,
        "endLineNumber" : 286,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n    log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n    lastSuccessfulSyncTime=System.currentTimeMillis();\n    return;\n  }\n else   if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n    handleFailure(new RE(\"Bad Sync Response.\"));\n    return;\n  }\n  log.debug(\"Received sync response from [%s]\",logIdentity);\n  ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n  log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n  if (changes.isResetCounter()) {\n    log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n    counter=null;\n    return;\n  }\n  if (counter == null) {\n    listener.fullSync(changes.getRequests());\n  }\n else {\n    listener.deltaSync(changes.getRequests());\n  }\n  counter=changes.getCounter();\n  if (initializationLatch.getCount() > 0) {\n    initializationLatch.countDown();\n    log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n  }\n  if (consecutiveFailedAttemptCount > 0) {\n    consecutiveFailedAttemptCount=0;\n    log.info(\"[%s] synced successfully.\",logIdentity);\n  }\n  lastSuccessfulSyncTime=System.currentTimeMillis();\n}\n catch (Exception ex) {\n  String logMsg=StringUtils.nonStrictFormat(\"Error processing sync response from [%s]. Reason [%s]\",logIdentity,ex.getMessage());\n  if (incrementFailedAttemptAndCheckUnstabilityTimeout()) {\n    log.error(ex,logMsg);\n  }\n else {\n    log.info(\"Temporary Failure. %s\",logMsg);\n    log.debug(ex,logMsg);\n  }\n}\n finally {\n  addNextSyncToWorkQueue();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 195,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 2689,
        "startLineNumber" : 222,
        "startColumnNumber" : 43,
        "endLineNumber" : 287,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  if (!startStopLock.awaitStarted(1,TimeUnit.MILLISECONDS)) {\n    log.info(\"Skipping sync() success for server[%s].\",logIdentity);\n    return;\n  }\n  try {\n    if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n      log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n      lastSuccessfulSyncTime=System.currentTimeMillis();\n      return;\n    }\n else     if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n      handleFailure(new RE(\"Bad Sync Response.\"));\n      return;\n    }\n    log.debug(\"Received sync response from [%s]\",logIdentity);\n    ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n    log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n    if (changes.isResetCounter()) {\n      log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n      counter=null;\n      return;\n    }\n    if (counter == null) {\n      listener.fullSync(changes.getRequests());\n    }\n else {\n      listener.deltaSync(changes.getRequests());\n    }\n    counter=changes.getCounter();\n    if (initializationLatch.getCount() > 0) {\n      initializationLatch.countDown();\n      log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n    }\n    if (consecutiveFailedAttemptCount > 0) {\n      consecutiveFailedAttemptCount=0;\n      log.info(\"[%s] synced successfully.\",logIdentity);\n    }\n    lastSuccessfulSyncTime=System.currentTimeMillis();\n  }\n catch (  Exception ex) {\n    String logMsg=StringUtils.nonStrictFormat(\"Error processing sync response from [%s]. Reason [%s]\",logIdentity,ex.getMessage());\n    if (incrementFailedAttemptAndCheckUnstabilityTimeout()) {\n      log.error(ex,logMsg);\n    }\n else {\n      log.info(\"Temporary Failure. %s\",logMsg);\n      log.debug(ex,logMsg);\n    }\n  }\n finally {\n    addNextSyncToWorkQueue();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2718,
        "startLineNumber" : 222,
        "startColumnNumber" : 14,
        "endLineNumber" : 287,
        "endColumnNumber" : 15
      },
      "nodeContext" : "synchronized (startStopLock) {\n  if (!startStopLock.awaitStarted(1,TimeUnit.MILLISECONDS)) {\n    log.info(\"Skipping sync() success for server[%s].\",logIdentity);\n    return;\n  }\n  try {\n    if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n      log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n      lastSuccessfulSyncTime=System.currentTimeMillis();\n      return;\n    }\n else     if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n      handleFailure(new RE(\"Bad Sync Response.\"));\n      return;\n    }\n    log.debug(\"Received sync response from [%s]\",logIdentity);\n    ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n    log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n    if (changes.isResetCounter()) {\n      log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n      counter=null;\n      return;\n    }\n    if (counter == null) {\n      listener.fullSync(changes.getRequests());\n    }\n else {\n      listener.deltaSync(changes.getRequests());\n    }\n    counter=changes.getCounter();\n    if (initializationLatch.getCount() > 0) {\n      initializationLatch.countDown();\n      log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n    }\n    if (consecutiveFailedAttemptCount > 0) {\n      consecutiveFailedAttemptCount=0;\n      log.info(\"[%s] synced successfully.\",logIdentity);\n    }\n    lastSuccessfulSyncTime=System.currentTimeMillis();\n  }\n catch (  Exception ex) {\n    String logMsg=StringUtils.nonStrictFormat(\"Error processing sync response from [%s]. Reason [%s]\",logIdentity,ex.getMessage());\n    if (incrementFailedAttemptAndCheckUnstabilityTimeout()) {\n      log.error(ex,logMsg);\n    }\n else {\n      log.info(\"Temporary Failure. %s\",logMsg);\n      log.debug(ex,logMsg);\n    }\n  }\n finally {\n    addNextSyncToWorkQueue();\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 215,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2748,
        "startLineNumber" : 221,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nsynchronized (startStopLock) {\n    if (!startStopLock.awaitStarted(1,TimeUnit.MILLISECONDS)) {\n      log.info(\"Skipping sync() success for server[%s].\",logIdentity);\n      return;\n    }\n    try {\n      if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n        log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n        lastSuccessfulSyncTime=System.currentTimeMillis();\n        return;\n      }\n else       if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n        handleFailure(new RE(\"Bad Sync Response.\"));\n        return;\n      }\n      log.debug(\"Received sync response from [%s]\",logIdentity);\n      ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n      log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n      if (changes.isResetCounter()) {\n        log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n        counter=null;\n        return;\n      }\n      if (counter == null) {\n        listener.fullSync(changes.getRequests());\n      }\n else {\n        listener.deltaSync(changes.getRequests());\n      }\n      counter=changes.getCounter();\n      if (initializationLatch.getCount() > 0) {\n        initializationLatch.countDown();\n        log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n      }\n      if (consecutiveFailedAttemptCount > 0) {\n        consecutiveFailedAttemptCount=0;\n        log.info(\"[%s] synced successfully.\",logIdentity);\n      }\n      lastSuccessfulSyncTime=System.currentTimeMillis();\n    }\n catch (    Exception ex) {\n      String logMsg=StringUtils.nonStrictFormat(\"Error processing sync response from [%s]. Reason [%s]\",logIdentity,ex.getMessage());\n      if (incrementFailedAttemptAndCheckUnstabilityTimeout()) {\n        log.error(ex,logMsg);\n      }\n else {\n        log.info(\"Temporary Failure. %s\",logMsg);\n        log.debug(ex,logMsg);\n      }\n    }\n finally {\n      addNextSyncToWorkQueue();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2824,
        "startLineNumber" : 219,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public void onSuccess(InputStream stream){\nsynchronized (startStopLock) {\n    if (!startStopLock.awaitStarted(1,TimeUnit.MILLISECONDS)) {\n      log.info(\"Skipping sync() success for server[%s].\",logIdentity);\n      return;\n    }\n    try {\n      if (responseHandler.getStatus() == HttpServletResponse.SC_NO_CONTENT) {\n        log.debug(\"Received NO CONTENT from server[%s]\",logIdentity);\n        lastSuccessfulSyncTime=System.currentTimeMillis();\n        return;\n      }\n else       if (responseHandler.getStatus() != HttpServletResponse.SC_OK) {\n        handleFailure(new RE(\"Bad Sync Response.\"));\n        return;\n      }\n      log.debug(\"Received sync response from [%s]\",logIdentity);\n      ChangeRequestsSnapshot<T> changes=smileMapper.readValue(stream,responseTypeReferences);\n      log.debug(\"Finished reading sync response from [%s]\",logIdentity);\n      if (changes.isResetCounter()) {\n        log.info(\"[%s] requested resetCounter for reason [%s].\",logIdentity,changes.getResetCause());\n        counter=null;\n        return;\n      }\n      if (counter == null) {\n        listener.fullSync(changes.getRequests());\n      }\n else {\n        listener.deltaSync(changes.getRequests());\n      }\n      counter=changes.getCounter();\n      if (initializationLatch.getCount() > 0) {\n        initializationLatch.countDown();\n        log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n      }\n      if (consecutiveFailedAttemptCount > 0) {\n        consecutiveFailedAttemptCount=0;\n        log.info(\"[%s] synced successfully.\",logIdentity);\n      }\n      lastSuccessfulSyncTime=System.currentTimeMillis();\n    }\n catch (    Exception ex) {\n      String logMsg=StringUtils.nonStrictFormat(\"Error processing sync response from [%s]. Reason [%s]\",logIdentity,ex.getMessage());\n      if (incrementFailedAttemptAndCheckUnstabilityTimeout()) {\n        log.error(ex,logMsg);\n      }\n else {\n        log.info(\"Temporary Failure. %s\",logMsg);\n        log.debug(ex,logMsg);\n      }\n    }\n finally {\n      addNextSyncToWorkQueue();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 258,
        "startColumnNumber" : 18,
        "endLineNumber" : 261,
        "endColumnNumber" : 19
      },
      "nodeContext" : "if (initializationLatch.getCount() > 0) {\n  initializationLatch.countDown();\n  log.info(\"[%s] synced successfully for the first time.\",logIdentity);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 258,
    "startColumnNumber" : 22,
    "endLineNumber" : 258,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}