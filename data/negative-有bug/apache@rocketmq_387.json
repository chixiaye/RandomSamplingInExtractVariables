{
  "id" : 387,
  "expression" : "results",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueConsistentHash.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 94,
      "startColumnNumber" : 16,
      "endLineNumber" : 94,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 31
      },
      "nodeContext" : "results.add(mq)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 32
      },
      "nodeContext" : "results.add(mq);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 78,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  results.add(mq);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n  results.add(mq);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 91,
        "startColumnNumber" : 38,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ClientNode clientNode=router.routeNode(mq.toString());\n  if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n    results.add(mq);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MessageQueue mq : mqAll) {\n  ClientNode clientNode=router.routeNode(mq.toString());\n  if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n    results.add(mq);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1594,
        "startLineNumber" : 57,
        "startColumnNumber" : 29,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentCID == null || currentCID.length() < 1) {\n    throw new IllegalArgumentException(\"currentCID is empty\");\n  }\n  if (mqAll == null || mqAll.isEmpty()) {\n    throw new IllegalArgumentException(\"mqAll is null or mqAll empty\");\n  }\n  if (cidAll == null || cidAll.isEmpty()) {\n    throw new IllegalArgumentException(\"cidAll is null or cidAll empty\");\n  }\n  List<MessageQueue> result=new ArrayList<MessageQueue>();\n  if (!cidAll.contains(currentCID)) {\n    log.info(\"[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}\",consumerGroup,currentCID,cidAll);\n    return result;\n  }\n  Collection<ClientNode> cidNodes=new ArrayList<ClientNode>();\n  for (  String cid : cidAll) {\n    cidNodes.add(new ClientNode(cid));\n  }\n  final ConsistentHashRouter<ClientNode> router;\n  if (customHashFunction != null) {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt,customHashFunction);\n  }\n else {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt);\n  }\n  List<MessageQueue> results=new ArrayList<MessageQueue>();\n  for (  MessageQueue mq : mqAll) {\n    ClientNode clientNode=router.routeNode(mq.toString());\n    if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n      results.add(mq);\n    }\n  }\n  return results;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<MessageQueue> allocate(String consumerGroup,String currentCID,List<MessageQueue> mqAll,List<String> cidAll){\n  if (currentCID == null || currentCID.length() < 1) {\n    throw new IllegalArgumentException(\"currentCID is empty\");\n  }\n  if (mqAll == null || mqAll.isEmpty()) {\n    throw new IllegalArgumentException(\"mqAll is null or mqAll empty\");\n  }\n  if (cidAll == null || cidAll.isEmpty()) {\n    throw new IllegalArgumentException(\"cidAll is null or cidAll empty\");\n  }\n  List<MessageQueue> result=new ArrayList<MessageQueue>();\n  if (!cidAll.contains(currentCID)) {\n    log.info(\"[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}\",consumerGroup,currentCID,cidAll);\n    return result;\n  }\n  Collection<ClientNode> cidNodes=new ArrayList<ClientNode>();\n  for (  String cid : cidAll) {\n    cidNodes.add(new ClientNode(cid));\n  }\n  final ConsistentHashRouter<ClientNode> router;\n  if (customHashFunction != null) {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt,customHashFunction);\n  }\n else {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt);\n  }\n  List<MessageQueue> results=new ArrayList<MessageQueue>();\n  for (  MessageQueue mq : mqAll) {\n    ClientNode clientNode=router.routeNode(mq.toString());\n    if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n      results.add(mq);\n    }\n  }\n  return results;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 32
      },
      "nodeContext" : "results.add(mq);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.rocketmq.common.message.MessageQueue>"
  }, {
    "nodeContext" : "results",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 98,
      "startColumnNumber" : 15,
      "endLineNumber" : 98,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return results;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1594,
        "startLineNumber" : 57,
        "startColumnNumber" : 29,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentCID == null || currentCID.length() < 1) {\n    throw new IllegalArgumentException(\"currentCID is empty\");\n  }\n  if (mqAll == null || mqAll.isEmpty()) {\n    throw new IllegalArgumentException(\"mqAll is null or mqAll empty\");\n  }\n  if (cidAll == null || cidAll.isEmpty()) {\n    throw new IllegalArgumentException(\"cidAll is null or cidAll empty\");\n  }\n  List<MessageQueue> result=new ArrayList<MessageQueue>();\n  if (!cidAll.contains(currentCID)) {\n    log.info(\"[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}\",consumerGroup,currentCID,cidAll);\n    return result;\n  }\n  Collection<ClientNode> cidNodes=new ArrayList<ClientNode>();\n  for (  String cid : cidAll) {\n    cidNodes.add(new ClientNode(cid));\n  }\n  final ConsistentHashRouter<ClientNode> router;\n  if (customHashFunction != null) {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt,customHashFunction);\n  }\n else {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt);\n  }\n  List<MessageQueue> results=new ArrayList<MessageQueue>();\n  for (  MessageQueue mq : mqAll) {\n    ClientNode clientNode=router.routeNode(mq.toString());\n    if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n      results.add(mq);\n    }\n  }\n  return results;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<MessageQueue> allocate(String consumerGroup,String currentCID,List<MessageQueue> mqAll,List<String> cidAll){\n  if (currentCID == null || currentCID.length() < 1) {\n    throw new IllegalArgumentException(\"currentCID is empty\");\n  }\n  if (mqAll == null || mqAll.isEmpty()) {\n    throw new IllegalArgumentException(\"mqAll is null or mqAll empty\");\n  }\n  if (cidAll == null || cidAll.isEmpty()) {\n    throw new IllegalArgumentException(\"cidAll is null or cidAll empty\");\n  }\n  List<MessageQueue> result=new ArrayList<MessageQueue>();\n  if (!cidAll.contains(currentCID)) {\n    log.info(\"[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}\",consumerGroup,currentCID,cidAll);\n    return result;\n  }\n  Collection<ClientNode> cidNodes=new ArrayList<ClientNode>();\n  for (  String cid : cidAll) {\n    cidNodes.add(new ClientNode(cid));\n  }\n  final ConsistentHashRouter<ClientNode> router;\n  if (customHashFunction != null) {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt,customHashFunction);\n  }\n else {\n    router=new ConsistentHashRouter<ClientNode>(cidNodes,virtualNodeCnt);\n  }\n  List<MessageQueue> results=new ArrayList<MessageQueue>();\n  for (  MessageQueue mq : mqAll) {\n    ClientNode clientNode=router.routeNode(mq.toString());\n    if (clientNode != null && currentCID.equals(clientNode.getKey())) {\n      results.add(mq);\n    }\n  }\n  return results;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return results;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.rocketmq.common.message.MessageQueue>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 94,
    "startColumnNumber" : 16,
    "endLineNumber" : 94,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 98,
    "startColumnNumber" : 15,
    "endLineNumber" : 98,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}