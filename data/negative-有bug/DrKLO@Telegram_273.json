{
  "id" : 273,
  "expression" : "Atom.LeafAtom",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/extractor/mp4/Mp4Extractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Atom.LeafAtom",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 348,
      "startColumnNumber" : 38,
      "endLineNumber" : 348,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 348,
        "startColumnNumber" : 38,
        "endLineNumber" : 348,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Atom.LeafAtom",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 348,
        "startColumnNumber" : 34,
        "endLineNumber" : 348,
        "endColumnNumber" : 71
      },
      "nodeContext" : "new Atom.LeafAtom(atomType,atomData)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 348,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 72
      },
      "nodeContext" : "containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 348,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 73
      },
      "nodeContext" : "containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 347,
        "startColumnNumber" : 44,
        "endLineNumber" : 349,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 347,
        "startColumnNumber" : 13,
        "endLineNumber" : 349,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!containerAtoms.isEmpty()) {\n  containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 345,
        "startColumnNumber" : 6,
        "endLineNumber" : 349,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (atomType == Atom.TYPE_ftyp) {\n  isQuickTime=processFtypAtom(atomData);\n}\n else if (!containerAtoms.isEmpty()) {\n  containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 343,
        "startColumnNumber" : 26,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  input.readFully(atomData.data,atomHeaderBytesRead,(int)atomPayloadSize);\n  if (atomType == Atom.TYPE_ftyp) {\n    isQuickTime=processFtypAtom(atomData);\n  }\n else   if (!containerAtoms.isEmpty()) {\n    containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 343,
        "startColumnNumber" : 4,
        "endLineNumber" : 358,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (atomData != null) {\n  input.readFully(atomData.data,atomHeaderBytesRead,(int)atomPayloadSize);\n  if (atomType == Atom.TYPE_ftyp) {\n    isQuickTime=processFtypAtom(atomData);\n  }\n else   if (!containerAtoms.isEmpty()) {\n    containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n  }\n}\n else {\n  if (atomPayloadSize < RELOAD_MINIMUM_SEEK_DISTANCE) {\n    input.skipFully((int)atomPayloadSize);\n  }\n else {\n    positionHolder.position=input.getPosition() + atomPayloadSize;\n    seekRequired=true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 339,
        "startColumnNumber" : 47,
        "endLineNumber" : 361,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long atomPayloadSize=atomSize - atomHeaderBytesRead;\n  long atomEndPosition=input.getPosition() + atomPayloadSize;\n  boolean seekRequired=false;\n  if (atomData != null) {\n    input.readFully(atomData.data,atomHeaderBytesRead,(int)atomPayloadSize);\n    if (atomType == Atom.TYPE_ftyp) {\n      isQuickTime=processFtypAtom(atomData);\n    }\n else     if (!containerAtoms.isEmpty()) {\n      containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n    }\n  }\n else {\n    if (atomPayloadSize < RELOAD_MINIMUM_SEEK_DISTANCE) {\n      input.skipFully((int)atomPayloadSize);\n    }\n else {\n      positionHolder.position=input.getPosition() + atomPayloadSize;\n      seekRequired=true;\n    }\n  }\n  processAtomEnded(atomEndPosition);\n  return seekRequired && parserState != STATE_READING_SAMPLE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1369,
        "startLineNumber" : 333,
        "startColumnNumber" : 2,
        "endLineNumber" : 361,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Processes the atom payload. If  {@link #atomData} is null and the size is at or above thethreshold  {@link #RELOAD_MINIMUM_SEEK_DISTANCE},  {@code true} is returned and the caller shouldrestart loading at the position in  {@code positionHolder}. Otherwise, the atom is read/skipped.\n */\nprivate boolean readAtomPayload(ExtractorInput input,PositionHolder positionHolder) throws IOException, InterruptedException {\n  long atomPayloadSize=atomSize - atomHeaderBytesRead;\n  long atomEndPosition=input.getPosition() + atomPayloadSize;\n  boolean seekRequired=false;\n  if (atomData != null) {\n    input.readFully(atomData.data,atomHeaderBytesRead,(int)atomPayloadSize);\n    if (atomType == Atom.TYPE_ftyp) {\n      isQuickTime=processFtypAtom(atomData);\n    }\n else     if (!containerAtoms.isEmpty()) {\n      containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n    }\n  }\n else {\n    if (atomPayloadSize < RELOAD_MINIMUM_SEEK_DISTANCE) {\n      input.skipFully((int)atomPayloadSize);\n    }\n else {\n      positionHolder.position=input.getPosition() + atomPayloadSize;\n      seekRequired=true;\n    }\n  }\n  processAtomEnded(atomEndPosition);\n  return seekRequired && parserState != STATE_READING_SAMPLE;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 125,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 348,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 73
      },
      "nodeContext" : "containerAtoms.peek().add(new Atom.LeafAtom(atomType,atomData));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.android.exoplayer2.extractor.mp4.Atom.LeafAtom"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 348,
    "startColumnNumber" : 38,
    "endLineNumber" : 348,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}