{
  "id" : 65,
  "expression" : "new CompletableSubscriber(){\n  @Override public void onSubscribe(  Disposable d){\n    set.add(d);\n  }\n  @Override public void onError(  Throwable e){\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n  }\n  @Override public void onComplete(){\n    if (wip.decrementAndGet() == 0) {\n      if (once.compareAndSet(false,true)) {\n        s.onComplete();\n      }\n    }\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/completable/CompletableMergeIterable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CompletableSubscriber(){\n  @Override public void onSubscribe(  Disposable d){\n    set.add(d);\n  }\n  @Override public void onError(  Throwable e){\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n  }\n  @Override public void onComplete(){\n    if (wip.decrementAndGet() == 0) {\n      if (once.compareAndSet(false,true)) {\n        s.onComplete();\n      }\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 843,
      "startLineNumber" : 110,
      "startColumnNumber" : 24,
      "endLineNumber" : 135,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 78,
    "astHeight" : 11,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 856,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 14
      },
      "nodeContext" : "c.subscribe(new CompletableSubscriber(){\n  @Override public void onSubscribe(  Disposable d){\n    set.add(d);\n  }\n  @Override public void onError(  Throwable e){\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n  }\n  @Override public void onComplete(){\n    if (wip.decrementAndGet() == 0) {\n      if (once.compareAndSet(false,true)) {\n        s.onComplete();\n      }\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 81,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 15
      },
      "nodeContext" : "c.subscribe(new CompletableSubscriber(){\n  @Override public void onSubscribe(  Disposable d){\n    set.add(d);\n  }\n  @Override public void onError(  Throwable e){\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n  }\n  @Override public void onComplete(){\n    if (wip.decrementAndGet() == 0) {\n      if (once.compareAndSet(false,true)) {\n        s.onComplete();\n      }\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 82,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 53,
        "startColumnNumber" : 17,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3313,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void subscribeActual(final CompletableSubscriber s){\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 15
      },
      "nodeContext" : "c.subscribe(new CompletableSubscriber(){\n  @Override public void onSubscribe(  Disposable d){\n    set.add(d);\n  }\n  @Override public void onError(  Throwable e){\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n  }\n  @Override public void onComplete(){\n    if (wip.decrementAndGet() == 0) {\n      if (once.compareAndSet(false,true)) {\n        s.onComplete();\n      }\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 82,
      "astHeight" : 13
    },
    "tokenLength" : 36,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 843,
    "startLineNumber" : 110,
    "startColumnNumber" : 24,
    "endLineNumber" : 135,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}