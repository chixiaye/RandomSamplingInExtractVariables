{
  "id" : 168,
  "expression" : "\", end: \"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/paging/lib/src/main/java/org/signal/paging/FixedSizePagingController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\", end: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 95,
      "startColumnNumber" : 72,
      "endLineNumber" : 95,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 95,
        "startColumnNumber" : 48,
        "endLineNumber" : 95,
        "endColumnNumber" : 121
      },
      "nodeContext" : "\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 95,
        "startColumnNumber" : 26,
        "endLineNumber" : 95,
        "endColumnNumber" : 122
      },
      "nodeContext" : "buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 95,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 123
      },
      "nodeContext" : "Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 95,
        "startColumnNumber" : 15,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (DEBUG) Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2137,
        "startLineNumber" : 59,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (invalidated) {\n    Log.w(TAG,buildLog(aroundIndex,\"Invalidated! At very beginning.\"));\n    return;\n  }\n  if (loadState.size() == 0) {\n    liveData.postValue(Collections.emptyList());\n    return;\n  }\n  int leftPageBoundary=(aroundIndex / config.pageSize()) * config.pageSize();\n  int rightPageBoundary=leftPageBoundary + config.pageSize();\n  int buffer=config.bufferPages() * config.pageSize();\n  int leftLoadBoundary=Math.max(0,leftPageBoundary - buffer);\n  int rightLoadBoundary=Math.min(loadState.size(),rightPageBoundary + buffer);\n  int loadStart=loadState.getEarliestUnmarkedIndexInRange(leftLoadBoundary,rightLoadBoundary);\n  if (loadStart < 0) {\n    if (DEBUG)     Log.i(TAG,buildLog(aroundIndex,\"loadStart < 0\"));\n    return;\n  }\n  int loadEnd=loadState.getLatestUnmarkedIndexInRange(Math.max(leftLoadBoundary,loadStart),rightLoadBoundary) + 1;\n  if (loadEnd <= loadStart) {\n    if (DEBUG)     Log.i(TAG,buildLog(aroundIndex,\"loadEnd <= loadStart, loadEnd: \" + loadEnd + \", loadStart: \"+ loadStart));\n    return;\n  }\n  int totalSize=loadState.size();\n  loadState.markRange(loadStart,loadEnd);\n  if (DEBUG)   Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize));\n  FETCH_EXECUTOR.execute(() -> {\n    if (invalidated) {\n      Log.w(TAG,buildLog(aroundIndex,\"Invalidated! At beginning of load task.\"));\n      return;\n    }\n    List<Data> loaded=dataSource.load(loadStart,loadEnd - loadStart,() -> invalidated);\n    if (invalidated) {\n      Log.w(TAG,buildLog(aroundIndex,\"Invalidated! Just after data was loaded.\"));\n      return;\n    }\n    List<Data> updated=new CompressedList<>(data);\n    for (int i=0, len=Math.min(loaded.size(),data.size() - loadStart); i < len; i++) {\n      int position=loadStart + i;\n      Data item=loaded.get(i);\n      updated.set(position,item);\n      keyToPosition.put(dataSource.getKey(item),position);\n    }\n    data=updated;\n    liveData.postValue(updated);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2451,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * We assume this method is always called on the same thread, so we can read our {@code loadState} and construct the parameters of a fetch request. That fetch request canthen be performed on separate single-thread executor.\n */\n@Override public void onDataNeededAroundIndex(int aroundIndex){\n  if (invalidated) {\n    Log.w(TAG,buildLog(aroundIndex,\"Invalidated! At very beginning.\"));\n    return;\n  }\n  if (loadState.size() == 0) {\n    liveData.postValue(Collections.emptyList());\n    return;\n  }\n  int leftPageBoundary=(aroundIndex / config.pageSize()) * config.pageSize();\n  int rightPageBoundary=leftPageBoundary + config.pageSize();\n  int buffer=config.bufferPages() * config.pageSize();\n  int leftLoadBoundary=Math.max(0,leftPageBoundary - buffer);\n  int rightLoadBoundary=Math.min(loadState.size(),rightPageBoundary + buffer);\n  int loadStart=loadState.getEarliestUnmarkedIndexInRange(leftLoadBoundary,rightLoadBoundary);\n  if (loadStart < 0) {\n    if (DEBUG)     Log.i(TAG,buildLog(aroundIndex,\"loadStart < 0\"));\n    return;\n  }\n  int loadEnd=loadState.getLatestUnmarkedIndexInRange(Math.max(leftLoadBoundary,loadStart),rightLoadBoundary) + 1;\n  if (loadEnd <= loadStart) {\n    if (DEBUG)     Log.i(TAG,buildLog(aroundIndex,\"loadEnd <= loadStart, loadEnd: \" + loadEnd + \", loadStart: \"+ loadStart));\n    return;\n  }\n  int totalSize=loadState.size();\n  loadState.markRange(loadStart,loadEnd);\n  if (DEBUG)   Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize));\n  FETCH_EXECUTOR.execute(() -> {\n    if (invalidated) {\n      Log.w(TAG,buildLog(aroundIndex,\"Invalidated! At beginning of load task.\"));\n      return;\n    }\n    List<Data> loaded=dataSource.load(loadStart,loadEnd - loadStart,() -> invalidated);\n    if (invalidated) {\n      Log.w(TAG,buildLog(aroundIndex,\"Invalidated! Just after data was loaded.\"));\n      return;\n    }\n    List<Data> updated=new CompressedList<>(data);\n    for (int i=0, len=Math.min(loaded.size(),data.size() - loadStart); i < len; i++) {\n      int position=loadStart + i;\n      Data item=loaded.get(i);\n      updated.set(position,item);\n      keyToPosition.put(dataSource.getKey(item),position);\n    }\n    data=updated;\n    liveData.postValue(updated);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (DEBUG) Log.i(TAG,buildLog(aroundIndex,\"start: \" + loadStart + \", end: \"+ loadEnd+ \", totalSize: \"+ totalSize));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 95,
    "startColumnNumber" : 72,
    "endLineNumber" : 95,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}