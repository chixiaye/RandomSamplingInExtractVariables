{
  "id" : 389,
  "expression" : "StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\")",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/client/petstore/java/okhttp-gson/src/test/java/org/openapitools/client/StringUtilTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 13,
      "startColumnNumber" : 19,
      "endLineNumber" : 13,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 9,
        "startColumnNumber" : 41,
        "endLineNumber" : 19,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"abc\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"ABC\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"ABC\"},\"abc\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},null));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"def\"));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{},\"ABC\"));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{},null));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 19,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testContainsIgnoreCase(){\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"abc\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"ABC\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{\"ABC\"},\"abc\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\"));\n  assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},null));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{\"abc\"},\"def\"));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{},\"ABC\"));\n  assertFalse(StringUtil.containsIgnoreCase(new String[]{},null));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 13,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertTrue(StringUtil.containsIgnoreCase(new String[]{null,\"abc\"},\"ABC\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 13,
    "startColumnNumber" : 19,
    "endLineNumber" : 13,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}