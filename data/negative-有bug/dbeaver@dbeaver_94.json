{
  "id" : 94,
  "expression" : "conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\")",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/test/org.jkiss.dbeaver.ext.test/src/org/jkiss/dbeaver/ext/test/tools/LockGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 77,
      "startLineNumber" : 77,
      "startColumnNumber" : 15,
      "endLineNumber" : 77,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 77,
        "startColumnNumber" : 7,
        "endLineNumber" : 77,
        "endColumnNumber" : 92
      },
      "nodeContext" : "stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 7,
        "endLineNumber" : 77,
        "endColumnNumber" : 93
      },
      "nodeContext" : "stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 75,
        "startColumnNumber" : 29,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  System.out.println(\"Table not found\");\n  stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n  stmt.execute();\n  stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n  stmt.execute();\n  stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n  stmt.execute();\n  conn.commit();\n  System.out.println(\"Table created\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 75,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!res.getBoolean(1)) {\n  System.out.println(\"Table not found\");\n  stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n  stmt.execute();\n  stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n  stmt.execute();\n  stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n  stmt.execute();\n  conn.commit();\n  System.out.println(\"Table created\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4448,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  conn=DriverManager.getConnection(url,props);\n  conn.setAutoCommit(false);\n  stmt=conn.prepareStatement(\"SELECT EXISTS (SELECT 1 FROM   information_schema.tables  WHERE  table_schema = current_schema AND    table_name = 'usr')\");\n  res=stmt.executeQuery();\n  res.next();\n  if (!res.getBoolean(1)) {\n    System.out.println(\"Table not found\");\n    stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n    stmt.execute();\n    stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n    stmt.execute();\n    stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n    stmt.execute();\n    conn.commit();\n    System.out.println(\"Table created\");\n  }\n  ExecutorService service=Executors.newFixedThreadPool(MAX_SESSIONS);\n  int sessionCount=0;\n  int field=1;\n  while (sessionCount < MAX_SESSIONS) {\n    final int fieldVal=field;\n    service.submit(new Runnable(){\n      @Override public void run(){\n        Connection c=null;\n        PreparedStatement s=null;\n        ResultSet r=null;\n        try {\n          c=DriverManager.getConnection(url,props);\n          c.setAutoCommit(false);\n          String pid=String.valueOf(getPid(c));\n          System.out.println(\"[\" + pid + \"] Submited root session for \"+ String.valueOf(fieldVal));\n          s=c.prepareStatement(\"/*ROOT \" + String.valueOf(fieldVal) + \" */ update usr set v = 100500 where field = ?\");\n          s.setInt(1,fieldVal);\n          s.executeUpdate();\n          while (true) {\n            try {\n              Thread.sleep(600 * 1000);\n            }\n catch (            InterruptedException e) {\n              e.printStackTrace();\n              break;\n            }\n          }\n          c.close();\n        }\n catch (        SQLException e) {\n          e.printStackTrace();\n          return;\n        }\n      }\n    }\n);\n    sessionCount++;\n    if ((MAX_SESSIONS - sessionCount) > MIN_CHAIN_SIZE) {\n      int chainCount=ThreadLocalRandom.current().nextInt(MIN_CHAIN_SIZE,MAX_CHAIN_SIZE + 1);\n      if ((MAX_SESSIONS - sessionCount) >= chainCount) {\n        for (int i=0; i < chainCount; i++) {\n          final int level=i;\n          int levelCount=ThreadLocalRandom.current().nextInt(1,MAX_LEVEL_ITEMS + 1);\n          for (int j=0; j < levelCount; j++) {\n            final int levelNo=j;\n            service.submit(new Runnable(){\n              @Override public void run(){\n                try {\n                  Thread.sleep(5000);\n                }\n catch (                InterruptedException e1) {\n                  e1.printStackTrace();\n                }\n                Connection c=null;\n                PreparedStatement s=null;\n                ResultSet r=null;\n                try {\n                  c=DriverManager.getConnection(url,props);\n                  c.setAutoCommit(false);\n                  int pid=getPid(c);\n                  String prefix;\n                  if (levelNo > 0) {\n                    int sublock=MAX_SESSIONS + (level * MAX_CHAIN_SIZE);\n                    prefix=String.format(\"[%d] Sublock %d for %d -> %d (%d) \",pid,sublock,fieldVal,level,levelNo);\n                    s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                    System.out.println(\"Sublock for \" + prefix);\n                    s.setInt(1,sublock);\n                    s.executeUpdate();\n                  }\n                  prefix=String.format(\"[%d] %d->%d (%d) \",pid,fieldVal,level,levelNo);\n                  s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                  s.setInt(1,fieldVal);\n                  System.out.println(\"Wait session for \" + prefix);\n                  s.executeUpdate();\n                  c.close();\n                }\n catch (                SQLException e) {\n                  e.printStackTrace();\n                  return;\n                }\n              }\n            }\n);\n            sessionCount++;\n            if (sessionCount >= MAX_SESSIONS) {\n              break;\n            }\n          }\n          if (sessionCount >= MAX_SESSIONS) {\n            break;\n          }\n        }\n      }\n    }\n    field++;\n  }\n  System.out.println(\"Sbmited \" + sessionCount);\n  service.shutdown();\n  service.awaitTermination(1,TimeUnit.HOURS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 561,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4502,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  conn=DriverManager.getConnection(url,props);\n  conn.setAutoCommit(false);\n  stmt=conn.prepareStatement(\"SELECT EXISTS (SELECT 1 FROM   information_schema.tables  WHERE  table_schema = current_schema AND    table_name = 'usr')\");\n  res=stmt.executeQuery();\n  res.next();\n  if (!res.getBoolean(1)) {\n    System.out.println(\"Table not found\");\n    stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n    stmt.execute();\n    stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n    stmt.execute();\n    stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n    stmt.execute();\n    conn.commit();\n    System.out.println(\"Table created\");\n  }\n  ExecutorService service=Executors.newFixedThreadPool(MAX_SESSIONS);\n  int sessionCount=0;\n  int field=1;\n  while (sessionCount < MAX_SESSIONS) {\n    final int fieldVal=field;\n    service.submit(new Runnable(){\n      @Override public void run(){\n        Connection c=null;\n        PreparedStatement s=null;\n        ResultSet r=null;\n        try {\n          c=DriverManager.getConnection(url,props);\n          c.setAutoCommit(false);\n          String pid=String.valueOf(getPid(c));\n          System.out.println(\"[\" + pid + \"] Submited root session for \"+ String.valueOf(fieldVal));\n          s=c.prepareStatement(\"/*ROOT \" + String.valueOf(fieldVal) + \" */ update usr set v = 100500 where field = ?\");\n          s.setInt(1,fieldVal);\n          s.executeUpdate();\n          while (true) {\n            try {\n              Thread.sleep(600 * 1000);\n            }\n catch (            InterruptedException e) {\n              e.printStackTrace();\n              break;\n            }\n          }\n          c.close();\n        }\n catch (        SQLException e) {\n          e.printStackTrace();\n          return;\n        }\n      }\n    }\n);\n    sessionCount++;\n    if ((MAX_SESSIONS - sessionCount) > MIN_CHAIN_SIZE) {\n      int chainCount=ThreadLocalRandom.current().nextInt(MIN_CHAIN_SIZE,MAX_CHAIN_SIZE + 1);\n      if ((MAX_SESSIONS - sessionCount) >= chainCount) {\n        for (int i=0; i < chainCount; i++) {\n          final int level=i;\n          int levelCount=ThreadLocalRandom.current().nextInt(1,MAX_LEVEL_ITEMS + 1);\n          for (int j=0; j < levelCount; j++) {\n            final int levelNo=j;\n            service.submit(new Runnable(){\n              @Override public void run(){\n                try {\n                  Thread.sleep(5000);\n                }\n catch (                InterruptedException e1) {\n                  e1.printStackTrace();\n                }\n                Connection c=null;\n                PreparedStatement s=null;\n                ResultSet r=null;\n                try {\n                  c=DriverManager.getConnection(url,props);\n                  c.setAutoCommit(false);\n                  int pid=getPid(c);\n                  String prefix;\n                  if (levelNo > 0) {\n                    int sublock=MAX_SESSIONS + (level * MAX_CHAIN_SIZE);\n                    prefix=String.format(\"[%d] Sublock %d for %d -> %d (%d) \",pid,sublock,fieldVal,level,levelNo);\n                    s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                    System.out.println(\"Sublock for \" + prefix);\n                    s.setInt(1,sublock);\n                    s.executeUpdate();\n                  }\n                  prefix=String.format(\"[%d] %d->%d (%d) \",pid,fieldVal,level,levelNo);\n                  s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                  s.setInt(1,fieldVal);\n                  System.out.println(\"Wait session for \" + prefix);\n                  s.executeUpdate();\n                  c.close();\n                }\n catch (                SQLException e) {\n                  e.printStackTrace();\n                  return;\n                }\n              }\n            }\n);\n            sessionCount++;\n            if (sessionCount >= MAX_SESSIONS) {\n              break;\n            }\n          }\n          if (sessionCount >= MAX_SESSIONS) {\n            break;\n          }\n        }\n      }\n    }\n    field++;\n  }\n  System.out.println(\"Sbmited \" + sessionCount);\n  service.shutdown();\n  service.awaitTermination(1,TimeUnit.HOURS);\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 572,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4799,
        "startLineNumber" : 58,
        "startColumnNumber" : 40,
        "endLineNumber" : 223,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final String url=\"jdbc:postgresql://localhost/postgres\";\n  final Properties props=new Properties();\n  props.setProperty(\"user\",\"\");\n  props.setProperty(\"password\",\"\");\n  Connection conn=null;\n  PreparedStatement stmt=null;\n  ResultSet res=null;\n  try {\n    conn=DriverManager.getConnection(url,props);\n    conn.setAutoCommit(false);\n    stmt=conn.prepareStatement(\"SELECT EXISTS (SELECT 1 FROM   information_schema.tables  WHERE  table_schema = current_schema AND    table_name = 'usr')\");\n    res=stmt.executeQuery();\n    res.next();\n    if (!res.getBoolean(1)) {\n      System.out.println(\"Table not found\");\n      stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n      stmt.execute();\n      stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n      stmt.execute();\n      stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n      stmt.execute();\n      conn.commit();\n      System.out.println(\"Table created\");\n    }\n    ExecutorService service=Executors.newFixedThreadPool(MAX_SESSIONS);\n    int sessionCount=0;\n    int field=1;\n    while (sessionCount < MAX_SESSIONS) {\n      final int fieldVal=field;\n      service.submit(new Runnable(){\n        @Override public void run(){\n          Connection c=null;\n          PreparedStatement s=null;\n          ResultSet r=null;\n          try {\n            c=DriverManager.getConnection(url,props);\n            c.setAutoCommit(false);\n            String pid=String.valueOf(getPid(c));\n            System.out.println(\"[\" + pid + \"] Submited root session for \"+ String.valueOf(fieldVal));\n            s=c.prepareStatement(\"/*ROOT \" + String.valueOf(fieldVal) + \" */ update usr set v = 100500 where field = ?\");\n            s.setInt(1,fieldVal);\n            s.executeUpdate();\n            while (true) {\n              try {\n                Thread.sleep(600 * 1000);\n              }\n catch (              InterruptedException e) {\n                e.printStackTrace();\n                break;\n              }\n            }\n            c.close();\n          }\n catch (          SQLException e) {\n            e.printStackTrace();\n            return;\n          }\n        }\n      }\n);\n      sessionCount++;\n      if ((MAX_SESSIONS - sessionCount) > MIN_CHAIN_SIZE) {\n        int chainCount=ThreadLocalRandom.current().nextInt(MIN_CHAIN_SIZE,MAX_CHAIN_SIZE + 1);\n        if ((MAX_SESSIONS - sessionCount) >= chainCount) {\n          for (int i=0; i < chainCount; i++) {\n            final int level=i;\n            int levelCount=ThreadLocalRandom.current().nextInt(1,MAX_LEVEL_ITEMS + 1);\n            for (int j=0; j < levelCount; j++) {\n              final int levelNo=j;\n              service.submit(new Runnable(){\n                @Override public void run(){\n                  try {\n                    Thread.sleep(5000);\n                  }\n catch (                  InterruptedException e1) {\n                    e1.printStackTrace();\n                  }\n                  Connection c=null;\n                  PreparedStatement s=null;\n                  ResultSet r=null;\n                  try {\n                    c=DriverManager.getConnection(url,props);\n                    c.setAutoCommit(false);\n                    int pid=getPid(c);\n                    String prefix;\n                    if (levelNo > 0) {\n                      int sublock=MAX_SESSIONS + (level * MAX_CHAIN_SIZE);\n                      prefix=String.format(\"[%d] Sublock %d for %d -> %d (%d) \",pid,sublock,fieldVal,level,levelNo);\n                      s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                      System.out.println(\"Sublock for \" + prefix);\n                      s.setInt(1,sublock);\n                      s.executeUpdate();\n                    }\n                    prefix=String.format(\"[%d] %d->%d (%d) \",pid,fieldVal,level,levelNo);\n                    s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                    s.setInt(1,fieldVal);\n                    System.out.println(\"Wait session for \" + prefix);\n                    s.executeUpdate();\n                    c.close();\n                  }\n catch (                  SQLException e) {\n                    e.printStackTrace();\n                    return;\n                  }\n                }\n              }\n);\n              sessionCount++;\n              if (sessionCount >= MAX_SESSIONS) {\n                break;\n              }\n            }\n            if (sessionCount >= MAX_SESSIONS) {\n              break;\n            }\n          }\n        }\n      }\n      field++;\n    }\n    System.out.println(\"Sbmited \" + sessionCount);\n    service.shutdown();\n    service.awaitTermination(1,TimeUnit.HOURS);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 619,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4838,
        "startLineNumber" : 58,
        "startColumnNumber" : 1,
        "endLineNumber" : 223,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static void main(String[] args){\n  final String url=\"jdbc:postgresql://localhost/postgres\";\n  final Properties props=new Properties();\n  props.setProperty(\"user\",\"\");\n  props.setProperty(\"password\",\"\");\n  Connection conn=null;\n  PreparedStatement stmt=null;\n  ResultSet res=null;\n  try {\n    conn=DriverManager.getConnection(url,props);\n    conn.setAutoCommit(false);\n    stmt=conn.prepareStatement(\"SELECT EXISTS (SELECT 1 FROM   information_schema.tables  WHERE  table_schema = current_schema AND    table_name = 'usr')\");\n    res=stmt.executeQuery();\n    res.next();\n    if (!res.getBoolean(1)) {\n      System.out.println(\"Table not found\");\n      stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n      stmt.execute();\n      stmt=conn.prepareStatement(\"insert into usr(field,s) SELECT b,(SELECT string_agg(x, '')FROM (SELECT chr(ascii('A') + (random() * 25)::integer) FROM generate_series(1, 1024 + b * 0)) AS y(x)) s FROM generate_series(1,10000) as a(b)\");\n      stmt.execute();\n      stmt=conn.prepareStatement(\"alter table usr add primary key (field)\");\n      stmt.execute();\n      conn.commit();\n      System.out.println(\"Table created\");\n    }\n    ExecutorService service=Executors.newFixedThreadPool(MAX_SESSIONS);\n    int sessionCount=0;\n    int field=1;\n    while (sessionCount < MAX_SESSIONS) {\n      final int fieldVal=field;\n      service.submit(new Runnable(){\n        @Override public void run(){\n          Connection c=null;\n          PreparedStatement s=null;\n          ResultSet r=null;\n          try {\n            c=DriverManager.getConnection(url,props);\n            c.setAutoCommit(false);\n            String pid=String.valueOf(getPid(c));\n            System.out.println(\"[\" + pid + \"] Submited root session for \"+ String.valueOf(fieldVal));\n            s=c.prepareStatement(\"/*ROOT \" + String.valueOf(fieldVal) + \" */ update usr set v = 100500 where field = ?\");\n            s.setInt(1,fieldVal);\n            s.executeUpdate();\n            while (true) {\n              try {\n                Thread.sleep(600 * 1000);\n              }\n catch (              InterruptedException e) {\n                e.printStackTrace();\n                break;\n              }\n            }\n            c.close();\n          }\n catch (          SQLException e) {\n            e.printStackTrace();\n            return;\n          }\n        }\n      }\n);\n      sessionCount++;\n      if ((MAX_SESSIONS - sessionCount) > MIN_CHAIN_SIZE) {\n        int chainCount=ThreadLocalRandom.current().nextInt(MIN_CHAIN_SIZE,MAX_CHAIN_SIZE + 1);\n        if ((MAX_SESSIONS - sessionCount) >= chainCount) {\n          for (int i=0; i < chainCount; i++) {\n            final int level=i;\n            int levelCount=ThreadLocalRandom.current().nextInt(1,MAX_LEVEL_ITEMS + 1);\n            for (int j=0; j < levelCount; j++) {\n              final int levelNo=j;\n              service.submit(new Runnable(){\n                @Override public void run(){\n                  try {\n                    Thread.sleep(5000);\n                  }\n catch (                  InterruptedException e1) {\n                    e1.printStackTrace();\n                  }\n                  Connection c=null;\n                  PreparedStatement s=null;\n                  ResultSet r=null;\n                  try {\n                    c=DriverManager.getConnection(url,props);\n                    c.setAutoCommit(false);\n                    int pid=getPid(c);\n                    String prefix;\n                    if (levelNo > 0) {\n                      int sublock=MAX_SESSIONS + (level * MAX_CHAIN_SIZE);\n                      prefix=String.format(\"[%d] Sublock %d for %d -> %d (%d) \",pid,sublock,fieldVal,level,levelNo);\n                      s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                      System.out.println(\"Sublock for \" + prefix);\n                      s.setInt(1,sublock);\n                      s.executeUpdate();\n                    }\n                    prefix=String.format(\"[%d] %d->%d (%d) \",pid,fieldVal,level,levelNo);\n                    s=c.prepareStatement(\"/*\" + prefix + \"*/ update usr set v = 100500 where field = ?\");\n                    s.setInt(1,fieldVal);\n                    System.out.println(\"Wait session for \" + prefix);\n                    s.executeUpdate();\n                    c.close();\n                  }\n catch (                  SQLException e) {\n                    e.printStackTrace();\n                    return;\n                  }\n                }\n              }\n);\n              sessionCount++;\n              if (sessionCount >= MAX_SESSIONS) {\n                break;\n              }\n            }\n            if (sessionCount >= MAX_SESSIONS) {\n              break;\n            }\n          }\n        }\n      }\n      field++;\n    }\n    System.out.println(\"Sbmited \" + sessionCount);\n    service.shutdown();\n    service.awaitTermination(1,TimeUnit.HOURS);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 630,
      "astHeight" : 30
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 7,
        "endLineNumber" : 77,
        "endColumnNumber" : 93
      },
      "nodeContext" : "stmt=conn.prepareStatement(\"create table usr(field INTEGER,v INTEGER, s VARCHAR)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 11,
    "type" : "java.sql.PreparedStatement"
  } ],
  "positionList" : [ {
    "charLength" : 77,
    "startLineNumber" : 77,
    "startColumnNumber" : 15,
    "endLineNumber" : 77,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}