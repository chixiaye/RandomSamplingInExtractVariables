{
  "id" : 374,
  "expression" : "\"UTF-8\"",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/verticle/CompilingClassLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"UTF-8\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 78,
      "startColumnNumber" : 66,
      "endLineNumber" : 78,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 78,
        "startColumnNumber" : 28,
        "endLineNumber" : 78,
        "endColumnNumber" : 74
      },
      "nodeContext" : "URLDecoder.decode(resource.getFile(),\"UTF-8\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 78,
        "startColumnNumber" : 19,
        "endLineNumber" : 78,
        "endColumnNumber" : 75
      },
      "nodeContext" : "new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 75
      },
      "nodeContext" : "sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 76
      },
      "nodeContext" : "sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n}\n catch (UnsupportedEncodingException e) {\n  throw new IllegalStateException(\"Failed to decode \" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2526,
        "startLineNumber" : 69,
        "startColumnNumber" : 69,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  super(loader);\n  URL resource=getResource(sourceName);\n  if (resource == null) {\n    throw new RuntimeException(\"Resource not found: \" + sourceName);\n  }\n  File sourceFile;\n  try {\n    sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"Failed to decode \" + e.getMessage());\n  }\n  if (!sourceFile.canRead()) {\n    throw new RuntimeException(\"File not found: \" + sourceFile.getAbsolutePath() + \" current dir is: \"+ new File(\".\").getAbsolutePath());\n  }\n  this.javaSourceContext=new JavaSourceContext(sourceFile);\n  try {\n    DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n    JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n    if (javaCompiler == null) {\n      throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n    }\n    StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n    standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n    fileManager=new MemoryFileManager(loader,standardFileManager);\n    JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n    boolean valid=task.call();\n    if (valid) {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        String code=d.getCode();\n        if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n          log.info(d);\n        }\n      }\n    }\n else {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        log.warn(d);\n      }\n      throw new RuntimeException(\"Compilation failed!\");\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Compilation failed\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public CompilingClassLoader(ClassLoader loader,String sourceName){\n  super(loader);\n  URL resource=getResource(sourceName);\n  if (resource == null) {\n    throw new RuntimeException(\"Resource not found: \" + sourceName);\n  }\n  File sourceFile;\n  try {\n    sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"Failed to decode \" + e.getMessage());\n  }\n  if (!sourceFile.canRead()) {\n    throw new RuntimeException(\"File not found: \" + sourceFile.getAbsolutePath() + \" current dir is: \"+ new File(\".\").getAbsolutePath());\n  }\n  this.javaSourceContext=new JavaSourceContext(sourceFile);\n  try {\n    DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();\n    JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();\n    if (javaCompiler == null) {\n      throw new RuntimeException(\"Unable to detect java compiler, make sure you're using a JDK not a JRE!\");\n    }\n    StandardJavaFileManager standardFileManager=javaCompiler.getStandardFileManager(null,null,null);\n    standardFileManager.setLocation(StandardLocation.SOURCE_PATH,Collections.singleton(javaSourceContext.getSourceRoot()));\n    fileManager=new MemoryFileManager(loader,standardFileManager);\n    JavaFileObject javaFile=standardFileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH,resolveMainClassName(),Kind.SOURCE);\n    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,diagnostics,COMPILER_OPTIONS,null,Collections.singleton(javaFile));\n    boolean valid=task.call();\n    if (valid) {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        String code=d.getCode();\n        if (code == null || (!code.startsWith(\"compiler.warn.annotation.method.not.found\") && !\"compiler.warn.proc.processor.incompatible.source.version\".equals(code))) {\n          log.info(d);\n        }\n      }\n    }\n else {\n      for (      Diagnostic<?> d : diagnostics.getDiagnostics()) {\n        log.warn(d);\n      }\n      throw new RuntimeException(\"Compilation failed!\");\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Compilation failed\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 76
      },
      "nodeContext" : "sourceFile=new File(URLDecoder.decode(resource.getFile(),\"UTF-8\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 78,
    "startColumnNumber" : 66,
    "endLineNumber" : 78,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}