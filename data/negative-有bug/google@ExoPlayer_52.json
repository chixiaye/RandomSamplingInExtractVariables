{
  "id" : 52,
  "expression" : "position + mpegAudioHeader.frameSize",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/VbriSeeker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "position + mpegAudioHeader.frameSize",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 66,
      "startColumnNumber" : 23,
      "endLineNumber" : 66,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 66,
        "startColumnNumber" : 9,
        "endLineNumber" : 66,
        "endColumnNumber" : 59
      },
      "nodeContext" : "minPosition=position + mpegAudioHeader.frameSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 60
      },
      "nodeContext" : "long minPosition=position + mpegAudioHeader.frameSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 60
      },
      "nodeContext" : "long minPosition=position + mpegAudioHeader.frameSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 66,
    "startColumnNumber" : 23,
    "endLineNumber" : 66,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}