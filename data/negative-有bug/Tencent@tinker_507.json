{
  "id" : 507,
  "expression" : "\"install dexes failed\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"install dexes failed\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 193,
      "startColumnNumber" : 34,
      "endLineNumber" : 193,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"install dexes failed\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"install dexes failed\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 192,
        "startColumnNumber" : 30,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ShareTinkerLog.e(TAG,\"install dexes failed\");\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n  ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 192,
        "startColumnNumber" : 10,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Throwable e) {\n  ShareTinkerLog.e(TAG,\"install dexes failed\");\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n  ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);\n  return false;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final boolean useDLC=application.isUseDelegateLastClassLoader();\n  SystemClassLoaderAdder.installDexes(application,classLoader,optimizeDir,legalFiles,isProtectedApp,useDLC);\n}\n catch (Throwable e) {\n  ShareTinkerLog.e(TAG,\"install dexes failed\");\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n  ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6455,
        "startLineNumber" : 66,
        "startColumnNumber" : 177,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (LOAD_DEX_LIST.isEmpty() && classNDexInfo.isEmpty()) {\n    ShareTinkerLog.w(TAG,\"there is no dex to load\");\n    return true;\n  }\n  ClassLoader classLoader=TinkerDexLoader.class.getClassLoader();\n  if (classLoader != null) {\n    ShareTinkerLog.i(TAG,\"classloader: \" + classLoader.toString());\n  }\n else {\n    ShareTinkerLog.e(TAG,\"classloader is null\");\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_CLASSLOADER_NULL);\n    return false;\n  }\n  String dexPath=directory + \"/\" + DEX_PATH+ \"/\";\n  ArrayList<File> legalFiles=new ArrayList<>();\n  for (  ShareDexDiffPatchInfo info : LOAD_DEX_LIST) {\n    if (isJustArtSupportDex(info)) {\n      continue;\n    }\n    String path=dexPath + info.realName;\n    File file=new File(path);\n    if (application.isTinkerLoadVerifyFlag()) {\n      long start=System.currentTimeMillis();\n      String checkMd5=getInfoMd5(info);\n      if (!SharePatchFileUtil.verifyDexFileMd5(file,checkMd5)) {\n        ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);\n        intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,file.getAbsolutePath());\n        return false;\n      }\n      ShareTinkerLog.i(TAG,\"verify dex file:\" + file.getPath() + \" md5, use time: \"+ (System.currentTimeMillis() - start));\n    }\n    legalFiles.add(file);\n  }\n  if (isVmArt && !classNDexInfo.isEmpty()) {\n    File classNFile=new File(dexPath + ShareConstants.CLASS_N_APK_NAME);\n    long start=System.currentTimeMillis();\n    if (application.isTinkerLoadVerifyFlag()) {\n      for (      ShareDexDiffPatchInfo info : classNDexInfo) {\n        if (!SharePatchFileUtil.verifyDexFileMd5(classNFile,info.rawName,info.destMd5InArt)) {\n          ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);\n          intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,classNFile.getAbsolutePath());\n          return false;\n        }\n      }\n    }\n    ShareTinkerLog.i(TAG,\"verify dex file:\" + classNFile.getPath() + \" md5, use time: \"+ (System.currentTimeMillis() - start));\n    legalFiles.add(classNFile);\n  }\n  File optimizeDir=new File(directory + \"/\" + oatDir);\n  if (isSystemOTA) {\n    final boolean[] parallelOTAResult={true};\n    final Throwable[] parallelOTAThrowable=new Throwable[1];\n    String targetISA;\n    try {\n      targetISA=ShareTinkerInternals.getCurrentInstructionSet();\n    }\n catch (    Throwable throwable) {\n      ShareTinkerLog.i(TAG,\"getCurrentInstructionSet fail:\" + throwable);\n      deleteOutOfDateOATFile(directory);\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_INTERPRET_EXCEPTION,throwable);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_GET_OTA_INSTRUCTION_SET_EXCEPTION);\n      return false;\n    }\n    deleteOutOfDateOATFile(directory);\n    ShareTinkerLog.w(TAG,\"systemOTA, try parallel oat dexes, targetISA:\" + targetISA);\n    optimizeDir=new File(directory + \"/\" + INTERPRET_DEX_OPTIMIZE_PATH);\n    TinkerDexOptimizer.optimizeAll(application,legalFiles,optimizeDir,true,application.isUseDelegateLastClassLoader(),targetISA,new TinkerDexOptimizer.ResultCallback(){\n      long start;\n      @Override public void onStart(      File dexFile,      File optimizedDir){\n        start=System.currentTimeMillis();\n        ShareTinkerLog.i(TAG,\"start to optimize dex:\" + dexFile.getPath());\n      }\n      @Override public void onSuccess(      File dexFile,      File optimizedDir,      File optimizedFile){\n        ShareTinkerLog.i(TAG,\"success to optimize dex \" + dexFile.getPath() + \", use time \"+ (System.currentTimeMillis() - start));\n      }\n      @Override public void onFailed(      File dexFile,      File optimizedDir,      Throwable thr){\n        parallelOTAResult[0]=false;\n        parallelOTAThrowable[0]=thr;\n        ShareTinkerLog.i(TAG,\"fail to optimize dex \" + dexFile.getPath() + \", use time \"+ (System.currentTimeMillis() - start));\n      }\n    }\n);\n    if (!parallelOTAResult[0]) {\n      ShareTinkerLog.e(TAG,\"parallel oat dexes failed\");\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_INTERPRET_EXCEPTION,parallelOTAThrowable[0]);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_OTA_INTERPRET_ONLY_EXCEPTION);\n      return false;\n    }\n  }\n  try {\n    final boolean useDLC=application.isUseDelegateLastClassLoader();\n    SystemClassLoaderAdder.installDexes(application,classLoader,optimizeDir,legalFiles,isProtectedApp,useDLC);\n  }\n catch (  Throwable e) {\n    ShareTinkerLog.e(TAG,\"install dexes failed\");\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 609,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Load tinker JARs and add them to the Application ClassLoader.\n * @param application The application.\n */\npublic static boolean loadTinkerJars(final TinkerApplication application,String directory,String oatDir,Intent intentResult,boolean isSystemOTA,boolean isProtectedApp){\n  if (LOAD_DEX_LIST.isEmpty() && classNDexInfo.isEmpty()) {\n    ShareTinkerLog.w(TAG,\"there is no dex to load\");\n    return true;\n  }\n  ClassLoader classLoader=TinkerDexLoader.class.getClassLoader();\n  if (classLoader != null) {\n    ShareTinkerLog.i(TAG,\"classloader: \" + classLoader.toString());\n  }\n else {\n    ShareTinkerLog.e(TAG,\"classloader is null\");\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_CLASSLOADER_NULL);\n    return false;\n  }\n  String dexPath=directory + \"/\" + DEX_PATH+ \"/\";\n  ArrayList<File> legalFiles=new ArrayList<>();\n  for (  ShareDexDiffPatchInfo info : LOAD_DEX_LIST) {\n    if (isJustArtSupportDex(info)) {\n      continue;\n    }\n    String path=dexPath + info.realName;\n    File file=new File(path);\n    if (application.isTinkerLoadVerifyFlag()) {\n      long start=System.currentTimeMillis();\n      String checkMd5=getInfoMd5(info);\n      if (!SharePatchFileUtil.verifyDexFileMd5(file,checkMd5)) {\n        ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);\n        intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,file.getAbsolutePath());\n        return false;\n      }\n      ShareTinkerLog.i(TAG,\"verify dex file:\" + file.getPath() + \" md5, use time: \"+ (System.currentTimeMillis() - start));\n    }\n    legalFiles.add(file);\n  }\n  if (isVmArt && !classNDexInfo.isEmpty()) {\n    File classNFile=new File(dexPath + ShareConstants.CLASS_N_APK_NAME);\n    long start=System.currentTimeMillis();\n    if (application.isTinkerLoadVerifyFlag()) {\n      for (      ShareDexDiffPatchInfo info : classNDexInfo) {\n        if (!SharePatchFileUtil.verifyDexFileMd5(classNFile,info.rawName,info.destMd5InArt)) {\n          ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);\n          intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,classNFile.getAbsolutePath());\n          return false;\n        }\n      }\n    }\n    ShareTinkerLog.i(TAG,\"verify dex file:\" + classNFile.getPath() + \" md5, use time: \"+ (System.currentTimeMillis() - start));\n    legalFiles.add(classNFile);\n  }\n  File optimizeDir=new File(directory + \"/\" + oatDir);\n  if (isSystemOTA) {\n    final boolean[] parallelOTAResult={true};\n    final Throwable[] parallelOTAThrowable=new Throwable[1];\n    String targetISA;\n    try {\n      targetISA=ShareTinkerInternals.getCurrentInstructionSet();\n    }\n catch (    Throwable throwable) {\n      ShareTinkerLog.i(TAG,\"getCurrentInstructionSet fail:\" + throwable);\n      deleteOutOfDateOATFile(directory);\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_INTERPRET_EXCEPTION,throwable);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_GET_OTA_INSTRUCTION_SET_EXCEPTION);\n      return false;\n    }\n    deleteOutOfDateOATFile(directory);\n    ShareTinkerLog.w(TAG,\"systemOTA, try parallel oat dexes, targetISA:\" + targetISA);\n    optimizeDir=new File(directory + \"/\" + INTERPRET_DEX_OPTIMIZE_PATH);\n    TinkerDexOptimizer.optimizeAll(application,legalFiles,optimizeDir,true,application.isUseDelegateLastClassLoader(),targetISA,new TinkerDexOptimizer.ResultCallback(){\n      long start;\n      @Override public void onStart(      File dexFile,      File optimizedDir){\n        start=System.currentTimeMillis();\n        ShareTinkerLog.i(TAG,\"start to optimize dex:\" + dexFile.getPath());\n      }\n      @Override public void onSuccess(      File dexFile,      File optimizedDir,      File optimizedFile){\n        ShareTinkerLog.i(TAG,\"success to optimize dex \" + dexFile.getPath() + \", use time \"+ (System.currentTimeMillis() - start));\n      }\n      @Override public void onFailed(      File dexFile,      File optimizedDir,      Throwable thr){\n        parallelOTAResult[0]=false;\n        parallelOTAThrowable[0]=thr;\n        ShareTinkerLog.i(TAG,\"fail to optimize dex \" + dexFile.getPath() + \", use time \"+ (System.currentTimeMillis() - start));\n      }\n    }\n);\n    if (!parallelOTAResult[0]) {\n      ShareTinkerLog.e(TAG,\"parallel oat dexes failed\");\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_INTERPRET_EXCEPTION,parallelOTAThrowable[0]);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_OTA_INTERPRET_ONLY_EXCEPTION);\n      return false;\n    }\n  }\n  try {\n    final boolean useDLC=application.isUseDelegateLastClassLoader();\n    SystemClassLoaderAdder.installDexes(application,classLoader,optimizeDir,legalFiles,isProtectedApp,useDLC);\n  }\n catch (  Throwable e) {\n    ShareTinkerLog.e(TAG,\"install dexes failed\");\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);\n    return false;\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 638,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"install dexes failed\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 193,
    "startColumnNumber" : 34,
    "endLineNumber" : 193,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}