{
  "id" : 402,
  "expression" : "ApplicationProvider",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/test/java/com/google/android/exoplayer2/e2etest/EndToEndGaplessTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ApplicationProvider",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 90,
      "startColumnNumber" : 30,
      "endLineNumber" : 90,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 90,
        "startColumnNumber" : 30,
        "endLineNumber" : 90,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ApplicationProvider.getApplicationContext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new ExoPlayer.Builder(ApplicationProvider.getApplicationContext())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 65
      },
      "nodeContext" : "new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 20
      },
      "nodeContext" : "new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true)).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 89,
        "startColumnNumber" : 14,
        "endLineNumber" : 92,
        "endColumnNumber" : 20
      },
      "nodeContext" : "player=new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true)).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "ExoPlayer player=new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true)).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 88,
        "startColumnNumber" : 67,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ExoPlayer player=new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true)).build();\n  player.setMediaItems(ImmutableList.of(MediaItem.fromUri(\"asset:///media/mp3/test.mp3\"),MediaItem.fromUri(\"asset:///media/mp3/test.mp3\")));\n  player.prepare();\n  player.play();\n  TestPlayerRunHelper.runUntilPlaybackState(player,Player.STATE_ENDED);\n  Format playerAudioFormat=player.getAudioFormat();\n  assertThat(playerAudioFormat).isNotNull();\n  int bytesPerFrame=audioTrackListener.getAudioTrackOutputFormat().getFrameSizeInBytes();\n  int paddingBytes=max(0,playerAudioFormat.encoderPadding) * bytesPerFrame;\n  int delayBytes=max(0,playerAudioFormat.encoderDelay) * bytesPerFrame;\n  assertThat(paddingBytes).isEqualTo(2808);\n  assertThat(delayBytes).isEqualTo(1152);\n  byte[] decoderOutputBytes=Bytes.concat(mp3Decoder.getAllOutputBytes().toArray(new byte[0][]));\n  int bytesPerAudioFile=decoderOutputBytes.length / 2;\n  assertThat(bytesPerAudioFile).isEqualTo(92160);\n  byte[] expectedTrimmedByteContent=Bytes.concat(Arrays.copyOfRange(decoderOutputBytes,delayBytes,bytesPerAudioFile - paddingBytes),Arrays.copyOfRange(decoderOutputBytes,bytesPerAudioFile + delayBytes,decoderOutputBytes.length));\n  byte[] audioTrackReceivedBytes=audioTrackListener.getAllReceivedBytes();\n  assertThat(audioTrackReceivedBytes).isEqualTo(expectedTrimmedByteContent);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1810,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPlayback_twoIdenticalMp3Files() throws Exception {\n  ExoPlayer player=new ExoPlayer.Builder(ApplicationProvider.getApplicationContext()).setClock(new FakeClock(true)).build();\n  player.setMediaItems(ImmutableList.of(MediaItem.fromUri(\"asset:///media/mp3/test.mp3\"),MediaItem.fromUri(\"asset:///media/mp3/test.mp3\")));\n  player.prepare();\n  player.play();\n  TestPlayerRunHelper.runUntilPlaybackState(player,Player.STATE_ENDED);\n  Format playerAudioFormat=player.getAudioFormat();\n  assertThat(playerAudioFormat).isNotNull();\n  int bytesPerFrame=audioTrackListener.getAudioTrackOutputFormat().getFrameSizeInBytes();\n  int paddingBytes=max(0,playerAudioFormat.encoderPadding) * bytesPerFrame;\n  int delayBytes=max(0,playerAudioFormat.encoderDelay) * bytesPerFrame;\n  assertThat(paddingBytes).isEqualTo(2808);\n  assertThat(delayBytes).isEqualTo(1152);\n  byte[] decoderOutputBytes=Bytes.concat(mp3Decoder.getAllOutputBytes().toArray(new byte[0][]));\n  int bytesPerAudioFile=decoderOutputBytes.length / 2;\n  assertThat(bytesPerAudioFile).isEqualTo(92160);\n  byte[] expectedTrimmedByteContent=Bytes.concat(Arrays.copyOfRange(decoderOutputBytes,delayBytes,bytesPerAudioFile - paddingBytes),Arrays.copyOfRange(decoderOutputBytes,bytesPerAudioFile + delayBytes,decoderOutputBytes.length));\n  byte[] audioTrackReceivedBytes=audioTrackListener.getAllReceivedBytes();\n  assertThat(audioTrackReceivedBytes).isEqualTo(expectedTrimmedByteContent);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new ExoPlayer.Builder(ApplicationProvider.getApplicationContext())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 90,
    "startColumnNumber" : 30,
    "endLineNumber" : 90,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}