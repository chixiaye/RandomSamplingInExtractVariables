{
  "id" : 215,
  "expression" : "new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/gui/Interpreter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 76,
      "startLineNumber" : 141,
      "startColumnNumber" : 7,
      "endLineNumber" : 141,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 141,
        "startColumnNumber" : 3,
        "endLineNumber" : 141,
        "endColumnNumber" : 83
      },
      "nodeContext" : "g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 141,
        "startColumnNumber" : 3,
        "endLineNumber" : 141,
        "endColumnNumber" : 84
      },
      "nodeContext" : "g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 139,
        "startColumnNumber" : 31,
        "endLineNumber" : 142,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String grammarContent=Files.readString(Path.of(grammarFileName));\n  g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 139,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (grammarFileName != null) {\n  String grammarContent=Files.readString(Path.of(grammarFileName));\n  g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n}\n else {\n  String lexerGrammarContent=Files.readString(Path.of(lexerGrammarFileName));\n  lg=new LexerGrammar(lexerGrammarContent,listener);\n  String parserGrammarContent=Files.readString(Path.of(parserGrammarFileName));\n  g=new IgnoreTokenVocabGrammar(parserGrammarFileName,parserGrammarContent,lg,listener);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2352,
        "startLineNumber" : 132,
        "startColumnNumber" : 71,
        "endLineNumber" : 209,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (grammarFileName == null && (parserGrammarFileName == null && lexerGrammarFileName == null)) {\n    return null;\n  }\n  Grammar g;\n  LexerGrammar lg=null;\n  DefaultToolListener listener=new DefaultToolListener(new Tool());\n  if (grammarFileName != null) {\n    String grammarContent=Files.readString(Path.of(grammarFileName));\n    g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n  }\n else {\n    String lexerGrammarContent=Files.readString(Path.of(lexerGrammarFileName));\n    lg=new LexerGrammar(lexerGrammarContent,listener);\n    String parserGrammarContent=Files.readString(Path.of(parserGrammarFileName));\n    g=new IgnoreTokenVocabGrammar(parserGrammarFileName,parserGrammarContent,lg,listener);\n  }\n  Charset charset=(encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n  CharStream charStream=null;\n  if (inputFileName == null) {\n    charStream=CharStreams.fromStream(System.in,charset);\n  }\n else {\n    try {\n      charStream=CharStreams.fromPath(Paths.get(inputFileName),charset);\n    }\n catch (    NoSuchFileException nsfe) {\n      System.err.println(\"Can't find input file \" + inputFileName);\n      System.exit(1);\n    }\n  }\n  LexerInterpreter lexEngine=(lg != null) ? lg.createLexerInterpreter(charStream) : g.createLexerInterpreter(charStream);\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexEngine));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  if (profileFileName != null) {\n    parser.setProfile(true);\n  }\n  parser.setTrace(trace);\n  Rule r=g.rules.get(startRuleName);\n  if (r == null) {\n    System.err.println(\"No such start rule: \" + startRuleName);\n    return null;\n  }\n  ParseTree t=parser.parse(r.index);\n  ParseInfo parseInfo=parser.getParseInfo();\n  if (printTree) {\n    System.out.println(t.toStringTree(parser));\n  }\n  if (gui) {\n    Trees.inspect(t,parser);\n  }\n  if (profileFileName != null) {\n    dumpProfilerCSV(parser,parseInfo);\n  }\n  return parseInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2422,
        "startLineNumber" : 132,
        "startColumnNumber" : 1,
        "endLineNumber" : 209,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected ParseInfo interp() throws RecognitionException, IOException {\n  if (grammarFileName == null && (parserGrammarFileName == null && lexerGrammarFileName == null)) {\n    return null;\n  }\n  Grammar g;\n  LexerGrammar lg=null;\n  DefaultToolListener listener=new DefaultToolListener(new Tool());\n  if (grammarFileName != null) {\n    String grammarContent=Files.readString(Path.of(grammarFileName));\n    g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n  }\n else {\n    String lexerGrammarContent=Files.readString(Path.of(lexerGrammarFileName));\n    lg=new LexerGrammar(lexerGrammarContent,listener);\n    String parserGrammarContent=Files.readString(Path.of(parserGrammarFileName));\n    g=new IgnoreTokenVocabGrammar(parserGrammarFileName,parserGrammarContent,lg,listener);\n  }\n  Charset charset=(encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));\n  CharStream charStream=null;\n  if (inputFileName == null) {\n    charStream=CharStreams.fromStream(System.in,charset);\n  }\n else {\n    try {\n      charStream=CharStreams.fromPath(Paths.get(inputFileName),charset);\n    }\n catch (    NoSuchFileException nsfe) {\n      System.err.println(\"Can't find input file \" + inputFileName);\n      System.exit(1);\n    }\n  }\n  LexerInterpreter lexEngine=(lg != null) ? lg.createLexerInterpreter(charStream) : g.createLexerInterpreter(charStream);\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexEngine));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  if (profileFileName != null) {\n    parser.setProfile(true);\n  }\n  parser.setTrace(trace);\n  Rule r=g.rules.get(startRuleName);\n  if (r == null) {\n    System.err.println(\"No such start rule: \" + startRuleName);\n    return null;\n  }\n  ParseTree t=parser.parse(r.index);\n  ParseInfo parseInfo=parser.getParseInfo();\n  if (printTree) {\n    System.out.println(t.toStringTree(parser));\n  }\n  if (gui) {\n    Trees.inspect(t,parser);\n  }\n  if (profileFileName != null) {\n    dumpProfilerCSV(parser,parseInfo);\n  }\n  return parseInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 367,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 141,
        "startColumnNumber" : 3,
        "endLineNumber" : 141,
        "endColumnNumber" : 84
      },
      "nodeContext" : "g=new IgnoreTokenVocabGrammar(grammarFileName,grammarContent,null,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "org.antlr.v4.gui.Interpreter.IgnoreTokenVocabGrammar"
  } ],
  "positionList" : [ {
    "charLength" : 76,
    "startLineNumber" : 141,
    "startColumnNumber" : 7,
    "endLineNumber" : 141,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}