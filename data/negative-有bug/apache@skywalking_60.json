{
  "id" : 60,
  "expression" : "callMap",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceTopologyBuilder.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "callMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 103,
      "startColumnNumber" : 17,
      "endLineNumber" : 103,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 103,
        "startColumnNumber" : 17,
        "endLineNumber" : 103,
        "endColumnNumber" : 48
      },
      "nodeContext" : "callMap.containsKey(relationId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!callMap.containsKey(relationId)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!callMap.containsKey(relationId)) {\n  Call call=new Call();\n  callMap.put(relationId,call);\n  call.setSource(sourceServiceId);\n  call.setTarget(targetServiceId);\n  call.setId(relationId);\n  call.addDetectPoint(DetectPoint.CLIENT);\n  call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n  calls.add(call);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2544,
        "startLineNumber" : 62,
        "startColumnNumber" : 70,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n  String sourceServiceId=clientCall.getSource();\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n  String targetServiceId=clientCall.getTarget();\n  if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n    final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n    destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n    targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n  }\n  if (!nodes.containsKey(targetServiceId)) {\n    final Node conjecturalNode=buildNode(targetServiceId,destService);\n    nodes.put(targetServiceId,conjecturalNode);\n    if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n      conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n    }\n  }\n  if (!nodes.containsKey(sourceServiceId)) {\n    nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n  }\n  final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n  if (!callMap.containsKey(relationId)) {\n    Call call=new Call();\n    callMap.put(relationId,call);\n    call.setSource(sourceServiceId);\n    call.setTarget(targetServiceId);\n    call.setId(relationId);\n    call.addDetectPoint(DetectPoint.CLIENT);\n    call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n    calls.add(call);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2606,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Call.CallDetail clientCall : serviceRelationClientCalls) {\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n  String sourceServiceId=clientCall.getSource();\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n  String targetServiceId=clientCall.getTarget();\n  if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n    final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n    destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n    targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n  }\n  if (!nodes.containsKey(targetServiceId)) {\n    final Node conjecturalNode=buildNode(targetServiceId,destService);\n    nodes.put(targetServiceId,conjecturalNode);\n    if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n      conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n    }\n  }\n  if (!nodes.containsKey(sourceServiceId)) {\n    nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n  }\n  final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n  if (!callMap.containsKey(relationId)) {\n    Call call=new Call();\n    callMap.put(relationId,call);\n    call.setSource(sourceServiceId);\n    call.setTarget(targetServiceId);\n    call.setId(relationId);\n    call.addDetectPoint(DetectPoint.CLIENT);\n    call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n    calls.add(call);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5641,
        "startLineNumber" : 56,
        "startColumnNumber" : 119,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5756,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Topology build(List<Call.CallDetail> serviceRelationClientCalls,List<Call.CallDetail> serviceRelationServerCalls){\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 602,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!callMap.containsKey(relationId)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.String,org.apache.skywalking.oap.server.core.query.type.Call>"
  }, {
    "nodeContext" : "callMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 106,
      "startColumnNumber" : 16,
      "endLineNumber" : 106,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 45
      },
      "nodeContext" : "callMap.put(relationId,call)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 46
      },
      "nodeContext" : "callMap.put(relationId,call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 103,
        "startColumnNumber" : 50,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Call call=new Call();\n  callMap.put(relationId,call);\n  call.setSource(sourceServiceId);\n  call.setTarget(targetServiceId);\n  call.setId(relationId);\n  call.addDetectPoint(DetectPoint.CLIENT);\n  call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n  calls.add(call);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 488,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!callMap.containsKey(relationId)) {\n  Call call=new Call();\n  callMap.put(relationId,call);\n  call.setSource(sourceServiceId);\n  call.setTarget(targetServiceId);\n  call.setId(relationId);\n  call.addDetectPoint(DetectPoint.CLIENT);\n  call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n  calls.add(call);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2544,
        "startLineNumber" : 62,
        "startColumnNumber" : 70,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n  String sourceServiceId=clientCall.getSource();\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n  String targetServiceId=clientCall.getTarget();\n  if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n    final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n    destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n    targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n  }\n  if (!nodes.containsKey(targetServiceId)) {\n    final Node conjecturalNode=buildNode(targetServiceId,destService);\n    nodes.put(targetServiceId,conjecturalNode);\n    if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n      conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n    }\n  }\n  if (!nodes.containsKey(sourceServiceId)) {\n    nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n  }\n  final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n  if (!callMap.containsKey(relationId)) {\n    Call call=new Call();\n    callMap.put(relationId,call);\n    call.setSource(sourceServiceId);\n    call.setTarget(targetServiceId);\n    call.setId(relationId);\n    call.addDetectPoint(DetectPoint.CLIENT);\n    call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n    calls.add(call);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2606,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Call.CallDetail clientCall : serviceRelationClientCalls) {\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n  String sourceServiceId=clientCall.getSource();\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n  String targetServiceId=clientCall.getTarget();\n  if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n    final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n    destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n    targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n  }\n  if (!nodes.containsKey(targetServiceId)) {\n    final Node conjecturalNode=buildNode(targetServiceId,destService);\n    nodes.put(targetServiceId,conjecturalNode);\n    if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n      conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n    }\n  }\n  if (!nodes.containsKey(sourceServiceId)) {\n    nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n  }\n  final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n  if (!callMap.containsKey(relationId)) {\n    Call call=new Call();\n    callMap.put(relationId,call);\n    call.setSource(sourceServiceId);\n    call.setTarget(targetServiceId);\n    call.setId(relationId);\n    call.addDetectPoint(DetectPoint.CLIENT);\n    call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n    calls.add(call);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5641,
        "startLineNumber" : 56,
        "startColumnNumber" : 119,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5756,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Topology build(List<Call.CallDetail> serviceRelationClientCalls,List<Call.CallDetail> serviceRelationServerCalls){\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 602,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 46
      },
      "nodeContext" : "callMap.put(relationId,call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.String,org.apache.skywalking.oap.server.core.query.type.Call>"
  }, {
    "nodeContext" : "callMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 157,
      "startColumnNumber" : 17,
      "endLineNumber" : 157,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 157,
        "startColumnNumber" : 17,
        "endLineNumber" : 157,
        "endColumnNumber" : 56
      },
      "nodeContext" : "callMap.containsKey(serverCall.getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 56
      },
      "nodeContext" : "!callMap.containsKey(serverCall.getId())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!callMap.containsKey(serverCall.getId())) {\n  Call call=new Call();\n  callMap.put(serverCall.getId(),call);\n  call.setSource(serverCall.getSource());\n  call.setTarget(serverCall.getTarget());\n  call.setId(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  calls.add(call);\n}\n else {\n  Call call=callMap.get(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 116,
        "startColumnNumber" : 70,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Call.CallDetail serverCall : serviceRelationServerCalls) {\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 261,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5641,
        "startLineNumber" : 56,
        "startColumnNumber" : 119,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5756,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Topology build(List<Call.CallDetail> serviceRelationClientCalls,List<Call.CallDetail> serviceRelationServerCalls){\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 602,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 157,
        "endColumnNumber" : 56
      },
      "nodeContext" : "!callMap.containsKey(serverCall.getId())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.String,org.apache.skywalking.oap.server.core.query.type.Call>"
  }, {
    "nodeContext" : "callMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 159,
      "startColumnNumber" : 16,
      "endLineNumber" : 159,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 53
      },
      "nodeContext" : "callMap.put(serverCall.getId(),call)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 54
      },
      "nodeContext" : "callMap.put(serverCall.getId(),call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 479,
        "startLineNumber" : 157,
        "startColumnNumber" : 58,
        "endLineNumber" : 166,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Call call=new Call();\n  callMap.put(serverCall.getId(),call);\n  call.setSource(serverCall.getSource());\n  call.setTarget(serverCall.getTarget());\n  call.setId(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  calls.add(call);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!callMap.containsKey(serverCall.getId())) {\n  Call call=new Call();\n  callMap.put(serverCall.getId(),call);\n  call.setSource(serverCall.getSource());\n  call.setTarget(serverCall.getTarget());\n  call.setId(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  calls.add(call);\n}\n else {\n  Call call=callMap.get(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 116,
        "startColumnNumber" : 70,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Call.CallDetail serverCall : serviceRelationServerCalls) {\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 261,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5641,
        "startLineNumber" : 56,
        "startColumnNumber" : 119,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5756,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Topology build(List<Call.CallDetail> serviceRelationClientCalls,List<Call.CallDetail> serviceRelationServerCalls){\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 602,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 159,
        "endColumnNumber" : 54
      },
      "nodeContext" : "callMap.put(serverCall.getId(),call);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.String,org.apache.skywalking.oap.server.core.query.type.Call>"
  }, {
    "nodeContext" : "callMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 167,
      "startColumnNumber" : 28,
      "endLineNumber" : 167,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 167,
        "endColumnNumber" : 59
      },
      "nodeContext" : "callMap.get(serverCall.getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 167,
        "startColumnNumber" : 21,
        "endLineNumber" : 167,
        "endColumnNumber" : 59
      },
      "nodeContext" : "call=callMap.get(serverCall.getId())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 167,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Call call=callMap.get(serverCall.getId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 166,
        "startColumnNumber" : 19,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Call call=callMap.get(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 157,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!callMap.containsKey(serverCall.getId())) {\n  Call call=new Call();\n  callMap.put(serverCall.getId(),call);\n  call.setSource(serverCall.getSource());\n  call.setTarget(serverCall.getTarget());\n  call.setId(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  calls.add(call);\n}\n else {\n  Call call=callMap.get(serverCall.getId());\n  call.addDetectPoint(DetectPoint.SERVER);\n  call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 116,
        "startColumnNumber" : 70,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Call.CallDetail serverCall : serviceRelationServerCalls) {\n  final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n  IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n  Node clientSideNode=nodes.get(serverCall.getSource());\n  if (clientSideNode == null) {\n    clientSideNode=buildNode(serverCall.getSource(),sourceService);\n    nodes.put(serverCall.getSource(),clientSideNode);\n  }\n  if (!clientSideNode.isReal()) {\n    clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n  }\n  if (userID.equals(serverCall.getSource())) {\n    nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n  }\n  if (!nodes.containsKey(serverCall.getTarget())) {\n    final Node node=buildNode(serverCall.getTarget(),destService);\n    nodes.put(serverCall.getTarget(),node);\n  }\n  final Node serverSideNode=nodes.get(serverCall.getTarget());\n  serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  if (!callMap.containsKey(serverCall.getId())) {\n    Call call=new Call();\n    callMap.put(serverCall.getId(),call);\n    call.setSource(serverCall.getSource());\n    call.setTarget(serverCall.getTarget());\n    call.setId(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    calls.add(call);\n  }\n else {\n    Call call=callMap.get(serverCall.getId());\n    call.addDetectPoint(DetectPoint.SERVER);\n    call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 261,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5641,
        "startLineNumber" : 56,
        "startColumnNumber" : 119,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5756,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Topology build(List<Call.CallDetail> serviceRelationClientCalls,List<Call.CallDetail> serviceRelationServerCalls){\n  Map<String,Node> nodes=new HashMap<>();\n  List<Call> calls=new LinkedList<>();\n  HashMap<String,Call> callMap=new HashMap<>();\n  for (  Call.CallDetail clientCall : serviceRelationClientCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(clientCall.getSource());\n    String sourceServiceId=clientCall.getSource();\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(clientCall.getTarget());\n    String targetServiceId=clientCall.getTarget();\n    if (!destService.isReal() && networkAddressAliasCache.get(destService.getName()) != null) {\n      final NetworkAddressAlias networkAddressAlias=networkAddressAliasCache.get(destService.getName());\n      destService=IDManager.ServiceID.analysisId(networkAddressAlias.getRepresentServiceId());\n      targetServiceId=IDManager.ServiceID.buildId(destService.getName(),NodeType.Normal);\n    }\n    if (!nodes.containsKey(targetServiceId)) {\n      final Node conjecturalNode=buildNode(targetServiceId,destService);\n      nodes.put(targetServiceId,conjecturalNode);\n      if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {\n        conjecturalNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));\n      }\n    }\n    if (!nodes.containsKey(sourceServiceId)) {\n      nodes.put(sourceServiceId,buildNode(sourceServiceId,sourceService));\n    }\n    final String relationId=IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId,targetServiceId));\n    if (!callMap.containsKey(relationId)) {\n      Call call=new Call();\n      callMap.put(relationId,call);\n      call.setSource(sourceServiceId);\n      call.setTarget(targetServiceId);\n      call.setId(relationId);\n      call.addDetectPoint(DetectPoint.CLIENT);\n      call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));\n      calls.add(call);\n    }\n  }\n  for (  Call.CallDetail serverCall : serviceRelationServerCalls) {\n    final IDManager.ServiceID.ServiceIDDefinition sourceService=IDManager.ServiceID.analysisId(serverCall.getSource());\n    IDManager.ServiceID.ServiceIDDefinition destService=IDManager.ServiceID.analysisId(serverCall.getTarget());\n    Node clientSideNode=nodes.get(serverCall.getSource());\n    if (clientSideNode == null) {\n      clientSideNode=buildNode(serverCall.getSource(),sourceService);\n      nodes.put(serverCall.getSource(),clientSideNode);\n    }\n    if (!clientSideNode.isReal()) {\n      clientSideNode.setType(componentLibraryCatalogService.getServerNameBasedOnComponent(serverCall.getComponentId()));\n    }\n    if (userID.equals(serverCall.getSource())) {\n      nodes.get(userID).setType(Const.USER_SERVICE_NAME.toUpperCase());\n    }\n    if (!nodes.containsKey(serverCall.getTarget())) {\n      final Node node=buildNode(serverCall.getTarget(),destService);\n      nodes.put(serverCall.getTarget(),node);\n    }\n    final Node serverSideNode=nodes.get(serverCall.getTarget());\n    serverSideNode.setType(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    if (!callMap.containsKey(serverCall.getId())) {\n      Call call=new Call();\n      callMap.put(serverCall.getId(),call);\n      call.setSource(serverCall.getSource());\n      call.setTarget(serverCall.getTarget());\n      call.setId(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n      calls.add(call);\n    }\n else {\n      Call call=callMap.get(serverCall.getId());\n      call.addDetectPoint(DetectPoint.SERVER);\n      call.addTargetComponent(componentLibraryCatalogService.getComponentName(serverCall.getComponentId()));\n    }\n  }\n  Topology topology=new Topology();\n  topology.getCalls().addAll(calls);\n  topology.getNodes().addAll(nodes.values());\n  return topology;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 602,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 167,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Call call=callMap.get(serverCall.getId());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.String,org.apache.skywalking.oap.server.core.query.type.Call>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 103,
    "startColumnNumber" : 17,
    "endLineNumber" : 103,
    "endColumnNumber" : 24
  }, {
    "charLength" : 7,
    "startLineNumber" : 106,
    "startColumnNumber" : 16,
    "endLineNumber" : 106,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 157,
    "startColumnNumber" : 17,
    "endLineNumber" : 157,
    "endColumnNumber" : 24
  }, {
    "charLength" : 7,
    "startLineNumber" : 159,
    "startColumnNumber" : 16,
    "endLineNumber" : 159,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 167,
    "startColumnNumber" : 28,
    "endLineNumber" : 167,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}