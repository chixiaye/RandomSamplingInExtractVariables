{
  "id" : 421,
  "expression" : "packageLocationMetaDataBuilder",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/rest/api/ComponentImpl.java",
  "occurrences" : 24,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 298,
      "startColumnNumber" : 16,
      "endLineNumber" : 298,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 48
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 49
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 289,
        "startColumnNumber" : 27,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 298,
        "startColumnNumber" : 16,
        "endLineNumber" : 299,
        "endColumnNumber" : 48
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 300,
      "startColumnNumber" : 16,
      "endLineNumber" : 300,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 300,
        "startColumnNumber" : 16,
        "endLineNumber" : 300,
        "endColumnNumber" : 90
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 300,
        "startColumnNumber" : 16,
        "endLineNumber" : 300,
        "endColumnNumber" : 91
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 289,
        "startColumnNumber" : 27,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 300,
        "startColumnNumber" : 16,
        "endLineNumber" : 300,
        "endColumnNumber" : 91
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 301,
      "startColumnNumber" : 99,
      "endLineNumber" : 301,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 301,
        "startColumnNumber" : 99,
        "endLineNumber" : 301,
        "endColumnNumber" : 146
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 147
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 289,
        "startColumnNumber" : 27,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 301,
        "startColumnNumber" : 16,
        "endLineNumber" : 301,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 302,
      "startColumnNumber" : 51,
      "endLineNumber" : 302,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 302,
        "startColumnNumber" : 51,
        "endLineNumber" : 302,
        "endColumnNumber" : 98
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 302,
        "startColumnNumber" : 16,
        "endLineNumber" : 302,
        "endColumnNumber" : 142
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 302,
        "startColumnNumber" : 16,
        "endLineNumber" : 302,
        "endColumnNumber" : 143
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 289,
        "startColumnNumber" : 27,
        "endLineNumber" : 303,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 302,
        "startColumnNumber" : 16,
        "endLineNumber" : 302,
        "endColumnNumber" : 143
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 304,
      "startColumnNumber" : 16,
      "endLineNumber" : 304,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 61
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 62
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 303,
        "startColumnNumber" : 41,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 61
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 306,
      "startColumnNumber" : 16,
      "endLineNumber" : 306,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 306,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 103
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 306,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 104
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 303,
        "startColumnNumber" : 41,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 306,
        "startColumnNumber" : 16,
        "endLineNumber" : 306,
        "endColumnNumber" : 104
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 307,
      "startColumnNumber" : 99,
      "endLineNumber" : 307,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 307,
        "startColumnNumber" : 99,
        "endLineNumber" : 307,
        "endColumnNumber" : 146
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 307,
        "startColumnNumber" : 16,
        "endLineNumber" : 307,
        "endColumnNumber" : 147
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 307,
        "startColumnNumber" : 16,
        "endLineNumber" : 307,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 303,
        "startColumnNumber" : 41,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 307,
        "startColumnNumber" : 16,
        "endLineNumber" : 307,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 308,
      "startColumnNumber" : 51,
      "endLineNumber" : 308,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 308,
        "startColumnNumber" : 51,
        "endLineNumber" : 308,
        "endColumnNumber" : 98
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 308,
        "startColumnNumber" : 16,
        "endLineNumber" : 308,
        "endColumnNumber" : 155
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 308,
        "startColumnNumber" : 16,
        "endLineNumber" : 308,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 303,
        "startColumnNumber" : 41,
        "endLineNumber" : 309,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 308,
        "startColumnNumber" : 16,
        "endLineNumber" : 308,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 312,
      "startColumnNumber" : 16,
      "endLineNumber" : 312,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 312,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 34
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 312,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 35
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 310,
        "startColumnNumber" : 102,
        "endLineNumber" : 317,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 312,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 34
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 314,
      "startColumnNumber" : 16,
      "endLineNumber" : 314,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 314,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 76
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 314,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 77
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 310,
        "startColumnNumber" : 102,
        "endLineNumber" : 317,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 314,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 77
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 315,
      "startColumnNumber" : 99,
      "endLineNumber" : 315,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 315,
        "startColumnNumber" : 99,
        "endLineNumber" : 315,
        "endColumnNumber" : 146
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 315,
        "startColumnNumber" : 16,
        "endLineNumber" : 315,
        "endColumnNumber" : 147
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 315,
        "startColumnNumber" : 16,
        "endLineNumber" : 315,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 310,
        "startColumnNumber" : 102,
        "endLineNumber" : 317,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 315,
        "startColumnNumber" : 16,
        "endLineNumber" : 315,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 316,
      "startColumnNumber" : 51,
      "endLineNumber" : 316,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 316,
        "startColumnNumber" : 51,
        "endLineNumber" : 316,
        "endColumnNumber" : 98
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 316,
        "startColumnNumber" : 16,
        "endLineNumber" : 316,
        "endColumnNumber" : 155
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 316,
        "startColumnNumber" : 16,
        "endLineNumber" : 316,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 310,
        "startColumnNumber" : 102,
        "endLineNumber" : 317,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 316,
        "startColumnNumber" : 16,
        "endLineNumber" : 316,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 318,
      "startColumnNumber" : 16,
      "endLineNumber" : 318,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 318,
        "startColumnNumber" : 16,
        "endLineNumber" : 319,
        "endColumnNumber" : 50
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 318,
        "startColumnNumber" : 16,
        "endLineNumber" : 319,
        "endColumnNumber" : 51
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 317,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 318,
        "startColumnNumber" : 16,
        "endLineNumber" : 319,
        "endColumnNumber" : 50
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 320,
      "startColumnNumber" : 16,
      "endLineNumber" : 320,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 320,
        "startColumnNumber" : 16,
        "endLineNumber" : 320,
        "endColumnNumber" : 92
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 320,
        "startColumnNumber" : 16,
        "endLineNumber" : 320,
        "endColumnNumber" : 93
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 317,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 320,
        "startColumnNumber" : 16,
        "endLineNumber" : 320,
        "endColumnNumber" : 93
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 321,
      "startColumnNumber" : 99,
      "endLineNumber" : 321,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 321,
        "startColumnNumber" : 99,
        "endLineNumber" : 321,
        "endColumnNumber" : 146
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 321,
        "startColumnNumber" : 16,
        "endLineNumber" : 321,
        "endColumnNumber" : 147
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 321,
        "startColumnNumber" : 16,
        "endLineNumber" : 321,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 317,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 321,
        "startColumnNumber" : 16,
        "endLineNumber" : 321,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 322,
      "startColumnNumber" : 51,
      "endLineNumber" : 322,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 322,
        "startColumnNumber" : 51,
        "endLineNumber" : 322,
        "endColumnNumber" : 98
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 155
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 317,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 309,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 323,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  File sinkOrSource;\n  if (componentType == FunctionDetails.ComponentType.SOURCE) {\n    String archiveName=functionDetails.getSource().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n  }\n else {\n    String archiveName=functionDetails.getSink().getBuiltin();\n    sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n  }\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 277,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3316,
        "startLineNumber" : 287,
        "startColumnNumber" : 90,
        "endLineNumber" : 324,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 322,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 327,
      "startColumnNumber" : 16,
      "endLineNumber" : 327,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 327,
        "startColumnNumber" : 16,
        "endLineNumber" : 327,
        "endColumnNumber" : 117
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 327,
        "startColumnNumber" : 16,
        "endLineNumber" : 327,
        "endColumnNumber" : 118
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 326,
        "startColumnNumber" : 27,
        "endLineNumber" : 328,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 327,
        "startColumnNumber" : 16,
        "endLineNumber" : 327,
        "endColumnNumber" : 118
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 329,
      "startColumnNumber" : 16,
      "endLineNumber" : 329,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 329,
        "startColumnNumber" : 16,
        "endLineNumber" : 329,
        "endColumnNumber" : 77
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 329,
        "startColumnNumber" : 16,
        "endLineNumber" : 329,
        "endColumnNumber" : 78
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 328,
        "startColumnNumber" : 41,
        "endLineNumber" : 330,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 329,
        "startColumnNumber" : 16,
        "endLineNumber" : 329,
        "endColumnNumber" : 78
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 332,
      "startColumnNumber" : 16,
      "endLineNumber" : 332,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 332,
        "startColumnNumber" : 16,
        "endLineNumber" : 332,
        "endColumnNumber" : 117
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 332,
        "startColumnNumber" : 16,
        "endLineNumber" : 332,
        "endColumnNumber" : 118
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 331,
        "startColumnNumber" : 102,
        "endLineNumber" : 333,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 332,
        "startColumnNumber" : 16,
        "endLineNumber" : 332,
        "endColumnNumber" : 118
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 334,
      "startColumnNumber" : 16,
      "endLineNumber" : 334,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 334,
        "startColumnNumber" : 16,
        "endLineNumber" : 334,
        "endColumnNumber" : 140
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 334,
        "startColumnNumber" : 16,
        "endLineNumber" : 334,
        "endColumnNumber" : 141
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 333,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 334,
        "startColumnNumber" : 16,
        "endLineNumber" : 334,
        "endColumnNumber" : 141
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 335,
      "startColumnNumber" : 16,
      "endLineNumber" : 335,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 92
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 93
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 333,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 335,
        "endColumnNumber" : 93
      },
      "nodeContext" : "packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 336,
      "startColumnNumber" : 99,
      "endLineNumber" : 336,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 336,
        "startColumnNumber" : 99,
        "endLineNumber" : 336,
        "endColumnNumber" : 146
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 336,
        "startColumnNumber" : 16,
        "endLineNumber" : 336,
        "endColumnNumber" : 147
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 336,
        "startColumnNumber" : 16,
        "endLineNumber" : 336,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 333,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 336,
        "startColumnNumber" : 16,
        "endLineNumber" : 336,
        "endColumnNumber" : 148
      },
      "nodeContext" : "log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 337,
      "startColumnNumber" : 51,
      "endLineNumber" : 337,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 337,
        "startColumnNumber" : 51,
        "endLineNumber" : 337,
        "endColumnNumber" : 98
      },
      "nodeContext" : "packageLocationMetaDataBuilder.getPackagePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 155
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 333,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 328,
        "startColumnNumber" : 19,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 326,
        "startColumnNumber" : 12,
        "endLineNumber" : 338,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isBuiltin) {\n  packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n}\n else if (isPkgUrlProvided) {\n  packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n}\n else if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n  packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n}\n else {\n  packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n  packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n  log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n  WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 324,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4680,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n  if (isBuiltin) {\n    File sinkOrSource;\n    if (componentType == FunctionDetails.ComponentType.SOURCE) {\n      String archiveName=functionDetails.getSource().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n    }\n else {\n      String archiveName=functionDetails.getSink().getBuiltin();\n      sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n    }\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n else {\n  if (isBuiltin) {\n    packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n  }\n else   if (isPkgUrlProvided) {\n    packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n  }\n else   if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n    packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n  }\n else {\n    packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n    packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n    log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n    WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 337,
        "startColumnNumber" : 16,
        "endLineNumber" : 337,
        "endColumnNumber" : 156
      },
      "nodeContext" : "WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  }, {
    "nodeContext" : "packageLocationMetaDataBuilder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 340,
      "startColumnNumber" : 15,
      "endLineNumber" : 340,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 340,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return packageLocationMetaDataBuilder;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5236,
        "startLineNumber" : 279,
        "startColumnNumber" : 118,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5654,
        "startLineNumber" : 276,
        "startColumnNumber" : 4,
        "endLineNumber" : 341,
        "endColumnNumber" : 5
      },
      "nodeContext" : "PackageLocationMetaData.Builder getFunctionPackageLocation(final FunctionMetaData functionMetaData,final String functionPkgUrl,final FormDataContentDisposition fileDetail,final File uploadedInputStreamAsFile) throws Exception {\n  FunctionDetails functionDetails=functionMetaData.getFunctionDetails();\n  String tenant=functionDetails.getTenant();\n  String namespace=functionDetails.getNamespace();\n  String componentName=functionDetails.getName();\n  PackageLocationMetaData.Builder packageLocationMetaDataBuilder=PackageLocationMetaData.newBuilder();\n  boolean isBuiltin=isFunctionCodeBuiltin(functionDetails);\n  boolean isPkgUrlProvided=isNotBlank(functionPkgUrl);\n  if (worker().getFunctionRuntimeManager().getRuntimeFactory().externallyManaged()) {\n    if (isBuiltin) {\n      File sinkOrSource;\n      if (componentType == FunctionDetails.ComponentType.SOURCE) {\n        String archiveName=functionDetails.getSource().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSourceArchive(archiveName).toFile();\n      }\n else {\n        String archiveName=functionDetails.getSink().getBuiltin();\n        sinkOrSource=worker().getConnectorsManager().getSinkArchive(archiveName).toFile();\n      }\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,sinkOrSource.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(sinkOrSource.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),sinkOrSource,worker().getDlogNamespace());\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,uploadedInputStreamAsFile.getName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(uploadedInputStreamAsFile.getName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      String fileName=new File(new URL(functionMetaData.getPackageLocation().getPackagePath()).toURI()).getName();\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileName));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileName);\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n else {\n    if (isBuiltin) {\n      packageLocationMetaDataBuilder.setPackagePath(\"builtin://\" + getFunctionCodeBuiltin(functionDetails));\n    }\n else     if (isPkgUrlProvided) {\n      packageLocationMetaDataBuilder.setPackagePath(functionPkgUrl);\n    }\n else     if (functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.HTTP) || functionMetaData.getPackageLocation().getPackagePath().startsWith(Utils.FILE)) {\n      packageLocationMetaDataBuilder.setPackagePath(functionMetaData.getPackageLocation().getPackagePath());\n    }\n else {\n      packageLocationMetaDataBuilder.setPackagePath(createPackagePath(tenant,namespace,componentName,fileDetail.getFileName()));\n      packageLocationMetaDataBuilder.setOriginalFileName(fileDetail.getFileName());\n      log.info(\"Uploading {} package to {}\",ComponentTypeUtils.toString(componentType),packageLocationMetaDataBuilder.getPackagePath());\n      WorkerUtils.uploadFileToBookkeeper(packageLocationMetaDataBuilder.getPackagePath(),uploadedInputStreamAsFile,worker().getDlogNamespace());\n    }\n  }\n  return packageLocationMetaDataBuilder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 340,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return packageLocationMetaDataBuilder;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "PackageLocationMetaData.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 298,
    "startColumnNumber" : 16,
    "endLineNumber" : 298,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 300,
    "startColumnNumber" : 16,
    "endLineNumber" : 300,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 301,
    "startColumnNumber" : 99,
    "endLineNumber" : 301,
    "endColumnNumber" : 129
  }, {
    "charLength" : 30,
    "startLineNumber" : 302,
    "startColumnNumber" : 51,
    "endLineNumber" : 302,
    "endColumnNumber" : 81
  }, {
    "charLength" : 30,
    "startLineNumber" : 304,
    "startColumnNumber" : 16,
    "endLineNumber" : 304,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 306,
    "startColumnNumber" : 16,
    "endLineNumber" : 306,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 307,
    "startColumnNumber" : 99,
    "endLineNumber" : 307,
    "endColumnNumber" : 129
  }, {
    "charLength" : 30,
    "startLineNumber" : 308,
    "startColumnNumber" : 51,
    "endLineNumber" : 308,
    "endColumnNumber" : 81
  }, {
    "charLength" : 30,
    "startLineNumber" : 312,
    "startColumnNumber" : 16,
    "endLineNumber" : 312,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 314,
    "startColumnNumber" : 16,
    "endLineNumber" : 314,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 315,
    "startColumnNumber" : 99,
    "endLineNumber" : 315,
    "endColumnNumber" : 129
  }, {
    "charLength" : 30,
    "startLineNumber" : 316,
    "startColumnNumber" : 51,
    "endLineNumber" : 316,
    "endColumnNumber" : 81
  }, {
    "charLength" : 30,
    "startLineNumber" : 318,
    "startColumnNumber" : 16,
    "endLineNumber" : 318,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 320,
    "startColumnNumber" : 16,
    "endLineNumber" : 320,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 321,
    "startColumnNumber" : 99,
    "endLineNumber" : 321,
    "endColumnNumber" : 129
  }, {
    "charLength" : 30,
    "startLineNumber" : 322,
    "startColumnNumber" : 51,
    "endLineNumber" : 322,
    "endColumnNumber" : 81
  }, {
    "charLength" : 30,
    "startLineNumber" : 327,
    "startColumnNumber" : 16,
    "endLineNumber" : 327,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 329,
    "startColumnNumber" : 16,
    "endLineNumber" : 329,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 332,
    "startColumnNumber" : 16,
    "endLineNumber" : 332,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 334,
    "startColumnNumber" : 16,
    "endLineNumber" : 334,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 335,
    "startColumnNumber" : 16,
    "endLineNumber" : 335,
    "endColumnNumber" : 46
  }, {
    "charLength" : 30,
    "startLineNumber" : 336,
    "startColumnNumber" : 99,
    "endLineNumber" : 336,
    "endColumnNumber" : 129
  }, {
    "charLength" : 30,
    "startLineNumber" : 337,
    "startColumnNumber" : 51,
    "endLineNumber" : 337,
    "endColumnNumber" : 81
  }, {
    "charLength" : 30,
    "startLineNumber" : 340,
    "startColumnNumber" : 15,
    "endLineNumber" : 340,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 1
  } ]
}