{
  "id" : 315,
  "expression" : "fromValue instanceof JSONObject",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho/src/main/java/com/facebook/stetho/json/ObjectMapper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fromValue instanceof JSONObject",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 71,
      "startColumnNumber" : 10,
      "endLineNumber" : 71,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (fromValue instanceof JSONObject) {\n  return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n}\n else if (toValueType == JSONObject.class) {\n  return (T)_convertToJSONObject(fromValue);\n}\n else {\n  throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (fromValue instanceof JSONObject) {\n    return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n  }\n else   if (toValueType == JSONObject.class) {\n    return (T)_convertToJSONObject(fromValue);\n  }\n else {\n    throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (fromValue instanceof JSONObject) {\n    return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n  }\n else   if (toValueType == JSONObject.class) {\n    return (T)_convertToJSONObject(fromValue);\n  }\n else {\n    throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n  }\n}\n catch (NoSuchMethodException e) {\n  throw new IllegalArgumentException(e);\n}\ncatch (IllegalAccessException e) {\n  throw new IllegalArgumentException(e);\n}\ncatch (InstantiationException e) {\n  throw new IllegalArgumentException(e);\n}\ncatch (JSONException e) {\n  throw new IllegalArgumentException(e);\n}\ncatch (InvocationTargetException e) {\n  throw ExceptionUtil.propagate(e.getCause());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 93,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1010,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (fromValue == null) {\n    return null;\n  }\n  if (toValueType != Object.class && toValueType.isAssignableFrom(fromValue.getClass())) {\n    return (T)fromValue;\n  }\n  try {\n    if (fromValue instanceof JSONObject) {\n      return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n    }\n else     if (toValueType == JSONObject.class) {\n      return (T)_convertToJSONObject(fromValue);\n    }\n else {\n      throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n    }\n  }\n catch (  NoSuchMethodException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  JSONException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw ExceptionUtil.propagate(e.getCause());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1607,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Support mapping between arbitrary classes and  {@link JSONObject}. <note> It is possible for a  {@link Throwable} to be propagated out of this class if there is an{@link InvocationTargetException}. </note>\n * @param fromValue\n * @param toValueType\n * @param < T >\n * @return\n * @throws IllegalArgumentException when there is an error converting. One of either{@code fromValue.getClass()} or {@code toValueType} must be {@link JSONObject}.\n */\npublic <T>T convertValue(Object fromValue,Class<T> toValueType) throws IllegalArgumentException {\n  if (fromValue == null) {\n    return null;\n  }\n  if (toValueType != Object.class && toValueType.isAssignableFrom(fromValue.getClass())) {\n    return (T)fromValue;\n  }\n  try {\n    if (fromValue instanceof JSONObject) {\n      return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n    }\n else     if (toValueType == JSONObject.class) {\n      return (T)_convertToJSONObject(fromValue);\n    }\n else {\n      throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n    }\n  }\n catch (  NoSuchMethodException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  InstantiationException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  JSONException e) {\n    throw new IllegalArgumentException(e);\n  }\ncatch (  InvocationTargetException e) {\n    throw ExceptionUtil.propagate(e.getCause());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (fromValue instanceof JSONObject) {\n  return _convertFromJSONObject((JSONObject)fromValue,toValueType);\n}\n else if (toValueType == JSONObject.class) {\n  return (T)_convertToJSONObject(fromValue);\n}\n else {\n  throw new IllegalArgumentException(\"Expecting either fromValue or toValueType to be a JSONObject\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 71,
    "startColumnNumber" : 10,
    "endLineNumber" : 71,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}