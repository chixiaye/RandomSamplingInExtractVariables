{
  "id" : 474,
  "expression" : "classDescriptor != null && classDescriptor.isMainMethodFound()",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "classDescriptor != null && classDescriptor.isMainMethodFound()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 140,
      "startColumnNumber" : 9,
      "endLineNumber" : 140,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 140,
        "startColumnNumber" : 5,
        "endLineNumber" : 148,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n  String className=convertToClassName(file.getAbsolutePath(),prefix);\n  T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n  if (result != null) {\n    return result;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 138,
        "startColumnNumber" : 62,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n  if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n    String className=convertToClassName(file.getAbsolutePath(),prefix);\n    T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n    if (result != null) {\n      return result;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (InputStream inputStream=new FileInputStream(file)){\n  ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n  if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n    String className=convertToClassName(file.getAbsolutePath(),prefix);\n    T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n    if (result != null) {\n      return result;\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 137,
        "startColumnNumber" : 22,
        "endLineNumber" : 150,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  try (InputStream inputStream=new FileInputStream(file)){\n    ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n    if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n      String className=convertToClassName(file.getAbsolutePath(),prefix);\n      T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n      if (result != null) {\n        return result;\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 137,
        "startColumnNumber" : 3,
        "endLineNumber" : 150,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (file.isFile()) {\n  try (InputStream inputStream=new FileInputStream(file)){\n    ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n    if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n      String className=convertToClassName(file.getAbsolutePath(),prefix);\n      T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n      if (result != null) {\n        return result;\n      }\n    }\n  }\n }\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 135,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File file=stack.pop();\n  if (file.isFile()) {\n    try (InputStream inputStream=new FileInputStream(file)){\n      ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n      if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n        String className=convertToClassName(file.getAbsolutePath(),prefix);\n        T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n        if (result != null) {\n          return result;\n        }\n      }\n    }\n   }\n  if (file.isDirectory()) {\n    pushAllSorted(stack,file.listFiles(PACKAGE_FOLDER_FILTER));\n    pushAllSorted(stack,file.listFiles(CLASS_FILE_FILTER));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 723,
        "startLineNumber" : 135,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!stack.isEmpty()) {\n  File file=stack.pop();\n  if (file.isFile()) {\n    try (InputStream inputStream=new FileInputStream(file)){\n      ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n      if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n        String className=convertToClassName(file.getAbsolutePath(),prefix);\n        T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n        if (result != null) {\n          return result;\n        }\n      }\n    }\n   }\n  if (file.isDirectory()) {\n    pushAllSorted(stack,file.listFiles(PACKAGE_FOLDER_FILTER));\n    pushAllSorted(stack,file.listFiles(CLASS_FILE_FILTER));\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 101,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 124,
        "startColumnNumber" : 22,
        "endLineNumber" : 157,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!rootFolder.exists()) {\n    return null;\n  }\n  if (!rootFolder.isDirectory()) {\n    throw new IllegalArgumentException(\"Invalid root folder '\" + rootFolder + \"'\");\n  }\n  String prefix=rootFolder.getAbsolutePath() + \"/\";\n  Deque<File> stack=new ArrayDeque<>();\n  stack.push(rootFolder);\n  while (!stack.isEmpty()) {\n    File file=stack.pop();\n    if (file.isFile()) {\n      try (InputStream inputStream=new FileInputStream(file)){\n        ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n        if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n          String className=convertToClassName(file.getAbsolutePath(),prefix);\n          T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n          if (result != null) {\n            return result;\n          }\n        }\n      }\n     }\n    if (file.isDirectory()) {\n      pushAllSorted(stack,file.listFiles(PACKAGE_FOLDER_FILTER));\n      pushAllSorted(stack,file.listFiles(CLASS_FILE_FILTER));\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1468,
        "startLineNumber" : 114,
        "startColumnNumber" : 1,
        "endLineNumber" : 157,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Perform the given callback operation on all main classes from the given root folder.\n * @param < T > the result type\n * @param rootFolder the root folder\n * @param callback the callback\n * @return the first callback result or {@code null}\n * @throws IOException in case of I/O errors\n */\nstatic <T>T doWithMainClasses(File rootFolder,MainClassCallback<T> callback) throws IOException {\n  if (!rootFolder.exists()) {\n    return null;\n  }\n  if (!rootFolder.isDirectory()) {\n    throw new IllegalArgumentException(\"Invalid root folder '\" + rootFolder + \"'\");\n  }\n  String prefix=rootFolder.getAbsolutePath() + \"/\";\n  Deque<File> stack=new ArrayDeque<>();\n  stack.push(rootFolder);\n  while (!stack.isEmpty()) {\n    File file=stack.pop();\n    if (file.isFile()) {\n      try (InputStream inputStream=new FileInputStream(file)){\n        ClassDescriptor classDescriptor=createClassDescriptor(inputStream);\n        if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n          String className=convertToClassName(file.getAbsolutePath(),prefix);\n          T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n          if (result != null) {\n            return result;\n          }\n        }\n      }\n     }\n    if (file.isDirectory()) {\n      pushAllSorted(stack,file.listFiles(PACKAGE_FOLDER_FILTER));\n      pushAllSorted(stack,file.listFiles(CLASS_FILE_FILTER));\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 140,
        "startColumnNumber" : 5,
        "endLineNumber" : 148,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n  String className=convertToClassName(file.getAbsolutePath(),prefix);\n  T result=callback.doWith(new MainClass(className,classDescriptor.getAnnotationNames()));\n  if (result != null) {\n    return result;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 140,
    "startColumnNumber" : 9,
    "endLineNumber" : 140,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}