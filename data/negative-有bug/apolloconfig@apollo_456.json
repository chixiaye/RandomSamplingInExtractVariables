{
  "id" : 456,
  "expression" : "headers",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseControllerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "headers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 74,
      "startColumnNumber" : 4,
      "endLineNumber" : 74,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 65
      },
      "nodeContext" : "headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 66
      },
      "nodeContext" : "headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 49,
        "startColumnNumber" : 33,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemDTO[] items=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  Assert.assertEquals(3,items.length);\n  HttpHeaders headers=new HttpHeaders();\n  headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n  MultiValueMap<String,String> parameters=new LinkedMultiValueMap<String,String>();\n  parameters.add(\"name\",\"someReleaseName\");\n  parameters.add(\"comment\",\"someComment\");\n  parameters.add(\"operator\",\"test\");\n  HttpEntity<MultiValueMap<String,String>> entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers);\n  ResponseEntity<ReleaseDTO> response=restTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/releases\",entity,ReleaseDTO.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ReleaseDTO release=response.getBody();\n  Assert.assertEquals(\"someReleaseName\",release.getName());\n  Assert.assertEquals(\"someComment\",release.getComment());\n  Assert.assertEquals(\"someAppId\",release.getAppId());\n  Assert.assertEquals(\"default\",release.getClusterName());\n  Assert.assertEquals(\"application\",release.getNamespaceName());\n  Map<String,String> configurations=new HashMap<String,String>();\n  configurations.put(\"k1\",\"v1\");\n  configurations.put(\"k2\",\"v2\");\n  configurations.put(\"k3\",\"v3\");\n  Gson gson=new Gson();\n  Assert.assertEquals(gson.toJson(configurations),release.getConfigurations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2716,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test @Sql(scripts=\"/controller/test-release.sql\",executionPhase=ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts=\"/controller/cleanup.sql\",executionPhase=ExecutionPhase.AFTER_TEST_METHOD) public void testReleaseBuild(){\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemDTO[] items=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  Assert.assertEquals(3,items.length);\n  HttpHeaders headers=new HttpHeaders();\n  headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n  MultiValueMap<String,String> parameters=new LinkedMultiValueMap<String,String>();\n  parameters.add(\"name\",\"someReleaseName\");\n  parameters.add(\"comment\",\"someComment\");\n  parameters.add(\"operator\",\"test\");\n  HttpEntity<MultiValueMap<String,String>> entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers);\n  ResponseEntity<ReleaseDTO> response=restTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/releases\",entity,ReleaseDTO.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ReleaseDTO release=response.getBody();\n  Assert.assertEquals(\"someReleaseName\",release.getName());\n  Assert.assertEquals(\"someComment\",release.getComment());\n  Assert.assertEquals(\"someAppId\",release.getAppId());\n  Assert.assertEquals(\"default\",release.getClusterName());\n  Assert.assertEquals(\"application\",release.getNamespaceName());\n  Map<String,String> configurations=new HashMap<String,String>();\n  configurations.put(\"k1\",\"v1\");\n  configurations.put(\"k2\",\"v2\");\n  configurations.put(\"k3\",\"v3\");\n  Gson gson=new Gson();\n  Assert.assertEquals(gson.toJson(configurations),release.getConfigurations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 375,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 66
      },
      "nodeContext" : "headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.ctrip.framework.apollo.adminservice.controller.HttpHeaders"
  }, {
    "nodeContext" : "headers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 66,
      "endLineNumber" : 80,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new HttpEntity<MultiValueMap<String,String>>(parameters,headers)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 79,
        "startColumnNumber" : 46,
        "endLineNumber" : 80,
        "endColumnNumber" : 74
      },
      "nodeContext" : "entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 75
      },
      "nodeContext" : "HttpEntity<MultiValueMap<String,String>> entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 49,
        "startColumnNumber" : 33,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemDTO[] items=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  Assert.assertEquals(3,items.length);\n  HttpHeaders headers=new HttpHeaders();\n  headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n  MultiValueMap<String,String> parameters=new LinkedMultiValueMap<String,String>();\n  parameters.add(\"name\",\"someReleaseName\");\n  parameters.add(\"comment\",\"someComment\");\n  parameters.add(\"operator\",\"test\");\n  HttpEntity<MultiValueMap<String,String>> entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers);\n  ResponseEntity<ReleaseDTO> response=restTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/releases\",entity,ReleaseDTO.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ReleaseDTO release=response.getBody();\n  Assert.assertEquals(\"someReleaseName\",release.getName());\n  Assert.assertEquals(\"someComment\",release.getComment());\n  Assert.assertEquals(\"someAppId\",release.getAppId());\n  Assert.assertEquals(\"default\",release.getClusterName());\n  Assert.assertEquals(\"application\",release.getNamespaceName());\n  Map<String,String> configurations=new HashMap<String,String>();\n  configurations.put(\"k1\",\"v1\");\n  configurations.put(\"k2\",\"v2\");\n  configurations.put(\"k3\",\"v3\");\n  Gson gson=new Gson();\n  Assert.assertEquals(gson.toJson(configurations),release.getConfigurations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2716,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test @Sql(scripts=\"/controller/test-release.sql\",executionPhase=ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts=\"/controller/cleanup.sql\",executionPhase=ExecutionPhase.AFTER_TEST_METHOD) public void testReleaseBuild(){\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemDTO[] items=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  Assert.assertEquals(3,items.length);\n  HttpHeaders headers=new HttpHeaders();\n  headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n  MultiValueMap<String,String> parameters=new LinkedMultiValueMap<String,String>();\n  parameters.add(\"name\",\"someReleaseName\");\n  parameters.add(\"comment\",\"someComment\");\n  parameters.add(\"operator\",\"test\");\n  HttpEntity<MultiValueMap<String,String>> entity=new HttpEntity<MultiValueMap<String,String>>(parameters,headers);\n  ResponseEntity<ReleaseDTO> response=restTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/releases\",entity,ReleaseDTO.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ReleaseDTO release=response.getBody();\n  Assert.assertEquals(\"someReleaseName\",release.getName());\n  Assert.assertEquals(\"someComment\",release.getComment());\n  Assert.assertEquals(\"someAppId\",release.getAppId());\n  Assert.assertEquals(\"default\",release.getClusterName());\n  Assert.assertEquals(\"application\",release.getNamespaceName());\n  Map<String,String> configurations=new HashMap<String,String>();\n  configurations.put(\"k1\",\"v1\");\n  configurations.put(\"k2\",\"v2\");\n  configurations.put(\"k3\",\"v3\");\n  Gson gson=new Gson();\n  Assert.assertEquals(gson.toJson(configurations),release.getConfigurations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 375,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 74
      },
      "nodeContext" : "new HttpEntity<MultiValueMap<String,String>>(parameters,headers)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.ctrip.framework.apollo.adminservice.controller.HttpHeaders"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 74,
    "startColumnNumber" : 4,
    "endLineNumber" : 74,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 66,
    "endLineNumber" : 80,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}