{
  "id" : 152,
  "expression" : "ApplyTimestampAndDuration",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin/internal/MergeById.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ApplyTimestampAndDuration",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 52,
      "startColumnNumber" : 20,
      "endLineNumber" : 52,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 52,
        "startColumnNumber" : 20,
        "endLineNumber" : 52,
        "endColumnNumber" : 66
      },
      "nodeContext" : "ApplyTimestampAndDuration.apply(result.get(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 67
      },
      "nodeContext" : "result.set(i,ApplyTimestampAndDuration.apply(result.get(i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 68
      },
      "nodeContext" : "result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 51,
        "startColumnNumber" : 44,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < result.size(); i++) {\n  result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 28,
        "startColumnNumber" : 57,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Span> result=new ArrayList<>(spans.size());\n  Map<Long,List<Span>> spanIdToSpans=new LinkedHashMap<>();\n  for (  Span span : spans) {\n    if (!spanIdToSpans.containsKey(span.id)) {\n      spanIdToSpans.put(span.id,new LinkedList<Span>());\n    }\n    spanIdToSpans.get(span.id).add(span);\n  }\n  for (  List<Span> spansToMerge : spanIdToSpans.values()) {\n    if (spansToMerge.size() == 1) {\n      result.add(spansToMerge.get(0));\n    }\n else {\n      Span.Builder builder=spansToMerge.get(0).toBuilder();\n      for (int i=1, length=spansToMerge.size(); i < length; i++) {\n        builder.merge(spansToMerge.get(i));\n      }\n      result.add(builder.build());\n    }\n  }\n  for (int i=0; i < result.size(); i++) {\n    result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n  }\n  return sortedList(result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 985,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Span> apply(Collection<Span> spans){\n  List<Span> result=new ArrayList<>(spans.size());\n  Map<Long,List<Span>> spanIdToSpans=new LinkedHashMap<>();\n  for (  Span span : spans) {\n    if (!spanIdToSpans.containsKey(span.id)) {\n      spanIdToSpans.put(span.id,new LinkedList<Span>());\n    }\n    spanIdToSpans.get(span.id).add(span);\n  }\n  for (  List<Span> spansToMerge : spanIdToSpans.values()) {\n    if (spansToMerge.size() == 1) {\n      result.add(spansToMerge.get(0));\n    }\n else {\n      Span.Builder builder=spansToMerge.get(0).toBuilder();\n      for (int i=1, length=spansToMerge.size(); i < length; i++) {\n        builder.merge(spansToMerge.get(i));\n      }\n      result.add(builder.build());\n    }\n  }\n  for (int i=0; i < result.size(); i++) {\n    result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n  }\n  return sortedList(result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 68
      },
      "nodeContext" : "result.set(i,ApplyTimestampAndDuration.apply(result.get(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "zipkin.internal.ApplyTimestampAndDuration"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 52,
    "startColumnNumber" : 20,
    "endLineNumber" : 52,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}