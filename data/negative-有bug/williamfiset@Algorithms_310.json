{
  "id" : 310,
  "expression" : "leaves.size()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "leaves.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 44,
      "startColumnNumber" : 25,
      "endLineNumber" : 44,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 38
      },
      "nodeContext" : "processedLeafs=leaves.size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int processedLeafs=leaves.size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 790,
        "startLineNumber" : 32,
        "startColumnNumber" : 73,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degrees=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degrees[i]=edges.size();\n    if (degrees[i] <= 1)     leaves.add(i);\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves)     for (    int neighbor : tree.get(node))     if (--degrees[neighbor] == 1)     newLeaves.add(neighbor);\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 861,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degrees=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degrees[i]=edges.size();\n    if (degrees[i] <= 1)     leaves.add(i);\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves)     for (    int neighbor : tree.get(node))     if (--degrees[neighbor] == 1)     newLeaves.add(neighbor);\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 155,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 39
      },
      "nodeContext" : "int processedLeafs=leaves.size();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 44,
    "startColumnNumber" : 25,
    "endLineNumber" : 44,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}