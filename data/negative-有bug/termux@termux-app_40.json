{
  "id" : 40,
  "expression" : "stderrPrintStream",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/termux-shared/src/main/java/com/termux/shared/shell/am/AmSocketServer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stderrPrintStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 226,
      "startColumnNumber" : 38,
      "endLineNumber" : 226,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 103
      },
      "nodeContext" : "new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 123
      },
      "nodeContext" : "new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 217,
        "startColumnNumber" : 80,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n    throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n  }\n  new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n  stdoutPrintStream.flush();\n  stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n  stderrPrintStream.flush();\n  stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n  if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n    throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n  }\n  new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n  stdoutPrintStream.flush();\n  stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n  stderrPrintStream.flush();\n  stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n}\n catch (Exception e) {\n  return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1589,
        "startLineNumber" : 213,
        "startColumnNumber" : 77,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n    if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n      throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n    }\n    new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n    stdoutPrintStream.flush();\n    stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n    stderrPrintStream.flush();\n    stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n  }\n catch (  Exception e) {\n    return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2654,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Call termux-am-library to run the am command.\n * @param context The {@link Context} to run am command with.\n * @param amCommandArray The am command array.\n * @param stdout The {@link StringBuilder} to set stdout in that is returned by the am command.\n * @param stderr The {@link StringBuilder} to set stderr in that is returned by the am command.\n * @param checkDisplayOverAppsPermission Check if {@link Manifest.permission#SYSTEM_ALERT_WINDOW}has been granted if running on Android `>= 10` and starting activity or service.\n * @return Returns the {@code error} if am command failed, otherwise {@code null}.\n */\npublic static Error runAmCommand(@NonNull Context context,String[] amCommandArray,@NonNull StringBuilder stdout,@NonNull StringBuilder stderr,boolean checkDisplayOverAppsPermission){\n  try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n    if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n      throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n    }\n    new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n    stdoutPrintStream.flush();\n    stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n    stderrPrintStream.flush();\n    stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n  }\n catch (  Exception e) {\n    return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 124
      },
      "nodeContext" : "new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.io.PrintStream"
  }, {
    "nodeContext" : "stderrPrintStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 233,
      "startColumnNumber" : 12,
      "endLineNumber" : 233,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 37
      },
      "nodeContext" : "stderrPrintStream.flush()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 38
      },
      "nodeContext" : "stderrPrintStream.flush();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 217,
        "startColumnNumber" : 80,
        "endLineNumber" : 235,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n    throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n  }\n  new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n  stdoutPrintStream.flush();\n  stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n  stderrPrintStream.flush();\n  stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1547,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n  if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n    throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n  }\n  new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n  stdoutPrintStream.flush();\n  stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n  stderrPrintStream.flush();\n  stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n}\n catch (Exception e) {\n  return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1589,
        "startLineNumber" : 213,
        "startColumnNumber" : 77,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n    if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n      throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n    }\n    new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n    stdoutPrintStream.flush();\n    stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n    stderrPrintStream.flush();\n    stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n  }\n catch (  Exception e) {\n    return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2654,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Call termux-am-library to run the am command.\n * @param context The {@link Context} to run am command with.\n * @param amCommandArray The am command array.\n * @param stdout The {@link StringBuilder} to set stdout in that is returned by the am command.\n * @param stderr The {@link StringBuilder} to set stderr in that is returned by the am command.\n * @param checkDisplayOverAppsPermission Check if {@link Manifest.permission#SYSTEM_ALERT_WINDOW}has been granted if running on Android `>= 10` and starting activity or service.\n * @return Returns the {@code error} if am command failed, otherwise {@code null}.\n */\npublic static Error runAmCommand(@NonNull Context context,String[] amCommandArray,@NonNull StringBuilder stdout,@NonNull StringBuilder stderr,boolean checkDisplayOverAppsPermission){\n  try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){\n    if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(\"start\") || amCommandArray[0].equals(\"startservice\")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {\n      throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));\n    }\n    new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);\n    stdoutPrintStream.flush();\n    stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));\n    stderrPrintStream.flush();\n    stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));\n  }\n catch (  Exception e) {\n    return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 233,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 38
      },
      "nodeContext" : "stderrPrintStream.flush();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.PrintStream"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 226,
    "startColumnNumber" : 38,
    "endLineNumber" : 226,
    "endColumnNumber" : 55
  }, {
    "charLength" : 17,
    "startLineNumber" : 233,
    "startColumnNumber" : 12,
    "endLineNumber" : 233,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}