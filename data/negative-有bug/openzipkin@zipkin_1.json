{
  "id" : 1,
  "expression" : "0",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsertTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 82,
      "startColumnNumber" : 16,
      "endLineNumber" : 82,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 18
      },
      "nodeContext" : "calls.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 45
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 46
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  calls.get(0).enqueue(assertFailOnError);\n  failBecauseExceptionWasNotThrown(AssertionError.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  calls.get(0).enqueue(assertFailOnError);\n  failBecauseExceptionWasNotThrown(AssertionError.class);\n}\n catch (AssertionError e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 72,
        "startColumnNumber" : 44,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TestFactory testFactory=new TestFactory();\n  List<Call<Void>> calls=new ArrayList<>();\n  testFactory.maybeAdd(\"foo\",calls);\n  testFactory.maybeAdd(\"bar\",calls);\n  testFactory.failValue.set(\"foo\");\n  try {\n    calls.get(0).enqueue(assertFailOnError);\n    failBecauseExceptionWasNotThrown(AssertionError.class);\n  }\n catch (  AssertionError e) {\n  }\n  calls.get(1).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\");\n  calls.clear();\n  testFactory.maybeAdd(\"foo\",calls);\n  assertThat(calls).isNotEmpty();\n  calls.get(0).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\",\"foo\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Disabled(\"Flakey: https://github.com/openzipkin/zipkin/issues/3255\") @Test void exceptionsInvalidate_enqueue(){\n  TestFactory testFactory=new TestFactory();\n  List<Call<Void>> calls=new ArrayList<>();\n  testFactory.maybeAdd(\"foo\",calls);\n  testFactory.maybeAdd(\"bar\",calls);\n  testFactory.failValue.set(\"foo\");\n  try {\n    calls.get(0).enqueue(assertFailOnError);\n    failBecauseExceptionWasNotThrown(AssertionError.class);\n  }\n catch (  AssertionError e) {\n  }\n  calls.get(1).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\");\n  calls.clear();\n  testFactory.maybeAdd(\"foo\",calls);\n  assertThat(calls).isNotEmpty();\n  calls.get(0).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\",\"foo\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 46
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 94,
      "startColumnNumber" : 14,
      "endLineNumber" : 94,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 16
      },
      "nodeContext" : "calls.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 43
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 44
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 72,
        "startColumnNumber" : 44,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TestFactory testFactory=new TestFactory();\n  List<Call<Void>> calls=new ArrayList<>();\n  testFactory.maybeAdd(\"foo\",calls);\n  testFactory.maybeAdd(\"bar\",calls);\n  testFactory.failValue.set(\"foo\");\n  try {\n    calls.get(0).enqueue(assertFailOnError);\n    failBecauseExceptionWasNotThrown(AssertionError.class);\n  }\n catch (  AssertionError e) {\n  }\n  calls.get(1).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\");\n  calls.clear();\n  testFactory.maybeAdd(\"foo\",calls);\n  assertThat(calls).isNotEmpty();\n  calls.get(0).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\",\"foo\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Disabled(\"Flakey: https://github.com/openzipkin/zipkin/issues/3255\") @Test void exceptionsInvalidate_enqueue(){\n  TestFactory testFactory=new TestFactory();\n  List<Call<Void>> calls=new ArrayList<>();\n  testFactory.maybeAdd(\"foo\",calls);\n  testFactory.maybeAdd(\"bar\",calls);\n  testFactory.failValue.set(\"foo\");\n  try {\n    calls.get(0).enqueue(assertFailOnError);\n    failBecauseExceptionWasNotThrown(AssertionError.class);\n  }\n catch (  AssertionError e) {\n  }\n  calls.get(1).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\");\n  calls.clear();\n  testFactory.maybeAdd(\"foo\",calls);\n  assertThat(calls).isNotEmpty();\n  calls.get(0).enqueue(assertFailOnError);\n  assertThat(testFactory.values).containsExactly(\"bar\",\"foo\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 44
      },
      "nodeContext" : "calls.get(0).enqueue(assertFailOnError);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 82,
    "startColumnNumber" : 16,
    "endLineNumber" : 82,
    "endColumnNumber" : 17
  }, {
    "charLength" : 1,
    "startLineNumber" : 94,
    "startColumnNumber" : 14,
    "endLineNumber" : 94,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}