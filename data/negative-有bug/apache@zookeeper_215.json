{
  "id" : 215,
  "expression" : "3",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/BinaryOutputArchive.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 83,
      "startColumnNumber" : 33,
      "endLineNumber" : 83,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 34
      },
      "nodeContext" : "bb.remaining() < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (bb.remaining() < 3) {\n  ByteBuffer n=ByteBuffer.allocate(bb.capacity() << 1);\n  bb.flip();\n  n.put(bb);\n  bb=n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 82,
        "startColumnNumber" : 38,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (bb.remaining() < 3) {\n    ByteBuffer n=ByteBuffer.allocate(bb.capacity() << 1);\n    bb.flip();\n    n.put(bb);\n    bb=n;\n  }\n  char c=s.charAt(i);\n  if (c < 0x80) {\n    bb.put((byte)c);\n  }\n else   if (c < 0x800) {\n    bb.put((byte)(0xc0 | (c >> 6)));\n    bb.put((byte)(0x80 | (c & 0x3f)));\n  }\n else {\n    bb.put((byte)(0xe0 | (c >> 12)));\n    bb.put((byte)(0x80 | ((c >> 6) & 0x3f)));\n    bb.put((byte)(0x80 | (c & 0x3f)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 674,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < len; i++) {\n  if (bb.remaining() < 3) {\n    ByteBuffer n=ByteBuffer.allocate(bb.capacity() << 1);\n    bb.flip();\n    n.put(bb);\n    bb=n;\n  }\n  char c=s.charAt(i);\n  if (c < 0x80) {\n    bb.put((byte)c);\n  }\n else   if (c < 0x800) {\n    bb.put((byte)(0xc0 | (c >> 6)));\n    bb.put((byte)(0x80 | (c & 0x3f)));\n  }\n else {\n    bb.put((byte)(0xe0 | (c >> 12)));\n    bb.put((byte)(0x80 | ((c >> 6) & 0x3f)));\n    bb.put((byte)(0x80 | (c & 0x3f)));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 139,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 79,
        "startColumnNumber" : 64,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  bb.clear();\n  final int len=s.length();\n  for (int i=0; i < len; i++) {\n    if (bb.remaining() < 3) {\n      ByteBuffer n=ByteBuffer.allocate(bb.capacity() << 1);\n      bb.flip();\n      n.put(bb);\n      bb=n;\n    }\n    char c=s.charAt(i);\n    if (c < 0x80) {\n      bb.put((byte)c);\n    }\n else     if (c < 0x800) {\n      bb.put((byte)(0xc0 | (c >> 6)));\n      bb.put((byte)(0x80 | (c & 0x3f)));\n    }\n else {\n      bb.put((byte)(0xe0 | (c >> 12)));\n      bb.put((byte)(0x80 | ((c >> 6) & 0x3f)));\n      bb.put((byte)(0x80 | (c & 0x3f)));\n    }\n  }\n  bb.flip();\n  return bb;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * create our own char encoder to utf8. This is faster  then string.getbytes(UTF8).\n * @param s the string to encode into utf8\n * @return utf8 byte sequence.\n */\nfinal private ByteBuffer stringToByteBuffer(CharSequence s){\n  bb.clear();\n  final int len=s.length();\n  for (int i=0; i < len; i++) {\n    if (bb.remaining() < 3) {\n      ByteBuffer n=ByteBuffer.allocate(bb.capacity() << 1);\n      bb.flip();\n      n.put(bb);\n      bb=n;\n    }\n    char c=s.charAt(i);\n    if (c < 0x80) {\n      bb.put((byte)c);\n    }\n else     if (c < 0x800) {\n      bb.put((byte)(0xc0 | (c >> 6)));\n      bb.put((byte)(0x80 | (c & 0x3f)));\n    }\n else {\n      bb.put((byte)(0xe0 | (c >> 12)));\n      bb.put((byte)(0x80 | ((c >> 6) & 0x3f)));\n      bb.put((byte)(0x80 | (c & 0x3f)));\n    }\n  }\n  bb.flip();\n  return bb;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 34
      },
      "nodeContext" : "bb.remaining() < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 83,
    "startColumnNumber" : 33,
    "endLineNumber" : 83,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}