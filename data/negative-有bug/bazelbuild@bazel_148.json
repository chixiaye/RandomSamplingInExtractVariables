{
  "id" : 148,
  "expression" : "p1",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/skyframe/PathCasingLookupFunctionTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "p1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 106,
      "startColumnNumber" : 15,
      "endLineNumber" : 106,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 18
      },
      "nodeContext" : "assertThat(p1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanityCheckFilesystemIsCaseInsensitive(){\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.vfs.Path"
  }, {
    "nodeContext" : "p1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 107,
      "startColumnNumber" : 15,
      "endLineNumber" : 107,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 18
      },
      "nodeContext" : "assertThat(p1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanityCheckFilesystemIsCaseInsensitive(){\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(p1).isNotSameInstanceAs(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.vfs.Path"
  }, {
    "nodeContext" : "p1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 109,
      "startColumnNumber" : 15,
      "endLineNumber" : 109,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 18
      },
      "nodeContext" : "assertThat(p1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assertThat(p1).isEqualTo(p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertThat(p1).isEqualTo(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanityCheckFilesystemIsCaseInsensitive(){\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertThat(p1).isEqualTo(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.vfs.Path"
  }, {
    "nodeContext" : "p1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 110,
      "startColumnNumber" : 15,
      "endLineNumber" : 110,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 18
      },
      "nodeContext" : "assertThat(p1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertThat(p1).isNotEqualTo(p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertThat(p1).isNotEqualTo(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 102,
        "startColumnNumber" : 59,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 429,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSanityCheckFilesystemIsCaseInsensitive(){\n  Path p1=rootDirectory.getRelative(\"Foo/Bar\");\n  Path p2=rootDirectory.getRelative(\"FOO/BAR\");\n  Path p3=rootDirectory.getRelative(\"control\");\n  assertThat(p1).isNotSameInstanceAs(p2);\n  assertThat(p1).isNotSameInstanceAs(p3);\n  assertThat(p2).isNotSameInstanceAs(p3);\n  assertThat(p1).isEqualTo(p2);\n  assertThat(p1).isNotEqualTo(p3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertThat(p1).isNotEqualTo(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.vfs.Path"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 106,
    "startColumnNumber" : 15,
    "endLineNumber" : 106,
    "endColumnNumber" : 17
  }, {
    "charLength" : 2,
    "startLineNumber" : 107,
    "startColumnNumber" : 15,
    "endLineNumber" : 107,
    "endColumnNumber" : 17
  }, {
    "charLength" : 2,
    "startLineNumber" : 109,
    "startColumnNumber" : 15,
    "endLineNumber" : 109,
    "endColumnNumber" : 17
  }, {
    "charLength" : 2,
    "startLineNumber" : 110,
    "startColumnNumber" : 15,
    "endLineNumber" : 110,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}