{
  "id" : 143,
  "expression" : "c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-optimizer/src/test/java/org/apache/flink/optimizer/GroupOrderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 94,
      "startColumnNumber" : 26,
      "endLineNumber" : 94,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 12,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1977,
        "startLineNumber" : 53,
        "startColumnNumber" : 43,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.setParallelism(DEFAULT_PARALLELISM);\n  DataSet<Tuple4<Long,Long,Long,Long>> set1=env.readCsvFile(\"/tmp/fake.csv\").types(Long.class,Long.class,Long.class,Long.class);\n  set1.groupBy(1).sortGroup(3,Order.DESCENDING).reduceGroup(new IdentityGroupReducer<Tuple4<Long,Long,Long,Long>>()).name(\"Reduce\").output(new DiscardingOutputFormat<Tuple4<Long,Long,Long,Long>>()).name(\"Sink\");\n  Plan plan=env.createProgramPlan();\n  OptimizedPlan oPlan;\n  try {\n    oPlan=compileNoStats(plan);\n  }\n catch (  CompilerException ce) {\n    ce.printStackTrace();\n    fail(\"The pact compiler is unable to compile this plan correctly.\");\n    return;\n  }\n  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(oPlan);\n  SinkPlanNode sinkNode=resolver.getNode(\"Sink\");\n  SingleInputPlanNode reducer=resolver.getNode(\"Reduce\");\n  Assert.assertEquals(ShipStrategyType.FORWARD,sinkNode.getInput().getShipStrategy());\n  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,reducer.getInput().getShipStrategy());\n  Channel c=reducer.getInput();\n  Assert.assertEquals(LocalStrategy.SORT,c.getLocalStrategy());\n  FieldList ship=new FieldList(1);\n  FieldList local=new FieldList(1,3);\n  Assert.assertEquals(ship,c.getShipStrategyKeys());\n  Assert.assertEquals(local,c.getLocalStrategyKeys());\n  Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]);\n  Assert.assertEquals(false,c.getLocalStrategySortOrder()[1]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2026,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReduceWithGroupOrder(){\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.setParallelism(DEFAULT_PARALLELISM);\n  DataSet<Tuple4<Long,Long,Long,Long>> set1=env.readCsvFile(\"/tmp/fake.csv\").types(Long.class,Long.class,Long.class,Long.class);\n  set1.groupBy(1).sortGroup(3,Order.DESCENDING).reduceGroup(new IdentityGroupReducer<Tuple4<Long,Long,Long,Long>>()).name(\"Reduce\").output(new DiscardingOutputFormat<Tuple4<Long,Long,Long,Long>>()).name(\"Sink\");\n  Plan plan=env.createProgramPlan();\n  OptimizedPlan oPlan;\n  try {\n    oPlan=compileNoStats(plan);\n  }\n catch (  CompilerException ce) {\n    ce.printStackTrace();\n    fail(\"The pact compiler is unable to compile this plan correctly.\");\n    return;\n  }\n  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(oPlan);\n  SinkPlanNode sinkNode=resolver.getNode(\"Sink\");\n  SingleInputPlanNode reducer=resolver.getNode(\"Reduce\");\n  Assert.assertEquals(ShipStrategyType.FORWARD,sinkNode.getInput().getShipStrategy());\n  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,reducer.getInput().getShipStrategy());\n  Channel c=reducer.getInput();\n  Assert.assertEquals(LocalStrategy.SORT,c.getLocalStrategy());\n  FieldList ship=new FieldList(1);\n  FieldList local=new FieldList(1,3);\n  Assert.assertEquals(ship,c.getShipStrategyKeys());\n  Assert.assertEquals(local,c.getLocalStrategyKeys());\n  Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]);\n  Assert.assertEquals(false,c.getLocalStrategySortOrder()[1]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 271,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 94,
    "startColumnNumber" : 26,
    "endLineNumber" : 94,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}