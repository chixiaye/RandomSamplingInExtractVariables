{
  "id" : 27,
  "expression" : "1",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/webrtc/VideoFileRenderer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 43,
      "startColumnNumber" : 33,
      "endLineNumber" : 43,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 34
      },
      "nodeContext" : "(outputFileWidth % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n  throw new IllegalArgumentException(\"Does not support uneven width or height\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1287,
        "startLineNumber" : 42,
        "startColumnNumber" : 62,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n    throw new IllegalArgumentException(\"Does not support uneven width or height\");\n  }\n  this.outputFileName=outputFile;\n  this.outputFileWidth=outputFileWidth;\n  this.outputFileHeight=outputFileHeight;\n  outputFrameSize=outputFileWidth * outputFileHeight * 3 / 2;\n  outputFrameBuffer=ByteBuffer.allocateDirect(outputFrameSize);\n  videoOutFile=new FileOutputStream(outputFile);\n  videoOutFile.write((\"YUV4MPEG2 C420 W\" + outputFileWidth + \" H\"+ outputFileHeight+ \" Ip F30:1 A1:1\\n\").getBytes(Charset.forName(\"US-ASCII\")));\n  renderThread=new HandlerThread(TAG + \"RenderThread\");\n  renderThread.start();\n  renderThreadHandler=new Handler(renderThread.getLooper());\n  fileThread=new HandlerThread(TAG + \"FileThread\");\n  fileThread.start();\n  fileThreadHandler=new Handler(fileThread.getLooper());\n  ThreadUtils.invokeAtFrontUninterruptibly(renderThreadHandler,new Runnable(){\n    @Override public void run(){\n      eglBase=EglBase.create(sharedContext,EglBase.CONFIG_PIXEL_BUFFER);\n      eglBase.createDummyPbufferSurface();\n      eglBase.makeCurrent();\n      yuvConverter=new YuvConverter();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public VideoFileRenderer(String outputFile,int outputFileWidth,int outputFileHeight,final EglBase.Context sharedContext) throws IOException {\n  if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n    throw new IllegalArgumentException(\"Does not support uneven width or height\");\n  }\n  this.outputFileName=outputFile;\n  this.outputFileWidth=outputFileWidth;\n  this.outputFileHeight=outputFileHeight;\n  outputFrameSize=outputFileWidth * outputFileHeight * 3 / 2;\n  outputFrameBuffer=ByteBuffer.allocateDirect(outputFrameSize);\n  videoOutFile=new FileOutputStream(outputFile);\n  videoOutFile.write((\"YUV4MPEG2 C420 W\" + outputFileWidth + \" H\"+ outputFileHeight+ \" Ip F30:1 A1:1\\n\").getBytes(Charset.forName(\"US-ASCII\")));\n  renderThread=new HandlerThread(TAG + \"RenderThread\");\n  renderThread.start();\n  renderThreadHandler=new Handler(renderThread.getLooper());\n  fileThread=new HandlerThread(TAG + \"FileThread\");\n  fileThread.start();\n  fileThreadHandler=new Handler(fileThread.getLooper());\n  ThreadUtils.invokeAtFrontUninterruptibly(renderThreadHandler,new Runnable(){\n    @Override public void run(){\n      eglBase=EglBase.create(sharedContext,EglBase.CONFIG_PIXEL_BUFFER);\n      eglBase.createDummyPbufferSurface();\n      eglBase.makeCurrent();\n      yuvConverter=new YuvConverter();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 43,
      "startColumnNumber" : 64,
      "endLineNumber" : 43,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 43,
        "startColumnNumber" : 38,
        "endLineNumber" : 43,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(outputFileHeight % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n  throw new IllegalArgumentException(\"Does not support uneven width or height\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1287,
        "startLineNumber" : 42,
        "startColumnNumber" : 62,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n    throw new IllegalArgumentException(\"Does not support uneven width or height\");\n  }\n  this.outputFileName=outputFile;\n  this.outputFileWidth=outputFileWidth;\n  this.outputFileHeight=outputFileHeight;\n  outputFrameSize=outputFileWidth * outputFileHeight * 3 / 2;\n  outputFrameBuffer=ByteBuffer.allocateDirect(outputFrameSize);\n  videoOutFile=new FileOutputStream(outputFile);\n  videoOutFile.write((\"YUV4MPEG2 C420 W\" + outputFileWidth + \" H\"+ outputFileHeight+ \" Ip F30:1 A1:1\\n\").getBytes(Charset.forName(\"US-ASCII\")));\n  renderThread=new HandlerThread(TAG + \"RenderThread\");\n  renderThread.start();\n  renderThreadHandler=new Handler(renderThread.getLooper());\n  fileThread=new HandlerThread(TAG + \"FileThread\");\n  fileThread.start();\n  fileThreadHandler=new Handler(fileThread.getLooper());\n  ThreadUtils.invokeAtFrontUninterruptibly(renderThreadHandler,new Runnable(){\n    @Override public void run(){\n      eglBase=EglBase.create(sharedContext,EglBase.CONFIG_PIXEL_BUFFER);\n      eglBase.createDummyPbufferSurface();\n      eglBase.makeCurrent();\n      yuvConverter=new YuvConverter();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public VideoFileRenderer(String outputFile,int outputFileWidth,int outputFileHeight,final EglBase.Context sharedContext) throws IOException {\n  if ((outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1) {\n    throw new IllegalArgumentException(\"Does not support uneven width or height\");\n  }\n  this.outputFileName=outputFile;\n  this.outputFileWidth=outputFileWidth;\n  this.outputFileHeight=outputFileHeight;\n  outputFrameSize=outputFileWidth * outputFileHeight * 3 / 2;\n  outputFrameBuffer=ByteBuffer.allocateDirect(outputFrameSize);\n  videoOutFile=new FileOutputStream(outputFile);\n  videoOutFile.write((\"YUV4MPEG2 C420 W\" + outputFileWidth + \" H\"+ outputFileHeight+ \" Ip F30:1 A1:1\\n\").getBytes(Charset.forName(\"US-ASCII\")));\n  renderThread=new HandlerThread(TAG + \"RenderThread\");\n  renderThread.start();\n  renderThreadHandler=new Handler(renderThread.getLooper());\n  fileThread=new HandlerThread(TAG + \"FileThread\");\n  fileThread.start();\n  fileThreadHandler=new Handler(fileThread.getLooper());\n  ThreadUtils.invokeAtFrontUninterruptibly(renderThreadHandler,new Runnable(){\n    @Override public void run(){\n      eglBase=EglBase.create(sharedContext,EglBase.CONFIG_PIXEL_BUFFER);\n      eglBase.createDummyPbufferSurface();\n      eglBase.makeCurrent();\n      yuvConverter=new YuvConverter();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(outputFileWidth % 2) == 1 || (outputFileHeight % 2) == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 43,
    "startColumnNumber" : 33,
    "endLineNumber" : 43,
    "endColumnNumber" : 34
  }, {
    "charLength" : 1,
    "startLineNumber" : 43,
    "startColumnNumber" : 64,
    "endLineNumber" : 43,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}