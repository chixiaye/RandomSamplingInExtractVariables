{
  "id" : 130,
  "expression" : "Boolean",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-collector/core/src/main/java/zipkin2/collector/CollectorSampler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 68,
      "startColumnNumber" : 8,
      "endLineNumber" : 68,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 20
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Boolean.TRUE.equals(debug)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 48
      },
      "nodeContext" : "if (Boolean.TRUE.equals(debug)) return true;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 67,
        "startColumnNumber" : 61,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (Boolean.TRUE.equals(debug))   return true;\n  long traceId=HexCodec.lowerHexToUnsignedLong(hexTraceId);\n  long t=traceId == Long.MIN_VALUE ? Long.MAX_VALUE : Math.abs(traceId);\n  return t <= boundary();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns true if spans with this trace ID should be recorded to storage. <p>Zipkin v1 allows storage-layer sampling, which can help prevent spikes in traffic from overloading the system. Debug spans are always stored. <p>This uses only the lower 64 bits of the trace ID as instrumentation still send mixed trace ID width.\n * @param hexTraceId the lower 64 bits of the span's trace ID are checked against the boundary\n * @param debug when true, always passes sampling\n */\npublic boolean isSampled(String hexTraceId,boolean debug){\n  if (Boolean.TRUE.equals(debug))   return true;\n  long traceId=HexCodec.lowerHexToUnsignedLong(hexTraceId);\n  long t=traceId == Long.MIN_VALUE ? Long.MAX_VALUE : Math.abs(traceId);\n  return t <= boundary();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 52,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 48
      },
      "nodeContext" : "if (Boolean.TRUE.equals(debug)) return true;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 68,
    "startColumnNumber" : 8,
    "endLineNumber" : 68,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}