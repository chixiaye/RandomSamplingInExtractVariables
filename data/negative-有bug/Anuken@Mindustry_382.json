{
  "id" : 382,
  "expression" : "Math",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tools/src/mindustry/tools/ImagePacker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 114,
      "startColumnNumber" : 20,
      "endLineNumber" : 114,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Math.min(Integer.parseInt(key) - 1,minid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 62
      },
      "nodeContext" : "minid=Math.min(Integer.parseInt(key) - 1,minid)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 63
      },
      "nodeContext" : "minid=Math.min(Integer.parseInt(key) - 1,minid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 113,
        "startColumnNumber" : 36,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  minid=Math.min(Integer.parseInt(key) - 1,minid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String key : map.keys()) {\n  minid=Math.min(Integer.parseInt(key) - 1,minid);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3642,
        "startLineNumber" : 27,
        "startColumnNumber" : 59,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Vars.headless=true;\n  ArcNativesLoader.load();\n  Log.logger=new NoopLogHandler();\n  Vars.content=new ContentLoader();\n  Vars.content.createBaseContent();\n  Log.logger=new DefaultLogHandler();\n  Fi.get(\"../../../assets-raw/sprites_out\").walk(path -> {\n    if (!path.extEquals(\"png\"))     return;\n    String fname=path.nameWithoutExtension();\n    try {\n      BufferedImage image=ImageIO.read(path.file());\n      if (image == null)       throw new IOException(\"image \" + path.absolutePath() + \" is null for terrible reasons\");\n      GenRegion region=new GenRegion(fname,path){\n{\n          width=image.getWidth();\n          height=image.getHeight();\n          u2=v2=1f;\n          u=v=0f;\n        }\n      }\n;\n      regionCache.put(fname,region);\n      imageCache.put(fname,image);\n    }\n catch (    IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n);\n  Core.atlas=new TextureAtlas(){\n    @Override public AtlasRegion find(    String name){\n      if (!regionCache.containsKey(name)) {\n        GenRegion region=new GenRegion(name,null);\n        region.invalid=true;\n        return region;\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public AtlasRegion find(    String name,    TextureRegion def){\n      if (!regionCache.containsKey(name)) {\n        return (AtlasRegion)def;\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public AtlasRegion find(    String name,    String def){\n      if (!regionCache.containsKey(name)) {\n        return (AtlasRegion)regionCache.get(def);\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public boolean has(    String s){\n      return regionCache.containsKey(s);\n    }\n  }\n;\n  Draw.scl=1f / Core.atlas.find(\"scale_marker\").width;\n  Time.mark();\n  Generators.generate();\n  Log.info(\"&ly[Generator]&lc Total time to generate: &lg@&lcms\",Time.elapsed());\n  Log.info(\"&ly[Generator]&lc Total images created: &lg@\",Image.total());\n  Image.dispose();\n  Fi iconfile=Fi.get(\"../../../assets/icons/icons.properties\");\n  OrderedMap<String,String> map=new OrderedMap<>();\n  PropertiesUtils.load(map,iconfile.reader(256));\n  ObjectMap<String,String> content2id=new ObjectMap<>();\n  map.each((key,val) -> content2id.put(val.split(\"\\\\|\")[0],key));\n  Seq<UnlockableContent> cont=Seq.withArrays(Vars.content.blocks(),Vars.content.items(),Vars.content.liquids(),Vars.content.units());\n  cont.removeAll(u -> u instanceof ConstructBlock || u == Blocks.air);\n  int minid=0xF8FF;\n  for (  String key : map.keys()) {\n    minid=Math.min(Integer.parseInt(key) - 1,minid);\n  }\n  for (  UnlockableContent c : cont) {\n    if (!content2id.containsKey(c.name)) {\n      map.put(minid + \"\",c.name + \"|\" + texname(c));\n      minid--;\n    }\n  }\n  Writer writer=iconfile.writer(false);\n  for (  String key : map.keys()) {\n    writer.write(key + \"=\" + map.get(key)+ \"\\n\");\n  }\n  writer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 550,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3697,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  Vars.headless=true;\n  ArcNativesLoader.load();\n  Log.logger=new NoopLogHandler();\n  Vars.content=new ContentLoader();\n  Vars.content.createBaseContent();\n  Log.logger=new DefaultLogHandler();\n  Fi.get(\"../../../assets-raw/sprites_out\").walk(path -> {\n    if (!path.extEquals(\"png\"))     return;\n    String fname=path.nameWithoutExtension();\n    try {\n      BufferedImage image=ImageIO.read(path.file());\n      if (image == null)       throw new IOException(\"image \" + path.absolutePath() + \" is null for terrible reasons\");\n      GenRegion region=new GenRegion(fname,path){\n{\n          width=image.getWidth();\n          height=image.getHeight();\n          u2=v2=1f;\n          u=v=0f;\n        }\n      }\n;\n      regionCache.put(fname,region);\n      imageCache.put(fname,image);\n    }\n catch (    IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n);\n  Core.atlas=new TextureAtlas(){\n    @Override public AtlasRegion find(    String name){\n      if (!regionCache.containsKey(name)) {\n        GenRegion region=new GenRegion(name,null);\n        region.invalid=true;\n        return region;\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public AtlasRegion find(    String name,    TextureRegion def){\n      if (!regionCache.containsKey(name)) {\n        return (AtlasRegion)def;\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public AtlasRegion find(    String name,    String def){\n      if (!regionCache.containsKey(name)) {\n        return (AtlasRegion)regionCache.get(def);\n      }\n      return (AtlasRegion)regionCache.get(name);\n    }\n    @Override public boolean has(    String s){\n      return regionCache.containsKey(s);\n    }\n  }\n;\n  Draw.scl=1f / Core.atlas.find(\"scale_marker\").width;\n  Time.mark();\n  Generators.generate();\n  Log.info(\"&ly[Generator]&lc Total time to generate: &lg@&lcms\",Time.elapsed());\n  Log.info(\"&ly[Generator]&lc Total images created: &lg@\",Image.total());\n  Image.dispose();\n  Fi iconfile=Fi.get(\"../../../assets/icons/icons.properties\");\n  OrderedMap<String,String> map=new OrderedMap<>();\n  PropertiesUtils.load(map,iconfile.reader(256));\n  ObjectMap<String,String> content2id=new ObjectMap<>();\n  map.each((key,val) -> content2id.put(val.split(\"\\\\|\")[0],key));\n  Seq<UnlockableContent> cont=Seq.withArrays(Vars.content.blocks(),Vars.content.items(),Vars.content.liquids(),Vars.content.units());\n  cont.removeAll(u -> u instanceof ConstructBlock || u == Blocks.air);\n  int minid=0xF8FF;\n  for (  String key : map.keys()) {\n    minid=Math.min(Integer.parseInt(key) - 1,minid);\n  }\n  for (  UnlockableContent c : cont) {\n    if (!content2id.containsKey(c.name)) {\n      map.put(minid + \"\",c.name + \"|\" + texname(c));\n      minid--;\n    }\n  }\n  Writer writer=iconfile.writer(false);\n  for (  String key : map.keys()) {\n    writer.write(key + \"=\" + map.get(key)+ \"\\n\");\n  }\n  writer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 63
      },
      "nodeContext" : "minid=Math.min(Integer.parseInt(key) - 1,minid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 114,
    "startColumnNumber" : 20,
    "endLineNumber" : 114,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}