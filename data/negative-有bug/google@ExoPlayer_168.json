{
  "id" : 168,
  "expression" : "packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 101,
      "startColumnNumber" : 15,
      "endLineNumber" : 101,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {\n  boolean isKeyframe=frameType == VIDEO_FRAME_KEYFRAME;\n  if (!hasOutputKeyframe && !isKeyframe) {\n    return false;\n  }\n  byte[] nalLengthData=nalLength.getData();\n  nalLengthData[0]=0;\n  nalLengthData[1]=0;\n  nalLengthData[2]=0;\n  int nalUnitLengthFieldLengthDiff=4 - nalUnitLengthFieldLength;\n  int bytesWritten=0;\n  int bytesToWrite;\n  while (data.bytesLeft() > 0) {\n    data.readBytes(nalLength.getData(),nalUnitLengthFieldLengthDiff,nalUnitLengthFieldLength);\n    nalLength.setPosition(0);\n    bytesToWrite=nalLength.readUnsignedIntToInt();\n    nalStartCode.setPosition(0);\n    output.sampleData(nalStartCode,4);\n    bytesWritten+=4;\n    output.sampleData(data,bytesToWrite);\n    bytesWritten+=bytesToWrite;\n  }\n  output.sampleMetadata(timeUs,isKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0,bytesWritten,0,null);\n  hasOutputKeyframe=true;\n  return true;\n}\n else {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2585,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {\n  ParsableByteArray videoSequence=new ParsableByteArray(new byte[data.bytesLeft()]);\n  data.readBytes(videoSequence.getData(),0,data.bytesLeft());\n  AvcConfig avcConfig=AvcConfig.parse(videoSequence);\n  nalUnitLengthFieldLength=avcConfig.nalUnitLengthFieldLength;\n  Format format=new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H264).setCodecs(avcConfig.codecs).setWidth(avcConfig.width).setHeight(avcConfig.height).setPixelWidthHeightRatio(avcConfig.pixelWidthHeightRatio).setInitializationData(avcConfig.initializationData).build();\n  output.format(format);\n  hasOutputFormat=true;\n  return false;\n}\n else if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {\n  boolean isKeyframe=frameType == VIDEO_FRAME_KEYFRAME;\n  if (!hasOutputKeyframe && !isKeyframe) {\n    return false;\n  }\n  byte[] nalLengthData=nalLength.getData();\n  nalLengthData[0]=0;\n  nalLengthData[1]=0;\n  nalLengthData[2]=0;\n  int nalUnitLengthFieldLengthDiff=4 - nalUnitLengthFieldLength;\n  int bytesWritten=0;\n  int bytesToWrite;\n  while (data.bytesLeft() > 0) {\n    data.readBytes(nalLength.getData(),nalUnitLengthFieldLengthDiff,nalUnitLengthFieldLength);\n    nalLength.setPosition(0);\n    bytesToWrite=nalLength.readUnsignedIntToInt();\n    nalStartCode.setPosition(0);\n    output.sampleData(nalStartCode,4);\n    bytesWritten+=4;\n    output.sampleData(data,bytesToWrite);\n    bytesWritten+=bytesToWrite;\n  }\n  output.sampleMetadata(timeUs,isKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0,bytesWritten,0,null);\n  hasOutputKeyframe=true;\n  return true;\n}\n else {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 243,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2796,
        "startLineNumber" : 77,
        "startColumnNumber" : 93,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int packetType=data.readUnsignedByte();\n  int compositionTimeMs=data.readInt24();\n  timeUs+=compositionTimeMs * 1000L;\n  if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {\n    ParsableByteArray videoSequence=new ParsableByteArray(new byte[data.bytesLeft()]);\n    data.readBytes(videoSequence.getData(),0,data.bytesLeft());\n    AvcConfig avcConfig=AvcConfig.parse(videoSequence);\n    nalUnitLengthFieldLength=avcConfig.nalUnitLengthFieldLength;\n    Format format=new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H264).setCodecs(avcConfig.codecs).setWidth(avcConfig.width).setHeight(avcConfig.height).setPixelWidthHeightRatio(avcConfig.pixelWidthHeightRatio).setInitializationData(avcConfig.initializationData).build();\n    output.format(format);\n    hasOutputFormat=true;\n    return false;\n  }\n else   if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {\n    boolean isKeyframe=frameType == VIDEO_FRAME_KEYFRAME;\n    if (!hasOutputKeyframe && !isKeyframe) {\n      return false;\n    }\n    byte[] nalLengthData=nalLength.getData();\n    nalLengthData[0]=0;\n    nalLengthData[1]=0;\n    nalLengthData[2]=0;\n    int nalUnitLengthFieldLengthDiff=4 - nalUnitLengthFieldLength;\n    int bytesWritten=0;\n    int bytesToWrite;\n    while (data.bytesLeft() > 0) {\n      data.readBytes(nalLength.getData(),nalUnitLengthFieldLengthDiff,nalUnitLengthFieldLength);\n      nalLength.setPosition(0);\n      bytesToWrite=nalLength.readUnsignedIntToInt();\n      nalStartCode.setPosition(0);\n      output.sampleData(nalStartCode,4);\n      bytesWritten+=4;\n      output.sampleData(data,bytesToWrite);\n      bytesWritten+=bytesToWrite;\n    }\n    output.sampleMetadata(timeUs,isKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0,bytesWritten,0,null);\n    hasOutputKeyframe=true;\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected boolean parsePayload(ParsableByteArray data,long timeUs) throws ParserException {\n  int packetType=data.readUnsignedByte();\n  int compositionTimeMs=data.readInt24();\n  timeUs+=compositionTimeMs * 1000L;\n  if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {\n    ParsableByteArray videoSequence=new ParsableByteArray(new byte[data.bytesLeft()]);\n    data.readBytes(videoSequence.getData(),0,data.bytesLeft());\n    AvcConfig avcConfig=AvcConfig.parse(videoSequence);\n    nalUnitLengthFieldLength=avcConfig.nalUnitLengthFieldLength;\n    Format format=new Format.Builder().setSampleMimeType(MimeTypes.VIDEO_H264).setCodecs(avcConfig.codecs).setWidth(avcConfig.width).setHeight(avcConfig.height).setPixelWidthHeightRatio(avcConfig.pixelWidthHeightRatio).setInitializationData(avcConfig.initializationData).build();\n    output.format(format);\n    hasOutputFormat=true;\n    return false;\n  }\n else   if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {\n    boolean isKeyframe=frameType == VIDEO_FRAME_KEYFRAME;\n    if (!hasOutputKeyframe && !isKeyframe) {\n      return false;\n    }\n    byte[] nalLengthData=nalLength.getData();\n    nalLengthData[0]=0;\n    nalLengthData[1]=0;\n    nalLengthData[2]=0;\n    int nalUnitLengthFieldLengthDiff=4 - nalUnitLengthFieldLength;\n    int bytesWritten=0;\n    int bytesToWrite;\n    while (data.bytesLeft() > 0) {\n      data.readBytes(nalLength.getData(),nalUnitLengthFieldLengthDiff,nalUnitLengthFieldLength);\n      nalLength.setPosition(0);\n      bytesToWrite=nalLength.readUnsignedIntToInt();\n      nalStartCode.setPosition(0);\n      output.sampleData(nalStartCode,4);\n      bytesWritten+=4;\n      output.sampleData(data,bytesToWrite);\n      bytesWritten+=bytesToWrite;\n    }\n    output.sampleMetadata(timeUs,isKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0,bytesWritten,0,null);\n    hasOutputKeyframe=true;\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 279,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 101,
        "startColumnNumber" : 11,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {\n  boolean isKeyframe=frameType == VIDEO_FRAME_KEYFRAME;\n  if (!hasOutputKeyframe && !isKeyframe) {\n    return false;\n  }\n  byte[] nalLengthData=nalLength.getData();\n  nalLengthData[0]=0;\n  nalLengthData[1]=0;\n  nalLengthData[2]=0;\n  int nalUnitLengthFieldLengthDiff=4 - nalUnitLengthFieldLength;\n  int bytesWritten=0;\n  int bytesToWrite;\n  while (data.bytesLeft() > 0) {\n    data.readBytes(nalLength.getData(),nalUnitLengthFieldLengthDiff,nalUnitLengthFieldLength);\n    nalLength.setPosition(0);\n    bytesToWrite=nalLength.readUnsignedIntToInt();\n    nalStartCode.setPosition(0);\n    output.sampleData(nalStartCode,4);\n    bytesWritten+=4;\n    output.sampleData(data,bytesToWrite);\n    bytesWritten+=bytesToWrite;\n  }\n  output.sampleMetadata(timeUs,isKeyframe ? C.BUFFER_FLAG_KEY_FRAME : 0,bytesWritten,0,null);\n  hasOutputKeyframe=true;\n  return true;\n}\n else {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 8
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 101,
    "startColumnNumber" : 15,
    "endLineNumber" : 101,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}