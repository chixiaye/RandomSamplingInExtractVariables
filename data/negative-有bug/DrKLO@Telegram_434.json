{
  "id" : 434,
  "expression" : "Build",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/messenger/utils/CopyUtilities.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Build",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 37,
      "startColumnNumber" : 16,
      "endLineNumber" : 37,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Build.VERSION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Build.VERSION.SDK_INT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Build.VERSION.SDK_INT >= Build.VERSION_CODES.N",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n  spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n}\n else {\n  spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n else {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n else {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n}\n catch (Exception e) {\n  FileLog.e(\"Html.fromHtml\",e);\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3579,
        "startLineNumber" : 34,
        "startColumnNumber" : 50,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Spanned spanned;\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n else {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(\"Html.fromHtml\",e);\n    return null;\n  }\n  if (spanned == null) {\n    return null;\n  }\n  Object[] spans=spanned.getSpans(0,spanned.length(),Object.class);\n  ArrayList<TLRPC.MessageEntity> entities=new ArrayList<>(spans.length);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    int start=spanned.getSpanStart(span);\n    int end=spanned.getSpanEnd(span);\n    if (span instanceof StyleSpan) {\n      int style=((StyleSpan)span).getStyle();\n      if ((style & Typeface.BOLD) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBold(),start,end));\n      }\n      if ((style & Typeface.ITALIC) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityItalic(),start,end));\n      }\n    }\n else     if (span instanceof UnderlineSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityUnderline(),start,end));\n    }\n else     if (span instanceof StrikethroughSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityStrike(),start,end));\n    }\n else     if (span instanceof ParsedSpan) {\n      ParsedSpan parsedSpan=(ParsedSpan)span;\n      if (parsedSpan.type == TYPE_SPOILER) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntitySpoiler(),start,end));\n      }\n else       if (parsedSpan.type == TYPE_MONO) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityPre(),start,end));\n      }\n    }\n else     if (span instanceof AnimatedEmojiSpan) {\n      TLRPC.TL_messageEntityCustomEmoji entity=new TLRPC.TL_messageEntityCustomEmoji();\n      entity.document_id=((AnimatedEmojiSpan)span).documentId;\n      entity.document=((AnimatedEmojiSpan)span).document;\n      entities.add(setEntityStartEnd(entity,start,end));\n    }\n  }\n  SpannableString spannable=new SpannableString(spanned.toString());\n  MediaDataController.addTextStyleRuns(entities,spannable,spannable);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    if (span instanceof URLSpan) {\n      int start=spanned.getSpanStart(span);\n      int end=spanned.getSpanEnd(span);\n      String text=spanned.subSequence(start,end).toString();\n      String url=((URLSpan)span).getURL();\n      if (text.equals(url)) {\n        spannable.setSpan(new URLSpan(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n else {\n        spannable.setSpan(new URLSpanReplacement(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n    }\n  }\n  MediaDataController.addAnimatedEmojiSpans(entities,spannable,null);\n  return spannable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 487,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3625,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Spannable fromHTML(String html){\n  Spanned spanned;\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n else {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(\"Html.fromHtml\",e);\n    return null;\n  }\n  if (spanned == null) {\n    return null;\n  }\n  Object[] spans=spanned.getSpans(0,spanned.length(),Object.class);\n  ArrayList<TLRPC.MessageEntity> entities=new ArrayList<>(spans.length);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    int start=spanned.getSpanStart(span);\n    int end=spanned.getSpanEnd(span);\n    if (span instanceof StyleSpan) {\n      int style=((StyleSpan)span).getStyle();\n      if ((style & Typeface.BOLD) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBold(),start,end));\n      }\n      if ((style & Typeface.ITALIC) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityItalic(),start,end));\n      }\n    }\n else     if (span instanceof UnderlineSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityUnderline(),start,end));\n    }\n else     if (span instanceof StrikethroughSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityStrike(),start,end));\n    }\n else     if (span instanceof ParsedSpan) {\n      ParsedSpan parsedSpan=(ParsedSpan)span;\n      if (parsedSpan.type == TYPE_SPOILER) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntitySpoiler(),start,end));\n      }\n else       if (parsedSpan.type == TYPE_MONO) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityPre(),start,end));\n      }\n    }\n else     if (span instanceof AnimatedEmojiSpan) {\n      TLRPC.TL_messageEntityCustomEmoji entity=new TLRPC.TL_messageEntityCustomEmoji();\n      entity.document_id=((AnimatedEmojiSpan)span).documentId;\n      entity.document=((AnimatedEmojiSpan)span).document;\n      entities.add(setEntityStartEnd(entity,start,end));\n    }\n  }\n  SpannableString spannable=new SpannableString(spanned.toString());\n  MediaDataController.addTextStyleRuns(entities,spannable,spannable);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    if (span instanceof URLSpan) {\n      int start=spanned.getSpanStart(span);\n      int end=spanned.getSpanEnd(span);\n      String text=spanned.subSequence(start,end).toString();\n      String url=((URLSpan)span).getURL();\n      if (text.equals(url)) {\n        spannable.setSpan(new URLSpan(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n else {\n        spannable.setSpan(new URLSpanReplacement(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n    }\n  }\n  MediaDataController.addAnimatedEmojiSpans(entities,spannable,null);\n  return spannable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 497,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Build.VERSION.SDK_INT >= Build.VERSION_CODES.N",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Build",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 37,
      "startColumnNumber" : 41,
      "endLineNumber" : 37,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 37,
        "startColumnNumber" : 41,
        "endLineNumber" : 37,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Build.VERSION_CODES",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 37,
        "startColumnNumber" : 41,
        "endLineNumber" : 37,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Build.VERSION_CODES.N",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Build.VERSION.SDK_INT >= Build.VERSION_CODES.N",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 385,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n  spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n}\n else {\n  spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n else {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n else {\n    spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n  }\n}\n catch (Exception e) {\n  FileLog.e(\"Html.fromHtml\",e);\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3579,
        "startLineNumber" : 34,
        "startColumnNumber" : 50,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Spanned spanned;\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n else {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(\"Html.fromHtml\",e);\n    return null;\n  }\n  if (spanned == null) {\n    return null;\n  }\n  Object[] spans=spanned.getSpans(0,spanned.length(),Object.class);\n  ArrayList<TLRPC.MessageEntity> entities=new ArrayList<>(spans.length);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    int start=spanned.getSpanStart(span);\n    int end=spanned.getSpanEnd(span);\n    if (span instanceof StyleSpan) {\n      int style=((StyleSpan)span).getStyle();\n      if ((style & Typeface.BOLD) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBold(),start,end));\n      }\n      if ((style & Typeface.ITALIC) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityItalic(),start,end));\n      }\n    }\n else     if (span instanceof UnderlineSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityUnderline(),start,end));\n    }\n else     if (span instanceof StrikethroughSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityStrike(),start,end));\n    }\n else     if (span instanceof ParsedSpan) {\n      ParsedSpan parsedSpan=(ParsedSpan)span;\n      if (parsedSpan.type == TYPE_SPOILER) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntitySpoiler(),start,end));\n      }\n else       if (parsedSpan.type == TYPE_MONO) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityPre(),start,end));\n      }\n    }\n else     if (span instanceof AnimatedEmojiSpan) {\n      TLRPC.TL_messageEntityCustomEmoji entity=new TLRPC.TL_messageEntityCustomEmoji();\n      entity.document_id=((AnimatedEmojiSpan)span).documentId;\n      entity.document=((AnimatedEmojiSpan)span).document;\n      entities.add(setEntityStartEnd(entity,start,end));\n    }\n  }\n  SpannableString spannable=new SpannableString(spanned.toString());\n  MediaDataController.addTextStyleRuns(entities,spannable,spannable);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    if (span instanceof URLSpan) {\n      int start=spanned.getSpanStart(span);\n      int end=spanned.getSpanEnd(span);\n      String text=spanned.subSequence(start,end).toString();\n      String url=((URLSpan)span).getURL();\n      if (text.equals(url)) {\n        spannable.setSpan(new URLSpan(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n else {\n        spannable.setSpan(new URLSpanReplacement(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n    }\n  }\n  MediaDataController.addAnimatedEmojiSpans(entities,spannable,null);\n  return spannable;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 487,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3625,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Spannable fromHTML(String html){\n  Spanned spanned;\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",Html.FROM_HTML_MODE_COMPACT,null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n else {\n      spanned=Html.fromHtml(\"<inject>\" + html + \"</inject>\",null,new HTMLTagAttributesHandler(new HTMLTagHandler()));\n    }\n  }\n catch (  Exception e) {\n    FileLog.e(\"Html.fromHtml\",e);\n    return null;\n  }\n  if (spanned == null) {\n    return null;\n  }\n  Object[] spans=spanned.getSpans(0,spanned.length(),Object.class);\n  ArrayList<TLRPC.MessageEntity> entities=new ArrayList<>(spans.length);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    int start=spanned.getSpanStart(span);\n    int end=spanned.getSpanEnd(span);\n    if (span instanceof StyleSpan) {\n      int style=((StyleSpan)span).getStyle();\n      if ((style & Typeface.BOLD) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBold(),start,end));\n      }\n      if ((style & Typeface.ITALIC) > 0) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityItalic(),start,end));\n      }\n    }\n else     if (span instanceof UnderlineSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityUnderline(),start,end));\n    }\n else     if (span instanceof StrikethroughSpan) {\n      entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityStrike(),start,end));\n    }\n else     if (span instanceof ParsedSpan) {\n      ParsedSpan parsedSpan=(ParsedSpan)span;\n      if (parsedSpan.type == TYPE_SPOILER) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntitySpoiler(),start,end));\n      }\n else       if (parsedSpan.type == TYPE_MONO) {\n        entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityPre(),start,end));\n      }\n    }\n else     if (span instanceof AnimatedEmojiSpan) {\n      TLRPC.TL_messageEntityCustomEmoji entity=new TLRPC.TL_messageEntityCustomEmoji();\n      entity.document_id=((AnimatedEmojiSpan)span).documentId;\n      entity.document=((AnimatedEmojiSpan)span).document;\n      entities.add(setEntityStartEnd(entity,start,end));\n    }\n  }\n  SpannableString spannable=new SpannableString(spanned.toString());\n  MediaDataController.addTextStyleRuns(entities,spannable,spannable);\n  for (int i=0; i < spans.length; ++i) {\n    Object span=spans[i];\n    if (span instanceof URLSpan) {\n      int start=spanned.getSpanStart(span);\n      int end=spanned.getSpanEnd(span);\n      String text=spanned.subSequence(start,end).toString();\n      String url=((URLSpan)span).getURL();\n      if (text.equals(url)) {\n        spannable.setSpan(new URLSpan(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n else {\n        spannable.setSpan(new URLSpanReplacement(url),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n    }\n  }\n  MediaDataController.addAnimatedEmojiSpans(entities,spannable,null);\n  return spannable;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 497,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Build.VERSION.SDK_INT >= Build.VERSION_CODES.N",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 37,
    "startColumnNumber" : 16,
    "endLineNumber" : 37,
    "endColumnNumber" : 21
  }, {
    "charLength" : 5,
    "startLineNumber" : 37,
    "startColumnNumber" : 41,
    "endLineNumber" : 37,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}