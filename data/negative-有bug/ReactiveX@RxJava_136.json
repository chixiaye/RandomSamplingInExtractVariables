{
  "id" : 136,
  "expression" : "new AtomicInteger()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableCombineLatestTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AtomicInteger()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 742,
      "startColumnNumber" : 36,
      "endLineNumber" : 742,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 742,
        "startColumnNumber" : 28,
        "endLineNumber" : 742,
        "endColumnNumber" : 55
      },
      "nodeContext" : "count=new AtomicInteger()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 742,
        "startColumnNumber" : 8,
        "endLineNumber" : 742,
        "endColumnNumber" : 56
      },
      "nodeContext" : "final AtomicInteger count=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 740,
        "startColumnNumber" : 77,
        "endLineNumber" : 770,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger count=new AtomicInteger();\n  final int SIZE=2000;\n  Observable<Long> timer=Observable.interval(0,1,TimeUnit.MILLISECONDS).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Try<Optional<Long>>>(){\n    @Override public void accept(    Try<Optional<Long>> n){\n      if (count.incrementAndGet() >= SIZE) {\n        latch.countDown();\n      }\n    }\n  }\n).take(SIZE);\n  TestObserver<Long> ts=new TestObserver<Long>();\n  Observable.combineLatest(timer,Observable.<Integer>never(),new BiFunction<Long,Integer,Long>(){\n    @Override public Long apply(    Long t1,    Integer t2){\n      return t1;\n    }\n  }\n).subscribe(ts);\n  if (!latch.await(SIZE + 1000,TimeUnit.MILLISECONDS)) {\n    fail(\"timed out\");\n  }\n  assertEquals(SIZE,count.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1298,
        "startLineNumber" : 739,
        "startColumnNumber" : 4,
        "endLineNumber" : 770,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWithCombineLatestIssue1717() throws InterruptedException {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger count=new AtomicInteger();\n  final int SIZE=2000;\n  Observable<Long> timer=Observable.interval(0,1,TimeUnit.MILLISECONDS).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Try<Optional<Long>>>(){\n    @Override public void accept(    Try<Optional<Long>> n){\n      if (count.incrementAndGet() >= SIZE) {\n        latch.countDown();\n      }\n    }\n  }\n).take(SIZE);\n  TestObserver<Long> ts=new TestObserver<Long>();\n  Observable.combineLatest(timer,Observable.<Integer>never(),new BiFunction<Long,Integer,Long>(){\n    @Override public Long apply(    Long t1,    Integer t2){\n      return t1;\n    }\n  }\n).subscribe(ts);\n  if (!latch.await(SIZE + 1000,TimeUnit.MILLISECONDS)) {\n    fail(\"timed out\");\n  }\n  assertEquals(SIZE,count.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 742,
        "startColumnNumber" : 8,
        "endLineNumber" : 742,
        "endColumnNumber" : 56
      },
      "nodeContext" : "final AtomicInteger count=new AtomicInteger();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.atomic.AtomicInteger"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 742,
    "startColumnNumber" : 36,
    "endLineNumber" : 742,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}