{
  "id" : 15,
  "expression" : "ValueType.STRING",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnProcessorFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ValueType.STRING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 52,
      "startColumnNumber" : 8,
      "endLineNumber" : 52,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ValueType.STRING == capabilities.getType()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Preconditions.checkArgument(ValueType.STRING == capabilities.getType(),\"groupBy dimension processors must be STRING typed\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 6
      },
      "nodeContext" : "Preconditions.checkArgument(ValueType.STRING == capabilities.getType(),\"groupBy dimension processors must be STRING typed\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(ValueType.STRING == capabilities.getType(),\"groupBy dimension processors must be STRING typed\");\n  return new SingleValueStringGroupByVectorColumnSelector(selector);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public GroupByVectorColumnSelector makeSingleValueDimensionProcessor(final ColumnCapabilities capabilities,final SingleValueDimensionVectorSelector selector){\n  Preconditions.checkArgument(ValueType.STRING == capabilities.getType(),\"groupBy dimension processors must be STRING typed\");\n  return new SingleValueStringGroupByVectorColumnSelector(selector);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ValueType.STRING == capabilities.getType()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.segment.column.ValueType"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 52,
    "startColumnNumber" : 8,
    "endLineNumber" : 52,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}