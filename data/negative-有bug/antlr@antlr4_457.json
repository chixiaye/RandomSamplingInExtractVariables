{
  "id" : 457,
  "expression" : "\", \"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestTokenTypeAssignment.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\", \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 182,
      "startColumnNumber" : 62,
      "endLineNumber" : 182,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 182,
        "startColumnNumber" : 23,
        "endLineNumber" : 182,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new StringTokenizer(allValidTokensStr,\", \")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 182,
        "startColumnNumber" : 18,
        "endLineNumber" : 182,
        "endColumnNumber" : 67
      },
      "nodeContext" : "st=new StringTokenizer(allValidTokensStr,\", \")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 68
      },
      "nodeContext" : "StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 166,
        "startColumnNumber" : 1,
        "endLineNumber" : 208,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] typeToTokenName=g.getTokenNames();\n  Set<String> tokens=new HashSet<String>();\n  for (int i=0; i < typeToTokenName.length; i++) {\n    String t=typeToTokenName[i];\n    if (t != null) {\n      if (t.startsWith(Grammar.AUTO_GENERATED_TOKEN_NAME_PREFIX)) {\n        tokens.add(g.getTokenDisplayName(i));\n      }\n else {\n        tokens.add(t);\n      }\n    }\n  }\n  StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n  while (st.hasMoreTokens()) {\n    String tokenName=st.nextToken();\n    assertTrue(\"token \" + tokenName + \" expected, but was undefined\",g.getTokenType(tokenName) != Token.INVALID_TYPE);\n    tokens.remove(tokenName);\n  }\n  for (  String tokenName : tokens) {\n    assertTrue(\"unexpected token name \" + tokenName,g.getTokenType(tokenName) < Token.MIN_USER_TOKEN_TYPE);\n  }\n  st=new StringTokenizer(rulesStr,\", \");\n  int n=0;\n  while (st.hasMoreTokens()) {\n    String ruleName=st.nextToken();\n    assertNotNull(\"rule \" + ruleName + \" expected\",g.getRule(ruleName));\n    n++;\n  }\n  assertEquals(\"number of rules mismatch; expecting \" + n + \"; found \"+ g.rules.size(),n,g.rules.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 162,
        "startColumnNumber" : 1,
        "endLineNumber" : 208,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void checkSymbols(Grammar g,String rulesStr,String allValidTokensStr) throws Exception {\n  String[] typeToTokenName=g.getTokenNames();\n  Set<String> tokens=new HashSet<String>();\n  for (int i=0; i < typeToTokenName.length; i++) {\n    String t=typeToTokenName[i];\n    if (t != null) {\n      if (t.startsWith(Grammar.AUTO_GENERATED_TOKEN_NAME_PREFIX)) {\n        tokens.add(g.getTokenDisplayName(i));\n      }\n else {\n        tokens.add(t);\n      }\n    }\n  }\n  StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n  while (st.hasMoreTokens()) {\n    String tokenName=st.nextToken();\n    assertTrue(\"token \" + tokenName + \" expected, but was undefined\",g.getTokenType(tokenName) != Token.INVALID_TYPE);\n    tokens.remove(tokenName);\n  }\n  for (  String tokenName : tokens) {\n    assertTrue(\"unexpected token name \" + tokenName,g.getTokenType(tokenName) < Token.MIN_USER_TOKEN_TYPE);\n  }\n  st=new StringTokenizer(rulesStr,\", \");\n  int n=0;\n  while (st.hasMoreTokens()) {\n    String ruleName=st.nextToken();\n    assertNotNull(\"rule \" + ruleName + \" expected\",g.getRule(ruleName));\n    n++;\n  }\n  assertEquals(\"number of rules mismatch; expecting \" + n + \"; found \"+ g.rules.size(),n,g.rules.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 68
      },
      "nodeContext" : "StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\", \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 196,
      "startColumnNumber" : 37,
      "endLineNumber" : 196,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 196,
        "startColumnNumber" : 7,
        "endLineNumber" : 196,
        "endColumnNumber" : 42
      },
      "nodeContext" : "new StringTokenizer(rulesStr,\", \")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 196,
        "endColumnNumber" : 42
      },
      "nodeContext" : "st=new StringTokenizer(rulesStr,\", \")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 196,
        "endColumnNumber" : 43
      },
      "nodeContext" : "st=new StringTokenizer(rulesStr,\", \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 166,
        "startColumnNumber" : 1,
        "endLineNumber" : 208,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String[] typeToTokenName=g.getTokenNames();\n  Set<String> tokens=new HashSet<String>();\n  for (int i=0; i < typeToTokenName.length; i++) {\n    String t=typeToTokenName[i];\n    if (t != null) {\n      if (t.startsWith(Grammar.AUTO_GENERATED_TOKEN_NAME_PREFIX)) {\n        tokens.add(g.getTokenDisplayName(i));\n      }\n else {\n        tokens.add(t);\n      }\n    }\n  }\n  StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n  while (st.hasMoreTokens()) {\n    String tokenName=st.nextToken();\n    assertTrue(\"token \" + tokenName + \" expected, but was undefined\",g.getTokenType(tokenName) != Token.INVALID_TYPE);\n    tokens.remove(tokenName);\n  }\n  for (  String tokenName : tokens) {\n    assertTrue(\"unexpected token name \" + tokenName,g.getTokenType(tokenName) < Token.MIN_USER_TOKEN_TYPE);\n  }\n  st=new StringTokenizer(rulesStr,\", \");\n  int n=0;\n  while (st.hasMoreTokens()) {\n    String ruleName=st.nextToken();\n    assertNotNull(\"rule \" + ruleName + \" expected\",g.getRule(ruleName));\n    n++;\n  }\n  assertEquals(\"number of rules mismatch; expecting \" + n + \"; found \"+ g.rules.size(),n,g.rules.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 162,
        "startColumnNumber" : 1,
        "endLineNumber" : 208,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void checkSymbols(Grammar g,String rulesStr,String allValidTokensStr) throws Exception {\n  String[] typeToTokenName=g.getTokenNames();\n  Set<String> tokens=new HashSet<String>();\n  for (int i=0; i < typeToTokenName.length; i++) {\n    String t=typeToTokenName[i];\n    if (t != null) {\n      if (t.startsWith(Grammar.AUTO_GENERATED_TOKEN_NAME_PREFIX)) {\n        tokens.add(g.getTokenDisplayName(i));\n      }\n else {\n        tokens.add(t);\n      }\n    }\n  }\n  StringTokenizer st=new StringTokenizer(allValidTokensStr,\", \");\n  while (st.hasMoreTokens()) {\n    String tokenName=st.nextToken();\n    assertTrue(\"token \" + tokenName + \" expected, but was undefined\",g.getTokenType(tokenName) != Token.INVALID_TYPE);\n    tokens.remove(tokenName);\n  }\n  for (  String tokenName : tokens) {\n    assertTrue(\"unexpected token name \" + tokenName,g.getTokenType(tokenName) < Token.MIN_USER_TOKEN_TYPE);\n  }\n  st=new StringTokenizer(rulesStr,\", \");\n  int n=0;\n  while (st.hasMoreTokens()) {\n    String ruleName=st.nextToken();\n    assertNotNull(\"rule \" + ruleName + \" expected\",g.getRule(ruleName));\n    n++;\n  }\n  assertEquals(\"number of rules mismatch; expecting \" + n + \"; found \"+ g.rules.size(),n,g.rules.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 196,
        "endColumnNumber" : 43
      },
      "nodeContext" : "st=new StringTokenizer(rulesStr,\", \");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 182,
    "startColumnNumber" : 62,
    "endLineNumber" : 182,
    "endColumnNumber" : 66
  }, {
    "charLength" : 4,
    "startLineNumber" : 196,
    "startColumnNumber" : 37,
    "endLineNumber" : 196,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}