{
  "id" : 317,
  "expression" : "index < slen",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/escape/CharEscaper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index < slen",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 92,
      "startColumnNumber" : 11,
      "endLineNumber" : 92,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1150,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; index < slen; index++) {\n  char[] r=escape(s.charAt(index));\n  if (r == null)   continue;\n  int rlen=r.length;\n  int charsSkipped=index - lastEscape;\n  int sizeNeeded=destIndex + charsSkipped + rlen;\n  if (destSize < sizeNeeded) {\n    destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n    dest=growBuffer(dest,destIndex,destSize);\n  }\n  if (charsSkipped > 0) {\n    s.getChars(lastEscape,index,dest,destIndex);\n    destIndex+=charsSkipped;\n  }\n  if (rlen > 0) {\n    System.arraycopy(r,0,dest,destIndex,rlen);\n    destIndex+=rlen;\n  }\n  lastEscape=index + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1995,
        "startLineNumber" : 81,
        "startColumnNumber" : 57,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int slen=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destSize=dest.length;\n  int destIndex=0;\n  int lastEscape=0;\n  for (; index < slen; index++) {\n    char[] r=escape(s.charAt(index));\n    if (r == null)     continue;\n    int rlen=r.length;\n    int charsSkipped=index - lastEscape;\n    int sizeNeeded=destIndex + charsSkipped + rlen;\n    if (destSize < sizeNeeded) {\n      destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n      dest=growBuffer(dest,destIndex,destSize);\n    }\n    if (charsSkipped > 0) {\n      s.getChars(lastEscape,index,dest,destIndex);\n      destIndex+=charsSkipped;\n    }\n    if (rlen > 0) {\n      System.arraycopy(r,0,dest,destIndex,rlen);\n      destIndex+=rlen;\n    }\n    lastEscape=index + 1;\n  }\n  int charsLeft=slen - lastEscape;\n  if (charsLeft > 0) {\n    int sizeNeeded=destIndex + charsLeft;\n    if (destSize < sizeNeeded) {\n      dest=growBuffer(dest,destIndex,sizeNeeded);\n    }\n    s.getChars(lastEscape,slen,dest,destIndex);\n    destIndex=sizeNeeded;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2642,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the escaped form of a given literal string, starting at the given index. This method is called by the  {@link #escape(String)} method when it discovers that escaping is required. It isprotected to allow subclasses to override the fastpath escaping function to inline their escaping test. See  {@link CharEscaperBuilder} for an example usage.\n * @param s the literal string to be escaped\n * @param index the index to start escaping from\n * @return the escaped form of {@code string}\n * @throws NullPointerException if {@code string} is null\n */\nprotected final String escapeSlow(String s,int index){\n  int slen=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destSize=dest.length;\n  int destIndex=0;\n  int lastEscape=0;\n  for (; index < slen; index++) {\n    char[] r=escape(s.charAt(index));\n    if (r == null)     continue;\n    int rlen=r.length;\n    int charsSkipped=index - lastEscape;\n    int sizeNeeded=destIndex + charsSkipped + rlen;\n    if (destSize < sizeNeeded) {\n      destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n      dest=growBuffer(dest,destIndex,destSize);\n    }\n    if (charsSkipped > 0) {\n      s.getChars(lastEscape,index,dest,destIndex);\n      destIndex+=charsSkipped;\n    }\n    if (rlen > 0) {\n      System.arraycopy(r,0,dest,destIndex,rlen);\n      destIndex+=rlen;\n    }\n    lastEscape=index + 1;\n  }\n  int charsLeft=slen - lastEscape;\n  if (charsLeft > 0) {\n    int sizeNeeded=destIndex + charsLeft;\n    if (destSize < sizeNeeded) {\n      dest=growBuffer(dest,destIndex,sizeNeeded);\n    }\n    s.getChars(lastEscape,slen,dest,destIndex);\n    destIndex=sizeNeeded;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1150,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; index < slen; index++) {\n  char[] r=escape(s.charAt(index));\n  if (r == null)   continue;\n  int rlen=r.length;\n  int charsSkipped=index - lastEscape;\n  int sizeNeeded=destIndex + charsSkipped + rlen;\n  if (destSize < sizeNeeded) {\n    destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n    dest=growBuffer(dest,destIndex,destSize);\n  }\n  if (charsSkipped > 0) {\n    s.getChars(lastEscape,index,dest,destIndex);\n    destIndex+=charsSkipped;\n  }\n  if (rlen > 0) {\n    System.arraycopy(r,0,dest,destIndex,rlen);\n    destIndex+=rlen;\n  }\n  lastEscape=index + 1;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 92,
    "startColumnNumber" : 11,
    "endLineNumber" : 92,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}