{
  "id" : 305,
  "expression" : "new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState))",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState))",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 173,
      "startColumnNumber" : 52,
      "endLineNumber" : 173,
      "endColumnNumber" : 117
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 173,
        "startColumnNumber" : 38,
        "endLineNumber" : 173,
        "endColumnNumber" : 117
      },
      "nodeContext" : "sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 173,
        "startColumnNumber" : 20,
        "endLineNumber" : 173,
        "endColumnNumber" : 118
      },
      "nodeContext" : "final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1464,
        "startLineNumber" : 166,
        "startColumnNumber" : 100,
        "endLineNumber" : 187,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final UUID destinationClient=destinationEntry.getKey();\n  final ClientState destinationClientState=destinationEntry.getValue();\n  if (sourceClient.equals(destinationClient)) {\n    continue;\n  }\n  final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n  final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n  while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n    final TaskId taskToMove=sourceIterator.next();\n    final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n    if (canMove) {\n      taskUnassignor.accept(sourceClientState,taskToMove);\n      taskAssignor.accept(destinationClientState,taskToMove);\n      keepBalancing=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1548,
        "startLineNumber" : 166,
        "startColumnNumber" : 16,
        "endLineNumber" : 187,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n  final UUID destinationClient=destinationEntry.getKey();\n  final ClientState destinationClientState=destinationEntry.getValue();\n  if (sourceClient.equals(destinationClient)) {\n    continue;\n  }\n  final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n  final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n  while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n    final TaskId taskToMove=sourceIterator.next();\n    final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n    if (canMove) {\n      taskUnassignor.accept(sourceClientState,taskToMove);\n      taskAssignor.accept(destinationClientState,taskToMove);\n      keepBalancing=true;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1723,
        "startLineNumber" : 162,
        "startColumnNumber" : 91,
        "endLineNumber" : 188,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final UUID sourceClient=sourceEntry.getKey();\n  final ClientState sourceClientState=sourceEntry.getValue();\n  for (  final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n    final UUID destinationClient=destinationEntry.getKey();\n    final ClientState destinationClientState=destinationEntry.getValue();\n    if (sourceClient.equals(destinationClient)) {\n      continue;\n    }\n    final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n    final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n    while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n      final TaskId taskToMove=sourceIterator.next();\n      final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n      if (canMove) {\n        taskUnassignor.accept(sourceClientState,taskToMove);\n        taskAssignor.accept(destinationClientState,taskToMove);\n        keepBalancing=true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1802,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (final Map.Entry<UUID,ClientState> sourceEntry : clientStates.entrySet()) {\n  final UUID sourceClient=sourceEntry.getKey();\n  final ClientState sourceClientState=sourceEntry.getValue();\n  for (  final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n    final UUID destinationClient=destinationEntry.getKey();\n    final ClientState destinationClientState=destinationEntry.getValue();\n    if (sourceClient.equals(destinationClient)) {\n      continue;\n    }\n    final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n    final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n    while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n      final TaskId taskToMove=sourceIterator.next();\n      final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n      if (canMove) {\n        taskUnassignor.accept(sourceClientState,taskToMove);\n        taskAssignor.accept(destinationClientState,taskToMove);\n        keepBalancing=true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1861,
        "startLineNumber" : 160,
        "startColumnNumber" : 30,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  keepBalancing=false;\n  for (  final Map.Entry<UUID,ClientState> sourceEntry : clientStates.entrySet()) {\n    final UUID sourceClient=sourceEntry.getKey();\n    final ClientState sourceClientState=sourceEntry.getValue();\n    for (    final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n      final UUID destinationClient=destinationEntry.getKey();\n      final ClientState destinationClientState=destinationEntry.getValue();\n      if (sourceClient.equals(destinationClient)) {\n        continue;\n      }\n      final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n      final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n      while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n        final TaskId taskToMove=sourceIterator.next();\n        final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n        if (canMove) {\n          taskUnassignor.accept(sourceClientState,taskToMove);\n          taskAssignor.accept(destinationClientState,taskToMove);\n          keepBalancing=true;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1883,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (keepBalancing) {\n  keepBalancing=false;\n  for (  final Map.Entry<UUID,ClientState> sourceEntry : clientStates.entrySet()) {\n    final UUID sourceClient=sourceEntry.getKey();\n    final ClientState sourceClientState=sourceEntry.getValue();\n    for (    final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n      final UUID destinationClient=destinationEntry.getKey();\n      final ClientState destinationClientState=destinationEntry.getValue();\n      if (sourceClient.equals(destinationClient)) {\n        continue;\n      }\n      final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n      final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n      while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n        final TaskId taskToMove=sourceIterator.next();\n        final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n        if (canMove) {\n          taskUnassignor.accept(sourceClientState,taskToMove);\n          taskAssignor.accept(destinationClientState,taskToMove);\n          keepBalancing=true;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 167,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 158,
        "startColumnNumber" : 122,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean keepBalancing=true;\n  while (keepBalancing) {\n    keepBalancing=false;\n    for (    final Map.Entry<UUID,ClientState> sourceEntry : clientStates.entrySet()) {\n      final UUID sourceClient=sourceEntry.getKey();\n      final ClientState sourceClientState=sourceEntry.getValue();\n      for (      final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n        final UUID destinationClient=destinationEntry.getKey();\n        final ClientState destinationClientState=destinationEntry.getValue();\n        if (sourceClient.equals(destinationClient)) {\n          continue;\n        }\n        final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n        final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n        while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n          final TaskId taskToMove=sourceIterator.next();\n          final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n          if (canMove) {\n            taskUnassignor.accept(sourceClientState,taskToMove);\n            taskAssignor.accept(destinationClientState,taskToMove);\n            keepBalancing=true;\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2470,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 190,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void balanceTasksOverThreads(final SortedMap<UUID,ClientState> clientStates,final Function<ClientState,Set<TaskId>> currentAssignmentAccessor,final BiConsumer<ClientState,TaskId> taskUnassignor,final BiConsumer<ClientState,TaskId> taskAssignor,final BiPredicate<ClientState,ClientState> taskMovementAttemptPredicate){\n  boolean keepBalancing=true;\n  while (keepBalancing) {\n    keepBalancing=false;\n    for (    final Map.Entry<UUID,ClientState> sourceEntry : clientStates.entrySet()) {\n      final UUID sourceClient=sourceEntry.getKey();\n      final ClientState sourceClientState=sourceEntry.getValue();\n      for (      final Map.Entry<UUID,ClientState> destinationEntry : clientStates.entrySet()) {\n        final UUID destinationClient=destinationEntry.getKey();\n        final ClientState destinationClientState=destinationEntry.getValue();\n        if (sourceClient.equals(destinationClient)) {\n          continue;\n        }\n        final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n        final Iterator<TaskId> sourceIterator=sourceTasks.iterator();\n        while (shouldMoveATask(sourceClientState,destinationClientState) && sourceIterator.hasNext()) {\n          final TaskId taskToMove=sourceIterator.next();\n          final boolean canMove=!destinationClientState.hasAssignedTask(taskToMove) && taskMovementAttemptPredicate.test(sourceClientState,destinationClientState);\n          if (canMove) {\n            taskUnassignor.accept(sourceClientState,taskToMove);\n            taskAssignor.accept(destinationClientState,taskToMove);\n            keepBalancing=true;\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 173,
        "startColumnNumber" : 20,
        "endLineNumber" : 173,
        "endColumnNumber" : 118
      },
      "nodeContext" : "final Set<TaskId> sourceTasks=new TreeSet<>(currentAssignmentAccessor.apply(sourceClientState));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.util.TreeSet<org.apache.kafka.streams.processor.TaskId>"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 173,
    "startColumnNumber" : 52,
    "endLineNumber" : 173,
    "endColumnNumber" : 117
  } ],
  "layoutRelationDataList" : [ ]
}