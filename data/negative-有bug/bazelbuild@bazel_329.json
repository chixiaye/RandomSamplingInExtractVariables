{
  "id" : 329,
  "expression" : "k.getExtensionLabel()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/analysis/configuredtargets/ConfiguredTargetsUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "k.getExtensionLabel()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 47,
      "startColumnNumber" : 24,
      "endLineNumber" : 47,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 47,
        "startColumnNumber" : 24,
        "endLineNumber" : 47,
        "endColumnNumber" : 56
      },
      "nodeContext" : "k.getExtensionLabel().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 47,
        "startColumnNumber" : 24,
        "endLineNumber" : 47,
        "endColumnNumber" : 84
      },
      "nodeContext" : "k.getExtensionLabel().toString() + \"%\" + k.getExportedName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 10,
        "endLineNumber" : 47,
        "endColumnNumber" : 84
      },
      "nodeContext" : "keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 47,
        "startColumnNumber" : 10,
        "endLineNumber" : 47,
        "endColumnNumber" : 85
      },
      "nodeContext" : "keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 45,
        "startColumnNumber" : 49,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n  keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (key instanceof StarlarkProvider.Key) {\n  StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n  keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n}\n else {\n  keyAsString=key.toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 44,
        "startColumnNumber" : 46,
        "endLineNumber" : 51,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (key instanceof StarlarkProvider.Key) {\n    StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n    keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n  }\n else {\n    keyAsString=key.toString();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 44,
        "startColumnNumber" : 13,
        "endLineNumber" : 56,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (key instanceof Provider.Key) {\n  if (key instanceof StarlarkProvider.Key) {\n    StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n    keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n  }\n else {\n    keyAsString=key.toString();\n  }\n}\n else if (key instanceof Class) {\n  keyAsString=((Class)key).getSimpleName();\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (key instanceof String) {\n  keyAsString=key.toString();\n}\n else if (key instanceof Provider.Key) {\n  if (key instanceof StarlarkProvider.Key) {\n    StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n    keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n  }\n else {\n    keyAsString=key.toString();\n  }\n}\n else if (key instanceof Class) {\n  keyAsString=((Class)key).getSimpleName();\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 37,
        "startColumnNumber" : 59,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object key=providers.getProviderKeyAt(i);\n  Object v=providers.getProviderInstanceAt(i);\n  String keyAsString;\n  if (key instanceof String) {\n    keyAsString=key.toString();\n  }\n else   if (key instanceof Provider.Key) {\n    if (key instanceof StarlarkProvider.Key) {\n      StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n      keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n    }\n else {\n      keyAsString=key.toString();\n    }\n  }\n else   if (key instanceof Class) {\n    keyAsString=((Class)key).getSimpleName();\n  }\n else {\n    continue;\n  }\n  try {\n    res.put(keyAsString,Starlark.fromJava(v,null));\n  }\n catch (  IllegalArgumentException ex) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < providers.getProviderCount(); i++) {\n  Object key=providers.getProviderKeyAt(i);\n  Object v=providers.getProviderInstanceAt(i);\n  String keyAsString;\n  if (key instanceof String) {\n    keyAsString=key.toString();\n  }\n else   if (key instanceof Provider.Key) {\n    if (key instanceof StarlarkProvider.Key) {\n      StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n      keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n    }\n else {\n      keyAsString=key.toString();\n    }\n  }\n else   if (key instanceof Class) {\n    keyAsString=((Class)key).getSimpleName();\n  }\n else {\n    continue;\n  }\n  try {\n    res.put(keyAsString,Starlark.fromJava(v,null));\n  }\n catch (  IllegalArgumentException ex) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 134,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1127,
        "startLineNumber" : 35,
        "startColumnNumber" : 76,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Dict.Builder<String,Object> res=Dict.builder();\n  for (int i=0; i < providers.getProviderCount(); i++) {\n    Object key=providers.getProviderKeyAt(i);\n    Object v=providers.getProviderInstanceAt(i);\n    String keyAsString;\n    if (key instanceof String) {\n      keyAsString=key.toString();\n    }\n else     if (key instanceof Provider.Key) {\n      if (key instanceof StarlarkProvider.Key) {\n        StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n        keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n      }\n else {\n        keyAsString=key.toString();\n      }\n    }\n else     if (key instanceof Class) {\n      keyAsString=((Class)key).getSimpleName();\n    }\n else {\n      continue;\n    }\n    try {\n      res.put(keyAsString,Starlark.fromJava(v,null));\n    }\n catch (    IllegalArgumentException ex) {\n    }\n  }\n  return res.buildImmutable();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1596,
        "startLineNumber" : 27,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a Dict of provider names to their values for a configured target. <p>This map is intended to be used from Starlark query output methods, so all values must be accessible in Starlark. If the value of a provider is not convertible to a Starlark value, that name/value pair is left out of the map.\n */\npublic static Dict<String,Object> getProvidersDict(AbstractConfiguredTarget target,TransitiveInfoProviderMap providers){\n  Dict.Builder<String,Object> res=Dict.builder();\n  for (int i=0; i < providers.getProviderCount(); i++) {\n    Object key=providers.getProviderKeyAt(i);\n    Object v=providers.getProviderInstanceAt(i);\n    String keyAsString;\n    if (key instanceof String) {\n      keyAsString=key.toString();\n    }\n else     if (key instanceof Provider.Key) {\n      if (key instanceof StarlarkProvider.Key) {\n        StarlarkProvider.Key k=(StarlarkProvider.Key)key;\n        keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n      }\n else {\n        keyAsString=key.toString();\n      }\n    }\n else     if (key instanceof Class) {\n      keyAsString=((Class)key).getSimpleName();\n    }\n else {\n      continue;\n    }\n    try {\n      res.put(keyAsString,Starlark.fromJava(v,null));\n    }\n catch (    IllegalArgumentException ex) {\n    }\n  }\n  return res.buildImmutable();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 47,
        "startColumnNumber" : 10,
        "endLineNumber" : 47,
        "endColumnNumber" : 85
      },
      "nodeContext" : "keyAsString=k.getExtensionLabel().toString() + \"%\" + k.getExportedName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.devtools.build.lib.cmdline.Label"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 47,
    "startColumnNumber" : 24,
    "endLineNumber" : 47,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}