{
  "id" : 59,
  "expression" : "bld",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/util/SignalHandler.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bld",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 12,
      "endLineNumber" : 78,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 63
      },
      "nodeContext" : "bld.append(\"Registered UNIX signal handlers for [\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 64
      },
      "nodeContext" : "bld.append(\"Registered UNIX signal handlers for [\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 66,
        "startColumnNumber" : 43,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (SignalHandler.class) {\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 65,
        "startColumnNumber" : 50,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register some signal handlers.\n * @param LOG The slf4j logger\n */\npublic static void register(final Logger LOG){\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 64
      },
      "nodeContext" : "bld.append(\"Registered UNIX signal handlers for [\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "bld",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 84,
      "startColumnNumber" : 20,
      "endLineNumber" : 84,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 41
      },
      "nodeContext" : "bld.append(separator)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bld.append(separator);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  new Handler(signalName,LOG);\n  bld.append(separator);\n  bld.append(signalName);\n  separator=\", \";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  new Handler(signalName,LOG);\n  bld.append(separator);\n  bld.append(signalName);\n  separator=\", \";\n}\n catch (Exception e) {\n  LOG.info(\"Error while registering signal handler\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 81,
        "startColumnNumber" : 46,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    new Handler(signalName,LOG);\n    bld.append(separator);\n    bld.append(signalName);\n    separator=\", \";\n  }\n catch (  Exception e) {\n    LOG.info(\"Error while registering signal handler\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String signalName : SIGNALS) {\n  try {\n    new Handler(signalName,LOG);\n    bld.append(separator);\n    bld.append(signalName);\n    separator=\", \";\n  }\n catch (  Exception e) {\n    LOG.info(\"Error while registering signal handler\",e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 66,
        "startColumnNumber" : 43,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (SignalHandler.class) {\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 65,
        "startColumnNumber" : 50,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register some signal handlers.\n * @param LOG The slf4j logger\n */\npublic static void register(final Logger LOG){\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 84,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bld.append(separator);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "bld",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 85,
      "startColumnNumber" : 20,
      "endLineNumber" : 85,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bld.append(signalName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 43
      },
      "nodeContext" : "bld.append(signalName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 82,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  new Handler(signalName,LOG);\n  bld.append(separator);\n  bld.append(signalName);\n  separator=\", \";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  new Handler(signalName,LOG);\n  bld.append(separator);\n  bld.append(signalName);\n  separator=\", \";\n}\n catch (Exception e) {\n  LOG.info(\"Error while registering signal handler\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 81,
        "startColumnNumber" : 46,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    new Handler(signalName,LOG);\n    bld.append(separator);\n    bld.append(signalName);\n    separator=\", \";\n  }\n catch (  Exception e) {\n    LOG.info(\"Error while registering signal handler\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String signalName : SIGNALS) {\n  try {\n    new Handler(signalName,LOG);\n    bld.append(separator);\n    bld.append(signalName);\n    separator=\", \";\n  }\n catch (  Exception e) {\n    LOG.info(\"Error while registering signal handler\",e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 66,
        "startColumnNumber" : 43,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (SignalHandler.class) {\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 65,
        "startColumnNumber" : 50,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register some signal handlers.\n * @param LOG The slf4j logger\n */\npublic static void register(final Logger LOG){\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 43
      },
      "nodeContext" : "bld.append(signalName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "bld",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 91,
      "startColumnNumber" : 12,
      "endLineNumber" : 91,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "bld.append(\"]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 28
      },
      "nodeContext" : "bld.append(\"]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 66,
        "startColumnNumber" : 43,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (SignalHandler.class) {\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 65,
        "startColumnNumber" : 50,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register some signal handlers.\n * @param LOG The slf4j logger\n */\npublic static void register(final Logger LOG){\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 28
      },
      "nodeContext" : "bld.append(\"]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "bld",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 92,
      "startColumnNumber" : 21,
      "endLineNumber" : 92,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 92,
        "startColumnNumber" : 21,
        "endLineNumber" : 92,
        "endColumnNumber" : 35
      },
      "nodeContext" : "bld.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 36
      },
      "nodeContext" : "LOG.info(bld.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 37
      },
      "nodeContext" : "LOG.info(bld.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 66,
        "startColumnNumber" : 43,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (SignalHandler.class) {\n  if (registered) {\n    return;\n  }\n  registered=true;\n  final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n  StringBuilder bld=new StringBuilder();\n  bld.append(\"Registered UNIX signal handlers for [\");\n  String separator=\"\";\n  for (  String signalName : SIGNALS) {\n    try {\n      new Handler(signalName,LOG);\n      bld.append(separator);\n      bld.append(signalName);\n      separator=\", \";\n    }\n catch (    Exception e) {\n      LOG.info(\"Error while registering signal handler\",e);\n    }\n  }\n  bld.append(\"]\");\n  LOG.info(bld.toString());\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 65,
        "startColumnNumber" : 50,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1129,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register some signal handlers.\n * @param LOG The slf4j logger\n */\npublic static void register(final Logger LOG){\nsynchronized (SignalHandler.class) {\n    if (registered) {\n      return;\n    }\n    registered=true;\n    final String[] SIGNALS=OperatingSystem.isWindows() ? new String[]{\"TERM\",\"INT\"} : new String[]{\"TERM\",\"HUP\",\"INT\"};\n    StringBuilder bld=new StringBuilder();\n    bld.append(\"Registered UNIX signal handlers for [\");\n    String separator=\"\";\n    for (    String signalName : SIGNALS) {\n      try {\n        new Handler(signalName,LOG);\n        bld.append(separator);\n        bld.append(signalName);\n        separator=\", \";\n      }\n catch (      Exception e) {\n        LOG.info(\"Error while registering signal handler\",e);\n      }\n    }\n    bld.append(\"]\");\n    LOG.info(bld.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 37
      },
      "nodeContext" : "LOG.info(bld.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 12,
    "endLineNumber" : 78,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 84,
    "startColumnNumber" : 20,
    "endLineNumber" : 84,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 85,
    "startColumnNumber" : 20,
    "endLineNumber" : 85,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 91,
    "startColumnNumber" : 12,
    "endLineNumber" : 91,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 92,
    "startColumnNumber" : 21,
    "endLineNumber" : 92,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}