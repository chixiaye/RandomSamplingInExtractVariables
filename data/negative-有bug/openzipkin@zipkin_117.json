{
  "id" : 117,
  "expression" : "!name.startsWith(\"zipkin_collector\")",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinMetricsController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!name.startsWith(\"zipkin_collector\")",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 49,
      "startColumnNumber" : 10,
      "endLineNumber" : 49,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 49,
        "endColumnNumber" : 57
      },
      "nodeContext" : "if (!name.startsWith(\"zipkin_collector\")) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 47,
        "startColumnNumber" : 50,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String name=meter.getId().getName();\n  if (!name.startsWith(\"zipkin_collector\"))   continue;\n  String transport=meter.getId().getTag(\"transport\");\n  if (transport == null)   continue;\n  Meter.Type type=meter.getId().getType();\n  if (type == Meter.Type.COUNTER) {\n    generator.writeNumberField(\"counter.\" + name + \".\"+ transport,((Counter)meter).count());\n  }\n else   if (type == Meter.Type.GAUGE) {\n    generator.writeNumberField(\"gauge.\" + name + \".\"+ transport,((Gauge)meter).value());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Meter meter : meterRegistry.getMeters()) {\n  String name=meter.getId().getName();\n  if (!name.startsWith(\"zipkin_collector\"))   continue;\n  String transport=meter.getId().getTag(\"transport\");\n  if (transport == null)   continue;\n  Meter.Type type=meter.getId().getType();\n  if (type == Meter.Type.COUNTER) {\n    generator.writeNumberField(\"counter.\" + name + \".\"+ transport,((Counter)meter).count());\n  }\n else   if (type == Meter.Type.GAUGE) {\n    generator.writeNumberField(\"gauge.\" + name + \".\"+ transport,((Gauge)meter).value());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 42,
        "startColumnNumber" : 70,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringWriter writer=new StringWriter();\n  JsonGenerator generator=JsonUtil.createGenerator(writer);\n  generator.writeStartObject();\n  for (  Meter meter : meterRegistry.getMeters()) {\n    String name=meter.getId().getName();\n    if (!name.startsWith(\"zipkin_collector\"))     continue;\n    String transport=meter.getId().getTag(\"transport\");\n    if (transport == null)     continue;\n    Meter.Type type=meter.getId().getType();\n    if (type == Meter.Type.COUNTER) {\n      generator.writeNumberField(\"counter.\" + name + \".\"+ transport,((Counter)meter).count());\n    }\n else     if (type == Meter.Type.GAUGE) {\n      generator.writeNumberField(\"gauge.\" + name + \".\"+ transport,((Gauge)meter).value());\n    }\n  }\n  generator.writeEndObject();\n  generator.flush();\n  return HttpResponse.of(HttpStatus.OK,MediaType.JSON,writer.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Get(\"/metrics\") public HttpResponse fetchMetricsFromMicrometer() throws IOException {\n  StringWriter writer=new StringWriter();\n  JsonGenerator generator=JsonUtil.createGenerator(writer);\n  generator.writeStartObject();\n  for (  Meter meter : meterRegistry.getMeters()) {\n    String name=meter.getId().getName();\n    if (!name.startsWith(\"zipkin_collector\"))     continue;\n    String transport=meter.getId().getTag(\"transport\");\n    if (transport == null)     continue;\n    Meter.Type type=meter.getId().getType();\n    if (type == Meter.Type.COUNTER) {\n      generator.writeNumberField(\"counter.\" + name + \".\"+ transport,((Counter)meter).count());\n    }\n else     if (type == Meter.Type.GAUGE) {\n      generator.writeNumberField(\"gauge.\" + name + \".\"+ transport,((Gauge)meter).value());\n    }\n  }\n  generator.writeEndObject();\n  generator.flush();\n  return HttpResponse.of(HttpStatus.OK,MediaType.JSON,writer.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 49,
        "endColumnNumber" : 57
      },
      "nodeContext" : "if (!name.startsWith(\"zipkin_collector\")) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 49,
    "startColumnNumber" : 10,
    "endLineNumber" : 49,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}