{
  "id" : 225,
  "expression" : "initialStream != null",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/RollingCollapserBatchSizeDistributionStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "initialStream != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 71,
      "startColumnNumber" : 12,
      "endLineNumber" : 71,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 703,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (initialStream != null) {\n  return initialStream;\n}\n else {\nsynchronized (RollingCollapserBatchSizeDistributionStream.class) {\n    RollingCollapserBatchSizeDistributionStream existingStream=streams.get(collapserKey.name());\n    if (existingStream == null) {\n      RollingCollapserBatchSizeDistributionStream newStream=new RollingCollapserBatchSizeDistributionStream(collapserKey,numBuckets,bucketSizeInMs);\n      streams.putIfAbsent(collapserKey.name(),newStream);\n      return newStream;\n    }\n else {\n      return existingStream;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 821,
        "startLineNumber" : 69,
        "startColumnNumber" : 144,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RollingCollapserBatchSizeDistributionStream initialStream=streams.get(collapserKey.name());\n  if (initialStream != null) {\n    return initialStream;\n  }\n else {\nsynchronized (RollingCollapserBatchSizeDistributionStream.class) {\n      RollingCollapserBatchSizeDistributionStream existingStream=streams.get(collapserKey.name());\n      if (existingStream == null) {\n        RollingCollapserBatchSizeDistributionStream newStream=new RollingCollapserBatchSizeDistributionStream(collapserKey,numBuckets,bucketSizeInMs);\n        streams.putIfAbsent(collapserKey.name(),newStream);\n        return newStream;\n      }\n else {\n        return existingStream;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 961,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static RollingCollapserBatchSizeDistributionStream getInstance(HystrixCollapserKey collapserKey,int numBuckets,int bucketSizeInMs){\n  RollingCollapserBatchSizeDistributionStream initialStream=streams.get(collapserKey.name());\n  if (initialStream != null) {\n    return initialStream;\n  }\n else {\nsynchronized (RollingCollapserBatchSizeDistributionStream.class) {\n      RollingCollapserBatchSizeDistributionStream existingStream=streams.get(collapserKey.name());\n      if (existingStream == null) {\n        RollingCollapserBatchSizeDistributionStream newStream=new RollingCollapserBatchSizeDistributionStream(collapserKey,numBuckets,bucketSizeInMs);\n        streams.putIfAbsent(collapserKey.name(),newStream);\n        return newStream;\n      }\n else {\n        return existingStream;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 703,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (initialStream != null) {\n  return initialStream;\n}\n else {\nsynchronized (RollingCollapserBatchSizeDistributionStream.class) {\n    RollingCollapserBatchSizeDistributionStream existingStream=streams.get(collapserKey.name());\n    if (existingStream == null) {\n      RollingCollapserBatchSizeDistributionStream newStream=new RollingCollapserBatchSizeDistributionStream(collapserKey,numBuckets,bucketSizeInMs);\n      streams.putIfAbsent(collapserKey.name(),newStream);\n      return newStream;\n    }\n else {\n      return existingStream;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 71,
    "startColumnNumber" : 12,
    "endLineNumber" : 71,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}