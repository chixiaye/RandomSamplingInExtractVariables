{
  "id" : 278,
  "expression" : "predicate.matches(1L,nonMatchingStatisticsByColumnIndex)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/test/java/com/facebook/presto/orc/TestOrcBloomFilters.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "predicate.matches(1L,nonMatchingStatisticsByColumnIndex)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 304,
      "startColumnNumber" : 20,
      "endLineNumber" : 304,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(predicate.matches(1L,nonMatchingStatisticsByColumnIndex))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertFalse(predicate.matches(1L,nonMatchingStatisticsByColumnIndex));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2516,
        "startLineNumber" : 263,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Domain testingColumnHandleDomain=Domain.singleValue(BIGINT,1234L);\n  TupleDomain.ColumnDomain<String> column0=new TupleDomain.ColumnDomain<>(COLUMN_0,testingColumnHandleDomain);\n  TupleDomain<String> effectivePredicate=TupleDomain.fromColumnDomains(Optional.of(ImmutableList.of(column0)));\n  TupleDomain<String> emptyEffectivePredicate=TupleDomain.all();\n  List<ColumnReference<String>> columnReferences=ImmutableList.<ColumnReference<String>>builder().add(new ColumnReference<>(COLUMN_0,0,BIGINT)).add(new ColumnReference<>(COLUMN_1,1,BIGINT)).build();\n  TupleDomainOrcPredicate<String> predicate=new TupleDomainOrcPredicate<>(effectivePredicate,columnReferences,true,Optional.empty());\n  TupleDomainOrcPredicate<String> emptyPredicate=new TupleDomainOrcPredicate<>(emptyEffectivePredicate,columnReferences,true,Optional.empty());\n  HiveBloomFilter hiveBloomFilter=new HiveBloomFilter(new BloomFilter(1000,0.01));\n  OrcProto.BloomFilter emptyOrcBloomFilter=toOrcBloomFilter(hiveBloomFilter);\n  hiveBloomFilter.addLong(1234);\n  OrcProto.BloomFilter orcBloomFilter=toOrcBloomFilter(hiveBloomFilter);\n  Map<Integer,ColumnStatistics> matchingStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,toHiveBloomFilter(orcBloomFilter),new IntegerStatistics(10L,2000L,null)));\n  Map<Integer,ColumnStatistics> nonMatchingStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,toHiveBloomFilter(emptyOrcBloomFilter),new IntegerStatistics(10L,2000L,null)));\n  Map<Integer,ColumnStatistics> withoutBloomFilterStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,null,new IntegerStatistics(10L,2000L,null)));\n  assertTrue(predicate.matches(1L,matchingStatisticsByColumnIndex));\n  assertTrue(predicate.matches(1L,withoutBloomFilterStatisticsByColumnIndex));\n  assertFalse(predicate.matches(1L,nonMatchingStatisticsByColumnIndex));\n  assertTrue(emptyPredicate.matches(1L,matchingStatisticsByColumnIndex));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2661,
        "startLineNumber" : 260,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMatches(){\n  Domain testingColumnHandleDomain=Domain.singleValue(BIGINT,1234L);\n  TupleDomain.ColumnDomain<String> column0=new TupleDomain.ColumnDomain<>(COLUMN_0,testingColumnHandleDomain);\n  TupleDomain<String> effectivePredicate=TupleDomain.fromColumnDomains(Optional.of(ImmutableList.of(column0)));\n  TupleDomain<String> emptyEffectivePredicate=TupleDomain.all();\n  List<ColumnReference<String>> columnReferences=ImmutableList.<ColumnReference<String>>builder().add(new ColumnReference<>(COLUMN_0,0,BIGINT)).add(new ColumnReference<>(COLUMN_1,1,BIGINT)).build();\n  TupleDomainOrcPredicate<String> predicate=new TupleDomainOrcPredicate<>(effectivePredicate,columnReferences,true,Optional.empty());\n  TupleDomainOrcPredicate<String> emptyPredicate=new TupleDomainOrcPredicate<>(emptyEffectivePredicate,columnReferences,true,Optional.empty());\n  HiveBloomFilter hiveBloomFilter=new HiveBloomFilter(new BloomFilter(1000,0.01));\n  OrcProto.BloomFilter emptyOrcBloomFilter=toOrcBloomFilter(hiveBloomFilter);\n  hiveBloomFilter.addLong(1234);\n  OrcProto.BloomFilter orcBloomFilter=toOrcBloomFilter(hiveBloomFilter);\n  Map<Integer,ColumnStatistics> matchingStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,toHiveBloomFilter(orcBloomFilter),new IntegerStatistics(10L,2000L,null)));\n  Map<Integer,ColumnStatistics> nonMatchingStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,toHiveBloomFilter(emptyOrcBloomFilter),new IntegerStatistics(10L,2000L,null)));\n  Map<Integer,ColumnStatistics> withoutBloomFilterStatisticsByColumnIndex=ImmutableMap.of(0,new IntegerColumnStatistics(null,null,new IntegerStatistics(10L,2000L,null)));\n  assertTrue(predicate.matches(1L,matchingStatisticsByColumnIndex));\n  assertTrue(predicate.matches(1L,withoutBloomFilterStatisticsByColumnIndex));\n  assertFalse(predicate.matches(1L,nonMatchingStatisticsByColumnIndex));\n  assertTrue(emptyPredicate.matches(1L,matchingStatisticsByColumnIndex));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertFalse(predicate.matches(1L,nonMatchingStatisticsByColumnIndex));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 304,
    "startColumnNumber" : 20,
    "endLineNumber" : 304,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}