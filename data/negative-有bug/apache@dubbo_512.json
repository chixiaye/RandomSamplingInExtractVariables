{
  "id" : 512,
  "expression" : "normalizedPath",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PathUtils.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "normalizedPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 62,
      "startColumnNumber" : 20,
      "endLineNumber" : 62,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 57
      },
      "nodeContext" : "normalizedPath.indexOf(QUESTION_MASK)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 57
      },
      "nodeContext" : "index=normalizedPath.indexOf(QUESTION_MASK)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int index=normalizedPath.indexOf(QUESTION_MASK);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int index=normalizedPath.indexOf(QUESTION_MASK);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "normalizedPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 64,
      "startColumnNumber" : 29,
      "endLineNumber" : 64,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 64,
        "startColumnNumber" : 29,
        "endLineNumber" : 64,
        "endColumnNumber" : 63
      },
      "nodeContext" : "normalizedPath.substring(0,index)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 63
      },
      "nodeContext" : "normalizedPath=normalizedPath.substring(0,index)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 64
      },
      "nodeContext" : "normalizedPath=normalizedPath.substring(0,index);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 63,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  normalizedPath=normalizedPath.substring(0,index);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (index > -1) {\n  normalizedPath=normalizedPath.substring(0,index);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 64
      },
      "nodeContext" : "normalizedPath=normalizedPath.substring(0,index);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "normalizedPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 67,
      "startColumnNumber" : 15,
      "endLineNumber" : 67,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 67,
        "startColumnNumber" : 15,
        "endLineNumber" : 67,
        "endColumnNumber" : 44
      },
      "nodeContext" : "normalizedPath.contains(\"//\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (normalizedPath.contains(\"//\")) {\n  normalizedPath=replace(normalizedPath,\"//\",\"/\");\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 67,
        "startColumnNumber" : 15,
        "endLineNumber" : 67,
        "endColumnNumber" : 44
      },
      "nodeContext" : "normalizedPath.contains(\"//\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "normalizedPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 68,
      "startColumnNumber" : 37,
      "endLineNumber" : 68,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 68,
        "startColumnNumber" : 29,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "replace(normalizedPath,\"//\",\"/\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "normalizedPath=replace(normalizedPath,\"//\",\"/\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 64
      },
      "nodeContext" : "normalizedPath=replace(normalizedPath,\"//\",\"/\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 67,
        "startColumnNumber" : 46,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  normalizedPath=replace(normalizedPath,\"//\",\"/\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (normalizedPath.contains(\"//\")) {\n  normalizedPath=replace(normalizedPath,\"//\",\"/\");\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 64
      },
      "nodeContext" : "normalizedPath=replace(normalizedPath,\"//\",\"/\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "normalizedPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 71,
      "startColumnNumber" : 15,
      "endLineNumber" : 71,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return normalizedPath;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 426,
        "startLineNumber" : 57,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Normalize path: <ol> <li>To remove query string if presents</li> <li>To remove duplicated slash(\"/\") if exists</li> </ol>\n * @param path path to be normalized\n * @return a normalized path if required\n */\nstatic String normalize(String path){\n  if (isEmpty(path)) {\n    return SLASH;\n  }\n  String normalizedPath=path;\n  int index=normalizedPath.indexOf(QUESTION_MASK);\n  if (index > -1) {\n    normalizedPath=normalizedPath.substring(0,index);\n  }\n  while (normalizedPath.contains(\"//\")) {\n    normalizedPath=replace(normalizedPath,\"//\",\"/\");\n  }\n  return normalizedPath;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return normalizedPath;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 62,
    "startColumnNumber" : 20,
    "endLineNumber" : 62,
    "endColumnNumber" : 34
  }, {
    "charLength" : 14,
    "startLineNumber" : 64,
    "startColumnNumber" : 29,
    "endLineNumber" : 64,
    "endColumnNumber" : 43
  }, {
    "charLength" : 14,
    "startLineNumber" : 67,
    "startColumnNumber" : 15,
    "endLineNumber" : 67,
    "endColumnNumber" : 29
  }, {
    "charLength" : 14,
    "startLineNumber" : 68,
    "startColumnNumber" : 37,
    "endLineNumber" : 68,
    "endColumnNumber" : 51
  }, {
    "charLength" : 14,
    "startLineNumber" : 71,
    "startColumnNumber" : 15,
    "endLineNumber" : 71,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  } ]
}