{
  "id" : 322,
  "expression" : "t2",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "t2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 229,
      "startColumnNumber" : 8,
      "endLineNumber" : 229,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 18
      },
      "nodeContext" : "t2.start()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 19
      },
      "nodeContext" : "t2.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1524,
        "startLineNumber" : 215,
        "startColumnNumber" : 85,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the  waiter that is waiting on availability of more memory is cleaned up when an interruption occurs\n */\n@Test public void testCleanupMemoryAvailabilityWaiterOnInterruption() throws Exception {\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 229,
        "endColumnNumber" : 19
      },
      "nodeContext" : "t2.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  }, {
    "nodeContext" : "t2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 237,
      "startColumnNumber" : 8,
      "endLineNumber" : 237,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 22
      },
      "nodeContext" : "t2.interrupt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 23
      },
      "nodeContext" : "t2.interrupt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1524,
        "startLineNumber" : 215,
        "startColumnNumber" : 85,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the  waiter that is waiting on availability of more memory is cleaned up when an interruption occurs\n */\n@Test public void testCleanupMemoryAvailabilityWaiterOnInterruption() throws Exception {\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 23
      },
      "nodeContext" : "t2.interrupt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  }, {
    "nodeContext" : "t2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 240,
      "startColumnNumber" : 8,
      "endLineNumber" : 240,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 240,
        "endColumnNumber" : 17
      },
      "nodeContext" : "t2.join()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 240,
        "endColumnNumber" : 18
      },
      "nodeContext" : "t2.join();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1524,
        "startLineNumber" : 215,
        "startColumnNumber" : 85,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the  waiter that is waiting on availability of more memory is cleaned up when an interruption occurs\n */\n@Test public void testCleanupMemoryAvailabilityWaiterOnInterruption() throws Exception {\n  BufferPool pool=new BufferPool(2,1,metrics,time,metricGroup);\n  long blockTime=5000;\n  pool.allocate(1,maxBlockTimeMs);\n  Thread t1=new Thread(new BufferPoolAllocator(pool,blockTime));\n  Thread t2=new Thread(new BufferPoolAllocator(pool,blockTime));\n  t1.start();\n  Thread.sleep(500);\n  Deque<Condition> waiters=pool.waiters();\n  Condition c1=waiters.getFirst();\n  t2.start();\n  Thread.sleep(500);\n  t1.interrupt();\n  Thread.sleep(500);\n  Condition c2=waiters.getLast();\n  t2.interrupt();\n  assertNotEquals(c1,c2);\n  t1.join();\n  t2.join();\n  assertEquals(pool.queued(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 240,
        "endColumnNumber" : 18
      },
      "nodeContext" : "t2.join();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 229,
    "startColumnNumber" : 8,
    "endLineNumber" : 229,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 237,
    "startColumnNumber" : 8,
    "endLineNumber" : 237,
    "endColumnNumber" : 10
  }, {
    "charLength" : 2,
    "startLineNumber" : 240,
    "startColumnNumber" : 8,
    "endLineNumber" : 240,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}