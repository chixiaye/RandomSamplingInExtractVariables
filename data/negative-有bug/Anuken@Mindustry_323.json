{
  "id" : 323,
  "expression" : "\"swapdiagonal\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ui/dialogs/SettingsMenuDialog.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"swapdiagonal\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 440,
      "startColumnNumber" : 30,
      "endLineNumber" : 440,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 440,
        "startColumnNumber" : 12,
        "endLineNumber" : 440,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Core.settings.put(\"swapdiagonal\",false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 440,
        "startColumnNumber" : 12,
        "endLineNumber" : 440,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Core.settings.put(\"swapdiagonal\",false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 439,
        "startColumnNumber" : 19,
        "endLineNumber" : 441,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Core.settings.put(\"swapdiagonal\",false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 439,
        "startColumnNumber" : 8,
        "endLineNumber" : 441,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!mobile) {\n  Core.settings.put(\"swapdiagonal\",false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5910,
        "startLineNumber" : 291,
        "startColumnNumber" : 22,
        "endLineNumber" : 444,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  sound.sliderPref(\"musicvol\",bundle.get(\"setting.musicvol.name\",\"Music Volume\"),100,0,100,1,i -> i + \"%\");\n  sound.sliderPref(\"sfxvol\",bundle.get(\"setting.sfxvol.name\",\"SFX Volume\"),100,0,100,1,i -> i + \"%\");\n  sound.sliderPref(\"ambientvol\",bundle.get(\"setting.ambientvol.name\",\"Ambient Volume\"),100,0,100,1,i -> i + \"%\");\n  game.screenshakePref();\n  if (mobile) {\n    game.checkPref(\"autotarget\",true);\n    game.checkPref(\"keyboard\",false,val -> control.setInput(val ? new DesktopInput() : new MobileInput()));\n    if (Core.settings.getBool(\"keyboard\")) {\n      control.setInput(new DesktopInput());\n    }\n  }\n  game.sliderPref(\"saveinterval\",60,10,5 * 120,10,i -> Core.bundle.format(\"setting.seconds\",i));\n  if (!mobile) {\n    game.checkPref(\"crashreport\",true);\n  }\n  game.checkPref(\"savecreate\",true);\n  game.checkPref(\"blockreplace\",true);\n  game.checkPref(\"conveyorpathfinding\",true);\n  game.checkPref(\"hints\",true);\n  game.checkPref(\"logichints\",true);\n  if (!mobile) {\n    game.checkPref(\"backgroundpause\",true);\n    game.checkPref(\"buildautopause\",false);\n  }\n  if (steam) {\n    game.sliderPref(\"playerlimit\",16,2,32,i -> {\n      platform.updateLobby();\n      return i + \"\";\n    }\n);\n    if (!Version.modifier.contains(\"beta\")) {\n      game.checkPref(\"publichost\",false,i -> {\n        platform.updateLobby();\n      }\n);\n    }\n  }\n  graphics.sliderPref(\"uiscale\",100,25,300,25,s -> {\n    if (ui.settings != null) {\n      Core.settings.put(\"uiscalechanged\",true);\n    }\n    return s + \"%\";\n  }\n);\n  graphics.sliderPref(\"fpscap\",240,15,245,5,s -> (s > 240 ? Core.bundle.get(\"setting.fpscap.none\") : Core.bundle.format(\"setting.fpscap.text\",s)));\n  graphics.sliderPref(\"chatopacity\",100,0,100,5,s -> s + \"%\");\n  graphics.sliderPref(\"lasersopacity\",100,0,100,5,s -> {\n    if (ui.settings != null) {\n      Core.settings.put(\"preferredlaseropacity\",s);\n    }\n    return s + \"%\";\n  }\n);\n  graphics.sliderPref(\"bridgeopacity\",100,0,100,5,s -> s + \"%\");\n  if (!mobile) {\n    graphics.checkPref(\"vsync\",true,b -> Core.graphics.setVSync(b));\n    graphics.checkPref(\"fullscreen\",false,b -> {\n      if (b) {\n        Core.graphics.setFullscreenMode(Core.graphics.getDisplayMode());\n      }\n else {\n        Core.graphics.setWindowedMode(Core.graphics.getWidth(),Core.graphics.getHeight());\n      }\n    }\n);\n    graphics.checkPref(\"borderlesswindow\",false,b -> Core.graphics.setUndecorated(b));\n    Core.graphics.setVSync(Core.settings.getBool(\"vsync\"));\n    if (Core.settings.getBool(\"fullscreen\")) {\n      Core.app.post(() -> Core.graphics.setFullscreenMode(Core.graphics.getDisplayMode()));\n    }\n    if (Core.settings.getBool(\"borderlesswindow\")) {\n      Core.app.post(() -> Core.graphics.setUndecorated(true));\n    }\n  }\n else   if (!ios) {\n    graphics.checkPref(\"landscape\",false,b -> {\n      if (b) {\n        platform.beginForceLandscape();\n      }\n else {\n        platform.endForceLandscape();\n      }\n    }\n);\n    if (Core.settings.getBool(\"landscape\")) {\n      platform.beginForceLandscape();\n    }\n  }\n  graphics.checkPref(\"effects\",true);\n  graphics.checkPref(\"atmosphere\",!mobile);\n  graphics.checkPref(\"destroyedblocks\",true);\n  graphics.checkPref(\"blockstatus\",false);\n  graphics.checkPref(\"playerchat\",true);\n  if (!mobile) {\n    graphics.checkPref(\"coreitems\",true);\n  }\n  graphics.checkPref(\"minimap\",!mobile);\n  graphics.checkPref(\"smoothcamera\",true);\n  graphics.checkPref(\"position\",false);\n  graphics.checkPref(\"fps\",false);\n  graphics.checkPref(\"playerindicators\",true);\n  graphics.checkPref(\"indicators\",true);\n  graphics.checkPref(\"showweather\",true);\n  graphics.checkPref(\"animatedwater\",true);\n  if (Shaders.shield != null) {\n    graphics.checkPref(\"animatedshields\",!mobile);\n  }\n  graphics.checkPref(\"bloom\",true,val -> renderer.toggleBloom(val));\n  graphics.checkPref(\"pixelate\",false,val -> {\n    if (val) {\n      Events.fire(Trigger.enablePixelation);\n    }\n  }\n);\n  graphics.checkPref(\"linear\",!mobile,b -> {\n    for (    Texture tex : Core.atlas.getTextures()) {\n      TextureFilter filter=b ? TextureFilter.linear : TextureFilter.nearest;\n      tex.setFilter(filter,filter);\n    }\n  }\n);\n  if (Core.settings.getBool(\"linear\")) {\n    for (    Texture tex : Core.atlas.getTextures()) {\n      TextureFilter filter=TextureFilter.linear;\n      tex.setFilter(filter,filter);\n    }\n  }\n  if (!mobile) {\n    Core.settings.put(\"swapdiagonal\",false);\n  }\n  graphics.checkPref(\"flow\",true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 756,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5928,
        "startLineNumber" : 291,
        "startColumnNumber" : 4,
        "endLineNumber" : 444,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void addSettings(){\n  sound.sliderPref(\"musicvol\",bundle.get(\"setting.musicvol.name\",\"Music Volume\"),100,0,100,1,i -> i + \"%\");\n  sound.sliderPref(\"sfxvol\",bundle.get(\"setting.sfxvol.name\",\"SFX Volume\"),100,0,100,1,i -> i + \"%\");\n  sound.sliderPref(\"ambientvol\",bundle.get(\"setting.ambientvol.name\",\"Ambient Volume\"),100,0,100,1,i -> i + \"%\");\n  game.screenshakePref();\n  if (mobile) {\n    game.checkPref(\"autotarget\",true);\n    game.checkPref(\"keyboard\",false,val -> control.setInput(val ? new DesktopInput() : new MobileInput()));\n    if (Core.settings.getBool(\"keyboard\")) {\n      control.setInput(new DesktopInput());\n    }\n  }\n  game.sliderPref(\"saveinterval\",60,10,5 * 120,10,i -> Core.bundle.format(\"setting.seconds\",i));\n  if (!mobile) {\n    game.checkPref(\"crashreport\",true);\n  }\n  game.checkPref(\"savecreate\",true);\n  game.checkPref(\"blockreplace\",true);\n  game.checkPref(\"conveyorpathfinding\",true);\n  game.checkPref(\"hints\",true);\n  game.checkPref(\"logichints\",true);\n  if (!mobile) {\n    game.checkPref(\"backgroundpause\",true);\n    game.checkPref(\"buildautopause\",false);\n  }\n  if (steam) {\n    game.sliderPref(\"playerlimit\",16,2,32,i -> {\n      platform.updateLobby();\n      return i + \"\";\n    }\n);\n    if (!Version.modifier.contains(\"beta\")) {\n      game.checkPref(\"publichost\",false,i -> {\n        platform.updateLobby();\n      }\n);\n    }\n  }\n  graphics.sliderPref(\"uiscale\",100,25,300,25,s -> {\n    if (ui.settings != null) {\n      Core.settings.put(\"uiscalechanged\",true);\n    }\n    return s + \"%\";\n  }\n);\n  graphics.sliderPref(\"fpscap\",240,15,245,5,s -> (s > 240 ? Core.bundle.get(\"setting.fpscap.none\") : Core.bundle.format(\"setting.fpscap.text\",s)));\n  graphics.sliderPref(\"chatopacity\",100,0,100,5,s -> s + \"%\");\n  graphics.sliderPref(\"lasersopacity\",100,0,100,5,s -> {\n    if (ui.settings != null) {\n      Core.settings.put(\"preferredlaseropacity\",s);\n    }\n    return s + \"%\";\n  }\n);\n  graphics.sliderPref(\"bridgeopacity\",100,0,100,5,s -> s + \"%\");\n  if (!mobile) {\n    graphics.checkPref(\"vsync\",true,b -> Core.graphics.setVSync(b));\n    graphics.checkPref(\"fullscreen\",false,b -> {\n      if (b) {\n        Core.graphics.setFullscreenMode(Core.graphics.getDisplayMode());\n      }\n else {\n        Core.graphics.setWindowedMode(Core.graphics.getWidth(),Core.graphics.getHeight());\n      }\n    }\n);\n    graphics.checkPref(\"borderlesswindow\",false,b -> Core.graphics.setUndecorated(b));\n    Core.graphics.setVSync(Core.settings.getBool(\"vsync\"));\n    if (Core.settings.getBool(\"fullscreen\")) {\n      Core.app.post(() -> Core.graphics.setFullscreenMode(Core.graphics.getDisplayMode()));\n    }\n    if (Core.settings.getBool(\"borderlesswindow\")) {\n      Core.app.post(() -> Core.graphics.setUndecorated(true));\n    }\n  }\n else   if (!ios) {\n    graphics.checkPref(\"landscape\",false,b -> {\n      if (b) {\n        platform.beginForceLandscape();\n      }\n else {\n        platform.endForceLandscape();\n      }\n    }\n);\n    if (Core.settings.getBool(\"landscape\")) {\n      platform.beginForceLandscape();\n    }\n  }\n  graphics.checkPref(\"effects\",true);\n  graphics.checkPref(\"atmosphere\",!mobile);\n  graphics.checkPref(\"destroyedblocks\",true);\n  graphics.checkPref(\"blockstatus\",false);\n  graphics.checkPref(\"playerchat\",true);\n  if (!mobile) {\n    graphics.checkPref(\"coreitems\",true);\n  }\n  graphics.checkPref(\"minimap\",!mobile);\n  graphics.checkPref(\"smoothcamera\",true);\n  graphics.checkPref(\"position\",false);\n  graphics.checkPref(\"fps\",false);\n  graphics.checkPref(\"playerindicators\",true);\n  graphics.checkPref(\"indicators\",true);\n  graphics.checkPref(\"showweather\",true);\n  graphics.checkPref(\"animatedwater\",true);\n  if (Shaders.shield != null) {\n    graphics.checkPref(\"animatedshields\",!mobile);\n  }\n  graphics.checkPref(\"bloom\",true,val -> renderer.toggleBloom(val));\n  graphics.checkPref(\"pixelate\",false,val -> {\n    if (val) {\n      Events.fire(Trigger.enablePixelation);\n    }\n  }\n);\n  graphics.checkPref(\"linear\",!mobile,b -> {\n    for (    Texture tex : Core.atlas.getTextures()) {\n      TextureFilter filter=b ? TextureFilter.linear : TextureFilter.nearest;\n      tex.setFilter(filter,filter);\n    }\n  }\n);\n  if (Core.settings.getBool(\"linear\")) {\n    for (    Texture tex : Core.atlas.getTextures()) {\n      TextureFilter filter=TextureFilter.linear;\n      tex.setFilter(filter,filter);\n    }\n  }\n  if (!mobile) {\n    Core.settings.put(\"swapdiagonal\",false);\n  }\n  graphics.checkPref(\"flow\",true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 759,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 440,
        "startColumnNumber" : 12,
        "endLineNumber" : 440,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Core.settings.put(\"swapdiagonal\",false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 440,
    "startColumnNumber" : 30,
    "endLineNumber" : 440,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}