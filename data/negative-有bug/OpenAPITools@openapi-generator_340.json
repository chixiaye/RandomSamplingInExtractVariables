{
  "id" : 340,
  "expression" : "issuer",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/server/petstore/java-play-framework-api-package-override/app/openapitools/SecurityAPIUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "issuer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 126,
      "startColumnNumber" : 36,
      "endLineNumber" : 126,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 125,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 43
      },
      "nodeContext" : "JWT.require(algorithm).withIssuer(issuer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 125,
        "startColumnNumber" : 32,
        "endLineNumber" : 127,
        "endColumnNumber" : 32
      },
      "nodeContext" : "JWT.require(algorithm).withIssuer(issuer).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 32
      },
      "nodeContext" : "tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 33
      },
      "nodeContext" : "tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 823,
        "startLineNumber" : 112,
        "startColumnNumber" : 43,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (securityMethodName == null) {\n    securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n  }\n  Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n  final PublicKey publicKey=jwk.getPublicKey();\n  if (!(publicKey instanceof RSAPublicKey)) {\n    throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n  }\n  Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n  tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n  tokenKeyId=keyId;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 854,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!tokenKeyId.equals(keyId)) {\n  if (securityMethodName == null) {\n    securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n  }\n  Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n  final PublicKey publicKey=jwk.getPublicKey();\n  if (!(publicKey instanceof RSAPublicKey)) {\n    throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n  }\n  Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n  tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n  tokenKeyId=keyId;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1119,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DecodedJWT jwt=JWT.decode(bearerToken);\n  String issuer=jwt.getIssuer();\n  String keyId=jwt.getKeyId();\n  if (!tokenKeyId.equals(keyId)) {\n    if (securityMethodName == null) {\n      securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n    }\n    Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n    final PublicKey publicKey=jwk.getPublicKey();\n    if (!(publicKey instanceof RSAPublicKey)) {\n      throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n    }\n    Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n    tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n    tokenKeyId=keyId;\n  }\n  DecodedJWT verifiedJWT=tokenVerifier.verify(bearerToken);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DecodedJWT jwt=JWT.decode(bearerToken);\n  String issuer=jwt.getIssuer();\n  String keyId=jwt.getKeyId();\n  if (!tokenKeyId.equals(keyId)) {\n    if (securityMethodName == null) {\n      securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n    }\n    Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n    final PublicKey publicKey=jwk.getPublicKey();\n    if (!(publicKey instanceof RSAPublicKey)) {\n      throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n    }\n    Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n    tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n    tokenKeyId=keyId;\n  }\n  DecodedJWT verifiedJWT=tokenVerifier.verify(bearerToken);\n  return true;\n}\n catch (Exception exception) {\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 145,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1205,
        "startLineNumber" : 107,
        "startColumnNumber" : 93,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    DecodedJWT jwt=JWT.decode(bearerToken);\n    String issuer=jwt.getIssuer();\n    String keyId=jwt.getKeyId();\n    if (!tokenKeyId.equals(keyId)) {\n      if (securityMethodName == null) {\n        securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n      }\n      Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n      final PublicKey publicKey=jwk.getPublicKey();\n      if (!(publicKey instanceof RSAPublicKey)) {\n        throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n      }\n      Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n      tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n      tokenKeyId=keyId;\n    }\n    DecodedJWT verifiedJWT=tokenVerifier.verify(bearerToken);\n    return true;\n  }\n catch (  Exception exception) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1294,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean isTokenValidByOfflineCheck(String bearerToken,String securityMethodName){\n  try {\n    DecodedJWT jwt=JWT.decode(bearerToken);\n    String issuer=jwt.getIssuer();\n    String keyId=jwt.getKeyId();\n    if (!tokenKeyId.equals(keyId)) {\n      if (securityMethodName == null) {\n        securityMethodName=jwksEndpoints.keySet().stream().findFirst().get();\n      }\n      Jwk jwk=new UrlJwkProvider(new URL(this.jwksEndpoints.get(securityMethodName))).get(keyId);\n      final PublicKey publicKey=jwk.getPublicKey();\n      if (!(publicKey instanceof RSAPublicKey)) {\n        throw new IllegalArgumentException(String.format(\"Key with ID %s was found in JWKS but is not a RSA-key.\",keyId));\n      }\n      Algorithm algorithm=Algorithm.RSA256((RSAPublicKey)publicKey,null);\n      tokenVerifier=JWT.require(algorithm).withIssuer(issuer).build();\n      tokenKeyId=keyId;\n    }\n    DecodedJWT verifiedJWT=tokenVerifier.verify(bearerToken);\n    return true;\n  }\n catch (  Exception exception) {\n    return false;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 125,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 43
      },
      "nodeContext" : "JWT.require(algorithm).withIssuer(issuer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 126,
    "startColumnNumber" : 36,
    "endLineNumber" : 126,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}