{
  "id" : 370,
  "expression" : "sqlSessionFactory",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/cache/page/PageCacheTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlSessionFactory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 29,
      "startColumnNumber" : 22,
      "endLineNumber" : 29,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 29,
        "startColumnNumber" : 22,
        "endLineNumber" : 29,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sqlSessionFactory.getConfiguration()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 29,
        "startColumnNumber" : 22,
        "endLineNumber" : 29,
        "endColumnNumber" : 100
      },
      "nodeContext" : "sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 29,
        "startColumnNumber" : 14,
        "endLineNumber" : 29,
        "endColumnNumber" : 100
      },
      "nodeContext" : "cache=sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Cache cache=sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2307,
        "startLineNumber" : 28,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Cache cache=sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName());\n  assertThat(cache).as(\"使用 @CacheNamespace 指定了使用缓存\").isNotNull();\n  final long total=5;\n  final long size=3;\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).as(\"对象是同一个\").isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"一条count缓存一条分页缓存\").isEqualTo(2);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"因为命中缓存了所以还是2条\").isEqualTo(2);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    page.addOrder(OrderItem.asc(\"id\"));\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"条件不一样了,缓存变为3条\").isEqualTo(3);\n  doTestAutoCommit(m -> m.insert(new PageCache()));\n  assertThat(cache.getSize()).as(\"update 操作清除了所有缓存\").isEqualTo(0);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total + 1);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"一条count缓存一条分页缓存\").isEqualTo(2);\n  doTest(i -> {\n    Page<?> page=new Page<>(1,size);\n    page.setCountId(\"otherCount\");\n    i.otherPage(page,new Tj());\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2330,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test void page(){\n  Cache cache=sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName());\n  assertThat(cache).as(\"使用 @CacheNamespace 指定了使用缓存\").isNotNull();\n  final long total=5;\n  final long size=3;\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).as(\"对象是同一个\").isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"一条count缓存一条分页缓存\").isEqualTo(2);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"因为命中缓存了所以还是2条\").isEqualTo(2);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    page.addOrder(OrderItem.asc(\"id\"));\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"条件不一样了,缓存变为3条\").isEqualTo(3);\n  doTestAutoCommit(m -> m.insert(new PageCache()));\n  assertThat(cache.getSize()).as(\"update 操作清除了所有缓存\").isEqualTo(0);\n  doTestAutoCommit(m -> {\n    Page<PageCache> page=new Page<>(1,size);\n    IPage<PageCache> result=m.selectPage(page,null);\n    assertThat(page).isEqualTo(result);\n    assertThat(result.getTotal()).isEqualTo(total + 1);\n    assertThat(result.getRecords().size()).isEqualTo(size);\n  }\n);\n  assertThat(cache.getSize()).as(\"一条count缓存一条分页缓存\").isEqualTo(2);\n  doTest(i -> {\n    Page<?> page=new Page<>(1,size);\n    page.setCountId(\"otherCount\");\n    i.otherPage(page,new Tj());\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 101
      },
      "nodeContext" : "Cache cache=sqlSessionFactory.getConfiguration().getCache(PageCacheMapper.class.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 29,
    "startColumnNumber" : 22,
    "endLineNumber" : 29,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}