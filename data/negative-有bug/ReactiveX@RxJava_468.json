{
  "id" : 468,
  "expression" : "Long.class",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableSampleTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Long.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 78,
      "startColumnNumber" : 45,
      "endLineNumber" : 78,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 78,
        "startColumnNumber" : 41,
        "endLineNumber" : 78,
        "endColumnNumber" : 56
      },
      "nodeContext" : "any(Long.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 57
      },
      "nodeContext" : "verify(observer,never()).onNext(any(Long.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 58
      },
      "nodeContext" : "verify(observer,never()).onNext(any(Long.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2574,
        "startLineNumber" : 46,
        "startColumnNumber" : 29,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<Long> source=Flowable.create(new Publisher<Long>(){\n    @Override public void subscribe(    final Subscriber<? super Long> observer1){\n      observer1.onSubscribe(new BooleanSubscription());\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onNext(1L);\n        }\n      }\n,1,TimeUnit.SECONDS);\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onNext(2L);\n        }\n      }\n,2,TimeUnit.SECONDS);\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onComplete();\n        }\n      }\n,3,TimeUnit.SECONDS);\n    }\n  }\n);\n  Flowable<Long> sampled=source.sample(400L,TimeUnit.MILLISECONDS,scheduler);\n  sampled.subscribe(observer);\n  InOrder inOrder=inOrder(observer);\n  scheduler.advanceTimeTo(800L,TimeUnit.MILLISECONDS);\n  verify(observer,never()).onNext(any(Long.class));\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(1200L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,times(1)).onNext(1L);\n  verify(observer,never()).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(1600L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  verify(observer,never()).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(2000L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  inOrder.verify(observer,times(1)).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(3000L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  inOrder.verify(observer,never()).onNext(2L);\n  verify(observer,times(1)).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2610,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSample(){\n  Flowable<Long> source=Flowable.create(new Publisher<Long>(){\n    @Override public void subscribe(    final Subscriber<? super Long> observer1){\n      observer1.onSubscribe(new BooleanSubscription());\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onNext(1L);\n        }\n      }\n,1,TimeUnit.SECONDS);\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onNext(2L);\n        }\n      }\n,2,TimeUnit.SECONDS);\n      innerScheduler.schedule(new Runnable(){\n        @Override public void run(){\n          observer1.onComplete();\n        }\n      }\n,3,TimeUnit.SECONDS);\n    }\n  }\n);\n  Flowable<Long> sampled=source.sample(400L,TimeUnit.MILLISECONDS,scheduler);\n  sampled.subscribe(observer);\n  InOrder inOrder=inOrder(observer);\n  scheduler.advanceTimeTo(800L,TimeUnit.MILLISECONDS);\n  verify(observer,never()).onNext(any(Long.class));\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(1200L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,times(1)).onNext(1L);\n  verify(observer,never()).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(1600L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  verify(observer,never()).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(2000L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  inOrder.verify(observer,times(1)).onNext(2L);\n  verify(observer,never()).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n  scheduler.advanceTimeTo(3000L,TimeUnit.MILLISECONDS);\n  inOrder.verify(observer,never()).onNext(1L);\n  inOrder.verify(observer,never()).onNext(2L);\n  verify(observer,times(1)).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 58
      },
      "nodeContext" : "verify(observer,never()).onNext(any(Long.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 78,
    "startColumnNumber" : 45,
    "endLineNumber" : 78,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}