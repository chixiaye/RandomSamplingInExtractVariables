{
  "id" : 160,
  "expression" : "Mathf",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ai/formations/patterns/SquareFormation.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mathf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 12,
      "startColumnNumber" : 19,
      "endLineNumber" : 12,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 12,
        "startColumnNumber" : 19,
        "endLineNumber" : 12,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Mathf.ceil(Mathf.sqrt(slots + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 12,
        "startColumnNumber" : 12,
        "endLineNumber" : 12,
        "endColumnNumber" : 52
      },
      "nodeContext" : "side=Mathf.ceil(Mathf.sqrt(slots + 1))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mathf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 12,
      "startColumnNumber" : 30,
      "endLineNumber" : 12,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 12,
        "startColumnNumber" : 30,
        "endLineNumber" : 12,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Mathf.sqrt(slots + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 12,
        "startColumnNumber" : 19,
        "endLineNumber" : 12,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Mathf.ceil(Mathf.sqrt(slots + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 12,
        "startColumnNumber" : 12,
        "endLineNumber" : 12,
        "endColumnNumber" : 52
      },
      "nodeContext" : "side=Mathf.ceil(Mathf.sqrt(slots + 1))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 10,
        "startColumnNumber" : 57,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 24,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Vec3 calculateSlotLocation(Vec3 out,int slot){\n  int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n  int cx=slot % side, cy=slot / side;\n  if (cx == side / 2 && cy == side / 2 && (side % 2) == 1) {\n    slot=slots;\n    cx=slot % side;\n    cy=slot / side;\n  }\n  return out.set(cx - (side / 2f - 0.5f),cy - (side / 2f - 0.5f),0).scl(spacing);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int side=Mathf.ceil(Mathf.sqrt(slots + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 12,
    "startColumnNumber" : 19,
    "endLineNumber" : 12,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 12,
    "startColumnNumber" : 30,
    "endLineNumber" : 12,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}