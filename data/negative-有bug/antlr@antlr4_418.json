{
  "id" : 418,
  "expression" : "index < p && Character.isWhitespace(actionText.charAt(index))",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/parse/ScopeParser.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index < p && Character.isWhitespace(actionText.charAt(index))",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 61,
      "startLineNumber" : 327,
      "startColumnNumber" : 13,
      "endLineNumber" : 327,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 327,
        "startColumnNumber" : 6,
        "endLineNumber" : 329,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n  index++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 324,
        "startColumnNumber" : 49,
        "endLineNumber" : 333,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  String arg=actionText.substring(last,p);\n  int index=last;\n  while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n    index++;\n  }\n  args.add(new Pair<String,Integer>(arg.trim(),index));\n  last=p + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 324,
        "startColumnNumber" : 5,
        "endLineNumber" : 333,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (c == separatorChar && targetChar == -1) {\n  String arg=actionText.substring(last,p);\n  int index=last;\n  while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n    index++;\n  }\n  args.add(new Pair<String,Integer>(arg.trim(),index));\n  last=p + 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1620,
        "startLineNumber" : 281,
        "startColumnNumber" : 3,
        "endLineNumber" : 336,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (c) {\ncase '\\'':  p++;\nwhile (p < n && actionText.charAt(p) != '\\'') {\n  if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n    p++;\n  }\n  p++;\n}\np++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1665,
        "startLineNumber" : 279,
        "startColumnNumber" : 54,
        "endLineNumber" : 337,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':    p++;\n  while (p < n && actionText.charAt(p) != '\\'') {\n    if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n      p++;\n    }\n    p++;\n  }\np++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 279,
        "startColumnNumber" : 2,
        "endLineNumber" : 337,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (p < n && actionText.charAt(p) != targetChar) {\n  int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':    p++;\n  while (p < n && actionText.charAt(p) != '\\'') {\n    if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n      p++;\n    }\n    p++;\n  }\np++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 267,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2371,
        "startLineNumber" : 269,
        "startColumnNumber" : 72,
        "endLineNumber" : 351,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (actionText == null) {\n    return -1;\n  }\n  actionText=actionText.replaceAll(\"//[^\\\\n]*\",\"\");\n  int n=actionText.length();\n  int p=start;\n  int last=p;\n  while (p < n && actionText.charAt(p) != targetChar) {\n    int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':      p++;\n    while (p < n && actionText.charAt(p) != '\\'') {\n      if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n        p++;\n      }\n      p++;\n    }\n  p++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\nif (targetChar == -1 && p <= n) {\nString arg=actionText.substring(last,p).trim();\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nif (arg.length() > 0) {\nargs.add(new Pair<String,Integer>(arg.trim(),index));\n}\n}\np++;\nreturn p;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2663,
        "startLineNumber" : 265,
        "startColumnNumber" : 1,
        "endLineNumber" : 351,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static int _splitArgumentList(String actionText,int start,int targetChar,int separatorChar,List<Pair<String,Integer>> args){\n  if (actionText == null) {\n    return -1;\n  }\n  actionText=actionText.replaceAll(\"//[^\\\\n]*\",\"\");\n  int n=actionText.length();\n  int p=start;\n  int last=p;\n  while (p < n && actionText.charAt(p) != targetChar) {\n    int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':      p++;\n    while (p < n && actionText.charAt(p) != '\\'') {\n      if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n        p++;\n      }\n      p++;\n    }\n  p++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\nif (targetChar == -1 && p <= n) {\nString arg=actionText.substring(last,p).trim();\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nif (arg.length() > 0) {\nargs.add(new Pair<String,Integer>(arg.trim(),index));\n}\n}\np++;\nreturn p;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 402,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 327,
        "startColumnNumber" : 6,
        "endLineNumber" : 329,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n  index++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "boolean"
  }, {
    "nodeContext" : "index < p && Character.isWhitespace(actionText.charAt(index))",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 61,
      "startLineNumber" : 341,
      "startColumnNumber" : 10,
      "endLineNumber" : 341,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 341,
        "startColumnNumber" : 3,
        "endLineNumber" : 343,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n  index++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 338,
        "startColumnNumber" : 34,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String arg=actionText.substring(last,p).trim();\n  int index=last;\n  while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n    index++;\n  }\n  if (arg.length() > 0) {\n    args.add(new Pair<String,Integer>(arg.trim(),index));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 338,
        "startColumnNumber" : 2,
        "endLineNumber" : 348,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (targetChar == -1 && p <= n) {\n  String arg=actionText.substring(last,p).trim();\n  int index=last;\n  while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n    index++;\n  }\n  if (arg.length() > 0) {\n    args.add(new Pair<String,Integer>(arg.trim(),index));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2371,
        "startLineNumber" : 269,
        "startColumnNumber" : 72,
        "endLineNumber" : 351,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (actionText == null) {\n    return -1;\n  }\n  actionText=actionText.replaceAll(\"//[^\\\\n]*\",\"\");\n  int n=actionText.length();\n  int p=start;\n  int last=p;\n  while (p < n && actionText.charAt(p) != targetChar) {\n    int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':      p++;\n    while (p < n && actionText.charAt(p) != '\\'') {\n      if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n        p++;\n      }\n      p++;\n    }\n  p++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\nif (targetChar == -1 && p <= n) {\nString arg=actionText.substring(last,p).trim();\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nif (arg.length() > 0) {\nargs.add(new Pair<String,Integer>(arg.trim(),index));\n}\n}\np++;\nreturn p;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2663,
        "startLineNumber" : 265,
        "startColumnNumber" : 1,
        "endLineNumber" : 351,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static int _splitArgumentList(String actionText,int start,int targetChar,int separatorChar,List<Pair<String,Integer>> args){\n  if (actionText == null) {\n    return -1;\n  }\n  actionText=actionText.replaceAll(\"//[^\\\\n]*\",\"\");\n  int n=actionText.length();\n  int p=start;\n  int last=p;\n  while (p < n && actionText.charAt(p) != targetChar) {\n    int c=actionText.charAt(p);\nswitch (c) {\ncase '\\'':      p++;\n    while (p < n && actionText.charAt(p) != '\\'') {\n      if (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\'') {\n        p++;\n      }\n      p++;\n    }\n  p++;\nbreak;\ncase '\"':p++;\nwhile (p < n && actionText.charAt(p) != '\\\"') {\nif (actionText.charAt(p) == '\\\\' && (p + 1) < n && actionText.charAt(p + 1) == '\\\"') {\np++;\n}\np++;\n}\np++;\nbreak;\ncase '(':p=_splitArgumentList(actionText,p + 1,')',separatorChar,args);\nbreak;\ncase '{':p=_splitArgumentList(actionText,p + 1,'}',separatorChar,args);\nbreak;\ncase '<':if (actionText.indexOf('>',p + 1) >= p) {\np=_splitArgumentList(actionText,p + 1,'>',separatorChar,args);\n}\n else {\np++;\n}\nbreak;\ncase '[':p=_splitArgumentList(actionText,p + 1,']',separatorChar,args);\nbreak;\ndefault:if (c == separatorChar && targetChar == -1) {\nString arg=actionText.substring(last,p);\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nargs.add(new Pair<String,Integer>(arg.trim(),index));\nlast=p + 1;\n}\np++;\nbreak;\n}\n}\nif (targetChar == -1 && p <= n) {\nString arg=actionText.substring(last,p).trim();\nint index=last;\nwhile (index < p && Character.isWhitespace(actionText.charAt(index))) {\nindex++;\n}\nif (arg.length() > 0) {\nargs.add(new Pair<String,Integer>(arg.trim(),index));\n}\n}\np++;\nreturn p;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 402,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 341,
        "startColumnNumber" : 3,
        "endLineNumber" : 343,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (index < p && Character.isWhitespace(actionText.charAt(index))) {\n  index++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 61,
    "startLineNumber" : 327,
    "startColumnNumber" : 13,
    "endLineNumber" : 327,
    "endColumnNumber" : 74
  }, {
    "charLength" : 61,
    "startLineNumber" : 341,
    "startColumnNumber" : 10,
    "endLineNumber" : 341,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}