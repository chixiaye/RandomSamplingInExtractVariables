{
  "id" : 11,
  "expression" : "\"new ObjectMap<>()\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/impl/AssetsProcess.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"new ObjectMap<>()\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 53,
      "startColumnNumber" : 87,
      "endLineNumber" : 53,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 107
      },
      "nodeContext" : "FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 115
      },
      "nodeContext" : "FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\").build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 116
      },
      "nodeContext" : "ictype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\").build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ictype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\").build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5112,
        "startLineNumber" : 28,
        "startColumnNumber" : 68,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeSpec.Builder type=TypeSpec.classBuilder(\"Tex\").addModifiers(Modifier.PUBLIC);\n  TypeSpec.Builder ictype=TypeSpec.classBuilder(\"Icon\").addModifiers(Modifier.PUBLIC);\n  TypeSpec.Builder ichtype=TypeSpec.classBuilder(\"Iconc\").addModifiers(Modifier.PUBLIC);\n  MethodSpec.Builder load=MethodSpec.methodBuilder(\"load\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  MethodSpec.Builder loadStyles=MethodSpec.methodBuilder(\"loadStyles\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  MethodSpec.Builder icload=MethodSpec.methodBuilder(\"load\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  CodeBlock.Builder ichinit=CodeBlock.builder();\n  String resources=rootDirectory + \"/core/assets-raw/sprites/ui\";\n  Jval icons=Jval.read(Fi.get(rootDirectory + \"/core/assets-raw/fontgen/config.json\").readString());\n  ObjectMap<String,String> texIcons=new OrderedMap<>();\n  PropertiesUtils.load(texIcons,Fi.get(rootDirectory + \"/core/assets/icons/icons.properties\").reader());\n  StringBuilder iconcAll=new StringBuilder();\n  texIcons.each((key,val) -> {\n    String[] split=val.split(\"\\\\|\");\n    String name=Strings.kebabToCamel(split[1]).replace(\"Medium\",\"\").replace(\"Icon\",\"\");\n    if (SourceVersion.isKeyword(name) || name.equals(\"char\"))     name+=\"i\";\n    ichtype.addField(FieldSpec.builder(char.class,name,Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addJavadoc(String.format(\"\\\\u%04x\",Integer.parseInt(key))).initializer(\"'\" + ((char)Integer.parseInt(key)) + \"'\").build());\n  }\n);\n  ictype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\").build());\n  ichtype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectIntMap.class,String.class),\"codes\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectIntMap<>()\").build());\n  ObjectSet<String> used=new ObjectSet<>();\n  for (  Jval val : icons.get(\"glyphs\").asArray()) {\n    String name=capitalize(val.getString(\"css\",\"\"));\n    if (!val.getBool(\"selected\",true) || !used.add(name))     continue;\n    int code=val.getInt(\"code\",0);\n    iconcAll.append((char)code);\n    ichtype.addField(FieldSpec.builder(char.class,name,Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addJavadoc(String.format(\"\\\\u%04x\",code)).initializer(\"'\" + ((char)code) + \"'\").build());\n    ichinit.addStatement(\"codes.put($S, $L)\",name,code);\n    ictype.addField(TextureRegionDrawable.class,name + \"Small\",Modifier.PUBLIC,Modifier.STATIC);\n    icload.addStatement(name + \"Small = mindustry.ui.Fonts.getGlyph(mindustry.ui.Fonts.def, (char)\" + code+ \")\");\n    ictype.addField(TextureRegionDrawable.class,name,Modifier.PUBLIC,Modifier.STATIC);\n    icload.addStatement(name + \" = mindustry.ui.Fonts.getGlyph(mindustry.ui.Fonts.icon, (char)\" + code+ \")\");\n    icload.addStatement(\"icons.put($S, \" + name + \")\",name);\n    icload.addStatement(\"icons.put($S, \" + name + \"Small)\",name + \"Small\");\n  }\n  ichtype.addField(FieldSpec.builder(String.class,\"all\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"$S\",iconcAll.toString()).build());\n  ichtype.addStaticBlock(ichinit.build());\n  Fi.get(resources).walk(p -> {\n    if (!p.extEquals(\"png\"))     return;\n    String filename=p.name();\n    filename=filename.substring(0,filename.indexOf(\".\"));\n    String sfilen=filename;\n    String dtype=p.name().endsWith(\".9.png\") ? \"arc.scene.style.NinePatchDrawable\" : \"arc.scene.style.TextureRegionDrawable\";\n    String varname=capitalize(sfilen);\n    if (SourceVersion.isKeyword(varname))     varname+=\"s\";\n    type.addField(ClassName.bestGuess(dtype),varname,Modifier.STATIC,Modifier.PUBLIC);\n    load.addStatement(varname + \" = (\" + dtype+ \")arc.Core.atlas.drawable($S)\",sfilen);\n  }\n);\n  for (  Element elem : elements) {\n    Seq.with(((TypeElement)elem).getEnclosedElements()).each(e -> e.getKind() == ElementKind.FIELD,field -> {\n      String fname=field.getSimpleName().toString();\n      if (fname.startsWith(\"default\")) {\n        loadStyles.addStatement(\"arc.Core.scene.addStyle(\" + field.asType().toString() + \".class, mindustry.ui.Styles.\"+ fname+ \")\");\n      }\n    }\n);\n  }\n  ictype.addMethod(icload.build());\n  JavaFile.builder(packageName,ichtype.build()).build().writeTo(BaseProcessor.filer);\n  JavaFile.builder(packageName,ictype.build()).build().writeTo(BaseProcessor.filer);\n  type.addMethod(load.build());\n  type.addMethod(loadStyles.build());\n  JavaFile.builder(packageName,type.build()).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 779,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5176,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void processUI(Set<? extends Element> elements) throws Exception {\n  TypeSpec.Builder type=TypeSpec.classBuilder(\"Tex\").addModifiers(Modifier.PUBLIC);\n  TypeSpec.Builder ictype=TypeSpec.classBuilder(\"Icon\").addModifiers(Modifier.PUBLIC);\n  TypeSpec.Builder ichtype=TypeSpec.classBuilder(\"Iconc\").addModifiers(Modifier.PUBLIC);\n  MethodSpec.Builder load=MethodSpec.methodBuilder(\"load\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  MethodSpec.Builder loadStyles=MethodSpec.methodBuilder(\"loadStyles\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  MethodSpec.Builder icload=MethodSpec.methodBuilder(\"load\").addModifiers(Modifier.PUBLIC,Modifier.STATIC);\n  CodeBlock.Builder ichinit=CodeBlock.builder();\n  String resources=rootDirectory + \"/core/assets-raw/sprites/ui\";\n  Jval icons=Jval.read(Fi.get(rootDirectory + \"/core/assets-raw/fontgen/config.json\").readString());\n  ObjectMap<String,String> texIcons=new OrderedMap<>();\n  PropertiesUtils.load(texIcons,Fi.get(rootDirectory + \"/core/assets/icons/icons.properties\").reader());\n  StringBuilder iconcAll=new StringBuilder();\n  texIcons.each((key,val) -> {\n    String[] split=val.split(\"\\\\|\");\n    String name=Strings.kebabToCamel(split[1]).replace(\"Medium\",\"\").replace(\"Icon\",\"\");\n    if (SourceVersion.isKeyword(name) || name.equals(\"char\"))     name+=\"i\";\n    ichtype.addField(FieldSpec.builder(char.class,name,Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addJavadoc(String.format(\"\\\\u%04x\",Integer.parseInt(key))).initializer(\"'\" + ((char)Integer.parseInt(key)) + \"'\").build());\n  }\n);\n  ictype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\").build());\n  ichtype.addField(FieldSpec.builder(ParameterizedTypeName.get(ObjectIntMap.class,String.class),\"codes\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectIntMap<>()\").build());\n  ObjectSet<String> used=new ObjectSet<>();\n  for (  Jval val : icons.get(\"glyphs\").asArray()) {\n    String name=capitalize(val.getString(\"css\",\"\"));\n    if (!val.getBool(\"selected\",true) || !used.add(name))     continue;\n    int code=val.getInt(\"code\",0);\n    iconcAll.append((char)code);\n    ichtype.addField(FieldSpec.builder(char.class,name,Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).addJavadoc(String.format(\"\\\\u%04x\",code)).initializer(\"'\" + ((char)code) + \"'\").build());\n    ichinit.addStatement(\"codes.put($S, $L)\",name,code);\n    ictype.addField(TextureRegionDrawable.class,name + \"Small\",Modifier.PUBLIC,Modifier.STATIC);\n    icload.addStatement(name + \"Small = mindustry.ui.Fonts.getGlyph(mindustry.ui.Fonts.def, (char)\" + code+ \")\");\n    ictype.addField(TextureRegionDrawable.class,name,Modifier.PUBLIC,Modifier.STATIC);\n    icload.addStatement(name + \" = mindustry.ui.Fonts.getGlyph(mindustry.ui.Fonts.icon, (char)\" + code+ \")\");\n    icload.addStatement(\"icons.put($S, \" + name + \")\",name);\n    icload.addStatement(\"icons.put($S, \" + name + \"Small)\",name + \"Small\");\n  }\n  ichtype.addField(FieldSpec.builder(String.class,\"all\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"$S\",iconcAll.toString()).build());\n  ichtype.addStaticBlock(ichinit.build());\n  Fi.get(resources).walk(p -> {\n    if (!p.extEquals(\"png\"))     return;\n    String filename=p.name();\n    filename=filename.substring(0,filename.indexOf(\".\"));\n    String sfilen=filename;\n    String dtype=p.name().endsWith(\".9.png\") ? \"arc.scene.style.NinePatchDrawable\" : \"arc.scene.style.TextureRegionDrawable\";\n    String varname=capitalize(sfilen);\n    if (SourceVersion.isKeyword(varname))     varname+=\"s\";\n    type.addField(ClassName.bestGuess(dtype),varname,Modifier.STATIC,Modifier.PUBLIC);\n    load.addStatement(varname + \" = (\" + dtype+ \")arc.Core.atlas.drawable($S)\",sfilen);\n  }\n);\n  for (  Element elem : elements) {\n    Seq.with(((TypeElement)elem).getEnclosedElements()).each(e -> e.getKind() == ElementKind.FIELD,field -> {\n      String fname=field.getSimpleName().toString();\n      if (fname.startsWith(\"default\")) {\n        loadStyles.addStatement(\"arc.Core.scene.addStyle(\" + field.asType().toString() + \".class, mindustry.ui.Styles.\"+ fname+ \")\");\n      }\n    }\n);\n  }\n  ictype.addMethod(icload.build());\n  JavaFile.builder(packageName,ichtype.build()).build().writeTo(BaseProcessor.filer);\n  JavaFile.builder(packageName,ictype.build()).build().writeTo(BaseProcessor.filer);\n  type.addMethod(load.build());\n  type.addMethod(loadStyles.build());\n  JavaFile.builder(packageName,type.build()).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 792,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 53,
        "endColumnNumber" : 107
      },
      "nodeContext" : "FieldSpec.builder(ParameterizedTypeName.get(ObjectMap.class,String.class,TextureRegionDrawable.class),\"icons\",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(\"new ObjectMap<>()\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 53,
    "startColumnNumber" : 87,
    "endLineNumber" : 53,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}