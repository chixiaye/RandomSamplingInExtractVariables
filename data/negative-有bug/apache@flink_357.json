{
  "id" : 357,
  "expression" : "FIELD_NAME_TYPE_NAME",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-sql-gateway/src/main/java/org/apache/flink/table/gateway/rest/serde/LogicalTypeJsonSerializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "FIELD_NAME_TYPE_NAME",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 108,
      "startColumnNumber" : 39,
      "endLineNumber" : 108,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 94
      },
      "nodeContext" : "jsonGenerator.writeStringField(FIELD_NAME_TYPE_NAME,logicalType.getTypeRoot().name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 95
      },
      "nodeContext" : "jsonGenerator.writeStringField(FIELD_NAME_TYPE_NAME,logicalType.getTypeRoot().name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3295,
        "startLineNumber" : 104,
        "startColumnNumber" : 31,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  jsonGenerator.writeStartObject();\n  jsonGenerator.writeStringField(FIELD_NAME_TYPE_NAME,logicalType.getTypeRoot().name());\n  if (logicalType instanceof NullType) {\n    jsonGenerator.writeEndObject();\n    return;\n  }\n  jsonGenerator.writeBooleanField(FIELD_NAME_NULLABLE,logicalType.isNullable());\nswitch (logicalType.getTypeRoot()) {\ncase BOOLEAN:case TINYINT:case SMALLINT:case INTEGER:case BIGINT:case FLOAT:case DOUBLE:case DATE:    break;\ncase CHAR:  jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((CharType)logicalType).getLength());\nbreak;\ncase VARCHAR:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((VarCharType)logicalType).getLength());\nbreak;\ncase BINARY:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((BinaryType)logicalType).getLength());\nbreak;\ncase VARBINARY:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((VarBinaryType)logicalType).getLength());\nbreak;\ncase DECIMAL:jsonGenerator.writeNumberField(FIELD_NAME_PRECISION,((DecimalType)logicalType).getPrecision());\njsonGenerator.writeNumberField(FIELD_NAME_SCALE,((DecimalType)logicalType).getScale());\nbreak;\ncase TIME_WITHOUT_TIME_ZONE:case TIMESTAMP_WITHOUT_TIME_ZONE:case TIMESTAMP_WITH_TIME_ZONE:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:serializeTime(logicalType,jsonGenerator);\nbreak;\ncase MAP:serializeMap((MapType)logicalType,jsonGenerator);\nbreak;\ncase ARRAY:serializeCollection(((ArrayType)logicalType).getElementType(),jsonGenerator);\nbreak;\ncase MULTISET:serializeCollection(((MultisetType)logicalType).getElementType(),jsonGenerator);\nbreak;\ncase ROW:serializeRow((RowType)logicalType,jsonGenerator);\nbreak;\ncase RAW:if (logicalType instanceof RawType) {\nserializeRaw((RawType<?>)logicalType,jsonGenerator);\nbreak;\n}\ndefault:throw new UnsupportedOperationException(String.format(\"Unable to serialize logical type '%s'. Please check the documentation for supported types.\",logicalType.asSummaryString()));\n}\njsonGenerator.writeEndObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3412,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void serializeInternal(LogicalType logicalType,JsonGenerator jsonGenerator) throws IOException {\n  jsonGenerator.writeStartObject();\n  jsonGenerator.writeStringField(FIELD_NAME_TYPE_NAME,logicalType.getTypeRoot().name());\n  if (logicalType instanceof NullType) {\n    jsonGenerator.writeEndObject();\n    return;\n  }\n  jsonGenerator.writeBooleanField(FIELD_NAME_NULLABLE,logicalType.isNullable());\nswitch (logicalType.getTypeRoot()) {\ncase BOOLEAN:case TINYINT:case SMALLINT:case INTEGER:case BIGINT:case FLOAT:case DOUBLE:case DATE:    break;\ncase CHAR:  jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((CharType)logicalType).getLength());\nbreak;\ncase VARCHAR:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((VarCharType)logicalType).getLength());\nbreak;\ncase BINARY:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((BinaryType)logicalType).getLength());\nbreak;\ncase VARBINARY:jsonGenerator.writeNumberField(FIELD_NAME_LENGTH,((VarBinaryType)logicalType).getLength());\nbreak;\ncase DECIMAL:jsonGenerator.writeNumberField(FIELD_NAME_PRECISION,((DecimalType)logicalType).getPrecision());\njsonGenerator.writeNumberField(FIELD_NAME_SCALE,((DecimalType)logicalType).getScale());\nbreak;\ncase TIME_WITHOUT_TIME_ZONE:case TIMESTAMP_WITHOUT_TIME_ZONE:case TIMESTAMP_WITH_TIME_ZONE:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:serializeTime(logicalType,jsonGenerator);\nbreak;\ncase MAP:serializeMap((MapType)logicalType,jsonGenerator);\nbreak;\ncase ARRAY:serializeCollection(((ArrayType)logicalType).getElementType(),jsonGenerator);\nbreak;\ncase MULTISET:serializeCollection(((MultisetType)logicalType).getElementType(),jsonGenerator);\nbreak;\ncase ROW:serializeRow((RowType)logicalType,jsonGenerator);\nbreak;\ncase RAW:if (logicalType instanceof RawType) {\nserializeRaw((RawType<?>)logicalType,jsonGenerator);\nbreak;\n}\ndefault:throw new UnsupportedOperationException(String.format(\"Unable to serialize logical type '%s'. Please check the documentation for supported types.\",logicalType.asSummaryString()));\n}\njsonGenerator.writeEndObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 95
      },
      "nodeContext" : "jsonGenerator.writeStringField(FIELD_NAME_TYPE_NAME,logicalType.getTypeRoot().name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 108,
    "startColumnNumber" : 39,
    "endLineNumber" : 108,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}