{
  "id" : 284,
  "expression" : "\"Email attribute key should be specified!\"",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/dao/src/main/java/org/thingsboard/server/dao/oauth2/OAuth2ServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Email attribute key should be specified!\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 253,
      "startColumnNumber" : 58,
      "endLineNumber" : 253,
      "endColumnNumber" : 100
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 253,
        "startColumnNumber" : 30,
        "endLineNumber" : 253,
        "endColumnNumber" : 101
      },
      "nodeContext" : "new DataValidationException(\"Email attribute key should be specified!\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 253,
        "startColumnNumber" : 24,
        "endLineNumber" : 253,
        "endColumnNumber" : 102
      },
      "nodeContext" : "throw new DataValidationException(\"Email attribute key should be specified!\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 252,
        "startColumnNumber" : 81,
        "endLineNumber" : 254,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  throw new DataValidationException(\"Email attribute key should be specified!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 252,
        "startColumnNumber" : 20,
        "endLineNumber" : 254,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n  throw new DataValidationException(\"Email attribute key should be specified!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 247,
        "startColumnNumber" : 64,
        "endLineNumber" : 262,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n  if (basicConfig == null) {\n    throw new DataValidationException(\"Basic config should be specified!\");\n  }\n  if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n    throw new DataValidationException(\"Email attribute key should be specified!\");\n  }\n  if (basicConfig.getTenantNameStrategy() == null) {\n    throw new DataValidationException(\"Tenant name strategy should be specified!\");\n  }\n  if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n    throw new DataValidationException(\"Tenant name pattern should be specified!\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1028,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 262,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mapperConfig.getType() == MapperType.BASIC) {\n  OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n  if (basicConfig == null) {\n    throw new DataValidationException(\"Basic config should be specified!\");\n  }\n  if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n    throw new DataValidationException(\"Email attribute key should be specified!\");\n  }\n  if (basicConfig.getTenantNameStrategy() == null) {\n    throw new DataValidationException(\"Tenant name strategy should be specified!\");\n  }\n  if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n    throw new DataValidationException(\"Tenant name pattern should be specified!\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 215,
        "startColumnNumber" : 100,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n    throw new DataValidationException(\"Client ID should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n    throw new DataValidationException(\"Client secret should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n    throw new DataValidationException(\"Authorization uri should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n    throw new DataValidationException(\"Token uri should be specified!\");\n  }\n  if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n    throw new DataValidationException(\"Scope should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n    throw new DataValidationException(\"User name attribute name should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n    throw new DataValidationException(\"Client authentication method should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n    throw new DataValidationException(\"Login button label should be specified!\");\n  }\n  OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n  if (mapperConfig == null) {\n    throw new DataValidationException(\"Mapper config should be specified!\");\n  }\n  if (mapperConfig.getType() == null) {\n    throw new DataValidationException(\"Mapper config type should be specified!\");\n  }\n  if (mapperConfig.getType() == MapperType.BASIC) {\n    OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n    if (basicConfig == null) {\n      throw new DataValidationException(\"Basic config should be specified!\");\n    }\n    if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n      throw new DataValidationException(\"Email attribute key should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == null) {\n      throw new DataValidationException(\"Tenant name strategy should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n      throw new DataValidationException(\"Tenant name pattern should be specified!\");\n    }\n  }\n  if (mapperConfig.getType() == MapperType.GITHUB) {\n    OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n    if (basicConfig == null) {\n      throw new DataValidationException(\"Basic config should be specified!\");\n    }\n    if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n      throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == null) {\n      throw new DataValidationException(\"Tenant name strategy should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n      throw new DataValidationException(\"Tenant name pattern should be specified!\");\n    }\n  }\n  if (mapperConfig.getType() == MapperType.CUSTOM) {\n    OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n    if (customConfig == null) {\n      throw new DataValidationException(\"Custom config should be specified!\");\n    }\n    if (StringUtils.isEmpty(customConfig.getUrl())) {\n      throw new DataValidationException(\"Custom mapper URL should be specified!\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4744,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 288,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (OAuth2RegistrationInfo clientRegistration : oauth2Params.getClientRegistrations()) {\n  if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n    throw new DataValidationException(\"Client ID should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n    throw new DataValidationException(\"Client secret should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n    throw new DataValidationException(\"Authorization uri should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n    throw new DataValidationException(\"Token uri should be specified!\");\n  }\n  if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n    throw new DataValidationException(\"Scope should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n    throw new DataValidationException(\"User name attribute name should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n    throw new DataValidationException(\"Client authentication method should be specified!\");\n  }\n  if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n    throw new DataValidationException(\"Login button label should be specified!\");\n  }\n  OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n  if (mapperConfig == null) {\n    throw new DataValidationException(\"Mapper config should be specified!\");\n  }\n  if (mapperConfig.getType() == null) {\n    throw new DataValidationException(\"Mapper config type should be specified!\");\n  }\n  if (mapperConfig.getType() == MapperType.BASIC) {\n    OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n    if (basicConfig == null) {\n      throw new DataValidationException(\"Basic config should be specified!\");\n    }\n    if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n      throw new DataValidationException(\"Email attribute key should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == null) {\n      throw new DataValidationException(\"Tenant name strategy should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n      throw new DataValidationException(\"Tenant name pattern should be specified!\");\n    }\n  }\n  if (mapperConfig.getType() == MapperType.GITHUB) {\n    OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n    if (basicConfig == null) {\n      throw new DataValidationException(\"Basic config should be specified!\");\n    }\n    if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n      throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == null) {\n      throw new DataValidationException(\"Tenant name strategy should be specified!\");\n    }\n    if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n      throw new DataValidationException(\"Tenant name pattern should be specified!\");\n    }\n  }\n  if (mapperConfig.getType() == MapperType.CUSTOM) {\n    OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n    if (customConfig == null) {\n      throw new DataValidationException(\"Custom config should be specified!\");\n    }\n    if (StringUtils.isEmpty(customConfig.getUrl())) {\n      throw new DataValidationException(\"Custom mapper URL should be specified!\");\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 7913,
        "startLineNumber" : 165,
        "startColumnNumber" : 80,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (oauth2Params.getDomainInfos() == null || oauth2Params.getDomainInfos().isEmpty()) {\n    throw new DataValidationException(\"List of domain configuration should be specified!\");\n  }\n  for (  OAuth2DomainInfo domainInfo : oauth2Params.getDomainInfos()) {\n    if (StringUtils.isEmpty(domainInfo.getName())) {\n      throw new DataValidationException(\"Domain name should be specified!\");\n    }\n    if (domainInfo.getScheme() == null) {\n      throw new DataValidationException(\"Domain scheme should be specified!\");\n    }\n  }\n  oauth2Params.getDomainInfos().stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getName)).forEach((domainName,domainInfos) -> {\n    if (domainInfos.size() > 1 && domainInfos.stream().anyMatch(domainInfo -> domainInfo.getScheme() == SchemeType.MIXED)) {\n      throw new DataValidationException(\"MIXED scheme type shouldn't be combined with another scheme type!\");\n    }\n    domainInfos.stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getScheme)).forEach((schemeType,domainInfosBySchemeType) -> {\n      if (domainInfosBySchemeType.size() > 1) {\n        throw new DataValidationException(\"Domain name and protocol must be unique within OAuth2 parameters!\");\n      }\n    }\n);\n  }\n);\n  if (oauth2Params.getMobileInfos() != null) {\n    for (    OAuth2MobileInfo mobileInfo : oauth2Params.getMobileInfos()) {\n      if (StringUtils.isEmpty(mobileInfo.getPkgName())) {\n        throw new DataValidationException(\"Package should be specified!\");\n      }\n      if (StringUtils.isEmpty(mobileInfo.getAppSecret())) {\n        throw new DataValidationException(\"Application secret should be specified!\");\n      }\n      if (mobileInfo.getAppSecret().length() < 16) {\n        throw new DataValidationException(\"Application secret should be at least 16 characters!\");\n      }\n    }\n    oauth2Params.getMobileInfos().stream().collect(Collectors.groupingBy(OAuth2MobileInfo::getPkgName)).forEach((pkgName,mobileInfos) -> {\n      if (mobileInfos.size() > 1) {\n        throw new DataValidationException(\"Mobile app package name must be unique within OAuth2 parameters!\");\n      }\n    }\n);\n  }\n  if (oauth2Params.getClientRegistrations() == null || oauth2Params.getClientRegistrations().isEmpty()) {\n    throw new DataValidationException(\"Client registrations should be specified!\");\n  }\n  for (  OAuth2RegistrationInfo clientRegistration : oauth2Params.getClientRegistrations()) {\n    if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n      throw new DataValidationException(\"Client ID should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n      throw new DataValidationException(\"Client secret should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n      throw new DataValidationException(\"Authorization uri should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n      throw new DataValidationException(\"Token uri should be specified!\");\n    }\n    if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n      throw new DataValidationException(\"Scope should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n      throw new DataValidationException(\"User name attribute name should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n      throw new DataValidationException(\"Client authentication method should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n      throw new DataValidationException(\"Login button label should be specified!\");\n    }\n    OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n    if (mapperConfig == null) {\n      throw new DataValidationException(\"Mapper config should be specified!\");\n    }\n    if (mapperConfig.getType() == null) {\n      throw new DataValidationException(\"Mapper config type should be specified!\");\n    }\n    if (mapperConfig.getType() == MapperType.BASIC) {\n      OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n      if (basicConfig == null) {\n        throw new DataValidationException(\"Basic config should be specified!\");\n      }\n      if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n        throw new DataValidationException(\"Email attribute key should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == null) {\n        throw new DataValidationException(\"Tenant name strategy should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n        throw new DataValidationException(\"Tenant name pattern should be specified!\");\n      }\n    }\n    if (mapperConfig.getType() == MapperType.GITHUB) {\n      OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n      if (basicConfig == null) {\n        throw new DataValidationException(\"Basic config should be specified!\");\n      }\n      if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n        throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == null) {\n        throw new DataValidationException(\"Tenant name strategy should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n        throw new DataValidationException(\"Tenant name pattern should be specified!\");\n      }\n    }\n    if (mapperConfig.getType() == MapperType.CUSTOM) {\n      OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n      if (customConfig == null) {\n        throw new DataValidationException(\"Custom config should be specified!\");\n      }\n      if (StringUtils.isEmpty(customConfig.getUrl())) {\n        throw new DataValidationException(\"Custom mapper URL should be specified!\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 573,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7985,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (OAuth2ParamsInfo oauth2Params : oauth2Info.getOauth2ParamsInfos()) {\n  if (oauth2Params.getDomainInfos() == null || oauth2Params.getDomainInfos().isEmpty()) {\n    throw new DataValidationException(\"List of domain configuration should be specified!\");\n  }\n  for (  OAuth2DomainInfo domainInfo : oauth2Params.getDomainInfos()) {\n    if (StringUtils.isEmpty(domainInfo.getName())) {\n      throw new DataValidationException(\"Domain name should be specified!\");\n    }\n    if (domainInfo.getScheme() == null) {\n      throw new DataValidationException(\"Domain scheme should be specified!\");\n    }\n  }\n  oauth2Params.getDomainInfos().stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getName)).forEach((domainName,domainInfos) -> {\n    if (domainInfos.size() > 1 && domainInfos.stream().anyMatch(domainInfo -> domainInfo.getScheme() == SchemeType.MIXED)) {\n      throw new DataValidationException(\"MIXED scheme type shouldn't be combined with another scheme type!\");\n    }\n    domainInfos.stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getScheme)).forEach((schemeType,domainInfosBySchemeType) -> {\n      if (domainInfosBySchemeType.size() > 1) {\n        throw new DataValidationException(\"Domain name and protocol must be unique within OAuth2 parameters!\");\n      }\n    }\n);\n  }\n);\n  if (oauth2Params.getMobileInfos() != null) {\n    for (    OAuth2MobileInfo mobileInfo : oauth2Params.getMobileInfos()) {\n      if (StringUtils.isEmpty(mobileInfo.getPkgName())) {\n        throw new DataValidationException(\"Package should be specified!\");\n      }\n      if (StringUtils.isEmpty(mobileInfo.getAppSecret())) {\n        throw new DataValidationException(\"Application secret should be specified!\");\n      }\n      if (mobileInfo.getAppSecret().length() < 16) {\n        throw new DataValidationException(\"Application secret should be at least 16 characters!\");\n      }\n    }\n    oauth2Params.getMobileInfos().stream().collect(Collectors.groupingBy(OAuth2MobileInfo::getPkgName)).forEach((pkgName,mobileInfos) -> {\n      if (mobileInfos.size() > 1) {\n        throw new DataValidationException(\"Mobile app package name must be unique within OAuth2 parameters!\");\n      }\n    }\n);\n  }\n  if (oauth2Params.getClientRegistrations() == null || oauth2Params.getClientRegistrations().isEmpty()) {\n    throw new DataValidationException(\"Client registrations should be specified!\");\n  }\n  for (  OAuth2RegistrationInfo clientRegistration : oauth2Params.getClientRegistrations()) {\n    if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n      throw new DataValidationException(\"Client ID should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n      throw new DataValidationException(\"Client secret should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n      throw new DataValidationException(\"Authorization uri should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n      throw new DataValidationException(\"Token uri should be specified!\");\n    }\n    if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n      throw new DataValidationException(\"Scope should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n      throw new DataValidationException(\"User name attribute name should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n      throw new DataValidationException(\"Client authentication method should be specified!\");\n    }\n    if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n      throw new DataValidationException(\"Login button label should be specified!\");\n    }\n    OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n    if (mapperConfig == null) {\n      throw new DataValidationException(\"Mapper config should be specified!\");\n    }\n    if (mapperConfig.getType() == null) {\n      throw new DataValidationException(\"Mapper config type should be specified!\");\n    }\n    if (mapperConfig.getType() == MapperType.BASIC) {\n      OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n      if (basicConfig == null) {\n        throw new DataValidationException(\"Basic config should be specified!\");\n      }\n      if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n        throw new DataValidationException(\"Email attribute key should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == null) {\n        throw new DataValidationException(\"Tenant name strategy should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n        throw new DataValidationException(\"Tenant name pattern should be specified!\");\n      }\n    }\n    if (mapperConfig.getType() == MapperType.GITHUB) {\n      OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n      if (basicConfig == null) {\n        throw new DataValidationException(\"Basic config should be specified!\");\n      }\n      if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n        throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == null) {\n        throw new DataValidationException(\"Tenant name strategy should be specified!\");\n      }\n      if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n        throw new DataValidationException(\"Tenant name pattern should be specified!\");\n      }\n    }\n    if (mapperConfig.getType() == MapperType.CUSTOM) {\n      OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n      if (customConfig == null) {\n        throw new DataValidationException(\"Custom config should be specified!\");\n      }\n      if (StringUtils.isEmpty(customConfig.getUrl())) {\n        throw new DataValidationException(\"Custom mapper URL should be specified!\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 581,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 8196,
        "startLineNumber" : 160,
        "startColumnNumber" : 75,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oauth2Info == null || oauth2Info.getOauth2ParamsInfos() == null) {\n    throw new DataValidationException(\"OAuth2 param infos should be specified!\");\n  }\n  for (  OAuth2ParamsInfo oauth2Params : oauth2Info.getOauth2ParamsInfos()) {\n    if (oauth2Params.getDomainInfos() == null || oauth2Params.getDomainInfos().isEmpty()) {\n      throw new DataValidationException(\"List of domain configuration should be specified!\");\n    }\n    for (    OAuth2DomainInfo domainInfo : oauth2Params.getDomainInfos()) {\n      if (StringUtils.isEmpty(domainInfo.getName())) {\n        throw new DataValidationException(\"Domain name should be specified!\");\n      }\n      if (domainInfo.getScheme() == null) {\n        throw new DataValidationException(\"Domain scheme should be specified!\");\n      }\n    }\n    oauth2Params.getDomainInfos().stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getName)).forEach((domainName,domainInfos) -> {\n      if (domainInfos.size() > 1 && domainInfos.stream().anyMatch(domainInfo -> domainInfo.getScheme() == SchemeType.MIXED)) {\n        throw new DataValidationException(\"MIXED scheme type shouldn't be combined with another scheme type!\");\n      }\n      domainInfos.stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getScheme)).forEach((schemeType,domainInfosBySchemeType) -> {\n        if (domainInfosBySchemeType.size() > 1) {\n          throw new DataValidationException(\"Domain name and protocol must be unique within OAuth2 parameters!\");\n        }\n      }\n);\n    }\n);\n    if (oauth2Params.getMobileInfos() != null) {\n      for (      OAuth2MobileInfo mobileInfo : oauth2Params.getMobileInfos()) {\n        if (StringUtils.isEmpty(mobileInfo.getPkgName())) {\n          throw new DataValidationException(\"Package should be specified!\");\n        }\n        if (StringUtils.isEmpty(mobileInfo.getAppSecret())) {\n          throw new DataValidationException(\"Application secret should be specified!\");\n        }\n        if (mobileInfo.getAppSecret().length() < 16) {\n          throw new DataValidationException(\"Application secret should be at least 16 characters!\");\n        }\n      }\n      oauth2Params.getMobileInfos().stream().collect(Collectors.groupingBy(OAuth2MobileInfo::getPkgName)).forEach((pkgName,mobileInfos) -> {\n        if (mobileInfos.size() > 1) {\n          throw new DataValidationException(\"Mobile app package name must be unique within OAuth2 parameters!\");\n        }\n      }\n);\n    }\n    if (oauth2Params.getClientRegistrations() == null || oauth2Params.getClientRegistrations().isEmpty()) {\n      throw new DataValidationException(\"Client registrations should be specified!\");\n    }\n    for (    OAuth2RegistrationInfo clientRegistration : oauth2Params.getClientRegistrations()) {\n      if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n        throw new DataValidationException(\"Client ID should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n        throw new DataValidationException(\"Client secret should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n        throw new DataValidationException(\"Authorization uri should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n        throw new DataValidationException(\"Token uri should be specified!\");\n      }\n      if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n        throw new DataValidationException(\"Scope should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n        throw new DataValidationException(\"User name attribute name should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n        throw new DataValidationException(\"Client authentication method should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n        throw new DataValidationException(\"Login button label should be specified!\");\n      }\n      OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n      if (mapperConfig == null) {\n        throw new DataValidationException(\"Mapper config should be specified!\");\n      }\n      if (mapperConfig.getType() == null) {\n        throw new DataValidationException(\"Mapper config type should be specified!\");\n      }\n      if (mapperConfig.getType() == MapperType.BASIC) {\n        OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n        if (basicConfig == null) {\n          throw new DataValidationException(\"Basic config should be specified!\");\n        }\n        if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n          throw new DataValidationException(\"Email attribute key should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == null) {\n          throw new DataValidationException(\"Tenant name strategy should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n          throw new DataValidationException(\"Tenant name pattern should be specified!\");\n        }\n      }\n      if (mapperConfig.getType() == MapperType.GITHUB) {\n        OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n        if (basicConfig == null) {\n          throw new DataValidationException(\"Basic config should be specified!\");\n        }\n        if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n          throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == null) {\n          throw new DataValidationException(\"Tenant name strategy should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n          throw new DataValidationException(\"Tenant name pattern should be specified!\");\n        }\n      }\n      if (mapperConfig.getType() == MapperType.CUSTOM) {\n        OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n        if (customConfig == null) {\n          throw new DataValidationException(\"Custom config should be specified!\");\n        }\n        if (StringUtils.isEmpty(customConfig.getUrl())) {\n          throw new DataValidationException(\"Custom mapper URL should be specified!\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 598,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 8210,
        "startLineNumber" : 160,
        "startColumnNumber" : 61,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "oauth2Info -> {\n  if (oauth2Info == null || oauth2Info.getOauth2ParamsInfos() == null) {\n    throw new DataValidationException(\"OAuth2 param infos should be specified!\");\n  }\n  for (  OAuth2ParamsInfo oauth2Params : oauth2Info.getOauth2ParamsInfos()) {\n    if (oauth2Params.getDomainInfos() == null || oauth2Params.getDomainInfos().isEmpty()) {\n      throw new DataValidationException(\"List of domain configuration should be specified!\");\n    }\n    for (    OAuth2DomainInfo domainInfo : oauth2Params.getDomainInfos()) {\n      if (StringUtils.isEmpty(domainInfo.getName())) {\n        throw new DataValidationException(\"Domain name should be specified!\");\n      }\n      if (domainInfo.getScheme() == null) {\n        throw new DataValidationException(\"Domain scheme should be specified!\");\n      }\n    }\n    oauth2Params.getDomainInfos().stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getName)).forEach((domainName,domainInfos) -> {\n      if (domainInfos.size() > 1 && domainInfos.stream().anyMatch(domainInfo -> domainInfo.getScheme() == SchemeType.MIXED)) {\n        throw new DataValidationException(\"MIXED scheme type shouldn't be combined with another scheme type!\");\n      }\n      domainInfos.stream().collect(Collectors.groupingBy(OAuth2DomainInfo::getScheme)).forEach((schemeType,domainInfosBySchemeType) -> {\n        if (domainInfosBySchemeType.size() > 1) {\n          throw new DataValidationException(\"Domain name and protocol must be unique within OAuth2 parameters!\");\n        }\n      }\n);\n    }\n);\n    if (oauth2Params.getMobileInfos() != null) {\n      for (      OAuth2MobileInfo mobileInfo : oauth2Params.getMobileInfos()) {\n        if (StringUtils.isEmpty(mobileInfo.getPkgName())) {\n          throw new DataValidationException(\"Package should be specified!\");\n        }\n        if (StringUtils.isEmpty(mobileInfo.getAppSecret())) {\n          throw new DataValidationException(\"Application secret should be specified!\");\n        }\n        if (mobileInfo.getAppSecret().length() < 16) {\n          throw new DataValidationException(\"Application secret should be at least 16 characters!\");\n        }\n      }\n      oauth2Params.getMobileInfos().stream().collect(Collectors.groupingBy(OAuth2MobileInfo::getPkgName)).forEach((pkgName,mobileInfos) -> {\n        if (mobileInfos.size() > 1) {\n          throw new DataValidationException(\"Mobile app package name must be unique within OAuth2 parameters!\");\n        }\n      }\n);\n    }\n    if (oauth2Params.getClientRegistrations() == null || oauth2Params.getClientRegistrations().isEmpty()) {\n      throw new DataValidationException(\"Client registrations should be specified!\");\n    }\n    for (    OAuth2RegistrationInfo clientRegistration : oauth2Params.getClientRegistrations()) {\n      if (StringUtils.isEmpty(clientRegistration.getClientId())) {\n        throw new DataValidationException(\"Client ID should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getClientSecret())) {\n        throw new DataValidationException(\"Client secret should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getAuthorizationUri())) {\n        throw new DataValidationException(\"Authorization uri should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getAccessTokenUri())) {\n        throw new DataValidationException(\"Token uri should be specified!\");\n      }\n      if (CollectionUtils.isEmpty(clientRegistration.getScope())) {\n        throw new DataValidationException(\"Scope should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getUserNameAttributeName())) {\n        throw new DataValidationException(\"User name attribute name should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getClientAuthenticationMethod())) {\n        throw new DataValidationException(\"Client authentication method should be specified!\");\n      }\n      if (StringUtils.isEmpty(clientRegistration.getLoginButtonLabel())) {\n        throw new DataValidationException(\"Login button label should be specified!\");\n      }\n      OAuth2MapperConfig mapperConfig=clientRegistration.getMapperConfig();\n      if (mapperConfig == null) {\n        throw new DataValidationException(\"Mapper config should be specified!\");\n      }\n      if (mapperConfig.getType() == null) {\n        throw new DataValidationException(\"Mapper config type should be specified!\");\n      }\n      if (mapperConfig.getType() == MapperType.BASIC) {\n        OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n        if (basicConfig == null) {\n          throw new DataValidationException(\"Basic config should be specified!\");\n        }\n        if (StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n          throw new DataValidationException(\"Email attribute key should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == null) {\n          throw new DataValidationException(\"Tenant name strategy should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n          throw new DataValidationException(\"Tenant name pattern should be specified!\");\n        }\n      }\n      if (mapperConfig.getType() == MapperType.GITHUB) {\n        OAuth2BasicMapperConfig basicConfig=mapperConfig.getBasic();\n        if (basicConfig == null) {\n          throw new DataValidationException(\"Basic config should be specified!\");\n        }\n        if (!StringUtils.isEmpty(basicConfig.getEmailAttributeKey())) {\n          throw new DataValidationException(\"Email attribute key cannot be configured for GITHUB mapper type!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == null) {\n          throw new DataValidationException(\"Tenant name strategy should be specified!\");\n        }\n        if (basicConfig.getTenantNameStrategy() == TenantNameStrategyType.CUSTOM && StringUtils.isEmpty(basicConfig.getTenantNamePattern())) {\n          throw new DataValidationException(\"Tenant name pattern should be specified!\");\n        }\n      }\n      if (mapperConfig.getType() == MapperType.CUSTOM) {\n        OAuth2CustomMapperConfig customConfig=mapperConfig.getCustom();\n        if (customConfig == null) {\n          throw new DataValidationException(\"Custom config should be specified!\");\n        }\n        if (StringUtils.isEmpty(customConfig.getUrl())) {\n          throw new DataValidationException(\"Custom mapper URL should be specified!\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 601,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 253,
        "startColumnNumber" : 24,
        "endLineNumber" : 253,
        "endColumnNumber" : 102
      },
      "nodeContext" : "throw new DataValidationException(\"Email attribute key should be specified!\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 253,
    "startColumnNumber" : 58,
    "endLineNumber" : 253,
    "endColumnNumber" : 100
  } ],
  "layoutRelationDataList" : [ ]
}