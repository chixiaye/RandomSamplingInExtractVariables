{
  "id" : 325,
  "expression" : "SegmentMetadataQuery.AnalysisType",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/guice/SegmentMetadataQueryConfigTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SegmentMetadataQuery.AnalysisType",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "SegmentMetadataQuery.AnalysisType",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 46
      },
      "nodeContext" : "EnumSet<SegmentMetadataQuery.AnalysisType>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 106
      },
      "nodeContext" : "EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1873,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerdeSegmentMetadataQueryConfig(){\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 106
      },
      "nodeContext" : "EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.query.metadata.metadata.SegmentMetadataQuery.AnalysisType"
  }, {
    "nodeContext" : "SegmentMetadataQuery.AnalysisType",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 72,
      "startColumnNumber" : 13,
      "endLineNumber" : 72,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 72,
        "startColumnNumber" : 13,
        "endLineNumber" : 72,
        "endColumnNumber" : 46
      },
      "nodeContext" : "SegmentMetadataQuery.AnalysisType",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Iterator<SegmentMetadataQuery.AnalysisType>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1873,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerdeSegmentMetadataQueryConfig(){\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.query.metadata.metadata.SegmentMetadataQuery.AnalysisType"
  }, {
    "nodeContext" : "SegmentMetadataQuery.AnalysisType",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 76,
      "startColumnNumber" : 6,
      "endLineNumber" : 76,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "SegmentMetadataQuery.AnalysisType",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "SegmentMetadataQuery.AnalysisType e=it.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 75,
        "startColumnNumber" : 25,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SegmentMetadataQuery.AnalysisType e=it.next();\n  expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n  if (it.hasNext()) {\n    expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (it.hasNext()) {\n  SegmentMetadataQuery.AnalysisType e=it.next();\n  expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n  if (it.hasNext()) {\n    expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1873,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerdeSegmentMetadataQueryConfig(){\n  Injector injector=Guice.createInjector(new Module(){\n    @Override public void configure(    Binder binder){\n      binder.install(new PropertiesModule(Collections.singletonList(\"test.runtime.properties\")));\n      binder.install(new ConfigModule());\n      binder.install(new DruidGuiceExtensions());\n      JsonConfigProvider.bind(binder,\"druid.query.segmentMetadata\",SegmentMetadataQueryConfig.class);\n    }\n    @Provides @LazySingleton public ObjectMapper jsonMapper(){\n      return new DefaultObjectMapper();\n    }\n  }\n);\n  Properties props=injector.getInstance(Properties.class);\n  SegmentMetadataQueryConfig config=injector.getInstance(SegmentMetadataQueryConfig.class);\n  EnumSet<SegmentMetadataQuery.AnalysisType> expectedDefaultAnalysis=config.getDefaultAnalysisTypes();\n  String actualDefaultAnalysis=props.getProperty(\"druid.query.segmentMetadata.defaultAnalysisTypes\");\n  Iterator<SegmentMetadataQuery.AnalysisType> it=expectedDefaultAnalysis.iterator();\n  StringBuilder expectedDefaultAnalysisAsStringBuilder=new StringBuilder();\n  expectedDefaultAnalysisAsStringBuilder.append('[');\n  while (it.hasNext()) {\n    SegmentMetadataQuery.AnalysisType e=it.next();\n    expectedDefaultAnalysisAsStringBuilder.append(\"\\\"\").append(e).append(\"\\\"\");\n    if (it.hasNext()) {\n      expectedDefaultAnalysisAsStringBuilder.append(',').append(' ');\n    }\n  }\n  expectedDefaultAnalysisAsStringBuilder.append(']');\n  Assert.assertEquals(expectedDefaultAnalysisAsStringBuilder.toString(),actualDefaultAnalysis);\n  Assert.assertEquals(props.getProperty(\"druid.query.segmentMetadata.defaultHistory\"),config.getDefaultHistory().toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "SegmentMetadataQuery.AnalysisType e=it.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.query.metadata.metadata.SegmentMetadataQuery.AnalysisType"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 45
  }, {
    "charLength" : 33,
    "startLineNumber" : 72,
    "startColumnNumber" : 13,
    "endLineNumber" : 72,
    "endColumnNumber" : 46
  }, {
    "charLength" : 33,
    "startLineNumber" : 76,
    "startColumnNumber" : 6,
    "endLineNumber" : 76,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}