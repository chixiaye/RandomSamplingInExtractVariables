{
  "id" : 200,
  "expression" : "regexp.matcher(identifier)",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/KtormSchemaCodegen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "regexp.matcher(identifier)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 1079,
      "startColumnNumber" : 26,
      "endLineNumber" : 1079,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 1079,
        "startColumnNumber" : 16,
        "endLineNumber" : 1079,
        "endColumnNumber" : 52
      },
      "nodeContext" : "matcher=regexp.matcher(identifier)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 1079,
        "startColumnNumber" : 8,
        "endLineNumber" : 1079,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Matcher matcher=regexp.matcher(identifier);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 1074,
        "startColumnNumber" : 60,
        "endLineNumber" : 1086,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Pattern regexp=Pattern.compile(\"[^0-9a-zA-z$_\\\\x0080-\\\\xFFFF]\");\n  Matcher matcher=regexp.matcher(identifier);\n  if (matcher.find()) {\n    LOGGER.warn(\"Identifier '{}' contains unsafe characters out of [0-9,a-z,A-Z$_] and U+0080..U+FFFF range\",identifier);\n    identifier=identifier.replaceAll(\"[^0-9a-zA-z$_\\\\x0080-\\\\xFFFF]\",\"\");\n  }\n  return identifier;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 1066,
        "startColumnNumber" : 4,
        "endLineNumber" : 1086,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Escapes identifier to use it in SQL statements with backticks, eg. SELECT \"identifier\" FROM Ref: https://www.sqlite.org/draft/tokenreq.html H41130 Spec is similar to MySQL\n * @param identifier source identifier\n * @return escaped identifier\n */\npublic String escapeQuotedIdentifier(String identifier){\n  Pattern regexp=Pattern.compile(\"[^0-9a-zA-z$_\\\\x0080-\\\\xFFFF]\");\n  Matcher matcher=regexp.matcher(identifier);\n  if (matcher.find()) {\n    LOGGER.warn(\"Identifier '{}' contains unsafe characters out of [0-9,a-z,A-Z$_] and U+0080..U+FFFF range\",identifier);\n    identifier=identifier.replaceAll(\"[^0-9a-zA-z$_\\\\x0080-\\\\xFFFF]\",\"\");\n  }\n  return identifier;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 50,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 1079,
        "startColumnNumber" : 8,
        "endLineNumber" : 1079,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Matcher matcher=regexp.matcher(identifier);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 1079,
    "startColumnNumber" : 26,
    "endLineNumber" : 1079,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}