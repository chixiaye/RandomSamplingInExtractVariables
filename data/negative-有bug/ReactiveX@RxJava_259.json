{
  "id" : 259,
  "expression" : "!b",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/completable/CompletableAmbIterable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!b",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 99,
      "startColumnNumber" : 16,
      "endLineNumber" : 99,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!b) {\n  if (empty) {\n    s.onComplete();\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1854,
        "startLineNumber" : 80,
        "startColumnNumber" : 17,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=it.hasNext();\n  }\n catch (  Throwable e) {\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    if (empty) {\n      s.onComplete();\n    }\n    break;\n  }\n  empty=false;\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=it.next();\n  }\n catch (  Throwable e) {\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (c == null) {\n    NullPointerException npe=new NullPointerException(\"One of the sources is null\");\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  c.subscribe(inner);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=it.hasNext();\n  }\n catch (  Throwable e) {\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    if (empty) {\n      s.onComplete();\n    }\n    break;\n  }\n  empty=false;\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=it.next();\n  }\n catch (  Throwable e) {\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (c == null) {\n    NullPointerException npe=new NullPointerException(\"One of the sources is null\");\n    if (once.compareAndSet(false,true)) {\n      set.dispose();\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  if (once.get() || set.isDisposed()) {\n    return;\n  }\n  c.subscribe(inner);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 32,
        "startColumnNumber" : 66,
        "endLineNumber" : 144,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> it;\n  try {\n    it=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (it == null) {\n    s.onError(new NullPointerException(\"The iterator returned is null\"));\n    return;\n  }\n  boolean empty=true;\n  final AtomicBoolean once=new AtomicBoolean();\n  CompletableSubscriber inner=new CompletableSubscriber(){\n    @Override public void onComplete(){\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onComplete();\n      }\n    }\n    @Override public void onError(    Throwable e){\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n  }\n;\n  for (; ; ) {\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=it.hasNext();\n    }\n catch (    Throwable e) {\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      if (empty) {\n        s.onComplete();\n      }\n      break;\n    }\n    empty=false;\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=it.next();\n    }\n catch (    Throwable e) {\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (c == null) {\n      NullPointerException npe=new NullPointerException(\"One of the sources is null\");\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    c.subscribe(inner);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3281,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void subscribeActual(final CompletableSubscriber s){\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> it;\n  try {\n    it=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (it == null) {\n    s.onError(new NullPointerException(\"The iterator returned is null\"));\n    return;\n  }\n  boolean empty=true;\n  final AtomicBoolean once=new AtomicBoolean();\n  CompletableSubscriber inner=new CompletableSubscriber(){\n    @Override public void onComplete(){\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onComplete();\n      }\n    }\n    @Override public void onError(    Throwable e){\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n  }\n;\n  for (; ; ) {\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=it.hasNext();\n    }\n catch (    Throwable e) {\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      if (empty) {\n        s.onComplete();\n      }\n      break;\n    }\n    empty=false;\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=it.next();\n    }\n catch (    Throwable e) {\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (c == null) {\n      NullPointerException npe=new NullPointerException(\"One of the sources is null\");\n      if (once.compareAndSet(false,true)) {\n        set.dispose();\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    if (once.get() || set.isDisposed()) {\n      return;\n    }\n    c.subscribe(inner);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!b) {\n  if (empty) {\n    s.onComplete();\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 99,
    "startColumnNumber" : 16,
    "endLineNumber" : 99,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}