{
  "id" : 437,
  "expression" : "ClusterData.builder()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/BrokerBookieIsolationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClusterData.builder()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 171,
      "startColumnNumber" : 34,
      "endLineNumber" : 171,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 171,
        "startColumnNumber" : 34,
        "endLineNumber" : 171,
        "endColumnNumber" : 104
      },
      "nodeContext" : "ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 171,
        "startColumnNumber" : 34,
        "endLineNumber" : 171,
        "endColumnNumber" : 112
      },
      "nodeContext" : "ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 171,
        "startColumnNumber" : 20,
        "endLineNumber" : 171,
        "endColumnNumber" : 112
      },
      "nodeContext" : "clusterData=ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 113
      },
      "nodeContext" : "ClusterData clusterData=ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7737,
        "startLineNumber" : 122,
        "startColumnNumber" : 55,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant1=\"tenant1\";\n  final String cluster=\"use\";\n  final String ns1=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns1\");\n  final String ns2=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns2\");\n  final String ns3=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns3\");\n  final String ns4=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns4\");\n  final int totalPublish=100;\n  final String brokerBookkeeperClientIsolationGroups=\"default-group\";\n  final String tenantNamespaceIsolationGroups=\"tenant1-isolation\";\n  BookieServer[] bookies=bkEnsemble.getBookies();\n  ZooKeeper zkClient=bkEnsemble.getZkClient();\n  Set<BookieId> defaultBookies=Sets.newHashSet(bookies[0].getBookieId(),bookies[1].getBookieId());\n  Set<BookieId> isolatedBookies=Sets.newHashSet(bookies[2].getBookieId(),bookies[3].getBookieId());\n  setDefaultIsolationGroup(brokerBookkeeperClientIsolationGroups,zkClient,defaultBookies);\n  setDefaultIsolationGroup(tenantNamespaceIsolationGroups,zkClient,isolatedBookies);\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setLoadManagerClassName(ModularLoadManagerImpl.class.getName());\n  config.setClusterName(cluster);\n  config.setWebServicePort(Optional.of(0));\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setAdvertisedAddress(\"localhost\");\n  config.setBookkeeperClientIsolationGroups(brokerBookkeeperClientIsolationGroups);\n  config.setManagedLedgerDefaultEnsembleSize(2);\n  config.setManagedLedgerDefaultWriteQuorum(2);\n  config.setManagedLedgerDefaultAckQuorum(2);\n  config.setAllowAutoTopicCreationType(\"non-partitioned\");\n  int totalEntriesPerLedger=20;\n  int totalLedgers=totalPublish / totalEntriesPerLedger;\n  config.setManagedLedgerMaxEntriesPerLedger(totalEntriesPerLedger);\n  config.setManagedLedgerMinLedgerRolloverTimeMinutes(0);\n  pulsarService=new PulsarService(config);\n  pulsarService.start();\n  PulsarAdmin admin=PulsarAdmin.builder().serviceHttpUrl(pulsarService.getWebServiceAddress()).build();\n  ClusterData clusterData=ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build();\n  admin.clusters().createCluster(cluster,clusterData);\n  TenantInfoImpl tenantInfo=new TenantInfoImpl(null,Sets.newHashSet(cluster));\n  admin.tenants().createTenant(tenant1,tenantInfo);\n  admin.namespaces().createNamespace(ns1);\n  admin.namespaces().createNamespace(ns2);\n  admin.namespaces().createNamespace(ns3);\n  admin.namespaces().createNamespace(ns4);\n  admin.namespaces().setBookieAffinityGroup(ns2,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  admin.namespaces().setBookieAffinityGroup(ns3,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  admin.namespaces().setBookieAffinityGroup(ns4,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns2),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns3),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns4),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  try {\n    admin.namespaces().getBookieAffinityGroup(ns1);\n  }\n catch (  PulsarAdminException.NotFoundException e) {\n  }\n  @Cleanup PulsarClient pulsarClient=PulsarClient.builder().serviceUrl(pulsarService.getBrokerServiceUrl()).statsInterval(-1,TimeUnit.SECONDS).build();\n  PersistentTopic topic1=(PersistentTopic)createTopicAndPublish(pulsarClient,ns1,\"topic1\",totalPublish);\n  PersistentTopic topic2=(PersistentTopic)createTopicAndPublish(pulsarClient,ns2,\"topic1\",totalPublish);\n  PersistentTopic topic3=(PersistentTopic)createTopicAndPublish(pulsarClient,ns3,\"topic1\",totalPublish);\n  PersistentTopic topic4=(PersistentTopic)createTopicAndPublish(pulsarClient,ns4,\"topic1\",totalPublish);\n  Bookie bookie1=bookies[0].getBookie();\n  Field ledgerManagerField=Bookie.class.getDeclaredField(\"ledgerManager\");\n  ledgerManagerField.setAccessible(true);\n  LedgerManager ledgerManager=(LedgerManager)ledgerManagerField.get(bookie1);\n  ManagedLedgerImpl ml=(ManagedLedgerImpl)topic1.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),defaultBookies);\n  ml=(ManagedLedgerImpl)topic2.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ml=(ManagedLedgerImpl)topic3.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ml=(ManagedLedgerImpl)topic4.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ManagedLedgerClientFactory mlFactory=(ManagedLedgerClientFactory)pulsarService.getManagedLedgerClientFactory();\n  Map<EnsemblePlacementPolicyConfig,BookKeeper> bkPlacementPolicyToBkClientMap=mlFactory.getBkEnsemblePolicyToBookKeeperMap();\n  assertEquals(bkPlacementPolicyToBkClientMap.size(),1);\n  Map<EnsemblePlacementPolicyConfig,BookKeeper> bkMap=mlFactory.getBkEnsemblePolicyToBookKeeperMap();\n  BookKeeper bk=bkMap.values().iterator().next();\n  Method getConf=BookKeeper.class.getDeclaredMethod(\"getConf\");\n  getConf.setAccessible(true);\n  ClientConfiguration clientConf=(ClientConfiguration)getConf.invoke(bk);\n  assertEquals(clientConf.getProperty(REPP_DNS_RESOLVER_CLASS),ZkBookieRackAffinityMapping.class.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 795,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8310,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Validate that broker can support tenant based bookie isolation. <pre> 1. create two bookie-info group : default-group and isolated-group 2. namespace ns1 : uses default-group validate: bookie-ensemble for ns1-topics's ledger will be from default-group 3. namespace ns2,ns3,ns4: uses isolated-group validate: bookie-ensemble for above namespace-topics's ledger will be from isolated-group </pre>\n * @throws Exception\n */\n@Test public void testBookieIsolation() throws Exception {\n  final String tenant1=\"tenant1\";\n  final String cluster=\"use\";\n  final String ns1=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns1\");\n  final String ns2=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns2\");\n  final String ns3=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns3\");\n  final String ns4=String.format(\"%s/%s/%s\",tenant1,cluster,\"ns4\");\n  final int totalPublish=100;\n  final String brokerBookkeeperClientIsolationGroups=\"default-group\";\n  final String tenantNamespaceIsolationGroups=\"tenant1-isolation\";\n  BookieServer[] bookies=bkEnsemble.getBookies();\n  ZooKeeper zkClient=bkEnsemble.getZkClient();\n  Set<BookieId> defaultBookies=Sets.newHashSet(bookies[0].getBookieId(),bookies[1].getBookieId());\n  Set<BookieId> isolatedBookies=Sets.newHashSet(bookies[2].getBookieId(),bookies[3].getBookieId());\n  setDefaultIsolationGroup(brokerBookkeeperClientIsolationGroups,zkClient,defaultBookies);\n  setDefaultIsolationGroup(tenantNamespaceIsolationGroups,zkClient,isolatedBookies);\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setLoadManagerClassName(ModularLoadManagerImpl.class.getName());\n  config.setClusterName(cluster);\n  config.setWebServicePort(Optional.of(0));\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setAdvertisedAddress(\"localhost\");\n  config.setBookkeeperClientIsolationGroups(brokerBookkeeperClientIsolationGroups);\n  config.setManagedLedgerDefaultEnsembleSize(2);\n  config.setManagedLedgerDefaultWriteQuorum(2);\n  config.setManagedLedgerDefaultAckQuorum(2);\n  config.setAllowAutoTopicCreationType(\"non-partitioned\");\n  int totalEntriesPerLedger=20;\n  int totalLedgers=totalPublish / totalEntriesPerLedger;\n  config.setManagedLedgerMaxEntriesPerLedger(totalEntriesPerLedger);\n  config.setManagedLedgerMinLedgerRolloverTimeMinutes(0);\n  pulsarService=new PulsarService(config);\n  pulsarService.start();\n  PulsarAdmin admin=PulsarAdmin.builder().serviceHttpUrl(pulsarService.getWebServiceAddress()).build();\n  ClusterData clusterData=ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build();\n  admin.clusters().createCluster(cluster,clusterData);\n  TenantInfoImpl tenantInfo=new TenantInfoImpl(null,Sets.newHashSet(cluster));\n  admin.tenants().createTenant(tenant1,tenantInfo);\n  admin.namespaces().createNamespace(ns1);\n  admin.namespaces().createNamespace(ns2);\n  admin.namespaces().createNamespace(ns3);\n  admin.namespaces().createNamespace(ns4);\n  admin.namespaces().setBookieAffinityGroup(ns2,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  admin.namespaces().setBookieAffinityGroup(ns3,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  admin.namespaces().setBookieAffinityGroup(ns4,BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns2),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns3),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  assertEquals(admin.namespaces().getBookieAffinityGroup(ns4),BookieAffinityGroupData.builder().bookkeeperAffinityGroupPrimary(tenantNamespaceIsolationGroups).build());\n  try {\n    admin.namespaces().getBookieAffinityGroup(ns1);\n  }\n catch (  PulsarAdminException.NotFoundException e) {\n  }\n  @Cleanup PulsarClient pulsarClient=PulsarClient.builder().serviceUrl(pulsarService.getBrokerServiceUrl()).statsInterval(-1,TimeUnit.SECONDS).build();\n  PersistentTopic topic1=(PersistentTopic)createTopicAndPublish(pulsarClient,ns1,\"topic1\",totalPublish);\n  PersistentTopic topic2=(PersistentTopic)createTopicAndPublish(pulsarClient,ns2,\"topic1\",totalPublish);\n  PersistentTopic topic3=(PersistentTopic)createTopicAndPublish(pulsarClient,ns3,\"topic1\",totalPublish);\n  PersistentTopic topic4=(PersistentTopic)createTopicAndPublish(pulsarClient,ns4,\"topic1\",totalPublish);\n  Bookie bookie1=bookies[0].getBookie();\n  Field ledgerManagerField=Bookie.class.getDeclaredField(\"ledgerManager\");\n  ledgerManagerField.setAccessible(true);\n  LedgerManager ledgerManager=(LedgerManager)ledgerManagerField.get(bookie1);\n  ManagedLedgerImpl ml=(ManagedLedgerImpl)topic1.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),defaultBookies);\n  ml=(ManagedLedgerImpl)topic2.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ml=(ManagedLedgerImpl)topic3.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ml=(ManagedLedgerImpl)topic4.getManagedLedger();\n  assertEquals(ml.getLedgersInfoAsList().size(),totalLedgers);\n  assertAffinityBookies(ledgerManager,ml.getLedgersInfoAsList(),isolatedBookies);\n  ManagedLedgerClientFactory mlFactory=(ManagedLedgerClientFactory)pulsarService.getManagedLedgerClientFactory();\n  Map<EnsemblePlacementPolicyConfig,BookKeeper> bkPlacementPolicyToBkClientMap=mlFactory.getBkEnsemblePolicyToBookKeeperMap();\n  assertEquals(bkPlacementPolicyToBkClientMap.size(),1);\n  Map<EnsemblePlacementPolicyConfig,BookKeeper> bkMap=mlFactory.getBkEnsemblePolicyToBookKeeperMap();\n  BookKeeper bk=bkMap.values().iterator().next();\n  Method getConf=BookKeeper.class.getDeclaredMethod(\"getConf\");\n  getConf.setAccessible(true);\n  ClientConfiguration clientConf=(ClientConfiguration)getConf.invoke(bk);\n  assertEquals(clientConf.getProperty(REPP_DNS_RESOLVER_CLASS),ZkBookieRackAffinityMapping.class.getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 804,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 113
      },
      "nodeContext" : "ClusterData clusterData=ClusterData.builder().serviceUrl(pulsarService.getWebServiceAddress()).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.common.policies.data.ClusterData.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 171,
    "startColumnNumber" : 34,
    "endLineNumber" : 171,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}