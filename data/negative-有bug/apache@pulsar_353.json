{
  "id" : 353,
  "expression" : "readEntries",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarRecordCursor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "readEntries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 322,
      "startColumnNumber" : 52,
      "endLineNumber" : 322,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 322,
        "startColumnNumber" : 48,
        "endLineNumber" : 322,
        "endColumnNumber" : 63
      },
      "nodeContext" : "i < readEntries",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1529,
        "startLineNumber" : 322,
        "startColumnNumber" : 32,
        "endLineNumber" : 345,
        "endColumnNumber" : 33
      },
      "nodeContext" : "for (int i=0; i < readEntries; i++) {\n  MessageMetadata messageMetadata=new MessageMetadata().setProducerName(\"test-producer\").setSequenceId(positions.get(topic)).setPublishTime(System.currentTimeMillis());\n  if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n    messageMetadata.setPartitionKey(new String(schema.getKeySchema().encode(message.getKey()),Charset.forName(\"UTF-8\"))).setPartitionKeyB64Encoded(false);\n  }\n  ByteBuf dataPayload=io.netty.buffer.Unpooled.copiedBuffer(schema.encode(message));\n  ByteBuf byteBuf=serializeMetadataAndPayload(Commands.ChecksumType.Crc32c,messageMetadata,dataPayload);\n  entries.add(EntryImpl.create(0,positions.get(topic),byteBuf));\n  positions.put(topic,positions.get(topic) + 1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1744,
        "startLineNumber" : 320,
        "startColumnNumber" : 46,
        "endLineNumber" : 348,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  List<Entry> entries=new LinkedList<>();\n  for (int i=0; i < readEntries; i++) {\n    MessageMetadata messageMetadata=new MessageMetadata().setProducerName(\"test-producer\").setSequenceId(positions.get(topic)).setPublishTime(System.currentTimeMillis());\n    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n      messageMetadata.setPartitionKey(new String(schema.getKeySchema().encode(message.getKey()),Charset.forName(\"UTF-8\"))).setPartitionKeyB64Encoded(false);\n    }\n    ByteBuf dataPayload=io.netty.buffer.Unpooled.copiedBuffer(schema.encode(message));\n    ByteBuf byteBuf=serializeMetadataAndPayload(Commands.ChecksumType.Crc32c,messageMetadata,dataPayload);\n    entries.add(EntryImpl.create(0,positions.get(topic),byteBuf));\n    positions.put(topic,positions.get(topic) + 1);\n  }\n  callback.readEntriesComplete(entries,ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 319,
        "startColumnNumber" : 28,
        "endLineNumber" : 348,
        "endColumnNumber" : 29
      },
      "nodeContext" : "@Override public void run(){\n  List<Entry> entries=new LinkedList<>();\n  for (int i=0; i < readEntries; i++) {\n    MessageMetadata messageMetadata=new MessageMetadata().setProducerName(\"test-producer\").setSequenceId(positions.get(topic)).setPublishTime(System.currentTimeMillis());\n    if (KeyValueEncodingType.SEPARATED.equals(schema.getKeyValueEncodingType())) {\n      messageMetadata.setPartitionKey(new String(schema.getKeySchema().encode(message.getKey()),Charset.forName(\"UTF-8\"))).setPartitionKeyB64Encoded(false);\n    }\n    ByteBuf dataPayload=io.netty.buffer.Unpooled.copiedBuffer(schema.encode(message));\n    ByteBuf byteBuf=serializeMetadataAndPayload(Commands.ChecksumType.Crc32c,messageMetadata,dataPayload);\n    entries.add(EntryImpl.create(0,positions.get(topic),byteBuf));\n    positions.put(topic,positions.get(topic) + 1);\n  }\n  callback.readEntriesComplete(entries,ctx);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 322,
        "startColumnNumber" : 48,
        "endLineNumber" : 322,
        "endColumnNumber" : 63
      },
      "nodeContext" : "i < readEntries",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 322,
    "startColumnNumber" : 52,
    "endLineNumber" : 322,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}