{
  "id" : 135,
  "expression" : "ackWait * java.lang.Math.pow(2,attempts)",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/AuthFastLeaderElection.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ackWait * java.lang.Math.pow(2,attempts)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 85,
      "startLineNumber" : 535,
      "startColumnNumber" : 53,
      "endLineNumber" : 536,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 11,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 535,
        "startColumnNumber" : 43,
        "endLineNumber" : 536,
        "endColumnNumber" : 77
      },
      "nodeContext" : "timeout=ackWait * java.lang.Math.pow(2,attempts)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 535,
        "startColumnNumber" : 36,
        "endLineNumber" : 536,
        "endColumnNumber" : 78
      },
      "nodeContext" : "double timeout=ackWait * java.lang.Math.pow(2,attempts);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 534,
        "startColumnNumber" : 36,
        "endLineNumber" : 545,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  double timeout=ackWait * java.lang.Math.pow(2,attempts);\n  Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n    challengeMutex.put(m.tag,l);\n    l.wait((long)timeout);\n    myChallenge=challengeMap.containsKey(m.tag);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 534,
        "startColumnNumber" : 32,
        "endLineNumber" : 547,
        "endColumnNumber" : 33
      },
      "nodeContext" : "try {\n  double timeout=ackWait * java.lang.Math.pow(2,attempts);\n  Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n    challengeMutex.put(m.tag,l);\n    l.wait((long)timeout);\n    myChallenge=challengeMap.containsKey(m.tag);\n  }\n}\n catch (InterruptedException e) {\n  LOG.warn(\"Challenge request exception: \",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 527,
        "startColumnNumber" : 61,
        "endLineNumber" : 548,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n  sendqueue.offer(crequest);\n  try {\n    double timeout=ackWait * java.lang.Math.pow(2,attempts);\n    Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n      challengeMutex.put(m.tag,l);\n      l.wait((long)timeout);\n      myChallenge=challengeMap.containsKey(m.tag);\n    }\n  }\n catch (  InterruptedException e) {\n    LOG.warn(\"Challenge request exception: \",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 527,
        "startColumnNumber" : 28,
        "endLineNumber" : 548,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!myChallenge && authEnabled) {\n  ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n  sendqueue.offer(crequest);\n  try {\n    double timeout=ackWait * java.lang.Math.pow(2,attempts);\n    Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n      challengeMutex.put(m.tag,l);\n      l.wait((long)timeout);\n      myChallenge=challengeMap.containsKey(m.tag);\n    }\n  }\n catch (  InterruptedException e) {\n    LOG.warn(\"Challenge request exception: \",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3710,
        "startLineNumber" : 521,
        "startColumnNumber" : 28,
        "endLineNumber" : 596,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (!myChallenge && authEnabled) {\n    ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n    sendqueue.offer(crequest);\n    try {\n      double timeout=ackWait * java.lang.Math.pow(2,attempts);\n      Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n        challengeMutex.put(m.tag,l);\n        l.wait((long)timeout);\n        myChallenge=challengeMap.containsKey(m.tag);\n      }\n    }\n catch (    InterruptedException e) {\n      LOG.warn(\"Challenge request exception: \",e);\n    }\n  }\n  if (authEnabled && !myChallenge) {\n    attempts++;\n    continue;\n  }\n  if (authEnabled) {\n    requestBuffer.position(40);\n    requestBuffer.putLong(challengeMap.get(m.tag));\n  }\n  mySocket.send(requestPacket);\n  try {\n    Long l=Long.valueOf(m.tag);\n    double timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\n      ackMutex.put(m.tag,l);\n      l.wait((int)timeout);\n    }\n  }\n catch (  InterruptedException e) {\n    LOG.warn(\"Ack exception: \",e);\n  }\nsynchronized (acksqueue) {\n    for (int i=0; i < acksqueue.size(); ++i) {\n      Long newack=acksqueue.poll();\n      if (newack == m.tag) {\n        myAck=true;\n      }\n else       acksqueue.offer(newack);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3949,
        "startLineNumber" : 521,
        "startColumnNumber" : 24,
        "endLineNumber" : 601,
        "endColumnNumber" : 25
      },
      "nodeContext" : "try {\n  if (!myChallenge && authEnabled) {\n    ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n    sendqueue.offer(crequest);\n    try {\n      double timeout=ackWait * java.lang.Math.pow(2,attempts);\n      Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n        challengeMutex.put(m.tag,l);\n        l.wait((long)timeout);\n        myChallenge=challengeMap.containsKey(m.tag);\n      }\n    }\n catch (    InterruptedException e) {\n      LOG.warn(\"Challenge request exception: \",e);\n    }\n  }\n  if (authEnabled && !myChallenge) {\n    attempts++;\n    continue;\n  }\n  if (authEnabled) {\n    requestBuffer.position(40);\n    requestBuffer.putLong(challengeMap.get(m.tag));\n  }\n  mySocket.send(requestPacket);\n  try {\n    Long l=Long.valueOf(m.tag);\n    double timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\n      ackMutex.put(m.tag,l);\n      l.wait((int)timeout);\n    }\n  }\n catch (  InterruptedException e) {\n    LOG.warn(\"Ack exception: \",e);\n  }\nsynchronized (acksqueue) {\n    for (int i=0; i < acksqueue.size(); ++i) {\n      Long newack=acksqueue.poll();\n      if (newack == m.tag) {\n        myAck=true;\n      }\n else       acksqueue.offer(newack);\n    }\n  }\n}\n catch (IOException e) {\n  LOG.warn(\"Sending exception: \",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4397,
        "startLineNumber" : 520,
        "startColumnNumber" : 51,
        "endLineNumber" : 611,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  try {\n    if (!myChallenge && authEnabled) {\n      ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n      sendqueue.offer(crequest);\n      try {\n        double timeout=ackWait * java.lang.Math.pow(2,attempts);\n        Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n          challengeMutex.put(m.tag,l);\n          l.wait((long)timeout);\n          myChallenge=challengeMap.containsKey(m.tag);\n        }\n      }\n catch (      InterruptedException e) {\n        LOG.warn(\"Challenge request exception: \",e);\n      }\n    }\n    if (authEnabled && !myChallenge) {\n      attempts++;\n      continue;\n    }\n    if (authEnabled) {\n      requestBuffer.position(40);\n      requestBuffer.putLong(challengeMap.get(m.tag));\n    }\n    mySocket.send(requestPacket);\n    try {\n      Long l=Long.valueOf(m.tag);\n      double timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\n        ackMutex.put(m.tag,l);\n        l.wait((int)timeout);\n      }\n    }\n catch (    InterruptedException e) {\n      LOG.warn(\"Ack exception: \",e);\n    }\nsynchronized (acksqueue) {\n      for (int i=0; i < acksqueue.size(); ++i) {\n        Long newack=acksqueue.poll();\n        if (newack == m.tag) {\n          myAck=true;\n        }\n else         acksqueue.offer(newack);\n      }\n    }\n  }\n catch (  IOException e) {\n    LOG.warn(\"Sending exception: \",e);\n  }\n  if (myAck) {\n    if (challengeMap.get(m.tag) != null)     challengeMap.remove(m.tag);\n    return;\n  }\n else   attempts++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4428,
        "startLineNumber" : 520,
        "startColumnNumber" : 20,
        "endLineNumber" : 611,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (attempts < maxAttempts) {\n  try {\n    if (!myChallenge && authEnabled) {\n      ToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\n      sendqueue.offer(crequest);\n      try {\n        double timeout=ackWait * java.lang.Math.pow(2,attempts);\n        Long l=Long.valueOf(m.tag);\nsynchronized (l) {\n          challengeMutex.put(m.tag,l);\n          l.wait((long)timeout);\n          myChallenge=challengeMap.containsKey(m.tag);\n        }\n      }\n catch (      InterruptedException e) {\n        LOG.warn(\"Challenge request exception: \",e);\n      }\n    }\n    if (authEnabled && !myChallenge) {\n      attempts++;\n      continue;\n    }\n    if (authEnabled) {\n      requestBuffer.position(40);\n      requestBuffer.putLong(challengeMap.get(m.tag));\n    }\n    mySocket.send(requestPacket);\n    try {\n      Long l=Long.valueOf(m.tag);\n      double timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\n        ackMutex.put(m.tag,l);\n        l.wait((int)timeout);\n      }\n    }\n catch (    InterruptedException e) {\n      LOG.warn(\"Ack exception: \",e);\n    }\nsynchronized (acksqueue) {\n      for (int i=0; i < acksqueue.size(); ++i) {\n        Long newack=acksqueue.poll();\n        if (newack == m.tag) {\n          myAck=true;\n        }\n else         acksqueue.offer(newack);\n      }\n    }\n  }\n catch (  IOException e) {\n    LOG.warn(\"Sending exception: \",e);\n  }\n  if (myAck) {\n    if (challengeMap.get(m.tag) != null)     challengeMap.remove(m.tag);\n    return;\n  }\n else   attempts++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 285,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8532,
        "startLineNumber" : 442,
        "startColumnNumber" : 16,
        "endLineNumber" : 640,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (m.type) {\ncase 0:  requestBuffer.clear();\nrequestBuffer.putInt(ToSend.mType.crequest.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nzeroes=new byte[32];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nif (challengeMap.get(m.tag) == null) {\nmySocket.send(requestPacket);\n}\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 1:long newChallenge;\nif (addrChallengeMap.get(m.addr).containsKey(m.tag)) {\nnewChallenge=addrChallengeMap.get(m.addr).get(m.tag);\n}\n else {\nnewChallenge=genChallenge();\n}\naddrChallengeMap.get(m.addr).put(m.tag,newChallenge);\nrequestBuffer.clear();\nrequestBuffer.putInt(ToSend.mType.challenge.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(newChallenge);\nzeroes=new byte[24];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 2:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nzeroes=new byte[8];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\nboolean myChallenge=false;\nboolean myAck=false;\nwhile (attempts < maxAttempts) {\ntry {\nif (!myChallenge && authEnabled) {\nToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\nsendqueue.offer(crequest);\ntry {\ndouble timeout=ackWait * java.lang.Math.pow(2,attempts);\nLong l=Long.valueOf(m.tag);\nsynchronized (l) {\nchallengeMutex.put(m.tag,l);\nl.wait((long)timeout);\nmyChallenge=challengeMap.containsKey(m.tag);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Challenge request exception: \",e);\n}\n}\nif (authEnabled && !myChallenge) {\nattempts++;\ncontinue;\n}\nif (authEnabled) {\nrequestBuffer.position(40);\nrequestBuffer.putLong(challengeMap.get(m.tag));\n}\nmySocket.send(requestPacket);\ntry {\nLong l=Long.valueOf(m.tag);\ndouble timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\nackMutex.put(m.tag,l);\nl.wait((int)timeout);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ack exception: \",e);\n}\nsynchronized (acksqueue) {\nfor (int i=0; i < acksqueue.size(); ++i) {\nLong newack=acksqueue.poll();\nif (newack == m.tag) {\nmyAck=true;\n}\n else acksqueue.offer(newack);\n}\n}\n}\n catch (IOException e) {\nLOG.warn(\"Sending exception: \",e);\n}\nif (myAck) {\nif (challengeMap.get(m.tag) != null) challengeMap.remove(m.tag);\nreturn;\n}\n else attempts++;\n}\nif (m.epoch == logicalclock) {\nchallengeMap.remove(m.tag);\nsendqueue.offer(m);\n}\nbreak;\ncase 3:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending ack: \",e);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 697,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8882,
        "startLineNumber" : 434,
        "startColumnNumber" : 43,
        "endLineNumber" : 641,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int attempts=0;\n  byte zeroes[];\n  byte requestBytes[]=new byte[48];\n  DatagramPacket requestPacket=new DatagramPacket(requestBytes,requestBytes.length);\n  ByteBuffer requestBuffer=ByteBuffer.wrap(requestBytes);\nswitch (m.type) {\ncase 0:    requestBuffer.clear();\n  requestBuffer.putInt(ToSend.mType.crequest.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nzeroes=new byte[32];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nif (challengeMap.get(m.tag) == null) {\nmySocket.send(requestPacket);\n}\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 1:long newChallenge;\nif (addrChallengeMap.get(m.addr).containsKey(m.tag)) {\nnewChallenge=addrChallengeMap.get(m.addr).get(m.tag);\n}\n else {\nnewChallenge=genChallenge();\n}\naddrChallengeMap.get(m.addr).put(m.tag,newChallenge);\nrequestBuffer.clear();\nrequestBuffer.putInt(ToSend.mType.challenge.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(newChallenge);\nzeroes=new byte[24];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 2:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nzeroes=new byte[8];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\nboolean myChallenge=false;\nboolean myAck=false;\nwhile (attempts < maxAttempts) {\ntry {\nif (!myChallenge && authEnabled) {\nToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\nsendqueue.offer(crequest);\ntry {\ndouble timeout=ackWait * java.lang.Math.pow(2,attempts);\nLong l=Long.valueOf(m.tag);\nsynchronized (l) {\nchallengeMutex.put(m.tag,l);\nl.wait((long)timeout);\nmyChallenge=challengeMap.containsKey(m.tag);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Challenge request exception: \",e);\n}\n}\nif (authEnabled && !myChallenge) {\nattempts++;\ncontinue;\n}\nif (authEnabled) {\nrequestBuffer.position(40);\nrequestBuffer.putLong(challengeMap.get(m.tag));\n}\nmySocket.send(requestPacket);\ntry {\nLong l=Long.valueOf(m.tag);\ndouble timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\nackMutex.put(m.tag,l);\nl.wait((int)timeout);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ack exception: \",e);\n}\nsynchronized (acksqueue) {\nfor (int i=0; i < acksqueue.size(); ++i) {\nLong newack=acksqueue.poll();\nif (newack == m.tag) {\nmyAck=true;\n}\n else acksqueue.offer(newack);\n}\n}\n}\n catch (IOException e) {\nLOG.warn(\"Sending exception: \",e);\n}\nif (myAck) {\nif (challengeMap.get(m.tag) != null) challengeMap.remove(m.tag);\nreturn;\n}\n else attempts++;\n}\nif (m.epoch == logicalclock) {\nchallengeMap.remove(m.tag);\nsendqueue.offer(m);\n}\nbreak;\ncase 3:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending ack: \",e);\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 739,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8913,
        "startLineNumber" : 434,
        "startColumnNumber" : 12,
        "endLineNumber" : 641,
        "endColumnNumber" : 13
      },
      "nodeContext" : "private void process(ToSend m){\n  int attempts=0;\n  byte zeroes[];\n  byte requestBytes[]=new byte[48];\n  DatagramPacket requestPacket=new DatagramPacket(requestBytes,requestBytes.length);\n  ByteBuffer requestBuffer=ByteBuffer.wrap(requestBytes);\nswitch (m.type) {\ncase 0:    requestBuffer.clear();\n  requestBuffer.putInt(ToSend.mType.crequest.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nzeroes=new byte[32];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nif (challengeMap.get(m.tag) == null) {\nmySocket.send(requestPacket);\n}\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 1:long newChallenge;\nif (addrChallengeMap.get(m.addr).containsKey(m.tag)) {\nnewChallenge=addrChallengeMap.get(m.addr).get(m.tag);\n}\n else {\nnewChallenge=genChallenge();\n}\naddrChallengeMap.get(m.addr).put(m.tag,newChallenge);\nrequestBuffer.clear();\nrequestBuffer.putInt(ToSend.mType.challenge.ordinal());\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(newChallenge);\nzeroes=new byte[24];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending challenge: \",e);\n}\nbreak;\ncase 2:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nzeroes=new byte[8];\nrequestBuffer.put(zeroes);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\nboolean myChallenge=false;\nboolean myAck=false;\nwhile (attempts < maxAttempts) {\ntry {\nif (!myChallenge && authEnabled) {\nToSend crequest=new ToSend(ToSend.mType.crequest,m.tag,m.leader,m.zxid,m.epoch,QuorumPeer.ServerState.LOOKING,m.addr);\nsendqueue.offer(crequest);\ntry {\ndouble timeout=ackWait * java.lang.Math.pow(2,attempts);\nLong l=Long.valueOf(m.tag);\nsynchronized (l) {\nchallengeMutex.put(m.tag,l);\nl.wait((long)timeout);\nmyChallenge=challengeMap.containsKey(m.tag);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Challenge request exception: \",e);\n}\n}\nif (authEnabled && !myChallenge) {\nattempts++;\ncontinue;\n}\nif (authEnabled) {\nrequestBuffer.position(40);\nrequestBuffer.putLong(challengeMap.get(m.tag));\n}\nmySocket.send(requestPacket);\ntry {\nLong l=Long.valueOf(m.tag);\ndouble timeout=ackWait * java.lang.Math.pow(10,attempts);\nsynchronized (l) {\nackMutex.put(m.tag,l);\nl.wait((int)timeout);\n}\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ack exception: \",e);\n}\nsynchronized (acksqueue) {\nfor (int i=0; i < acksqueue.size(); ++i) {\nLong newack=acksqueue.poll();\nif (newack == m.tag) {\nmyAck=true;\n}\n else acksqueue.offer(newack);\n}\n}\n}\n catch (IOException e) {\nLOG.warn(\"Sending exception: \",e);\n}\nif (myAck) {\nif (challengeMap.get(m.tag) != null) challengeMap.remove(m.tag);\nreturn;\n}\n else attempts++;\n}\nif (m.epoch == logicalclock) {\nchallengeMap.remove(m.tag);\nsendqueue.offer(m);\n}\nbreak;\ncase 3:requestBuffer.clear();\nrequestBuffer.putInt(m.type);\nrequestBuffer.putLong(m.tag);\nrequestBuffer.putInt(m.state.ordinal());\nrequestBuffer.putLong(m.leader);\nrequestBuffer.putLong(m.zxid);\nrequestBuffer.putLong(m.epoch);\nrequestPacket.setLength(48);\nrequestPacket.setSocketAddress(m.addr);\ntry {\nmySocket.send(requestPacket);\n}\n catch (IOException e) {\nLOG.warn(\"Exception while sending ack: \",e);\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 747,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 535,
        "startColumnNumber" : 36,
        "endLineNumber" : 536,
        "endColumnNumber" : 78
      },
      "nodeContext" : "double timeout=ackWait * java.lang.Math.pow(2,attempts);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 8,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 85,
    "startLineNumber" : 535,
    "startColumnNumber" : 53,
    "endLineNumber" : 536,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}