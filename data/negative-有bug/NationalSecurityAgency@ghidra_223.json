{
  "id" : 223,
  "expression" : "tbValue == 0",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Processors/ARM/src/main/java/ghidra/program/emulation/ARMEmulateInstructionStateModifier.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tbValue == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 165,
      "startColumnNumber" : 11,
      "endLineNumber" : 165,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 165,
        "startColumnNumber" : 7,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (tbValue == 0) {\n  if ((currentAddress.getOffset() & 0x1) == 1) {\n    throw new LowlevelError(\"Flow to odd address occurred without setting TB register (Thumb mode)\");\n  }\n  emu.setContextRegisterValue(aMode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (tbValue == 1) {\n  emu.setContextRegisterValue(tMode);\n  if ((currentAddress.getOffset() & 0x1) == 1) {\n    emulate.setExecuteAddress(currentAddress.previous());\n  }\n}\n else if (tbValue == 0) {\n  if ((currentAddress.getOffset() & 0x1) == 1) {\n    throw new LowlevelError(\"Flow to odd address occurred without setting TB register (Thumb mode)\");\n  }\n  emu.setContextRegisterValue(aMode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1091,
        "startLineNumber" : 143,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (TModeReg == null) {\n    return;\n  }\n  if (lastPcodeIndex < 0) {\n    return;\n  }\n  int lastOp=lastExecutePcode[lastPcodeIndex].getOpcode();\n  if (lastOp != PcodeOp.BRANCH && lastOp != PcodeOp.CBRANCH && lastOp != PcodeOp.BRANCHIND && lastOp != PcodeOp.CALL && lastOp != PcodeOp.CALLIND && lastOp != PcodeOp.RETURN) {\n    return;\n  }\n  long tbValue=emu.getMemoryState().getValue(TBreg);\n  if (tbValue == 1) {\n    emu.setContextRegisterValue(tMode);\n    if ((currentAddress.getOffset() & 0x1) == 1) {\n      emulate.setExecuteAddress(currentAddress.previous());\n    }\n  }\n else   if (tbValue == 0) {\n    if ((currentAddress.getOffset() & 0x1) == 1) {\n      throw new LowlevelError(\"Flow to odd address occurred without setting TB register (Thumb mode)\");\n    }\n    emu.setContextRegisterValue(aMode);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1541,
        "startLineNumber" : 134,
        "startColumnNumber" : 1,
        "endLineNumber" : 175,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handle odd addresses which may occur when jumping/returning indirectly to Thumb mode.  It is assumed that language will properly handle context changes during the flow of execution, we need only fix the current program counter.\n */\n@Override public void postExecuteCallback(Emulate emulate,Address lastExecuteAddress,PcodeOp[] lastExecutePcode,int lastPcodeIndex,Address currentAddress) throws LowlevelError {\n  if (TModeReg == null) {\n    return;\n  }\n  if (lastPcodeIndex < 0) {\n    return;\n  }\n  int lastOp=lastExecutePcode[lastPcodeIndex].getOpcode();\n  if (lastOp != PcodeOp.BRANCH && lastOp != PcodeOp.CBRANCH && lastOp != PcodeOp.BRANCHIND && lastOp != PcodeOp.CALL && lastOp != PcodeOp.CALLIND && lastOp != PcodeOp.RETURN) {\n    return;\n  }\n  long tbValue=emu.getMemoryState().getValue(TBreg);\n  if (tbValue == 1) {\n    emu.setContextRegisterValue(tMode);\n    if ((currentAddress.getOffset() & 0x1) == 1) {\n      emulate.setExecuteAddress(currentAddress.previous());\n    }\n  }\n else   if (tbValue == 0) {\n    if ((currentAddress.getOffset() & 0x1) == 1) {\n      throw new LowlevelError(\"Flow to odd address occurred without setting TB register (Thumb mode)\");\n    }\n    emu.setContextRegisterValue(aMode);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 165,
        "startColumnNumber" : 7,
        "endLineNumber" : 174,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (tbValue == 0) {\n  if ((currentAddress.getOffset() & 0x1) == 1) {\n    throw new LowlevelError(\"Flow to odd address occurred without setting TB register (Thumb mode)\");\n  }\n  emu.setContextRegisterValue(aMode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 165,
    "startColumnNumber" : 11,
    "endLineNumber" : 165,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}