{
  "id" : 146,
  "expression" : "(clockwise ? 1 : 0) * 2 - 1",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterBlurControl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(clockwise ? 1 : 0) * 2 - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 335,
      "startColumnNumber" : 42,
      "endLineNumber" : 335,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 335,
        "startColumnNumber" : 41,
        "endLineNumber" : 335,
        "endColumnNumber" : 70
      },
      "nodeContext" : "((clockwise ? 1 : 0) * 2 - 1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 335,
        "startColumnNumber" : 37,
        "endLineNumber" : 335,
        "endColumnNumber" : 70
      },
      "nodeContext" : "d * ((clockwise ? 1 : 0) * 2 - 1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 335,
        "startColumnNumber" : 37,
        "endLineNumber" : 335,
        "endColumnNumber" : 88
      },
      "nodeContext" : "d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 335,
        "startColumnNumber" : 37,
        "endLineNumber" : 335,
        "endColumnNumber" : 96
      },
      "nodeContext" : "d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 335,
        "startColumnNumber" : 28,
        "endLineNumber" : 335,
        "endColumnNumber" : 96
      },
      "nodeContext" : "angle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f",
      "nodeType" : "Assignment",
      "astNodeNumber" : 22,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 335,
        "startColumnNumber" : 28,
        "endLineNumber" : 335,
        "endColumnNumber" : 97
      },
      "nodeContext" : "angle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2762,
        "startLineNumber" : 282,
        "startColumnNumber" : 60,
        "endLineNumber" : 339,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  float translationX=locationX - pointerStartX;\n  float translationY=locationY - pointerStartY;\n  boolean clockwise=false;\n  boolean right=locationX > actualCenterPoint.x;\n  boolean bottom=locationY > actualCenterPoint.y;\n  final boolean b=Math.abs(translationY) > Math.abs(translationX);\n  if (!right && !bottom) {\n    if (b) {\n      if (translationY < 0) {\n        clockwise=true;\n      }\n    }\n else {\n      if (translationX > 0) {\n        clockwise=true;\n      }\n    }\n  }\n else   if (right && !bottom) {\n    if (b) {\n      if (translationY > 0) {\n        clockwise=true;\n      }\n    }\n else {\n      if (translationX > 0) {\n        clockwise=true;\n      }\n    }\n  }\n else   if (right && bottom) {\n    if (b) {\n      if (translationY > 0) {\n        clockwise=true;\n      }\n    }\n else {\n      if (translationX < 0) {\n        clockwise=true;\n      }\n    }\n  }\n else {\n    if (b) {\n      if (translationY < 0) {\n        clockwise=true;\n      }\n    }\n else {\n      if (translationX < 0) {\n        clockwise=true;\n      }\n    }\n  }\n  float d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\n  angle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\n  pointerStartX=locationX;\n  pointerStartY=locationY;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4611,
        "startLineNumber" : 260,
        "startColumnNumber" : 20,
        "endLineNumber" : 344,
        "endColumnNumber" : 21
      },
      "nodeContext" : "switch (activeControl) {\ncase BlurViewActiveControlCenter:{\n    float translationX=locationX - pointerStartX;\n    float translationY=locationY - pointerStartY;\n    Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n    Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n    centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n  }\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=distance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4651,
        "startLineNumber" : 259,
        "startColumnNumber" : 31,
        "endLineNumber" : 345,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n      float translationX=locationX - pointerStartX;\n      float translationY=locationY - pointerStartY;\n      Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n      Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n      centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n    }\n  break;\ncase BlurViewActiveControlInnerRadius:{\n  float d=distance - startDistance;\n  falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 429,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6495,
        "startLineNumber" : 259,
        "startColumnNumber" : 16,
        "endLineNumber" : 371,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type == 0) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n      float translationX=locationX - pointerStartX;\n      float translationY=locationY - pointerStartY;\n      Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n      Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n      centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n    }\n  break;\ncase BlurViewActiveControlInnerRadius:{\n  float d=distance - startDistance;\n  falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n else if (type == 1) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nRect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\nPoint newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\ncenterPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n}\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=radialDistance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=radialDistance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 657,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 6737,
        "startLineNumber" : 258,
        "startColumnNumber" : 38,
        "endLineNumber" : 377,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (type == 0) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n        float translationX=locationX - pointerStartX;\n        float translationY=locationY - pointerStartY;\n        Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n        Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n        centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n      }\n    break;\ncase BlurViewActiveControlInnerRadius:{\n    float d=distance - startDistance;\n    falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n  }\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n else if (type == 1) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nRect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\nPoint newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\ncenterPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n}\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=radialDistance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=radialDistance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ndefault:break;\n}\n}\ninvalidate();\nif (delegate != null) {\ndelegate.valueChanged(centerPoint,falloff,size,degreesToRadians(angle) + (float)Math.PI / 2.0f);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 684,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9724,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 390,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase GestureStateBegan:{\n    pointerStartX=event.getX();\n    pointerStartY=event.getY();\n    boolean close=Math.abs(outerRadius - innerRadius) < BlurInsetProximity;\n    float innerRadiusOuterInset=close ? 0 : BlurViewRadiusInset;\n    float outerRadiusInnerInset=close ? 0 : BlurViewRadiusInset;\n    if (type == 0) {\n      if (radialDistance < BlurViewCenterInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n        startCenterPoint=actualCenterPoint;\n      }\n else       if (distance > innerRadius - BlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n        startDistance=distance;\n        startRadius=innerRadius;\n      }\n else       if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + BlurViewRadiusInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n        startDistance=distance;\n        startRadius=outerRadius;\n      }\n else       if (distance <= innerRadius - BlurViewRadiusInset || distance >= outerRadius + BlurViewRadiusInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlRotation;\n      }\n    }\n else     if (type == 1) {\n      if (radialDistance < BlurViewCenterInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n        startCenterPoint=actualCenterPoint;\n      }\n else       if (radialDistance > innerRadius - BlurViewRadiusInset && radialDistance < innerRadius + innerRadiusOuterInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n        startDistance=radialDistance;\n        startRadius=innerRadius;\n      }\n else       if (radialDistance > outerRadius - outerRadiusInnerInset && radialDistance < outerRadius + BlurViewRadiusInset) {\n        activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n        startDistance=radialDistance;\n        startRadius=outerRadius;\n      }\n    }\n    setSelected(true,true);\n  }\nbreak;\ncase GestureStateChanged:{\nif (type == 0) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n      float translationX=locationX - pointerStartX;\n      float translationY=locationY - pointerStartY;\n      Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n      Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n      centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n    }\n  break;\ncase BlurViewActiveControlInnerRadius:{\n  float d=distance - startDistance;\n  falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX > 0) {\nclockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\nclockwise=true;\n}\n}\n else {\nif (translationX < 0) {\nclockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n else if (type == 1) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nRect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\nPoint newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\ncenterPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n}\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=radialDistance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=radialDistance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ndefault:break;\n}\n}\ninvalidate();\nif (delegate != null) {\ndelegate.valueChanged(centerPoint,falloff,size,degreesToRadians(angle) + (float)Math.PI / 2.0f);\n}\n}\nbreak;\ncase GestureStateEnded:case GestureStateCancelled:case GestureStateFailed:{\nactiveControl=BlurViewActiveControl.BlurViewActiveControlNone;\nsetSelected(false,true);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 926,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10392,
        "startLineNumber" : 204,
        "startColumnNumber" : 57,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float locationX=event.getX();\n  float locationY=event.getY();\n  Point actualCenterPoint=getActualCenterPoint();\n  float dx=locationX - actualCenterPoint.x;\n  float dy=locationY - actualCenterPoint.y;\n  float radialDistance=(float)Math.sqrt(dx * dx + dy * dy);\n  float shorterSide=Math.min(actualAreaSize.width,actualAreaSize.height);\n  float innerRadius=shorterSide * falloff;\n  float outerRadius=shorterSide * size;\n  float distance=(float)Math.abs(dx * Math.cos(degreesToRadians(angle) + Math.PI / 2.0f) + dy * Math.sin(degreesToRadians(angle) + Math.PI / 2.0f));\nswitch (state) {\ncase GestureStateBegan:{\n      pointerStartX=event.getX();\n      pointerStartY=event.getY();\n      boolean close=Math.abs(outerRadius - innerRadius) < BlurInsetProximity;\n      float innerRadiusOuterInset=close ? 0 : BlurViewRadiusInset;\n      float outerRadiusInnerInset=close ? 0 : BlurViewRadiusInset;\n      if (type == 0) {\n        if (radialDistance < BlurViewCenterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n          startCenterPoint=actualCenterPoint;\n        }\n else         if (distance > innerRadius - BlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n          startDistance=distance;\n          startRadius=innerRadius;\n        }\n else         if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n          startDistance=distance;\n          startRadius=outerRadius;\n        }\n else         if (distance <= innerRadius - BlurViewRadiusInset || distance >= outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlRotation;\n        }\n      }\n else       if (type == 1) {\n        if (radialDistance < BlurViewCenterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n          startCenterPoint=actualCenterPoint;\n        }\n else         if (radialDistance > innerRadius - BlurViewRadiusInset && radialDistance < innerRadius + innerRadiusOuterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n          startDistance=radialDistance;\n          startRadius=innerRadius;\n        }\n else         if (radialDistance > outerRadius - outerRadiusInnerInset && radialDistance < outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n          startDistance=radialDistance;\n          startRadius=outerRadius;\n        }\n      }\n      setSelected(true,true);\n    }\n  break;\ncase GestureStateChanged:{\n  if (type == 0) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n        float translationX=locationX - pointerStartX;\n        float translationY=locationY - pointerStartY;\n        Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n        Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n        centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n      }\n    break;\ncase BlurViewActiveControlInnerRadius:{\n    float d=distance - startDistance;\n    falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n  }\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n else if (type == 1) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nRect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\nPoint newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\ncenterPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n}\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=radialDistance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=radialDistance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ndefault:break;\n}\n}\ninvalidate();\nif (delegate != null) {\ndelegate.valueChanged(centerPoint,falloff,size,degreesToRadians(angle) + (float)Math.PI / 2.0f);\n}\n}\nbreak;\ncase GestureStateEnded:case GestureStateCancelled:case GestureStateFailed:{\nactiveControl=BlurViewActiveControl.BlurViewActiveControlNone;\nsetSelected(false,true);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1047,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10445,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 391,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handlePan(int state,MotionEvent event){\n  float locationX=event.getX();\n  float locationY=event.getY();\n  Point actualCenterPoint=getActualCenterPoint();\n  float dx=locationX - actualCenterPoint.x;\n  float dy=locationY - actualCenterPoint.y;\n  float radialDistance=(float)Math.sqrt(dx * dx + dy * dy);\n  float shorterSide=Math.min(actualAreaSize.width,actualAreaSize.height);\n  float innerRadius=shorterSide * falloff;\n  float outerRadius=shorterSide * size;\n  float distance=(float)Math.abs(dx * Math.cos(degreesToRadians(angle) + Math.PI / 2.0f) + dy * Math.sin(degreesToRadians(angle) + Math.PI / 2.0f));\nswitch (state) {\ncase GestureStateBegan:{\n      pointerStartX=event.getX();\n      pointerStartY=event.getY();\n      boolean close=Math.abs(outerRadius - innerRadius) < BlurInsetProximity;\n      float innerRadiusOuterInset=close ? 0 : BlurViewRadiusInset;\n      float outerRadiusInnerInset=close ? 0 : BlurViewRadiusInset;\n      if (type == 0) {\n        if (radialDistance < BlurViewCenterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n          startCenterPoint=actualCenterPoint;\n        }\n else         if (distance > innerRadius - BlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n          startDistance=distance;\n          startRadius=innerRadius;\n        }\n else         if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n          startDistance=distance;\n          startRadius=outerRadius;\n        }\n else         if (distance <= innerRadius - BlurViewRadiusInset || distance >= outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlRotation;\n        }\n      }\n else       if (type == 1) {\n        if (radialDistance < BlurViewCenterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlCenter;\n          startCenterPoint=actualCenterPoint;\n        }\n else         if (radialDistance > innerRadius - BlurViewRadiusInset && radialDistance < innerRadius + innerRadiusOuterInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlInnerRadius;\n          startDistance=radialDistance;\n          startRadius=innerRadius;\n        }\n else         if (radialDistance > outerRadius - outerRadiusInnerInset && radialDistance < outerRadius + BlurViewRadiusInset) {\n          activeControl=BlurViewActiveControl.BlurViewActiveControlOuterRadius;\n          startDistance=radialDistance;\n          startRadius=outerRadius;\n        }\n      }\n      setSelected(true,true);\n    }\n  break;\ncase GestureStateChanged:{\n  if (type == 0) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\n        float translationX=locationX - pointerStartX;\n        float translationY=locationY - pointerStartY;\n        Rect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\n        Point newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\n        centerPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n      }\n    break;\ncase BlurViewActiveControlInnerRadius:{\n    float d=distance - startDistance;\n    falloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n  }\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=distance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ncase BlurViewActiveControlRotation:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nboolean clockwise=false;\nboolean right=locationX > actualCenterPoint.x;\nboolean bottom=locationY > actualCenterPoint.y;\nfinal boolean b=Math.abs(translationY) > Math.abs(translationX);\nif (!right && !bottom) {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && !bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX > 0) {\n  clockwise=true;\n}\n}\n}\n else if (right && bottom) {\nif (b) {\nif (translationY > 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\n else {\nif (b) {\nif (translationY < 0) {\n  clockwise=true;\n}\n}\n else {\nif (translationX < 0) {\n  clockwise=true;\n}\n}\n}\nfloat d=(float)Math.sqrt(translationX * translationX + translationY * translationY);\nangle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\npointerStartX=locationX;\npointerStartY=locationY;\n}\nbreak;\ndefault:break;\n}\n}\n else if (type == 1) {\nswitch (activeControl) {\ncase BlurViewActiveControlCenter:{\nfloat translationX=locationX - pointerStartX;\nfloat translationY=locationY - pointerStartY;\nRect actualArea=new Rect((getWidth() - actualAreaSize.width) / 2,(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0) + (getHeight() - actualAreaSize.height) / 2,actualAreaSize.width,actualAreaSize.height);\nPoint newPoint=new Point(Math.max(actualArea.x,Math.min(actualArea.x + actualArea.width,startCenterPoint.x + translationX)),Math.max(actualArea.y,Math.min(actualArea.y + actualArea.height,startCenterPoint.y + translationY)));\ncenterPoint=new Point((newPoint.x - actualArea.x) / actualAreaSize.width,((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);\n}\nbreak;\ncase BlurViewActiveControlInnerRadius:{\nfloat d=radialDistance - startDistance;\nfalloff=Math.min(Math.max(BlurMinimumFalloff,(startRadius + d) / shorterSide),size - BlurMinimumDifference);\n}\nbreak;\ncase BlurViewActiveControlOuterRadius:{\nfloat d=radialDistance - startDistance;\nsize=Math.max(falloff + BlurMinimumDifference,(startRadius + d) / shorterSide);\n}\nbreak;\ndefault:break;\n}\n}\ninvalidate();\nif (delegate != null) {\ndelegate.valueChanged(centerPoint,falloff,size,degreesToRadians(angle) + (float)Math.PI / 2.0f);\n}\n}\nbreak;\ncase GestureStateEnded:case GestureStateCancelled:case GestureStateFailed:{\nactiveControl=BlurViewActiveControl.BlurViewActiveControlNone;\nsetSelected(false,true);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1058,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 335,
        "startColumnNumber" : 28,
        "endLineNumber" : 335,
        "endColumnNumber" : 97
      },
      "nodeContext" : "angle+=d * ((clockwise ? 1 : 0) * 2 - 1) / (float)Math.PI / 1.15f;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 11
    },
    "tokenLength" : 7,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 335,
    "startColumnNumber" : 42,
    "endLineNumber" : 335,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}