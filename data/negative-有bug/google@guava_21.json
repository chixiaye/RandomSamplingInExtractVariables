{
  "id" : 21,
  "expression" : "AbstractGraphTest",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AbstractGraphTest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 50,
      "startColumnNumber" : 4,
      "endLineNumber" : 50,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 44
      },
      "nodeContext" : "AbstractGraphTest.validateGraph(asGraph)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 45
      },
      "nodeContext" : "AbstractGraphTest.validateGraph(asGraph);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 45,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@After public void validateGraphState(){\n  assertStronglyEquivalent(graph,Graphs.copyOf(graph));\n  assertStronglyEquivalent(graph,ImmutableValueGraph.copyOf(graph));\n  Graph<Integer> asGraph=graph.asGraph();\n  AbstractGraphTest.validateGraph(asGraph);\n  assertThat(graph.nodes()).isEqualTo(asGraph.nodes());\n  assertThat(graph.edges()).isEqualTo(asGraph.edges());\n  assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n  assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());\n  assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());\n  assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n  for (  Integer node : graph.nodes()) {\n    assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n    assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n    assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));\n    assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));\n    assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));\n    assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));\n    for (    Integer otherNode : graph.nodes()) {\n      boolean hasEdge=graph.hasEdgeConnecting(node,otherNode);\n      assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node,otherNode));\n      assertThat(graph.edgeValueOrDefault(node,otherNode,null) != null).isEqualTo(hasEdge);\n      assertThat(!graph.edgeValueOrDefault(node,otherNode,DEFAULT).equals(DEFAULT)).isEqualTo(hasEdge);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 45
      },
      "nodeContext" : "AbstractGraphTest.validateGraph(asGraph);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.common.graph.AbstractGraphTest"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 50,
    "startColumnNumber" : 4,
    "endLineNumber" : 50,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}