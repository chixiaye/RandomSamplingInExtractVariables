{
  "id" : 88,
  "expression" : "f.cost",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/Boruvkas.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "f.cost",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 167,
      "startColumnNumber" : 14,
      "endLineNumber" : 167,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 167,
        "startColumnNumber" : 14,
        "endLineNumber" : 167,
        "endColumnNumber" : 29
      },
      "nodeContext" : "f.cost < e.cost",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 167,
        "startColumnNumber" : 10,
        "endLineNumber" : 170,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (f.cost < e.cost) {\n  System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 166,
        "startColumnNumber" : 33,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (f.cost < e.cost) {\n    System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!uf.connected(x,y)) {\n  if (f.cost < e.cost) {\n    System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 164,
        "startColumnNumber" : 27,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int x=f.u, y=f.v;\n  if (!uf.connected(x,y)) {\n    if (f.cost < e.cost) {\n      System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 164,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Edge f : graph) {\n  int x=f.u, y=f.v;\n  if (!uf.connected(x,y)) {\n    if (f.cost < e.cost) {\n      System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 499,
        "startLineNumber" : 154,
        "startColumnNumber" : 23,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  uf=new UnionFind(n);\n  for (  Edge f : mst) {\n    int x=f.u, y=f.v;\n    if (f != e)     uf.union(x,y);\n  }\n  for (  Edge f : graph) {\n    int x=f.u, y=f.v;\n    if (!uf.connected(x,y)) {\n      if (f.cost < e.cost) {\n        System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Edge e : mst) {\n  uf=new UnionFind(n);\n  for (  Edge f : mst) {\n    int x=f.u, y=f.v;\n    if (f != e)     uf.union(x,y);\n  }\n  for (  Edge f : graph) {\n    int x=f.u, y=f.v;\n    if (!uf.connected(x,y)) {\n      if (f.cost < e.cost) {\n        System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n        return false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 129,
        "startColumnNumber" : 26,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!mstExists)   return true;\n  UnionFind uf=new UnionFind(n);\n  for (  Edge e : mst) {\n    int u=e.u, v=e.v;\n    if (uf.connected(u,v)) {\n      System.err.println(\"Not a forest\");\n      return false;\n    }\n    uf.union(u,v);\n  }\n  for (  Edge e : mst) {\n    int u=e.u, v=e.v;\n    if (!uf.connected(u,v)) {\n      System.err.println(\"Not a spanning forest\");\n      return false;\n    }\n  }\n  for (  Edge e : mst) {\n    uf=new UnionFind(n);\n    for (    Edge f : mst) {\n      int x=f.u, y=f.v;\n      if (f != e)       uf.union(x,y);\n    }\n    for (    Edge f : graph) {\n      int x=f.u, y=f.v;\n      if (!uf.connected(x,y)) {\n        if (f.cost < e.cost) {\n          System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private boolean check(){\n  if (!mstExists)   return true;\n  UnionFind uf=new UnionFind(n);\n  for (  Edge e : mst) {\n    int u=e.u, v=e.v;\n    if (uf.connected(u,v)) {\n      System.err.println(\"Not a forest\");\n      return false;\n    }\n    uf.union(u,v);\n  }\n  for (  Edge e : mst) {\n    int u=e.u, v=e.v;\n    if (!uf.connected(u,v)) {\n      System.err.println(\"Not a spanning forest\");\n      return false;\n    }\n  }\n  for (  Edge e : mst) {\n    uf=new UnionFind(n);\n    for (    Edge f : mst) {\n      int x=f.u, y=f.v;\n      if (f != e)       uf.union(x,y);\n    }\n    for (    Edge f : graph) {\n      int x=f.u, y=f.v;\n      if (!uf.connected(x,y)) {\n        if (f.cost < e.cost) {\n          System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 167,
        "startColumnNumber" : 14,
        "endLineNumber" : 167,
        "endColumnNumber" : 29
      },
      "nodeContext" : "f.cost < e.cost",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 167,
    "startColumnNumber" : 14,
    "endLineNumber" : 167,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}