{
  "id" : 199,
  "expression" : "occurrences == 0",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "occurrences == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 76,
      "startColumnNumber" : 8,
      "endLineNumber" : 76,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (occurrences == 0) {\n  return count(element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 75,
        "startColumnNumber" : 71,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (occurrences == 0) {\n    return count(element);\n  }\n  checkArgument(occurrences > 0,\"occurrences cannot be negative: %s\",occurrences);\n  int entryIndex=backingMap.indexOf(element);\n  if (entryIndex == -1) {\n    backingMap.put(element,occurrences);\n    size+=occurrences;\n    return 0;\n  }\n  int oldCount=backingMap.getValue(entryIndex);\n  long newCount=(long)oldCount + (long)occurrences;\n  checkArgument(newCount <= Integer.MAX_VALUE,\"too many occurrences: %s\",newCount);\n  backingMap.setValue(entryIndex,(int)newCount);\n  size+=occurrences;\n  return oldCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * {@inheritDoc}\n * @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.\n */\n@CanIgnoreReturnValue @Override public final int add(@ParametricNullness E element,int occurrences){\n  if (occurrences == 0) {\n    return count(element);\n  }\n  checkArgument(occurrences > 0,\"occurrences cannot be negative: %s\",occurrences);\n  int entryIndex=backingMap.indexOf(element);\n  if (entryIndex == -1) {\n    backingMap.put(element,occurrences);\n    size+=occurrences;\n    return 0;\n  }\n  int oldCount=backingMap.getValue(entryIndex);\n  long newCount=(long)oldCount + (long)occurrences;\n  checkArgument(newCount <= Integer.MAX_VALUE,\"too many occurrences: %s\",newCount);\n  backingMap.setValue(entryIndex,(int)newCount);\n  size+=occurrences;\n  return oldCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 106,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (occurrences == 0) {\n  return count(element);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 76,
    "startColumnNumber" : 8,
    "endLineNumber" : 76,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}