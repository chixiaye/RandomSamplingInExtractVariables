{
  "id" : 192,
  "expression" : "baseOffset + records.length - 1",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "baseOffset + records.length - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 303,
      "startColumnNumber" : 21,
      "endLineNumber" : 303,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(baseOffset + records.length - 1,batch.lastOffset())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertEquals(baseOffset + records.length - 1,batch.lastOffset());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1307,
        "startLineNumber" : 290,
        "startColumnNumber" : 71,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CompressionType compression=args.compression;\n  byte magic=args.magic;\n  assertEquals(magic,batch.magic());\n  assertEquals(compression,batch.compressionType());\n  if (magic == MAGIC_VALUE_V0) {\n    assertEquals(NO_TIMESTAMP_TYPE,batch.timestampType());\n  }\n else {\n    assertEquals(CREATE_TIME,batch.timestampType());\n    assertEquals(maxTimestamp,batch.maxTimestamp());\n  }\n  assertEquals(baseOffset + records.length - 1,batch.lastOffset());\n  if (magic >= MAGIC_VALUE_V2)   assertEquals(Integer.valueOf(records.length),batch.countOrNull());\n  assertEquals(baseOffset,batch.baseOffset());\n  assertTrue(batch.isValid());\n  List<Record> batchRecords=TestUtils.toList(batch);\n  for (int i=0; i < records.length; i++) {\n    assertEquals(baseOffset + i,batchRecords.get(i).offset());\n    assertEquals(records[i].key(),batchRecords.get(i).key());\n    assertEquals(records[i].value(),batchRecords.get(i).value());\n    if (magic == MAGIC_VALUE_V0)     assertEquals(NO_TIMESTAMP,batchRecords.get(i).timestamp());\n else     assertEquals(records[i].timestamp(),batchRecords.get(i).timestamp());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1486,
        "startLineNumber" : 289,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void assertGenericRecordBatchData(Args args,RecordBatch batch,long baseOffset,long maxTimestamp,SimpleRecord... records){\n  CompressionType compression=args.compression;\n  byte magic=args.magic;\n  assertEquals(magic,batch.magic());\n  assertEquals(compression,batch.compressionType());\n  if (magic == MAGIC_VALUE_V0) {\n    assertEquals(NO_TIMESTAMP_TYPE,batch.timestampType());\n  }\n else {\n    assertEquals(CREATE_TIME,batch.timestampType());\n    assertEquals(maxTimestamp,batch.maxTimestamp());\n  }\n  assertEquals(baseOffset + records.length - 1,batch.lastOffset());\n  if (magic >= MAGIC_VALUE_V2)   assertEquals(Integer.valueOf(records.length),batch.countOrNull());\n  assertEquals(baseOffset,batch.baseOffset());\n  assertTrue(batch.isValid());\n  List<Record> batchRecords=TestUtils.toList(batch);\n  for (int i=0; i < records.length; i++) {\n    assertEquals(baseOffset + i,batchRecords.get(i).offset());\n    assertEquals(records[i].key(),batchRecords.get(i).key());\n    assertEquals(records[i].value(),batchRecords.get(i).value());\n    if (magic == MAGIC_VALUE_V0)     assertEquals(NO_TIMESTAMP,batchRecords.get(i).timestamp());\n else     assertEquals(records[i].timestamp(),batchRecords.get(i).timestamp());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 303,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertEquals(baseOffset + records.length - 1,batch.lastOffset());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 303,
    "startColumnNumber" : 21,
    "endLineNumber" : 303,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}