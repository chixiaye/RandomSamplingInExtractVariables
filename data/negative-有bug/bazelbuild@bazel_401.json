{
  "id" : 401,
  "expression" : "Files",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/tools/android/java/com/google/devtools/build/android/aapt2/ProtoResourceUsageAnalyzer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Files",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 164,
      "startColumnNumber" : 4,
      "endLineNumber" : 164,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Files.write(resourcesConfigFile,resourceConfigs,StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Files.write(resourcesConfigFile,resourceConfigs,StandardCharsets.UTF_8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2944,
        "startLineNumber" : 110,
        "startColumnNumber" : 25,
        "endLineNumber" : 173,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  logger.setParent(Logger.getLogger(ResourceUsageAnalyzer.class.getName()));\n  apk.visitResources(apk.visitResources(new ResourceDeclarationVisitor(model())).toUsageVisitor());\n  try {\n    final Method parseResourceTxtFile=ResourceUsageAnalyzer.class.getDeclaredMethod(\"parseResourceTxtFile\",Path.class,Set.class);\n    parseResourceTxtFile.setAccessible(true);\n    parseResourceTxtFile.invoke(this,rTxt,resourcePackages);\n    final Method recordMapping=ResourceUsageAnalyzer.class.getDeclaredMethod(\"recordMapping\",Path.class);\n    recordMapping.setAccessible(true);\n    recordMapping.invoke(this,mapping);\n  }\n catch (  ReflectiveOperationException e) {\n    throw new RuntimeException(e);\n  }\n  recordClassUsages(classes);\n  toolAttributes.entries().stream().filter(entry -> entry.getKey().equals(ATTR_KEEP) || entry.getKey().equals(ATTR_DISCARD)).map(entry -> createSimpleAttr(entry.getKey(),entry.getValue())).forEach(attr -> model().recordToolsAttributes(attr));\n  model().processToolsAttributes();\n  keepPossiblyReferencedResources();\n  final List<Resource> resources=model().getResources();\n  final ImmutableListMultimap<ResourceTypeAndJavaName,String> unJavafiedNames=getUnJavafiedResourceNames(apk);\n  ImmutableList<String> resourceConfigs=resources.stream().filter(Resource::isKeep).flatMap(r -> unJavafiedNames.get(ResourceTypeAndJavaName.of(r.type.getName(),r.name)).stream().map(orig -> new Resource(r.type,orig,r.value))).map(r -> String.format(\"%s/%s#no_collapse\",r.type.getName(),r.name)).collect(toImmutableList());\n  Files.write(resourcesConfigFile,resourceConfigs,StandardCharsets.UTF_8);\n  List<Resource> roots=resources.stream().filter(r -> r.isKeep() || r.isReachable()).collect(toList());\n  final Set<Resource> reachable=findReachableResources(roots);\n  return apk.copy(destination,(resourceType,name) -> reachable.contains(model().getResource(resourceType,name)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3463,
        "startLineNumber" : 99,
        "startColumnNumber" : 2,
        "endLineNumber" : 173,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculate and removes unused resource from the  {@link ProtoApk}.\n * @param apk An apk in the aapt2 proto format.\n * @param classes The associated classes for the apk.\n * @param destination Where to write the reduced resources.\n * @param toolAttributes A map of the tool attributes designating resources to keep or discard.\n */\n@CheckReturnValue public ProtoApk shrink(ProtoApk apk,Path classes,Path destination,ListMultimap<String,String> toolAttributes) throws IOException {\n  logger.setParent(Logger.getLogger(ResourceUsageAnalyzer.class.getName()));\n  apk.visitResources(apk.visitResources(new ResourceDeclarationVisitor(model())).toUsageVisitor());\n  try {\n    final Method parseResourceTxtFile=ResourceUsageAnalyzer.class.getDeclaredMethod(\"parseResourceTxtFile\",Path.class,Set.class);\n    parseResourceTxtFile.setAccessible(true);\n    parseResourceTxtFile.invoke(this,rTxt,resourcePackages);\n    final Method recordMapping=ResourceUsageAnalyzer.class.getDeclaredMethod(\"recordMapping\",Path.class);\n    recordMapping.setAccessible(true);\n    recordMapping.invoke(this,mapping);\n  }\n catch (  ReflectiveOperationException e) {\n    throw new RuntimeException(e);\n  }\n  recordClassUsages(classes);\n  toolAttributes.entries().stream().filter(entry -> entry.getKey().equals(ATTR_KEEP) || entry.getKey().equals(ATTR_DISCARD)).map(entry -> createSimpleAttr(entry.getKey(),entry.getValue())).forEach(attr -> model().recordToolsAttributes(attr));\n  model().processToolsAttributes();\n  keepPossiblyReferencedResources();\n  final List<Resource> resources=model().getResources();\n  final ImmutableListMultimap<ResourceTypeAndJavaName,String> unJavafiedNames=getUnJavafiedResourceNames(apk);\n  ImmutableList<String> resourceConfigs=resources.stream().filter(Resource::isKeep).flatMap(r -> unJavafiedNames.get(ResourceTypeAndJavaName.of(r.type.getName(),r.name)).stream().map(orig -> new Resource(r.type,orig,r.value))).map(r -> String.format(\"%s/%s#no_collapse\",r.type.getName(),r.name)).collect(toImmutableList());\n  Files.write(resourcesConfigFile,resourceConfigs,StandardCharsets.UTF_8);\n  List<Resource> roots=resources.stream().filter(r -> r.isKeep() || r.isReachable()).collect(toList());\n  final Set<Resource> reachable=findReachableResources(roots);\n  return apk.copy(destination,(resourceType,name) -> reachable.contains(model().getResource(resourceType,name)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Files.write(resourcesConfigFile,resourceConfigs,StandardCharsets.UTF_8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Files"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 164,
    "startColumnNumber" : 4,
    "endLineNumber" : 164,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}