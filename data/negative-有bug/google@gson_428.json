{
  "id" : 428,
  "expression" : "subtypeToDelegate",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subtypeToDelegate",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 196,
      "startColumnNumber" : 6,
      "endLineNumber" : 196,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 55
      },
      "nodeContext" : "subtypeToDelegate.put(entry.getValue(),delegate)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "subtypeToDelegate.put(entry.getValue(),delegate);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 193,
        "startColumnNumber" : 72,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));\n  labelToDelegate.put(entry.getKey(),delegate);\n  subtypeToDelegate.put(entry.getValue(),delegate);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,Class<?>> entry : labelToSubtype.entrySet()) {\n  TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));\n  labelToDelegate.put(entry.getKey(),delegate);\n  subtypeToDelegate.put(entry.getValue(),delegate);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2616,
        "startLineNumber" : 184,
        "startColumnNumber" : 65,
        "endLineNumber" : 239,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (type.getRawType() != baseType) {\n    return null;\n  }\n  final Map<String,TypeAdapter<?>> labelToDelegate=new LinkedHashMap<String,TypeAdapter<?>>();\n  final Map<Class<?>,TypeAdapter<?>> subtypeToDelegate=new LinkedHashMap<Class<?>,TypeAdapter<?>>();\n  for (  Map.Entry<String,Class<?>> entry : labelToSubtype.entrySet()) {\n    TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));\n    labelToDelegate.put(entry.getKey(),delegate);\n    subtypeToDelegate.put(entry.getValue(),delegate);\n  }\n  return new TypeAdapter<R>(){\n    @Override public R read(    JsonReader in) throws IOException {\n      JsonElement jsonElement=Streams.parse(in);\n      JsonElement labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName);\n      if (labelJsonElement == null) {\n        throw new JsonParseException(\"cannot deserialize \" + baseType + \" because it does not define a field named \"+ typeFieldName);\n      }\n      String label=labelJsonElement.getAsString();\n      @SuppressWarnings(\"unchecked\") TypeAdapter<R> delegate=(TypeAdapter<R>)labelToDelegate.get(label);\n      if (delegate == null) {\n        throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \"+ label+ \"; did you forget to register a subtype?\");\n      }\n      return delegate.fromJsonTree(jsonElement);\n    }\n    @Override public void write(    JsonWriter out,    R value) throws IOException {\n      Class<?> srcType=value.getClass();\n      String label=subtypeToLabel.get(srcType);\n      @SuppressWarnings(\"unchecked\") TypeAdapter<R> delegate=(TypeAdapter<R>)subtypeToDelegate.get(srcType);\n      if (delegate == null) {\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\n      }\n      JsonObject jsonObject=delegate.toJsonTree(value).getAsJsonObject();\n      if (jsonObject.has(typeFieldName)) {\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \"+ typeFieldName);\n      }\n      JsonObject clone=new JsonObject();\n      clone.add(typeFieldName,new JsonPrimitive(label));\n      for (      Map.Entry<String,JsonElement> e : jsonObject.entrySet()) {\n        clone.add(e.getKey(),e.getValue());\n      }\n      Streams.write(clone,out);\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 365,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2679,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 239,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public <R>TypeAdapter<R> create(Gson gson,TypeToken<R> type){\n  if (type.getRawType() != baseType) {\n    return null;\n  }\n  final Map<String,TypeAdapter<?>> labelToDelegate=new LinkedHashMap<String,TypeAdapter<?>>();\n  final Map<Class<?>,TypeAdapter<?>> subtypeToDelegate=new LinkedHashMap<Class<?>,TypeAdapter<?>>();\n  for (  Map.Entry<String,Class<?>> entry : labelToSubtype.entrySet()) {\n    TypeAdapter<?> delegate=gson.getDelegateAdapter(this,TypeToken.get(entry.getValue()));\n    labelToDelegate.put(entry.getKey(),delegate);\n    subtypeToDelegate.put(entry.getValue(),delegate);\n  }\n  return new TypeAdapter<R>(){\n    @Override public R read(    JsonReader in) throws IOException {\n      JsonElement jsonElement=Streams.parse(in);\n      JsonElement labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName);\n      if (labelJsonElement == null) {\n        throw new JsonParseException(\"cannot deserialize \" + baseType + \" because it does not define a field named \"+ typeFieldName);\n      }\n      String label=labelJsonElement.getAsString();\n      @SuppressWarnings(\"unchecked\") TypeAdapter<R> delegate=(TypeAdapter<R>)labelToDelegate.get(label);\n      if (delegate == null) {\n        throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \"+ label+ \"; did you forget to register a subtype?\");\n      }\n      return delegate.fromJsonTree(jsonElement);\n    }\n    @Override public void write(    JsonWriter out,    R value) throws IOException {\n      Class<?> srcType=value.getClass();\n      String label=subtypeToLabel.get(srcType);\n      @SuppressWarnings(\"unchecked\") TypeAdapter<R> delegate=(TypeAdapter<R>)subtypeToDelegate.get(srcType);\n      if (delegate == null) {\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\n      }\n      JsonObject jsonObject=delegate.toJsonTree(value).getAsJsonObject();\n      if (jsonObject.has(typeFieldName)) {\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \"+ typeFieldName);\n      }\n      JsonObject clone=new JsonObject();\n      clone.add(typeFieldName,new JsonPrimitive(label));\n      for (      Map.Entry<String,JsonElement> e : jsonObject.entrySet()) {\n        clone.add(e.getKey(),e.getValue());\n      }\n      Streams.write(clone,out);\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 386,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 196,
        "startColumnNumber" : 6,
        "endLineNumber" : 196,
        "endColumnNumber" : 56
      },
      "nodeContext" : "subtypeToDelegate.put(entry.getValue(),delegate);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Class<?>,com.google.gson.TypeAdapter<?>>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 196,
    "startColumnNumber" : 6,
    "endLineNumber" : 196,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}