{
  "id" : 290,
  "expression" : "new JWSInput(response.getAccessToken())",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new JWSInput(response.getAccessToken())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 539,
      "startColumnNumber" : 48,
      "endLineNumber" : 539,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 539,
        "startColumnNumber" : 48,
        "endLineNumber" : 539,
        "endColumnNumber" : 100
      },
      "nodeContext" : "new JWSInput(response.getAccessToken()).getContent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 539,
        "startColumnNumber" : 37,
        "endLineNumber" : 539,
        "endColumnNumber" : 125
      },
      "nodeContext" : "new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 539,
        "startColumnNumber" : 19,
        "endLineNumber" : 539,
        "endColumnNumber" : 125
      },
      "nodeContext" : "accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 539,
        "startColumnNumber" : 12,
        "endLineNumber" : 539,
        "endColumnNumber" : 126
      },
      "nodeContext" : "String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 530,
        "startColumnNumber" : 12,
        "endLineNumber" : 550,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  OAuthClient.AccessTokenResponse response=browserLogin(\"password\",\"test-user@localhost\",\"password\");\n  AccessToken accessToken=oauth.verifyToken(response.getAccessToken());\n  Assert.assertNull(accessToken.getRealmAccess());\n  Assert.assertTrue(accessToken.getResourceAccess().isEmpty());\n  String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n  Assert.assertFalse(accessTokenJson.contains(\"realm_access\"));\n  Assert.assertFalse(accessTokenJson.contains(\"resource_access\"));\n  Map<String,Object> cst1=(Map<String,Object>)accessToken.getOtherClaims().get(\"custom\");\n  List<String> roles=(List<String>)cst1.get(\"roles\");\n  Assert.assertNames(roles,\"offline_access\",\"user\",\"customer-user\",\"hardcoded\",AccountRoles.VIEW_PROFILE,AccountRoles.MANAGE_ACCOUNT,AccountRoles.MANAGE_ACCOUNT_LINKS);\n  Assert.assertNames(Arrays.asList(accessToken.getAudience()),\"account\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1941,
        "startLineNumber" : 530,
        "startColumnNumber" : 8,
        "endLineNumber" : 558,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  OAuthClient.AccessTokenResponse response=browserLogin(\"password\",\"test-user@localhost\",\"password\");\n  AccessToken accessToken=oauth.verifyToken(response.getAccessToken());\n  Assert.assertNull(accessToken.getRealmAccess());\n  Assert.assertTrue(accessToken.getResourceAccess().isEmpty());\n  String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n  Assert.assertFalse(accessTokenJson.contains(\"realm_access\"));\n  Assert.assertFalse(accessTokenJson.contains(\"resource_access\"));\n  Map<String,Object> cst1=(Map<String,Object>)accessToken.getOtherClaims().get(\"custom\");\n  List<String> roles=(List<String>)cst1.get(\"roles\");\n  Assert.assertNames(roles,\"offline_access\",\"user\",\"customer-user\",\"hardcoded\",AccountRoles.VIEW_PROFILE,AccountRoles.MANAGE_ACCOUNT,AccountRoles.MANAGE_ACCOUNT_LINKS);\n  Assert.assertNames(Arrays.asList(accessToken.getAudience()),\"account\");\n}\n  finally {\n  rolesScope.getProtocolMappers().delete(hardcodedMapperId);\n  realmRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,realmRolesTokenClaimOrig);\n  rolesScope.getProtocolMappers().update(realmRolesMapper.getId(),realmRolesMapper);\n  clientRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,clientRolesTokenClaimOrig);\n  rolesScope.getProtocolMappers().update(clientRolesMapper.getId(),clientRolesMapper);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 195,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3639,
        "startLineNumber" : 502,
        "startColumnNumber" : 79,
        "endLineNumber" : 559,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RealmResource realm=adminClient.realm(\"test\");\n  ClientScopeResource rolesScope=ApiUtil.findClientScopeByName(realm,OIDCLoginProtocolFactory.ROLES_SCOPE);\n  ProtocolMapperRepresentation realmRolesMapper=null;\n  ProtocolMapperRepresentation clientRolesMapper=null;\n  for (  ProtocolMapperRepresentation rep : rolesScope.getProtocolMappers().getMappers()) {\n    if (OIDCLoginProtocolFactory.REALM_ROLES.equals(rep.getName())) {\n      realmRolesMapper=rep;\n    }\n else     if (OIDCLoginProtocolFactory.CLIENT_ROLES.equals(rep.getName())) {\n      clientRolesMapper=rep;\n    }\n  }\n  String realmRolesTokenClaimOrig=realmRolesMapper.getConfig().get(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME);\n  String clientRolesTokenClaimOrig=clientRolesMapper.getConfig().get(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME);\n  realmRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,\"custom.roles\");\n  rolesScope.getProtocolMappers().update(realmRolesMapper.getId(),realmRolesMapper);\n  clientRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,\"custom.roles\");\n  rolesScope.getProtocolMappers().update(clientRolesMapper.getId(),clientRolesMapper);\n  Response resp=rolesScope.getProtocolMappers().createMapper(createHardcodedRole(\"hard-realm\",\"hardcoded\"));\n  String hardcodedMapperId=ApiUtil.getCreatedId(resp);\n  resp.close();\n  try {\n    OAuthClient.AccessTokenResponse response=browserLogin(\"password\",\"test-user@localhost\",\"password\");\n    AccessToken accessToken=oauth.verifyToken(response.getAccessToken());\n    Assert.assertNull(accessToken.getRealmAccess());\n    Assert.assertTrue(accessToken.getResourceAccess().isEmpty());\n    String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n    Assert.assertFalse(accessTokenJson.contains(\"realm_access\"));\n    Assert.assertFalse(accessTokenJson.contains(\"resource_access\"));\n    Map<String,Object> cst1=(Map<String,Object>)accessToken.getOtherClaims().get(\"custom\");\n    List<String> roles=(List<String>)cst1.get(\"roles\");\n    Assert.assertNames(roles,\"offline_access\",\"user\",\"customer-user\",\"hardcoded\",AccountRoles.VIEW_PROFILE,AccountRoles.MANAGE_ACCOUNT,AccountRoles.MANAGE_ACCOUNT_LINKS);\n    Assert.assertNames(Arrays.asList(accessToken.getAudience()),\"account\");\n  }\n  finally {\n    rolesScope.getProtocolMappers().delete(hardcodedMapperId);\n    realmRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,realmRolesTokenClaimOrig);\n    rolesScope.getProtocolMappers().update(realmRolesMapper.getId(),realmRolesMapper);\n    clientRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,clientRolesTokenClaimOrig);\n    rolesScope.getProtocolMappers().update(clientRolesMapper.getId(),clientRolesMapper);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3775,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 559,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @AuthServerContainerExclude(AuthServer.REMOTE) public void testUserRolesMovedFromAccessTokenProperties() throws Exception {\n  RealmResource realm=adminClient.realm(\"test\");\n  ClientScopeResource rolesScope=ApiUtil.findClientScopeByName(realm,OIDCLoginProtocolFactory.ROLES_SCOPE);\n  ProtocolMapperRepresentation realmRolesMapper=null;\n  ProtocolMapperRepresentation clientRolesMapper=null;\n  for (  ProtocolMapperRepresentation rep : rolesScope.getProtocolMappers().getMappers()) {\n    if (OIDCLoginProtocolFactory.REALM_ROLES.equals(rep.getName())) {\n      realmRolesMapper=rep;\n    }\n else     if (OIDCLoginProtocolFactory.CLIENT_ROLES.equals(rep.getName())) {\n      clientRolesMapper=rep;\n    }\n  }\n  String realmRolesTokenClaimOrig=realmRolesMapper.getConfig().get(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME);\n  String clientRolesTokenClaimOrig=clientRolesMapper.getConfig().get(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME);\n  realmRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,\"custom.roles\");\n  rolesScope.getProtocolMappers().update(realmRolesMapper.getId(),realmRolesMapper);\n  clientRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,\"custom.roles\");\n  rolesScope.getProtocolMappers().update(clientRolesMapper.getId(),clientRolesMapper);\n  Response resp=rolesScope.getProtocolMappers().createMapper(createHardcodedRole(\"hard-realm\",\"hardcoded\"));\n  String hardcodedMapperId=ApiUtil.getCreatedId(resp);\n  resp.close();\n  try {\n    OAuthClient.AccessTokenResponse response=browserLogin(\"password\",\"test-user@localhost\",\"password\");\n    AccessToken accessToken=oauth.verifyToken(response.getAccessToken());\n    Assert.assertNull(accessToken.getRealmAccess());\n    Assert.assertTrue(accessToken.getResourceAccess().isEmpty());\n    String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n    Assert.assertFalse(accessTokenJson.contains(\"realm_access\"));\n    Assert.assertFalse(accessTokenJson.contains(\"resource_access\"));\n    Map<String,Object> cst1=(Map<String,Object>)accessToken.getOtherClaims().get(\"custom\");\n    List<String> roles=(List<String>)cst1.get(\"roles\");\n    Assert.assertNames(roles,\"offline_access\",\"user\",\"customer-user\",\"hardcoded\",AccountRoles.VIEW_PROFILE,AccountRoles.MANAGE_ACCOUNT,AccountRoles.MANAGE_ACCOUNT_LINKS);\n    Assert.assertNames(Arrays.asList(accessToken.getAudience()),\"account\");\n  }\n  finally {\n    rolesScope.getProtocolMappers().delete(hardcodedMapperId);\n    realmRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,realmRolesTokenClaimOrig);\n    rolesScope.getProtocolMappers().update(realmRolesMapper.getId(),realmRolesMapper);\n    clientRolesMapper.getConfig().put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,clientRolesTokenClaimOrig);\n    rolesScope.getProtocolMappers().update(clientRolesMapper.getId(),clientRolesMapper);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 539,
        "startColumnNumber" : 12,
        "endLineNumber" : 539,
        "endColumnNumber" : 126
      },
      "nodeContext" : "String accessTokenJson=new String(new JWSInput(response.getAccessToken()).getContent(),StandardCharsets.UTF_8);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "org.keycloak.jose.jws.JWSInput"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 539,
    "startColumnNumber" : 48,
    "endLineNumber" : 539,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}