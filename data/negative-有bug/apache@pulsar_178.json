{
  "id" : 178,
  "expression" : "200",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/compaction/CompactedTopicTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 285,
      "startColumnNumber" : 15,
      "endLineNumber" : 285,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 279,
        "startColumnNumber" : 26,
        "endLineNumber" : 285,
        "endColumnNumber" : 19
      },
      "nodeContext" : "retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 279,
        "startColumnNumber" : 16,
        "endLineNumber" : 285,
        "endColumnNumber" : 19
      },
      "nodeContext" : "succeed=retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 279,
        "startColumnNumber" : 8,
        "endLineNumber" : 285,
        "endColumnNumber" : 20
      },
      "nodeContext" : "boolean succeed=retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 38,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 256,
        "startColumnNumber" : 83,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String key=\"1\";\n  byte[] msgBytes=\"\".getBytes();\n  final String topic=\"persistent://my-property/use/my-ns/testCompactWithEmptyMessage-\" + UUID.randomUUID();\n  admin.topics().createPartitionedTopic(topic,1);\n  final int messages=10;\n  ProducerBuilder<byte[]> builder=pulsarClient.newProducer().topic(topic);\n  if (!batchEnabled) {\n    builder.enableBatching(false);\n  }\n else {\n    builder.batchingMaxMessages(messages / 2);\n  }\n  Producer<byte[]> producer=builder.create();\n  List<CompletableFuture<MessageId>> list=new ArrayList<>(messages);\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().keyBytes(key.getBytes(Charset.defaultCharset())).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  boolean succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  list.clear();\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().key(key).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  producer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 255,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"batchEnabledProvider\") public void testCompactWithEmptyMessage(boolean batchEnabled) throws Exception {\n  final String key=\"1\";\n  byte[] msgBytes=\"\".getBytes();\n  final String topic=\"persistent://my-property/use/my-ns/testCompactWithEmptyMessage-\" + UUID.randomUUID();\n  admin.topics().createPartitionedTopic(topic,1);\n  final int messages=10;\n  ProducerBuilder<byte[]> builder=pulsarClient.newProducer().topic(topic);\n  if (!batchEnabled) {\n    builder.enableBatching(false);\n  }\n else {\n    builder.batchingMaxMessages(messages / 2);\n  }\n  Producer<byte[]> producer=builder.create();\n  List<CompletableFuture<MessageId>> list=new ArrayList<>(messages);\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().keyBytes(key.getBytes(Charset.defaultCharset())).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  boolean succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  list.clear();\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().key(key).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  producer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 279,
        "startColumnNumber" : 26,
        "endLineNumber" : 285,
        "endColumnNumber" : 19
      },
      "nodeContext" : "retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 305,
      "startColumnNumber" : 15,
      "endLineNumber" : 305,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 299,
        "startColumnNumber" : 18,
        "endLineNumber" : 305,
        "endColumnNumber" : 19
      },
      "nodeContext" : "retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 299,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 19
      },
      "nodeContext" : "succeed=retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 36,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 299,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 20
      },
      "nodeContext" : "succeed=retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 37,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 256,
        "startColumnNumber" : 83,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String key=\"1\";\n  byte[] msgBytes=\"\".getBytes();\n  final String topic=\"persistent://my-property/use/my-ns/testCompactWithEmptyMessage-\" + UUID.randomUUID();\n  admin.topics().createPartitionedTopic(topic,1);\n  final int messages=10;\n  ProducerBuilder<byte[]> builder=pulsarClient.newProducer().topic(topic);\n  if (!batchEnabled) {\n    builder.enableBatching(false);\n  }\n else {\n    builder.batchingMaxMessages(messages / 2);\n  }\n  Producer<byte[]> producer=builder.create();\n  List<CompletableFuture<MessageId>> list=new ArrayList<>(messages);\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().keyBytes(key.getBytes(Charset.defaultCharset())).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  boolean succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  list.clear();\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().key(key).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  producer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 255,
        "startColumnNumber" : 4,
        "endLineNumber" : 309,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"batchEnabledProvider\") public void testCompactWithEmptyMessage(boolean batchEnabled) throws Exception {\n  final String key=\"1\";\n  byte[] msgBytes=\"\".getBytes();\n  final String topic=\"persistent://my-property/use/my-ns/testCompactWithEmptyMessage-\" + UUID.randomUUID();\n  admin.topics().createPartitionedTopic(topic,1);\n  final int messages=10;\n  ProducerBuilder<byte[]> builder=pulsarClient.newProducer().topic(topic);\n  if (!batchEnabled) {\n    builder.enableBatching(false);\n  }\n else {\n    builder.batchingMaxMessages(messages / 2);\n  }\n  Producer<byte[]> producer=builder.create();\n  List<CompletableFuture<MessageId>> list=new ArrayList<>(messages);\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().keyBytes(key.getBytes(Charset.defaultCharset())).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  boolean succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  list.clear();\n  for (int i=0; i < messages; i++) {\n    list.add(producer.newMessage().key(key).value(msgBytes).sendAsync());\n  }\n  FutureUtil.waitForAll(list).get();\n  admin.topics().triggerCompaction(topic);\n  succeed=retryStrategically((test) -> {\n    try {\n      return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n    }\n catch (    PulsarAdminException e) {\n      return false;\n    }\n  }\n,10,200);\n  Assert.assertTrue(succeed);\n  producer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 299,
        "startColumnNumber" : 18,
        "endLineNumber" : 305,
        "endColumnNumber" : 19
      },
      "nodeContext" : "retryStrategically((test) -> {\n  try {\n    return LongRunningProcessStatus.Status.SUCCESS.equals(admin.topics().compactionStatus(topic).status);\n  }\n catch (  PulsarAdminException e) {\n    return false;\n  }\n}\n,10,200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 285,
    "startColumnNumber" : 15,
    "endLineNumber" : 285,
    "endColumnNumber" : 18
  }, {
    "charLength" : 3,
    "startLineNumber" : 305,
    "startColumnNumber" : 15,
    "endLineNumber" : 305,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}