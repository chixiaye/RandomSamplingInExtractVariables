{
  "id" : 258,
  "expression" : "lexer.features & Feature.AllowArbitraryCommas.mask",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/parser/ThrowableDeserializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lexer.features & Feature.AllowArbitraryCommas.mask",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 59,
      "startColumnNumber" : 25,
      "endLineNumber" : 59,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 59,
        "endColumnNumber" : 76
      },
      "nodeContext" : "(lexer.features & Feature.AllowArbitraryCommas.mask)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 59,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(lexer.features & Feature.AllowArbitraryCommas.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 59,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 58,
        "startColumnNumber" : 52,
        "endLineNumber" : 62,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (lexer.token == JSONToken.COMMA) {\n  if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 53,
        "startColumnNumber" : 29,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (lexer.token == JSONToken.RBRACE) {\n    lexer.nextToken(JSONToken.COMMA);\n    break;\n  }\n  if (lexer.token == JSONToken.COMMA) {\n    if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (key == null) {\n  if (lexer.token == JSONToken.RBRACE) {\n    lexer.nextToken(JSONToken.COMMA);\n    break;\n  }\n  if (lexer.token == JSONToken.COMMA) {\n    if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n      continue;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 49,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String key=lexer.scanSymbol(parser.symbolTable);\n  if (key == null) {\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      break;\n    }\n    if (lexer.token == JSONToken.COMMA) {\n      if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n        continue;\n      }\n    }\n  }\n  lexer.nextTokenWithChar(':');\n  if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n    if (lexer.token == JSONToken.LITERAL_STRING) {\n      String exClassName=lexer.stringVal();\n      exClass=TypeUtils.loadClass(exClassName,parser.config.defaultClassLoader);\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (\"message\".equals(key)) {\n    if (lexer.token == JSONToken.NULL) {\n      message=null;\n    }\n else     if (lexer.token == JSONToken.LITERAL_STRING) {\n      message=lexer.stringVal();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    lexer.nextToken();\n  }\n else   if (\"cause\".equals(key)) {\n    cause=deserialze(parser,null,\"cause\");\n  }\n else   if (\"stackTrace\".equals(key)) {\n    stackTrace=parser.parseObject(StackTraceElement[].class);\n  }\n else {\n    otherValues.put(key,parser.parse());\n  }\n  if (lexer.token == JSONToken.RBRACE) {\n    lexer.nextToken(JSONToken.COMMA);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  String key=lexer.scanSymbol(parser.symbolTable);\n  if (key == null) {\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      break;\n    }\n    if (lexer.token == JSONToken.COMMA) {\n      if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n        continue;\n      }\n    }\n  }\n  lexer.nextTokenWithChar(':');\n  if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n    if (lexer.token == JSONToken.LITERAL_STRING) {\n      String exClassName=lexer.stringVal();\n      exClass=TypeUtils.loadClass(exClassName,parser.config.defaultClassLoader);\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    lexer.nextToken(JSONToken.COMMA);\n  }\n else   if (\"message\".equals(key)) {\n    if (lexer.token == JSONToken.NULL) {\n      message=null;\n    }\n else     if (lexer.token == JSONToken.LITERAL_STRING) {\n      message=lexer.stringVal();\n    }\n else {\n      throw new JSONException(\"syntax error\");\n    }\n    lexer.nextToken();\n  }\n else   if (\"cause\".equals(key)) {\n    cause=deserialze(parser,null,\"cause\");\n  }\n else   if (\"stackTrace\".equals(key)) {\n    stackTrace=parser.parseObject(StackTraceElement[].class);\n  }\n else {\n    otherValues.put(key,parser.parse());\n  }\n  if (lexer.token == JSONToken.RBRACE) {\n    lexer.nextToken(JSONToken.COMMA);\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 215,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4710,
        "startLineNumber" : 19,
        "startColumnNumber" : 83,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONLexer lexer=parser.lexer;\n  if (lexer.token == JSONToken.NULL) {\n    lexer.nextToken();\n    return null;\n  }\n  if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n  }\n else {\n    if (lexer.token != JSONToken.LBRACE) {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n  Throwable cause=null;\n  Class<?> exClass=null;\n  if (type != null && type instanceof Class) {\n    Class<?> clazz=(Class<?>)type;\n    if (Throwable.class.isAssignableFrom(clazz)) {\n      exClass=clazz;\n    }\n  }\n  String message=null;\n  StackTraceElement[] stackTrace=null;\n  Map<String,Object> otherValues=new HashMap<String,Object>();\n  for (; ; ) {\n    String key=lexer.scanSymbol(parser.symbolTable);\n    if (key == null) {\n      if (lexer.token == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        break;\n      }\n      if (lexer.token == JSONToken.COMMA) {\n        if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n          continue;\n        }\n      }\n    }\n    lexer.nextTokenWithChar(':');\n    if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n      if (lexer.token == JSONToken.LITERAL_STRING) {\n        String exClassName=lexer.stringVal();\n        exClass=TypeUtils.loadClass(exClassName,parser.config.defaultClassLoader);\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n    }\n else     if (\"message\".equals(key)) {\n      if (lexer.token == JSONToken.NULL) {\n        message=null;\n      }\n else       if (lexer.token == JSONToken.LITERAL_STRING) {\n        message=lexer.stringVal();\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else     if (\"cause\".equals(key)) {\n      cause=deserialze(parser,null,\"cause\");\n    }\n else     if (\"stackTrace\".equals(key)) {\n      stackTrace=parser.parseObject(StackTraceElement[].class);\n    }\n else {\n      otherValues.put(key,parser.parse());\n    }\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      break;\n    }\n  }\n  Throwable ex=null;\n  if (exClass == null) {\n    ex=new Exception(message,cause);\n  }\n else {\n    try {\n      Constructor<?> defaultConstructor=null;\n      Constructor<?> messageConstructor=null;\n      Constructor<?> causeConstructor=null;\n      for (      Constructor<?> constructor : exClass.getConstructors()) {\n        if (constructor.getParameterTypes().length == 0) {\n          defaultConstructor=constructor;\n          continue;\n        }\n        if (constructor.getParameterTypes().length == 1 && constructor.getParameterTypes()[0] == String.class) {\n          messageConstructor=constructor;\n          continue;\n        }\n        if (constructor.getParameterTypes().length == 2 && constructor.getParameterTypes()[0] == String.class && constructor.getParameterTypes()[1] == Throwable.class) {\n          causeConstructor=constructor;\n          continue;\n        }\n      }\n      if (causeConstructor != null) {\n        ex=(Throwable)causeConstructor.newInstance(message,cause);\n      }\n else       if (messageConstructor != null) {\n        ex=(Throwable)messageConstructor.newInstance(message);\n      }\n else       if (defaultConstructor != null) {\n        ex=(Throwable)defaultConstructor.newInstance();\n      }\n      if (ex == null) {\n        ex=new Exception(message,cause);\n      }\n    }\n catch (    Exception e) {\n      throw new JSONException(\"create instance error\",e);\n    }\n  }\n  if (stackTrace != null) {\n    ex.setStackTrace(stackTrace);\n  }\n  return (T)ex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 566,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4824,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type type,Object fieldName){\n  JSONLexer lexer=parser.lexer;\n  if (lexer.token == JSONToken.NULL) {\n    lexer.nextToken();\n    return null;\n  }\n  if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n    parser.resolveStatus=DefaultJSONParser.NONE;\n  }\n else {\n    if (lexer.token != JSONToken.LBRACE) {\n      throw new JSONException(\"syntax error\");\n    }\n  }\n  Throwable cause=null;\n  Class<?> exClass=null;\n  if (type != null && type instanceof Class) {\n    Class<?> clazz=(Class<?>)type;\n    if (Throwable.class.isAssignableFrom(clazz)) {\n      exClass=clazz;\n    }\n  }\n  String message=null;\n  StackTraceElement[] stackTrace=null;\n  Map<String,Object> otherValues=new HashMap<String,Object>();\n  for (; ; ) {\n    String key=lexer.scanSymbol(parser.symbolTable);\n    if (key == null) {\n      if (lexer.token == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        break;\n      }\n      if (lexer.token == JSONToken.COMMA) {\n        if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n          continue;\n        }\n      }\n    }\n    lexer.nextTokenWithChar(':');\n    if (JSON.DEFAULT_TYPE_KEY.equals(key)) {\n      if (lexer.token == JSONToken.LITERAL_STRING) {\n        String exClassName=lexer.stringVal();\n        exClass=TypeUtils.loadClass(exClassName,parser.config.defaultClassLoader);\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken(JSONToken.COMMA);\n    }\n else     if (\"message\".equals(key)) {\n      if (lexer.token == JSONToken.NULL) {\n        message=null;\n      }\n else       if (lexer.token == JSONToken.LITERAL_STRING) {\n        message=lexer.stringVal();\n      }\n else {\n        throw new JSONException(\"syntax error\");\n      }\n      lexer.nextToken();\n    }\n else     if (\"cause\".equals(key)) {\n      cause=deserialze(parser,null,\"cause\");\n    }\n else     if (\"stackTrace\".equals(key)) {\n      stackTrace=parser.parseObject(StackTraceElement[].class);\n    }\n else {\n      otherValues.put(key,parser.parse());\n    }\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      break;\n    }\n  }\n  Throwable ex=null;\n  if (exClass == null) {\n    ex=new Exception(message,cause);\n  }\n else {\n    try {\n      Constructor<?> defaultConstructor=null;\n      Constructor<?> messageConstructor=null;\n      Constructor<?> causeConstructor=null;\n      for (      Constructor<?> constructor : exClass.getConstructors()) {\n        if (constructor.getParameterTypes().length == 0) {\n          defaultConstructor=constructor;\n          continue;\n        }\n        if (constructor.getParameterTypes().length == 1 && constructor.getParameterTypes()[0] == String.class) {\n          messageConstructor=constructor;\n          continue;\n        }\n        if (constructor.getParameterTypes().length == 2 && constructor.getParameterTypes()[0] == String.class && constructor.getParameterTypes()[1] == Throwable.class) {\n          causeConstructor=constructor;\n          continue;\n        }\n      }\n      if (causeConstructor != null) {\n        ex=(Throwable)causeConstructor.newInstance(message,cause);\n      }\n else       if (messageConstructor != null) {\n        ex=(Throwable)messageConstructor.newInstance(message);\n      }\n else       if (defaultConstructor != null) {\n        ex=(Throwable)defaultConstructor.newInstance();\n      }\n      if (ex == null) {\n        ex=new Exception(message,cause);\n      }\n    }\n catch (    Exception e) {\n      throw new JSONException(\"create instance error\",e);\n    }\n  }\n  if (stackTrace != null) {\n    ex.setStackTrace(stackTrace);\n  }\n  return (T)ex;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 588,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 59,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(lexer.features & Feature.AllowArbitraryCommas.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 59,
    "startColumnNumber" : 25,
    "endLineNumber" : 59,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}