{
  "id" : 76,
  "expression" : "LINE_SEP",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/main/java/com/blankj/utilcode/util/LogUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LINE_SEP",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 234,
      "startColumnNumber" : 48,
      "endLineNumber" : 234,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 234,
        "startColumnNumber" : 41,
        "endLineNumber" : 234,
        "endColumnNumber" : 56
      },
      "nodeContext" : "head + LINE_SEP",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 234,
        "startColumnNumber" : 35,
        "endLineNumber" : 234,
        "endColumnNumber" : 78
      },
      "nodeContext" : "{tag,head + LINE_SEP,\" [\" + head + \"]: \"}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 234,
        "startColumnNumber" : 23,
        "endLineNumber" : 234,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 234,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 79
      },
      "nodeContext" : "return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 226,
        "startColumnNumber" : 32,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n  return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 226,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sLogHeadSwitch) {\n  String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n  return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 213,
        "startColumnNumber" : 15,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StackTraceElement targetElement=new Throwable().getStackTrace()[3];\n  String className=targetElement.getClassName();\n  String[] classNameInfo=className.split(\"\\\\.\");\n  if (classNameInfo.length > 0) {\n    className=classNameInfo[classNameInfo.length - 1];\n  }\n  if (className.contains(\"$\")) {\n    className=className.split(\"\\\\$\")[0];\n  }\n  if (sTagIsSpace) {\n    tag=isSpace(tag) ? className : tag;\n  }\n  if (sLogHeadSwitch) {\n    String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n    return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!sTagIsSpace && !sLogHeadSwitch) {\n  tag=sGlobalTag;\n}\n else {\n  StackTraceElement targetElement=new Throwable().getStackTrace()[3];\n  String className=targetElement.getClassName();\n  String[] classNameInfo=className.split(\"\\\\.\");\n  if (classNameInfo.length > 0) {\n    className=classNameInfo[classNameInfo.length - 1];\n  }\n  if (className.contains(\"$\")) {\n    className=className.split(\"\\\\$\")[0];\n  }\n  if (sTagIsSpace) {\n    tag=isSpace(tag) ? className : tag;\n  }\n  if (sLogHeadSwitch) {\n    String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n    return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1197,
        "startLineNumber" : 210,
        "startColumnNumber" : 58,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!sTagIsSpace && !sLogHeadSwitch) {\n    tag=sGlobalTag;\n  }\n else {\n    StackTraceElement targetElement=new Throwable().getStackTrace()[3];\n    String className=targetElement.getClassName();\n    String[] classNameInfo=className.split(\"\\\\.\");\n    if (classNameInfo.length > 0) {\n      className=classNameInfo[classNameInfo.length - 1];\n    }\n    if (className.contains(\"$\")) {\n      className=className.split(\"\\\\$\")[0];\n    }\n    if (sTagIsSpace) {\n      tag=isSpace(tag) ? className : tag;\n    }\n    if (sLogHeadSwitch) {\n      String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n      return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n    }\n  }\n  return new String[]{tag,\"\",\": \"};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1251,
        "startLineNumber" : 210,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static String[] processTagAndHead(String tag){\n  if (!sTagIsSpace && !sLogHeadSwitch) {\n    tag=sGlobalTag;\n  }\n else {\n    StackTraceElement targetElement=new Throwable().getStackTrace()[3];\n    String className=targetElement.getClassName();\n    String[] classNameInfo=className.split(\"\\\\.\");\n    if (classNameInfo.length > 0) {\n      className=classNameInfo[classNameInfo.length - 1];\n    }\n    if (className.contains(\"$\")) {\n      className=className.split(\"\\\\$\")[0];\n    }\n    if (sTagIsSpace) {\n      tag=isSpace(tag) ? className : tag;\n    }\n    if (sLogHeadSwitch) {\n      String head=new Formatter().format(\"%s, %s(%s.java:%d)\",Thread.currentThread().getName(),targetElement.getMethodName(),className,targetElement.getLineNumber()).toString();\n      return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n    }\n  }\n  return new String[]{tag,\"\",\": \"};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 234,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 79
      },
      "nodeContext" : "return new String[]{tag,head + LINE_SEP,\" [\" + head + \"]: \"};\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 234,
    "startColumnNumber" : 48,
    "endLineNumber" : 234,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}