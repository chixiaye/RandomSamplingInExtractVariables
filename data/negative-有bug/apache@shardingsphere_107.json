{
  "id" : 107,
  "expression" : "logicalOperator.get()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/ExpressionExtractUtil.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logicalOperator.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 55,
      "startColumnNumber" : 65,
      "endLineNumber" : 55,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 55,
        "startColumnNumber" : 43,
        "endLineNumber" : 55,
        "endColumnNumber" : 86
      },
      "nodeContext" : "LogicalOperator.OR == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 86
      },
      "nodeContext" : "logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 680,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n  result.addAll(getAndPredicates(binaryExpression.getLeft()));\n  result.addAll(getAndPredicates(binaryExpression.getRight()));\n}\n else if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n  Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n  for (  AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n    result.addAll(getCombinedAndPredicates(each,predicates));\n  }\n}\n else {\n  result.add(createAndPredicate(expression));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 48,
        "startColumnNumber" : 96,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(expression instanceof BinaryOperationExpression)) {\n    return Collections.singletonList(createAndPredicate(expression));\n  }\n  BinaryOperationExpression binaryExpression=(BinaryOperationExpression)expression;\n  Optional<LogicalOperator> logicalOperator=LogicalOperator.valueFrom(binaryExpression.getOperator());\n  Collection<AndPredicate> result=new LinkedList<>();\n  if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n    result.addAll(getAndPredicates(binaryExpression.getLeft()));\n    result.addAll(getAndPredicates(binaryExpression.getRight()));\n  }\n else   if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n    Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n    for (    AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n      result.addAll(getCombinedAndPredicates(each,predicates));\n    }\n  }\n else {\n    result.add(createAndPredicate(expression));\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get and predicate collection.\n * @param expression expression segment\n * @return and predicate collection\n */\npublic static Collection<AndPredicate> getAndPredicates(final ExpressionSegment expression){\n  if (!(expression instanceof BinaryOperationExpression)) {\n    return Collections.singletonList(createAndPredicate(expression));\n  }\n  BinaryOperationExpression binaryExpression=(BinaryOperationExpression)expression;\n  Optional<LogicalOperator> logicalOperator=LogicalOperator.valueFrom(binaryExpression.getOperator());\n  Collection<AndPredicate> result=new LinkedList<>();\n  if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n    result.addAll(getAndPredicates(binaryExpression.getLeft()));\n    result.addAll(getAndPredicates(binaryExpression.getRight()));\n  }\n else   if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n    Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n    for (    AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n      result.addAll(getCombinedAndPredicates(each,predicates));\n    }\n  }\n else {\n    result.add(createAndPredicate(expression));\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 86
      },
      "nodeContext" : "logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.constant.LogicalOperator"
  }, {
    "nodeContext" : "logicalOperator.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 58,
      "startColumnNumber" : 73,
      "endLineNumber" : 58,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 58,
        "startColumnNumber" : 50,
        "endLineNumber" : 58,
        "endColumnNumber" : 94
      },
      "nodeContext" : "LogicalOperator.AND == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 58,
        "startColumnNumber" : 19,
        "endLineNumber" : 58,
        "endColumnNumber" : 94
      },
      "nodeContext" : "logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 58,
        "startColumnNumber" : 15,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n  Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n  for (  AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n    result.addAll(getCombinedAndPredicates(each,predicates));\n  }\n}\n else {\n  result.add(createAndPredicate(expression));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 680,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n  result.addAll(getAndPredicates(binaryExpression.getLeft()));\n  result.addAll(getAndPredicates(binaryExpression.getRight()));\n}\n else if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n  Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n  for (  AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n    result.addAll(getCombinedAndPredicates(each,predicates));\n  }\n}\n else {\n  result.add(createAndPredicate(expression));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 48,
        "startColumnNumber" : 96,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(expression instanceof BinaryOperationExpression)) {\n    return Collections.singletonList(createAndPredicate(expression));\n  }\n  BinaryOperationExpression binaryExpression=(BinaryOperationExpression)expression;\n  Optional<LogicalOperator> logicalOperator=LogicalOperator.valueFrom(binaryExpression.getOperator());\n  Collection<AndPredicate> result=new LinkedList<>();\n  if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n    result.addAll(getAndPredicates(binaryExpression.getLeft()));\n    result.addAll(getAndPredicates(binaryExpression.getRight()));\n  }\n else   if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n    Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n    for (    AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n      result.addAll(getCombinedAndPredicates(each,predicates));\n    }\n  }\n else {\n    result.add(createAndPredicate(expression));\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1376,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get and predicate collection.\n * @param expression expression segment\n * @return and predicate collection\n */\npublic static Collection<AndPredicate> getAndPredicates(final ExpressionSegment expression){\n  if (!(expression instanceof BinaryOperationExpression)) {\n    return Collections.singletonList(createAndPredicate(expression));\n  }\n  BinaryOperationExpression binaryExpression=(BinaryOperationExpression)expression;\n  Optional<LogicalOperator> logicalOperator=LogicalOperator.valueFrom(binaryExpression.getOperator());\n  Collection<AndPredicate> result=new LinkedList<>();\n  if (logicalOperator.isPresent() && LogicalOperator.OR == logicalOperator.get()) {\n    result.addAll(getAndPredicates(binaryExpression.getLeft()));\n    result.addAll(getAndPredicates(binaryExpression.getRight()));\n  }\n else   if (logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()) {\n    Collection<AndPredicate> predicates=getAndPredicates(binaryExpression.getRight());\n    for (    AndPredicate each : getAndPredicates(binaryExpression.getLeft())) {\n      result.addAll(getCombinedAndPredicates(each,predicates));\n    }\n  }\n else {\n    result.add(createAndPredicate(expression));\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 58,
        "startColumnNumber" : 19,
        "endLineNumber" : 58,
        "endColumnNumber" : 94
      },
      "nodeContext" : "logicalOperator.isPresent() && LogicalOperator.AND == logicalOperator.get()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.constant.LogicalOperator"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 55,
    "startColumnNumber" : 65,
    "endLineNumber" : 55,
    "endColumnNumber" : 86
  }, {
    "charLength" : 21,
    "startLineNumber" : 58,
    "startColumnNumber" : 73,
    "endLineNumber" : 58,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}