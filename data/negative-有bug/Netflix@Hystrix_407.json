{
  "id" : 407,
  "expression" : "getThreadFactory(threadPoolKey)",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getThreadFactory(threadPoolKey)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 79,
      "startColumnNumber" : 44,
      "endLineNumber" : 79,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 75
      },
      "nodeContext" : "threadFactory=getThreadFactory(threadPoolKey)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "final ThreadFactory threadFactory=getThreadFactory(threadPoolKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 78,
        "startColumnNumber" : 257,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ThreadFactory threadFactory=getThreadFactory(threadPoolKey);\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2582,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Factory method to provide  {@link ThreadPoolExecutor} instances as desired.<p> Note that the corePoolSize, maximumPoolSize and keepAliveTime values will be dynamically set during runtime if their values change using the  {@link ThreadPoolExecutor#setCorePoolSize}, {@link ThreadPoolExecutor#setMaximumPoolSize} and {@link ThreadPoolExecutor#setKeepAliveTime} methods.<p> <b>Default Implementation</b> <p> Implementation using standard java.util.concurrent.ThreadPoolExecutor\n * @param threadPoolKey {@link HystrixThreadPoolKey} representing the {@link HystrixThreadPool} that this {@link ThreadPoolExecutor} will be used for.\n * @param corePoolSize Core number of threads requested via properties (or system default if no properties set).\n * @param maximumPoolSize Max number of threads requested via properties (or system default if no properties set).\n * @param keepAliveTime Keep-alive time for threads requested via properties (or system default if no properties set).\n * @param unit {@link TimeUnit} corresponding with keepAliveTime\n * @param workQueue {@code BlockingQueue<Runnable>} as provided by {@link #getBlockingQueue(int)}\n * @return instance of {@link ThreadPoolExecutor}\n */\npublic ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey,HystrixProperty<Integer> corePoolSize,HystrixProperty<Integer> maximumPoolSize,HystrixProperty<Integer> keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue){\n  final ThreadFactory threadFactory=getThreadFactory(threadPoolKey);\n  final int dynamicCoreSize=corePoolSize.get();\n  final int dynamicMaximumSize=maximumPoolSize.get();\n  if (dynamicCoreSize > dynamicMaximumSize) {\n    logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \"+ dynamicCoreSize+ \" and maximumSize = \"+ dynamicMaximumSize+ \".  Maximum size will be set to \"+ dynamicCoreSize+ \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicCoreSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n else {\n    return new ThreadPoolExecutor(dynamicCoreSize,dynamicMaximumSize,keepAliveTime.get(),unit,workQueue,threadFactory);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "final ThreadFactory threadFactory=getThreadFactory(threadPoolKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.ThreadFactory"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 79,
    "startColumnNumber" : 44,
    "endLineNumber" : 79,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}