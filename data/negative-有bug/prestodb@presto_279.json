{
  "id" : 279,
  "expression" : "BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplitManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 59,
      "startLineNumber" : 130,
      "startColumnNumber" : 26,
      "endLineNumber" : 130,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 86
      },
      "nodeContext" : "splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 87
      },
      "nodeContext" : "splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long numberOfRows;\n  if (filter.isPresent()) {\n    String sql=bigQueryClient.createFormatSql(tableId,\"COUNT(*)\",new String[]{filter.get()});\n    TableResult result=bigQueryClient.query(sql);\n    numberOfRows=result.iterateAll().iterator().next().get(0).getLongValue();\n  }\n else {\n    numberOfRows=bigQueryClient.getTable(tableId).getNumRows().longValue();\n  }\n  long rowsPerSplit=numberOfRows / actualParallelism;\n  long remainingRows=numberOfRows - (rowsPerSplit * actualParallelism);\n  List<BigQuerySplit> splits=range(0,actualParallelism).mapToObj(ignored -> BigQuerySplit.emptyProjection(rowsPerSplit)).collect(toList());\n  splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n  return splits;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1313,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  long numberOfRows;\n  if (filter.isPresent()) {\n    String sql=bigQueryClient.createFormatSql(tableId,\"COUNT(*)\",new String[]{filter.get()});\n    TableResult result=bigQueryClient.query(sql);\n    numberOfRows=result.iterateAll().iterator().next().get(0).getLongValue();\n  }\n else {\n    numberOfRows=bigQueryClient.getTable(tableId).getNumRows().longValue();\n  }\n  long rowsPerSplit=numberOfRows / actualParallelism;\n  long remainingRows=numberOfRows - (rowsPerSplit * actualParallelism);\n  List<BigQuerySplit> splits=range(0,actualParallelism).mapToObj(ignored -> BigQuerySplit.emptyProjection(rowsPerSplit)).collect(toList());\n  splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n  return splits;\n}\n catch (BigQueryException e) {\n  throw new PrestoException(BIGQUERY_FAILED_TO_EXECUTE_QUERY,format(\"Failed to compute empty projection\"),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1329,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    long numberOfRows;\n    if (filter.isPresent()) {\n      String sql=bigQueryClient.createFormatSql(tableId,\"COUNT(*)\",new String[]{filter.get()});\n      TableResult result=bigQueryClient.query(sql);\n      numberOfRows=result.iterateAll().iterator().next().get(0).getLongValue();\n    }\n else {\n      numberOfRows=bigQueryClient.getTable(tableId).getNumRows().longValue();\n    }\n    long rowsPerSplit=numberOfRows / actualParallelism;\n    long remainingRows=numberOfRows - (rowsPerSplit * actualParallelism);\n    List<BigQuerySplit> splits=range(0,actualParallelism).mapToObj(ignored -> BigQuerySplit.emptyProjection(rowsPerSplit)).collect(toList());\n    splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n    return splits;\n  }\n catch (  BigQueryException e) {\n    throw new PrestoException(BIGQUERY_FAILED_TO_EXECUTE_QUERY,format(\"Failed to compute empty projection\"),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private List<BigQuerySplit> createEmptyProjection(TableId tableId,int actualParallelism,Optional<String> filter){\n  try {\n    long numberOfRows;\n    if (filter.isPresent()) {\n      String sql=bigQueryClient.createFormatSql(tableId,\"COUNT(*)\",new String[]{filter.get()});\n      TableResult result=bigQueryClient.query(sql);\n      numberOfRows=result.iterateAll().iterator().next().get(0).getLongValue();\n    }\n else {\n      numberOfRows=bigQueryClient.getTable(tableId).getNumRows().longValue();\n    }\n    long rowsPerSplit=numberOfRows / actualParallelism;\n    long remainingRows=numberOfRows - (rowsPerSplit * actualParallelism);\n    List<BigQuerySplit> splits=range(0,actualParallelism).mapToObj(ignored -> BigQuerySplit.emptyProjection(rowsPerSplit)).collect(toList());\n    splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n    return splits;\n  }\n catch (  BigQueryException e) {\n    throw new PrestoException(BIGQUERY_FAILED_TO_EXECUTE_QUERY,format(\"Failed to compute empty projection\"),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 87
      },
      "nodeContext" : "splits.set(0,BigQuerySplit.emptyProjection(rowsPerSplit + remainingRows));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "com.facebook.presto.plugin.bigquery.BigQuerySplit"
  } ],
  "positionList" : [ {
    "charLength" : 59,
    "startLineNumber" : 130,
    "startColumnNumber" : 26,
    "endLineNumber" : 130,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}