{
  "id" : 333,
  "expression" : "0",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/math/DoubleMath.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 86,
      "startColumnNumber" : 33,
      "endLineNumber" : 86,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 86,
        "startColumnNumber" : 29,
        "endLineNumber" : 86,
        "endColumnNumber" : 34
      },
      "nodeContext" : "x > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 86,
        "startColumnNumber" : 29,
        "endLineNumber" : 86,
        "endColumnNumber" : 43
      },
      "nodeContext" : "x > 0 ? 1 : -1",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 28,
        "endLineNumber" : 86,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(x > 0 ? 1 : -1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 86,
        "startColumnNumber" : 17,
        "endLineNumber" : 86,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(long)x + (x > 0 ? 1 : -1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 86,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return (long)x + (x > 0 ? 1 : -1);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 85,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return (long)x + (x > 0 ? 1 : -1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isMathematicalInteger(x)) {\n  return x;\n}\n else {\n  return (long)x + (x > 0 ? 1 : -1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (mode) {\ncase UNNECESSARY:  checkRoundingUnnecessary(isMathematicalInteger(x));\nreturn x;\ncase FLOOR:if (x >= 0.0 || isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x - 1;\n}\ncase CEILING:if (x <= 0.0 || isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + 1;\n}\ncase DOWN:return x;\ncase UP:if (isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + (x > 0 ? 1 : -1);\n}\ncase HALF_EVEN:return rint(x);\ncase HALF_UP:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x + copySign(0.5,x);\n}\n else {\nreturn z;\n}\n}\ncase HALF_DOWN:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x;\n}\n else {\nreturn z;\n}\n}\ndefault:throw new AssertionError();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 143,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 56,
        "startColumnNumber" : 63,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!isFinite(x)) {\n    throw new ArithmeticException(\"input is infinite or NaN\");\n  }\nswitch (mode) {\ncase UNNECESSARY:    checkRoundingUnnecessary(isMathematicalInteger(x));\n  return x;\ncase FLOOR:if (x >= 0.0 || isMathematicalInteger(x)) {\n  return x;\n}\n else {\n  return (long)x - 1;\n}\ncase CEILING:if (x <= 0.0 || isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + 1;\n}\ncase DOWN:return x;\ncase UP:if (isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + (x > 0 ? 1 : -1);\n}\ncase HALF_EVEN:return rint(x);\ncase HALF_UP:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x + copySign(0.5,x);\n}\n else {\nreturn z;\n}\n}\ncase HALF_DOWN:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x;\n}\n else {\nreturn z;\n}\n}\ndefault:throw new AssertionError();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1397,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@GwtIncompatible static double roundIntermediate(double x,RoundingMode mode){\n  if (!isFinite(x)) {\n    throw new ArithmeticException(\"input is infinite or NaN\");\n  }\nswitch (mode) {\ncase UNNECESSARY:    checkRoundingUnnecessary(isMathematicalInteger(x));\n  return x;\ncase FLOOR:if (x >= 0.0 || isMathematicalInteger(x)) {\n  return x;\n}\n else {\n  return (long)x - 1;\n}\ncase CEILING:if (x <= 0.0 || isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + 1;\n}\ncase DOWN:return x;\ncase UP:if (isMathematicalInteger(x)) {\nreturn x;\n}\n else {\nreturn (long)x + (x > 0 ? 1 : -1);\n}\ncase HALF_EVEN:return rint(x);\ncase HALF_UP:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x + copySign(0.5,x);\n}\n else {\nreturn z;\n}\n}\ncase HALF_DOWN:{\ndouble z=rint(x);\nif (abs(x - z) == 0.5) {\nreturn x;\n}\n else {\nreturn z;\n}\n}\ndefault:throw new AssertionError();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 86,
        "startColumnNumber" : 10,
        "endLineNumber" : 86,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return (long)x + (x > 0 ? 1 : -1);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 86,
    "startColumnNumber" : 33,
    "endLineNumber" : 86,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}