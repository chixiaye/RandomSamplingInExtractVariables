{
  "id" : 5,
  "expression" : "data.toString()",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/termux-shared/src/main/java/com/termux/shared/shell/am/AmSocketServer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "data.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 94,
      "startColumnNumber" : 33,
      "endLineNumber" : 94,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 94,
        "startColumnNumber" : 15,
        "endLineNumber" : 94,
        "endColumnNumber" : 48
      },
      "nodeContext" : "amCommandString=data.toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 49
      },
      "nodeContext" : "String amCommandString=data.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2045,
        "startLineNumber" : 83,
        "startColumnNumber" : 80,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Error error;\n  StringBuilder data=new StringBuilder();\n  error=clientSocket.readDataOnInputStream(data,true);\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,null,error.toString());\n    return;\n  }\n  String amCommandString=data.toString();\n  Logger.logVerbose(LOG_TAG,\"am command received from peer \" + clientSocket.getPeerCred().getMinimalString() + \"\\nam command: `\"+ amCommandString+ \"`\");\n  List<String> amCommandList=new ArrayList<>();\n  error=parseAmCommand(amCommandString,amCommandList);\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,null,error.toString());\n    return;\n  }\n  String[] amCommandArray=amCommandList.toArray(new String[0]);\n  Logger.logDebug(LOG_TAG,\"am command received from peer \" + clientSocket.getPeerCred().getMinimalString() + \"\\n\"+ ExecutionCommand.getArgumentsLogString(\"am command\",amCommandArray));\n  AmSocketServerRunConfig amSocketServerRunConfig=(AmSocketServerRunConfig)localSocketManager.getLocalSocketRunConfig();\n  StringBuilder stdout=new StringBuilder();\n  StringBuilder stderr=new StringBuilder();\n  error=runAmCommand(localSocketManager.getContext(),amCommandArray,stdout,stderr,amSocketServerRunConfig.shouldCheckDisplayOverAppsPermission());\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,stdout.toString(),!stderr.toString().isEmpty() ? stderr + \"\\n\\n\" + error : error.toString());\n  }\n  sendResultToClient(localSocketManager,clientSocket,0,stdout.toString(),stderr.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2209,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void processAmClient(@NonNull LocalSocketManager localSocketManager,@NonNull LocalClientSocket clientSocket){\n  Error error;\n  StringBuilder data=new StringBuilder();\n  error=clientSocket.readDataOnInputStream(data,true);\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,null,error.toString());\n    return;\n  }\n  String amCommandString=data.toString();\n  Logger.logVerbose(LOG_TAG,\"am command received from peer \" + clientSocket.getPeerCred().getMinimalString() + \"\\nam command: `\"+ amCommandString+ \"`\");\n  List<String> amCommandList=new ArrayList<>();\n  error=parseAmCommand(amCommandString,amCommandList);\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,null,error.toString());\n    return;\n  }\n  String[] amCommandArray=amCommandList.toArray(new String[0]);\n  Logger.logDebug(LOG_TAG,\"am command received from peer \" + clientSocket.getPeerCred().getMinimalString() + \"\\n\"+ ExecutionCommand.getArgumentsLogString(\"am command\",amCommandArray));\n  AmSocketServerRunConfig amSocketServerRunConfig=(AmSocketServerRunConfig)localSocketManager.getLocalSocketRunConfig();\n  StringBuilder stdout=new StringBuilder();\n  StringBuilder stderr=new StringBuilder();\n  error=runAmCommand(localSocketManager.getContext(),amCommandArray,stdout,stderr,amSocketServerRunConfig.shouldCheckDisplayOverAppsPermission());\n  if (error != null) {\n    sendResultToClient(localSocketManager,clientSocket,1,stdout.toString(),!stderr.toString().isEmpty() ? stderr + \"\\n\\n\" + error : error.toString());\n  }\n  sendResultToClient(localSocketManager,clientSocket,0,stdout.toString(),stderr.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 49
      },
      "nodeContext" : "String amCommandString=data.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 94,
    "startColumnNumber" : 33,
    "endLineNumber" : 94,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}