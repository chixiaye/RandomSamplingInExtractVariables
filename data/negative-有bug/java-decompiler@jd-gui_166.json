{
  "id" : 166,
  "expression" : "lastDotIndex",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/view/component/LogPage.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lastDotIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 77,
      "startColumnNumber" : 65,
      "endLineNumber" : 77,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 77,
        "startColumnNumber" : 65,
        "endLineNumber" : 77,
        "endColumnNumber" : 81
      },
      "nodeContext" : "lastDotIndex + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 77,
        "endColumnNumber" : 82
      },
      "nodeContext" : "typeAndMethodNames.substring(lastDotIndex + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 77,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 82
      },
      "nodeContext" : "methodName=typeAndMethodNames.substring(lastDotIndex + 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2048,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2147,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n catch (Exception e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 226,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 66,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logHyperlinkData.enabled) {\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 63,
        "startColumnNumber" : 76,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2373,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void openHyperlink(int x,int y,HyperlinkData hyperlinkData){\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 83
      },
      "nodeContext" : "String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "lastDotIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 78,
      "startColumnNumber" : 74,
      "endLineNumber" : 78,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 78,
        "startColumnNumber" : 42,
        "endLineNumber" : 78,
        "endColumnNumber" : 87
      },
      "nodeContext" : "typeAndMethodNames.substring(0,lastDotIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 78,
        "startColumnNumber" : 42,
        "endLineNumber" : 78,
        "endColumnNumber" : 105
      },
      "nodeContext" : "typeAndMethodNames.substring(0,lastDotIndex).replace('.','/')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 78,
        "startColumnNumber" : 23,
        "endLineNumber" : 78,
        "endColumnNumber" : 105
      },
      "nodeContext" : "internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/')",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 106
      },
      "nodeContext" : "String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2048,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2147,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n catch (Exception e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 226,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 66,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logHyperlinkData.enabled) {\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 63,
        "startColumnNumber" : 76,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2373,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void openHyperlink(int x,int y,HyperlinkData hyperlinkData){\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 106
      },
      "nodeContext" : "String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "lastDotIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 87,
      "startColumnNumber" : 70,
      "endLineNumber" : 87,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 87,
        "startColumnNumber" : 70,
        "endLineNumber" : 87,
        "endColumnNumber" : 86
      },
      "nodeContext" : "lastDotIndex + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 87,
        "startColumnNumber" : 43,
        "endLineNumber" : 87,
        "endColumnNumber" : 87
      },
      "nodeContext" : "internalTypeName.substring(lastDotIndex + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 87,
        "startColumnNumber" : 27,
        "endLineNumber" : 87,
        "endColumnNumber" : 87
      },
      "nodeContext" : "shortTypeName=internalTypeName.substring(lastDotIndex + 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 88
      },
      "nodeContext" : "String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 84,
        "startColumnNumber" : 74,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  lastDotIndex=internalTypeName.lastIndexOf('/');\n  String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n  api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n  lastDotIndex=internalTypeName.lastIndexOf('/');\n  String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n  api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n}\n else {\n  int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n  String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n  api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2048,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2147,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Point location=textArea.getLocationOnScreen();\n  int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n  api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n  String text=getText();\n  String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n  int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n  String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n  String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n  List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n  int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n  int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n  String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n  if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n    lastDotIndex=internalTypeName.lastIndexOf('/');\n    String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n    api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n  }\n else {\n    int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n    String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n    api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n  }\n}\n catch (Exception e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 226,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 66,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2203,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logHyperlinkData.enabled) {\n  try {\n    Point location=textArea.getLocationOnScreen();\n    int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n    api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n    String text=getText();\n    String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n    int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n    String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n    String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n    List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n    int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n    int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n    String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n    if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n      lastDotIndex=internalTypeName.lastIndexOf('/');\n      String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n      api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n    }\n else {\n      int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n      String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n      api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n    }\n  }\n catch (  Exception e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2301,
        "startLineNumber" : 63,
        "startColumnNumber" : 76,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2373,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void openHyperlink(int x,int y,HyperlinkData hyperlinkData){\n  LogHyperlinkData logHyperlinkData=(LogHyperlinkData)hyperlinkData;\n  if (logHyperlinkData.enabled) {\n    try {\n      Point location=textArea.getLocationOnScreen();\n      int offset=textArea.viewToModel(new Point(x - location.x,y - location.y));\n      api.addURI(new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),\"position=\" + offset,null));\n      String text=getText();\n      String typeAndMethodNames=text.substring(hyperlinkData.startPosition,hyperlinkData.endPosition);\n      int lastDotIndex=typeAndMethodNames.lastIndexOf('.');\n      String methodName=typeAndMethodNames.substring(lastDotIndex + 1);\n      String internalTypeName=typeAndMethodNames.substring(0,lastDotIndex).replace('.','/');\n      List<Container.Entry> entries=IndexesUtil.findInternalTypeName(collectionOfFutureIndexes,internalTypeName);\n      int leftParenthesisIndex=hyperlinkData.endPosition + 1;\n      int rightParenthesisIndex=text.indexOf(')',leftParenthesisIndex);\n      String lineNumberOrNativeMethodFlag=text.substring(leftParenthesisIndex,rightParenthesisIndex);\n      if (lineNumberOrNativeMethodFlag.equals(\"Native Method\")) {\n        lastDotIndex=internalTypeName.lastIndexOf('/');\n        String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n        api.openURI(x,y,entries,null,shortTypeName + '-' + methodName+ \"-(*)?\");\n      }\n else {\n        int colonIndex=lineNumberOrNativeMethodFlag.indexOf(':');\n        String lineNumber=lineNumberOrNativeMethodFlag.substring(colonIndex + 1);\n        api.openURI(x,y,entries,\"lineNumber=\" + lineNumber,null);\n      }\n    }\n catch (    Exception e) {\n      assert ExceptionUtil.printStackTrace(e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 255,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 88
      },
      "nodeContext" : "String shortTypeName=internalTypeName.substring(lastDotIndex + 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 77,
    "startColumnNumber" : 65,
    "endLineNumber" : 77,
    "endColumnNumber" : 77
  }, {
    "charLength" : 12,
    "startLineNumber" : 78,
    "startColumnNumber" : 74,
    "endLineNumber" : 78,
    "endColumnNumber" : 86
  }, {
    "charLength" : 12,
    "startLineNumber" : 87,
    "startColumnNumber" : 70,
    "endLineNumber" : 87,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}