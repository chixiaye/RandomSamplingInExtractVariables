{
  "id" : 35,
  "expression" : "methodParameterAnnotationArrays.length",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RestMethodInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodParameterAnnotationArrays.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 310,
      "startColumnNumber" : 16,
      "endLineNumber" : 310,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 310,
        "startColumnNumber" : 8,
        "endLineNumber" : 310,
        "endColumnNumber" : 54
      },
      "nodeContext" : "count=methodParameterAnnotationArrays.length",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 310,
        "startColumnNumber" : 4,
        "endLineNumber" : 310,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int count=methodParameterAnnotationArrays.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4483,
        "startLineNumber" : 306,
        "startColumnNumber" : 33,
        "endLineNumber" : 412,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?>[] methodParameterTypes=method.getParameterTypes();\n  Annotation[][] methodParameterAnnotationArrays=method.getParameterAnnotations();\n  int count=methodParameterAnnotationArrays.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  Annotation[] requestParamAnnotations=new Annotation[count];\n  boolean gotField=false;\n  boolean gotPart=false;\n  boolean gotBody=false;\n  for (int i=0; i < count; i++) {\n    Class<?> methodParameterType=methodParameterTypes[i];\n    Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n    if (methodParameterAnnotations != null) {\n      for (      Annotation methodParameterAnnotation : methodParameterAnnotations) {\n        Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n        if (methodAnnotationType == Path.class) {\n          String name=((Path)methodParameterAnnotation).value();\n          validatePathName(i,name);\n        }\n else         if (methodAnnotationType == Query.class) {\n        }\n else         if (methodAnnotationType == QueryMap.class) {\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n          }\n        }\n else         if (methodAnnotationType == Header.class) {\n        }\n else         if (methodAnnotationType == Field.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == FieldMap.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == Part.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == PartMap.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@PartMap parameter type must be Map.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == Body.class) {\n          if (requestType != RequestType.SIMPLE) {\n            throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n          }\n          if (gotBody) {\n            throw methodError(\"Multiple @Body method annotations found.\");\n          }\n          gotBody=true;\n        }\n else {\n          continue;\n        }\n        if (requestParamAnnotations[i] != null) {\n          throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n        }\n        requestParamAnnotations[i]=methodParameterAnnotation;\n      }\n    }\n    if (requestParamAnnotations[i] == null) {\n      throw parameterError(i,\"No Retrofit annotation found.\");\n    }\n  }\n  if (requestType == RequestType.SIMPLE && !requestHasBody && gotBody) {\n    throw methodError(\"Non-body HTTP method cannot contain @Body or @TypedOutput.\");\n  }\n  if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {\n    throw methodError(\"Form-encoded method must contain at least one @Field.\");\n  }\n  if (requestType == RequestType.MULTIPART && !gotPart) {\n    throw methodError(\"Multipart method must contain at least one @Part.\");\n  }\n  this.requestParamAnnotations=requestParamAnnotations;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4627,
        "startLineNumber" : 303,
        "startColumnNumber" : 2,
        "endLineNumber" : 412,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestParamAnnotations}. Must be called after  {@link #parseMethodAnnotations()}.\n */\nprivate void parseParameters(){\n  Class<?>[] methodParameterTypes=method.getParameterTypes();\n  Annotation[][] methodParameterAnnotationArrays=method.getParameterAnnotations();\n  int count=methodParameterAnnotationArrays.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  Annotation[] requestParamAnnotations=new Annotation[count];\n  boolean gotField=false;\n  boolean gotPart=false;\n  boolean gotBody=false;\n  for (int i=0; i < count; i++) {\n    Class<?> methodParameterType=methodParameterTypes[i];\n    Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n    if (methodParameterAnnotations != null) {\n      for (      Annotation methodParameterAnnotation : methodParameterAnnotations) {\n        Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n        if (methodAnnotationType == Path.class) {\n          String name=((Path)methodParameterAnnotation).value();\n          validatePathName(i,name);\n        }\n else         if (methodAnnotationType == Query.class) {\n        }\n else         if (methodAnnotationType == QueryMap.class) {\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n          }\n        }\n else         if (methodAnnotationType == Header.class) {\n        }\n else         if (methodAnnotationType == Field.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == FieldMap.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == Part.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == PartMap.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@PartMap parameter type must be Map.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == Body.class) {\n          if (requestType != RequestType.SIMPLE) {\n            throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n          }\n          if (gotBody) {\n            throw methodError(\"Multiple @Body method annotations found.\");\n          }\n          gotBody=true;\n        }\n else {\n          continue;\n        }\n        if (requestParamAnnotations[i] != null) {\n          throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n        }\n        requestParamAnnotations[i]=methodParameterAnnotation;\n      }\n    }\n    if (requestParamAnnotations[i] == null) {\n      throw parameterError(i,\"No Retrofit annotation found.\");\n    }\n  }\n  if (requestType == RequestType.SIMPLE && !requestHasBody && gotBody) {\n    throw methodError(\"Non-body HTTP method cannot contain @Body or @TypedOutput.\");\n  }\n  if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {\n    throw methodError(\"Form-encoded method must contain at least one @Field.\");\n  }\n  if (requestType == RequestType.MULTIPART && !gotPart) {\n    throw methodError(\"Multipart method must contain at least one @Part.\");\n  }\n  this.requestParamAnnotations=requestParamAnnotations;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 432,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 310,
        "startColumnNumber" : 4,
        "endLineNumber" : 310,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int count=methodParameterAnnotationArrays.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 310,
    "startColumnNumber" : 16,
    "endLineNumber" : 310,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}