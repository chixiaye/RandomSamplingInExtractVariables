{
  "id" : 191,
  "expression" : "readBox(ATOM_MVHD)",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "readBox(ATOM_MVHD)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 625,
      "startColumnNumber" : 16,
      "endLineNumber" : 625,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 625,
        "startColumnNumber" : 12,
        "endLineNumber" : 625,
        "endColumnNumber" : 34
      },
      "nodeContext" : "b=readBox(ATOM_MVHD)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 625,
        "startColumnNumber" : 8,
        "endLineNumber" : 625,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Box b=readBox(ATOM_MVHD);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 624,
        "startColumnNumber" : 61,
        "endLineNumber" : 648,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Box b=readBox(ATOM_MVHD);\n  Moov moov=new Moov();\n  moov.mvhd=parseMvhd();\n  ensure(b);\n  ArrayList<Trak> tmp=new ArrayList<>((int)moov.mvhd.nextTrackId);\n  while ((b=untilBox(ref,ATOM_TRAK,ATOM_MVEX)) != null) {\nswitch (b.type) {\ncase ATOM_TRAK:      tmp.add(parseTrak(b));\n    break;\ncase ATOM_MVEX:  moov.mvexTrex=parseMvex(b,(int)moov.mvhd.nextTrackId);\nbreak;\n}\nensure(b);\n}\nmoov.trak=tmp.toArray(new Trak[0]);\nreturn moov;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 624,
        "startColumnNumber" : 4,
        "endLineNumber" : 648,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Moov parseMoov(final Box ref) throws IOException {\n  Box b=readBox(ATOM_MVHD);\n  Moov moov=new Moov();\n  moov.mvhd=parseMvhd();\n  ensure(b);\n  ArrayList<Trak> tmp=new ArrayList<>((int)moov.mvhd.nextTrackId);\n  while ((b=untilBox(ref,ATOM_TRAK,ATOM_MVEX)) != null) {\nswitch (b.type) {\ncase ATOM_TRAK:      tmp.add(parseTrak(b));\n    break;\ncase ATOM_MVEX:  moov.mvexTrex=parseMvex(b,(int)moov.mvhd.nextTrackId);\nbreak;\n}\nensure(b);\n}\nmoov.trak=tmp.toArray(new Trak[0]);\nreturn moov;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 625,
        "startColumnNumber" : 8,
        "endLineNumber" : 625,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Box b=readBox(ATOM_MVHD);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.schabi.newpipe.streams.Mp4DashReader.Box"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 625,
    "startColumnNumber" : 16,
    "endLineNumber" : 625,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}