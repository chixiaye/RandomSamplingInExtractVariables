{
  "id" : 319,
  "expression" : "new int[windowCount + 1]",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/testutils/src/main/java/com/google/android/exoplayer2/testutil/TimelineAsserts.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new int[windowCount + 1]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 160,
      "startColumnNumber" : 36,
      "endLineNumber" : 160,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 160,
        "startColumnNumber" : 10,
        "endLineNumber" : 160,
        "endColumnNumber" : 60
      },
      "nodeContext" : "accumulatedPeriodCounts=new int[windowCount + 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 61
      },
      "nodeContext" : "int[] accumulatedPeriodCounts=new int[windowCount + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 157,
        "startColumnNumber" : 88,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int windowCount=timeline.getWindowCount();\n  assertThat(windowCount).isEqualTo(expectedPeriodCounts.length);\n  int[] accumulatedPeriodCounts=new int[windowCount + 1];\n  accumulatedPeriodCounts[0]=0;\n  for (int i=0; i < windowCount; i++) {\n    accumulatedPeriodCounts[i + 1]=accumulatedPeriodCounts[i] + expectedPeriodCounts[i];\n  }\n  assertThat(timeline.getPeriodCount()).isEqualTo(accumulatedPeriodCounts[accumulatedPeriodCounts.length - 1]);\n  Window window=new Window();\n  Period period=new Period();\n  for (int i=0; i < windowCount; i++) {\n    timeline.getWindow(i,window);\n    assertThat(window.firstPeriodIndex).isEqualTo(accumulatedPeriodCounts[i]);\n    assertThat(window.lastPeriodIndex).isEqualTo(accumulatedPeriodCounts[i + 1] - 1);\n  }\n  int expectedWindowIndex=0;\n  for (int i=0; i < timeline.getPeriodCount(); i++) {\n    timeline.getPeriod(i,period,true);\n    while (i >= accumulatedPeriodCounts[expectedWindowIndex + 1]) {\n      expectedWindowIndex++;\n    }\n    assertThat(period.windowIndex).isEqualTo(expectedWindowIndex);\n    Object periodUid=Assertions.checkNotNull(period.uid);\n    assertThat(timeline.getIndexOfPeriod(periodUid)).isEqualTo(i);\n    assertThat(timeline.getUidOfPeriod(i)).isEqualTo(periodUid);\n    for (    int repeatMode : REPEAT_MODES) {\n      if (i < accumulatedPeriodCounts[expectedWindowIndex + 1] - 1) {\n        assertThat(timeline.getNextPeriodIndex(i,period,window,repeatMode,false)).isEqualTo(i + 1);\n      }\n else {\n        int nextWindow=timeline.getNextWindowIndex(expectedWindowIndex,repeatMode,false);\n        int nextPeriod=nextWindow == C.INDEX_UNSET ? C.INDEX_UNSET : accumulatedPeriodCounts[nextWindow];\n        assertThat(timeline.getNextPeriodIndex(i,period,window,repeatMode,false)).isEqualTo(nextPeriod);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 152,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Asserts that period counts for each window are set correctly. Also asserts that  {@link Window#firstPeriodIndex} and {@link Window#lastPeriodIndex} are set correctly, and it assertsthe correct behavior of  {@link Timeline#getNextWindowIndex(int,int,boolean)}.\n */\npublic static void assertPeriodCounts(Timeline timeline,int... expectedPeriodCounts){\n  int windowCount=timeline.getWindowCount();\n  assertThat(windowCount).isEqualTo(expectedPeriodCounts.length);\n  int[] accumulatedPeriodCounts=new int[windowCount + 1];\n  accumulatedPeriodCounts[0]=0;\n  for (int i=0; i < windowCount; i++) {\n    accumulatedPeriodCounts[i + 1]=accumulatedPeriodCounts[i] + expectedPeriodCounts[i];\n  }\n  assertThat(timeline.getPeriodCount()).isEqualTo(accumulatedPeriodCounts[accumulatedPeriodCounts.length - 1]);\n  Window window=new Window();\n  Period period=new Period();\n  for (int i=0; i < windowCount; i++) {\n    timeline.getWindow(i,window);\n    assertThat(window.firstPeriodIndex).isEqualTo(accumulatedPeriodCounts[i]);\n    assertThat(window.lastPeriodIndex).isEqualTo(accumulatedPeriodCounts[i + 1] - 1);\n  }\n  int expectedWindowIndex=0;\n  for (int i=0; i < timeline.getPeriodCount(); i++) {\n    timeline.getPeriod(i,period,true);\n    while (i >= accumulatedPeriodCounts[expectedWindowIndex + 1]) {\n      expectedWindowIndex++;\n    }\n    assertThat(period.windowIndex).isEqualTo(expectedWindowIndex);\n    Object periodUid=Assertions.checkNotNull(period.uid);\n    assertThat(timeline.getIndexOfPeriod(periodUid)).isEqualTo(i);\n    assertThat(timeline.getUidOfPeriod(i)).isEqualTo(periodUid);\n    for (    int repeatMode : REPEAT_MODES) {\n      if (i < accumulatedPeriodCounts[expectedWindowIndex + 1] - 1) {\n        assertThat(timeline.getNextPeriodIndex(i,period,window,repeatMode,false)).isEqualTo(i + 1);\n      }\n else {\n        int nextWindow=timeline.getNextWindowIndex(expectedWindowIndex,repeatMode,false);\n        int nextPeriod=nextWindow == C.INDEX_UNSET ? C.INDEX_UNSET : accumulatedPeriodCounts[nextWindow];\n        assertThat(timeline.getNextPeriodIndex(i,period,window,repeatMode,false)).isEqualTo(nextPeriod);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 61
      },
      "nodeContext" : "int[] accumulatedPeriodCounts=new int[windowCount + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 160,
    "startColumnNumber" : 36,
    "endLineNumber" : 160,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}