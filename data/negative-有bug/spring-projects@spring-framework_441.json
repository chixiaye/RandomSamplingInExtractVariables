{
  "id" : 441,
  "expression" : "beanName",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/test/java/org/springframework/jmx/export/NotificationListenerTests.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "beanName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 219,
      "startColumnNumber" : 28,
      "endLineNumber" : 219,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 47
      },
      "nodeContext" : "factory.registerSingleton(beanName,testBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 48
      },
      "nodeContext" : "factory.registerSingleton(beanName,testBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 211,
        "startColumnNumber" : 98,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 209,
        "startColumnNumber" : 1,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) @Test public void testRegisterNotificationListenerWithBeanNameAndBeanNameInBeansMap() throws Exception {\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 48
      },
      "nodeContext" : "factory.registerSingleton(beanName,testBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "beanName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 222,
      "startColumnNumber" : 12,
      "endLineNumber" : 222,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 31
      },
      "nodeContext" : "beans.put(beanName,beanName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 32
      },
      "nodeContext" : "beans.put(beanName,beanName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 211,
        "startColumnNumber" : 98,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 209,
        "startColumnNumber" : 1,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) @Test public void testRegisterNotificationListenerWithBeanNameAndBeanNameInBeansMap() throws Exception {\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 32
      },
      "nodeContext" : "beans.put(beanName,beanName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "beanName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 222,
      "startColumnNumber" : 22,
      "endLineNumber" : 222,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 31
      },
      "nodeContext" : "beans.put(beanName,beanName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 32
      },
      "nodeContext" : "beans.put(beanName,beanName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 211,
        "startColumnNumber" : 98,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 209,
        "startColumnNumber" : 1,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) @Test public void testRegisterNotificationListenerWithBeanNameAndBeanNameInBeansMap() throws Exception {\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 222,
        "endColumnNumber" : 32
      },
      "nodeContext" : "beans.put(beanName,beanName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "beanName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 226,
      "startColumnNumber" : 23,
      "endLineNumber" : 226,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 42
      },
      "nodeContext" : "listenerMappings.put(beanName,listener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 43
      },
      "nodeContext" : "listenerMappings.put(beanName,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1035,
        "startLineNumber" : 211,
        "startColumnNumber" : 98,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 209,
        "startColumnNumber" : 1,
        "endLineNumber" : 238,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) @Test public void testRegisterNotificationListenerWithBeanNameAndBeanNameInBeansMap() throws Exception {\n  String beanName=\"testBean\";\n  ObjectName objectName=ObjectName.getInstance(\"spring:name=Test\");\n  SelfNamingTestBean testBean=new SelfNamingTestBean();\n  testBean.setObjectName(objectName);\n  DefaultListableBeanFactory factory=new DefaultListableBeanFactory();\n  factory.registerSingleton(beanName,testBean);\n  Map<String,Object> beans=new HashMap<>();\n  beans.put(beanName,beanName);\n  Map listenerMappings=new HashMap();\n  CountingAttributeChangeNotificationListener listener=new CountingAttributeChangeNotificationListener();\n  listenerMappings.put(beanName,listener);\n  MBeanExporter exporter=new MBeanExporter();\n  exporter.setServer(server);\n  exporter.setBeans(beans);\n  exporter.setNotificationListenerMappings(listenerMappings);\n  exporter.setBeanFactory(factory);\n  start(exporter);\n  assertIsRegistered(\"Should have registered MBean\",objectName);\n  server.setAttribute(objectName,new Attribute(\"Age\",new Integer(77)));\n  assertEquals(\"Listener not notified\",1,listener.getCount(\"Age\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 226,
        "endColumnNumber" : 43
      },
      "nodeContext" : "listenerMappings.put(beanName,listener);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 219,
    "startColumnNumber" : 28,
    "endLineNumber" : 219,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 222,
    "startColumnNumber" : 12,
    "endLineNumber" : 222,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 222,
    "startColumnNumber" : 22,
    "endLineNumber" : 222,
    "endColumnNumber" : 30
  }, {
    "charLength" : 8,
    "startLineNumber" : 226,
    "startColumnNumber" : 23,
    "endLineNumber" : 226,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}