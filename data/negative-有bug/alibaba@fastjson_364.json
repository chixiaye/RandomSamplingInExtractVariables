{
  "id" : 364,
  "expression" : "buf",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/str/StringTest_02.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 18,
      "startColumnNumber" : 8,
      "endLineNumber" : 18,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"[\\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 26
      },
      "nodeContext" : "buf.append(\"[\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 14,
        "startColumnNumber" : 47,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 26
      },
      "nodeContext" : "buf.append(\"[\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 20,
      "startColumnNumber" : 12,
      "endLineNumber" : 20,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 30
      },
      "nodeContext" : "buf.append(\"\\\\\\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 31
      },
      "nodeContext" : "buf.append(\"\\\\\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 19,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  buf.append(\"\\\\\\\"\");\n  buf.append(new String(chars));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 16; ++i) {\n  buf.append(\"\\\\\\\"\");\n  buf.append(new String(chars));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 14,
        "startColumnNumber" : 47,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 31
      },
      "nodeContext" : "buf.append(\"\\\\\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 21,
      "startColumnNumber" : 12,
      "endLineNumber" : 21,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 41
      },
      "nodeContext" : "buf.append(new String(chars))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 42
      },
      "nodeContext" : "buf.append(new String(chars));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 19,
        "startColumnNumber" : 37,
        "endLineNumber" : 22,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  buf.append(\"\\\\\\\"\");\n  buf.append(new String(chars));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 16; ++i) {\n  buf.append(\"\\\\\\\"\");\n  buf.append(new String(chars));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 14,
        "startColumnNumber" : 47,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 42
      },
      "nodeContext" : "buf.append(new String(chars));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 23,
      "startColumnNumber" : 8,
      "endLineNumber" : 23,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"\\\"]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 26
      },
      "nodeContext" : "buf.append(\"\\\"]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 14,
        "startColumnNumber" : 47,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 26
      },
      "nodeContext" : "buf.append(\"\\\"]\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "buf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 25,
      "startColumnNumber" : 22,
      "endLineNumber" : 25,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 25,
        "startColumnNumber" : 22,
        "endLineNumber" : 25,
        "endColumnNumber" : 36
      },
      "nodeContext" : "buf.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 25,
        "startColumnNumber" : 15,
        "endLineNumber" : 25,
        "endColumnNumber" : 36
      },
      "nodeContext" : "text=buf.toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 37
      },
      "nodeContext" : "String text=buf.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 14,
        "startColumnNumber" : 47,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  char[] chars=new char[1024];\n  Arrays.fill(chars,'0');\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"[\\\"\");\n  for (int i=0; i < 16; ++i) {\n    buf.append(\"\\\\\\\"\");\n    buf.append(new String(chars));\n  }\n  buf.append(\"\\\"]\");\n  String text=buf.toString();\n  JSONArray array=(JSONArray)JSON.parse(text);\n  Assert.assertEquals(1,array.size());\n  String item=(String)array.get(0);\n  Assert.assertEquals(16 * 1024 + 16,item.length());\n  for (int i=0; i < 16; ++i) {\n    Assert.assertTrue(item.charAt(i * 1025) == '\\\"');\n    for (int j=0; j < 1024; ++j) {\n      Assert.assertTrue(item.charAt(i * 1025 + j + 1) == '0');\n    }\n  }\n  Assert.assertEquals(text,JSON.toJSONString(array));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 37
      },
      "nodeContext" : "String text=buf.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 18,
    "startColumnNumber" : 8,
    "endLineNumber" : 18,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 20,
    "startColumnNumber" : 12,
    "endLineNumber" : 20,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 21,
    "startColumnNumber" : 12,
    "endLineNumber" : 21,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 23,
    "startColumnNumber" : 8,
    "endLineNumber" : 23,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 25,
    "startColumnNumber" : 22,
    "endLineNumber" : 25,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}