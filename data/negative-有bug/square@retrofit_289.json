{
  "id" : 289,
  "expression" : "requestBody",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/MethodInfo.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "requestBody",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 130,
      "startColumnNumber" : 12,
      "endLineNumber" : 130,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestBody != RequestBody.SIMPLE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (requestBody != RequestBody.SIMPLE) {\n  throw methodError(\"Only one encoding annotation is allowed.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 129,
        "startColumnNumber" : 52,
        "endLineNumber" : 134,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 129,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 123,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 118,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 114,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 112,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 201,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1655,
        "startLineNumber" : 110,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == GET.class) {\n  parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n}\n else if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1792,
        "startLineNumber" : 108,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == DELETE.class) {\n  parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n}\n else if (annotationType == GET.class) {\n  parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n}\n else if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 239,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 106,
        "startColumnNumber" : 64,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n  if (annotationType == DELETE.class) {\n    parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n  }\n else   if (annotationType == GET.class) {\n    parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n  }\n else   if (annotationType == HEAD.class) {\n    parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n  }\n else   if (annotationType == PATCH.class) {\n    parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n  }\n else   if (annotationType == POST.class) {\n    parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n  }\n else   if (annotationType == PUT.class) {\n    parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n  }\n else   if (annotationType == HTTP.class) {\n    HTTP http=(HTTP)methodAnnotation;\n    parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n  }\n else   if (annotationType == Headers.class) {\n    String[] headersToParse=((Headers)methodAnnotation).value();\n    if (headersToParse.length == 0) {\n      throw methodError(\"@Headers annotation is empty.\");\n    }\n    headers=parseHeaders(headersToParse);\n  }\n else   if (annotationType == Multipart.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.MULTIPART;\n  }\n else   if (annotationType == FormUrlEncoded.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.FORM_URL_ENCODED;\n  }\n else   if (annotationType == Streaming.class) {\n    isStreaming=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1952,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Annotation methodAnnotation : method.getAnnotations()) {\n  Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n  if (annotationType == DELETE.class) {\n    parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n  }\n else   if (annotationType == GET.class) {\n    parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n  }\n else   if (annotationType == HEAD.class) {\n    parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n  }\n else   if (annotationType == PATCH.class) {\n    parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n  }\n else   if (annotationType == POST.class) {\n    parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n  }\n else   if (annotationType == PUT.class) {\n    parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n  }\n else   if (annotationType == HTTP.class) {\n    HTTP http=(HTTP)methodAnnotation;\n    parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n  }\n else   if (annotationType == Headers.class) {\n    String[] headersToParse=((Headers)methodAnnotation).value();\n    if (headersToParse.length == 0) {\n      throw methodError(\"@Headers annotation is empty.\");\n    }\n    headers=parseHeaders(headersToParse);\n  }\n else   if (annotationType == Multipart.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.MULTIPART;\n  }\n else   if (annotationType == FormUrlEncoded.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.FORM_URL_ENCODED;\n  }\n else   if (annotationType == Streaming.class) {\n    isStreaming=true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 260,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2611,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestMethod} and {@link #requestBody}. \n */\nprivate void parseMethodAnnotations(){\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestBody != RequestBody.SIMPLE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.MethodInfo.RequestBody"
  }, {
    "nodeContext" : "requestBody",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 135,
      "startColumnNumber" : 12,
      "endLineNumber" : 135,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestBody != RequestBody.SIMPLE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (requestBody != RequestBody.SIMPLE) {\n  throw methodError(\"Only one encoding annotation is allowed.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 134,
        "startColumnNumber" : 57,
        "endLineNumber" : 139,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 134,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 129,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 123,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 118,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1263,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 114,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 112,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 201,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1655,
        "startLineNumber" : 110,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == GET.class) {\n  parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n}\n else if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1792,
        "startLineNumber" : 108,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == DELETE.class) {\n  parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n}\n else if (annotationType == GET.class) {\n  parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n}\n else if (annotationType == HEAD.class) {\n  parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n}\n else if (annotationType == PATCH.class) {\n  parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n}\n else if (annotationType == POST.class) {\n  parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n}\n else if (annotationType == PUT.class) {\n  parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n}\n else if (annotationType == HTTP.class) {\n  HTTP http=(HTTP)methodAnnotation;\n  parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n}\n else if (annotationType == Headers.class) {\n  String[] headersToParse=((Headers)methodAnnotation).value();\n  if (headersToParse.length == 0) {\n    throw methodError(\"@Headers annotation is empty.\");\n  }\n  headers=parseHeaders(headersToParse);\n}\n else if (annotationType == Multipart.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.MULTIPART;\n}\n else if (annotationType == FormUrlEncoded.class) {\n  if (requestBody != RequestBody.SIMPLE) {\n    throw methodError(\"Only one encoding annotation is allowed.\");\n  }\n  requestBody=RequestBody.FORM_URL_ENCODED;\n}\n else if (annotationType == Streaming.class) {\n  isStreaming=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 239,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 106,
        "startColumnNumber" : 64,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n  if (annotationType == DELETE.class) {\n    parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n  }\n else   if (annotationType == GET.class) {\n    parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n  }\n else   if (annotationType == HEAD.class) {\n    parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n  }\n else   if (annotationType == PATCH.class) {\n    parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n  }\n else   if (annotationType == POST.class) {\n    parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n  }\n else   if (annotationType == PUT.class) {\n    parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n  }\n else   if (annotationType == HTTP.class) {\n    HTTP http=(HTTP)methodAnnotation;\n    parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n  }\n else   if (annotationType == Headers.class) {\n    String[] headersToParse=((Headers)methodAnnotation).value();\n    if (headersToParse.length == 0) {\n      throw methodError(\"@Headers annotation is empty.\");\n    }\n    headers=parseHeaders(headersToParse);\n  }\n else   if (annotationType == Multipart.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.MULTIPART;\n  }\n else   if (annotationType == FormUrlEncoded.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.FORM_URL_ENCODED;\n  }\n else   if (annotationType == Streaming.class) {\n    isStreaming=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1952,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Annotation methodAnnotation : method.getAnnotations()) {\n  Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n  if (annotationType == DELETE.class) {\n    parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n  }\n else   if (annotationType == GET.class) {\n    parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n  }\n else   if (annotationType == HEAD.class) {\n    parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n  }\n else   if (annotationType == PATCH.class) {\n    parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n  }\n else   if (annotationType == POST.class) {\n    parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n  }\n else   if (annotationType == PUT.class) {\n    parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n  }\n else   if (annotationType == HTTP.class) {\n    HTTP http=(HTTP)methodAnnotation;\n    parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n  }\n else   if (annotationType == Headers.class) {\n    String[] headersToParse=((Headers)methodAnnotation).value();\n    if (headersToParse.length == 0) {\n      throw methodError(\"@Headers annotation is empty.\");\n    }\n    headers=parseHeaders(headersToParse);\n  }\n else   if (annotationType == Multipart.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.MULTIPART;\n  }\n else   if (annotationType == FormUrlEncoded.class) {\n    if (requestBody != RequestBody.SIMPLE) {\n      throw methodError(\"Only one encoding annotation is allowed.\");\n    }\n    requestBody=RequestBody.FORM_URL_ENCODED;\n  }\n else   if (annotationType == Streaming.class) {\n    isStreaming=true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 260,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2611,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestMethod} and {@link #requestBody}. \n */\nprivate void parseMethodAnnotations(){\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 45
      },
      "nodeContext" : "requestBody != RequestBody.SIMPLE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.MethodInfo.RequestBody"
  }, {
    "nodeContext" : "requestBody",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 148,
      "startColumnNumber" : 10,
      "endLineNumber" : 148,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 148,
        "startColumnNumber" : 10,
        "endLineNumber" : 148,
        "endColumnNumber" : 46
      },
      "nodeContext" : "requestBody == RequestBody.MULTIPART",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 148,
        "startColumnNumber" : 6,
        "endLineNumber" : 151,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (requestBody == RequestBody.MULTIPART) {\n  throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 147,
        "startColumnNumber" : 25,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (requestBody == RequestBody.MULTIPART) {\n    throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n  }\n  if (requestBody == RequestBody.FORM_URL_ENCODED) {\n    throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!requestHasBody) {\n  if (requestBody == RequestBody.MULTIPART) {\n    throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n  }\n  if (requestBody == RequestBody.FORM_URL_ENCODED) {\n    throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2611,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestMethod} and {@link #requestBody}. \n */\nprivate void parseMethodAnnotations(){\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 148,
        "startColumnNumber" : 10,
        "endLineNumber" : 148,
        "endColumnNumber" : 46
      },
      "nodeContext" : "requestBody == RequestBody.MULTIPART",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.MethodInfo.RequestBody"
  }, {
    "nodeContext" : "requestBody",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 152,
      "startColumnNumber" : 10,
      "endLineNumber" : 152,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 152,
        "startColumnNumber" : 10,
        "endLineNumber" : 152,
        "endColumnNumber" : 53
      },
      "nodeContext" : "requestBody == RequestBody.FORM_URL_ENCODED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 152,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (requestBody == RequestBody.FORM_URL_ENCODED) {\n  throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 147,
        "startColumnNumber" : 25,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (requestBody == RequestBody.MULTIPART) {\n    throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n  }\n  if (requestBody == RequestBody.FORM_URL_ENCODED) {\n    throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!requestHasBody) {\n  if (requestBody == RequestBody.MULTIPART) {\n    throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n  }\n  if (requestBody == RequestBody.FORM_URL_ENCODED) {\n    throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2611,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestMethod} and {@link #requestBody}. \n */\nprivate void parseMethodAnnotations(){\n  for (  Annotation methodAnnotation : method.getAnnotations()) {\n    Class<? extends Annotation> annotationType=methodAnnotation.annotationType();\n    if (annotationType == DELETE.class) {\n      parseHttpMethodAndPath(\"DELETE\",((DELETE)methodAnnotation).value(),false);\n    }\n else     if (annotationType == GET.class) {\n      parseHttpMethodAndPath(\"GET\",((GET)methodAnnotation).value(),false);\n    }\n else     if (annotationType == HEAD.class) {\n      parseHttpMethodAndPath(\"HEAD\",((HEAD)methodAnnotation).value(),false);\n    }\n else     if (annotationType == PATCH.class) {\n      parseHttpMethodAndPath(\"PATCH\",((PATCH)methodAnnotation).value(),true);\n    }\n else     if (annotationType == POST.class) {\n      parseHttpMethodAndPath(\"POST\",((POST)methodAnnotation).value(),true);\n    }\n else     if (annotationType == PUT.class) {\n      parseHttpMethodAndPath(\"PUT\",((PUT)methodAnnotation).value(),true);\n    }\n else     if (annotationType == HTTP.class) {\n      HTTP http=(HTTP)methodAnnotation;\n      parseHttpMethodAndPath(http.method(),http.path(),http.hasBody());\n    }\n else     if (annotationType == Headers.class) {\n      String[] headersToParse=((Headers)methodAnnotation).value();\n      if (headersToParse.length == 0) {\n        throw methodError(\"@Headers annotation is empty.\");\n      }\n      headers=parseHeaders(headersToParse);\n    }\n else     if (annotationType == Multipart.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.MULTIPART;\n    }\n else     if (annotationType == FormUrlEncoded.class) {\n      if (requestBody != RequestBody.SIMPLE) {\n        throw methodError(\"Only one encoding annotation is allowed.\");\n      }\n      requestBody=RequestBody.FORM_URL_ENCODED;\n    }\n else     if (annotationType == Streaming.class) {\n      isStreaming=true;\n    }\n  }\n  if (requestMethod == null) {\n    throw methodError(\"HTTP method annotation is required (e.g., @GET, @POST, etc.).\");\n  }\n  if (!requestHasBody) {\n    if (requestBody == RequestBody.MULTIPART) {\n      throw methodError(\"Multipart can only be specified on HTTP methods with request body (e.g., @POST).\");\n    }\n    if (requestBody == RequestBody.FORM_URL_ENCODED) {\n      throw methodError(\"FormUrlEncoded can only be specified on HTTP methods with request body \" + \"(e.g., @POST).\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 152,
        "startColumnNumber" : 10,
        "endLineNumber" : 152,
        "endColumnNumber" : 53
      },
      "nodeContext" : "requestBody == RequestBody.FORM_URL_ENCODED",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.MethodInfo.RequestBody"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 130,
    "startColumnNumber" : 12,
    "endLineNumber" : 130,
    "endColumnNumber" : 23
  }, {
    "charLength" : 11,
    "startLineNumber" : 135,
    "startColumnNumber" : 12,
    "endLineNumber" : 135,
    "endColumnNumber" : 23
  }, {
    "charLength" : 11,
    "startLineNumber" : 148,
    "startColumnNumber" : 10,
    "endLineNumber" : 148,
    "endColumnNumber" : 21
  }, {
    "charLength" : 11,
    "startLineNumber" : 152,
    "startColumnNumber" : 10,
    "endLineNumber" : 152,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}