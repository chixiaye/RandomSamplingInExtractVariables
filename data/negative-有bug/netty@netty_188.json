{
  "id" : 188,
  "expression" : "data.readerIndex()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-classes-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDomainDatagramChannel.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "data.readerIndex()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 134,
      "startColumnNumber" : 66,
      "endLineNumber" : 134,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 134,
        "startColumnNumber" : 31,
        "endLineNumber" : 134,
        "endColumnNumber" : 105
      },
      "nodeContext" : "socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 105
      },
      "nodeContext" : "writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 106
      },
      "nodeContext" : "writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 133,
        "startColumnNumber" : 39,
        "endLineNumber" : 135,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (remoteAddress == null) {\n  writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n}\n else {\n  writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 131,
        "startColumnNumber" : 37,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1552,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.hasMemoryAddress()) {\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 185,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2265,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected boolean doWriteMessage(Object msg) throws Exception {\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 134,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 106
      },
      "nodeContext" : "writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "data.readerIndex()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 136,
      "startColumnNumber" : 79,
      "endLineNumber" : 136,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 136,
        "startColumnNumber" : 31,
        "endLineNumber" : 137,
        "endColumnNumber" : 73
      },
      "nodeContext" : "socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 73
      },
      "nodeContext" : "writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 137,
        "endColumnNumber" : 74
      },
      "nodeContext" : "writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 135,
        "startColumnNumber" : 19,
        "endLineNumber" : 138,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (remoteAddress == null) {\n  writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n}\n else {\n  writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 131,
        "startColumnNumber" : 37,
        "endLineNumber" : 139,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1552,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.hasMemoryAddress()) {\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 185,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2265,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected boolean doWriteMessage(Object msg) throws Exception {\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 136,
        "startColumnNumber" : 31,
        "endLineNumber" : 137,
        "endColumnNumber" : 73
      },
      "nodeContext" : "socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "data.readerIndex()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 141,
      "startColumnNumber" : 28,
      "endLineNumber" : 141,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 69
      },
      "nodeContext" : "array.add(data,data.readerIndex(),data.readableBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 70
      },
      "nodeContext" : "array.add(data,data.readerIndex(),data.readableBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 566,
        "startLineNumber" : 139,
        "startColumnNumber" : 46,
        "endLineNumber" : 151,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1066,
        "startLineNumber" : 139,
        "startColumnNumber" : 15,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1552,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.hasMemoryAddress()) {\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 185,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2265,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected boolean doWriteMessage(Object msg) throws Exception {\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 70
      },
      "nodeContext" : "array.add(data,data.readerIndex(),data.readableBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "data.readerIndex()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 152,
      "startColumnNumber" : 56,
      "endLineNumber" : 152,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 152,
        "startColumnNumber" : 33,
        "endLineNumber" : 152,
        "endColumnNumber" : 97
      },
      "nodeContext" : "data.internalNioBuffer(data.readerIndex(),data.readableBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 152,
        "startColumnNumber" : 23,
        "endLineNumber" : 152,
        "endColumnNumber" : 97
      },
      "nodeContext" : "nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 151,
        "startColumnNumber" : 15,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1066,
        "startLineNumber" : 139,
        "startColumnNumber" : 15,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1552,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.hasMemoryAddress()) {\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else if (data.nioBufferCount() > 1) {\n  IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 185,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2265,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 273,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2342,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected boolean doWriteMessage(Object msg) throws Exception {\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=(ByteBuf)msg;\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=((KQueueEventLoop)eventLoop()).cleanArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 152,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 134,
    "startColumnNumber" : 66,
    "endLineNumber" : 134,
    "endColumnNumber" : 84
  }, {
    "charLength" : 18,
    "startLineNumber" : 136,
    "startColumnNumber" : 79,
    "endLineNumber" : 136,
    "endColumnNumber" : 97
  }, {
    "charLength" : 18,
    "startLineNumber" : 141,
    "startColumnNumber" : 28,
    "endLineNumber" : 141,
    "endColumnNumber" : 46
  }, {
    "charLength" : 18,
    "startLineNumber" : 152,
    "startColumnNumber" : 56,
    "endLineNumber" : 152,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}