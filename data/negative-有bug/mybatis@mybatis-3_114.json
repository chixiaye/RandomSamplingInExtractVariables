{
  "id" : 114,
  "expression" : "value instanceof Map",
  "projectName" : "mybatis@mybatis-3",
  "commitID" : "a84ece4f08bb04fa6a5babd800113fe7338a9880",
  "filePath" : "/src/main/java/org/apache/ibatis/scripting/xmltags/ExpressionEvaluator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value instanceof Map",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 77,
      "startColumnNumber" : 8,
      "endLineNumber" : 77,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (value instanceof Map) {\n  return ((Map)value).entrySet();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 53,
        "startColumnNumber" : 99,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object value=OgnlCache.getValue(expression,parameterObject);\n  if (value == null) {\n    if (nullable) {\n      return null;\n    }\n else {\n      throw new BuilderException(\"The expression '\" + expression + \"' evaluated to a null value.\");\n    }\n  }\n  if (value instanceof Iterable) {\n    return (Iterable<?>)value;\n  }\n  if (value.getClass().isArray()) {\n    int size=Array.getLength(value);\n    List<Object> answer=new ArrayList<>();\n    for (int i=0; i < size; i++) {\n      Object o=Array.get(value,i);\n      answer.add(o);\n    }\n    return answer;\n  }\n  if (value instanceof Map) {\n    return ((Map)value).entrySet();\n  }\n  throw new BuilderException(\"Error evaluating expression '\" + expression + \"'.  Return value (\"+ value+ \") was not iterable.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @since 3.5.9\n */\npublic Iterable<?> evaluateIterable(String expression,Object parameterObject,boolean nullable){\n  Object value=OgnlCache.getValue(expression,parameterObject);\n  if (value == null) {\n    if (nullable) {\n      return null;\n    }\n else {\n      throw new BuilderException(\"The expression '\" + expression + \"' evaluated to a null value.\");\n    }\n  }\n  if (value instanceof Iterable) {\n    return (Iterable<?>)value;\n  }\n  if (value.getClass().isArray()) {\n    int size=Array.getLength(value);\n    List<Object> answer=new ArrayList<>();\n    for (int i=0; i < size; i++) {\n      Object o=Array.get(value,i);\n      answer.add(o);\n    }\n    return answer;\n  }\n  if (value instanceof Map) {\n    return ((Map)value).entrySet();\n  }\n  throw new BuilderException(\"Error evaluating expression '\" + expression + \"'.  Return value (\"+ value+ \") was not iterable.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (value instanceof Map) {\n  return ((Map)value).entrySet();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 77,
    "startColumnNumber" : 8,
    "endLineNumber" : 77,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}