{
  "id" : 128,
  "expression" : "\"Failed deserialization for Fruit: %d classes match result, expected 1\"",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/client/petstore/java/jersey3/src/main/java/org/openapitools/client/model/Fruit.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Failed deserialization for Fruit: %d classes match result, expected 1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 71,
      "startLineNumber" : 154,
      "startColumnNumber" : 48,
      "endLineNumber" : 154,
      "endColumnNumber" : 119
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 154,
        "startColumnNumber" : 34,
        "endLineNumber" : 154,
        "endColumnNumber" : 127
      },
      "nodeContext" : "String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 154,
        "startColumnNumber" : 18,
        "endLineNumber" : 154,
        "endColumnNumber" : 128
      },
      "nodeContext" : "new IOException(String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 129
      },
      "nodeContext" : "throw new IOException(String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4286,
        "startLineNumber" : 91,
        "startColumnNumber" : 121,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  boolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\n  int match=0;\n  JsonToken token=tree.traverse(jp.getCodec()).nextToken();\n  try {\n    boolean attemptParsing=true;\n    if (Apple.class.equals(Integer.class) || Apple.class.equals(Long.class) || Apple.class.equals(Float.class)|| Apple.class.equals(Double.class)|| Apple.class.equals(Boolean.class)|| Apple.class.equals(String.class)) {\n      attemptParsing=typeCoercion;\n      if (!attemptParsing) {\n        attemptParsing|=((Apple.class.equals(Integer.class) || Apple.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n        attemptParsing|=((Apple.class.equals(Float.class) || Apple.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n        attemptParsing|=(Apple.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n        attemptParsing|=(Apple.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n      }\n    }\n    if (attemptParsing) {\n      deserialized=tree.traverse(jp.getCodec()).readValueAs(Apple.class);\n      match++;\n      log.log(Level.FINER,\"Input data matches schema 'Apple'\");\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,\"Input data does not match schema 'Apple'\",e);\n  }\n  try {\n    boolean attemptParsing=true;\n    if (Banana.class.equals(Integer.class) || Banana.class.equals(Long.class) || Banana.class.equals(Float.class)|| Banana.class.equals(Double.class)|| Banana.class.equals(Boolean.class)|| Banana.class.equals(String.class)) {\n      attemptParsing=typeCoercion;\n      if (!attemptParsing) {\n        attemptParsing|=((Banana.class.equals(Integer.class) || Banana.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n        attemptParsing|=((Banana.class.equals(Float.class) || Banana.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n        attemptParsing|=(Banana.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n        attemptParsing|=(Banana.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n      }\n    }\n    if (attemptParsing) {\n      deserialized=tree.traverse(jp.getCodec()).readValueAs(Banana.class);\n      match++;\n      log.log(Level.FINER,\"Input data matches schema 'Banana'\");\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,\"Input data does not match schema 'Banana'\",e);\n  }\n  if (match == 1) {\n    Fruit ret=new Fruit();\n    ret.setActualInstance(deserialized);\n    return ret;\n  }\n  throw new IOException(String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4417,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public Fruit deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  boolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\n  int match=0;\n  JsonToken token=tree.traverse(jp.getCodec()).nextToken();\n  try {\n    boolean attemptParsing=true;\n    if (Apple.class.equals(Integer.class) || Apple.class.equals(Long.class) || Apple.class.equals(Float.class)|| Apple.class.equals(Double.class)|| Apple.class.equals(Boolean.class)|| Apple.class.equals(String.class)) {\n      attemptParsing=typeCoercion;\n      if (!attemptParsing) {\n        attemptParsing|=((Apple.class.equals(Integer.class) || Apple.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n        attemptParsing|=((Apple.class.equals(Float.class) || Apple.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n        attemptParsing|=(Apple.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n        attemptParsing|=(Apple.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n      }\n    }\n    if (attemptParsing) {\n      deserialized=tree.traverse(jp.getCodec()).readValueAs(Apple.class);\n      match++;\n      log.log(Level.FINER,\"Input data matches schema 'Apple'\");\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,\"Input data does not match schema 'Apple'\",e);\n  }\n  try {\n    boolean attemptParsing=true;\n    if (Banana.class.equals(Integer.class) || Banana.class.equals(Long.class) || Banana.class.equals(Float.class)|| Banana.class.equals(Double.class)|| Banana.class.equals(Boolean.class)|| Banana.class.equals(String.class)) {\n      attemptParsing=typeCoercion;\n      if (!attemptParsing) {\n        attemptParsing|=((Banana.class.equals(Integer.class) || Banana.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n        attemptParsing|=((Banana.class.equals(Float.class) || Banana.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n        attemptParsing|=(Banana.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n        attemptParsing|=(Banana.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n      }\n    }\n    if (attemptParsing) {\n      deserialized=tree.traverse(jp.getCodec()).readValueAs(Banana.class);\n      match++;\n      log.log(Level.FINER,\"Input data matches schema 'Banana'\");\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,\"Input data does not match schema 'Banana'\",e);\n  }\n  if (match == 1) {\n    Fruit ret=new Fruit();\n    ret.setActualInstance(deserialized);\n    return ret;\n  }\n  throw new IOException(String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 507,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 129
      },
      "nodeContext" : "throw new IOException(String.format(\"Failed deserialization for Fruit: %d classes match result, expected 1\",match));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 71,
    "startLineNumber" : 154,
    "startColumnNumber" : 48,
    "endLineNumber" : 154,
    "endColumnNumber" : 119
  } ],
  "layoutRelationDataList" : [ ]
}