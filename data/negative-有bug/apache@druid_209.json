{
  "id" : 209,
  "expression" : "this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidOperatorTable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 124,
      "startLineNumber" : 360,
      "startColumnNumber" : 10,
      "endLineNumber" : 361,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 16,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 360,
        "startColumnNumber" : 6,
        "endLineNumber" : 363,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n  throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 358,
        "startColumnNumber" : 73,
        "endLineNumber" : 364,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n  if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n    throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 358,
        "startColumnNumber" : 4,
        "endLineNumber" : 364,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (SqlOperatorConversion operatorConversion : operatorConversions) {\n  final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n  if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n    throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 340,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.aggregators=new HashMap<>();\n  this.operatorConversions=new HashMap<>();\n  for (  SqlAggregator aggregator : aggregators) {\n    final OperatorKey operatorKey=OperatorKey.of(aggregator.calciteFunction());\n    if (this.aggregators.put(operatorKey,aggregator) != null) {\n      throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n    }\n  }\n  for (  SqlAggregator aggregator : STANDARD_AGGREGATORS) {\n    final OperatorKey operatorKey=OperatorKey.of(aggregator.calciteFunction());\n    this.aggregators.putIfAbsent(operatorKey,aggregator);\n  }\n  for (  SqlOperatorConversion operatorConversion : operatorConversions) {\n    final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n    if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n      throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n    }\n  }\n  for (  SqlOperatorConversion operatorConversion : STANDARD_OPERATOR_CONVERSIONS) {\n    final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n    if (this.aggregators.containsKey(operatorKey)) {\n      continue;\n    }\n    this.operatorConversions.putIfAbsent(operatorKey,operatorConversion);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 335,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Inject public DruidOperatorTable(final Set<SqlAggregator> aggregators,final Set<SqlOperatorConversion> operatorConversions){\n  this.aggregators=new HashMap<>();\n  this.operatorConversions=new HashMap<>();\n  for (  SqlAggregator aggregator : aggregators) {\n    final OperatorKey operatorKey=OperatorKey.of(aggregator.calciteFunction());\n    if (this.aggregators.put(operatorKey,aggregator) != null) {\n      throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n    }\n  }\n  for (  SqlAggregator aggregator : STANDARD_AGGREGATORS) {\n    final OperatorKey operatorKey=OperatorKey.of(aggregator.calciteFunction());\n    this.aggregators.putIfAbsent(operatorKey,aggregator);\n  }\n  for (  SqlOperatorConversion operatorConversion : operatorConversions) {\n    final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n    if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n      throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n    }\n  }\n  for (  SqlOperatorConversion operatorConversion : STANDARD_OPERATOR_CONVERSIONS) {\n    final OperatorKey operatorKey=OperatorKey.of(operatorConversion.calciteOperator());\n    if (this.aggregators.containsKey(operatorKey)) {\n      continue;\n    }\n    this.operatorConversions.putIfAbsent(operatorKey,operatorConversion);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 360,
        "startColumnNumber" : 6,
        "endLineNumber" : 363,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (this.aggregators.containsKey(operatorKey) || this.operatorConversions.put(operatorKey,operatorConversion) != null) {\n  throw new ISE(\"Cannot have two operators with key[%s]\",operatorKey);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 10,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 124,
    "startLineNumber" : 360,
    "startColumnNumber" : 10,
    "endLineNumber" : 361,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}