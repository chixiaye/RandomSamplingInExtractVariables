{
  "id" : 460,
  "expression" : "i < numFiles",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/FileSystemTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < numFiles",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 893,
      "startColumnNumber" : 20,
      "endLineNumber" : 893,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 893,
        "startColumnNumber" : 4,
        "endLineNumber" : 895,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numFiles; i++) {\n  createFileWithJunk(dirName + pathSep + \"file-\"+ i+ \".dat\",100);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 889,
        "startColumnNumber" : 51,
        "endLineNumber" : 915,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String dirName=\"some-dir\";\n  mkDir(dirName);\n  int numFiles=10;\n  for (int i=0; i < numFiles; i++) {\n    createFileWithJunk(dirName + pathSep + \"file-\"+ i+ \".dat\",100);\n  }\n  testReadDir(dirName,null,true,fileNames -> {\n    assertEquals(numFiles,fileNames.size());\n    Set<String> fset=new HashSet<String>();\n    for (    String fileName : fileNames) {\n      fset.add(fileName);\n    }\n    File dir=new File(testDir + pathSep + dirName);\n    String root;\n    try {\n      root=dir.getCanonicalPath();\n    }\n catch (    IOException e) {\n      fail(e.getMessage());\n      return;\n    }\n    for (int i=0; i < numFiles; i++) {\n      assertTrue(fset.contains(root + pathSep + \"file-\"+ i+ \".dat\"));\n    }\n  }\n);\n  await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 841,
        "startLineNumber" : 888,
        "startColumnNumber" : 2,
        "endLineNumber" : 915,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testReadDirSimple() throws Exception {\n  String dirName=\"some-dir\";\n  mkDir(dirName);\n  int numFiles=10;\n  for (int i=0; i < numFiles; i++) {\n    createFileWithJunk(dirName + pathSep + \"file-\"+ i+ \".dat\",100);\n  }\n  testReadDir(dirName,null,true,fileNames -> {\n    assertEquals(numFiles,fileNames.size());\n    Set<String> fset=new HashSet<String>();\n    for (    String fileName : fileNames) {\n      fset.add(fileName);\n    }\n    File dir=new File(testDir + pathSep + dirName);\n    String root;\n    try {\n      root=dir.getCanonicalPath();\n    }\n catch (    IOException e) {\n      fail(e.getMessage());\n      return;\n    }\n    for (int i=0; i < numFiles; i++) {\n      assertTrue(fset.contains(root + pathSep + \"file-\"+ i+ \".dat\"));\n    }\n  }\n);\n  await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 893,
        "startColumnNumber" : 4,
        "endLineNumber" : 895,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numFiles; i++) {\n  createFileWithJunk(dirName + pathSep + \"file-\"+ i+ \".dat\",100);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 893,
    "startColumnNumber" : 20,
    "endLineNumber" : 893,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}