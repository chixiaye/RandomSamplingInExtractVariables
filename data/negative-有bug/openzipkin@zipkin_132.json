{
  "id" : 132,
  "expression" : "Kind.CLIENT",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin2/internal/DependencyLinker.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Kind.CLIENT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 68,
      "startColumnNumber" : 10,
      "endLineNumber" : 68,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Kind.CLIENT.equals(kind)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Kind.CLIENT.equals(kind) && !current.children().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 70,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3279,
        "startLineNumber" : 58,
        "startColumnNumber" : 69,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3344,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 344,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 53,
        "startColumnNumber" : 53,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3650,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * All  {@code spans} must have the same trace id. \n */\npublic DependencyLinker putTrace(List<Span> spans){\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Kind.CLIENT.equals(kind) && !current.children().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "zipkin2.Span.Kind"
  }, {
    "nodeContext" : "Kind.CLIENT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 77,
      "startColumnNumber" : 17,
      "endLineNumber" : 77,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 77,
        "startColumnNumber" : 10,
        "endLineNumber" : 77,
        "endColumnNumber" : 28
      },
      "nodeContext" : "kind=Kind.CLIENT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 77,
        "startColumnNumber" : 10,
        "endLineNumber" : 77,
        "endColumnNumber" : 29
      },
      "nodeContext" : "kind=Kind.CLIENT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 76,
        "startColumnNumber" : 62,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  kind=Kind.CLIENT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (serviceName != null && remoteServiceName != null) {\n  kind=Kind.CLIENT;\n}\n else {\n  logger.fine(\"non remote span; skipping\");\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 74,
        "startColumnNumber" : 24,
        "endLineNumber" : 82,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (serviceName != null && remoteServiceName != null) {\n    kind=Kind.CLIENT;\n  }\n else {\n    logger.fine(\"non remote span; skipping\");\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (kind == null) {\n  if (serviceName != null && remoteServiceName != null) {\n    kind=Kind.CLIENT;\n  }\n else {\n    logger.fine(\"non remote span; skipping\");\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3279,
        "startLineNumber" : 58,
        "startColumnNumber" : 69,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3344,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 344,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 53,
        "startColumnNumber" : 53,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3650,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * All  {@code spans} must have the same trace id. \n */\npublic DependencyLinker putTrace(List<Span> spans){\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 77,
        "startColumnNumber" : 10,
        "endLineNumber" : 77,
        "endColumnNumber" : 29
      },
      "nodeContext" : "kind=Kind.CLIENT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "zipkin2.Span.Kind"
  }, {
    "nodeContext" : "Kind.CLIENT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 125,
      "startColumnNumber" : 20,
      "endLineNumber" : 125,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 31
      },
      "nodeContext" : "kind == Kind.CLIENT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "kind == Kind.CLIENT && serviceName != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 97
      },
      "nodeContext" : "kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\n  logger.fine(\"detected missing link to client span\");\n  addLink(remoteAncestorName,serviceName,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 122,
        "startColumnNumber" : 77,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\n    logger.fine(\"detected missing link to client span\");\n    addLink(remoteAncestorName,serviceName,false);\n  }\n  if (kind == Kind.SERVER || parent == null)   parent=remoteAncestorName;\n  if (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\n    isError=remoteAncestor.tags().containsKey(\"error\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 121,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\n  if (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\n    logger.fine(\"detected missing link to client span\");\n    addLink(remoteAncestorName,serviceName,false);\n  }\n  if (kind == Kind.SERVER || parent == null)   parent=remoteAncestorName;\n  if (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\n    isError=remoteAncestor.tags().containsKey(\"error\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3279,
        "startLineNumber" : 58,
        "startColumnNumber" : 69,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3344,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 344,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 53,
        "startColumnNumber" : 53,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3650,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * All  {@code spans} must have the same trace id. \n */\npublic DependencyLinker putTrace(List<Span> spans){\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 97
      },
      "nodeContext" : "kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "zipkin2.Span.Kind"
  }, {
    "nodeContext" : "Kind.CLIENT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 134,
      "startColumnNumber" : 24,
      "endLineNumber" : 134,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 134,
        "startColumnNumber" : 24,
        "endLineNumber" : 134,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Kind.CLIENT.equals(remoteAncestor.kind())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 40
      },
      "nodeContext" : "!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 134,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 94
      },
      "nodeContext" : "!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\n  isError=remoteAncestor.tags().containsKey(\"error\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 122,
        "startColumnNumber" : 77,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\n    logger.fine(\"detected missing link to client span\");\n    addLink(remoteAncestorName,serviceName,false);\n  }\n  if (kind == Kind.SERVER || parent == null)   parent=remoteAncestorName;\n  if (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\n    isError=remoteAncestor.tags().containsKey(\"error\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1047,
        "startLineNumber" : 121,
        "startColumnNumber" : 6,
        "endLineNumber" : 138,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\n  if (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\n    logger.fine(\"detected missing link to client span\");\n    addLink(remoteAncestorName,serviceName,false);\n  }\n  if (kind == Kind.SERVER || parent == null)   parent=remoteAncestorName;\n  if (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\n    isError=remoteAncestor.tags().containsKey(\"error\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3279,
        "startLineNumber" : 58,
        "startColumnNumber" : 69,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3344,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n  SpanNode current=i.next();\n  Span currentSpan=current.span();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + currentSpan);\n  }\n  Kind kind=currentSpan.kind();\n  if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n    continue;\n  }\n  String serviceName=currentSpan.localServiceName();\n  String remoteServiceName=currentSpan.remoteServiceName();\n  if (kind == null) {\n    if (serviceName != null && remoteServiceName != null) {\n      kind=Kind.CLIENT;\n    }\n else {\n      logger.fine(\"non remote span; skipping\");\n      continue;\n    }\n  }\n  String child;\n  String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:    child=serviceName;\n  parent=remoteServiceName;\nif (current == traceTree) {\n  if (parent == null) {\n    logger.fine(\"root's client is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 344,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3543,
        "startLineNumber" : 53,
        "startColumnNumber" : 53,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3650,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * All  {@code spans} must have the same trace id. \n */\npublic DependencyLinker putTrace(List<Span> spans){\n  if (spans.isEmpty())   return this;\n  SpanNode traceTree=builder.build(spans);\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<SpanNode> i=traceTree.traverse(); i.hasNext(); ) {\n    SpanNode current=i.next();\n    Span currentSpan=current.span();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + currentSpan);\n    }\n    Kind kind=currentSpan.kind();\n    if (Kind.CLIENT.equals(kind) && !current.children().isEmpty()) {\n      continue;\n    }\n    String serviceName=currentSpan.localServiceName();\n    String remoteServiceName=currentSpan.remoteServiceName();\n    if (kind == null) {\n      if (serviceName != null && remoteServiceName != null) {\n        kind=Kind.CLIENT;\n      }\n else {\n        logger.fine(\"non remote span; skipping\");\n        continue;\n      }\n    }\n    String child;\n    String parent;\nswitch (kind) {\ncase SERVER:case CONSUMER:      child=serviceName;\n    parent=remoteServiceName;\n  if (current == traceTree) {\n    if (parent == null) {\n      logger.fine(\"root's client is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:case PRODUCER:parent=serviceName;\nchild=remoteServiceName;\nbreak;\ndefault:logger.fine(\"unknown kind; skipping\");\ncontinue;\n}\nboolean isError=currentSpan.tags().containsKey(\"error\");\nif (kind == Kind.PRODUCER || kind == Kind.CONSUMER) {\nif (parent == null || child == null) {\nlogger.fine(\"cannot link messaging span to its broker; skipping\");\n}\n else {\naddLink(parent,child,isError);\n}\ncontinue;\n}\nSpan remoteAncestor=firstRemoteAncestor(current);\nString remoteAncestorName;\nif (remoteAncestor != null && (remoteAncestorName=remoteAncestor.localServiceName()) != null) {\nif (kind == Kind.CLIENT && serviceName != null && !remoteAncestorName.equals(serviceName)) {\nlogger.fine(\"detected missing link to client span\");\naddLink(remoteAncestorName,serviceName,false);\n}\nif (kind == Kind.SERVER || parent == null) parent=remoteAncestorName;\nif (!isError && Kind.CLIENT.equals(remoteAncestor.kind()) && currentSpan.parentId() != null && currentSpan.parentId().equals(remoteAncestor.id())) {\nisError=remoteAncestor.tags().containsKey(\"error\");\n}\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find remote ancestor; skipping\");\ncontinue;\n}\naddLink(parent,child,isError);\n}\nreturn this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 134,
        "startColumnNumber" : 24,
        "endLineNumber" : 134,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Kind.CLIENT.equals(remoteAncestor.kind())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "zipkin2.Span.Kind"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 68,
    "startColumnNumber" : 10,
    "endLineNumber" : 68,
    "endColumnNumber" : 21
  }, {
    "charLength" : 11,
    "startLineNumber" : 77,
    "startColumnNumber" : 17,
    "endLineNumber" : 77,
    "endColumnNumber" : 28
  }, {
    "charLength" : 11,
    "startLineNumber" : 125,
    "startColumnNumber" : 20,
    "endLineNumber" : 125,
    "endColumnNumber" : 31
  }, {
    "charLength" : 11,
    "startLineNumber" : 134,
    "startColumnNumber" : 24,
    "endLineNumber" : 134,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}