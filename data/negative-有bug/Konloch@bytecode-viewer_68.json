{
  "id" : 68,
  "expression" : "BytecodeViewer.refactorer.getHooks()",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameMethods.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BytecodeViewer.refactorer.getHooks()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 82,
      "startColumnNumber" : 24,
      "endLineNumber" : 82,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 82,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 74
      },
      "nodeContext" : "BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 82,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 75
      },
      "nodeContext" : "BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 79,
        "startColumnNumber" : 59,
        "endLineNumber" : 87,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  String newName=generateUniqueName(stringLength);\n  BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 78,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n  String newName=generateUniqueName(stringLength);\n  BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 77,
        "startColumnNumber" : 49,
        "endLineNumber" : 88,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n    String newName=generateUniqueName(stringLength);\n    BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 88,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n  if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n    String newName=generateUniqueName(stringLength);\n    BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 56,
        "startColumnNumber" : 49,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MethodNode m=(MethodNode)o;\n  if ((m.access & Opcodes.ACC_NATIVE) != 0)   continue;\n  if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n    if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n      String newName=generateUniqueName(stringLength);\n      BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Object o : c.methods.toArray()) {\n  MethodNode m=(MethodNode)o;\n  if ((m.access & Opcodes.ACC_NATIVE) != 0)   continue;\n  if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n    if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n      String newName=generateUniqueName(stringLength);\n      BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 190,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 55,
        "startColumnNumber" : 62,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Object o : c.methods.toArray()) {\n    MethodNode m=(MethodNode)o;\n    if ((m.access & Opcodes.ACC_NATIVE) != 0)     continue;\n    if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n      if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n        String newName=generateUniqueName(stringLength);\n        BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1725,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ClassNode c : BytecodeViewer.getLoadedClasses()) {\n  for (  Object o : c.methods.toArray()) {\n    MethodNode m=(MethodNode)o;\n    if ((m.access & Opcodes.ACC_NATIVE) != 0)     continue;\n    if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n      if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n        String newName=generateUniqueName(stringLength);\n        BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 199,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1904,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int stringLength=getStringLength();\n  System.out.println(\"Obfuscating method names...\");\n  for (  ClassNode c : BytecodeViewer.getLoadedClasses()) {\n    for (    Object o : c.methods.toArray()) {\n      MethodNode m=(MethodNode)o;\n      if ((m.access & Opcodes.ACC_NATIVE) != 0)       continue;\n      if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n        if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n          String newName=generateUniqueName(stringLength);\n          BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n        }\n      }\n    }\n  }\n  System.out.println(\"Obfuscated method names.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1942,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void obfuscate(){\n  int stringLength=getStringLength();\n  System.out.println(\"Obfuscating method names...\");\n  for (  ClassNode c : BytecodeViewer.getLoadedClasses()) {\n    for (    Object o : c.methods.toArray()) {\n      MethodNode m=(MethodNode)o;\n      if ((m.access & Opcodes.ACC_NATIVE) != 0)       continue;\n      if (m.access != Opcodes.ACC_ABSTRACT && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_STATIC + Opcodes.ACC_PROTECTED && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PUBLIC && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PRIVATE && m.access != Opcodes.ACC_ABSTRACT + Opcodes.ACC_PROTECTED) {\n        if (!m.name.equals(\"main\") && !m.name.equals(\"<init>\") && !m.name.equals(\"<clinit>\")) {\n          String newName=generateUniqueName(stringLength);\n          BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc));\n        }\n      }\n    }\n  }\n  System.out.println(\"Obfuscated method names.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 82,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 74
      },
      "nodeContext" : "BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,new MappingData(m.name,newName),m.desc))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "the.bytecode.club.bytecodeviewer.obfuscators.mapping.HookMap"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 82,
    "startColumnNumber" : 24,
    "endLineNumber" : 82,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}