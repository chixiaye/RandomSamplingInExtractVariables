{
  "id" : 229,
  "expression" : "i < 2",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/KinesisDataFetcherTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 809,
      "startColumnNumber" : 24,
      "endLineNumber" : 809,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2070,
        "startLineNumber" : 809,
        "startColumnNumber" : 8,
        "endLineNumber" : 849,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 2; i++) {\n  final int hash=i;\n  final KinesisShardAssigner allShardsSingleSubtaskFn=(shard,subtasks) -> hash;\n  Map<String,Integer> streamToShardCount=new HashMap<>();\n  List<String> fakeStreams=new LinkedList<>();\n  fakeStreams.add(\"fakeStream\");\n  streamToShardCount.put(\"fakeStream\",shardCount);\n  for (int j=0; j < totalCountOfSubtasks; j++) {\n    int subtaskIndex=j;\n    final TestableKinesisDataFetcher fetcher=new TestableKinesisDataFetcher(fakeStreams,new TestSourceContext<>(),new Properties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),totalCountOfSubtasks,subtaskIndex,new AtomicReference<>(),new LinkedList<>(),KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(fakeStreams),FakeKinesisBehavioursFactory.nonReshardedStreamsBehaviour(streamToShardCount));\n    Whitebox.setInternalState(fetcher,\"shardAssigner\",allShardsSingleSubtaskFn);\n    List<StreamShardHandle> shards=fetcher.discoverNewShardsToSubscribe();\n    fetcher.shutdownFetcher();\n    String msg=String.format(\"for hash=%d, subtask=%d\",hash,subtaskIndex);\n    if (j == i) {\n      assertEquals(msg,shardCount,shards.size());\n    }\n else {\n      assertEquals(msg,0,shards.size());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 804,
        "startColumnNumber" : 83,
        "endLineNumber" : 850,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int totalCountOfSubtasks=10;\n  int shardCount=3;\n  for (int i=0; i < 2; i++) {\n    final int hash=i;\n    final KinesisShardAssigner allShardsSingleSubtaskFn=(shard,subtasks) -> hash;\n    Map<String,Integer> streamToShardCount=new HashMap<>();\n    List<String> fakeStreams=new LinkedList<>();\n    fakeStreams.add(\"fakeStream\");\n    streamToShardCount.put(\"fakeStream\",shardCount);\n    for (int j=0; j < totalCountOfSubtasks; j++) {\n      int subtaskIndex=j;\n      final TestableKinesisDataFetcher fetcher=new TestableKinesisDataFetcher(fakeStreams,new TestSourceContext<>(),new Properties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),totalCountOfSubtasks,subtaskIndex,new AtomicReference<>(),new LinkedList<>(),KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(fakeStreams),FakeKinesisBehavioursFactory.nonReshardedStreamsBehaviour(streamToShardCount));\n      Whitebox.setInternalState(fetcher,\"shardAssigner\",allShardsSingleSubtaskFn);\n      List<StreamShardHandle> shards=fetcher.discoverNewShardsToSubscribe();\n      fetcher.shutdownFetcher();\n      String msg=String.format(\"for hash=%d, subtask=%d\",hash,subtaskIndex);\n      if (j == i) {\n        assertEquals(msg,shardCount,shards.size());\n      }\n else {\n        assertEquals(msg,0,shards.size());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2244,
        "startLineNumber" : 803,
        "startColumnNumber" : 4,
        "endLineNumber" : 850,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testShardToSubtaskMappingWithCustomHashFunction() throws Exception {\n  int totalCountOfSubtasks=10;\n  int shardCount=3;\n  for (int i=0; i < 2; i++) {\n    final int hash=i;\n    final KinesisShardAssigner allShardsSingleSubtaskFn=(shard,subtasks) -> hash;\n    Map<String,Integer> streamToShardCount=new HashMap<>();\n    List<String> fakeStreams=new LinkedList<>();\n    fakeStreams.add(\"fakeStream\");\n    streamToShardCount.put(\"fakeStream\",shardCount);\n    for (int j=0; j < totalCountOfSubtasks; j++) {\n      int subtaskIndex=j;\n      final TestableKinesisDataFetcher fetcher=new TestableKinesisDataFetcher(fakeStreams,new TestSourceContext<>(),new Properties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),totalCountOfSubtasks,subtaskIndex,new AtomicReference<>(),new LinkedList<>(),KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(fakeStreams),FakeKinesisBehavioursFactory.nonReshardedStreamsBehaviour(streamToShardCount));\n      Whitebox.setInternalState(fetcher,\"shardAssigner\",allShardsSingleSubtaskFn);\n      List<StreamShardHandle> shards=fetcher.discoverNewShardsToSubscribe();\n      fetcher.shutdownFetcher();\n      String msg=String.format(\"for hash=%d, subtask=%d\",hash,subtaskIndex);\n      if (j == i) {\n        assertEquals(msg,shardCount,shards.size());\n      }\n else {\n        assertEquals(msg,0,shards.size());\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2070,
        "startLineNumber" : 809,
        "startColumnNumber" : 8,
        "endLineNumber" : 849,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 2; i++) {\n  final int hash=i;\n  final KinesisShardAssigner allShardsSingleSubtaskFn=(shard,subtasks) -> hash;\n  Map<String,Integer> streamToShardCount=new HashMap<>();\n  List<String> fakeStreams=new LinkedList<>();\n  fakeStreams.add(\"fakeStream\");\n  streamToShardCount.put(\"fakeStream\",shardCount);\n  for (int j=0; j < totalCountOfSubtasks; j++) {\n    int subtaskIndex=j;\n    final TestableKinesisDataFetcher fetcher=new TestableKinesisDataFetcher(fakeStreams,new TestSourceContext<>(),new Properties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),totalCountOfSubtasks,subtaskIndex,new AtomicReference<>(),new LinkedList<>(),KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(fakeStreams),FakeKinesisBehavioursFactory.nonReshardedStreamsBehaviour(streamToShardCount));\n    Whitebox.setInternalState(fetcher,\"shardAssigner\",allShardsSingleSubtaskFn);\n    List<StreamShardHandle> shards=fetcher.discoverNewShardsToSubscribe();\n    fetcher.shutdownFetcher();\n    String msg=String.format(\"for hash=%d, subtask=%d\",hash,subtaskIndex);\n    if (j == i) {\n      assertEquals(msg,shardCount,shards.size());\n    }\n else {\n      assertEquals(msg,0,shards.size());\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 809,
    "startColumnNumber" : 24,
    "endLineNumber" : 809,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}