{
  "id" : 375,
  "expression" : "inputBufIndex",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/video/videoconverter/VideoThumbnailsExtractor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inputBufIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 147,
      "startColumnNumber" : 12,
      "endLineNumber" : 147,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 30
      },
      "nodeContext" : "inputBufIndex >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputBufIndex >= 0) {\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 998,
        "startLineNumber" : 145,
        "startColumnNumber" : 22,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!inputDone) {\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2324,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!outputDone) {\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 260,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3365,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void doExtract(final @NonNull MediaExtractor extractor,final @NonNull MediaCodec decoder,final @NonNull OutputSurface outputSurface,final int outputWidth,int outputHeight,long duration,int thumbnailCount,final @NonNull Callback callback) throws TranscodingException {\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 147,
        "endColumnNumber" : 30
      },
      "nodeContext" : "inputBufIndex >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "inputBufIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 148,
      "startColumnNumber" : 58,
      "endLineNumber" : 148,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 148,
        "startColumnNumber" : 38,
        "endLineNumber" : 148,
        "endColumnNumber" : 72
      },
      "nodeContext" : "decoderInputBuffers[inputBufIndex]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 148,
        "startColumnNumber" : 27,
        "endLineNumber" : 148,
        "endColumnNumber" : 72
      },
      "nodeContext" : "inputBuf=decoderInputBuffers[inputBufIndex]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 148,
        "startColumnNumber" : 10,
        "endLineNumber" : 148,
        "endColumnNumber" : 73
      },
      "nodeContext" : "final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 147,
        "startColumnNumber" : 32,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputBufIndex >= 0) {\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 998,
        "startLineNumber" : 145,
        "startColumnNumber" : 22,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!inputDone) {\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2324,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!outputDone) {\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 260,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3365,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void doExtract(final @NonNull MediaExtractor extractor,final @NonNull MediaCodec decoder,final @NonNull OutputSurface outputSurface,final int outputWidth,int outputHeight,long duration,int thumbnailCount,final @NonNull Callback callback) throws TranscodingException {\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 148,
        "startColumnNumber" : 10,
        "endLineNumber" : 148,
        "endColumnNumber" : 73
      },
      "nodeContext" : "final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "inputBufIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 151,
      "startColumnNumber" : 37,
      "endLineNumber" : 151,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 99
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 100
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 150,
        "startColumnNumber" : 68,
        "endLineNumber" : 154,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n  inputDone=true;\n  Log.i(TAG,\"input done\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 711,
        "startLineNumber" : 150,
        "startColumnNumber" : 10,
        "endLineNumber" : 160,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n  decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n  inputDone=true;\n  Log.i(TAG,\"input done\");\n}\n else {\n  final long presentationTimeUs=extractor.getSampleTime();\n  decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n  samplesExtracted++;\n  extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n  Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 147,
        "startColumnNumber" : 32,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputBufIndex >= 0) {\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 998,
        "startLineNumber" : 145,
        "startColumnNumber" : 22,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!inputDone) {\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2324,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!outputDone) {\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 260,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3365,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void doExtract(final @NonNull MediaExtractor extractor,final @NonNull MediaCodec decoder,final @NonNull OutputSurface outputSurface,final int outputWidth,int outputHeight,long duration,int thumbnailCount,final @NonNull Callback callback) throws TranscodingException {\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 100
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "inputBufIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 156,
      "startColumnNumber" : 37,
      "endLineNumber" : 156,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 99
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 100
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 154,
        "startColumnNumber" : 17,
        "endLineNumber" : 160,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  final long presentationTimeUs=extractor.getSampleTime();\n  decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n  samplesExtracted++;\n  extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n  Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 711,
        "startLineNumber" : 150,
        "startColumnNumber" : 10,
        "endLineNumber" : 160,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n  decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n  inputDone=true;\n  Log.i(TAG,\"input done\");\n}\n else {\n  final long presentationTimeUs=extractor.getSampleTime();\n  decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n  samplesExtracted++;\n  extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n  Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 147,
        "startColumnNumber" : 32,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputBufIndex >= 0) {\n  final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n  final int sampleSize=extractor.readSampleData(inputBuf,0);\n  if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n    decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n    inputDone=true;\n    Log.i(TAG,\"input done\");\n  }\n else {\n    final long presentationTimeUs=extractor.getSampleTime();\n    decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n    samplesExtracted++;\n    extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n    Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 998,
        "startLineNumber" : 145,
        "startColumnNumber" : 22,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1014,
        "startLineNumber" : 145,
        "startColumnNumber" : 6,
        "endLineNumber" : 162,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!inputDone) {\n  int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n  if (inputBufIndex >= 0) {\n    final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n    final int sampleSize=extractor.readSampleData(inputBuf,0);\n    if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n      decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n      inputDone=true;\n      Log.i(TAG,\"input done\");\n    }\n else {\n      final long presentationTimeUs=extractor.getSampleTime();\n      decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n      samplesExtracted++;\n      extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n      Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2324,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!outputDone) {\n  if (!inputDone) {\n    int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n    if (inputBufIndex >= 0) {\n      final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n      final int sampleSize=extractor.readSampleData(inputBuf,0);\n      if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n        decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n        inputDone=true;\n        Log.i(TAG,\"input done\");\n      }\n else {\n        final long presentationTimeUs=extractor.getSampleTime();\n        decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n        samplesExtracted++;\n        extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n        Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n      }\n    }\n  }\n  int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n  if (outputBufIndex >= 0) {\n    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      outputDone=true;\n    }\n    final boolean shouldRender=(info.size != 0);\n    decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n    if (shouldRender) {\n      outputSurface.awaitNewImage();\n      outputSurface.drawImage();\n      if (thumbnailsCreated < thumbnailCount) {\n        pixelBuf.rewind();\n        GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n        final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n        pixelBuf.rewind();\n        bitmap.copyPixelsFromBuffer(pixelBuf);\n        if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n          break;\n        }\n        Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n      }\n      thumbnailsCreated++;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 260,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 343,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3365,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void doExtract(final @NonNull MediaExtractor extractor,final @NonNull MediaCodec decoder,final @NonNull OutputSurface outputSurface,final int outputWidth,int outputHeight,long duration,int thumbnailCount,final @NonNull Callback callback) throws TranscodingException {\n  final int TIMEOUT_USEC=10000;\n  final ByteBuffer[] decoderInputBuffers=decoder.getInputBuffers();\n  final MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();\n  int samplesExtracted=0;\n  int thumbnailsCreated=0;\n  Log.i(TAG,\"doExtract started\");\n  final ByteBuffer pixelBuf=ByteBuffer.allocateDirect(outputWidth * outputHeight * 4);\n  pixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n  boolean outputDone=false;\n  boolean inputDone=false;\n  while (!outputDone) {\n    if (!inputDone) {\n      int inputBufIndex=decoder.dequeueInputBuffer(TIMEOUT_USEC);\n      if (inputBufIndex >= 0) {\n        final ByteBuffer inputBuf=decoderInputBuffers[inputBufIndex];\n        final int sampleSize=extractor.readSampleData(inputBuf,0);\n        if (sampleSize < 0 || samplesExtracted >= thumbnailCount) {\n          decoder.queueInputBuffer(inputBufIndex,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n          inputDone=true;\n          Log.i(TAG,\"input done\");\n        }\n else {\n          final long presentationTimeUs=extractor.getSampleTime();\n          decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n          samplesExtracted++;\n          extractor.seekTo(duration * samplesExtracted / thumbnailCount,MediaExtractor.SEEK_TO_CLOSEST_SYNC);\n          Log.i(TAG,\"seek to \" + duration * samplesExtracted / thumbnailCount + \", actual \" + extractor.getSampleTime());\n        }\n      }\n    }\n    int outputBufIndex=decoder.dequeueOutputBuffer(info,TIMEOUT_USEC);\n    if (outputBufIndex >= 0) {\n      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n        outputDone=true;\n      }\n      final boolean shouldRender=(info.size != 0);\n      decoder.releaseOutputBuffer(outputBufIndex,shouldRender);\n      if (shouldRender) {\n        outputSurface.awaitNewImage();\n        outputSurface.drawImage();\n        if (thumbnailsCreated < thumbnailCount) {\n          pixelBuf.rewind();\n          GLES20.glReadPixels(0,0,outputWidth,outputHeight,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,pixelBuf);\n          final Bitmap bitmap=Bitmap.createBitmap(outputWidth,outputHeight,Bitmap.Config.ARGB_8888);\n          pixelBuf.rewind();\n          bitmap.copyPixelsFromBuffer(pixelBuf);\n          if (!callback.publishProgress(thumbnailsCreated,bitmap)) {\n            break;\n          }\n          Log.i(TAG,\"publishProgress for frame \" + thumbnailsCreated + \" at \"+ info.presentationTimeUs+ \" (target \"+ duration * thumbnailsCreated / thumbnailCount + \")\");\n        }\n        thumbnailsCreated++;\n      }\n    }\n  }\n  Log.i(TAG,\"doExtract finished\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 156,
        "endColumnNumber" : 100
      },
      "nodeContext" : "decoder.queueInputBuffer(inputBufIndex,0,sampleSize,presentationTimeUs,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 147,
    "startColumnNumber" : 12,
    "endLineNumber" : 147,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 148,
    "startColumnNumber" : 58,
    "endLineNumber" : 148,
    "endColumnNumber" : 71
  }, {
    "charLength" : 13,
    "startLineNumber" : 151,
    "startColumnNumber" : 37,
    "endLineNumber" : 151,
    "endColumnNumber" : 50
  }, {
    "charLength" : 13,
    "startLineNumber" : 156,
    "startColumnNumber" : 37,
    "endLineNumber" : 156,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}