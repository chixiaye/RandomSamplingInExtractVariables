{
  "id" : 124,
  "expression" : "isRealType(actual) && isRealType(expected)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/decoder/protobufnative/ProtobufNativeDecoderTestUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isRealType(actual) && isRealType(expected)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 74,
      "startColumnNumber" : 19,
      "endLineNumber" : 74,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 74,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 72,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isIntegralType(actual) && isIntegralType(expected)) {\n  assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n}\n else if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 64,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof SqlVarbinary) {\n  if (actual instanceof ByteString) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),((ByteString)expected).toByteArray());\n  }\n else   if (expected instanceof byte[]) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),expected);\n  }\n else {\n    fail(format(\"Unexpected value type %s\",actual.getClass()));\n  }\n}\n else if (isIntegralType(actual) && isIntegralType(expected)) {\n  assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n}\n else if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 55,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual instanceof CharSequence) {\n  assertTrue(expected instanceof CharSequence || expected instanceof EnumValue);\n  assertEquals(actual.toString(),expected.toString());\n  if (expected instanceof EnumValue) {\n    assertEquals(((CharSequence)actual.toString()),((EnumValue)expected).getName());\n  }\n else   if (expected instanceof CharSequence) {\n    assertEquals(actual.toString(),expected.toString());\n  }\n}\n else if (actual instanceof SqlVarbinary) {\n  if (actual instanceof ByteString) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),((ByteString)expected).toByteArray());\n  }\n else   if (expected instanceof byte[]) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),expected);\n  }\n else {\n    fail(format(\"Unexpected value type %s\",actual.getClass()));\n  }\n}\n else if (isIntegralType(actual) && isIntegralType(expected)) {\n  assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n}\n else if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1450,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (actual == null || expected == null) {\n  assertNull(expected);\n  assertNull(actual);\n}\n else if (actual instanceof CharSequence) {\n  assertTrue(expected instanceof CharSequence || expected instanceof EnumValue);\n  assertEquals(actual.toString(),expected.toString());\n  if (expected instanceof EnumValue) {\n    assertEquals(((CharSequence)actual.toString()),((EnumValue)expected).getName());\n  }\n else   if (expected instanceof CharSequence) {\n    assertEquals(actual.toString(),expected.toString());\n  }\n}\n else if (actual instanceof SqlVarbinary) {\n  if (actual instanceof ByteString) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),((ByteString)expected).toByteArray());\n  }\n else   if (expected instanceof byte[]) {\n    assertEquals(((SqlVarbinary)actual).getBytes(),expected);\n  }\n else {\n    fail(format(\"Unexpected value type %s\",actual.getClass()));\n  }\n}\n else if (isIntegralType(actual) && isIntegralType(expected)) {\n  assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n}\n else if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 197,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 51,
        "startColumnNumber" : 68,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (actual == null || expected == null) {\n    assertNull(expected);\n    assertNull(actual);\n  }\n else   if (actual instanceof CharSequence) {\n    assertTrue(expected instanceof CharSequence || expected instanceof EnumValue);\n    assertEquals(actual.toString(),expected.toString());\n    if (expected instanceof EnumValue) {\n      assertEquals(((CharSequence)actual.toString()),((EnumValue)expected).getName());\n    }\n else     if (expected instanceof CharSequence) {\n      assertEquals(actual.toString(),expected.toString());\n    }\n  }\n else   if (actual instanceof SqlVarbinary) {\n    if (actual instanceof ByteString) {\n      assertEquals(((SqlVarbinary)actual).getBytes(),((ByteString)expected).toByteArray());\n    }\n else     if (expected instanceof byte[]) {\n      assertEquals(((SqlVarbinary)actual).getBytes(),expected);\n    }\n else {\n      fail(format(\"Unexpected value type %s\",actual.getClass()));\n    }\n  }\n else   if (isIntegralType(actual) && isIntegralType(expected)) {\n    assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n  }\n else   if (isRealType(actual) && isRealType(expected)) {\n    assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n  }\n else {\n    assertEquals(actual,expected);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1530,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkPrimitiveValue(Object actual,Object expected){\n  if (actual == null || expected == null) {\n    assertNull(expected);\n    assertNull(actual);\n  }\n else   if (actual instanceof CharSequence) {\n    assertTrue(expected instanceof CharSequence || expected instanceof EnumValue);\n    assertEquals(actual.toString(),expected.toString());\n    if (expected instanceof EnumValue) {\n      assertEquals(((CharSequence)actual.toString()),((EnumValue)expected).getName());\n    }\n else     if (expected instanceof CharSequence) {\n      assertEquals(actual.toString(),expected.toString());\n    }\n  }\n else   if (actual instanceof SqlVarbinary) {\n    if (actual instanceof ByteString) {\n      assertEquals(((SqlVarbinary)actual).getBytes(),((ByteString)expected).toByteArray());\n    }\n else     if (expected instanceof byte[]) {\n      assertEquals(((SqlVarbinary)actual).getBytes(),expected);\n    }\n else {\n      fail(format(\"Unexpected value type %s\",actual.getClass()));\n    }\n  }\n else   if (isIntegralType(actual) && isIntegralType(expected)) {\n    assertEquals(((Number)actual).longValue(),((Number)expected).longValue());\n  }\n else   if (isRealType(actual) && isRealType(expected)) {\n    assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n  }\n else {\n    assertEquals(actual,expected);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 74,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isRealType(actual) && isRealType(expected)) {\n  assertEquals(((Number)actual).doubleValue(),((Number)expected).doubleValue());\n}\n else {\n  assertEquals(actual,expected);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 74,
    "startColumnNumber" : 19,
    "endLineNumber" : 74,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}