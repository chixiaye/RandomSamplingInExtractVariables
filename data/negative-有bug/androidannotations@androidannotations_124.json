{
  "id" : 124,
  "expression" : "\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\"",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/helper/AnnotationHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 85,
      "startLineNumber" : 105,
      "startColumnNumber" : 71,
      "endLineNumber" : 105,
      "endColumnNumber" : 156
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 105,
        "startColumnNumber" : 57,
        "endLineNumber" : 105,
        "endColumnNumber" : 230
      },
      "nodeContext" : "String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 231
      },
      "nodeContext" : "processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 232
      },
      "nodeContext" : "processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 104,
        "startColumnNumber" : 11,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (potentialSubElement instanceof TypeElement) {\n  TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n  TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n  if (isRootObjectClass(superclassTypeMirror)) {\n    return false;\n  }\n else {\n    if (superclassTypeMirror instanceof ErrorType) {\n      ErrorType errorType=(ErrorType)superclassTypeMirror;\n      Element errorElement=errorType.asElement();\n      String errorElementSimpleName=errorElement.getSimpleName().toString();\n      if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n        return true;\n      }\n else {\n        processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n        return false;\n      }\n    }\n else {\n      return isSubtype(superclassTypeMirror,potentialSupertype);\n    }\n  }\n}\n else {\n  processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 119,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 73,
        "startColumnNumber" : 49,
        "endLineNumber" : 109,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n  Element potentialSubElement=potentialDeclaredSubtype.asElement();\n  if (potentialSubElement instanceof TypeElement) {\n    TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n    TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n    if (isRootObjectClass(superclassTypeMirror)) {\n      return false;\n    }\n else {\n      if (superclassTypeMirror instanceof ErrorType) {\n        ErrorType errorType=(ErrorType)superclassTypeMirror;\n        Element errorElement=errorType.asElement();\n        String errorElementSimpleName=errorElement.getSimpleName().toString();\n        if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n          return true;\n        }\n else {\n          processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n          return false;\n        }\n      }\n else {\n        return isSubtype(superclassTypeMirror,potentialSupertype);\n      }\n    }\n  }\n else {\n    processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 73,
        "startColumnNumber" : 3,
        "endLineNumber" : 112,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (potentialSubtype instanceof DeclaredType) {\n  DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n  Element potentialSubElement=potentialDeclaredSubtype.asElement();\n  if (potentialSubElement instanceof TypeElement) {\n    TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n    TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n    if (isRootObjectClass(superclassTypeMirror)) {\n      return false;\n    }\n else {\n      if (superclassTypeMirror instanceof ErrorType) {\n        ErrorType errorType=(ErrorType)superclassTypeMirror;\n        Element errorElement=errorType.asElement();\n        String errorElementSimpleName=errorElement.getSimpleName().toString();\n        if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n          return true;\n        }\n else {\n          processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n          return false;\n        }\n      }\n else {\n        return isSubtype(superclassTypeMirror,potentialSupertype);\n      }\n    }\n  }\n else {\n    processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n    return false;\n  }\n}\n else {\n  processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subtype %s of potential supertype %s is not a DeclaredType but a %s\",potentialSubtype,potentialSupertype,potentialSubtype.getClass()));\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (potentialSubtype instanceof DeclaredType) {\n    DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n    Element potentialSubElement=potentialDeclaredSubtype.asElement();\n    if (potentialSubElement instanceof TypeElement) {\n      TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n      TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n      if (isRootObjectClass(superclassTypeMirror)) {\n        return false;\n      }\n else {\n        if (superclassTypeMirror instanceof ErrorType) {\n          ErrorType errorType=(ErrorType)superclassTypeMirror;\n          Element errorElement=errorType.asElement();\n          String errorElementSimpleName=errorElement.getSimpleName().toString();\n          if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n            return true;\n          }\n else {\n            processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n            return false;\n          }\n        }\n else {\n          return isSubtype(superclassTypeMirror,potentialSupertype);\n        }\n      }\n    }\n else {\n      processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n      return false;\n    }\n  }\n else {\n    processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subtype %s of potential supertype %s is not a DeclaredType but a %s\",potentialSubtype,potentialSupertype,potentialSubtype.getClass()));\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1909,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (processingEnv.getTypeUtils().isSubtype(potentialSubtype,potentialSupertype)) {\n  return true;\n}\n else {\n  if (potentialSubtype instanceof DeclaredType) {\n    DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n    Element potentialSubElement=potentialDeclaredSubtype.asElement();\n    if (potentialSubElement instanceof TypeElement) {\n      TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n      TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n      if (isRootObjectClass(superclassTypeMirror)) {\n        return false;\n      }\n else {\n        if (superclassTypeMirror instanceof ErrorType) {\n          ErrorType errorType=(ErrorType)superclassTypeMirror;\n          Element errorElement=errorType.asElement();\n          String errorElementSimpleName=errorElement.getSimpleName().toString();\n          if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n            return true;\n          }\n else {\n            processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n            return false;\n          }\n        }\n else {\n          return isSubtype(superclassTypeMirror,potentialSupertype);\n        }\n      }\n    }\n else {\n      processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n      return false;\n    }\n  }\n else {\n    processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subtype %s of potential supertype %s is not a DeclaredType but a %s\",potentialSubtype,potentialSupertype,potentialSubtype.getClass()));\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 175,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 67,
        "startColumnNumber" : 86,
        "endLineNumber" : 114,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (processingEnv.getTypeUtils().isSubtype(potentialSubtype,potentialSupertype)) {\n    return true;\n  }\n else {\n    if (potentialSubtype instanceof DeclaredType) {\n      DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n      Element potentialSubElement=potentialDeclaredSubtype.asElement();\n      if (potentialSubElement instanceof TypeElement) {\n        TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n        TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n        if (isRootObjectClass(superclassTypeMirror)) {\n          return false;\n        }\n else {\n          if (superclassTypeMirror instanceof ErrorType) {\n            ErrorType errorType=(ErrorType)superclassTypeMirror;\n            Element errorElement=errorType.asElement();\n            String errorElementSimpleName=errorElement.getSimpleName().toString();\n            if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n              return true;\n            }\n else {\n              processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n              return false;\n            }\n          }\n else {\n            return isSubtype(superclassTypeMirror,potentialSupertype);\n          }\n        }\n      }\n else {\n        processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n        return false;\n      }\n    }\n else {\n      processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subtype %s of potential supertype %s is not a DeclaredType but a %s\",potentialSubtype,potentialSupertype,potentialSubtype.getClass()));\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3017,
        "startLineNumber" : 45,
        "startColumnNumber" : 1,
        "endLineNumber" : 114,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Tests whether one type is a subtype of another. Any type is considered to be a subtype of itself. This method adds additional behavior : if Types.isSubtype(TypeMirror, TypeMirror) returns false, and the inheritance chain of potentialSubtype contains an ErrorType that ends with a \"_\" at the end of its name, we return true. That's because when the code is cleaned and regenerated all at once, the \"_\" don't exist any more. Our assumption is that it can't do much harm in those cases. A better implementation would be to take advantage of the multiple rounds of annotation processing, and do those checks in later rounds.\n * @param potentialSubtype the first type\n * @param potentialSupertype the second type\n * @return true if and only if the first type is a subtype of the second\n * @throws IllegalArgumentException if given an executable or package type\n * @see Types#isSubtype(TypeMirror,TypeMirror)\n */\npublic boolean isSubtype(TypeMirror potentialSubtype,TypeMirror potentialSupertype){\n  if (processingEnv.getTypeUtils().isSubtype(potentialSubtype,potentialSupertype)) {\n    return true;\n  }\n else {\n    if (potentialSubtype instanceof DeclaredType) {\n      DeclaredType potentialDeclaredSubtype=(DeclaredType)potentialSubtype;\n      Element potentialSubElement=potentialDeclaredSubtype.asElement();\n      if (potentialSubElement instanceof TypeElement) {\n        TypeElement potentialSubDeclaredElement=(TypeElement)potentialSubElement;\n        TypeMirror superclassTypeMirror=potentialSubDeclaredElement.getSuperclass();\n        if (isRootObjectClass(superclassTypeMirror)) {\n          return false;\n        }\n else {\n          if (superclassTypeMirror instanceof ErrorType) {\n            ErrorType errorType=(ErrorType)superclassTypeMirror;\n            Element errorElement=errorType.asElement();\n            String errorElementSimpleName=errorElement.getSimpleName().toString();\n            if (errorElementSimpleName.endsWith(GENERATION_SUFFIX)) {\n              return true;\n            }\n else {\n              processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The supertype %s of the potential subElement %s of potential supertype %s is an ErrorType that doesn't end with %s\",errorElement,potentialSubElement,potentialSupertype,GENERATION_SUFFIX));\n              return false;\n            }\n          }\n else {\n            return isSubtype(superclassTypeMirror,potentialSupertype);\n          }\n        }\n      }\n else {\n        processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n        return false;\n      }\n    }\n else {\n      processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subtype %s of potential supertype %s is not a DeclaredType but a %s\",potentialSubtype,potentialSupertype,potentialSubtype.getClass()));\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 105,
        "startColumnNumber" : 5,
        "endLineNumber" : 105,
        "endColumnNumber" : 232
      },
      "nodeContext" : "processingEnv.getMessager().printMessage(Kind.NOTE,String.format(\"The potential subElement %s of potential supertype %s is not a TypeElement but a %s\",potentialSubElement,potentialSupertype,potentialSubElement.getClass()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 15,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 85,
    "startLineNumber" : 105,
    "startColumnNumber" : 71,
    "endLineNumber" : 105,
    "endColumnNumber" : 156
  } ],
  "layoutRelationDataList" : [ ]
}