{
  "id" : 177,
  "expression" : "topic",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/support/RocketMQMessageConverterSupport.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "topic",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 125,
      "startColumnNumber" : 27,
      "endLineNumber" : 125,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 125,
        "startColumnNumber" : 9,
        "endLineNumber" : 125,
        "endColumnNumber" : 65
      },
      "nodeContext" : "getAndWrapMessage(topic,message.getHeaders(),payloads)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return getAndWrapMessage(topic,message.getHeaders(),payloads);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 99,
        "startColumnNumber" : 23,
        "endLineNumber" : 126,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Charset charset=Charset.defaultCharset();\n  Object payloadObj=message.getPayload();\n  byte[] payloads;\n  try {\n    if (payloadObj instanceof String) {\n      payloads=((String)payloadObj).getBytes(charset);\n    }\n else     if (payloadObj instanceof byte[]) {\n      payloads=(byte[])message.getPayload();\n    }\n else {\n      String jsonObj=(String)MESSAGE_CONVERTER.fromMessage(message,payloadObj.getClass());\n      if (null == jsonObj) {\n        throw new RuntimeException(String.format(\"empty after conversion [messageConverter:%s,payloadClass:%s,payloadObj:%s]\",MESSAGE_CONVERTER.getClass(),payloadObj.getClass(),payloadObj));\n      }\n      payloads=jsonObj.getBytes(charset);\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"convert to RocketMQ message failed.\",e);\n  }\n  return getAndWrapMessage(topic,message.getHeaders(),payloads);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1023,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 126,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static org.apache.rocketmq.common.message.Message doConvert(String topic,Message<?> message){\n  Charset charset=Charset.defaultCharset();\n  Object payloadObj=message.getPayload();\n  byte[] payloads;\n  try {\n    if (payloadObj instanceof String) {\n      payloads=((String)payloadObj).getBytes(charset);\n    }\n else     if (payloadObj instanceof byte[]) {\n      payloads=(byte[])message.getPayload();\n    }\n else {\n      String jsonObj=(String)MESSAGE_CONVERTER.fromMessage(message,payloadObj.getClass());\n      if (null == jsonObj) {\n        throw new RuntimeException(String.format(\"empty after conversion [messageConverter:%s,payloadClass:%s,payloadObj:%s]\",MESSAGE_CONVERTER.getClass(),payloadObj.getClass(),payloadObj));\n      }\n      payloads=jsonObj.getBytes(charset);\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"convert to RocketMQ message failed.\",e);\n  }\n  return getAndWrapMessage(topic,message.getHeaders(),payloads);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return getAndWrapMessage(topic,message.getHeaders(),payloads);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 125,
    "startColumnNumber" : 27,
    "endLineNumber" : 125,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}