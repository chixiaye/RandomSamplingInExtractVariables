{
  "id" : 223,
  "expression" : "\"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/RedissonTimeSeries.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 86,
      "startLineNumber" : 252,
      "startColumnNumber" : 20,
      "endLineNumber" : 252,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 250,
        "startColumnNumber" : 15,
        "endLineNumber" : 262,
        "endColumnNumber" : 29
      },
      "nodeContext" : "\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 249,
        "startColumnNumber" : 15,
        "endLineNumber" : 264,
        "endColumnNumber" : 58
      },
      "nodeContext" : "commandExecutor.evalReadAsync(getName(),codec,evalCommandType,\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\",Arrays.asList(getName(),getTimeoutSetName()),System.currentTimeMillis(),startScore,limit)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 785,
        "startLineNumber" : 249,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 59
      },
      "nodeContext" : "return commandExecutor.evalReadAsync(getName(),codec,evalCommandType,\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\",Arrays.asList(getName(),getTimeoutSetName()),System.currentTimeMillis(),startScore,limit);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 248,
        "startColumnNumber" : 106,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return commandExecutor.evalReadAsync(getName(),codec,evalCommandType,\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\",Arrays.asList(getName(),getTimeoutSetName()),System.currentTimeMillis(),startScore,limit);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private <T>RFuture<T> listTimestampAsync(int startScore,int limit,RedisCommand<?> evalCommandType){\n  return commandExecutor.evalReadAsync(getName(),codec,evalCommandType,\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\",Arrays.asList(getName(),getTimeoutSetName()),System.currentTimeMillis(),startScore,limit);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 56,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 250,
        "startColumnNumber" : 15,
        "endLineNumber" : 262,
        "endColumnNumber" : 29
      },
      "nodeContext" : "\"local values;\" + \"if ARGV[2] == '0' then \" + \"values = redis.call('zrangebyscore', KEYS[2], ARGV[1], '+inf', 'limit', 0, ARGV[3]);\"+ \"else \"+ \"values = redis.call('zrevrangebyscore', KEYS[2], '+inf', ARGV[1], 'limit', 0, ARGV[3]);\"+ \"end; \"+ \"local result = {}; \"+ \"for i, v in ipairs(values) do \"+ \"local t, val = struct.unpack('LLc0', v); \"+ \"table.insert(result, t);\"+ \"end;\"+ \"return result;\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 2
    },
    "tokenLength" : 14,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 86,
    "startLineNumber" : 252,
    "startColumnNumber" : 20,
    "endLineNumber" : 252,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}