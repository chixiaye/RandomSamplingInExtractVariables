{
  "id" : 378,
  "expression" : "Math",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/bloomfilter/BloomFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 66,
      "startColumnNumber" : 42,
      "endLineNumber" : 66,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 66,
        "startColumnNumber" : 42,
        "endLineNumber" : 66,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Math.max(maxSz,setSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 66,
        "startColumnNumber" : 34,
        "endLineNumber" : 66,
        "endColumnNumber" : 66
      },
      "nodeContext" : "maxSz=Math.max(maxSz,setSize)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 66,
        "startColumnNumber" : 34,
        "endLineNumber" : 66,
        "endColumnNumber" : 67
      },
      "nodeContext" : "maxSz=Math.max(maxSz,setSize);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (int setSize : SET_SIZES) maxSz=Math.max(maxSz,setSize);\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 63,
        "startColumnNumber" : 27,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int maxSz=0;\n  for (  int setSize : SET_SIZES)   maxSz=Math.max(maxSz,setSize);\n  char[][] matrix=new char[N_SETS][maxSz];\n  for (  char[] ar : matrix)   java.util.Arrays.fill(ar,'0');\n  for (int k=0; k < N_SETS; k++) {\n    for (int i=0; i < SET_SIZES[k]; i++) {\n      int block=i / 64;\n      int offset=i % 64;\n      long mask=1L << offset;\n      if ((bitsets[k][block] & mask) == mask) {\n        matrix[k][i]='1';\n      }\n    }\n  }\n  StringBuilder sb=new StringBuilder();\n  for (  char[] row : matrix)   sb.append(new String(row) + \"\\n\");\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public String toString(){\n  int maxSz=0;\n  for (  int setSize : SET_SIZES)   maxSz=Math.max(maxSz,setSize);\n  char[][] matrix=new char[N_SETS][maxSz];\n  for (  char[] ar : matrix)   java.util.Arrays.fill(ar,'0');\n  for (int k=0; k < N_SETS; k++) {\n    for (int i=0; i < SET_SIZES[k]; i++) {\n      int block=i / 64;\n      int offset=i % 64;\n      long mask=1L << offset;\n      if ((bitsets[k][block] & mask) == mask) {\n        matrix[k][i]='1';\n      }\n    }\n  }\n  StringBuilder sb=new StringBuilder();\n  for (  char[] row : matrix)   sb.append(new String(row) + \"\\n\");\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (int setSize : SET_SIZES) maxSz=Math.max(maxSz,setSize);\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 66,
    "startColumnNumber" : 42,
    "endLineNumber" : 66,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}