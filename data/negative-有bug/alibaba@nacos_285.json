{
  "id" : 285,
  "expression" : "getResourceParser(secured.parser())",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/core/src/main/java/com/alibaba/nacos/core/auth/AuthFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getResourceParser(secured.parser())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 103,
      "startColumnNumber" : 44,
      "endLineNumber" : 103,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 103,
        "startColumnNumber" : 35,
        "endLineNumber" : 103,
        "endColumnNumber" : 79
      },
      "nodeContext" : "parser=getResourceParser(secured.parser())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ResourceParser parser=getResourceParser(secured.parser());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 102,
        "startColumnNumber" : 51,
        "endLineNumber" : 105,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ResourceParser parser=getResourceParser(secured.parser());\n  resource=parser.parseName(req);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (StringUtils.isBlank(resource)) {\n  ResourceParser parser=getResourceParser(secured.parser());\n  resource=parser.parseName(req);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 92,
        "startColumnNumber" : 90,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (Loggers.AUTH.isDebugEnabled()) {\n    Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n  }\n  Secured secured=method.getAnnotation(Secured.class);\n  String action=secured.action().toString();\n  String resource=secured.resource();\n  if (StringUtils.isBlank(resource)) {\n    ResourceParser parser=getResourceParser(secured.parser());\n    resource=parser.parseName(req);\n  }\n  if (StringUtils.isBlank(resource)) {\n    throw new AccessException(\"resource name invalid!\");\n  }\n  authManager.auth(new Permission(resource,action),authManager.login(req));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n  if (Loggers.AUTH.isDebugEnabled()) {\n    Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n  }\n  Secured secured=method.getAnnotation(Secured.class);\n  String action=secured.action().toString();\n  String resource=secured.resource();\n  if (StringUtils.isBlank(resource)) {\n    ResourceParser parser=getResourceParser(secured.parser());\n    resource=parser.parseName(req);\n  }\n  if (StringUtils.isBlank(resource)) {\n    throw new AccessException(\"resource name invalid!\");\n  }\n  authManager.auth(new Permission(resource,action),authManager.login(req));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1351,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Method method=methodsCache.getMethod(req);\n  if (method == null) {\n    chain.doFilter(request,response);\n    return;\n  }\n  if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n    if (Loggers.AUTH.isDebugEnabled()) {\n      Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n    }\n    Secured secured=method.getAnnotation(Secured.class);\n    String action=secured.action().toString();\n    String resource=secured.resource();\n    if (StringUtils.isBlank(resource)) {\n      ResourceParser parser=getResourceParser(secured.parser());\n      resource=parser.parseName(req);\n    }\n    if (StringUtils.isBlank(resource)) {\n      throw new AccessException(\"resource name invalid!\");\n    }\n    authManager.auth(new Permission(resource,action),authManager.login(req));\n  }\n  chain.doFilter(request,response);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2040,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Method method=methodsCache.getMethod(req);\n  if (method == null) {\n    chain.doFilter(request,response);\n    return;\n  }\n  if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n    if (Loggers.AUTH.isDebugEnabled()) {\n      Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n    }\n    Secured secured=method.getAnnotation(Secured.class);\n    String action=secured.action().toString();\n    String resource=secured.resource();\n    if (StringUtils.isBlank(resource)) {\n      ResourceParser parser=getResourceParser(secured.parser());\n      resource=parser.parseName(req);\n    }\n    if (StringUtils.isBlank(resource)) {\n      throw new AccessException(\"resource name invalid!\");\n    }\n    authManager.auth(new Permission(resource,action),authManager.login(req));\n  }\n  chain.doFilter(request,response);\n}\n catch (AccessException e) {\n  if (Loggers.AUTH.isDebugEnabled()) {\n    Loggers.AUTH.debug(\"access denied, request: {} {}, reason: {}\",req.getMethod(),req.getRequestURI(),e.getErrMsg());\n  }\n  resp.sendError(HttpServletResponse.SC_FORBIDDEN,e.getErrMsg());\n  return;\n}\ncatch (IllegalArgumentException e) {\n  resp.sendError(HttpServletResponse.SC_BAD_REQUEST,ExceptionUtil.getAllExceptionMsg(e));\n  return;\n}\ncatch (Exception e) {\n  resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + e.getMessage());\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2564,
        "startLineNumber" : 66,
        "startColumnNumber" : 49,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!authConfigs.isAuthEnabled()) {\n    chain.doFilter(request,response);\n    return;\n  }\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse resp=(HttpServletResponse)response;\n  String userAgent=WebUtils.getUserAgent(req);\n  if (StringUtils.startsWith(userAgent,Constants.NACOS_SERVER_HEADER)) {\n    chain.doFilter(request,response);\n    return;\n  }\n  try {\n    Method method=methodsCache.getMethod(req);\n    if (method == null) {\n      chain.doFilter(request,response);\n      return;\n    }\n    if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n      if (Loggers.AUTH.isDebugEnabled()) {\n        Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n      }\n      Secured secured=method.getAnnotation(Secured.class);\n      String action=secured.action().toString();\n      String resource=secured.resource();\n      if (StringUtils.isBlank(resource)) {\n        ResourceParser parser=getResourceParser(secured.parser());\n        resource=parser.parseName(req);\n      }\n      if (StringUtils.isBlank(resource)) {\n        throw new AccessException(\"resource name invalid!\");\n      }\n      authManager.auth(new Permission(resource,action),authManager.login(req));\n    }\n    chain.doFilter(request,response);\n  }\n catch (  AccessException e) {\n    if (Loggers.AUTH.isDebugEnabled()) {\n      Loggers.AUTH.debug(\"access denied, request: {} {}, reason: {}\",req.getMethod(),req.getRequestURI(),e.getErrMsg());\n    }\n    resp.sendError(HttpServletResponse.SC_FORBIDDEN,e.getErrMsg());\n    return;\n  }\ncatch (  IllegalArgumentException e) {\n    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,ExceptionUtil.getAllExceptionMsg(e));\n    return;\n  }\ncatch (  Exception e) {\n    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + e.getMessage());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2717,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {\n  if (!authConfigs.isAuthEnabled()) {\n    chain.doFilter(request,response);\n    return;\n  }\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse resp=(HttpServletResponse)response;\n  String userAgent=WebUtils.getUserAgent(req);\n  if (StringUtils.startsWith(userAgent,Constants.NACOS_SERVER_HEADER)) {\n    chain.doFilter(request,response);\n    return;\n  }\n  try {\n    Method method=methodsCache.getMethod(req);\n    if (method == null) {\n      chain.doFilter(request,response);\n      return;\n    }\n    if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n      if (Loggers.AUTH.isDebugEnabled()) {\n        Loggers.AUTH.debug(\"auth start, request: {} {}\",req.getMethod(),req.getRequestURI());\n      }\n      Secured secured=method.getAnnotation(Secured.class);\n      String action=secured.action().toString();\n      String resource=secured.resource();\n      if (StringUtils.isBlank(resource)) {\n        ResourceParser parser=getResourceParser(secured.parser());\n        resource=parser.parseName(req);\n      }\n      if (StringUtils.isBlank(resource)) {\n        throw new AccessException(\"resource name invalid!\");\n      }\n      authManager.auth(new Permission(resource,action),authManager.login(req));\n    }\n    chain.doFilter(request,response);\n  }\n catch (  AccessException e) {\n    if (Loggers.AUTH.isDebugEnabled()) {\n      Loggers.AUTH.debug(\"access denied, request: {} {}, reason: {}\",req.getMethod(),req.getRequestURI(),e.getErrMsg());\n    }\n    resp.sendError(HttpServletResponse.SC_FORBIDDEN,e.getErrMsg());\n    return;\n  }\ncatch (  IllegalArgumentException e) {\n    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,ExceptionUtil.getAllExceptionMsg(e));\n    return;\n  }\ncatch (  Exception e) {\n    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + e.getMessage());\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ResourceParser parser=getResourceParser(secured.parser());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "com.alibaba.nacos.auth.parser.ResourceParser"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 103,
    "startColumnNumber" : 44,
    "endLineNumber" : 103,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}