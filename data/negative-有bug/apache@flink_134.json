{
  "id" : 134,
  "expression" : "iterator.getValues1().iterator()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/operators/sort/ReusingSortMergeCoGroupIteratorITCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iterator.getValues1().iterator()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 123,
      "startColumnNumber" : 58,
      "endLineNumber" : 123,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 123,
        "startColumnNumber" : 50,
        "endLineNumber" : 123,
        "endColumnNumber" : 90
      },
      "nodeContext" : "iter1=iterator.getValues1().iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2046,
        "startLineNumber" : 122,
        "startColumnNumber" : 36,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n  Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n  String v1=null;\n  String v2=null;\n  if (iter1.hasNext()) {\n    Tuple2<Integer,String> rec=iter1.next();\n    key=rec.f0;\n    v1=rec.f1;\n  }\n else   if (iter2.hasNext()) {\n    Tuple2<Integer,String> rec=iter2.next();\n    key=rec.f0;\n    v2=rec.f1;\n  }\n else {\n    Assert.fail(\"No input on both sides.\");\n  }\n  Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n  Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n  Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n  if (v1 != null) {\n    expValues1.remove(v1);\n  }\n else {\n    expValues2.remove(v2);\n  }\n  while (iter1.hasNext()) {\n    Tuple2<Integer,String> rec=iter1.next();\n    Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n  }\n  Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n  while (iter2.hasNext()) {\n    Tuple2<Integer,String> rec=iter2.next();\n    Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n  }\n  Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n  expectedCoGroupsMap.remove(key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2070,
        "startLineNumber" : 122,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (iterator.next()) {\n  Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n  Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n  String v1=null;\n  String v2=null;\n  if (iter1.hasNext()) {\n    Tuple2<Integer,String> rec=iter1.next();\n    key=rec.f0;\n    v1=rec.f1;\n  }\n else   if (iter2.hasNext()) {\n    Tuple2<Integer,String> rec=iter2.next();\n    key=rec.f0;\n    v2=rec.f1;\n  }\n else {\n    Assert.fail(\"No input on both sides.\");\n  }\n  Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n  Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n  Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n  if (v1 != null) {\n    expValues1.remove(v1);\n  }\n else {\n    expValues2.remove(v2);\n  }\n  while (iter1.hasNext()) {\n    Tuple2<Integer,String> rec=iter1.next();\n    Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n  }\n  Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n  while (iter2.hasNext()) {\n    Tuple2<Integer,String> rec=iter2.next();\n    Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n  }\n  Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n  expectedCoGroupsMap.remove(key);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 255,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3845,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  generator1=new TupleGenerator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n  generator2=new TupleGenerator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n  reader1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);\n  reader2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);\n  Map<Integer,Collection<String>> expectedStringsMap1=collectData(generator1,INPUT_1_SIZE);\n  Map<Integer,Collection<String>> expectedStringsMap2=collectData(generator2,INPUT_2_SIZE);\n  Map<Integer,List<Collection<String>>> expectedCoGroupsMap=coGroupValues(expectedStringsMap1,expectedStringsMap2);\n  generator1.reset();\n  generator2.reset();\n  ReusingSortMergeCoGroupIterator<Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingSortMergeCoGroupIterator<>(this.reader1,this.reader2,this.serializer1,this.comparator1,this.serializer2,this.comparator2,this.pairComparator);\n  iterator.open();\n  int key=0;\n  while (iterator.next()) {\n    Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n    Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n    String v1=null;\n    String v2=null;\n    if (iter1.hasNext()) {\n      Tuple2<Integer,String> rec=iter1.next();\n      key=rec.f0;\n      v1=rec.f1;\n    }\n else     if (iter2.hasNext()) {\n      Tuple2<Integer,String> rec=iter2.next();\n      key=rec.f0;\n      v2=rec.f1;\n    }\n else {\n      Assert.fail(\"No input on both sides.\");\n    }\n    Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n    Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n    Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n    if (v1 != null) {\n      expValues1.remove(v1);\n    }\n else {\n      expValues2.remove(v2);\n    }\n    while (iter1.hasNext()) {\n      Tuple2<Integer,String> rec=iter1.next();\n      Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n    }\n    Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n    while (iter2.hasNext()) {\n      Tuple2<Integer,String> rec=iter2.next();\n      Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n    }\n    Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n    expectedCoGroupsMap.remove(key);\n  }\n  iterator.close();\n  Assert.assertTrue(\"Expected key set not empty\",expectedCoGroupsMap.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 434,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3999,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  generator1=new TupleGenerator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n  generator2=new TupleGenerator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n  reader1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);\n  reader2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);\n  Map<Integer,Collection<String>> expectedStringsMap1=collectData(generator1,INPUT_1_SIZE);\n  Map<Integer,Collection<String>> expectedStringsMap2=collectData(generator2,INPUT_2_SIZE);\n  Map<Integer,List<Collection<String>>> expectedCoGroupsMap=coGroupValues(expectedStringsMap1,expectedStringsMap2);\n  generator1.reset();\n  generator2.reset();\n  ReusingSortMergeCoGroupIterator<Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingSortMergeCoGroupIterator<>(this.reader1,this.reader2,this.serializer1,this.comparator1,this.serializer2,this.comparator2,this.pairComparator);\n  iterator.open();\n  int key=0;\n  while (iterator.next()) {\n    Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n    Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n    String v1=null;\n    String v2=null;\n    if (iter1.hasNext()) {\n      Tuple2<Integer,String> rec=iter1.next();\n      key=rec.f0;\n      v1=rec.f1;\n    }\n else     if (iter2.hasNext()) {\n      Tuple2<Integer,String> rec=iter2.next();\n      key=rec.f0;\n      v2=rec.f1;\n    }\n else {\n      Assert.fail(\"No input on both sides.\");\n    }\n    Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n    Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n    Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n    if (v1 != null) {\n      expValues1.remove(v1);\n    }\n else {\n      expValues2.remove(v2);\n    }\n    while (iter1.hasNext()) {\n      Tuple2<Integer,String> rec=iter1.next();\n      Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n    }\n    Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n    while (iter2.hasNext()) {\n      Tuple2<Integer,String> rec=iter2.next();\n      Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n    }\n    Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n    expectedCoGroupsMap.remove(key);\n  }\n  iterator.close();\n  Assert.assertTrue(\"Expected key set not empty\",expectedCoGroupsMap.isEmpty());\n}\n catch (Exception e) {\n  e.printStackTrace();\n  Assert.fail(\"An exception occurred during the test: \" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 454,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4015,
        "startLineNumber" : 84,
        "startColumnNumber" : 28,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    generator1=new TupleGenerator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n    generator2=new TupleGenerator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n    reader1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);\n    reader2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);\n    Map<Integer,Collection<String>> expectedStringsMap1=collectData(generator1,INPUT_1_SIZE);\n    Map<Integer,Collection<String>> expectedStringsMap2=collectData(generator2,INPUT_2_SIZE);\n    Map<Integer,List<Collection<String>>> expectedCoGroupsMap=coGroupValues(expectedStringsMap1,expectedStringsMap2);\n    generator1.reset();\n    generator2.reset();\n    ReusingSortMergeCoGroupIterator<Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingSortMergeCoGroupIterator<>(this.reader1,this.reader2,this.serializer1,this.comparator1,this.serializer2,this.comparator2,this.pairComparator);\n    iterator.open();\n    int key=0;\n    while (iterator.next()) {\n      Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n      Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n      String v1=null;\n      String v2=null;\n      if (iter1.hasNext()) {\n        Tuple2<Integer,String> rec=iter1.next();\n        key=rec.f0;\n        v1=rec.f1;\n      }\n else       if (iter2.hasNext()) {\n        Tuple2<Integer,String> rec=iter2.next();\n        key=rec.f0;\n        v2=rec.f1;\n      }\n else {\n        Assert.fail(\"No input on both sides.\");\n      }\n      Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n      Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n      Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n      if (v1 != null) {\n        expValues1.remove(v1);\n      }\n else {\n        expValues2.remove(v2);\n      }\n      while (iter1.hasNext()) {\n        Tuple2<Integer,String> rec=iter1.next();\n        Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n      }\n      Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n      while (iter2.hasNext()) {\n        Tuple2<Integer,String> rec=iter2.next();\n        Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n      }\n      Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n      expectedCoGroupsMap.remove(key);\n    }\n    iterator.close();\n    Assert.assertTrue(\"Expected key set not empty\",expectedCoGroupsMap.isEmpty());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    Assert.fail(\"An exception occurred during the test: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4049,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMerge(){\n  try {\n    generator1=new TupleGenerator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n    generator2=new TupleGenerator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);\n    reader1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);\n    reader2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);\n    Map<Integer,Collection<String>> expectedStringsMap1=collectData(generator1,INPUT_1_SIZE);\n    Map<Integer,Collection<String>> expectedStringsMap2=collectData(generator2,INPUT_2_SIZE);\n    Map<Integer,List<Collection<String>>> expectedCoGroupsMap=coGroupValues(expectedStringsMap1,expectedStringsMap2);\n    generator1.reset();\n    generator2.reset();\n    ReusingSortMergeCoGroupIterator<Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingSortMergeCoGroupIterator<>(this.reader1,this.reader2,this.serializer1,this.comparator1,this.serializer2,this.comparator2,this.pairComparator);\n    iterator.open();\n    int key=0;\n    while (iterator.next()) {\n      Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n      Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();\n      String v1=null;\n      String v2=null;\n      if (iter1.hasNext()) {\n        Tuple2<Integer,String> rec=iter1.next();\n        key=rec.f0;\n        v1=rec.f1;\n      }\n else       if (iter2.hasNext()) {\n        Tuple2<Integer,String> rec=iter2.next();\n        key=rec.f0;\n        v2=rec.f1;\n      }\n else {\n        Assert.fail(\"No input on both sides.\");\n      }\n      Assert.assertTrue(\"No matches for key \" + key,expectedCoGroupsMap.containsKey(key));\n      Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);\n      Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);\n      if (v1 != null) {\n        expValues1.remove(v1);\n      }\n else {\n        expValues2.remove(v2);\n      }\n      while (iter1.hasNext()) {\n        Tuple2<Integer,String> rec=iter1.next();\n        Assert.assertTrue(\"String not in expected set of first input\",expValues1.remove(rec.f1));\n      }\n      Assert.assertTrue(\"Expected set of first input not empty\",expValues1.isEmpty());\n      while (iter2.hasNext()) {\n        Tuple2<Integer,String> rec=iter2.next();\n        Assert.assertTrue(\"String not in expected set of second input\",expValues2.remove(rec.f1));\n      }\n      Assert.assertTrue(\"Expected set of second input not empty\",expValues2.isEmpty());\n      expectedCoGroupsMap.remove(key);\n    }\n    iterator.close();\n    Assert.assertTrue(\"Expected key set not empty\",expectedCoGroupsMap.isEmpty());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    Assert.fail(\"An exception occurred during the test: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 461,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.util.Iterator<org.apache.flink.api.java.tuple.Tuple2<java.lang.Integer,java.lang.String>>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 123,
    "startColumnNumber" : 58,
    "endLineNumber" : 123,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}