{
  "id" : 352,
  "expression" : "ClassSearcher.class",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/Generic/src/main/java/ghidra/util/classfinder/ClassSearcher.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClassSearcher.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 158,
      "startColumnNumber" : 18,
      "endLineNumber" : 158,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 8
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 314,
        "startLineNumber" : 157,
        "startColumnNumber" : 36,
        "endLineNumber" : 164,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 157,
        "startColumnNumber" : 3,
        "endLineNumber" : 164,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (InstantiationException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 152,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n  T t=constructor.newInstance((Object[])null);\n  instances.add(t);\n}\n catch (InstantiationException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\ncatch (IllegalAccessException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\ncatch (SecurityException e) {\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\ncatch (Exception e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1471,
        "startLineNumber" : 147,
        "startColumnNumber" : 43,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1512,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Class<? extends T> clazz : classes) {\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 143,
        "startColumnNumber" : 72,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2272,
        "startLineNumber" : 132,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get  {@link ExtensionPointProperties#priority() priority-sorted} classes instances that implement or derive from the given class\n * @param c the filter class\n * @param filter A Predicate that tests class objects (that are already of type T)for further filtering, <code>null</code> is equivalent to \"return true\"\n * @return {@link ExtensionPointProperties#priority() priority-sorted} list of classes instances that implement or extend T and pass the filtering test performed by  the predicate\n */\npublic static <T>List<T> getInstances(Class<T> c,ClassFilter filter){\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<ghidra.util.classfinder.ClassSearcher>"
  }, {
    "nodeContext" : "ClassSearcher.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 166,
      "startColumnNumber" : 18,
      "endLineNumber" : 166,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 8
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 165,
        "startColumnNumber" : 36,
        "endLineNumber" : 171,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 165,
        "startColumnNumber" : 3,
        "endLineNumber" : 171,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (IllegalAccessException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 152,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n  T t=constructor.newInstance((Object[])null);\n  instances.add(t);\n}\n catch (InstantiationException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\ncatch (IllegalAccessException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\ncatch (SecurityException e) {\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\ncatch (Exception e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1471,
        "startLineNumber" : 147,
        "startColumnNumber" : 43,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1512,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Class<? extends T> clazz : classes) {\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 143,
        "startColumnNumber" : 72,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2272,
        "startLineNumber" : 132,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get  {@link ExtensionPointProperties#priority() priority-sorted} classes instances that implement or derive from the given class\n * @param c the filter class\n * @param filter A Predicate that tests class objects (that are already of type T)for further filtering, <code>null</code> is equivalent to \"return true\"\n * @return {@link ExtensionPointProperties#priority() priority-sorted} list of classes instances that implement or extend T and pass the filtering test performed by  the predicate\n */\npublic static <T>List<T> getInstances(Class<T> c,ClassFilter filter){\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<ghidra.util.classfinder.ClassSearcher>"
  }, {
    "nodeContext" : "ClassSearcher.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 175,
      "startColumnNumber" : 18,
      "endLineNumber" : 175,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 16
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 172,
        "startColumnNumber" : 31,
        "endLineNumber" : 179,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 172,
        "startColumnNumber" : 3,
        "endLineNumber" : 179,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (SecurityException e) {\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 152,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n  T t=constructor.newInstance((Object[])null);\n  instances.add(t);\n}\n catch (InstantiationException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\ncatch (IllegalAccessException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\ncatch (SecurityException e) {\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\ncatch (Exception e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1471,
        "startLineNumber" : 147,
        "startColumnNumber" : 43,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1512,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Class<? extends T> clazz : classes) {\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 143,
        "startColumnNumber" : 72,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2272,
        "startLineNumber" : 132,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get  {@link ExtensionPointProperties#priority() priority-sorted} classes instances that implement or derive from the given class\n * @param c the filter class\n * @param filter A Predicate that tests class objects (that are already of type T)for further filtering, <code>null</code> is equivalent to \"return true\"\n * @return {@link ExtensionPointProperties#priority() priority-sorted} list of classes instances that implement or extend T and pass the filtering test performed by  the predicate\n */\npublic static <T>List<T> getInstances(Class<T> c,ClassFilter filter){\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 175,
        "startColumnNumber" : 4,
        "endLineNumber" : 176,
        "endColumnNumber" : 16
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<ghidra.util.classfinder.ClassSearcher>"
  }, {
    "nodeContext" : "ClassSearcher.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 181,
      "startColumnNumber" : 18,
      "endLineNumber" : 181,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 8
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 180,
        "startColumnNumber" : 23,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 180,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "catch (Exception e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1403,
        "startLineNumber" : 152,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n  T t=constructor.newInstance((Object[])null);\n  instances.add(t);\n}\n catch (InstantiationException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n}\ncatch (IllegalAccessException e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n}\ncatch (SecurityException e) {\n  String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n  Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n  throw new AssertException(message,e);\n}\ncatch (Exception e) {\n  Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1471,
        "startLineNumber" : 147,
        "startColumnNumber" : 43,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1512,
        "startLineNumber" : 147,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Class<? extends T> clazz : classes) {\n  if (!filter.accepts(clazz)) {\n    continue;\n  }\n  try {\n    Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n    T t=constructor.newInstance((Object[])null);\n    instances.add(t);\n  }\n catch (  InstantiationException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n  }\ncatch (  IllegalAccessException e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n  }\ncatch (  SecurityException e) {\n    String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n    Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n    throw new AssertException(message,e);\n  }\ncatch (  Exception e) {\n    Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 176,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 143,
        "startColumnNumber" : 72,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2272,
        "startLineNumber" : 132,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Get  {@link ExtensionPointProperties#priority() priority-sorted} classes instances that implement or derive from the given class\n * @param c the filter class\n * @param filter A Predicate that tests class objects (that are already of type T)for further filtering, <code>null</code> is equivalent to \"return true\"\n * @return {@link ExtensionPointProperties#priority() priority-sorted} list of classes instances that implement or extend T and pass the filtering test performed by  the predicate\n */\npublic static <T>List<T> getInstances(Class<T> c,ClassFilter filter){\n  List<Class<? extends T>> classes=getClasses(c);\n  List<T> instances=new ArrayList<>();\n  for (  Class<? extends T> clazz : classes) {\n    if (!filter.accepts(clazz)) {\n      continue;\n    }\n    try {\n      Constructor<? extends T> constructor=clazz.getConstructor((Class<?>[])null);\n      T t=constructor.newInstance((Object[])null);\n      instances.add(t);\n    }\n catch (    InstantiationException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class is not a concrete implementation or does not \"+ \"have a nullary constructor!\",e);\n    }\ncatch (    IllegalAccessException e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Discovered class does not have a public, default constructor!\",e);\n    }\ncatch (    SecurityException e) {\n      String message=\"Error creating class \" + clazz.getSimpleName() + \" for extension \"+ c.getName()+ \".  Security Exception!\";\n      Msg.showError(ClassSearcher.class,null,\"Error Instantiating Extension Point\",message,e);\n      throw new AssertException(message,e);\n    }\ncatch (    Exception e) {\n      Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e);\n    }\n  }\n  return instances;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 7
      },
      "nodeContext" : "Msg.showError(ClassSearcher.class,null,\"Error Creating Extension Point\",\"Error creating class \" + clazz.getSimpleName() + \" when creating extension points for \"+ c.getName(),e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<ghidra.util.classfinder.ClassSearcher>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 158,
    "startColumnNumber" : 18,
    "endLineNumber" : 158,
    "endColumnNumber" : 37
  }, {
    "charLength" : 19,
    "startLineNumber" : 166,
    "startColumnNumber" : 18,
    "endLineNumber" : 166,
    "endColumnNumber" : 37
  }, {
    "charLength" : 19,
    "startLineNumber" : 175,
    "startColumnNumber" : 18,
    "endLineNumber" : 175,
    "endColumnNumber" : 37
  }, {
    "charLength" : 19,
    "startLineNumber" : 181,
    "startColumnNumber" : 18,
    "endLineNumber" : 181,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}