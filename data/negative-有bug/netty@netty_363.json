{
  "id" : 363,
  "expression" : "outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/FastLzCompressor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 56,
      "startLineNumber" : 151,
      "startColumnNumber" : 31,
      "endLineNumber" : 151,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 87
      },
      "nodeContext" : "outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 88
      },
      "nodeContext" : "int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2525,
        "startLineNumber" : 142,
        "startColumnNumber" : 17,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!in.isReadable()) {\n    return out;\n  }\n  final int idx=in.readerIndex();\n  final int length=Math.min(in.readableBytes(),MAX_CHUNK_LENGTH);\n  final int outputIdx=out.writerIndex();\n  out.setMedium(outputIdx,MAGIC_NUMBER);\n  int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n  final byte blockType;\n  final int chunkLength;\n  if (length < MIN_LENGTH_TO_COMPRESSION) {\n    blockType=BLOCK_TYPE_NON_COMPRESSED;\n    out.ensureWritable(outputOffset + 2 + length);\n    final int outputPtr=outputOffset + 2;\n    if (checksum != null) {\n      checksum.reset();\n      checksum.update(in,idx,length);\n      out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n    }\n    out.setBytes(outputPtr,in,idx,length);\n    chunkLength=length;\n  }\n else {\n    if (checksum != null) {\n      checksum.reset();\n      checksum.update(in,idx,length);\n      out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n    }\n    final int maxOutputLength=calculateOutputBufferLength(length);\n    out.ensureWritable(outputOffset + 4 + maxOutputLength);\n    final int outputPtr=outputOffset + 4;\n    final int compressedLength=FastLz.compress(in,in.readerIndex(),length,out,outputPtr,level);\n    if (compressedLength < length) {\n      blockType=BLOCK_TYPE_COMPRESSED;\n      chunkLength=compressedLength;\n      out.setShort(outputOffset,chunkLength);\n      outputOffset+=2;\n    }\n else {\n      blockType=BLOCK_TYPE_NON_COMPRESSED;\n      out.setBytes(outputOffset + 2,in,idx,length);\n      chunkLength=length;\n    }\n  }\n  out.setShort(outputOffset,length);\n  out.setByte(outputIdx + OPTIONS_OFFSET,blockType | (checksum != null ? BLOCK_WITH_CHECKSUM : BLOCK_WITHOUT_CHECKSUM));\n  out.writerIndex(outputOffset + 2 + chunkLength);\n  in.skipBytes(length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 278,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2534,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (!in.isReadable()) {\n    return out;\n  }\n  final int idx=in.readerIndex();\n  final int length=Math.min(in.readableBytes(),MAX_CHUNK_LENGTH);\n  final int outputIdx=out.writerIndex();\n  out.setMedium(outputIdx,MAGIC_NUMBER);\n  int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n  final byte blockType;\n  final int chunkLength;\n  if (length < MIN_LENGTH_TO_COMPRESSION) {\n    blockType=BLOCK_TYPE_NON_COMPRESSED;\n    out.ensureWritable(outputOffset + 2 + length);\n    final int outputPtr=outputOffset + 2;\n    if (checksum != null) {\n      checksum.reset();\n      checksum.update(in,idx,length);\n      out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n    }\n    out.setBytes(outputPtr,in,idx,length);\n    chunkLength=length;\n  }\n else {\n    if (checksum != null) {\n      checksum.reset();\n      checksum.update(in,idx,length);\n      out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n    }\n    final int maxOutputLength=calculateOutputBufferLength(length);\n    out.ensureWritable(outputOffset + 4 + maxOutputLength);\n    final int outputPtr=outputOffset + 4;\n    final int compressedLength=FastLz.compress(in,in.readerIndex(),length,out,outputPtr,level);\n    if (compressedLength < length) {\n      blockType=BLOCK_TYPE_COMPRESSED;\n      chunkLength=compressedLength;\n      out.setShort(outputOffset,chunkLength);\n      outputOffset+=2;\n    }\n else {\n      blockType=BLOCK_TYPE_NON_COMPRESSED;\n      out.setBytes(outputOffset + 2,in,idx,length);\n      chunkLength=length;\n    }\n  }\n  out.setShort(outputOffset,length);\n  out.setByte(outputIdx + OPTIONS_OFFSET,blockType | (checksum != null ? BLOCK_WITH_CHECKSUM : BLOCK_WITHOUT_CHECKSUM));\n  out.writerIndex(outputOffset + 2 + chunkLength);\n  in.skipBytes(length);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2652,
        "startLineNumber" : 139,
        "startColumnNumber" : 73,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBufChecksum checksum=this.checksum;\n  ByteBuf out=allocator.buffer();\n  for (; ; ) {\n    if (!in.isReadable()) {\n      return out;\n    }\n    final int idx=in.readerIndex();\n    final int length=Math.min(in.readableBytes(),MAX_CHUNK_LENGTH);\n    final int outputIdx=out.writerIndex();\n    out.setMedium(outputIdx,MAGIC_NUMBER);\n    int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n    final byte blockType;\n    final int chunkLength;\n    if (length < MIN_LENGTH_TO_COMPRESSION) {\n      blockType=BLOCK_TYPE_NON_COMPRESSED;\n      out.ensureWritable(outputOffset + 2 + length);\n      final int outputPtr=outputOffset + 2;\n      if (checksum != null) {\n        checksum.reset();\n        checksum.update(in,idx,length);\n        out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n      }\n      out.setBytes(outputPtr,in,idx,length);\n      chunkLength=length;\n    }\n else {\n      if (checksum != null) {\n        checksum.reset();\n        checksum.update(in,idx,length);\n        out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n      }\n      final int maxOutputLength=calculateOutputBufferLength(length);\n      out.ensureWritable(outputOffset + 4 + maxOutputLength);\n      final int outputPtr=outputOffset + 4;\n      final int compressedLength=FastLz.compress(in,in.readerIndex(),length,out,outputPtr,level);\n      if (compressedLength < length) {\n        blockType=BLOCK_TYPE_COMPRESSED;\n        chunkLength=compressedLength;\n        out.setShort(outputOffset,chunkLength);\n        outputOffset+=2;\n      }\n else {\n        blockType=BLOCK_TYPE_NON_COMPRESSED;\n        out.setBytes(outputOffset + 2,in,idx,length);\n        chunkLength=length;\n      }\n    }\n    out.setShort(outputOffset,length);\n    out.setByte(outputIdx + OPTIONS_OFFSET,blockType | (checksum != null ? BLOCK_WITH_CHECKSUM : BLOCK_WITHOUT_CHECKSUM));\n    out.writerIndex(outputOffset + 2 + chunkLength);\n    in.skipBytes(length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2721,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private ByteBuf compressData(ByteBuf in,ByteBufAllocator allocator){\n  final ByteBufChecksum checksum=this.checksum;\n  ByteBuf out=allocator.buffer();\n  for (; ; ) {\n    if (!in.isReadable()) {\n      return out;\n    }\n    final int idx=in.readerIndex();\n    final int length=Math.min(in.readableBytes(),MAX_CHUNK_LENGTH);\n    final int outputIdx=out.writerIndex();\n    out.setMedium(outputIdx,MAGIC_NUMBER);\n    int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n    final byte blockType;\n    final int chunkLength;\n    if (length < MIN_LENGTH_TO_COMPRESSION) {\n      blockType=BLOCK_TYPE_NON_COMPRESSED;\n      out.ensureWritable(outputOffset + 2 + length);\n      final int outputPtr=outputOffset + 2;\n      if (checksum != null) {\n        checksum.reset();\n        checksum.update(in,idx,length);\n        out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n      }\n      out.setBytes(outputPtr,in,idx,length);\n      chunkLength=length;\n    }\n else {\n      if (checksum != null) {\n        checksum.reset();\n        checksum.update(in,idx,length);\n        out.setInt(outputIdx + CHECKSUM_OFFSET,(int)checksum.getValue());\n      }\n      final int maxOutputLength=calculateOutputBufferLength(length);\n      out.ensureWritable(outputOffset + 4 + maxOutputLength);\n      final int outputPtr=outputOffset + 4;\n      final int compressedLength=FastLz.compress(in,in.readerIndex(),length,out,outputPtr,level);\n      if (compressedLength < length) {\n        blockType=BLOCK_TYPE_COMPRESSED;\n        chunkLength=compressedLength;\n        out.setShort(outputOffset,chunkLength);\n        outputOffset+=2;\n      }\n else {\n        blockType=BLOCK_TYPE_NON_COMPRESSED;\n        out.setBytes(outputOffset + 2,in,idx,length);\n        chunkLength=length;\n      }\n    }\n    out.setShort(outputOffset,length);\n    out.setByte(outputIdx + OPTIONS_OFFSET,blockType | (checksum != null ? BLOCK_WITH_CHECKSUM : BLOCK_WITHOUT_CHECKSUM));\n    out.writerIndex(outputOffset + 2 + chunkLength);\n    in.skipBytes(length);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 151,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 88
      },
      "nodeContext" : "int outputOffset=outputIdx + CHECKSUM_OFFSET + (checksum != null ? 4 : 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 10,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 56,
    "startLineNumber" : 151,
    "startColumnNumber" : 31,
    "endLineNumber" : 151,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}