{
  "id" : 244,
  "expression" : "(PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport/src/main/java/io/netty/channel/nio/NioHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 342,
      "startLineNumber" : 183,
      "startColumnNumber" : 70,
      "endLineNumber" : 192,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 27,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 183,
        "startColumnNumber" : 40,
        "endLineNumber" : 192,
        "endColumnNumber" : 10
      },
      "nodeContext" : "AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 183,
        "startColumnNumber" : 15,
        "endLineNumber" : 192,
        "endColumnNumber" : 10
      },
      "nodeContext" : "maybeSelectorImplClass=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Object maybeSelectorImplClass=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 35,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4243,
        "startLineNumber" : 171,
        "startColumnNumber" : 41,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Selector unwrappedSelector;\n  try {\n    unwrappedSelector=provider.openSelector();\n  }\n catch (  IOException e) {\n    throw new ChannelException(\"failed to open a new selector\",e);\n  }\n  if (DISABLE_KEY_SET_OPTIMIZATION) {\n    return new SelectorTuple(unwrappedSelector);\n  }\n  Object maybeSelectorImplClass=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n    try {\n      return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n    }\n catch (    Throwable cause) {\n      return cause;\n    }\n  }\n);\n  if (!(maybeSelectorImplClass instanceof Class) || !((Class<?>)maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) {\n    if (maybeSelectorImplClass instanceof Throwable) {\n      Throwable t=(Throwable)maybeSelectorImplClass;\n      logger.trace(\"failed to instrument a special java.util.Set into: {}\",unwrappedSelector,t);\n    }\n    return new SelectorTuple(unwrappedSelector);\n  }\n  final Class<?> selectorImplClass=(Class<?>)maybeSelectorImplClass;\n  final SelectedSelectionKeySet selectedKeySet=new SelectedSelectionKeySet();\n  Object maybeException=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n    try {\n      Field selectedKeysField=selectorImplClass.getDeclaredField(\"selectedKeys\");\n      Field publicSelectedKeysField=selectorImplClass.getDeclaredField(\"publicSelectedKeys\");\n      if (PlatformDependent.javaVersion() >= 9 && PlatformDependent.hasUnsafe()) {\n        long selectedKeysFieldOffset=PlatformDependent.objectFieldOffset(selectedKeysField);\n        long publicSelectedKeysFieldOffset=PlatformDependent.objectFieldOffset(publicSelectedKeysField);\n        if (selectedKeysFieldOffset != -1 && publicSelectedKeysFieldOffset != -1) {\n          PlatformDependent.putObject(unwrappedSelector,selectedKeysFieldOffset,selectedKeySet);\n          PlatformDependent.putObject(unwrappedSelector,publicSelectedKeysFieldOffset,selectedKeySet);\n          return null;\n        }\n      }\n      Throwable cause=ReflectionUtil.trySetAccessible(selectedKeysField,true);\n      if (cause != null) {\n        return cause;\n      }\n      cause=ReflectionUtil.trySetAccessible(publicSelectedKeysField,true);\n      if (cause != null) {\n        return cause;\n      }\n      selectedKeysField.set(unwrappedSelector,selectedKeySet);\n      publicSelectedKeysField.set(unwrappedSelector,selectedKeySet);\n      return null;\n    }\n catch (    NoSuchFieldException|IllegalAccessException e) {\n      return e;\n    }\n  }\n);\n  if (maybeException instanceof Exception) {\n    selectedKeys=null;\n    Exception e=(Exception)maybeException;\n    logger.trace(\"failed to instrument a special java.util.Set into: {}\",unwrappedSelector,e);\n    return new SelectorTuple(unwrappedSelector);\n  }\n  selectedKeys=selectedKeySet;\n  logger.trace(\"instrumented a special java.util.Set into: {}\",unwrappedSelector);\n  return new SelectorTuple(unwrappedSelector,new SelectedSelectionKeySetSelector(unwrappedSelector,selectedKeySet));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 340,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4280,
        "startLineNumber" : 171,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private SelectorTuple openSelector(){\n  final Selector unwrappedSelector;\n  try {\n    unwrappedSelector=provider.openSelector();\n  }\n catch (  IOException e) {\n    throw new ChannelException(\"failed to open a new selector\",e);\n  }\n  if (DISABLE_KEY_SET_OPTIMIZATION) {\n    return new SelectorTuple(unwrappedSelector);\n  }\n  Object maybeSelectorImplClass=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n    try {\n      return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n    }\n catch (    Throwable cause) {\n      return cause;\n    }\n  }\n);\n  if (!(maybeSelectorImplClass instanceof Class) || !((Class<?>)maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) {\n    if (maybeSelectorImplClass instanceof Throwable) {\n      Throwable t=(Throwable)maybeSelectorImplClass;\n      logger.trace(\"failed to instrument a special java.util.Set into: {}\",unwrappedSelector,t);\n    }\n    return new SelectorTuple(unwrappedSelector);\n  }\n  final Class<?> selectorImplClass=(Class<?>)maybeSelectorImplClass;\n  final SelectedSelectionKeySet selectedKeySet=new SelectedSelectionKeySet();\n  Object maybeException=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n    try {\n      Field selectedKeysField=selectorImplClass.getDeclaredField(\"selectedKeys\");\n      Field publicSelectedKeysField=selectorImplClass.getDeclaredField(\"publicSelectedKeys\");\n      if (PlatformDependent.javaVersion() >= 9 && PlatformDependent.hasUnsafe()) {\n        long selectedKeysFieldOffset=PlatformDependent.objectFieldOffset(selectedKeysField);\n        long publicSelectedKeysFieldOffset=PlatformDependent.objectFieldOffset(publicSelectedKeysField);\n        if (selectedKeysFieldOffset != -1 && publicSelectedKeysFieldOffset != -1) {\n          PlatformDependent.putObject(unwrappedSelector,selectedKeysFieldOffset,selectedKeySet);\n          PlatformDependent.putObject(unwrappedSelector,publicSelectedKeysFieldOffset,selectedKeySet);\n          return null;\n        }\n      }\n      Throwable cause=ReflectionUtil.trySetAccessible(selectedKeysField,true);\n      if (cause != null) {\n        return cause;\n      }\n      cause=ReflectionUtil.trySetAccessible(publicSelectedKeysField,true);\n      if (cause != null) {\n        return cause;\n      }\n      selectedKeysField.set(unwrappedSelector,selectedKeySet);\n      publicSelectedKeysField.set(unwrappedSelector,selectedKeySet);\n      return null;\n    }\n catch (    NoSuchFieldException|IllegalAccessException e) {\n      return e;\n    }\n  }\n);\n  if (maybeException instanceof Exception) {\n    selectedKeys=null;\n    Exception e=(Exception)maybeException;\n    logger.trace(\"failed to instrument a special java.util.Set into: {}\",unwrappedSelector,e);\n    return new SelectorTuple(unwrappedSelector);\n  }\n  selectedKeys=selectedKeySet;\n  logger.trace(\"instrumented a special java.util.Set into: {}\",unwrappedSelector);\n  return new SelectorTuple(unwrappedSelector,new SelectedSelectionKeySetSelector(unwrappedSelector,selectedKeySet));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 345,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Object maybeSelectorImplClass=AccessController.doPrivileged((PrivilegedAction<Object>)() -> {\n  try {\n    return Class.forName(\"sun.nio.ch.SelectorImpl\",false,PlatformDependent.getSystemClassLoader());\n  }\n catch (  Throwable cause) {\n    return cause;\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 35,
      "astHeight" : 12
    },
    "tokenLength" : 14,
    "type" : "java.security.PrivilegedAction<java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 342,
    "startLineNumber" : 183,
    "startColumnNumber" : 70,
    "endLineNumber" : 192,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}