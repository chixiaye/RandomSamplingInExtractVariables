{
  "id" : 402,
  "expression" : "hash",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1127,
      "startColumnNumber" : 43,
      "endLineNumber" : 1127,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 1127,
        "startColumnNumber" : 20,
        "endLineNumber" : 1127,
        "endColumnNumber" : 48
      },
      "nodeContext" : "smallHashs.containsKey(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1127,
        "startColumnNumber" : 16,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (smallHashs.containsKey(hash)) {\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 1127,
        "startColumnNumber" : 20,
        "endLineNumber" : 1127,
        "endColumnNumber" : 48
      },
      "nodeContext" : "smallHashs.containsKey(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1128,
      "startColumnNumber" : 142,
      "endLineNumber" : 1128,
      "endColumnNumber" : 146
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 83
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 1127,
        "startColumnNumber" : 50,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1127,
        "startColumnNumber" : 16,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (smallHashs.containsKey(hash)) {\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1130,
      "startColumnNumber" : 39,
      "endLineNumber" : 1130,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1130,
        "startColumnNumber" : 24,
        "endLineNumber" : 1130,
        "endColumnNumber" : 44
      },
      "nodeContext" : "smallHashs.get(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 83
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 1127,
        "startColumnNumber" : 50,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1127,
        "startColumnNumber" : 16,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (smallHashs.containsKey(hash)) {\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1130,
        "startColumnNumber" : 24,
        "endLineNumber" : 1130,
        "endColumnNumber" : 44
      },
      "nodeContext" : "smallHashs.get(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1130,
      "startColumnNumber" : 75,
      "endLineNumber" : 1130,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 1130,
        "startColumnNumber" : 60,
        "endLineNumber" : 1130,
        "endColumnNumber" : 80
      },
      "nodeContext" : "smallHashs.get(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1130,
        "startColumnNumber" : 46,
        "endLineNumber" : 1130,
        "endColumnNumber" : 81
      },
      "nodeContext" : "smallOnes.get(smallHashs.get(hash))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 1128,
        "startColumnNumber" : 20,
        "endLineNumber" : 1130,
        "endColumnNumber" : 83
      },
      "nodeContext" : "LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 1127,
        "startColumnNumber" : 50,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1127,
        "startColumnNumber" : 16,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (smallHashs.containsKey(hash)) {\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 1130,
        "startColumnNumber" : 46,
        "endLineNumber" : 1130,
        "endColumnNumber" : 81
      },
      "nodeContext" : "smallOnes.get(smallHashs.get(hash))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1131,
      "startColumnNumber" : 44,
      "endLineNumber" : 1131,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 1131,
        "startColumnNumber" : 20,
        "endLineNumber" : 1131,
        "endColumnNumber" : 49
      },
      "nodeContext" : "smallHashCollisions.add(hash)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 1131,
        "startColumnNumber" : 20,
        "endLineNumber" : 1131,
        "endColumnNumber" : 50
      },
      "nodeContext" : "smallHashCollisions.add(hash);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 1127,
        "startColumnNumber" : 50,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 1127,
        "startColumnNumber" : 16,
        "endLineNumber" : 1132,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (smallHashs.containsKey(hash)) {\n  LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n  smallHashCollisions.add(hash);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 1131,
        "startColumnNumber" : 20,
        "endLineNumber" : 1131,
        "endColumnNumber" : 50
      },
      "nodeContext" : "smallHashCollisions.add(hash);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "hash",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 1133,
      "startColumnNumber" : 31,
      "endLineNumber" : 1133,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 1133,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 52
      },
      "nodeContext" : "smallHashs.put(hash,entry.getKey())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1133,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 53
      },
      "nodeContext" : "smallHashs.put(hash,entry.getKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 1124,
        "startColumnNumber" : 96,
        "endLineNumber" : 1134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 1124,
        "startColumnNumber" : 12,
        "endLineNumber" : 1136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n  smallOnes.put(entry.getKey(),entry.getValue());\n  int hash=hashTopicForMetrics(entry.getKey());\n  if (smallHashs.containsKey(hash)) {\n    LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n    smallHashCollisions.add(hash);\n  }\n  smallHashs.put(hash,entry.getKey());\n}\n else {\n  bigOnes.put(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 1123,
        "startColumnNumber" : 102,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 1123,
        "startColumnNumber" : 8,
        "endLineNumber" : 1137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n  if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n    smallOnes.put(entry.getKey(),entry.getValue());\n    int hash=hashTopicForMetrics(entry.getKey());\n    if (smallHashs.containsKey(hash)) {\n      LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n      smallHashCollisions.add(hash);\n    }\n    smallHashs.put(hash,entry.getKey());\n  }\n else {\n    bigOnes.put(entry.getKey(),entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5766,
        "startLineNumber" : 1118,
        "startColumnNumber" : 40,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 636,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5802,
        "startLineNumber" : 1118,
        "startColumnNumber" : 4,
        "endLineNumber" : 1232,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkAndReviseMetrics(){\n  Map<String,TimerMetrics.Metric> smallOnes=new HashMap<>();\n  Map<String,TimerMetrics.Metric> bigOnes=new HashMap<>();\n  Map<Integer,String> smallHashs=new HashMap<>();\n  Set<Integer> smallHashCollisions=new HashSet<>();\n  for (  Map.Entry<String,TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {\n    if (entry.getValue().getCount().get() < storeConfig.getTimerMetricSmallThreshold()) {\n      smallOnes.put(entry.getKey(),entry.getValue());\n      int hash=hashTopicForMetrics(entry.getKey());\n      if (smallHashs.containsKey(hash)) {\n        LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-small code:{} small topic:{}{} small topic:{}{}\",hash,entry.getKey(),entry.getValue(),smallHashs.get(hash),smallOnes.get(smallHashs.get(hash)));\n        smallHashCollisions.add(hash);\n      }\n      smallHashs.put(hash,entry.getKey());\n    }\n else {\n      bigOnes.put(entry.getKey(),entry.getValue());\n    }\n  }\n  for (  Map.Entry<String,TimerMetrics.Metric> bjgEntry : bigOnes.entrySet()) {\n    if (smallHashs.containsKey(hashTopicForMetrics(bjgEntry.getKey()))) {\n      Iterator<Map.Entry<String,TimerMetrics.Metric>> smalllIt=smallOnes.entrySet().iterator();\n      while (smalllIt.hasNext()) {\n        Map.Entry<String,TimerMetrics.Metric> smallEntry=smalllIt.next();\n        if (hashTopicForMetrics(smallEntry.getKey()) == hashTopicForMetrics(bjgEntry.getKey())) {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Metric hash collision between small-big code:{} small topic:{}{} big topic:{}{}\",hashTopicForMetrics(smallEntry.getKey()),smallEntry.getKey(),smallEntry.getValue(),bjgEntry.getKey(),bjgEntry.getValue());\n          smalllIt.remove();\n        }\n      }\n    }\n  }\n  smallHashs.clear();\n  Map<String,TimerMetrics.Metric> newSmallOnes=new HashMap<>();\n  for (  String topic : smallOnes.keySet()) {\n    newSmallOnes.put(topic,new TimerMetrics.Metric());\n    smallHashs.put(hashTopicForMetrics(topic),topic);\n  }\n  long readTimeMs=currReadTimeMs;\n  long currOffsetPy=timerWheel.checkPhyPos(readTimeMs,0);\n  LinkedList<SelectMappedBufferResult> sbrs=new LinkedList<>();\n  boolean hasError=false;\n  try {\n    while (true) {\n      SelectMappedBufferResult timeSbr=timerLog.getWholeBuffer(currOffsetPy);\n      if (timeSbr == null) {\n        break;\n      }\n else {\n        sbrs.add(timeSbr);\n      }\n      ByteBuffer bf=timeSbr.getByteBuffer();\n      for (int position=0; position < timeSbr.getSize(); position+=TimerLog.UNIT_SIZE) {\n        bf.position(position);\n        bf.getInt();\n        bf.getLong();\n        int magic=bf.getInt();\n        long enqueueTime=bf.getLong();\n        long delayedTime=bf.getInt() + enqueueTime;\n        long offsetPy=bf.getLong();\n        int sizePy=bf.getInt();\n        int hashCode=bf.getInt();\n        if (delayedTime < readTimeMs) {\n          continue;\n        }\n        if (!smallHashs.containsKey(hashCode)) {\n          continue;\n        }\n        String topic=null;\n        if (smallHashCollisions.contains(hashCode)) {\n          MessageExt messageExt=getMessageByCommitOffset(offsetPy,sizePy);\n          if (null != messageExt) {\n            topic=messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n          }\n        }\n else {\n          topic=smallHashs.get(hashCode);\n        }\n        if (null != topic && newSmallOnes.containsKey(topic)) {\n          newSmallOnes.get(topic).getCount().addAndGet(needDelete(magic) ? -1 : 1);\n        }\n else {\n          LOGGER.warn(\"[CheckAndReviseMetrics]Unexpected topic in checking timer metrics topic:{} code:{} offsetPy:{} size:{}\",topic,hashCode,offsetPy,sizePy);\n        }\n      }\n      if (timeSbr.getSize() < timerLogFileSize) {\n        break;\n      }\n else {\n        currOffsetPy=currOffsetPy + timerLogFileSize;\n      }\n    }\n  }\n catch (  Exception e) {\n    hasError=true;\n    LOGGER.error(\"[CheckAndReviseMetrics]Unknown error in checkAndReviseMetrics and abort\",e);\n  }\n finally {\n    for (    SelectMappedBufferResult sbr : sbrs) {\n      if (null != sbr) {\n        sbr.release();\n      }\n    }\n  }\n  if (!hasError) {\n    for (    String topic : newSmallOnes.keySet()) {\n      LOGGER.info(\"[CheckAndReviseMetrics]Revise metric for topic {} from {} to {}\",topic,smallOnes.get(topic),newSmallOnes.get(topic));\n    }\n    timerMetrics.getTimingCount().putAll(newSmallOnes);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 640,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1133,
        "startColumnNumber" : 16,
        "endLineNumber" : 1133,
        "endColumnNumber" : 53
      },
      "nodeContext" : "smallHashs.put(hash,entry.getKey());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 1127,
    "startColumnNumber" : 43,
    "endLineNumber" : 1127,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 1128,
    "startColumnNumber" : 142,
    "endLineNumber" : 1128,
    "endColumnNumber" : 146
  }, {
    "charLength" : 4,
    "startLineNumber" : 1130,
    "startColumnNumber" : 39,
    "endLineNumber" : 1130,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 1130,
    "startColumnNumber" : 75,
    "endLineNumber" : 1130,
    "endColumnNumber" : 79
  }, {
    "charLength" : 4,
    "startLineNumber" : 1131,
    "startColumnNumber" : 44,
    "endLineNumber" : 1131,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 1133,
    "startColumnNumber" : 31,
    "endLineNumber" : 1133,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}