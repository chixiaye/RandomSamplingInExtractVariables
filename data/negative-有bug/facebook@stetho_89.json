{
  "id" : 89,
  "expression" : "oldElementInfo",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho/src/main/java/com/facebook/stetho/inspector/elements/ShadowDOM.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 116,
      "startColumnNumber" : 10,
      "endLineNumber" : 116,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 115,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 32
      },
      "nodeContext" : "changesElementInfo == null && oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 115,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 68
      },
      "nodeContext" : "changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 115,
        "startColumnNumber" : 6,
        "endLineNumber" : 119,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 117,
      "startColumnNumber" : 44,
      "endLineNumber" : 117,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 117,
        "startColumnNumber" : 44,
        "endLineNumber" : 117,
        "endColumnNumber" : 67
      },
      "nodeContext" : "oldElementInfo.children",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 115,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 68
      },
      "nodeContext" : "changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 115,
        "startColumnNumber" : 6,
        "endLineNumber" : 119,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 123,
      "startColumnNumber" : 10,
      "endLineNumber" : 123,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 123,
        "startColumnNumber" : 10,
        "endLineNumber" : 123,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 123,
        "endColumnNumber" : 32
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 74
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 68
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  newElementInfo=mElementToInfoMap.get(element);\n  mElementToInfoChangesMap.remove(element);\n}\n else {\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 123,
        "startColumnNumber" : 10,
        "endLineNumber" : 123,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 124,
      "startColumnNumber" : 10,
      "endLineNumber" : 124,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 38
      },
      "nodeContext" : "oldElementInfo.parentElement",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 74
      },
      "nodeContext" : "oldElementInfo.parentElement == changesElementInfo.parentElement",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 74
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 68
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  newElementInfo=mElementToInfoMap.get(element);\n  mElementToInfoChangesMap.remove(element);\n}\n else {\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 74
      },
      "nodeContext" : "oldElementInfo.parentElement == changesElementInfo.parentElement",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 125,
      "startColumnNumber" : 44,
      "endLineNumber" : 125,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 125,
        "startColumnNumber" : 44,
        "endLineNumber" : 125,
        "endColumnNumber" : 67
      },
      "nodeContext" : "oldElementInfo.children",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 68
      },
      "nodeContext" : "changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  newElementInfo=mElementToInfoMap.get(element);\n  mElementToInfoChangesMap.remove(element);\n}\n else {\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ListUtil.identityEquals(children,oldElementInfo.children)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 134,
      "startColumnNumber" : 15,
      "endLineNumber" : 134,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 134,
        "startColumnNumber" : 15,
        "endLineNumber" : 134,
        "endColumnNumber" : 37
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 134,
        "startColumnNumber" : 14,
        "endLineNumber" : 134,
        "endColumnNumber" : 38
      },
      "nodeContext" : "(oldElementInfo != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 134,
        "startColumnNumber" : 14,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "(oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 132,
        "startColumnNumber" : 31,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 132,
        "startColumnNumber" : 15,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 131,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  newElementInfo=mElementToInfoMap.get(element);\n  mElementToInfoChangesMap.remove(element);\n}\n else {\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 134,
        "startColumnNumber" : 14,
        "endLineNumber" : 134,
        "endColumnNumber" : 38
      },
      "nodeContext" : "(oldElementInfo != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 135,
      "startColumnNumber" : 14,
      "endLineNumber" : 135,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 135,
        "startColumnNumber" : 14,
        "endLineNumber" : 135,
        "endColumnNumber" : 42
      },
      "nodeContext" : "oldElementInfo.parentElement",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 134,
        "startColumnNumber" : 14,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "(oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 132,
        "startColumnNumber" : 31,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 132,
        "startColumnNumber" : 15,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 131,
        "startColumnNumber" : 13,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n  newElementInfo=mElementToInfoMap.get(element);\n  mElementToInfoChangesMap.remove(element);\n}\n else {\n  Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n  newElementInfo=new ElementInfo(element,parentElement,children);\n  mElementToInfoChangesMap.put(element,newElementInfo);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 135,
        "startColumnNumber" : 14,
        "endLineNumber" : 135,
        "endColumnNumber" : 42
      },
      "nodeContext" : "oldElementInfo.parentElement",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 158,
      "startColumnNumber" : 10,
      "endLineNumber" : 158,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 60
      },
      "nodeContext" : "oldElementInfo != null && oldElementInfo.children != newElementInfo.children",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 32
      },
      "nodeContext" : "oldElementInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 159,
      "startColumnNumber" : 10,
      "endLineNumber" : 159,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 33
      },
      "nodeContext" : "oldElementInfo.children",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 60
      },
      "nodeContext" : "oldElementInfo.children != newElementInfo.children",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 60
      },
      "nodeContext" : "oldElementInfo != null && oldElementInfo.children != newElementInfo.children",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 60
      },
      "nodeContext" : "oldElementInfo.children != newElementInfo.children",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 160,
      "startColumnNumber" : 28,
      "endLineNumber" : 160,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 51
      },
      "nodeContext" : "oldElementInfo.children",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "oldElementInfo.children.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 160,
        "startColumnNumber" : 24,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "N=oldElementInfo.children.size()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 160,
        "startColumnNumber" : 13,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int i=0, N=oldElementInfo.children.size()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n  final Object childElement=oldElementInfo.children.get(i);\n  notNewChildrenSet.add(childElement);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 159,
        "startColumnNumber" : 62,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 160,
        "startColumnNumber" : 13,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "int i=0, N=oldElementInfo.children.size()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  }, {
    "nodeContext" : "oldElementInfo",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 161,
      "startColumnNumber" : 38,
      "endLineNumber" : 161,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 161,
        "startColumnNumber" : 38,
        "endLineNumber" : 161,
        "endColumnNumber" : 61
      },
      "nodeContext" : "oldElementInfo.children",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 161,
        "startColumnNumber" : 38,
        "endLineNumber" : 161,
        "endColumnNumber" : 68
      },
      "nodeContext" : "oldElementInfo.children.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 161,
        "startColumnNumber" : 23,
        "endLineNumber" : 161,
        "endColumnNumber" : 68
      },
      "nodeContext" : "childElement=oldElementInfo.children.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 161,
        "startColumnNumber" : 10,
        "endLineNumber" : 161,
        "endColumnNumber" : 69
      },
      "nodeContext" : "final Object childElement=oldElementInfo.children.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 160,
        "startColumnNumber" : 72,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Object childElement=oldElementInfo.children.get(i);\n  notNewChildrenSet.add(childElement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 163,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n  final Object childElement=oldElementInfo.children.get(i);\n  notNewChildrenSet.add(childElement);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 159,
        "startColumnNumber" : 62,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n  for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=oldElementInfo.children.get(i);\n    notNewChildrenSet.add(childElement);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4012,
        "startLineNumber" : 106,
        "startColumnNumber" : 74,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4082,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setElementChildren(Object element,List<Object> children){\n  ElementInfo changesElementInfo=mElementToInfoChangesMap.get(element);\n  if (changesElementInfo != null && ListUtil.identityEquals(children,changesElementInfo.children)) {\n    return;\n  }\n  ElementInfo oldElementInfo=mElementToInfoMap.get(element);\n  if (changesElementInfo == null && oldElementInfo != null && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    return;\n  }\n  ElementInfo newElementInfo;\n  if (changesElementInfo != null && oldElementInfo != null && oldElementInfo.parentElement == changesElementInfo.parentElement && ListUtil.identityEquals(children,oldElementInfo.children)) {\n    newElementInfo=mElementToInfoMap.get(element);\n    mElementToInfoChangesMap.remove(element);\n  }\n else {\n    Object parentElement=(changesElementInfo != null) ? changesElementInfo.parentElement : (oldElementInfo != null) ? oldElementInfo.parentElement : null;\n    newElementInfo=new ElementInfo(element,parentElement,children);\n    mElementToInfoChangesMap.put(element,newElementInfo);\n  }\n  HashSet<Object> notNewChildrenSet=acquireNotNewChildrenHashSet();\n  if (oldElementInfo != null && oldElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=oldElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=oldElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  if (changesElementInfo != null && changesElementInfo.children != newElementInfo.children) {\n    for (int i=0, N=changesElementInfo.children.size(); i < N; ++i) {\n      final Object childElement=changesElementInfo.children.get(i);\n      notNewChildrenSet.add(childElement);\n    }\n  }\n  for (int i=0, N=newElementInfo.children.size(); i < N; ++i) {\n    final Object childElement=newElementInfo.children.get(i);\n    setElementParent(childElement,element);\n    notNewChildrenSet.remove(childElement);\n  }\n  for (  Object childElement : notNewChildrenSet) {\n    final ElementInfo childChangesElementInfo=mElementToInfoChangesMap.get(childElement);\n    if (childChangesElementInfo != null && childChangesElementInfo.parentElement != element) {\n      continue;\n    }\n    final ElementInfo oldChangesElementInfo=mElementToInfoMap.get(childElement);\n    if (oldChangesElementInfo != null && oldChangesElementInfo.parentElement == element) {\n      setElementParent(childElement,null);\n    }\n  }\n  releaseNotNewChildrenHashSet(notNewChildrenSet);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 161,
        "startColumnNumber" : 10,
        "endLineNumber" : 161,
        "endColumnNumber" : 69
      },
      "nodeContext" : "final Object childElement=oldElementInfo.children.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.stetho.inspector.elements.ElementInfo"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 116,
    "startColumnNumber" : 10,
    "endLineNumber" : 116,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 117,
    "startColumnNumber" : 44,
    "endLineNumber" : 117,
    "endColumnNumber" : 58
  }, {
    "charLength" : 14,
    "startLineNumber" : 123,
    "startColumnNumber" : 10,
    "endLineNumber" : 123,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 124,
    "startColumnNumber" : 10,
    "endLineNumber" : 124,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 125,
    "startColumnNumber" : 44,
    "endLineNumber" : 125,
    "endColumnNumber" : 58
  }, {
    "charLength" : 14,
    "startLineNumber" : 134,
    "startColumnNumber" : 15,
    "endLineNumber" : 134,
    "endColumnNumber" : 29
  }, {
    "charLength" : 14,
    "startLineNumber" : 135,
    "startColumnNumber" : 14,
    "endLineNumber" : 135,
    "endColumnNumber" : 28
  }, {
    "charLength" : 14,
    "startLineNumber" : 158,
    "startColumnNumber" : 10,
    "endLineNumber" : 158,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 159,
    "startColumnNumber" : 10,
    "endLineNumber" : 159,
    "endColumnNumber" : 24
  }, {
    "charLength" : 14,
    "startLineNumber" : 160,
    "startColumnNumber" : 28,
    "endLineNumber" : 160,
    "endColumnNumber" : 42
  }, {
    "charLength" : 14,
    "startLineNumber" : 161,
    "startColumnNumber" : 38,
    "endLineNumber" : 161,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  } ]
}