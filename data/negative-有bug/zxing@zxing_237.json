{
  "id" : 237,
  "expression" : "decodeRowResult",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/oned/CodaBarReader.java",
  "occurrences" : 14,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 88,
      "startColumnNumber" : 4,
      "endLineNumber" : 88,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 32
      },
      "nodeContext" : "decodeRowResult.setLength(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 33
      },
      "nodeContext" : "decodeRowResult.setLength(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 33
      },
      "nodeContext" : "decodeRowResult.setLength(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 97,
      "startColumnNumber" : 6,
      "endLineNumber" : 97,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 47
      },
      "nodeContext" : "decodeRowResult.append((char)charOffset)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "decodeRowResult.append((char)charOffset);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 89,
        "startColumnNumber" : 7,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int charOffset=toNarrowWidePattern(nextStart);\n  if (charOffset == -1) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  decodeRowResult.append((char)charOffset);\n  nextStart+=8;\n  if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 40
      },
      "nodeContext" : "do {\n  int charOffset=toNarrowWidePattern(nextStart);\n  if (charOffset == -1) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  decodeRowResult.append((char)charOffset);\n  nextStart+=8;\n  if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n    break;\n  }\n}\n while (nextStart < counterLength);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "decodeRowResult.append((char)charOffset);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 100,
      "startColumnNumber" : 10,
      "endLineNumber" : 100,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 34
      },
      "nodeContext" : "decodeRowResult.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 38
      },
      "nodeContext" : "decodeRowResult.length() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 101,
        "endColumnNumber" : 64
      },
      "nodeContext" : "decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 103,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 89,
        "startColumnNumber" : 7,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int charOffset=toNarrowWidePattern(nextStart);\n  if (charOffset == -1) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  decodeRowResult.append((char)charOffset);\n  nextStart+=8;\n  if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 40
      },
      "nodeContext" : "do {\n  int charOffset=toNarrowWidePattern(nextStart);\n  if (charOffset == -1) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  decodeRowResult.append((char)charOffset);\n  nextStart+=8;\n  if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n    break;\n  }\n}\n while (nextStart < counterLength);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 100,
        "startColumnNumber" : 10,
        "endLineNumber" : 100,
        "endColumnNumber" : 38
      },
      "nodeContext" : "decodeRowResult.length() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 123,
      "startColumnNumber" : 24,
      "endLineNumber" : 123,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 123,
        "startColumnNumber" : 24,
        "endLineNumber" : 123,
        "endColumnNumber" : 48
      },
      "nodeContext" : "decodeRowResult.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < decodeRowResult.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < decodeRowResult.length(); i++) {\n  decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 123,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < decodeRowResult.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 124,
      "startColumnNumber" : 6,
      "endLineNumber" : 124,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 71
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 72
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 123,
        "startColumnNumber" : 55,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < decodeRowResult.length(); i++) {\n  decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 72
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 124,
      "startColumnNumber" : 44,
      "endLineNumber" : 124,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 124,
        "startColumnNumber" : 44,
        "endLineNumber" : 124,
        "endColumnNumber" : 69
      },
      "nodeContext" : "decodeRowResult.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 124,
        "startColumnNumber" : 35,
        "endLineNumber" : 124,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ALPHABET[decodeRowResult.charAt(i)]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 71
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 72
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 123,
        "startColumnNumber" : 55,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < decodeRowResult.length(); i++) {\n  decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 124,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 72
      },
      "nodeContext" : "decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 127,
      "startColumnNumber" : 21,
      "endLineNumber" : 127,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 127,
        "startColumnNumber" : 21,
        "endLineNumber" : 127,
        "endColumnNumber" : 46
      },
      "nodeContext" : "decodeRowResult.charAt(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 127,
        "startColumnNumber" : 9,
        "endLineNumber" : 127,
        "endColumnNumber" : 46
      },
      "nodeContext" : "startchar=decodeRowResult.charAt(0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char startchar=decodeRowResult.charAt(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 47
      },
      "nodeContext" : "char startchar=decodeRowResult.charAt(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 131,
      "startColumnNumber" : 19,
      "endLineNumber" : 131,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 131,
        "startColumnNumber" : 19,
        "endLineNumber" : 131,
        "endColumnNumber" : 71
      },
      "nodeContext" : "decodeRowResult.charAt(decodeRowResult.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 131,
        "startColumnNumber" : 9,
        "endLineNumber" : 131,
        "endColumnNumber" : 71
      },
      "nodeContext" : "endchar=decodeRowResult.charAt(decodeRowResult.length() - 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 72
      },
      "nodeContext" : "char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 72
      },
      "nodeContext" : "char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 131,
      "startColumnNumber" : 42,
      "endLineNumber" : 131,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 131,
        "startColumnNumber" : 42,
        "endLineNumber" : 131,
        "endColumnNumber" : 66
      },
      "nodeContext" : "decodeRowResult.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 131,
        "startColumnNumber" : 42,
        "endLineNumber" : 131,
        "endColumnNumber" : 70
      },
      "nodeContext" : "decodeRowResult.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 131,
        "startColumnNumber" : 19,
        "endLineNumber" : 131,
        "endColumnNumber" : 71
      },
      "nodeContext" : "decodeRowResult.charAt(decodeRowResult.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 131,
        "startColumnNumber" : 9,
        "endLineNumber" : 131,
        "endColumnNumber" : 71
      },
      "nodeContext" : "endchar=decodeRowResult.charAt(decodeRowResult.length() - 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 72
      },
      "nodeContext" : "char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 72
      },
      "nodeContext" : "char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 137,
      "startColumnNumber" : 8,
      "endLineNumber" : 137,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 32
      },
      "nodeContext" : "decodeRowResult.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "decodeRowResult.length() <= MIN_CHARACTER_LENGTH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "decodeRowResult.length() <= MIN_CHARACTER_LENGTH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 143,
      "startColumnNumber" : 6,
      "endLineNumber" : 143,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 64
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 65
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 142,
        "startColumnNumber" : 86,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 65
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 143,
      "startColumnNumber" : 35,
      "endLineNumber" : 143,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 143,
        "startColumnNumber" : 35,
        "endLineNumber" : 143,
        "endColumnNumber" : 59
      },
      "nodeContext" : "decodeRowResult.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 143,
        "startColumnNumber" : 35,
        "endLineNumber" : 143,
        "endColumnNumber" : 63
      },
      "nodeContext" : "decodeRowResult.length() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 64
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 65
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 142,
        "startColumnNumber" : 86,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 65
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 144,
      "startColumnNumber" : 6,
      "endLineNumber" : 144,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 144,
        "startColumnNumber" : 6,
        "endLineNumber" : 144,
        "endColumnNumber" : 37
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 144,
        "startColumnNumber" : 6,
        "endLineNumber" : 144,
        "endColumnNumber" : 38
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 142,
        "startColumnNumber" : 86,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n  decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n  decodeRowResult.deleteCharAt(0);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 144,
        "startColumnNumber" : 6,
        "endLineNumber" : 144,
        "endColumnNumber" : 38
      },
      "nodeContext" : "decodeRowResult.deleteCharAt(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "decodeRowResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 158,
      "startColumnNumber" : 8,
      "endLineNumber" : 158,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 34
      },
      "nodeContext" : "decodeRowResult.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 163,
        "endColumnNumber" : 30
      },
      "nodeContext" : "new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 157,
        "startColumnNumber" : 11,
        "endLineNumber" : 163,
        "endColumnNumber" : 30
      },
      "nodeContext" : "result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 81,
        "startColumnNumber" : 109,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3396,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result decodeRow(int rowNumber,BitArray row,Map<DecodeHintType,?> hints) throws NotFoundException {\n  Arrays.fill(counters,0);\n  setCounters(row);\n  int startOffset=findStartPattern();\n  int nextStart=startOffset;\n  decodeRowResult.setLength(0);\n  do {\n    int charOffset=toNarrowWidePattern(nextStart);\n    if (charOffset == -1) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    decodeRowResult.append((char)charOffset);\n    nextStart+=8;\n    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {\n      break;\n    }\n  }\n while (nextStart < counterLength);\n  int trailingWhitespace=counters[nextStart - 1];\n  int lastPatternSize=0;\n  for (int i=-8; i < -1; i++) {\n    lastPatternSize+=counters[nextStart + i];\n  }\n  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  validatePattern(startOffset);\n  for (int i=0; i < decodeRowResult.length(); i++) {\n    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);\n  }\n  char startchar=decodeRowResult.charAt(0);\n  if (!arrayContains(STARTEND_ENCODING,startchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);\n  if (!arrayContains(STARTEND_ENCODING,endchar)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {\n    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);\n    decodeRowResult.deleteCharAt(0);\n  }\n  int runningCount=0;\n  for (int i=0; i < startOffset; i++) {\n    runningCount+=counters[i];\n  }\n  float left=runningCount;\n  for (int i=startOffset; i < nextStart - 1; i++) {\n    runningCount+=counters[i];\n  }\n  float right=runningCount;\n  Result result=new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,rowNumber),new ResultPoint(right,rowNumber)},BarcodeFormat.CODABAR);\n  result.putMetadata(ResultMetadataType.SYMBOLOGY_IDENTIFIER,\"]F0\");\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 34
      },
      "nodeContext" : "decodeRowResult.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 88,
    "startColumnNumber" : 4,
    "endLineNumber" : 88,
    "endColumnNumber" : 19
  }, {
    "charLength" : 15,
    "startLineNumber" : 97,
    "startColumnNumber" : 6,
    "endLineNumber" : 97,
    "endColumnNumber" : 21
  }, {
    "charLength" : 15,
    "startLineNumber" : 100,
    "startColumnNumber" : 10,
    "endLineNumber" : 100,
    "endColumnNumber" : 25
  }, {
    "charLength" : 15,
    "startLineNumber" : 123,
    "startColumnNumber" : 24,
    "endLineNumber" : 123,
    "endColumnNumber" : 39
  }, {
    "charLength" : 15,
    "startLineNumber" : 124,
    "startColumnNumber" : 6,
    "endLineNumber" : 124,
    "endColumnNumber" : 21
  }, {
    "charLength" : 15,
    "startLineNumber" : 124,
    "startColumnNumber" : 44,
    "endLineNumber" : 124,
    "endColumnNumber" : 59
  }, {
    "charLength" : 15,
    "startLineNumber" : 127,
    "startColumnNumber" : 21,
    "endLineNumber" : 127,
    "endColumnNumber" : 36
  }, {
    "charLength" : 15,
    "startLineNumber" : 131,
    "startColumnNumber" : 19,
    "endLineNumber" : 131,
    "endColumnNumber" : 34
  }, {
    "charLength" : 15,
    "startLineNumber" : 131,
    "startColumnNumber" : 42,
    "endLineNumber" : 131,
    "endColumnNumber" : 57
  }, {
    "charLength" : 15,
    "startLineNumber" : 137,
    "startColumnNumber" : 8,
    "endLineNumber" : 137,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 143,
    "startColumnNumber" : 6,
    "endLineNumber" : 143,
    "endColumnNumber" : 21
  }, {
    "charLength" : 15,
    "startLineNumber" : 143,
    "startColumnNumber" : 35,
    "endLineNumber" : 143,
    "endColumnNumber" : 50
  }, {
    "charLength" : 15,
    "startLineNumber" : 144,
    "startColumnNumber" : 6,
    "endLineNumber" : 144,
    "endColumnNumber" : 21
  }, {
    "charLength" : 15,
    "startLineNumber" : 158,
    "startColumnNumber" : 8,
    "endLineNumber" : 158,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 0
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  } ]
}