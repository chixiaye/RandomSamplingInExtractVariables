{
  "id" : 326,
  "expression" : "(method == STORED)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/AlignedZipOutputStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(method == STORED)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 347,
      "startColumnNumber" : 20,
      "endLineNumber" : 347,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 347,
        "startColumnNumber" : 20,
        "endLineNumber" : 347,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 70
      },
      "nodeContext" : "flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 347,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 347,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 347,
    "startColumnNumber" : 20,
    "endLineNumber" : 347,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}