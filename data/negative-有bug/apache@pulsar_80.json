{
  "id" : 80,
  "expression" : "0",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/api/RetryTopicTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 70,
      "startColumnNumber" : 77,
      "endLineNumber" : 70,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 70,
        "startColumnNumber" : 39,
        "endLineNumber" : 70,
        "endColumnNumber" : 79
      },
      "nodeContext" : "newPulsarClient(lookupUrl.toString(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 70,
        "startColumnNumber" : 21,
        "endLineNumber" : 70,
        "endColumnNumber" : 79
      },
      "nodeContext" : "newPulsarClient=newPulsarClient(lookupUrl.toString(),0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 80
      },
      "nodeContext" : "@Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRetryTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 344,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 70,
        "startColumnNumber" : 21,
        "endLineNumber" : 70,
        "endColumnNumber" : 79
      },
      "nodeContext" : "newPulsarClient=newPulsarClient(lookupUrl.toString(),0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 21,
      "endLineNumber" : 81,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 81,
        "startColumnNumber" : 17,
        "endLineNumber" : 81,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 81,
        "startColumnNumber" : 13,
        "endLineNumber" : 81,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < sendMessages; i++) {\n  producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRetryTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 344,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 81,
        "startColumnNumber" : 13,
        "endLineNumber" : 81,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 28,
      "endLineNumber" : 87,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 29
      },
      "nodeContext" : "totalReceived=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int totalReceived=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRetryTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 344,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int totalReceived=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 95,
      "startColumnNumber" : 32,
      "endLineNumber" : 95,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "totalInDeadLetter=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int totalInDeadLetter=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRetryTopic() throws Exception {\n  final String topic=\"persistent://my-property/my-ns/retry-topic\";\n  final int maxRedeliveryCount=2;\n  final int sendMessages=100;\n  Consumer<byte[]> consumer=pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).enableRetry(true).deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build()).receiverQueueSize(100).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  @Cleanup PulsarClient newPulsarClient=newPulsarClient(lookupUrl.toString(),0);\n  Consumer<byte[]> deadLetterConsumer=newPulsarClient.newConsumer(Schema.BYTES).topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\").subscriptionName(\"my-subscription\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Producer<byte[]> producer=pulsarClient.newProducer(Schema.BYTES).topic(topic).create();\n  for (int i=0; i < sendMessages; i++) {\n    producer.send(String.format(\"Hello Pulsar [%d]\",i).getBytes());\n  }\n  producer.close();\n  int totalReceived=0;\n  do {\n    Message<byte[]> message=consumer.receive();\n    log.info(\"consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    consumer.reconsumeLater(message,1,TimeUnit.SECONDS);\n    totalReceived++;\n  }\n while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n  int totalInDeadLetter=0;\n  do {\n    Message message=deadLetterConsumer.receive();\n    log.info(\"dead letter consumer received message : {} {}\",message.getMessageId(),new String(message.getData()));\n    deadLetterConsumer.acknowledge(message);\n    totalInDeadLetter++;\n  }\n while (totalInDeadLetter < sendMessages);\n  deadLetterConsumer.close();\n  consumer.close();\n  Consumer<byte[]> checkConsumer=this.pulsarClient.newConsumer(Schema.BYTES).topic(topic).subscriptionName(\"my-subscription\").subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<byte[]> checkMessage=checkConsumer.receive(3,TimeUnit.SECONDS);\n  if (checkMessage != null) {\n    log.info(\"check consumer received message : {} {}\",checkMessage.getMessageId(),new String(checkMessage.getData()));\n  }\n  assertNull(checkMessage);\n  checkConsumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 344,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int totalInDeadLetter=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 70,
    "startColumnNumber" : 77,
    "endLineNumber" : 70,
    "endColumnNumber" : 78
  }, {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 21,
    "endLineNumber" : 81,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 28,
    "endLineNumber" : 87,
    "endColumnNumber" : 29
  }, {
    "charLength" : 1,
    "startLineNumber" : 95,
    "startColumnNumber" : 32,
    "endLineNumber" : 95,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}