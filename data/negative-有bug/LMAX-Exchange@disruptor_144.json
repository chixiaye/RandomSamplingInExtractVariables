{
  "id" : 144,
  "expression" : "size",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/main/java/com/lmax/disruptor/collections/Histogram.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "size",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 190,
      "startColumnNumber" : 55,
      "endLineNumber" : 190,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 190,
        "startColumnNumber" : 51,
        "endLineNumber" : 190,
        "endColumnNumber" : 59
      },
      "nodeContext" : "i < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, size=upperBounds.length; i < size; i++) {\n  if (upperBounds[i] != histogram.upperBounds[i]) {\n    throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (upperBounds.length != histogram.upperBounds.length) {\n    throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n  }\n  for (int i=0, size=upperBounds.length; i < size; i++) {\n    if (upperBounds[i] != histogram.upperBounds[i]) {\n      throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n    }\n  }\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]+=histogram.counts[i];\n  }\n  trackRange(histogram.minValue);\n  trackRange(histogram.maxValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Add observations from another Histogram into this one.<p/> Histograms must have the same intervals.\n * @param histogram from which to add the observation counts.\n * @throws IllegalArgumentException if interval count or values do not match exactly\n */\npublic void addObservations(final Histogram histogram){\n  if (upperBounds.length != histogram.upperBounds.length) {\n    throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n  }\n  for (int i=0, size=upperBounds.length; i < size; i++) {\n    if (upperBounds[i] != histogram.upperBounds[i]) {\n      throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n    }\n  }\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]+=histogram.counts[i];\n  }\n  trackRange(histogram.minValue);\n  trackRange(histogram.maxValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 190,
        "startColumnNumber" : 51,
        "endLineNumber" : 190,
        "endColumnNumber" : 59
      },
      "nodeContext" : "i < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "size",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 199,
      "startColumnNumber" : 50,
      "endLineNumber" : 199,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 199,
        "startColumnNumber" : 46,
        "endLineNumber" : 199,
        "endColumnNumber" : 54
      },
      "nodeContext" : "i < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, size=counts.length; i < size; i++) {\n  counts[i]+=histogram.counts[i];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 183,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (upperBounds.length != histogram.upperBounds.length) {\n    throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n  }\n  for (int i=0, size=upperBounds.length; i < size; i++) {\n    if (upperBounds[i] != histogram.upperBounds[i]) {\n      throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n    }\n  }\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]+=histogram.counts[i];\n  }\n  trackRange(histogram.minValue);\n  trackRange(histogram.maxValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Add observations from another Histogram into this one.<p/> Histograms must have the same intervals.\n * @param histogram from which to add the observation counts.\n * @throws IllegalArgumentException if interval count or values do not match exactly\n */\npublic void addObservations(final Histogram histogram){\n  if (upperBounds.length != histogram.upperBounds.length) {\n    throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n  }\n  for (int i=0, size=upperBounds.length; i < size; i++) {\n    if (upperBounds[i] != histogram.upperBounds[i]) {\n      throw new IllegalArgumentException(\"Histograms must have matching intervals\");\n    }\n  }\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]+=histogram.counts[i];\n  }\n  trackRange(histogram.minValue);\n  trackRange(histogram.maxValue);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 99,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 199,
        "startColumnNumber" : 46,
        "endLineNumber" : 199,
        "endColumnNumber" : 54
      },
      "nodeContext" : "i < size",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 190,
    "startColumnNumber" : 55,
    "endLineNumber" : 190,
    "endColumnNumber" : 59
  }, {
    "charLength" : 4,
    "startLineNumber" : 199,
    "startColumnNumber" : 50,
    "endLineNumber" : 199,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}