{
  "id" : 434,
  "expression" : "codeVerifier",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "codeVerifier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 402,
      "startColumnNumber" : 55,
      "endLineNumber" : 402,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 143
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 144
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 401,
        "startColumnNumber" : 75,
        "endLineNumber" : 403,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 401,
        "startColumnNumber" : 8,
        "endLineNumber" : 406,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n  PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n else {\n  PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6586,
        "startLineNumber" : 305,
        "startColumnNumber" : 34,
        "endLineNumber" : 433,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String code=formParams.getFirst(OAuth2Constants.CODE);\n  if (code == null) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_REQUEST,\"Missing parameter: \" + OAuth2Constants.CODE,Response.Status.BAD_REQUEST);\n  }\n  OAuth2CodeParser.ParseResult parseResult=OAuth2CodeParser.parseCode(session,code,realm,event);\n  if (parseResult.isIllegalCode()) {\n    AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n    if (clientSession != null) {\n      clientSession.detachFromUserSession();\n    }\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code not valid\",Response.Status.BAD_REQUEST);\n  }\n  AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n  if (parseResult.isExpiredCode()) {\n    event.error(Errors.EXPIRED_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code is expired\",Response.Status.BAD_REQUEST);\n  }\n  UserSessionModel userSession=null;\n  if (clientSession != null) {\n    userSession=clientSession.getUserSession();\n  }\n  if (userSession == null) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User session not found\",Response.Status.BAD_REQUEST);\n  }\n  UserModel user=userSession.getUser();\n  if (user == null) {\n    event.error(Errors.USER_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User not found\",Response.Status.BAD_REQUEST);\n  }\n  event.user(userSession.getUser());\n  if (!user.isEnabled()) {\n    event.error(Errors.USER_DISABLED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User disabled\",Response.Status.BAD_REQUEST);\n  }\n  OAuth2Code codeData=parseResult.getCodeData();\n  String redirectUri=codeData.getRedirectUriParam();\n  String redirectUriParam=formParams.getFirst(OAuth2Constants.REDIRECT_URI);\n  if (redirectUriParam != null && redirectUriParam.contains(\"session_state=\") && !redirectUri.contains(\"session_state=\")) {\n    redirectUriParam=KeycloakUriBuilder.fromUri(redirectUriParam).replaceQueryParam(OAuth2Constants.SESSION_STATE,null).build().toString();\n  }\n  if (redirectUri != null && !redirectUri.equals(redirectUriParam)) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Incorrect redirect_uri\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Auth error\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.isStandardFlowEnabled()) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Client not allowed to exchange code\",Response.Status.BAD_REQUEST);\n  }\n  if (!AuthenticationManager.isSessionValid(realm,userSession)) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Session not active\",Response.Status.BAD_REQUEST);\n  }\n  String codeVerifier=formParams.getFirst(OAuth2Constants.CODE_VERIFIER);\n  String codeChallenge=codeData.getCodeChallenge();\n  String codeChallengeMethod=codeData.getCodeChallengeMethod();\n  String authUserId=user.getId();\n  String authUsername=user.getUsername();\n  if (authUserId == null) {\n    authUserId=\"unknown\";\n  }\n  if (authUsername == null) {\n    authUsername=\"unknown\";\n  }\n  if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n    PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n else {\n    PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n  try {\n    session.clientPolicy().triggerOnEvent(new TokenRequestContext(formParams,parseResult));\n  }\n catch (  ClientPolicyException cpe) {\n    event.error(cpe.getError());\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,cpe.getErrorDetail(),Response.Status.BAD_REQUEST);\n  }\n  updateClientSession(clientSession);\n  updateUserSessionFromClientAuth(userSession);\n  String scopeParam=codeData.getScope();\n  Supplier<Stream<ClientScopeModel>> clientScopesSupplier=() -> TokenManager.getRequestedClientScopes(scopeParam,client);\n  if (!TokenManager.verifyConsentStillAvailable(session,user,client,clientScopesSupplier.get())) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_SCOPE,\"Client no longer has requested consent from user\",Response.Status.BAD_REQUEST);\n  }\n  ClientSessionContext clientSessionCtx=DefaultClientSessionContext.fromClientSessionAndScopeParameter(clientSession,scopeParam,session);\n  clientSessionCtx.setAttribute(OIDCLoginProtocol.NONCE_PARAM,codeData.getNonce());\n  return createTokenResponse(user,userSession,clientSessionCtx,scopeParam,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6616,
        "startLineNumber" : 305,
        "startColumnNumber" : 4,
        "endLineNumber" : 433,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Response codeToToken(){\n  String code=formParams.getFirst(OAuth2Constants.CODE);\n  if (code == null) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_REQUEST,\"Missing parameter: \" + OAuth2Constants.CODE,Response.Status.BAD_REQUEST);\n  }\n  OAuth2CodeParser.ParseResult parseResult=OAuth2CodeParser.parseCode(session,code,realm,event);\n  if (parseResult.isIllegalCode()) {\n    AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n    if (clientSession != null) {\n      clientSession.detachFromUserSession();\n    }\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code not valid\",Response.Status.BAD_REQUEST);\n  }\n  AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n  if (parseResult.isExpiredCode()) {\n    event.error(Errors.EXPIRED_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code is expired\",Response.Status.BAD_REQUEST);\n  }\n  UserSessionModel userSession=null;\n  if (clientSession != null) {\n    userSession=clientSession.getUserSession();\n  }\n  if (userSession == null) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User session not found\",Response.Status.BAD_REQUEST);\n  }\n  UserModel user=userSession.getUser();\n  if (user == null) {\n    event.error(Errors.USER_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User not found\",Response.Status.BAD_REQUEST);\n  }\n  event.user(userSession.getUser());\n  if (!user.isEnabled()) {\n    event.error(Errors.USER_DISABLED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User disabled\",Response.Status.BAD_REQUEST);\n  }\n  OAuth2Code codeData=parseResult.getCodeData();\n  String redirectUri=codeData.getRedirectUriParam();\n  String redirectUriParam=formParams.getFirst(OAuth2Constants.REDIRECT_URI);\n  if (redirectUriParam != null && redirectUriParam.contains(\"session_state=\") && !redirectUri.contains(\"session_state=\")) {\n    redirectUriParam=KeycloakUriBuilder.fromUri(redirectUriParam).replaceQueryParam(OAuth2Constants.SESSION_STATE,null).build().toString();\n  }\n  if (redirectUri != null && !redirectUri.equals(redirectUriParam)) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Incorrect redirect_uri\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Auth error\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.isStandardFlowEnabled()) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Client not allowed to exchange code\",Response.Status.BAD_REQUEST);\n  }\n  if (!AuthenticationManager.isSessionValid(realm,userSession)) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Session not active\",Response.Status.BAD_REQUEST);\n  }\n  String codeVerifier=formParams.getFirst(OAuth2Constants.CODE_VERIFIER);\n  String codeChallenge=codeData.getCodeChallenge();\n  String codeChallengeMethod=codeData.getCodeChallengeMethod();\n  String authUserId=user.getId();\n  String authUsername=user.getUsername();\n  if (authUserId == null) {\n    authUserId=\"unknown\";\n  }\n  if (authUsername == null) {\n    authUsername=\"unknown\";\n  }\n  if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n    PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n else {\n    PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n  try {\n    session.clientPolicy().triggerOnEvent(new TokenRequestContext(formParams,parseResult));\n  }\n catch (  ClientPolicyException cpe) {\n    event.error(cpe.getError());\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,cpe.getErrorDetail(),Response.Status.BAD_REQUEST);\n  }\n  updateClientSession(clientSession);\n  updateUserSessionFromClientAuth(userSession);\n  String scopeParam=codeData.getScope();\n  Supplier<Stream<ClientScopeModel>> clientScopesSupplier=() -> TokenManager.getRequestedClientScopes(scopeParam,client);\n  if (!TokenManager.verifyConsentStillAvailable(session,user,client,clientScopesSupplier.get())) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_SCOPE,\"Client no longer has requested consent from user\",Response.Status.BAD_REQUEST);\n  }\n  ClientSessionContext clientSessionCtx=DefaultClientSessionContext.fromClientSessionAndScopeParameter(clientSession,scopeParam,session);\n  clientSessionCtx.setAttribute(OIDCLoginProtocol.NONCE_PARAM,codeData.getNonce());\n  return createTokenResponse(user,userSession,clientSessionCtx,scopeParam,true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 662,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 402,
        "startColumnNumber" : 12,
        "endLineNumber" : 402,
        "endColumnNumber" : 144
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "codeVerifier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 405,
      "startColumnNumber" : 58,
      "endLineNumber" : 405,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 405,
        "startColumnNumber" : 12,
        "endLineNumber" : 405,
        "endColumnNumber" : 146
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 405,
        "startColumnNumber" : 12,
        "endLineNumber" : 405,
        "endColumnNumber" : 147
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 406,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 401,
        "startColumnNumber" : 8,
        "endLineNumber" : 406,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n  PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n else {\n  PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6586,
        "startLineNumber" : 305,
        "startColumnNumber" : 34,
        "endLineNumber" : 433,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String code=formParams.getFirst(OAuth2Constants.CODE);\n  if (code == null) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_REQUEST,\"Missing parameter: \" + OAuth2Constants.CODE,Response.Status.BAD_REQUEST);\n  }\n  OAuth2CodeParser.ParseResult parseResult=OAuth2CodeParser.parseCode(session,code,realm,event);\n  if (parseResult.isIllegalCode()) {\n    AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n    if (clientSession != null) {\n      clientSession.detachFromUserSession();\n    }\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code not valid\",Response.Status.BAD_REQUEST);\n  }\n  AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n  if (parseResult.isExpiredCode()) {\n    event.error(Errors.EXPIRED_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code is expired\",Response.Status.BAD_REQUEST);\n  }\n  UserSessionModel userSession=null;\n  if (clientSession != null) {\n    userSession=clientSession.getUserSession();\n  }\n  if (userSession == null) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User session not found\",Response.Status.BAD_REQUEST);\n  }\n  UserModel user=userSession.getUser();\n  if (user == null) {\n    event.error(Errors.USER_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User not found\",Response.Status.BAD_REQUEST);\n  }\n  event.user(userSession.getUser());\n  if (!user.isEnabled()) {\n    event.error(Errors.USER_DISABLED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User disabled\",Response.Status.BAD_REQUEST);\n  }\n  OAuth2Code codeData=parseResult.getCodeData();\n  String redirectUri=codeData.getRedirectUriParam();\n  String redirectUriParam=formParams.getFirst(OAuth2Constants.REDIRECT_URI);\n  if (redirectUriParam != null && redirectUriParam.contains(\"session_state=\") && !redirectUri.contains(\"session_state=\")) {\n    redirectUriParam=KeycloakUriBuilder.fromUri(redirectUriParam).replaceQueryParam(OAuth2Constants.SESSION_STATE,null).build().toString();\n  }\n  if (redirectUri != null && !redirectUri.equals(redirectUriParam)) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Incorrect redirect_uri\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Auth error\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.isStandardFlowEnabled()) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Client not allowed to exchange code\",Response.Status.BAD_REQUEST);\n  }\n  if (!AuthenticationManager.isSessionValid(realm,userSession)) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Session not active\",Response.Status.BAD_REQUEST);\n  }\n  String codeVerifier=formParams.getFirst(OAuth2Constants.CODE_VERIFIER);\n  String codeChallenge=codeData.getCodeChallenge();\n  String codeChallengeMethod=codeData.getCodeChallengeMethod();\n  String authUserId=user.getId();\n  String authUsername=user.getUsername();\n  if (authUserId == null) {\n    authUserId=\"unknown\";\n  }\n  if (authUsername == null) {\n    authUsername=\"unknown\";\n  }\n  if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n    PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n else {\n    PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n  try {\n    session.clientPolicy().triggerOnEvent(new TokenRequestContext(formParams,parseResult));\n  }\n catch (  ClientPolicyException cpe) {\n    event.error(cpe.getError());\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,cpe.getErrorDetail(),Response.Status.BAD_REQUEST);\n  }\n  updateClientSession(clientSession);\n  updateUserSessionFromClientAuth(userSession);\n  String scopeParam=codeData.getScope();\n  Supplier<Stream<ClientScopeModel>> clientScopesSupplier=() -> TokenManager.getRequestedClientScopes(scopeParam,client);\n  if (!TokenManager.verifyConsentStillAvailable(session,user,client,clientScopesSupplier.get())) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_SCOPE,\"Client no longer has requested consent from user\",Response.Status.BAD_REQUEST);\n  }\n  ClientSessionContext clientSessionCtx=DefaultClientSessionContext.fromClientSessionAndScopeParameter(clientSession,scopeParam,session);\n  clientSessionCtx.setAttribute(OIDCLoginProtocol.NONCE_PARAM,codeData.getNonce());\n  return createTokenResponse(user,userSession,clientSessionCtx,scopeParam,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6616,
        "startLineNumber" : 305,
        "startColumnNumber" : 4,
        "endLineNumber" : 433,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Response codeToToken(){\n  String code=formParams.getFirst(OAuth2Constants.CODE);\n  if (code == null) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_REQUEST,\"Missing parameter: \" + OAuth2Constants.CODE,Response.Status.BAD_REQUEST);\n  }\n  OAuth2CodeParser.ParseResult parseResult=OAuth2CodeParser.parseCode(session,code,realm,event);\n  if (parseResult.isIllegalCode()) {\n    AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n    if (clientSession != null) {\n      clientSession.detachFromUserSession();\n    }\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code not valid\",Response.Status.BAD_REQUEST);\n  }\n  AuthenticatedClientSessionModel clientSession=parseResult.getClientSession();\n  if (parseResult.isExpiredCode()) {\n    event.error(Errors.EXPIRED_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Code is expired\",Response.Status.BAD_REQUEST);\n  }\n  UserSessionModel userSession=null;\n  if (clientSession != null) {\n    userSession=clientSession.getUserSession();\n  }\n  if (userSession == null) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User session not found\",Response.Status.BAD_REQUEST);\n  }\n  UserModel user=userSession.getUser();\n  if (user == null) {\n    event.error(Errors.USER_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User not found\",Response.Status.BAD_REQUEST);\n  }\n  event.user(userSession.getUser());\n  if (!user.isEnabled()) {\n    event.error(Errors.USER_DISABLED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"User disabled\",Response.Status.BAD_REQUEST);\n  }\n  OAuth2Code codeData=parseResult.getCodeData();\n  String redirectUri=codeData.getRedirectUriParam();\n  String redirectUriParam=formParams.getFirst(OAuth2Constants.REDIRECT_URI);\n  if (redirectUriParam != null && redirectUriParam.contains(\"session_state=\") && !redirectUri.contains(\"session_state=\")) {\n    redirectUriParam=KeycloakUriBuilder.fromUri(redirectUriParam).replaceQueryParam(OAuth2Constants.SESSION_STATE,null).build().toString();\n  }\n  if (redirectUri != null && !redirectUri.equals(redirectUriParam)) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Incorrect redirect_uri\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {\n    event.error(Errors.INVALID_CODE);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Auth error\",Response.Status.BAD_REQUEST);\n  }\n  if (!client.isStandardFlowEnabled()) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Client not allowed to exchange code\",Response.Status.BAD_REQUEST);\n  }\n  if (!AuthenticationManager.isSessionValid(realm,userSession)) {\n    event.error(Errors.USER_SESSION_NOT_FOUND);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,\"Session not active\",Response.Status.BAD_REQUEST);\n  }\n  String codeVerifier=formParams.getFirst(OAuth2Constants.CODE_VERIFIER);\n  String codeChallenge=codeData.getCodeChallenge();\n  String codeChallengeMethod=codeData.getCodeChallengeMethod();\n  String authUserId=user.getId();\n  String authUsername=user.getUsername();\n  if (authUserId == null) {\n    authUserId=\"unknown\";\n  }\n  if (authUsername == null) {\n    authUsername=\"unknown\";\n  }\n  if (codeChallengeMethod != null && !codeChallengeMethod.isEmpty()) {\n    PkceUtils.checkParamsForPkceEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n else {\n    PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n  }\n  try {\n    session.clientPolicy().triggerOnEvent(new TokenRequestContext(formParams,parseResult));\n  }\n catch (  ClientPolicyException cpe) {\n    event.error(cpe.getError());\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_GRANT,cpe.getErrorDetail(),Response.Status.BAD_REQUEST);\n  }\n  updateClientSession(clientSession);\n  updateUserSessionFromClientAuth(userSession);\n  String scopeParam=codeData.getScope();\n  Supplier<Stream<ClientScopeModel>> clientScopesSupplier=() -> TokenManager.getRequestedClientScopes(scopeParam,client);\n  if (!TokenManager.verifyConsentStillAvailable(session,user,client,clientScopesSupplier.get())) {\n    event.error(Errors.NOT_ALLOWED);\n    throw new CorsErrorResponseException(cors,OAuthErrorException.INVALID_SCOPE,\"Client no longer has requested consent from user\",Response.Status.BAD_REQUEST);\n  }\n  ClientSessionContext clientSessionCtx=DefaultClientSessionContext.fromClientSessionAndScopeParameter(clientSession,scopeParam,session);\n  clientSessionCtx.setAttribute(OIDCLoginProtocol.NONCE_PARAM,codeData.getNonce());\n  return createTokenResponse(user,userSession,clientSessionCtx,scopeParam,true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 662,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 405,
        "startColumnNumber" : 12,
        "endLineNumber" : 405,
        "endColumnNumber" : 147
      },
      "nodeContext" : "PkceUtils.checkParamsForPkceNotEnforcedClient(codeVerifier,codeChallenge,codeChallengeMethod,authUserId,authUsername,event,cors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 402,
    "startColumnNumber" : 55,
    "endLineNumber" : 402,
    "endColumnNumber" : 67
  }, {
    "charLength" : 12,
    "startLineNumber" : 405,
    "startColumnNumber" : 58,
    "endLineNumber" : 405,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}