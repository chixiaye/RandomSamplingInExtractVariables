{
  "id" : 64,
  "expression" : "val instanceof BigDecimal",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/json/Json.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val instanceof BigDecimal",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 87,
      "startColumnNumber" : 42,
      "endLineNumber" : 87,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 87,
        "startColumnNumber" : 41,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(val instanceof BigDecimal)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 87,
        "startColumnNumber" : 40,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "!(val instanceof BigDecimal)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 177,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (val == null) {\n}\n else if (val instanceof Number && !(val instanceof BigDecimal)) {\n}\n else if (val instanceof Boolean) {\n}\n else if (val instanceof String) {\n}\n else if (val instanceof Character) {\n}\n else if (val instanceof CharSequence) {\n  val=val.toString();\n}\n else if (val instanceof JsonObject) {\n  if (copy) {\n    val=((JsonObject)val).copy();\n  }\n}\n else if (val instanceof JsonArray) {\n  if (copy) {\n    val=((JsonArray)val).copy();\n  }\n}\n else if (val instanceof Map) {\n  if (copy) {\n    val=(new JsonObject((Map)val)).copy();\n  }\n else {\n    val=new JsonObject((Map)val);\n  }\n}\n else if (val instanceof List) {\n  if (copy) {\n    val=(new JsonArray((List)val)).copy();\n  }\n else {\n    val=new JsonArray((List)val);\n  }\n}\n else if (val instanceof byte[]) {\n  val=Base64.getEncoder().encodeToString((byte[])val);\n}\n else {\n  throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 84,
        "startColumnNumber" : 55,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") static Object checkAndCopy(Object val,boolean copy){\n  if (val == null) {\n  }\n else   if (val instanceof Number && !(val instanceof BigDecimal)) {\n  }\n else   if (val instanceof Boolean) {\n  }\n else   if (val instanceof String) {\n  }\n else   if (val instanceof Character) {\n  }\n else   if (val instanceof CharSequence) {\n    val=val.toString();\n  }\n else   if (val instanceof JsonObject) {\n    if (copy) {\n      val=((JsonObject)val).copy();\n    }\n  }\n else   if (val instanceof JsonArray) {\n    if (copy) {\n      val=((JsonArray)val).copy();\n    }\n  }\n else   if (val instanceof Map) {\n    if (copy) {\n      val=(new JsonObject((Map)val)).copy();\n    }\n else {\n      val=new JsonObject((Map)val);\n    }\n  }\n else   if (val instanceof List) {\n    if (copy) {\n      val=(new JsonArray((List)val)).copy();\n    }\n else {\n      val=new JsonArray((List)val);\n    }\n  }\n else   if (val instanceof byte[]) {\n    val=Base64.getEncoder().encodeToString((byte[])val);\n  }\n else {\n    throw new IllegalStateException(\"Illegal type in JsonObject: \" + val.getClass());\n  }\n  return val;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 68
      },
      "nodeContext" : "val instanceof Number && !(val instanceof BigDecimal)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 87,
    "startColumnNumber" : 42,
    "endLineNumber" : 87,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}