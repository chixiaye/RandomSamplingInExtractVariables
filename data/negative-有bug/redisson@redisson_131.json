{
  "id" : 131,
  "expression" : "entry.tryAcquire()",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/pubsub/PublishSubscribeService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.tryAcquire()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 305,
      "startColumnNumber" : 35,
      "endLineNumber" : 305,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 305,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 53
      },
      "nodeContext" : "remainFreeAmount=entry.tryAcquire()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 305,
        "startColumnNumber" : 12,
        "endLineNumber" : 305,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int remainFreeAmount=entry.tryAcquire();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 296,
        "startColumnNumber" : 44,
        "endLineNumber" : 349,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ex != null) {\n    freePubSubLock.release();\n    lock.release();\n    promise.tryFailure(ex);\n    return;\n  }\n  PubSubConnectionEntry entry=new PubSubConnectionEntry(conn,config.getSubscriptionsPerConnection());\n  int remainFreeAmount=entry.tryAcquire();\n  PubSubConnectionEntry oldEntry=name2PubSubConnection.putIfAbsent(channelName,entry);\n  if (oldEntry != null) {\n    releaseSubscribeConnection(slot,entry);\n    freePubSubLock.release();\n    addListeners(channelName,promise,type,lock,oldEntry,listeners);\n    return;\n  }\n  if (remainFreeAmount > 0) {\n    addFreeConnectionEntry(channelName,entry);\n  }\n  freePubSubLock.release();\n  RFuture<Void> subscribeFuture=addListeners(channelName,promise,type,lock,entry,listeners);\n  ChannelFuture future;\n  if (PubSubType.PSUBSCRIBE == type) {\n    future=entry.psubscribe(codec,channelName);\n  }\n else {\n    future=entry.subscribe(codec,channelName);\n  }\n  future.addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        if (!promise.isDone()) {\n          subscribeFuture.cancel(false);\n        }\n        return;\n      }\n      connectionManager.newTimeout(new TimerTask(){\n        @Override public void run(        Timeout timeout) throws Exception {\n          subscribeFuture.cancel(false);\n        }\n      }\n,config.getTimeout(),TimeUnit.MILLISECONDS);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2022,
        "startLineNumber" : 296,
        "startColumnNumber" : 30,
        "endLineNumber" : 349,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(conn,ex) -> {\n  if (ex != null) {\n    freePubSubLock.release();\n    lock.release();\n    promise.tryFailure(ex);\n    return;\n  }\n  PubSubConnectionEntry entry=new PubSubConnectionEntry(conn,config.getSubscriptionsPerConnection());\n  int remainFreeAmount=entry.tryAcquire();\n  PubSubConnectionEntry oldEntry=name2PubSubConnection.putIfAbsent(channelName,entry);\n  if (oldEntry != null) {\n    releaseSubscribeConnection(slot,entry);\n    freePubSubLock.release();\n    addListeners(channelName,promise,type,lock,oldEntry,listeners);\n    return;\n  }\n  if (remainFreeAmount > 0) {\n    addFreeConnectionEntry(channelName,entry);\n  }\n  freePubSubLock.release();\n  RFuture<Void> subscribeFuture=addListeners(channelName,promise,type,lock,entry,listeners);\n  ChannelFuture future;\n  if (PubSubType.PSUBSCRIBE == type) {\n    future=entry.psubscribe(codec,channelName);\n  }\n else {\n    future=entry.subscribe(codec,channelName);\n  }\n  future.addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        if (!promise.isDone()) {\n          subscribeFuture.cancel(false);\n        }\n        return;\n      }\n      connectionManager.newTimeout(new TimerTask(){\n        @Override public void run(        Timeout timeout) throws Exception {\n          subscribeFuture.cancel(false);\n        }\n      }\n,config.getTimeout(),TimeUnit.MILLISECONDS);\n    }\n  }\n);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 208,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 305,
        "startColumnNumber" : 12,
        "endLineNumber" : 305,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int remainFreeAmount=entry.tryAcquire();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 305,
    "startColumnNumber" : 35,
    "endLineNumber" : 305,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}