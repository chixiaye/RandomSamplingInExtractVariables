{
  "id" : 265,
  "expression" : "calendar.get(Calendar.ZONE_OFFSET)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/android/src/com/google/zxing/client/android/result/CalendarResultHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calendar.get(Calendar.ZONE_OFFSET)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 117,
      "startColumnNumber" : 24,
      "endLineNumber" : 117,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 58
      },
      "nodeContext" : "milliseconds+=calendar.get(Calendar.ZONE_OFFSET)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 59
      },
      "nodeContext" : "milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 114,
        "startColumnNumber" : 57,
        "endLineNumber" : 122,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Calendar calendar=new GregorianCalendar();\n  milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n  calendar.setTime(new Date(milliseconds));\n  milliseconds+=calendar.get(Calendar.DST_OFFSET);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 479,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 122,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (when.length() == 16 && when.charAt(15) == 'Z') {\n  Calendar calendar=new GregorianCalendar();\n  milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n  calendar.setTime(new Date(milliseconds));\n  milliseconds+=calendar.get(Calendar.DST_OFFSET);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 107,
        "startColumnNumber" : 11,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Date date;\nsynchronized (DATE_TIME_FORMAT) {\n    date=DATE_TIME_FORMAT.parse(when.substring(0,15),new ParsePosition(0));\n  }\n  long milliseconds=date.getTime();\n  if (when.length() == 16 && when.charAt(15) == 'Z') {\n    Calendar calendar=new GregorianCalendar();\n    milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n    calendar.setTime(new Date(milliseconds));\n    milliseconds+=calendar.get(Calendar.DST_OFFSET);\n  }\n  ParsedResult.maybeAppend(DateFormat.getDateTimeInstance().format(milliseconds),result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (when.length() == 8) {\n  Date date;\nsynchronized (DATE_FORMAT) {\n    date=DATE_FORMAT.parse(when,new ParsePosition(0));\n  }\n  if (end && !sameStartEnd) {\n    date=new Date(date.getTime() - 24 * 60 * 60* 1000);\n  }\n  ParsedResult.maybeAppend(DateFormat.getDateInstance().format(date.getTime()),result);\n}\n else {\n  Date date;\nsynchronized (DATE_TIME_FORMAT) {\n    date=DATE_TIME_FORMAT.parse(when.substring(0,15),new ParsePosition(0));\n  }\n  long milliseconds=date.getTime();\n  if (when.length() == 16 && when.charAt(15) == 'Z') {\n    Calendar calendar=new GregorianCalendar();\n    milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n    calendar.setTime(new Date(milliseconds));\n    milliseconds+=calendar.get(Calendar.DST_OFFSET);\n  }\n  ParsedResult.maybeAppend(DateFormat.getDateTimeInstance().format(milliseconds),result);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1518,
        "startLineNumber" : 93,
        "startColumnNumber" : 103,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (when.length() == 8) {\n    Date date;\nsynchronized (DATE_FORMAT) {\n      date=DATE_FORMAT.parse(when,new ParsePosition(0));\n    }\n    if (end && !sameStartEnd) {\n      date=new Date(date.getTime() - 24 * 60 * 60* 1000);\n    }\n    ParsedResult.maybeAppend(DateFormat.getDateInstance().format(date.getTime()),result);\n  }\n else {\n    Date date;\nsynchronized (DATE_TIME_FORMAT) {\n      date=DATE_TIME_FORMAT.parse(when.substring(0,15),new ParsePosition(0));\n    }\n    long milliseconds=date.getTime();\n    if (when.length() == 16 && when.charAt(15) == 'Z') {\n      Calendar calendar=new GregorianCalendar();\n      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n      calendar.setTime(new Date(milliseconds));\n      milliseconds+=calendar.get(Calendar.DST_OFFSET);\n    }\n    ParsedResult.maybeAppend(DateFormat.getDateTimeInstance().format(milliseconds),result);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1619,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void appendTime(String when,StringBuilder result,boolean end,boolean sameStartEnd){\n  if (when.length() == 8) {\n    Date date;\nsynchronized (DATE_FORMAT) {\n      date=DATE_FORMAT.parse(when,new ParsePosition(0));\n    }\n    if (end && !sameStartEnd) {\n      date=new Date(date.getTime() - 24 * 60 * 60* 1000);\n    }\n    ParsedResult.maybeAppend(DateFormat.getDateInstance().format(date.getTime()),result);\n  }\n else {\n    Date date;\nsynchronized (DATE_TIME_FORMAT) {\n      date=DATE_TIME_FORMAT.parse(when.substring(0,15),new ParsePosition(0));\n    }\n    long milliseconds=date.getTime();\n    if (when.length() == 16 && when.charAt(15) == 'Z') {\n      Calendar calendar=new GregorianCalendar();\n      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n      calendar.setTime(new Date(milliseconds));\n      milliseconds+=calendar.get(Calendar.DST_OFFSET);\n    }\n    ParsedResult.maybeAppend(DateFormat.getDateTimeInstance().format(milliseconds),result);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 59
      },
      "nodeContext" : "milliseconds+=calendar.get(Calendar.ZONE_OFFSET);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 117,
    "startColumnNumber" : 24,
    "endLineNumber" : 117,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}