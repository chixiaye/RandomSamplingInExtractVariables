{
  "id" : 245,
  "expression" : "pushConsumer.getConsumeTimeout() * 60 * 1000",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pushConsumer.getConsumeTimeout() * 60 * 1000",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 87,
      "startColumnNumber" : 173,
      "endLineNumber" : 87,
      "endColumnNumber" : 217
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 87,
        "startColumnNumber" : 49,
        "endLineNumber" : 87,
        "endColumnNumber" : 217
      },
      "nodeContext" : "System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 217
      },
      "nodeContext" : "!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n  msg=msgTreeMap.firstEntry().getValue();\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 389,
        "startLineNumber" : 86,
        "startColumnNumber" : 20,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n    msg=msgTreeMap.firstEntry().getValue();\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 479,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n    msg=msgTreeMap.firstEntry().getValue();\n  }\n else {\n    break;\n  }\n}\n  finally {\n  this.lockTreeMap.readLock().unlock();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 50,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 576,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  this.lockTreeMap.readLock().lockInterruptibly();\n  try {\n    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n      msg=msgTreeMap.firstEntry().getValue();\n    }\n else {\n      break;\n    }\n  }\n  finally {\n    this.lockTreeMap.readLock().unlock();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 684,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  this.lockTreeMap.readLock().lockInterruptibly();\n  try {\n    if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n      msg=msgTreeMap.firstEntry().getValue();\n    }\n else {\n      break;\n    }\n  }\n  finally {\n    this.lockTreeMap.readLock().unlock();\n  }\n}\n catch (InterruptedException e) {\n  log.error(\"getExpiredMsg exception\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1895,
        "startLineNumber" : 82,
        "startColumnNumber" : 39,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MessageExt msg=null;\n  try {\n    this.lockTreeMap.readLock().lockInterruptibly();\n    try {\n      if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n        msg=msgTreeMap.firstEntry().getValue();\n      }\n else {\n        break;\n      }\n    }\n  finally {\n      this.lockTreeMap.readLock().unlock();\n    }\n  }\n catch (  InterruptedException e) {\n    log.error(\"getExpiredMsg exception\",e);\n  }\n  try {\n    pushConsumer.sendMessageBack(msg,3);\n    log.info(\"send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\",msg.getTopic(),msg.getMsgId(),msg.getStoreHost(),msg.getQueueId(),msg.getQueueOffset());\n    try {\n      this.lockTreeMap.writeLock().lockInterruptibly();\n      try {\n        if (!msgTreeMap.isEmpty() && msg.getQueueOffset() == msgTreeMap.firstKey()) {\n          try {\n            removeMessage(Collections.singletonList(msg));\n          }\n catch (          Exception e) {\n            log.error(\"send expired msg exception\",e);\n          }\n        }\n      }\n  finally {\n        this.lockTreeMap.writeLock().unlock();\n      }\n    }\n catch (    InterruptedException e) {\n      log.error(\"getExpiredMsg exception\",e);\n    }\n  }\n catch (  Exception e) {\n    log.error(\"send expired msg exception\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1926,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < loop; i++) {\n  MessageExt msg=null;\n  try {\n    this.lockTreeMap.readLock().lockInterruptibly();\n    try {\n      if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n        msg=msgTreeMap.firstEntry().getValue();\n      }\n else {\n        break;\n      }\n    }\n  finally {\n      this.lockTreeMap.readLock().unlock();\n    }\n  }\n catch (  InterruptedException e) {\n    log.error(\"getExpiredMsg exception\",e);\n  }\n  try {\n    pushConsumer.sendMessageBack(msg,3);\n    log.info(\"send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\",msg.getTopic(),msg.getMsgId(),msg.getStoreHost(),msg.getQueueId(),msg.getQueueOffset());\n    try {\n      this.lockTreeMap.writeLock().lockInterruptibly();\n      try {\n        if (!msgTreeMap.isEmpty() && msg.getQueueOffset() == msgTreeMap.firstKey()) {\n          try {\n            removeMessage(Collections.singletonList(msg));\n          }\n catch (          Exception e) {\n            log.error(\"send expired msg exception\",e);\n          }\n        }\n      }\n  finally {\n        this.lockTreeMap.writeLock().unlock();\n      }\n    }\n catch (    InterruptedException e) {\n      log.error(\"getExpiredMsg exception\",e);\n    }\n  }\n catch (  Exception e) {\n    log.error(\"send expired msg exception\",e);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 198,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2119,
        "startLineNumber" : 76,
        "startColumnNumber" : 68,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) {\n    return;\n  }\n  int loop=msgTreeMap.size() < 16 ? msgTreeMap.size() : 16;\n  for (int i=0; i < loop; i++) {\n    MessageExt msg=null;\n    try {\n      this.lockTreeMap.readLock().lockInterruptibly();\n      try {\n        if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n          msg=msgTreeMap.firstEntry().getValue();\n        }\n else {\n          break;\n        }\n      }\n  finally {\n        this.lockTreeMap.readLock().unlock();\n      }\n    }\n catch (    InterruptedException e) {\n      log.error(\"getExpiredMsg exception\",e);\n    }\n    try {\n      pushConsumer.sendMessageBack(msg,3);\n      log.info(\"send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\",msg.getTopic(),msg.getMsgId(),msg.getStoreHost(),msg.getQueueId(),msg.getQueueOffset());\n      try {\n        this.lockTreeMap.writeLock().lockInterruptibly();\n        try {\n          if (!msgTreeMap.isEmpty() && msg.getQueueOffset() == msgTreeMap.firstKey()) {\n            try {\n              removeMessage(Collections.singletonList(msg));\n            }\n catch (            Exception e) {\n              log.error(\"send expired msg exception\",e);\n            }\n          }\n        }\n  finally {\n          this.lockTreeMap.writeLock().unlock();\n        }\n      }\n catch (      InterruptedException e) {\n        log.error(\"getExpiredMsg exception\",e);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"send expired msg exception\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2226,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param pushConsumer\n */\npublic void cleanExpiredMsg(DefaultMQPushConsumer pushConsumer){\n  if (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) {\n    return;\n  }\n  int loop=msgTreeMap.size() < 16 ? msgTreeMap.size() : 16;\n  for (int i=0; i < loop; i++) {\n    MessageExt msg=null;\n    try {\n      this.lockTreeMap.readLock().lockInterruptibly();\n      try {\n        if (!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000) {\n          msg=msgTreeMap.firstEntry().getValue();\n        }\n else {\n          break;\n        }\n      }\n  finally {\n        this.lockTreeMap.readLock().unlock();\n      }\n    }\n catch (    InterruptedException e) {\n      log.error(\"getExpiredMsg exception\",e);\n    }\n    try {\n      pushConsumer.sendMessageBack(msg,3);\n      log.info(\"send expire msg back. topic={}, msgId={}, storeHost={}, queueId={}, queueOffset={}\",msg.getTopic(),msg.getMsgId(),msg.getStoreHost(),msg.getQueueId(),msg.getQueueOffset());\n      try {\n        this.lockTreeMap.writeLock().lockInterruptibly();\n        try {\n          if (!msgTreeMap.isEmpty() && msg.getQueueOffset() == msgTreeMap.firstKey()) {\n            try {\n              removeMessage(Collections.singletonList(msg));\n            }\n catch (            Exception e) {\n              log.error(\"send expired msg exception\",e);\n            }\n          }\n        }\n  finally {\n          this.lockTreeMap.writeLock().unlock();\n        }\n      }\n catch (      InterruptedException e) {\n        log.error(\"getExpiredMsg exception\",e);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"send expired msg exception\",e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 217
      },
      "nodeContext" : "!msgTreeMap.isEmpty() && System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) > pushConsumer.getConsumeTimeout() * 60 * 1000",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 27,
      "astHeight" : 8
    },
    "tokenLength" : 6,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 87,
    "startColumnNumber" : 173,
    "endLineNumber" : 87,
    "endColumnNumber" : 217
  } ],
  "layoutRelationDataList" : [ ]
}