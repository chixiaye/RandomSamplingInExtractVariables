{
  "id" : 347,
  "expression" : "transferEncoding.indexOf(\",\")",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "transferEncoding.indexOf(\",\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 87,
      "startColumnNumber" : 30,
      "endLineNumber" : 87,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 59
      },
      "nodeContext" : "idx=transferEncoding.indexOf(\",\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int idx=transferEncoding.indexOf(\",\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 86,
        "startColumnNumber" : 46,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int idx=transferEncoding.indexOf(\",\");\n  if (idx != -1) {\n    contentEncoding=transferEncoding.substring(0,idx).trim();\n  }\n else {\n    contentEncoding=transferEncoding.trim();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (transferEncoding != null) {\n  int idx=transferEncoding.indexOf(\",\");\n  if (idx != -1) {\n    contentEncoding=transferEncoding.substring(0,idx).trim();\n  }\n else {\n    contentEncoding=transferEncoding.trim();\n  }\n}\n else {\n  contentEncoding=IDENTITY;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 84,
        "startColumnNumber" : 19,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n  if (transferEncoding != null) {\n    int idx=transferEncoding.indexOf(\",\");\n    if (idx != -1) {\n      contentEncoding=transferEncoding.substring(0,idx).trim();\n    }\n else {\n      contentEncoding=transferEncoding.trim();\n    }\n  }\n else {\n    contentEncoding=IDENTITY;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 667,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (contentEncoding != null) {\n  contentEncoding=contentEncoding.trim();\n}\n else {\n  String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n  if (transferEncoding != null) {\n    int idx=transferEncoding.indexOf(\",\");\n    if (idx != -1) {\n      contentEncoding=transferEncoding.substring(0,idx).trim();\n    }\n else {\n      contentEncoding=transferEncoding.trim();\n    }\n  }\n else {\n    contentEncoding=IDENTITY;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 64,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3987,
        "startLineNumber" : 75,
        "startColumnNumber" : 40,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  cleanup();\n  final HttpMessage message=(HttpMessage)msg;\n  final HttpHeaders headers=message.headers();\n  String contentEncoding=headers.get(HttpHeaderNames.CONTENT_ENCODING);\n  if (contentEncoding != null) {\n    contentEncoding=contentEncoding.trim();\n  }\n else {\n    String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n    if (transferEncoding != null) {\n      int idx=transferEncoding.indexOf(\",\");\n      if (idx != -1) {\n        contentEncoding=transferEncoding.substring(0,idx).trim();\n      }\n else {\n        contentEncoding=transferEncoding.trim();\n      }\n    }\n else {\n      contentEncoding=IDENTITY;\n    }\n  }\n  decompressor=newContentDecoder(contentEncoding);\n  if (decompressor == null) {\n    if (message instanceof HttpContent) {\n      ((HttpContent)message).retain();\n    }\n    fireChannelRead(ctx,message);\n    return;\n  }\n  if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {\n    headers.remove(HttpHeaderNames.CONTENT_LENGTH);\n    headers.set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);\n  }\n  CharSequence targetContentEncoding=getTargetContentEncoding(contentEncoding);\n  if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n    headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n  }\n else {\n    headers.set(HttpHeaderNames.CONTENT_ENCODING,targetContentEncoding);\n  }\n  if (message instanceof HttpContent) {\n    HttpMessage copy;\n    if (message instanceof HttpRequest) {\n      HttpRequest r=(HttpRequest)message;\n      copy=new DefaultHttpRequest(r.protocolVersion(),r.method(),r.uri());\n    }\n else     if (message instanceof HttpResponse) {\n      HttpResponse r=(HttpResponse)message;\n      copy=new DefaultHttpResponse(r.protocolVersion(),r.status());\n    }\n else {\n      throw new CodecException(\"Object of class \" + message.getClass().getName() + \" is not an HttpRequest or HttpResponse\");\n    }\n    copy.headers().set(message.headers());\n    copy.setDecoderResult(message.decoderResult());\n    fireChannelRead(ctx,copy);\n  }\n else {\n    fireChannelRead(ctx,message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4019,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof HttpMessage) {\n  cleanup();\n  final HttpMessage message=(HttpMessage)msg;\n  final HttpHeaders headers=message.headers();\n  String contentEncoding=headers.get(HttpHeaderNames.CONTENT_ENCODING);\n  if (contentEncoding != null) {\n    contentEncoding=contentEncoding.trim();\n  }\n else {\n    String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n    if (transferEncoding != null) {\n      int idx=transferEncoding.indexOf(\",\");\n      if (idx != -1) {\n        contentEncoding=transferEncoding.substring(0,idx).trim();\n      }\n else {\n        contentEncoding=transferEncoding.trim();\n      }\n    }\n else {\n      contentEncoding=IDENTITY;\n    }\n  }\n  decompressor=newContentDecoder(contentEncoding);\n  if (decompressor == null) {\n    if (message instanceof HttpContent) {\n      ((HttpContent)message).retain();\n    }\n    fireChannelRead(ctx,message);\n    return;\n  }\n  if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {\n    headers.remove(HttpHeaderNames.CONTENT_LENGTH);\n    headers.set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);\n  }\n  CharSequence targetContentEncoding=getTargetContentEncoding(contentEncoding);\n  if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n    headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n  }\n else {\n    headers.set(HttpHeaderNames.CONTENT_ENCODING,targetContentEncoding);\n  }\n  if (message instanceof HttpContent) {\n    HttpMessage copy;\n    if (message instanceof HttpRequest) {\n      HttpRequest r=(HttpRequest)message;\n      copy=new DefaultHttpRequest(r.protocolVersion(),r.method(),r.uri());\n    }\n else     if (message instanceof HttpResponse) {\n      HttpResponse r=(HttpResponse)message;\n      copy=new DefaultHttpResponse(r.protocolVersion(),r.status());\n    }\n else {\n      throw new CodecException(\"Object of class \" + message.getClass().getName() + \" is not an HttpRequest or HttpResponse\");\n    }\n    copy.headers().set(message.headers());\n    copy.setDecoderResult(message.decoderResult());\n    fireChannelRead(ctx,copy);\n  }\n else {\n    fireChannelRead(ctx,message);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 299,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4992,
        "startLineNumber" : 55,
        "startColumnNumber" : 86,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof HttpResponse && ((HttpResponse)msg).status().code() == 100) {\n    if (!(msg instanceof LastHttpContent)) {\n      continueResponse=true;\n    }\n    fireChannelRead(ctx,ReferenceCountUtil.retain(msg));\n    return;\n  }\n  if (continueResponse) {\n    if (msg instanceof LastHttpContent) {\n      continueResponse=false;\n    }\n    fireChannelRead(ctx,ReferenceCountUtil.retain(msg));\n    return;\n  }\n  if (msg instanceof HttpMessage) {\n    cleanup();\n    final HttpMessage message=(HttpMessage)msg;\n    final HttpHeaders headers=message.headers();\n    String contentEncoding=headers.get(HttpHeaderNames.CONTENT_ENCODING);\n    if (contentEncoding != null) {\n      contentEncoding=contentEncoding.trim();\n    }\n else {\n      String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n      if (transferEncoding != null) {\n        int idx=transferEncoding.indexOf(\",\");\n        if (idx != -1) {\n          contentEncoding=transferEncoding.substring(0,idx).trim();\n        }\n else {\n          contentEncoding=transferEncoding.trim();\n        }\n      }\n else {\n        contentEncoding=IDENTITY;\n      }\n    }\n    decompressor=newContentDecoder(contentEncoding);\n    if (decompressor == null) {\n      if (message instanceof HttpContent) {\n        ((HttpContent)message).retain();\n      }\n      fireChannelRead(ctx,message);\n      return;\n    }\n    if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {\n      headers.remove(HttpHeaderNames.CONTENT_LENGTH);\n      headers.set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);\n    }\n    CharSequence targetContentEncoding=getTargetContentEncoding(contentEncoding);\n    if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n      headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n    }\n else {\n      headers.set(HttpHeaderNames.CONTENT_ENCODING,targetContentEncoding);\n    }\n    if (message instanceof HttpContent) {\n      HttpMessage copy;\n      if (message instanceof HttpRequest) {\n        HttpRequest r=(HttpRequest)message;\n        copy=new DefaultHttpRequest(r.protocolVersion(),r.method(),r.uri());\n      }\n else       if (message instanceof HttpResponse) {\n        HttpResponse r=(HttpResponse)message;\n        copy=new DefaultHttpResponse(r.protocolVersion(),r.status());\n      }\n else {\n        throw new CodecException(\"Object of class \" + message.getClass().getName() + \" is not an HttpRequest or HttpResponse\");\n      }\n      copy.headers().set(message.headers());\n      copy.setDecoderResult(message.decoderResult());\n      fireChannelRead(ctx,copy);\n    }\n else {\n      fireChannelRead(ctx,message);\n    }\n  }\n  if (msg instanceof HttpContent) {\n    final HttpContent c=(HttpContent)msg;\n    if (decompressor == null) {\n      fireChannelRead(ctx,c.retain());\n    }\n else {\n      decodeContent(ctx,c);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 395,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5089,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void decode(ChannelHandlerContext ctx,HttpObject msg) throws Exception {\n  if (msg instanceof HttpResponse && ((HttpResponse)msg).status().code() == 100) {\n    if (!(msg instanceof LastHttpContent)) {\n      continueResponse=true;\n    }\n    fireChannelRead(ctx,ReferenceCountUtil.retain(msg));\n    return;\n  }\n  if (continueResponse) {\n    if (msg instanceof LastHttpContent) {\n      continueResponse=false;\n    }\n    fireChannelRead(ctx,ReferenceCountUtil.retain(msg));\n    return;\n  }\n  if (msg instanceof HttpMessage) {\n    cleanup();\n    final HttpMessage message=(HttpMessage)msg;\n    final HttpHeaders headers=message.headers();\n    String contentEncoding=headers.get(HttpHeaderNames.CONTENT_ENCODING);\n    if (contentEncoding != null) {\n      contentEncoding=contentEncoding.trim();\n    }\n else {\n      String transferEncoding=headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n      if (transferEncoding != null) {\n        int idx=transferEncoding.indexOf(\",\");\n        if (idx != -1) {\n          contentEncoding=transferEncoding.substring(0,idx).trim();\n        }\n else {\n          contentEncoding=transferEncoding.trim();\n        }\n      }\n else {\n        contentEncoding=IDENTITY;\n      }\n    }\n    decompressor=newContentDecoder(contentEncoding);\n    if (decompressor == null) {\n      if (message instanceof HttpContent) {\n        ((HttpContent)message).retain();\n      }\n      fireChannelRead(ctx,message);\n      return;\n    }\n    if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {\n      headers.remove(HttpHeaderNames.CONTENT_LENGTH);\n      headers.set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);\n    }\n    CharSequence targetContentEncoding=getTargetContentEncoding(contentEncoding);\n    if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n      headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n    }\n else {\n      headers.set(HttpHeaderNames.CONTENT_ENCODING,targetContentEncoding);\n    }\n    if (message instanceof HttpContent) {\n      HttpMessage copy;\n      if (message instanceof HttpRequest) {\n        HttpRequest r=(HttpRequest)message;\n        copy=new DefaultHttpRequest(r.protocolVersion(),r.method(),r.uri());\n      }\n else       if (message instanceof HttpResponse) {\n        HttpResponse r=(HttpResponse)message;\n        copy=new DefaultHttpResponse(r.protocolVersion(),r.status());\n      }\n else {\n        throw new CodecException(\"Object of class \" + message.getClass().getName() + \" is not an HttpRequest or HttpResponse\");\n      }\n      copy.headers().set(message.headers());\n      copy.setDecoderResult(message.decoderResult());\n      fireChannelRead(ctx,copy);\n    }\n else {\n      fireChannelRead(ctx,message);\n    }\n  }\n  if (msg instanceof HttpContent) {\n    final HttpContent c=(HttpContent)msg;\n    if (decompressor == null) {\n      fireChannelRead(ctx,c.retain());\n    }\n else {\n      decodeContent(ctx,c);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 411,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 60
      },
      "nodeContext" : "int idx=transferEncoding.indexOf(\",\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 87,
    "startColumnNumber" : 30,
    "endLineNumber" : 87,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}