{
  "id" : 46,
  "expression" : "\"Running in offline mode.\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/desktop/src/mindustry/desktop/DesktopLauncher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Running in offline mode.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 98,
      "startColumnNumber" : 25,
      "endLineNumber" : 98,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Log.info(\"Running in offline mode.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Log.info(\"Running in offline mode.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 96,
        "startColumnNumber" : 48,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  steam=false;\n  Log.info(\"Running in offline mode.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 96,
        "startColumnNumber" : 13,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (NullPointerException ignored) {\n  steam=false;\n  Log.info(\"Running in offline mode.\");\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  SteamAPI.loadLibraries();\n  if (!SteamAPI.init()) {\n    loadError=true;\n    Log.err(\"Steam client not running.\");\n  }\n else {\n    initSteam(args);\n    Vars.steam=true;\n  }\n  if (SteamAPI.restartAppIfNecessary(SVars.steamID)) {\n    System.exit(0);\n  }\n}\n catch (NullPointerException ignored) {\n  steam=false;\n  Log.info(\"Running in offline mode.\");\n}\ncatch (Throwable e) {\n  steam=false;\n  Log.err(\"Failed to load Steam native libraries.\");\n  logSteamError(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1574,
        "startLineNumber" : 65,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Fi file=new Fi(\".\");\n  for (  Fi other : file.parent().list()) {\n    if (other.name().contains(\"steam\") && (other.extension().equals(\"dll\") || other.extension().equals(\"so\") || other.extension().equals(\"dylib\"))) {\n      other.delete();\n    }\n  }\n  Events.on(ClientLoadEvent.class,event -> {\n    if (steamError != null) {\n      Core.app.post(() -> Core.app.post(() -> Core.app.post(() -> {\n        ui.showErrorMessage(Core.bundle.format(\"steam.error\",(steamError.getMessage() == null) ? steamError.getClass().getSimpleName() : steamError.getClass().getSimpleName() + \": \" + steamError.getMessage()));\n      }\n)));\n    }\n  }\n);\n  try {\n    SteamAPI.loadLibraries();\n    if (!SteamAPI.init()) {\n      loadError=true;\n      Log.err(\"Steam client not running.\");\n    }\n else {\n      initSteam(args);\n      Vars.steam=true;\n    }\n    if (SteamAPI.restartAppIfNecessary(SVars.steamID)) {\n      System.exit(0);\n    }\n  }\n catch (  NullPointerException ignored) {\n    steam=false;\n    Log.info(\"Running in offline mode.\");\n  }\ncatch (  Throwable e) {\n    steam=false;\n    Log.err(\"Failed to load Steam native libraries.\");\n    logSteamError(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1586,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (useSteam) {\n  Fi file=new Fi(\".\");\n  for (  Fi other : file.parent().list()) {\n    if (other.name().contains(\"steam\") && (other.extension().equals(\"dll\") || other.extension().equals(\"so\") || other.extension().equals(\"dylib\"))) {\n      other.delete();\n    }\n  }\n  Events.on(ClientLoadEvent.class,event -> {\n    if (steamError != null) {\n      Core.app.post(() -> Core.app.post(() -> Core.app.post(() -> {\n        ui.showErrorMessage(Core.bundle.format(\"steam.error\",(steamError.getMessage() == null) ? steamError.getClass().getSimpleName() : steamError.getClass().getSimpleName() + \": \" + steamError.getMessage()));\n      }\n)));\n    }\n  }\n);\n  try {\n    SteamAPI.loadLibraries();\n    if (!SteamAPI.init()) {\n      loadError=true;\n      Log.err(\"Steam client not running.\");\n    }\n else {\n      initSteam(args);\n      Vars.steam=true;\n    }\n    if (SteamAPI.restartAppIfNecessary(SVars.steamID)) {\n      System.exit(0);\n    }\n  }\n catch (  NullPointerException ignored) {\n    steam=false;\n    Log.info(\"Running in offline mode.\");\n  }\ncatch (  Throwable e) {\n    steam=false;\n    Log.err(\"Failed to load Steam native libraries.\");\n    logSteamError(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2319,
        "startLineNumber" : 48,
        "startColumnNumber" : 41,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Version.init();\n  boolean useSteam=Version.modifier.contains(\"steam\");\n  testMobile=Seq.with(args).contains(\"-testMobile\");\n  if (useDiscord) {\n    try {\n      DiscordRPC.INSTANCE.Discord_Initialize(discordID,null,true,\"1127400\");\n      Log.info(\"Initialized Discord rich presence.\");\n      Runtime.getRuntime().addShutdownHook(new Thread(DiscordRPC.INSTANCE::Discord_Shutdown));\n    }\n catch (    Throwable t) {\n      useDiscord=false;\n      Log.err(\"Failed to initialize discord. Enable debug logging for details.\");\n      Log.debug(\"Discord init error: \\n@\\n\",Strings.getStackTrace(t));\n    }\n  }\n  if (useSteam) {\n    Fi file=new Fi(\".\");\n    for (    Fi other : file.parent().list()) {\n      if (other.name().contains(\"steam\") && (other.extension().equals(\"dll\") || other.extension().equals(\"so\") || other.extension().equals(\"dylib\"))) {\n        other.delete();\n      }\n    }\n    Events.on(ClientLoadEvent.class,event -> {\n      if (steamError != null) {\n        Core.app.post(() -> Core.app.post(() -> Core.app.post(() -> {\n          ui.showErrorMessage(Core.bundle.format(\"steam.error\",(steamError.getMessage() == null) ? steamError.getClass().getSimpleName() : steamError.getClass().getSimpleName() + \": \" + steamError.getMessage()));\n        }\n)));\n      }\n    }\n);\n    try {\n      SteamAPI.loadLibraries();\n      if (!SteamAPI.init()) {\n        loadError=true;\n        Log.err(\"Steam client not running.\");\n      }\n else {\n        initSteam(args);\n        Vars.steam=true;\n      }\n      if (SteamAPI.restartAppIfNecessary(SVars.steamID)) {\n        System.exit(0);\n      }\n    }\n catch (    NullPointerException ignored) {\n      steam=false;\n      Log.info(\"Running in offline mode.\");\n    }\ncatch (    Throwable e) {\n      steam=false;\n      Log.err(\"Failed to load Steam native libraries.\");\n      logSteamError(e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2356,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public DesktopLauncher(String[] args){\n  Version.init();\n  boolean useSteam=Version.modifier.contains(\"steam\");\n  testMobile=Seq.with(args).contains(\"-testMobile\");\n  if (useDiscord) {\n    try {\n      DiscordRPC.INSTANCE.Discord_Initialize(discordID,null,true,\"1127400\");\n      Log.info(\"Initialized Discord rich presence.\");\n      Runtime.getRuntime().addShutdownHook(new Thread(DiscordRPC.INSTANCE::Discord_Shutdown));\n    }\n catch (    Throwable t) {\n      useDiscord=false;\n      Log.err(\"Failed to initialize discord. Enable debug logging for details.\");\n      Log.debug(\"Discord init error: \\n@\\n\",Strings.getStackTrace(t));\n    }\n  }\n  if (useSteam) {\n    Fi file=new Fi(\".\");\n    for (    Fi other : file.parent().list()) {\n      if (other.name().contains(\"steam\") && (other.extension().equals(\"dll\") || other.extension().equals(\"so\") || other.extension().equals(\"dylib\"))) {\n        other.delete();\n      }\n    }\n    Events.on(ClientLoadEvent.class,event -> {\n      if (steamError != null) {\n        Core.app.post(() -> Core.app.post(() -> Core.app.post(() -> {\n          ui.showErrorMessage(Core.bundle.format(\"steam.error\",(steamError.getMessage() == null) ? steamError.getClass().getSimpleName() : steamError.getClass().getSimpleName() + \": \" + steamError.getMessage()));\n        }\n)));\n      }\n    }\n);\n    try {\n      SteamAPI.loadLibraries();\n      if (!SteamAPI.init()) {\n        loadError=true;\n        Log.err(\"Steam client not running.\");\n      }\n else {\n        initSteam(args);\n        Vars.steam=true;\n      }\n      if (SteamAPI.restartAppIfNecessary(SVars.steamID)) {\n        System.exit(0);\n      }\n    }\n catch (    NullPointerException ignored) {\n      steam=false;\n      Log.info(\"Running in offline mode.\");\n    }\ncatch (    Throwable e) {\n      steam=false;\n      Log.err(\"Failed to load Steam native libraries.\");\n      logSteamError(e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Log.info(\"Running in offline mode.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 98,
    "startColumnNumber" : 25,
    "endLineNumber" : 98,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}