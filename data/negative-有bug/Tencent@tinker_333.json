{
  "id" : 333,
  "expression" : "\" extract failed (\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/BsDiffPatchInternal.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" extract failed (\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 203,
      "startColumnNumber" : 99,
      "endLineNumber" : 203,
      "endColumnNumber" : 118
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 203,
        "startColumnNumber" : 45,
        "endLineNumber" : 203,
        "endColumnNumber" : 142
      },
      "nodeContext" : "\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 203,
        "startColumnNumber" : 18,
        "endLineNumber" : 203,
        "endColumnNumber" : 146
      },
      "nodeContext" : "new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 203,
        "startColumnNumber" : 12,
        "endLineNumber" : 203,
        "endColumnNumber" : 147
      },
      "nodeContext" : "throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 202,
        "startColumnNumber" : 30,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 202,
        "startColumnNumber" : 10,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Throwable e) {\n  throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5849,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String apkPath=applicationInfo.sourceDir;\n  apk=new ZipFile(apkPath);\n  patch=new ZipFile(patchFile);\n  for (  ShareBsDiffPatchInfo info : patchList) {\n    long start=System.currentTimeMillis();\n    final String infoPath=info.path;\n    String patchRealPath;\n    if (infoPath.equals(\"\")) {\n      patchRealPath=info.name;\n    }\n else {\n      patchRealPath=info.path + \"/\" + info.name;\n    }\n    final String fileMd5=info.md5;\n    if (!SharePatchFileUtil.checkIfMd5Valid(fileMd5)) {\n      ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,info.md5);\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    String middle;\n    middle=info.path + \"/\" + info.name;\n    File extractedFile=new File(dir + middle);\n    if (extractedFile.exists()) {\n      if (fileMd5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n        ShareTinkerLog.w(TAG,\"bsdiff file %s is already exist, and md5 match, just continue\",extractedFile.getPath());\n        continue;\n      }\n else {\n        ShareTinkerLog.w(TAG,\"have a mismatch corrupted dex \" + extractedFile.getPath());\n        extractedFile.delete();\n      }\n    }\n else {\n      extractedFile.getParentFile().mkdirs();\n    }\n    String patchFileMd5=info.patchMd5;\n    ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n    if (patchFileEntry == null) {\n      ShareTinkerLog.w(TAG,\"patch entry is null. path:\" + patchRealPath);\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n      return false;\n    }\n    if (patchFileMd5.equals(\"0\")) {\n      if (!extract(patch,patchFileEntry,extractedFile,fileMd5,false)) {\n        ShareTinkerLog.w(TAG,\"Failed to extract file \" + extractedFile.getPath());\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n    }\n else {\n      if (!SharePatchFileUtil.checkIfMd5Valid(patchFileMd5)) {\n        ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,patchFileMd5);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      ZipEntry rawApkFileEntry=apk.getEntry(patchRealPath);\n      if (rawApkFileEntry == null) {\n        ShareTinkerLog.w(TAG,\"apk entry is null. path:\" + patchRealPath);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n      String rawApkCrc=info.rawCrc;\n      String rawEntryCrc=String.valueOf(rawApkFileEntry.getCrc());\n      if (!rawEntryCrc.equals(rawApkCrc)) {\n        ShareTinkerLog.e(TAG,\"apk entry %s crc is not equal, expect crc: %s, got crc: %s\",patchRealPath,rawApkCrc,rawEntryCrc);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n      InputStream oldStream=null;\n      InputStream newStream=null;\n      try {\n        oldStream=apk.getInputStream(rawApkFileEntry);\n        newStream=patch.getInputStream(patchFileEntry);\n        BSPatch.patchFast(oldStream,newStream,extractedFile);\n      }\n  finally {\n        IOHelper.closeQuietly(oldStream);\n        IOHelper.closeQuietly(newStream);\n      }\n      if (!SharePatchFileUtil.verifyFileMd5(extractedFile,fileMd5)) {\n        ShareTinkerLog.w(TAG,\"Failed to recover diff file \" + extractedFile.getPath());\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        SharePatchFileUtil.safeDeleteFile(extractedFile);\n        return false;\n      }\n      ShareTinkerLog.w(TAG,\"success recover bsdiff file: %s, use time: %d\",extractedFile.getPath(),(System.currentTimeMillis() - start));\n    }\n  }\n}\n catch (Throwable e) {\n  throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n}\n finally {\n  SharePatchFileUtil.closeZip(apk);\n  SharePatchFileUtil.closeZip(patch);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 529,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6816,
        "startLineNumber" : 71,
        "startColumnNumber" : 118,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArrayList<ShareBsDiffPatchInfo> patchList=new ArrayList<>();\n  ShareBsDiffPatchInfo.parseDiffPatchInfo(meta,patchList);\n  if (patchList.isEmpty()) {\n    ShareTinkerLog.w(TAG,\"extract patch list is empty! type:%s:\",ShareTinkerInternals.getTypeString(type));\n    return true;\n  }\n  File directory=new File(dir);\n  if (!directory.exists()) {\n    directory.mkdirs();\n  }\n  Tinker manager=Tinker.with(context);\n  ApplicationInfo applicationInfo=context.getApplicationInfo();\n  if (applicationInfo == null) {\n    ShareTinkerLog.w(TAG,\"applicationInfo == null!!!!\");\n    return false;\n  }\n  ZipFile apk=null;\n  ZipFile patch=null;\n  try {\n    String apkPath=applicationInfo.sourceDir;\n    apk=new ZipFile(apkPath);\n    patch=new ZipFile(patchFile);\n    for (    ShareBsDiffPatchInfo info : patchList) {\n      long start=System.currentTimeMillis();\n      final String infoPath=info.path;\n      String patchRealPath;\n      if (infoPath.equals(\"\")) {\n        patchRealPath=info.name;\n      }\n else {\n        patchRealPath=info.path + \"/\" + info.name;\n      }\n      final String fileMd5=info.md5;\n      if (!SharePatchFileUtil.checkIfMd5Valid(fileMd5)) {\n        ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,info.md5);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      String middle;\n      middle=info.path + \"/\" + info.name;\n      File extractedFile=new File(dir + middle);\n      if (extractedFile.exists()) {\n        if (fileMd5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n          ShareTinkerLog.w(TAG,\"bsdiff file %s is already exist, and md5 match, just continue\",extractedFile.getPath());\n          continue;\n        }\n else {\n          ShareTinkerLog.w(TAG,\"have a mismatch corrupted dex \" + extractedFile.getPath());\n          extractedFile.delete();\n        }\n      }\n else {\n        extractedFile.getParentFile().mkdirs();\n      }\n      String patchFileMd5=info.patchMd5;\n      ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n      if (patchFileEntry == null) {\n        ShareTinkerLog.w(TAG,\"patch entry is null. path:\" + patchRealPath);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n      if (patchFileMd5.equals(\"0\")) {\n        if (!extract(patch,patchFileEntry,extractedFile,fileMd5,false)) {\n          ShareTinkerLog.w(TAG,\"Failed to extract file \" + extractedFile.getPath());\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n      }\n else {\n        if (!SharePatchFileUtil.checkIfMd5Valid(patchFileMd5)) {\n          ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,patchFileMd5);\n          manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n          return false;\n        }\n        ZipEntry rawApkFileEntry=apk.getEntry(patchRealPath);\n        if (rawApkFileEntry == null) {\n          ShareTinkerLog.w(TAG,\"apk entry is null. path:\" + patchRealPath);\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n        String rawApkCrc=info.rawCrc;\n        String rawEntryCrc=String.valueOf(rawApkFileEntry.getCrc());\n        if (!rawEntryCrc.equals(rawApkCrc)) {\n          ShareTinkerLog.e(TAG,\"apk entry %s crc is not equal, expect crc: %s, got crc: %s\",patchRealPath,rawApkCrc,rawEntryCrc);\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n        InputStream oldStream=null;\n        InputStream newStream=null;\n        try {\n          oldStream=apk.getInputStream(rawApkFileEntry);\n          newStream=patch.getInputStream(patchFileEntry);\n          BSPatch.patchFast(oldStream,newStream,extractedFile);\n        }\n  finally {\n          IOHelper.closeQuietly(oldStream);\n          IOHelper.closeQuietly(newStream);\n        }\n        if (!SharePatchFileUtil.verifyFileMd5(extractedFile,fileMd5)) {\n          ShareTinkerLog.w(TAG,\"Failed to recover diff file \" + extractedFile.getPath());\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          SharePatchFileUtil.safeDeleteFile(extractedFile);\n          return false;\n        }\n        ShareTinkerLog.w(TAG,\"success recover bsdiff file: %s, use time: %d\",extractedFile.getPath(),(System.currentTimeMillis() - start));\n      }\n    }\n  }\n catch (  Throwable e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(apk);\n    SharePatchFileUtil.closeZip(patch);\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6930,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static boolean extractBsDiffInternals(Context context,String dir,String meta,File patchFile,int type){\n  ArrayList<ShareBsDiffPatchInfo> patchList=new ArrayList<>();\n  ShareBsDiffPatchInfo.parseDiffPatchInfo(meta,patchList);\n  if (patchList.isEmpty()) {\n    ShareTinkerLog.w(TAG,\"extract patch list is empty! type:%s:\",ShareTinkerInternals.getTypeString(type));\n    return true;\n  }\n  File directory=new File(dir);\n  if (!directory.exists()) {\n    directory.mkdirs();\n  }\n  Tinker manager=Tinker.with(context);\n  ApplicationInfo applicationInfo=context.getApplicationInfo();\n  if (applicationInfo == null) {\n    ShareTinkerLog.w(TAG,\"applicationInfo == null!!!!\");\n    return false;\n  }\n  ZipFile apk=null;\n  ZipFile patch=null;\n  try {\n    String apkPath=applicationInfo.sourceDir;\n    apk=new ZipFile(apkPath);\n    patch=new ZipFile(patchFile);\n    for (    ShareBsDiffPatchInfo info : patchList) {\n      long start=System.currentTimeMillis();\n      final String infoPath=info.path;\n      String patchRealPath;\n      if (infoPath.equals(\"\")) {\n        patchRealPath=info.name;\n      }\n else {\n        patchRealPath=info.path + \"/\" + info.name;\n      }\n      final String fileMd5=info.md5;\n      if (!SharePatchFileUtil.checkIfMd5Valid(fileMd5)) {\n        ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,info.md5);\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      String middle;\n      middle=info.path + \"/\" + info.name;\n      File extractedFile=new File(dir + middle);\n      if (extractedFile.exists()) {\n        if (fileMd5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n          ShareTinkerLog.w(TAG,\"bsdiff file %s is already exist, and md5 match, just continue\",extractedFile.getPath());\n          continue;\n        }\n else {\n          ShareTinkerLog.w(TAG,\"have a mismatch corrupted dex \" + extractedFile.getPath());\n          extractedFile.delete();\n        }\n      }\n else {\n        extractedFile.getParentFile().mkdirs();\n      }\n      String patchFileMd5=info.patchMd5;\n      ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n      if (patchFileEntry == null) {\n        ShareTinkerLog.w(TAG,\"patch entry is null. path:\" + patchRealPath);\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n      if (patchFileMd5.equals(\"0\")) {\n        if (!extract(patch,patchFileEntry,extractedFile,fileMd5,false)) {\n          ShareTinkerLog.w(TAG,\"Failed to extract file \" + extractedFile.getPath());\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n      }\n else {\n        if (!SharePatchFileUtil.checkIfMd5Valid(patchFileMd5)) {\n          ShareTinkerLog.w(TAG,\"meta file md5 mismatch, type:%s, name: %s, md5: %s\",ShareTinkerInternals.getTypeString(type),info.name,patchFileMd5);\n          manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n          return false;\n        }\n        ZipEntry rawApkFileEntry=apk.getEntry(patchRealPath);\n        if (rawApkFileEntry == null) {\n          ShareTinkerLog.w(TAG,\"apk entry is null. path:\" + patchRealPath);\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n        String rawApkCrc=info.rawCrc;\n        String rawEntryCrc=String.valueOf(rawApkFileEntry.getCrc());\n        if (!rawEntryCrc.equals(rawApkCrc)) {\n          ShareTinkerLog.e(TAG,\"apk entry %s crc is not equal, expect crc: %s, got crc: %s\",patchRealPath,rawApkCrc,rawEntryCrc);\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          return false;\n        }\n        InputStream oldStream=null;\n        InputStream newStream=null;\n        try {\n          oldStream=apk.getInputStream(rawApkFileEntry);\n          newStream=patch.getInputStream(patchFileEntry);\n          BSPatch.patchFast(oldStream,newStream,extractedFile);\n        }\n  finally {\n          IOHelper.closeQuietly(oldStream);\n          IOHelper.closeQuietly(newStream);\n        }\n        if (!SharePatchFileUtil.verifyFileMd5(extractedFile,fileMd5)) {\n          ShareTinkerLog.w(TAG,\"Failed to recover diff file \" + extractedFile.getPath());\n          manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n          SharePatchFileUtil.safeDeleteFile(extractedFile);\n          return false;\n        }\n        ShareTinkerLog.w(TAG,\"success recover bsdiff file: %s, use time: %d\",extractedFile.getPath(),(System.currentTimeMillis() - start));\n      }\n    }\n  }\n catch (  Throwable e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(apk);\n    SharePatchFileUtil.closeZip(patch);\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 652,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 203,
        "startColumnNumber" : 12,
        "endLineNumber" : 203,
        "endColumnNumber" : 147
      },
      "nodeContext" : "throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 203,
    "startColumnNumber" : 99,
    "endLineNumber" : 203,
    "endColumnNumber" : 118
  } ],
  "layoutRelationDataList" : [ ]
}