{
  "id" : 428,
  "expression" : "3L",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableTimerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 75,
      "startColumnNumber" : 36,
      "endLineNumber" : 75,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 59,
        "startColumnNumber" : 40,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestSubscriber<Long> ts=new TestSubscriber<Long>();\n  Flowable.interval(100,100,TimeUnit.MILLISECONDS,scheduler).subscribe(ts);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValue(0L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.dispose();\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTimerPeriodically(){\n  TestSubscriber<Long> ts=new TestSubscriber<Long>();\n  Flowable.interval(100,100,TimeUnit.MILLISECONDS,scheduler).subscribe(ts);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValue(0L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.dispose();\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "3L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 79,
      "startColumnNumber" : 36,
      "endLineNumber" : 79,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 59,
        "startColumnNumber" : 40,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestSubscriber<Long> ts=new TestSubscriber<Long>();\n  Flowable.interval(100,100,TimeUnit.MILLISECONDS,scheduler).subscribe(ts);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValue(0L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.dispose();\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTimerPeriodically(){\n  TestSubscriber<Long> ts=new TestSubscriber<Long>();\n  Flowable.interval(100,100,TimeUnit.MILLISECONDS,scheduler).subscribe(ts);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValue(0L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L);\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.dispose();\n  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);\n  ts.assertValues(0L,1L,2L,3L);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ts.assertValues(0L,1L,2L,3L);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 75,
    "startColumnNumber" : 36,
    "endLineNumber" : 75,
    "endColumnNumber" : 38
  }, {
    "charLength" : 2,
    "startLineNumber" : 79,
    "startColumnNumber" : 36,
    "endLineNumber" : 79,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}