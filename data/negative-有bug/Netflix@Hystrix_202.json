{
  "id" : 202,
  "expression" : "collapser2.getMetrics()",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "collapser2.getMetrics()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 743,
      "startColumnNumber" : 28,
      "endLineNumber" : 743,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 743,
        "startColumnNumber" : 8,
        "endLineNumber" : 743,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertSame(metrics,collapser2.getMetrics())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 743,
        "startColumnNumber" : 8,
        "endLineNumber" : 743,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertSame(metrics,collapser2.getMetrics());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3864,
        "startLineNumber" : 660,
        "startColumnNumber" : 79,
        "endLineNumber" : 747,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestCollapserTimer timer=new TestCollapserTimer();\n  HystrixObservableCollapser<String,String,String,String> collapser1=new TestRequestCollapser(timer,1);\n  Observable<String> response1=collapser1.toObservable();\n  HystrixObservableCollapser<String,String,String,String> collapser2=new TestRequestCollapser(timer,2);\n  Observable<String> response2=collapser2.toObservable();\n  final CountDownLatch latch1=new CountDownLatch(1);\n  final CountDownLatch latch2=new CountDownLatch(1);\n  final AtomicReference<String> value1=new AtomicReference<String>(null);\n  final AtomicReference<String> value2=new AtomicReference<String>(null);\n  Subscription s1=response1.doOnUnsubscribe(new Action0(){\n    @Override public void call(){\n      System.out.println(System.currentTimeMillis() + \" : s1 Unsubscribed!\");\n      latch1.countDown();\n    }\n  }\n).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnCompleted\");\n      latch1.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnError : \" + e);\n      latch1.countDown();\n    }\n    @Override public void onNext(    String s){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnNext : \" + s);\n      value1.set(s);\n    }\n  }\n);\n  Subscription s2=response2.doOnUnsubscribe(new Action0(){\n    @Override public void call(){\n      System.out.println(System.currentTimeMillis() + \" : s2 Unsubscribed!\");\n      latch2.countDown();\n    }\n  }\n).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnCompleted\");\n      latch2.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnError : \" + e);\n      latch2.countDown();\n    }\n    @Override public void onNext(    String s){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnNext : \" + s);\n      value2.set(s);\n    }\n  }\n);\n  s1.unsubscribe();\n  timer.incrementTime(10);\n  assertTrue(latch1.await(1000,TimeUnit.MILLISECONDS));\n  assertTrue(latch2.await(1000,TimeUnit.MILLISECONDS));\n  assertNull(value1.get());\n  assertEquals(\"2\",value2.get());\n  System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n  HystrixCollapserMetrics metrics=collapser1.getMetrics();\n  assertSame(metrics,collapser2.getMetrics());\n  HystrixInvokableInfo<?> command=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().iterator().next();\n  assertEquals(1,command.getNumberCollapsed());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 465,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3949,
        "startLineNumber" : 659,
        "startColumnNumber" : 4,
        "endLineNumber" : 747,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEarlyUnsubscribeExecutedViaToObservable() throws Exception {\n  TestCollapserTimer timer=new TestCollapserTimer();\n  HystrixObservableCollapser<String,String,String,String> collapser1=new TestRequestCollapser(timer,1);\n  Observable<String> response1=collapser1.toObservable();\n  HystrixObservableCollapser<String,String,String,String> collapser2=new TestRequestCollapser(timer,2);\n  Observable<String> response2=collapser2.toObservable();\n  final CountDownLatch latch1=new CountDownLatch(1);\n  final CountDownLatch latch2=new CountDownLatch(1);\n  final AtomicReference<String> value1=new AtomicReference<String>(null);\n  final AtomicReference<String> value2=new AtomicReference<String>(null);\n  Subscription s1=response1.doOnUnsubscribe(new Action0(){\n    @Override public void call(){\n      System.out.println(System.currentTimeMillis() + \" : s1 Unsubscribed!\");\n      latch1.countDown();\n    }\n  }\n).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnCompleted\");\n      latch1.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnError : \" + e);\n      latch1.countDown();\n    }\n    @Override public void onNext(    String s){\n      System.out.println(System.currentTimeMillis() + \" : s1 OnNext : \" + s);\n      value1.set(s);\n    }\n  }\n);\n  Subscription s2=response2.doOnUnsubscribe(new Action0(){\n    @Override public void call(){\n      System.out.println(System.currentTimeMillis() + \" : s2 Unsubscribed!\");\n      latch2.countDown();\n    }\n  }\n).subscribe(new Subscriber<String>(){\n    @Override public void onCompleted(){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnCompleted\");\n      latch2.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnError : \" + e);\n      latch2.countDown();\n    }\n    @Override public void onNext(    String s){\n      System.out.println(System.currentTimeMillis() + \" : s2 OnNext : \" + s);\n      value2.set(s);\n    }\n  }\n);\n  s1.unsubscribe();\n  timer.incrementTime(10);\n  assertTrue(latch1.await(1000,TimeUnit.MILLISECONDS));\n  assertTrue(latch2.await(1000,TimeUnit.MILLISECONDS));\n  assertNull(value1.get());\n  assertEquals(\"2\",value2.get());\n  System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());\n  HystrixCollapserMetrics metrics=collapser1.getMetrics();\n  assertSame(metrics,collapser2.getMetrics());\n  HystrixInvokableInfo<?> command=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().iterator().next();\n  assertEquals(1,command.getNumberCollapsed());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 473,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 743,
        "startColumnNumber" : 8,
        "endLineNumber" : 743,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertSame(metrics,collapser2.getMetrics());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.netflix.hystrix.HystrixCollapserMetrics"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 743,
    "startColumnNumber" : 28,
    "endLineNumber" : 743,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}