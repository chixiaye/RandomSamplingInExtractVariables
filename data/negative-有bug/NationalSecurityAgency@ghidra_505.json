{
  "id" : 505,
  "expression" : "quoteNameTypeDef",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objectiveC/ObjectiveC1_TypeEncodings.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "quoteNameTypeDef",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 239,
      "startColumnNumber" : 39,
      "endLineNumber" : 239,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 239,
        "startColumnNumber" : 12,
        "endLineNumber" : 239,
        "endColumnNumber" : 69
      },
      "nodeContext" : "PointerDataType.getPointer(quoteNameTypeDef,pointerSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 239,
        "startColumnNumber" : 5,
        "endLineNumber" : 239,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 237,
        "startColumnNumber" : 28,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataType quoteNameTypeDef=createTypeDef(quotedName);\n  return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 237,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (quotedName != null) {\n  DataType quoteNameTypeDef=createTypeDef(quotedName);\n  return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 234,
        "startColumnNumber" : 15,
        "endLineNumber" : 242,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  buffer.deleteCharAt(0);\n  String quotedName=parseQuotedName(buffer);\n  if (quotedName != null) {\n    DataType quoteNameTypeDef=createTypeDef(quotedName);\n    return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n  }\n  return createTypeDef(\"ID\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5855,
        "startLineNumber" : 233,
        "startColumnNumber" : 2,
        "endLineNumber" : 419,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (buffer.charAt(0)) {\ncase _C_ID:{\n    buffer.deleteCharAt(0);\n    String quotedName=parseQuotedName(buffer);\n    if (quotedName != null) {\n      DataType quoteNameTypeDef=createTypeDef(quotedName);\n      return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n    }\n    return createTypeDef(\"ID\");\n  }\ncase _C_CLASS:{\n  buffer.deleteCharAt(0);\n  return createTypeDef(\"CLASS\");\n}\ncase _C_SEL:{\nbuffer.deleteCharAt(0);\nreturn createTypeDef(\"SEL\");\n}\ncase _C_CHR:{\nbuffer.deleteCharAt(0);\nreturn new CharDataType();\n}\ncase _C_UCHR:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned char\",new CharDataType());\n}\ncase _C_SHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"short\",new WordDataType());\n}\ncase _C_USHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned short\",new WordDataType());\n}\ncase _C_INT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"int\",new DWordDataType());\n}\ncase _C_UINT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned int\",new DWordDataType());\n}\ncase _C_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long\",new QWordDataType());\n}\ncase _C_ULNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long\",new QWordDataType());\n}\ncase _C_LNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long long\",new QWordDataType());\n}\ncase _C_ULNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long long\",new QWordDataType());\n}\ncase _C_FLT:{\nbuffer.deleteCharAt(0);\nreturn new FloatDataType();\n}\ncase _C_DBL:{\nbuffer.deleteCharAt(0);\nreturn new DoubleDataType();\n}\ncase _C_BOOL:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"bool\",new DWordDataType());\n}\ncase _C_VOID:{\nbuffer.deleteCharAt(0);\nreturn new VoidDataType();\n}\ncase _C_UNDEF:{\nbuffer.deleteCharAt(0);\nreturn new Undefined4DataType();\n}\ncase _C_PTR:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_CHARPTR:{\nbuffer.deleteCharAt(0);\nreturn PointerDataType.getPointer(new CharDataType(),pointerSize);\n}\ncase _C_ATOM:{\nthrow new UnsupportedOperationException(\"atom not supported\");\n}\ncase _C_ARY_B:{\nbuffer.deleteCharAt(0);\nint nElements=parseNumber(buffer);\nDataType dt=parseDataType(buffer);\nbuffer.deleteCharAt(0);\nif (nElements > 0) {\nreturn new ArrayDataType(dt,nElements,dt.getLength());\n}\nif (dt instanceof Pointer) {\nreturn dt;\n}\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_UNION_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_UNION_E,AnonymousTypes.UNION);\nUnionDataType union=new UnionDataType(name);\nwhile (buffer.charAt(0) != _C_UNION_E) {\nDataType dt=parseDataType(buffer);\nunion.add(dt);\n}\nbuffer.deleteCharAt(0);\nreturn checkForExistingAnonymousEquivalent(union);\n}\ncase _C_STRUCT_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_STRUCT_E,AnonymousTypes.STRUCTURE);\nStructureDataType struct=new StructureDataType(name,0);\nwhile (buffer.charAt(0) != _C_STRUCT_E) {\nString fieldName=parseQuotedName(buffer);\nString comment=null;\nif (buffer.charAt(0) == _C_BFLD) {\nreinsertName(buffer,fieldName);\nUnion bitFieldUnion=parseBitFields(buffer);\nDataType dt=checkForExistingAnonymousEquivalent(bitFieldUnion);\nstruct.add(dt,fieldName,comment);\n}\n else {\nDataType dt=parseDataType(buffer);\nstruct.add(dt,fieldName,comment);\n}\n}\nbuffer.deleteCharAt(0);\nif (struct.getLength() == 0) {\nstruct.add(DataType.DEFAULT);\n}\nDataType dt=checkForExistingAnonymousEquivalent(struct);\nreturn dt;\n}\ncase _C_VECTOR:{\nthrow new UnsupportedOperationException(\"vector not supported\");\n}\ncase _C_CONST:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"const \" + dt.getDisplayName(),dt);\n}\ncase _C_IN:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"IN \" + dt.getDisplayName(),dt);\n}\ncase _C_INOUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"INOUT \" + dt.getDisplayName(),dt);\n}\ncase _C_OUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"OUT \" + dt.getDisplayName(),dt);\n}\ncase _C_BYCOPY:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_BYREF:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_ONEWAY:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ONEWAY \" + dt.getDisplayName(),dt);\n}\ncase _C_ATOMIC:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ATOMIC \" + dt.getDisplayName(),dt);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 770,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5970,
        "startLineNumber" : 232,
        "startColumnNumber" : 60,
        "endLineNumber" : 421,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (buffer.charAt(0)) {\ncase _C_ID:{\n      buffer.deleteCharAt(0);\n      String quotedName=parseQuotedName(buffer);\n      if (quotedName != null) {\n        DataType quoteNameTypeDef=createTypeDef(quotedName);\n        return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n      }\n      return createTypeDef(\"ID\");\n    }\ncase _C_CLASS:{\n    buffer.deleteCharAt(0);\n    return createTypeDef(\"CLASS\");\n  }\ncase _C_SEL:{\n  buffer.deleteCharAt(0);\n  return createTypeDef(\"SEL\");\n}\ncase _C_CHR:{\nbuffer.deleteCharAt(0);\nreturn new CharDataType();\n}\ncase _C_UCHR:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned char\",new CharDataType());\n}\ncase _C_SHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"short\",new WordDataType());\n}\ncase _C_USHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned short\",new WordDataType());\n}\ncase _C_INT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"int\",new DWordDataType());\n}\ncase _C_UINT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned int\",new DWordDataType());\n}\ncase _C_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long\",new QWordDataType());\n}\ncase _C_ULNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long\",new QWordDataType());\n}\ncase _C_LNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long long\",new QWordDataType());\n}\ncase _C_ULNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long long\",new QWordDataType());\n}\ncase _C_FLT:{\nbuffer.deleteCharAt(0);\nreturn new FloatDataType();\n}\ncase _C_DBL:{\nbuffer.deleteCharAt(0);\nreturn new DoubleDataType();\n}\ncase _C_BOOL:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"bool\",new DWordDataType());\n}\ncase _C_VOID:{\nbuffer.deleteCharAt(0);\nreturn new VoidDataType();\n}\ncase _C_UNDEF:{\nbuffer.deleteCharAt(0);\nreturn new Undefined4DataType();\n}\ncase _C_PTR:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_CHARPTR:{\nbuffer.deleteCharAt(0);\nreturn PointerDataType.getPointer(new CharDataType(),pointerSize);\n}\ncase _C_ATOM:{\nthrow new UnsupportedOperationException(\"atom not supported\");\n}\ncase _C_ARY_B:{\nbuffer.deleteCharAt(0);\nint nElements=parseNumber(buffer);\nDataType dt=parseDataType(buffer);\nbuffer.deleteCharAt(0);\nif (nElements > 0) {\nreturn new ArrayDataType(dt,nElements,dt.getLength());\n}\nif (dt instanceof Pointer) {\nreturn dt;\n}\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_UNION_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_UNION_E,AnonymousTypes.UNION);\nUnionDataType union=new UnionDataType(name);\nwhile (buffer.charAt(0) != _C_UNION_E) {\nDataType dt=parseDataType(buffer);\nunion.add(dt);\n}\nbuffer.deleteCharAt(0);\nreturn checkForExistingAnonymousEquivalent(union);\n}\ncase _C_STRUCT_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_STRUCT_E,AnonymousTypes.STRUCTURE);\nStructureDataType struct=new StructureDataType(name,0);\nwhile (buffer.charAt(0) != _C_STRUCT_E) {\nString fieldName=parseQuotedName(buffer);\nString comment=null;\nif (buffer.charAt(0) == _C_BFLD) {\nreinsertName(buffer,fieldName);\nUnion bitFieldUnion=parseBitFields(buffer);\nDataType dt=checkForExistingAnonymousEquivalent(bitFieldUnion);\nstruct.add(dt,fieldName,comment);\n}\n else {\nDataType dt=parseDataType(buffer);\nstruct.add(dt,fieldName,comment);\n}\n}\nbuffer.deleteCharAt(0);\nif (struct.getLength() == 0) {\nstruct.add(DataType.DEFAULT);\n}\nDataType dt=checkForExistingAnonymousEquivalent(struct);\nreturn dt;\n}\ncase _C_VECTOR:{\nthrow new UnsupportedOperationException(\"vector not supported\");\n}\ncase _C_CONST:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"const \" + dt.getDisplayName(),dt);\n}\ncase _C_IN:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"IN \" + dt.getDisplayName(),dt);\n}\ncase _C_INOUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"INOUT \" + dt.getDisplayName(),dt);\n}\ncase _C_OUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"OUT \" + dt.getDisplayName(),dt);\n}\ncase _C_BYCOPY:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_BYREF:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_ONEWAY:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ONEWAY \" + dt.getDisplayName(),dt);\n}\ncase _C_ATOMIC:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ATOMIC \" + dt.getDisplayName(),dt);\n}\n}\nthrow new UnsupportedOperationException(\"Unsupported Objective C type encoding: \" + buffer.charAt(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 781,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6029,
        "startLineNumber" : 232,
        "startColumnNumber" : 1,
        "endLineNumber" : 421,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private DataType createProperDataType(StringBuffer buffer){\nswitch (buffer.charAt(0)) {\ncase _C_ID:{\n      buffer.deleteCharAt(0);\n      String quotedName=parseQuotedName(buffer);\n      if (quotedName != null) {\n        DataType quoteNameTypeDef=createTypeDef(quotedName);\n        return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n      }\n      return createTypeDef(\"ID\");\n    }\ncase _C_CLASS:{\n    buffer.deleteCharAt(0);\n    return createTypeDef(\"CLASS\");\n  }\ncase _C_SEL:{\n  buffer.deleteCharAt(0);\n  return createTypeDef(\"SEL\");\n}\ncase _C_CHR:{\nbuffer.deleteCharAt(0);\nreturn new CharDataType();\n}\ncase _C_UCHR:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned char\",new CharDataType());\n}\ncase _C_SHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"short\",new WordDataType());\n}\ncase _C_USHT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned short\",new WordDataType());\n}\ncase _C_INT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"int\",new DWordDataType());\n}\ncase _C_UINT:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned int\",new DWordDataType());\n}\ncase _C_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long\",new QWordDataType());\n}\ncase _C_ULNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long\",new QWordDataType());\n}\ncase _C_LNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"long long\",new QWordDataType());\n}\ncase _C_ULNG_LNG:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"unsigned long long\",new QWordDataType());\n}\ncase _C_FLT:{\nbuffer.deleteCharAt(0);\nreturn new FloatDataType();\n}\ncase _C_DBL:{\nbuffer.deleteCharAt(0);\nreturn new DoubleDataType();\n}\ncase _C_BOOL:{\nbuffer.deleteCharAt(0);\nreturn new TypedefDataType(\"bool\",new DWordDataType());\n}\ncase _C_VOID:{\nbuffer.deleteCharAt(0);\nreturn new VoidDataType();\n}\ncase _C_UNDEF:{\nbuffer.deleteCharAt(0);\nreturn new Undefined4DataType();\n}\ncase _C_PTR:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_CHARPTR:{\nbuffer.deleteCharAt(0);\nreturn PointerDataType.getPointer(new CharDataType(),pointerSize);\n}\ncase _C_ATOM:{\nthrow new UnsupportedOperationException(\"atom not supported\");\n}\ncase _C_ARY_B:{\nbuffer.deleteCharAt(0);\nint nElements=parseNumber(buffer);\nDataType dt=parseDataType(buffer);\nbuffer.deleteCharAt(0);\nif (nElements > 0) {\nreturn new ArrayDataType(dt,nElements,dt.getLength());\n}\nif (dt instanceof Pointer) {\nreturn dt;\n}\nreturn PointerDataType.getPointer(dt,pointerSize);\n}\ncase _C_UNION_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_UNION_E,AnonymousTypes.UNION);\nUnionDataType union=new UnionDataType(name);\nwhile (buffer.charAt(0) != _C_UNION_E) {\nDataType dt=parseDataType(buffer);\nunion.add(dt);\n}\nbuffer.deleteCharAt(0);\nreturn checkForExistingAnonymousEquivalent(union);\n}\ncase _C_STRUCT_B:{\nbuffer.deleteCharAt(0);\nString name=parseCompositeName(buffer,_C_STRUCT_E,AnonymousTypes.STRUCTURE);\nStructureDataType struct=new StructureDataType(name,0);\nwhile (buffer.charAt(0) != _C_STRUCT_E) {\nString fieldName=parseQuotedName(buffer);\nString comment=null;\nif (buffer.charAt(0) == _C_BFLD) {\nreinsertName(buffer,fieldName);\nUnion bitFieldUnion=parseBitFields(buffer);\nDataType dt=checkForExistingAnonymousEquivalent(bitFieldUnion);\nstruct.add(dt,fieldName,comment);\n}\n else {\nDataType dt=parseDataType(buffer);\nstruct.add(dt,fieldName,comment);\n}\n}\nbuffer.deleteCharAt(0);\nif (struct.getLength() == 0) {\nstruct.add(DataType.DEFAULT);\n}\nDataType dt=checkForExistingAnonymousEquivalent(struct);\nreturn dt;\n}\ncase _C_VECTOR:{\nthrow new UnsupportedOperationException(\"vector not supported\");\n}\ncase _C_CONST:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"const \" + dt.getDisplayName(),dt);\n}\ncase _C_IN:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"IN \" + dt.getDisplayName(),dt);\n}\ncase _C_INOUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"INOUT \" + dt.getDisplayName(),dt);\n}\ncase _C_OUT:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"OUT \" + dt.getDisplayName(),dt);\n}\ncase _C_BYCOPY:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_BYREF:{\nbuffer.deleteCharAt(0);\nreturn parseDataType(buffer);\n}\ncase _C_ONEWAY:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ONEWAY \" + dt.getDisplayName(),dt);\n}\ncase _C_ATOMIC:{\nbuffer.deleteCharAt(0);\nDataType dt=parseDataType(buffer);\nreturn new TypedefDataType(\"ATOMIC \" + dt.getDisplayName(),dt);\n}\n}\nthrow new UnsupportedOperationException(\"Unsupported Objective C type encoding: \" + buffer.charAt(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 790,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 239,
        "startColumnNumber" : 5,
        "endLineNumber" : 239,
        "endColumnNumber" : 70
      },
      "nodeContext" : "return PointerDataType.getPointer(quoteNameTypeDef,pointerSize);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "ghidra.program.model.data.DataType"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 239,
    "startColumnNumber" : 39,
    "endLineNumber" : 239,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}