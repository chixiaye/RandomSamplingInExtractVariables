{
  "id" : 432,
  "expression" : "selenium.isTextPresent(\"regexp:This is a test of\")",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/test/com/thoughtworks/selenium/corebased/TestOpen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "selenium.isTextPresent(\"regexp:This is a test of\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 37,
      "startColumnNumber" : 15,
      "endLineNumber" : 37,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 66
      },
      "nodeContext" : "verifyTrue(selenium.isTextPresent(\"regexp:This is a test of\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 67
      },
      "nodeContext" : "verifyTrue(selenium.isTextPresent(\"regexp:This is a test of\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 32,
        "startColumnNumber" : 58,
        "endLineNumber" : 41,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  selenium.open(\"test_open.html\");\n  verifyTrue(selenium.isTextPresent(\"This is a test of the open command.\"));\n  verifyTrue(selenium.isTextPresent(\"glob:This is a test of the open command.\"));\n  verifyTrue(selenium.isTextPresent(\"exact:This is a test of\"));\n  verifyTrue(selenium.isTextPresent(\"regexp:This is a test of\"));\n  verifyTrue(selenium.isTextPresent(\"regexp:T*his is a test of\"));\n  verifyFalse(selenium.isTextPresent(\"exact:XXXXThis is a test of\"));\n  verifyFalse(selenium.isTextPresent(\"regexp:ThXXXXXXXXXis is a test of\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testIsTextPresentCanDoExactAndRegexChecks(){\n  selenium.open(\"test_open.html\");\n  verifyTrue(selenium.isTextPresent(\"This is a test of the open command.\"));\n  verifyTrue(selenium.isTextPresent(\"glob:This is a test of the open command.\"));\n  verifyTrue(selenium.isTextPresent(\"exact:This is a test of\"));\n  verifyTrue(selenium.isTextPresent(\"regexp:This is a test of\"));\n  verifyTrue(selenium.isTextPresent(\"regexp:T*his is a test of\"));\n  verifyFalse(selenium.isTextPresent(\"exact:XXXXThis is a test of\"));\n  verifyFalse(selenium.isTextPresent(\"regexp:ThXXXXXXXXXis is a test of\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 67
      },
      "nodeContext" : "verifyTrue(selenium.isTextPresent(\"regexp:This is a test of\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 37,
    "startColumnNumber" : 15,
    "endLineNumber" : 37,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}