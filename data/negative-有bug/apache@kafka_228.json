{
  "id" : 228,
  "expression" : "random",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/clients/producer/internals/StickyPartitionCache.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "random",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 56,
      "startColumnNumber" : 26,
      "endLineNumber" : 56,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 56,
        "startColumnNumber" : 26,
        "endLineNumber" : 56,
        "endColumnNumber" : 52
      },
      "nodeContext" : "random % partitions.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 52
      },
      "nodeContext" : "newPart=random % partitions.size()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newPart=random % partitions.size();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 54,
        "startColumnNumber" : 48,
        "endLineNumber" : 57,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n  newPart=random % partitions.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (availablePartitions.size() < 1) {\n  Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n  newPart=random % partitions.size();\n}\n else if (availablePartitions.size() == 1) {\n  newPart=availablePartitions.get(0).partition();\n}\n else {\n  while (newPart == null || newPart.equals(oldPart)) {\n    int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n  if (availablePartitions.size() < 1) {\n    Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=random % partitions.size();\n  }\n else   if (availablePartitions.size() == 1) {\n    newPart=availablePartitions.get(0).partition();\n  }\n else {\n    while (newPart == null || newPart.equals(oldPart)) {\n      int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n    }\n  }\n  if (oldPart == null) {\n    indexCache.putIfAbsent(topic,newPart);\n  }\n else {\n    indexCache.replace(topic,prevPartition,newPart);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldPart == null || oldPart == prevPartition) {\n  List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n  if (availablePartitions.size() < 1) {\n    Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=random % partitions.size();\n  }\n else   if (availablePartitions.size() == 1) {\n    newPart=availablePartitions.get(0).partition();\n  }\n else {\n    while (newPart == null || newPart.equals(oldPart)) {\n      int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n    }\n  }\n  if (oldPart == null) {\n    indexCache.putIfAbsent(topic,newPart);\n  }\n else {\n    indexCache.replace(topic,prevPartition,newPart);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 46,
        "startColumnNumber" : 79,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<PartitionInfo> partitions=cluster.partitionsForTopic(topic);\n  Integer oldPart=indexCache.get(topic);\n  Integer newPart=oldPart;\n  if (oldPart == null || oldPart == prevPartition) {\n    List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n    if (availablePartitions.size() < 1) {\n      Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=random % partitions.size();\n    }\n else     if (availablePartitions.size() == 1) {\n      newPart=availablePartitions.get(0).partition();\n    }\n else {\n      while (newPart == null || newPart.equals(oldPart)) {\n        int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n        newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n      }\n    }\n    if (oldPart == null) {\n      indexCache.putIfAbsent(topic,newPart);\n    }\n else {\n      indexCache.replace(topic,prevPartition,newPart);\n    }\n    return indexCache.get(topic);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public int nextPartition(String topic,Cluster cluster,int prevPartition){\n  List<PartitionInfo> partitions=cluster.partitionsForTopic(topic);\n  Integer oldPart=indexCache.get(topic);\n  Integer newPart=oldPart;\n  if (oldPart == null || oldPart == prevPartition) {\n    List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n    if (availablePartitions.size() < 1) {\n      Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=random % partitions.size();\n    }\n else     if (availablePartitions.size() == 1) {\n      newPart=availablePartitions.get(0).partition();\n    }\n else {\n      while (newPart == null || newPart.equals(oldPart)) {\n        int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n        newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n      }\n    }\n    if (oldPart == null) {\n      indexCache.putIfAbsent(topic,newPart);\n    }\n else {\n      indexCache.replace(topic,prevPartition,newPart);\n    }\n    return indexCache.get(topic);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 56,
        "endColumnNumber" : 53
      },
      "nodeContext" : "newPart=random % partitions.size();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "random",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 62,
      "startColumnNumber" : 54,
      "endLineNumber" : 62,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 62,
        "startColumnNumber" : 54,
        "endLineNumber" : 62,
        "endColumnNumber" : 89
      },
      "nodeContext" : "random % availablePartitions.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 62,
        "startColumnNumber" : 30,
        "endLineNumber" : 62,
        "endColumnNumber" : 90
      },
      "nodeContext" : "availablePartitions.get(random % availablePartitions.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 62,
        "startColumnNumber" : 30,
        "endLineNumber" : 62,
        "endColumnNumber" : 102
      },
      "nodeContext" : "availablePartitions.get(random % availablePartitions.size()).partition()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 102
      },
      "nodeContext" : "newPart=availablePartitions.get(random % availablePartitions.size()).partition()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 103
      },
      "nodeContext" : "newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 60,
        "startColumnNumber" : 67,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n  newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (newPart == null || newPart.equals(oldPart)) {\n  int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n  newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 59,
        "startColumnNumber" : 19,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (newPart == null || newPart.equals(oldPart)) {\n    int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 57,
        "startColumnNumber" : 19,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (availablePartitions.size() == 1) {\n  newPart=availablePartitions.get(0).partition();\n}\n else {\n  while (newPart == null || newPart.equals(oldPart)) {\n    int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (availablePartitions.size() < 1) {\n  Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n  newPart=random % partitions.size();\n}\n else if (availablePartitions.size() == 1) {\n  newPart=availablePartitions.get(0).partition();\n}\n else {\n  while (newPart == null || newPart.equals(oldPart)) {\n    int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n  if (availablePartitions.size() < 1) {\n    Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=random % partitions.size();\n  }\n else   if (availablePartitions.size() == 1) {\n    newPart=availablePartitions.get(0).partition();\n  }\n else {\n    while (newPart == null || newPart.equals(oldPart)) {\n      int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n    }\n  }\n  if (oldPart == null) {\n    indexCache.putIfAbsent(topic,newPart);\n  }\n else {\n    indexCache.replace(topic,prevPartition,newPart);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldPart == null || oldPart == prevPartition) {\n  List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n  if (availablePartitions.size() < 1) {\n    Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n    newPart=random % partitions.size();\n  }\n else   if (availablePartitions.size() == 1) {\n    newPart=availablePartitions.get(0).partition();\n  }\n else {\n    while (newPart == null || newPart.equals(oldPart)) {\n      int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n    }\n  }\n  if (oldPart == null) {\n    indexCache.putIfAbsent(topic,newPart);\n  }\n else {\n    indexCache.replace(topic,prevPartition,newPart);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 46,
        "startColumnNumber" : 79,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<PartitionInfo> partitions=cluster.partitionsForTopic(topic);\n  Integer oldPart=indexCache.get(topic);\n  Integer newPart=oldPart;\n  if (oldPart == null || oldPart == prevPartition) {\n    List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n    if (availablePartitions.size() < 1) {\n      Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=random % partitions.size();\n    }\n else     if (availablePartitions.size() == 1) {\n      newPart=availablePartitions.get(0).partition();\n    }\n else {\n      while (newPart == null || newPart.equals(oldPart)) {\n        int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n        newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n      }\n    }\n    if (oldPart == null) {\n      indexCache.putIfAbsent(topic,newPart);\n    }\n else {\n      indexCache.replace(topic,prevPartition,newPart);\n    }\n    return indexCache.get(topic);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public int nextPartition(String topic,Cluster cluster,int prevPartition){\n  List<PartitionInfo> partitions=cluster.partitionsForTopic(topic);\n  Integer oldPart=indexCache.get(topic);\n  Integer newPart=oldPart;\n  if (oldPart == null || oldPart == prevPartition) {\n    List<PartitionInfo> availablePartitions=cluster.availablePartitionsForTopic(topic);\n    if (availablePartitions.size() < 1) {\n      Integer random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n      newPart=random % partitions.size();\n    }\n else     if (availablePartitions.size() == 1) {\n      newPart=availablePartitions.get(0).partition();\n    }\n else {\n      while (newPart == null || newPart.equals(oldPart)) {\n        int random=Utils.toPositive(ThreadLocalRandom.current().nextInt());\n        newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n      }\n    }\n    if (oldPart == null) {\n      indexCache.putIfAbsent(topic,newPart);\n    }\n else {\n      indexCache.replace(topic,prevPartition,newPart);\n    }\n    return indexCache.get(topic);\n  }\n  return indexCache.get(topic);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 103
      },
      "nodeContext" : "newPart=availablePartitions.get(random % availablePartitions.size()).partition();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 56,
    "startColumnNumber" : 26,
    "endLineNumber" : 56,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 62,
    "startColumnNumber" : 54,
    "endLineNumber" : 62,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  } ]
}