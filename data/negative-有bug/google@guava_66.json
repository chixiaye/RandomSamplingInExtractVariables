{
  "id" : 66,
  "expression" : "getList().removeAll(MinimalCollection.of(duplicate))",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-testlib/src/com/google/common/collect/testing/testers/ListRemoveAllTester.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getList().removeAll(MinimalCollection.of(duplicate))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 48,
      "startColumnNumber" : 8,
      "endLineNumber" : 48,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(\"removeAll(intersectingCollection) should return true\",getList().removeAll(MinimalCollection.of(duplicate)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertTrue(\"removeAll(intersectingCollection) should return true\",getList().removeAll(MinimalCollection.of(duplicate)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 41,
        "startColumnNumber" : 40,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayWithDuplicate<E> arrayAndDuplicate=createArrayWithDuplicateElement();\n  collection=getSubjectGenerator().create(arrayAndDuplicate.elements);\n  E duplicate=arrayAndDuplicate.duplicate;\n  assertTrue(\"removeAll(intersectingCollection) should return true\",getList().removeAll(MinimalCollection.of(duplicate)));\n  assertFalse(\"after removeAll(e), a collection should not contain e even \" + \"if it initially contained e more than once.\",getList().contains(duplicate));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CollectionFeature.Require(SUPPORTS_REMOVE) @CollectionSize.Require(absent={ZERO,ONE}) public void testRemoveAll_duplicate(){\n  ArrayWithDuplicate<E> arrayAndDuplicate=createArrayWithDuplicateElement();\n  collection=getSubjectGenerator().create(arrayAndDuplicate.elements);\n  E duplicate=arrayAndDuplicate.duplicate;\n  assertTrue(\"removeAll(intersectingCollection) should return true\",getList().removeAll(MinimalCollection.of(duplicate)));\n  assertFalse(\"after removeAll(e), a collection should not contain e even \" + \"if it initially contained e more than once.\",getList().contains(duplicate));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 70,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(\"removeAll(intersectingCollection) should return true\",getList().removeAll(MinimalCollection.of(duplicate)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 48,
    "startColumnNumber" : 8,
    "endLineNumber" : 48,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}