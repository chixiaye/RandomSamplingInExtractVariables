{
  "id" : 224,
  "expression" : "consumerAllocateQueue",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByConfigTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumerAllocateQueue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 42,
      "startColumnNumber" : 12,
      "endLineNumber" : 42,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumerAllocateQueue.put(consumerId,queueIds)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumerAllocateQueue.put(consumerId,queueIds);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 36,
        "startColumnNumber" : 49,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n  int[] queueIds=new int[queues.size()];\n  for (int i=0; i < queues.size(); i++) {\n    queueIds[i]=queues.get(i).getQueueId();\n  }\n  consumerAllocateQueue.put(consumerId,queueIds);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String consumerId : consumerIdList) {\n  List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n  int[] queueIds=new int[queues.size()];\n  for (int i=0; i < queues.size(); i++) {\n    queueIds[i]=queues.get(i).getQueueId();\n  }\n  consumerAllocateQueue.put(consumerId,queueIds);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testAllocateMessageQueueByConfig(){\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumerAllocateQueue.put(consumerId,queueIds);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,int[]>"
  }, {
    "nodeContext" : "consumerAllocateQueue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 44,
      "startColumnNumber" : 57,
      "endLineNumber" : 44,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 44,
        "endColumnNumber" : 97
      },
      "nodeContext" : "consumerAllocateQueue.get(\"CID_PREFIX0\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testAllocateMessageQueueByConfig(){\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,int[]>"
  }, {
    "nodeContext" : "consumerAllocateQueue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 45,
      "startColumnNumber" : 57,
      "endLineNumber" : 45,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 45,
        "startColumnNumber" : 57,
        "endLineNumber" : 45,
        "endColumnNumber" : 97
      },
      "nodeContext" : "consumerAllocateQueue.get(\"CID_PREFIX1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1037,
        "startLineNumber" : 29,
        "startColumnNumber" : 51,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testAllocateMessageQueueByConfig(){\n  List<String> consumerIdList=createConsumerIdList(2);\n  List<MessageQueue> messageQueueList=createMessageQueueList(4);\n  AllocateMessageQueueByConfig allocateStrategy=new AllocateMessageQueueByConfig();\n  allocateStrategy.setMessageQueueList(messageQueueList);\n  Map<String,int[]> consumerAllocateQueue=new HashMap<String,int[]>(consumerIdList.size());\n  for (  String consumerId : consumerIdList) {\n    List<MessageQueue> queues=allocateStrategy.allocate(\"\",consumerId,messageQueueList,consumerIdList);\n    int[] queueIds=new int[queues.size()];\n    for (int i=0; i < queues.size(); i++) {\n      queueIds[i]=queues.get(i).getQueueId();\n    }\n    consumerAllocateQueue.put(consumerId,queueIds);\n  }\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX0\"));\n  Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{0,1,2,3},consumerAllocateQueue.get(\"CID_PREFIX1\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,int[]>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 42,
    "startColumnNumber" : 12,
    "endLineNumber" : 42,
    "endColumnNumber" : 33
  }, {
    "charLength" : 21,
    "startLineNumber" : 44,
    "startColumnNumber" : 57,
    "endLineNumber" : 44,
    "endColumnNumber" : 78
  }, {
    "charLength" : 21,
    "startLineNumber" : 45,
    "startColumnNumber" : 57,
    "endLineNumber" : 45,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}