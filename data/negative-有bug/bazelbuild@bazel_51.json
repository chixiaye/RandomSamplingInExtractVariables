{
  "id" : 51,
  "expression" : "StandardCharsets.ISO_8859_1",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/cpp/CppModuleMapAction.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StandardCharsets.ISO_8859_1",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 111,
      "startColumnNumber" : 65,
      "endLineNumber" : 111,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 111,
        "startColumnNumber" : 37,
        "endLineNumber" : 111,
        "endColumnNumber" : 93
      },
      "nodeContext" : "new OutputStreamWriter(out,StandardCharsets.ISO_8859_1)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 111,
        "startColumnNumber" : 27,
        "endLineNumber" : 111,
        "endColumnNumber" : 93
      },
      "nodeContext" : "content=new OutputStreamWriter(out,StandardCharsets.ISO_8859_1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OutputStreamWriter content=new OutputStreamWriter(out,StandardCharsets.ISO_8859_1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3986,
        "startLineNumber" : 110,
        "startColumnNumber" : 71,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  OutputStreamWriter content=new OutputStreamWriter(out,StandardCharsets.ISO_8859_1);\n  PathFragment fragment=cppModuleMap.getArtifact().getExecPath();\n  int segmentsToExecPath=fragment.segmentCount() - 1;\n  Optional<Artifact> umbrellaHeader=cppModuleMap.getUmbrellaHeader();\n  String leadingPeriods=moduleMapHomeIsCwd ? \"\" : \"../\".repeat(segmentsToExecPath);\n  Iterable<Artifact> separateModuleHdrs=expandedHeaders(artifactExpander,separateModuleHeaders);\n  content.append(\"module \\\"\").append(cppModuleMap.getName()).append(\"\\\" {\\n\");\n  content.append(\"  export *\\n\");\n  HashSet<PathFragment> deduper=new HashSet<>();\n  if (umbrellaHeader.isPresent()) {\n    appendHeader(content,\"\",umbrellaHeader.get().getExecPath(),leadingPeriods,false,deduper,true);\n  }\n else {\n    for (    Artifact artifact : expandedHeaders(artifactExpander,publicHeaders)) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    Artifact artifact : expandedHeaders(artifactExpander,privateHeaders)) {\n      appendHeader(content,\"private\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    Artifact artifact : separateModuleHdrs) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,false,deduper,false);\n    }\n    for (    PathFragment additionalExportedHeader : additionalExportedHeaders) {\n      appendHeader(content,\"\",additionalExportedHeader,leadingPeriods,false,deduper,false);\n    }\n  }\n  for (  CppModuleMap dep : dependencies) {\n    content.append(\"  use \\\"\").append(dep.getName()).append(\"\\\"\\n\");\n  }\n  if (!Iterables.isEmpty(separateModuleHdrs)) {\n    String separateName=cppModuleMap.getName() + CppModuleMap.SEPARATE_MODULE_SUFFIX;\n    content.append(\"  use \\\"\").append(separateName).append(\"\\\"\\n\");\n    content.append(\"}\\n\");\n    content.append(\"module \\\"\").append(separateName).append(\"\\\" {\\n\");\n    content.append(\"  export *\\n\");\n    deduper=new HashSet<>();\n    for (    Artifact artifact : separateModuleHdrs) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    CppModuleMap dep : dependencies) {\n      content.append(\"  use \\\"\").append(dep.getName()).append(\"\\\"\\n\");\n    }\n  }\n  content.append(\"}\");\n  if (externDependencies) {\n    for (    CppModuleMap dep : dependencies) {\n      content.append(\"\\nextern module \\\"\").append(dep.getName()).append(\"\\\" \\\"\").append(leadingPeriods).append(dep.getArtifact().getExecPathString()).append(\"\\\"\");\n    }\n  }\n  content.flush();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4067,
        "startLineNumber" : 109,
        "startColumnNumber" : 6,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "@Override public void writeOutputFile(OutputStream out) throws IOException {\n  OutputStreamWriter content=new OutputStreamWriter(out,StandardCharsets.ISO_8859_1);\n  PathFragment fragment=cppModuleMap.getArtifact().getExecPath();\n  int segmentsToExecPath=fragment.segmentCount() - 1;\n  Optional<Artifact> umbrellaHeader=cppModuleMap.getUmbrellaHeader();\n  String leadingPeriods=moduleMapHomeIsCwd ? \"\" : \"../\".repeat(segmentsToExecPath);\n  Iterable<Artifact> separateModuleHdrs=expandedHeaders(artifactExpander,separateModuleHeaders);\n  content.append(\"module \\\"\").append(cppModuleMap.getName()).append(\"\\\" {\\n\");\n  content.append(\"  export *\\n\");\n  HashSet<PathFragment> deduper=new HashSet<>();\n  if (umbrellaHeader.isPresent()) {\n    appendHeader(content,\"\",umbrellaHeader.get().getExecPath(),leadingPeriods,false,deduper,true);\n  }\n else {\n    for (    Artifact artifact : expandedHeaders(artifactExpander,publicHeaders)) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    Artifact artifact : expandedHeaders(artifactExpander,privateHeaders)) {\n      appendHeader(content,\"private\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    Artifact artifact : separateModuleHdrs) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,false,deduper,false);\n    }\n    for (    PathFragment additionalExportedHeader : additionalExportedHeaders) {\n      appendHeader(content,\"\",additionalExportedHeader,leadingPeriods,false,deduper,false);\n    }\n  }\n  for (  CppModuleMap dep : dependencies) {\n    content.append(\"  use \\\"\").append(dep.getName()).append(\"\\\"\\n\");\n  }\n  if (!Iterables.isEmpty(separateModuleHdrs)) {\n    String separateName=cppModuleMap.getName() + CppModuleMap.SEPARATE_MODULE_SUFFIX;\n    content.append(\"  use \\\"\").append(separateName).append(\"\\\"\\n\");\n    content.append(\"}\\n\");\n    content.append(\"module \\\"\").append(separateName).append(\"\\\" {\\n\");\n    content.append(\"  export *\\n\");\n    deduper=new HashSet<>();\n    for (    Artifact artifact : separateModuleHdrs) {\n      appendHeader(content,\"\",artifact.getExecPath(),leadingPeriods,true,deduper,false);\n    }\n    for (    CppModuleMap dep : dependencies) {\n      content.append(\"  use \\\"\").append(dep.getName()).append(\"\\\"\\n\");\n    }\n  }\n  content.append(\"}\");\n  if (externDependencies) {\n    for (    CppModuleMap dep : dependencies) {\n      content.append(\"\\nextern module \\\"\").append(dep.getName()).append(\"\\\" \\\"\").append(leadingPeriods).append(dep.getArtifact().getExecPathString()).append(\"\\\"\");\n    }\n  }\n  content.flush();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OutputStreamWriter content=new OutputStreamWriter(out,StandardCharsets.ISO_8859_1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.nio.charset.Charset"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 111,
    "startColumnNumber" : 65,
    "endLineNumber" : 111,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}