{
  "id" : 434,
  "expression" : "LOG",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/integration-tests/src/test/java/org/apache/druid/tests/coordinator/duty/ITAutoCompactionTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LOG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 160,
      "startColumnNumber" : 6,
      "endLineNumber" : 160,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 160,
        "endColumnNumber" : 64
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with dynamic partitioning\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 160,
        "endColumnNumber" : 65
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with dynamic partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 148,
        "startColumnNumber" : 65,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2007,
        "startLineNumber" : 148,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (final Closeable ignored=unloader(fullDatasourceName)){\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2043,
        "startLineNumber" : 146,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAutoCompactionDutyCanUpdateCompactionConfig() throws Exception {\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 160,
        "endColumnNumber" : 65
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with dynamic partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  }, {
    "nodeContext" : "LOG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 169,
      "startColumnNumber" : 6,
      "endLineNumber" : 169,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 169,
        "startColumnNumber" : 6,
        "endLineNumber" : 169,
        "endColumnNumber" : 61
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with hash partitioning\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 169,
        "startColumnNumber" : 6,
        "endLineNumber" : 169,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with hash partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 148,
        "startColumnNumber" : 65,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2007,
        "startLineNumber" : 148,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (final Closeable ignored=unloader(fullDatasourceName)){\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2043,
        "startLineNumber" : 146,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAutoCompactionDutyCanUpdateCompactionConfig() throws Exception {\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 169,
        "startColumnNumber" : 6,
        "endLineNumber" : 169,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with hash partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  }, {
    "nodeContext" : "LOG",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 179,
      "startColumnNumber" : 6,
      "endLineNumber" : 179,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with range partitioning\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 63
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with range partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 148,
        "startColumnNumber" : 65,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2007,
        "startLineNumber" : 148,
        "startColumnNumber" : 4,
        "endLineNumber" : 192,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (final Closeable ignored=unloader(fullDatasourceName)){\n  final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n  intervalsBeforeCompaction.sort(null);\n  verifySegmentsCount(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  submitCompactionConfig(10000,NO_SKIP_OFFSET);\n  submitCompactionConfig(1,NO_SKIP_OFFSET);\n  LOG.info(\"Auto compaction test with dynamic partitioning\");\n  forceTriggerAutoCompaction(10);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(10,1);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with hash partitioning\");\n  final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n  submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(4);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(hashedPartitionsSpec,4);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n  LOG.info(\"Auto compaction test with range partitioning\");\n  final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n  submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n  forceTriggerAutoCompaction(2);\n  verifyQuery(INDEX_QUERIES_RESOURCE);\n  verifySegmentsCompacted(rangePartitionsSpec,2);\n  checkCompactionIntervals(intervalsBeforeCompaction);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 154,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2043,
        "startLineNumber" : 146,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 193,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAutoCompactionDutyCanUpdateCompactionConfig() throws Exception {\n  loadData(INDEX_TASK);\n  try (final Closeable ignored=unloader(fullDatasourceName)){\n    final List<String> intervalsBeforeCompaction=coordinator.getSegmentIntervals(fullDatasourceName);\n    intervalsBeforeCompaction.sort(null);\n    verifySegmentsCount(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    submitCompactionConfig(10000,NO_SKIP_OFFSET);\n    submitCompactionConfig(1,NO_SKIP_OFFSET);\n    LOG.info(\"Auto compaction test with dynamic partitioning\");\n    forceTriggerAutoCompaction(10);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(10,1);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with hash partitioning\");\n    final HashedPartitionsSpec hashedPartitionsSpec=new HashedPartitionsSpec(null,3,null);\n    submitCompactionConfig(hashedPartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(4);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(hashedPartitionsSpec,4);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n    LOG.info(\"Auto compaction test with range partitioning\");\n    final SingleDimensionPartitionsSpec rangePartitionsSpec=new SingleDimensionPartitionsSpec(5,null,\"city\",false);\n    submitCompactionConfig(rangePartitionsSpec,NO_SKIP_OFFSET,1,null,false);\n    forceTriggerAutoCompaction(2);\n    verifyQuery(INDEX_QUERIES_RESOURCE);\n    verifySegmentsCompacted(rangePartitionsSpec,2);\n    checkCompactionIntervals(intervalsBeforeCompaction);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 63
      },
      "nodeContext" : "LOG.info(\"Auto compaction test with range partitioning\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.java.util.common.logger.Logger"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 160,
    "startColumnNumber" : 6,
    "endLineNumber" : 160,
    "endColumnNumber" : 9
  }, {
    "charLength" : 3,
    "startLineNumber" : 169,
    "startColumnNumber" : 6,
    "endLineNumber" : 169,
    "endColumnNumber" : 9
  }, {
    "charLength" : 3,
    "startLineNumber" : 179,
    "startColumnNumber" : 6,
    "endLineNumber" : 179,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}