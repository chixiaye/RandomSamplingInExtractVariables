{
  "id" : 230,
  "expression" : "new IllegalStateException(\"Misaligned address is not really aligned\")",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/microbench/src/main/java/io/netty/microbench/buffer/PooledByteBufAllocatorAlignBenchmark.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalStateException(\"Misaligned address is not really aligned\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 99,
      "startLineNumber" : 91,
      "startColumnNumber" : 26,
      "endLineNumber" : 92,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "throw new IllegalStateException(\"Misaligned address is not really aligned\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 90,
        "startColumnNumber" : 61,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Misaligned address is not really aligned\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if ((addr + off + alignOffset) % BLOCK == 0) {\n  throw new IllegalStateException(\"Misaligned address is not really aligned\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 88,
        "startColumnNumber" : 43,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  off=(off + OFFSET_ADD) & sizeMask;\n  if ((addr + off + alignOffset) % BLOCK == 0) {\n    throw new IllegalStateException(\"Misaligned address is not really aligned\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int c=0; c < size; c++) {\n  off=(off + OFFSET_ADD) & sizeMask;\n  if ((addr + off + alignOffset) % BLOCK == 0) {\n    throw new IllegalStateException(\"Misaligned address is not really aligned\");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 81,
        "startColumnNumber" : 29,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long addr=pooledDirectBuffer.memoryAddress();\n  if (addr % 64 == 0) {\n    alignOffset=63;\n  }\n  int off=0;\n  for (int c=0; c < size; c++) {\n    off=(off + OFFSET_ADD) & sizeMask;\n    if ((addr + off + alignOffset) % BLOCK == 0) {\n      throw new IllegalStateException(\"Misaligned address is not really aligned\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (cacheAlign == 0) {\n  long addr=pooledDirectBuffer.memoryAddress();\n  if (addr % 64 == 0) {\n    alignOffset=63;\n  }\n  int off=0;\n  for (int c=0; c < size; c++) {\n    off=(off + OFFSET_ADD) & sizeMask;\n    if ((addr + off + alignOffset) % BLOCK == 0) {\n      throw new IllegalStateException(\"Misaligned address is not really aligned\");\n    }\n  }\n}\n else {\n  alignOffset=0;\n  int off=0;\n  long addr=pooledDirectBuffer.memoryAddress();\n  for (int c=0; c < size; c++) {\n    off=(off + OFFSET_ADD) & sizeMask;\n    if ((addr + off) % BLOCK != 0) {\n      throw new IllegalStateException(\"Aligned address is not really aligned\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 76,
        "startColumnNumber" : 26,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PooledByteBufAllocator pooledAllocator=new PooledByteBufAllocator(true,4,4,8192,11,0,0,0,true,cacheAlign);\n  pooledDirectBuffer=pooledAllocator.directBuffer(size + 64);\n  sizeMask=size - 1;\n  if (cacheAlign == 0) {\n    long addr=pooledDirectBuffer.memoryAddress();\n    if (addr % 64 == 0) {\n      alignOffset=63;\n    }\n    int off=0;\n    for (int c=0; c < size; c++) {\n      off=(off + OFFSET_ADD) & sizeMask;\n      if ((addr + off + alignOffset) % BLOCK == 0) {\n        throw new IllegalStateException(\"Misaligned address is not really aligned\");\n      }\n    }\n  }\n else {\n    alignOffset=0;\n    int off=0;\n    long addr=pooledDirectBuffer.memoryAddress();\n    for (int c=0; c < size; c++) {\n      off=(off + OFFSET_ADD) & sizeMask;\n      if ((addr + off) % BLOCK != 0) {\n        throw new IllegalStateException(\"Aligned address is not really aligned\");\n      }\n    }\n  }\n  bytes=new byte[BLOCK];\n  rand.nextBytes(bytes);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Setup public void doSetup(){\n  PooledByteBufAllocator pooledAllocator=new PooledByteBufAllocator(true,4,4,8192,11,0,0,0,true,cacheAlign);\n  pooledDirectBuffer=pooledAllocator.directBuffer(size + 64);\n  sizeMask=size - 1;\n  if (cacheAlign == 0) {\n    long addr=pooledDirectBuffer.memoryAddress();\n    if (addr % 64 == 0) {\n      alignOffset=63;\n    }\n    int off=0;\n    for (int c=0; c < size; c++) {\n      off=(off + OFFSET_ADD) & sizeMask;\n      if ((addr + off + alignOffset) % BLOCK == 0) {\n        throw new IllegalStateException(\"Misaligned address is not really aligned\");\n      }\n    }\n  }\n else {\n    alignOffset=0;\n    int off=0;\n    long addr=pooledDirectBuffer.memoryAddress();\n    for (int c=0; c < size; c++) {\n      off=(off + OFFSET_ADD) & sizeMask;\n      if ((addr + off) % BLOCK != 0) {\n        throw new IllegalStateException(\"Aligned address is not really aligned\");\n      }\n    }\n  }\n  bytes=new byte[BLOCK];\n  rand.nextBytes(bytes);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 72
      },
      "nodeContext" : "throw new IllegalStateException(\"Misaligned address is not really aligned\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.IllegalStateException"
  } ],
  "positionList" : [ {
    "charLength" : 99,
    "startLineNumber" : 91,
    "startColumnNumber" : 26,
    "endLineNumber" : 92,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}