{
  "id" : 421,
  "expression" : "include.namePattern.matcher(name)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/filter/DefaultMetricFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "include.namePattern.matcher(name)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 60,
      "startColumnNumber" : 16,
      "endLineNumber" : 60,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 59
      },
      "nodeContext" : "include.namePattern.matcher(name).matches()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 69
      },
      "nodeContext" : "include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 59,
        "startColumnNumber" : 44,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())) {\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FilterSpec include : includes) {\n  if (include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())) {\n    return true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 51,
        "startColumnNumber" : 75,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  FilterSpec exclude : excludes) {\n    if (exclude.namePattern.matcher(name).matches() && exclude.scopePattern.matcher(logicalScope).matches() && exclude.types.contains(metric.getMetricType())) {\n      return false;\n    }\n  }\n  for (  FilterSpec include : includes) {\n    if (include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean filter(Metric metric,String name,String logicalScope){\n  for (  FilterSpec exclude : excludes) {\n    if (exclude.namePattern.matcher(name).matches() && exclude.scopePattern.matcher(logicalScope).matches() && exclude.types.contains(metric.getMetricType())) {\n      return false;\n    }\n  }\n  for (  FilterSpec include : includes) {\n    if (include.namePattern.matcher(name).matches() && include.scopePattern.matcher(logicalScope).matches() && include.types.contains(metric.getMetricType())) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 59
      },
      "nodeContext" : "include.namePattern.matcher(name).matches()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.util.regex.Matcher"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 60,
    "startColumnNumber" : 16,
    "endLineNumber" : 60,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}