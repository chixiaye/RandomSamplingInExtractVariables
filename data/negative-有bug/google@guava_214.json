{
  "id" : 214,
  "expression" : "\"Inverse should not contain value \" + reversed.getValue()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-testlib/src/com/google/common/collect/testing/google/AbstractBiMapTester.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Inverse should not contain value \" + reversed.getValue()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 72,
      "startColumnNumber" : 10,
      "endLineNumber" : 72,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 63,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Entry<V,K> reversed=reverseEntry(entry);\n  BiMap<V,K> inv=getMap().inverse();\n  assertFalse(\"Inverse should not contain entry \" + reversed,inv.entrySet().contains(reversed));\n  assertFalse(\"Inverse should not contain key \" + reversed.getKey(),inv.containsKey(reversed.getKey()));\n  assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()));\n  assertNull(\"Inverse should not return a mapping for key \" + reversed.getKey(),inv.get(reversed.getKey()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Entry<K,V> entry : entries) {\n  Entry<V,K> reversed=reverseEntry(entry);\n  BiMap<V,K> inv=getMap().inverse();\n  assertFalse(\"Inverse should not contain entry \" + reversed,inv.entrySet().contains(reversed));\n  assertFalse(\"Inverse should not contain key \" + reversed.getKey(),inv.containsKey(reversed.getKey()));\n  assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()));\n  assertNull(\"Inverse should not return a mapping for key \" + reversed.getKey(),inv.get(reversed.getKey()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 61,
        "startColumnNumber" : 55,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  super.expectMissing(entries);\n  for (  Entry<K,V> entry : entries) {\n    Entry<V,K> reversed=reverseEntry(entry);\n    BiMap<V,K> inv=getMap().inverse();\n    assertFalse(\"Inverse should not contain entry \" + reversed,inv.entrySet().contains(reversed));\n    assertFalse(\"Inverse should not contain key \" + reversed.getKey(),inv.containsKey(reversed.getKey()));\n    assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()));\n    assertNull(\"Inverse should not return a mapping for key \" + reversed.getKey(),inv.get(reversed.getKey()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void expectMissing(Entry<K,V>... entries){\n  super.expectMissing(entries);\n  for (  Entry<K,V> entry : entries) {\n    Entry<V,K> reversed=reverseEntry(entry);\n    BiMap<V,K> inv=getMap().inverse();\n    assertFalse(\"Inverse should not contain entry \" + reversed,inv.entrySet().contains(reversed));\n    assertFalse(\"Inverse should not contain key \" + reversed.getKey(),inv.containsKey(reversed.getKey()));\n    assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()));\n    assertNull(\"Inverse should not return a mapping for key \" + reversed.getKey(),inv.get(reversed.getKey()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertFalse(\"Inverse should not contain value \" + reversed.getValue(),inv.containsValue(reversed.getValue()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 72,
    "startColumnNumber" : 10,
    "endLineNumber" : 72,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}