{
  "id" : 350,
  "expression" : "StandardCharsets.UTF_8",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/http/ConnectionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StandardCharsets.UTF_8",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 155,
      "startColumnNumber" : 69,
      "endLineNumber" : 155,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 155,
        "startColumnNumber" : 21,
        "endLineNumber" : 155,
        "endColumnNumber" : 92
      },
      "nodeContext" : "new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 94
      },
      "nodeContext" : "Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1213,
        "startLineNumber" : 130,
        "startColumnNumber" : 89,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Connection connection=testConnection){\n    sendFunction.send(connection,fakeRequest);\n  }\n   Mockito.verify(mockHttpRequest).setHeaders(httpHeadersArgumentCaptor.capture());\n  Mockito.verify(mockHttpResponse).disconnect();\n  Assert.assertEquals(\"fake.accept,another.fake.accept\",httpHeadersArgumentCaptor.getValue().getAccept());\n  Assert.assertEquals(\"fake user agent\",httpHeadersArgumentCaptor.getValue().getUserAgent());\n  Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization());\n  Mockito.verify(mockHttpRequestFactory).buildRequest(Mockito.eq(httpMethod),Mockito.eq(fakeUrl),blobHttpContentArgumentCaptor.capture());\n  Assert.assertEquals(\"fake.content.type\",blobHttpContentArgumentCaptor.getValue().getType());\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  blobHttpContentArgumentCaptor.getValue().writeTo(byteArrayOutputStream);\n  Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1300,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testSend(String httpMethod,SendFunction sendFunction) throws IOException {\n  try (Connection connection=testConnection){\n    sendFunction.send(connection,fakeRequest);\n  }\n   Mockito.verify(mockHttpRequest).setHeaders(httpHeadersArgumentCaptor.capture());\n  Mockito.verify(mockHttpResponse).disconnect();\n  Assert.assertEquals(\"fake.accept,another.fake.accept\",httpHeadersArgumentCaptor.getValue().getAccept());\n  Assert.assertEquals(\"fake user agent\",httpHeadersArgumentCaptor.getValue().getUserAgent());\n  Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization());\n  Mockito.verify(mockHttpRequestFactory).buildRequest(Mockito.eq(httpMethod),Mockito.eq(fakeUrl),blobHttpContentArgumentCaptor.capture());\n  Assert.assertEquals(\"fake.content.type\",blobHttpContentArgumentCaptor.getValue().getType());\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  blobHttpContentArgumentCaptor.getValue().writeTo(byteArrayOutputStream);\n  Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 155,
        "startColumnNumber" : 21,
        "endLineNumber" : 155,
        "endColumnNumber" : 92
      },
      "nodeContext" : "new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.nio.charset.Charset"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 155,
    "startColumnNumber" : 69,
    "endLineNumber" : 155,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}