{
  "id" : 268,
  "expression" : "new File(patchVersionDirectory,ShareConstants.RES_PATH)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerLoadResult.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new File(patchVersionDirectory,ShareConstants.RES_PATH)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 56,
      "startLineNumber" : 113,
      "startColumnNumber" : 36,
      "endLineNumber" : 113,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 113,
        "endColumnNumber" : 92
      },
      "nodeContext" : "resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 113,
        "endColumnNumber" : 93
      },
      "nodeContext" : "resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 619,
        "startLineNumber" : 108,
        "startColumnNumber" : 62,
        "endLineNumber" : 115,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n  patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n  dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n  libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n  resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n  resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 115,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!ShareTinkerInternals.isNullOrNil(patchName)) {\n  patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n  patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n  dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n  libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n  resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n  resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 72,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1464,
        "startLineNumber" : 97,
        "startColumnNumber" : 54,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (isMainProcess) {\n    currentVersion=newVersion;\n  }\n else {\n    currentVersion=oldVersion;\n  }\n  ShareTinkerLog.i(TAG,\"parseTinkerResult oldVersion:%s, newVersion:%s, current:%s\",oldVersion,newVersion,currentVersion);\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(currentVersion);\n  if (!ShareTinkerInternals.isNullOrNil(patchName)) {\n    patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n    patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n    dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n    libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n    resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n    resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n  }\n  final boolean isProtectedApp=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_IS_PROTECTED_APP,false);\n  patchInfo=new SharePatchInfo(oldVersion,newVersion,isProtectedApp,false,Build.FINGERPRINT,oatDir,false);\n  versionChanged=!(oldVersion.equals(newVersion));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1510,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldVersion != null && newVersion != null) {\n  if (isMainProcess) {\n    currentVersion=newVersion;\n  }\n else {\n    currentVersion=oldVersion;\n  }\n  ShareTinkerLog.i(TAG,\"parseTinkerResult oldVersion:%s, newVersion:%s, current:%s\",oldVersion,newVersion,currentVersion);\n  String patchName=SharePatchFileUtil.getPatchVersionDirectory(currentVersion);\n  if (!ShareTinkerInternals.isNullOrNil(patchName)) {\n    patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n    patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n    dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n    libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n    resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n    resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n  }\n  final boolean isProtectedApp=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_IS_PROTECTED_APP,false);\n  patchInfo=new SharePatchInfo(oldVersion,newVersion,isProtectedApp,false,Build.FINGERPRINT,oatDir,false);\n  versionChanged=!(oldVersion.equals(newVersion));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 16136,
        "startLineNumber" : 75,
        "startColumnNumber" : 75,
        "endLineNumber" : 344,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker tinker=Tinker.with(context);\n  loadCode=ShareIntentUtil.getIntentReturnCode(intentResult);\n  costTime=ShareIntentUtil.getIntentPatchCostTime(intentResult);\n  systemOTA=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,false);\n  oatDir=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_OAT_DIR);\n  useInterpretMode=ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH.equals(oatDir);\n  final boolean isMainProcess=tinker.isMainProcess();\n  ShareTinkerLog.i(TAG,\"parseTinkerResult loadCode:%d, process name:%s, main process:%b, systemOTA:%b, fingerPrint:%s, oatDir:%s, useInterpretMode:%b\",loadCode,ShareTinkerInternals.getProcessName(context),isMainProcess,systemOTA,Build.FINGERPRINT,oatDir,useInterpretMode);\n  final String oldVersion=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_OLD_VERSION);\n  final String newVersion=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_NEW_VERSION);\n  final File patchDirectory=tinker.getPatchDirectory();\n  final File patchInfoFile=tinker.getPatchInfoFile();\n  if (oldVersion != null && newVersion != null) {\n    if (isMainProcess) {\n      currentVersion=newVersion;\n    }\n else {\n      currentVersion=oldVersion;\n    }\n    ShareTinkerLog.i(TAG,\"parseTinkerResult oldVersion:%s, newVersion:%s, current:%s\",oldVersion,newVersion,currentVersion);\n    String patchName=SharePatchFileUtil.getPatchVersionDirectory(currentVersion);\n    if (!ShareTinkerInternals.isNullOrNil(patchName)) {\n      patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n      patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n      dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n      libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n      resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n      resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n    }\n    final boolean isProtectedApp=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_IS_PROTECTED_APP,false);\n    patchInfo=new SharePatchInfo(oldVersion,newVersion,isProtectedApp,false,Build.FINGERPRINT,oatDir,false);\n    versionChanged=!(oldVersion.equals(newVersion));\n  }\n  Throwable exception=ShareIntentUtil.getIntentPatchException(intentResult);\n  if (exception != null) {\n    ShareTinkerLog.i(TAG,\"Tinker load have exception loadCode:%d\",loadCode);\n    int errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNKNOWN;\nswitch (loadCode) {\ncase ShareConstants.ERROR_LOAD_PATCH_UNKNOWN_EXCEPTION:      errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNKNOWN;\n    break;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION:  errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_DEX;\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION:errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_RESOURCE;\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION:errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNCAUGHT;\nbreak;\ndefault:break;\n}\ntinker.getLoadReporter().onLoadException(exception,errorCode);\nreturn false;\n}\nswitch (loadCode) {\ncase ShareConstants.ERROR_LOAD_GET_INTENT_FAIL:ShareTinkerLog.e(TAG,\"can't get the right intent return code\");\nthrow new TinkerRuntimeException(\"can't get the right intent return code\");\ncase ShareConstants.ERROR_LOAD_DISABLE:ShareTinkerLog.w(TAG,\"tinker is disable, just return\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST:case ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST:ShareTinkerLog.w(TAG,\"can't find patch file, is ok, just return\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED:ShareTinkerLog.e(TAG,\"path info corrupted\");\ntinker.getLoadReporter().onLoadPatchInfoCorrupted(oldVersion,newVersion,patchInfoFile);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK:ShareTinkerLog.e(TAG,\"path info blank, wait main process to restart\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST:ShareTinkerLog.e(TAG,\"patch version directory not found, current version:%s\",currentVersion);\ntinker.getLoadReporter().onLoadFileNotFound(patchVersionDirectory,ShareConstants.TYPE_PATCH_FILE,true);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST:ShareTinkerLog.e(TAG,\"patch version file not found, current version:%s\",currentVersion);\nif (patchVersionFile == null) {\nthrow new TinkerRuntimeException(\"error load patch version file not exist, but file is null\");\n}\ntinker.getLoadReporter().onLoadFileNotFound(patchVersionFile,ShareConstants.TYPE_PATCH_FILE,false);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL:ShareTinkerLog.i(TAG,\"patch package check fail\");\nif (patchVersionFile == null) {\nthrow new TinkerRuntimeException(\"error patch package check fail , but file is null\");\n}\nint errorCode=intentResult.getIntExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_LOAD_GET_INTENT_FAIL);\ntinker.getLoadReporter().onLoadPackageCheckFail(patchVersionFile,errorCode);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_DIRECTORY_NOT_EXIST:if (dexDirectory != null) {\nShareTinkerLog.e(TAG,\"patch dex file directory not found:%s\",dexDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(dexDirectory,ShareConstants.TYPE_DEX,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST:String dexPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH);\nif (dexPath != null) {\nShareTinkerLog.e(TAG,\"patch dex file not found:%s\",dexPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(dexPath),ShareConstants.TYPE_DEX,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST:String dexOptPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH);\nif (dexOptPath != null) {\nShareTinkerLog.e(TAG,\"patch dex opt file not found:%s\",dexOptPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(dexOptPath),ShareConstants.TYPE_DEX_OPT,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex opt file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex opt file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_DIRECTORY_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch lib file directory not found:%s\",libraryDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(libraryDirectory,ShareConstants.TYPE_LIBRARY,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch lib file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch lib file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_FILE_NOT_EXIST:String libPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_LIB_PATH);\nif (libPath != null) {\nShareTinkerLog.e(TAG,\"patch lib file not found:%s\",libPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(libPath),ShareConstants.TYPE_LIBRARY,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch lib file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch lib file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_CLASSLOADER_NULL:ShareTinkerLog.e(TAG,\"patch dex load fail, classloader is null\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH:String mismatchPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH);\nif (mismatchPath == null) {\nShareTinkerLog.e(TAG,\"patch dex file md5 is mismatch, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file md5 is mismatch, but path is null!!!!\");\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file md5 is mismatch: %s\",mismatchPath);\ntinker.getLoadReporter().onLoadFileMd5Mismatch(new File(mismatchPath),ShareConstants.TYPE_DEX);\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL:ShareTinkerLog.i(TAG,\"rewrite patch info file corrupted\");\ntinker.getLoadReporter().onLoadPatchInfoCorrupted(oldVersion,newVersion,patchInfoFile);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_DIRECTORY_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch resource file directory not found:%s\",resourceDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(resourceDirectory,ShareConstants.TYPE_RESOURCE,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch resource file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch resource file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_FILE_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch resource file not found:%s\",resourceFile.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(resourceFile,ShareConstants.TYPE_RESOURCE,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch resource file not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch resource file not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_MD5_MISMATCH:if (resourceFile == null) {\nShareTinkerLog.e(TAG,\"resource file md5 mismatch, but patch resource file not found!\");\nthrow new TinkerRuntimeException(\"resource file md5 mismatch, but patch resource file not found!\");\n}\nShareTinkerLog.e(TAG,\"patch resource file md5 is mismatch: %s\",resourceFile.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileMd5Mismatch(resourceFile,ShareConstants.TYPE_RESOURCE);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_GET_OTA_INSTRUCTION_SET_EXCEPTION:tinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_GET_INSTRUCTION_SET_ERROR,ShareIntentUtil.getIntentInterpretException(intentResult));\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_OTA_INTERPRET_ONLY_EXCEPTION:tinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_COMMAND_ERROR,ShareIntentUtil.getIntentInterpretException(intentResult));\nbreak;\ncase ShareConstants.ERROR_LOAD_OK:ShareTinkerLog.i(TAG,\"oh yeah, tinker load all success\");\ntinker.setTinkerLoaded(true);\ndexes=ShareIntentUtil.getIntentPatchDexPaths(intentResult);\nlibs=ShareIntentUtil.getIntentPatchLibsPaths(intentResult);\npackageConfig=ShareIntentUtil.getIntentPackageConfig(intentResult);\nif (useInterpretMode) {\ntinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_OK,null);\n}\nif (isMainProcess && versionChanged) {\ntinker.getLoadReporter().onLoadPatchVersionChanged(oldVersion,newVersion,patchDirectory,patchVersionDirectory.getName());\n}\nreturn true;\ndefault:break;\n}\nreturn false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1096,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 16207,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 344,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean parseTinkerResult(Context context,Intent intentResult){\n  Tinker tinker=Tinker.with(context);\n  loadCode=ShareIntentUtil.getIntentReturnCode(intentResult);\n  costTime=ShareIntentUtil.getIntentPatchCostTime(intentResult);\n  systemOTA=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA,false);\n  oatDir=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_OAT_DIR);\n  useInterpretMode=ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH.equals(oatDir);\n  final boolean isMainProcess=tinker.isMainProcess();\n  ShareTinkerLog.i(TAG,\"parseTinkerResult loadCode:%d, process name:%s, main process:%b, systemOTA:%b, fingerPrint:%s, oatDir:%s, useInterpretMode:%b\",loadCode,ShareTinkerInternals.getProcessName(context),isMainProcess,systemOTA,Build.FINGERPRINT,oatDir,useInterpretMode);\n  final String oldVersion=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_OLD_VERSION);\n  final String newVersion=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_NEW_VERSION);\n  final File patchDirectory=tinker.getPatchDirectory();\n  final File patchInfoFile=tinker.getPatchInfoFile();\n  if (oldVersion != null && newVersion != null) {\n    if (isMainProcess) {\n      currentVersion=newVersion;\n    }\n else {\n      currentVersion=oldVersion;\n    }\n    ShareTinkerLog.i(TAG,\"parseTinkerResult oldVersion:%s, newVersion:%s, current:%s\",oldVersion,newVersion,currentVersion);\n    String patchName=SharePatchFileUtil.getPatchVersionDirectory(currentVersion);\n    if (!ShareTinkerInternals.isNullOrNil(patchName)) {\n      patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + patchName);\n      patchVersionFile=new File(patchVersionDirectory.getAbsolutePath(),SharePatchFileUtil.getPatchVersionFile(currentVersion));\n      dexDirectory=new File(patchVersionDirectory,ShareConstants.DEX_PATH);\n      libraryDirectory=new File(patchVersionDirectory,ShareConstants.SO_PATH);\n      resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n      resourceFile=new File(resourceDirectory,ShareConstants.RES_NAME);\n    }\n    final boolean isProtectedApp=ShareIntentUtil.getBooleanExtra(intentResult,ShareIntentUtil.INTENT_IS_PROTECTED_APP,false);\n    patchInfo=new SharePatchInfo(oldVersion,newVersion,isProtectedApp,false,Build.FINGERPRINT,oatDir,false);\n    versionChanged=!(oldVersion.equals(newVersion));\n  }\n  Throwable exception=ShareIntentUtil.getIntentPatchException(intentResult);\n  if (exception != null) {\n    ShareTinkerLog.i(TAG,\"Tinker load have exception loadCode:%d\",loadCode);\n    int errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNKNOWN;\nswitch (loadCode) {\ncase ShareConstants.ERROR_LOAD_PATCH_UNKNOWN_EXCEPTION:      errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNKNOWN;\n    break;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION:  errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_DEX;\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION:errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_RESOURCE;\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION:errorCode=ShareConstants.ERROR_LOAD_EXCEPTION_UNCAUGHT;\nbreak;\ndefault:break;\n}\ntinker.getLoadReporter().onLoadException(exception,errorCode);\nreturn false;\n}\nswitch (loadCode) {\ncase ShareConstants.ERROR_LOAD_GET_INTENT_FAIL:ShareTinkerLog.e(TAG,\"can't get the right intent return code\");\nthrow new TinkerRuntimeException(\"can't get the right intent return code\");\ncase ShareConstants.ERROR_LOAD_DISABLE:ShareTinkerLog.w(TAG,\"tinker is disable, just return\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST:case ShareConstants.ERROR_LOAD_PATCH_INFO_NOT_EXIST:ShareTinkerLog.w(TAG,\"can't find patch file, is ok, just return\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED:ShareTinkerLog.e(TAG,\"path info corrupted\");\ntinker.getLoadReporter().onLoadPatchInfoCorrupted(oldVersion,newVersion,patchInfoFile);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_INFO_BLANK:ShareTinkerLog.e(TAG,\"path info blank, wait main process to restart\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DIRECTORY_NOT_EXIST:ShareTinkerLog.e(TAG,\"patch version directory not found, current version:%s\",currentVersion);\ntinker.getLoadReporter().onLoadFileNotFound(patchVersionDirectory,ShareConstants.TYPE_PATCH_FILE,true);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_FILE_NOT_EXIST:ShareTinkerLog.e(TAG,\"patch version file not found, current version:%s\",currentVersion);\nif (patchVersionFile == null) {\nthrow new TinkerRuntimeException(\"error load patch version file not exist, but file is null\");\n}\ntinker.getLoadReporter().onLoadFileNotFound(patchVersionFile,ShareConstants.TYPE_PATCH_FILE,false);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL:ShareTinkerLog.i(TAG,\"patch package check fail\");\nif (patchVersionFile == null) {\nthrow new TinkerRuntimeException(\"error patch package check fail , but file is null\");\n}\nint errorCode=intentResult.getIntExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_LOAD_GET_INTENT_FAIL);\ntinker.getLoadReporter().onLoadPackageCheckFail(patchVersionFile,errorCode);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_DIRECTORY_NOT_EXIST:if (dexDirectory != null) {\nShareTinkerLog.e(TAG,\"patch dex file directory not found:%s\",dexDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(dexDirectory,ShareConstants.TYPE_DEX,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST:String dexPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH);\nif (dexPath != null) {\nShareTinkerLog.e(TAG,\"patch dex file not found:%s\",dexPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(dexPath),ShareConstants.TYPE_DEX,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST:String dexOptPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH);\nif (dexOptPath != null) {\nShareTinkerLog.e(TAG,\"patch dex opt file not found:%s\",dexOptPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(dexOptPath),ShareConstants.TYPE_DEX_OPT,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex opt file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex opt file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_DIRECTORY_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch lib file directory not found:%s\",libraryDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(libraryDirectory,ShareConstants.TYPE_LIBRARY,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch lib file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch lib file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_FILE_NOT_EXIST:String libPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISSING_LIB_PATH);\nif (libPath != null) {\nShareTinkerLog.e(TAG,\"patch lib file not found:%s\",libPath);\ntinker.getLoadReporter().onLoadFileNotFound(new File(libPath),ShareConstants.TYPE_LIBRARY,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch lib file not found, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch lib file not found, but path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_CLASSLOADER_NULL:ShareTinkerLog.e(TAG,\"patch dex load fail, classloader is null\");\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH:String mismatchPath=ShareIntentUtil.getStringExtra(intentResult,ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH);\nif (mismatchPath == null) {\nShareTinkerLog.e(TAG,\"patch dex file md5 is mismatch, but path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch dex file md5 is mismatch, but path is null!!!!\");\n}\n else {\nShareTinkerLog.e(TAG,\"patch dex file md5 is mismatch: %s\",mismatchPath);\ntinker.getLoadReporter().onLoadFileMd5Mismatch(new File(mismatchPath),ShareConstants.TYPE_DEX);\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_REWRITE_PATCH_INFO_FAIL:ShareTinkerLog.i(TAG,\"rewrite patch info file corrupted\");\ntinker.getLoadReporter().onLoadPatchInfoCorrupted(oldVersion,newVersion,patchInfoFile);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_DIRECTORY_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch resource file directory not found:%s\",resourceDirectory.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(resourceDirectory,ShareConstants.TYPE_RESOURCE,true);\n}\n else {\nShareTinkerLog.e(TAG,\"patch resource file directory not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch resource file directory not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_FILE_NOT_EXIST:if (patchVersionDirectory != null) {\nShareTinkerLog.e(TAG,\"patch resource file not found:%s\",resourceFile.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileNotFound(resourceFile,ShareConstants.TYPE_RESOURCE,false);\n}\n else {\nShareTinkerLog.e(TAG,\"patch resource file not found, warning why the path is null!!!!\");\nthrow new TinkerRuntimeException(\"patch resource file not found, warning why the path is null!!!!\");\n}\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_MD5_MISMATCH:if (resourceFile == null) {\nShareTinkerLog.e(TAG,\"resource file md5 mismatch, but patch resource file not found!\");\nthrow new TinkerRuntimeException(\"resource file md5 mismatch, but patch resource file not found!\");\n}\nShareTinkerLog.e(TAG,\"patch resource file md5 is mismatch: %s\",resourceFile.getAbsolutePath());\ntinker.getLoadReporter().onLoadFileMd5Mismatch(resourceFile,ShareConstants.TYPE_RESOURCE);\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_GET_OTA_INSTRUCTION_SET_EXCEPTION:tinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_GET_INSTRUCTION_SET_ERROR,ShareIntentUtil.getIntentInterpretException(intentResult));\nbreak;\ncase ShareConstants.ERROR_LOAD_PATCH_OTA_INTERPRET_ONLY_EXCEPTION:tinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_COMMAND_ERROR,ShareIntentUtil.getIntentInterpretException(intentResult));\nbreak;\ncase ShareConstants.ERROR_LOAD_OK:ShareTinkerLog.i(TAG,\"oh yeah, tinker load all success\");\ntinker.setTinkerLoaded(true);\ndexes=ShareIntentUtil.getIntentPatchDexPaths(intentResult);\nlibs=ShareIntentUtil.getIntentPatchLibsPaths(intentResult);\npackageConfig=ShareIntentUtil.getIntentPackageConfig(intentResult);\nif (useInterpretMode) {\ntinker.getLoadReporter().onLoadInterpret(ShareConstants.TYPE_INTERPRET_OK,null);\n}\nif (isMainProcess && versionChanged) {\ntinker.getLoadReporter().onLoadPatchVersionChanged(oldVersion,newVersion,patchDirectory,patchVersionDirectory.getName());\n}\nreturn true;\ndefault:break;\n}\nreturn false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1108,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 113,
        "endColumnNumber" : 93
      },
      "nodeContext" : "resourceDirectory=new File(patchVersionDirectory,ShareConstants.RES_PATH);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 56,
    "startLineNumber" : 113,
    "startColumnNumber" : 36,
    "endLineNumber" : 113,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}