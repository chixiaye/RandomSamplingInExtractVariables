{
  "id" : 285,
  "expression" : "dis.available() > 0",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/FollowerHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dis.available() > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 314,
      "startColumnNumber" : 27,
      "endLineNumber" : 314,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 314,
        "startColumnNumber" : 20,
        "endLineNumber" : 318,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (dis.available() > 0) {\n  long sess=dis.readLong();\n  int to=dis.readInt();\n  leader.zk.touch(sess,to);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 305,
        "startColumnNumber" : 16,
        "endLineNumber" : 352,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (qp.getType()) {\ncase Leader.ACK:  leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\nbreak;\ncase Leader.PING:ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\nDataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\nlong sess=dis.readLong();\nint to=dis.readInt();\nleader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 252,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2870,
        "startLineNumber" : 288,
        "startColumnNumber" : 25,
        "endLineNumber" : 353,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  qp=new QuorumPacket();\n  ia.readRecord(qp,\"packet\");\n  long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n  if (qp.getType() == Leader.PING) {\n    traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n  }\n  ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n  tickOfLastAck=leader.self.tick;\n  ByteBuffer bb;\n  long sessionId;\n  int cxid;\n  int type;\nswitch (qp.getType()) {\ncase Leader.ACK:    leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n  break;\ncase Leader.PING:ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\nDataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\nlong sess=dis.readLong();\nint to=dis.readInt();\nleader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2883,
        "startLineNumber" : 288,
        "startColumnNumber" : 12,
        "endLineNumber" : 353,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  qp=new QuorumPacket();\n  ia.readRecord(qp,\"packet\");\n  long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n  if (qp.getType() == Leader.PING) {\n    traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n  }\n  ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n  tickOfLastAck=leader.self.tick;\n  ByteBuffer bb;\n  long sessionId;\n  int cxid;\n  int type;\nswitch (qp.getType()) {\ncase Leader.ACK:    leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n  break;\ncase Leader.PING:ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\nDataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\nlong sess=dis.readLong();\nint to=dis.readInt();\nleader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 322,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7359,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 354,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ia=BinaryInputArchive.getArchive(new BufferedInputStream(sock.getInputStream()));\n  bufferedOutput=new BufferedOutputStream(sock.getOutputStream());\n  oa=BinaryOutputArchive.getArchive(bufferedOutput);\n  QuorumPacket qp=new QuorumPacket();\n  ia.readRecord(qp,\"packet\");\n  if (qp.getType() != Leader.LASTZXID) {\n    LOG.error(\"First packet \" + qp.toString() + \" is not LASTZXID!\");\n    return;\n  }\n  long peerLastZxid=qp.getZxid();\n  int packetToSend=Leader.SNAP;\n  boolean logTxns=true;\n  long zxidToSend=0;\nsynchronized (leader.zk.committedLog) {\n    if (leader.zk.committedLog.size() != 0) {\n      if ((leader.zk.maxCommittedLog >= peerLastZxid) && (leader.zk.minCommittedLog <= peerLastZxid)) {\n        packetToSend=Leader.DIFF;\n        zxidToSend=leader.zk.maxCommittedLog;\n        for (        Proposal propose : leader.zk.committedLog) {\n          if (propose.packet.getZxid() > peerLastZxid) {\n            queuePacket(propose.packet);\n            QuorumPacket qcommit=new QuorumPacket(Leader.COMMIT,propose.packet.getZxid(),null,null);\n            queuePacket(qcommit);\n          }\n        }\n      }\n    }\n else {\n      logTxns=false;\n    }\n  }\n  long leaderLastZxid=leader.startForwarding(this,peerLastZxid);\n  QuorumPacket newLeaderQP=new QuorumPacket(Leader.NEWLEADER,leaderLastZxid,null,null);\n  oa.writeRecord(newLeaderQP,\"packet\");\n  bufferedOutput.flush();\n  if (peerLastZxid == leaderLastZxid) {\n    packetToSend=Leader.DIFF;\n    zxidToSend=leaderLastZxid;\n  }\n  if (logTxns && (peerLastZxid > leader.zk.maxCommittedLog)) {\n    packetToSend=Leader.TRUNC;\n    zxidToSend=leader.zk.maxCommittedLog;\n  }\n  oa.writeRecord(new QuorumPacket(packetToSend,zxidToSend,null,null),\"packet\");\n  bufferedOutput.flush();\n  if (packetToSend == Leader.SNAP) {\n    LOG.warn(\"Sending snapshot last zxid of peer is 0x\" + Long.toHexString(peerLastZxid) + \" \"+ \" zxid of leader is 0x\"+ Long.toHexString(leaderLastZxid));\n    leader.zk.serializeSnapshot(oa);\n    oa.writeString(\"BenWasHere\",\"signature\");\n  }\n  bufferedOutput.flush();\n  queuedPackets.add(new QuorumPacket(Leader.UPTODATE,-1,null,null));\n  new Thread(){\n    public void run(){\n      Thread.currentThread().setName(\"Sender-\" + sock.getRemoteSocketAddress());\n      try {\n        sendPackets();\n      }\n catch (      InterruptedException e) {\n        LOG.warn(\"Unexpected interruption\",e);\n      }\n    }\n  }\n.start();\n  while (true) {\n    qp=new QuorumPacket();\n    ia.readRecord(qp,\"packet\");\n    long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n    if (qp.getType() == Leader.PING) {\n      traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n    }\n    ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n    tickOfLastAck=leader.self.tick;\n    ByteBuffer bb;\n    long sessionId;\n    int cxid;\n    int type;\nswitch (qp.getType()) {\ncase Leader.ACK:      leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n    break;\ncase Leader.PING:  ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\nDataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\nlong sess=dis.readLong();\nint to=dis.readInt();\nleader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 697,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8129,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 372,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ia=BinaryInputArchive.getArchive(new BufferedInputStream(sock.getInputStream()));\n  bufferedOutput=new BufferedOutputStream(sock.getOutputStream());\n  oa=BinaryOutputArchive.getArchive(bufferedOutput);\n  QuorumPacket qp=new QuorumPacket();\n  ia.readRecord(qp,\"packet\");\n  if (qp.getType() != Leader.LASTZXID) {\n    LOG.error(\"First packet \" + qp.toString() + \" is not LASTZXID!\");\n    return;\n  }\n  long peerLastZxid=qp.getZxid();\n  int packetToSend=Leader.SNAP;\n  boolean logTxns=true;\n  long zxidToSend=0;\nsynchronized (leader.zk.committedLog) {\n    if (leader.zk.committedLog.size() != 0) {\n      if ((leader.zk.maxCommittedLog >= peerLastZxid) && (leader.zk.minCommittedLog <= peerLastZxid)) {\n        packetToSend=Leader.DIFF;\n        zxidToSend=leader.zk.maxCommittedLog;\n        for (        Proposal propose : leader.zk.committedLog) {\n          if (propose.packet.getZxid() > peerLastZxid) {\n            queuePacket(propose.packet);\n            QuorumPacket qcommit=new QuorumPacket(Leader.COMMIT,propose.packet.getZxid(),null,null);\n            queuePacket(qcommit);\n          }\n        }\n      }\n    }\n else {\n      logTxns=false;\n    }\n  }\n  long leaderLastZxid=leader.startForwarding(this,peerLastZxid);\n  QuorumPacket newLeaderQP=new QuorumPacket(Leader.NEWLEADER,leaderLastZxid,null,null);\n  oa.writeRecord(newLeaderQP,\"packet\");\n  bufferedOutput.flush();\n  if (peerLastZxid == leaderLastZxid) {\n    packetToSend=Leader.DIFF;\n    zxidToSend=leaderLastZxid;\n  }\n  if (logTxns && (peerLastZxid > leader.zk.maxCommittedLog)) {\n    packetToSend=Leader.TRUNC;\n    zxidToSend=leader.zk.maxCommittedLog;\n  }\n  oa.writeRecord(new QuorumPacket(packetToSend,zxidToSend,null,null),\"packet\");\n  bufferedOutput.flush();\n  if (packetToSend == Leader.SNAP) {\n    LOG.warn(\"Sending snapshot last zxid of peer is 0x\" + Long.toHexString(peerLastZxid) + \" \"+ \" zxid of leader is 0x\"+ Long.toHexString(leaderLastZxid));\n    leader.zk.serializeSnapshot(oa);\n    oa.writeString(\"BenWasHere\",\"signature\");\n  }\n  bufferedOutput.flush();\n  queuedPackets.add(new QuorumPacket(Leader.UPTODATE,-1,null,null));\n  new Thread(){\n    public void run(){\n      Thread.currentThread().setName(\"Sender-\" + sock.getRemoteSocketAddress());\n      try {\n        sendPackets();\n      }\n catch (      InterruptedException e) {\n        LOG.warn(\"Unexpected interruption\",e);\n      }\n    }\n  }\n.start();\n  while (true) {\n    qp=new QuorumPacket();\n    ia.readRecord(qp,\"packet\");\n    long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n    if (qp.getType() == Leader.PING) {\n      traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n    }\n    ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n    tickOfLastAck=leader.self.tick;\n    ByteBuffer bb;\n    long sessionId;\n    int cxid;\n    int type;\nswitch (qp.getType()) {\ncase Leader.ACK:      leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n    break;\ncase Leader.PING:  ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\nDataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\nlong sess=dis.readLong();\nint to=dis.readInt();\nleader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n}\n catch (IOException e) {\nif (sock != null && !sock.isClosed()) {\nLOG.error(\"Unexpected exception causing shutdown while sock \" + \"still open\",e);\n}\n}\ncatch (InterruptedException e) {\nLOG.error(\"Unexpected exception causing shutdown\",e);\n}\n finally {\nLOG.warn(\"******* GOODBYE \" + (sock != null ? sock.getRemoteSocketAddress() : \"<null>\") + \" ********\");\ntry {\nqueuedPackets.put(proposalOfDeath);\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ignoring unexpected exception\",e);\n}\nshutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 773,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8145,
        "startLineNumber" : 190,
        "startColumnNumber" : 22,
        "endLineNumber" : 373,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ia=BinaryInputArchive.getArchive(new BufferedInputStream(sock.getInputStream()));\n    bufferedOutput=new BufferedOutputStream(sock.getOutputStream());\n    oa=BinaryOutputArchive.getArchive(bufferedOutput);\n    QuorumPacket qp=new QuorumPacket();\n    ia.readRecord(qp,\"packet\");\n    if (qp.getType() != Leader.LASTZXID) {\n      LOG.error(\"First packet \" + qp.toString() + \" is not LASTZXID!\");\n      return;\n    }\n    long peerLastZxid=qp.getZxid();\n    int packetToSend=Leader.SNAP;\n    boolean logTxns=true;\n    long zxidToSend=0;\nsynchronized (leader.zk.committedLog) {\n      if (leader.zk.committedLog.size() != 0) {\n        if ((leader.zk.maxCommittedLog >= peerLastZxid) && (leader.zk.minCommittedLog <= peerLastZxid)) {\n          packetToSend=Leader.DIFF;\n          zxidToSend=leader.zk.maxCommittedLog;\n          for (          Proposal propose : leader.zk.committedLog) {\n            if (propose.packet.getZxid() > peerLastZxid) {\n              queuePacket(propose.packet);\n              QuorumPacket qcommit=new QuorumPacket(Leader.COMMIT,propose.packet.getZxid(),null,null);\n              queuePacket(qcommit);\n            }\n          }\n        }\n      }\n else {\n        logTxns=false;\n      }\n    }\n    long leaderLastZxid=leader.startForwarding(this,peerLastZxid);\n    QuorumPacket newLeaderQP=new QuorumPacket(Leader.NEWLEADER,leaderLastZxid,null,null);\n    oa.writeRecord(newLeaderQP,\"packet\");\n    bufferedOutput.flush();\n    if (peerLastZxid == leaderLastZxid) {\n      packetToSend=Leader.DIFF;\n      zxidToSend=leaderLastZxid;\n    }\n    if (logTxns && (peerLastZxid > leader.zk.maxCommittedLog)) {\n      packetToSend=Leader.TRUNC;\n      zxidToSend=leader.zk.maxCommittedLog;\n    }\n    oa.writeRecord(new QuorumPacket(packetToSend,zxidToSend,null,null),\"packet\");\n    bufferedOutput.flush();\n    if (packetToSend == Leader.SNAP) {\n      LOG.warn(\"Sending snapshot last zxid of peer is 0x\" + Long.toHexString(peerLastZxid) + \" \"+ \" zxid of leader is 0x\"+ Long.toHexString(leaderLastZxid));\n      leader.zk.serializeSnapshot(oa);\n      oa.writeString(\"BenWasHere\",\"signature\");\n    }\n    bufferedOutput.flush();\n    queuedPackets.add(new QuorumPacket(Leader.UPTODATE,-1,null,null));\n    new Thread(){\n      public void run(){\n        Thread.currentThread().setName(\"Sender-\" + sock.getRemoteSocketAddress());\n        try {\n          sendPackets();\n        }\n catch (        InterruptedException e) {\n          LOG.warn(\"Unexpected interruption\",e);\n        }\n      }\n    }\n.start();\n    while (true) {\n      qp=new QuorumPacket();\n      ia.readRecord(qp,\"packet\");\n      long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n      if (qp.getType() == Leader.PING) {\n        traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n      }\n      ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n      tickOfLastAck=leader.self.tick;\n      ByteBuffer bb;\n      long sessionId;\n      int cxid;\n      int type;\nswitch (qp.getType()) {\ncase Leader.ACK:        leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n      break;\ncase Leader.PING:    ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\n  DataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\n  long sess=dis.readLong();\n  int to=dis.readInt();\n  leader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n}\n catch (IOException e) {\nif (sock != null && !sock.isClosed()) {\nLOG.error(\"Unexpected exception causing shutdown while sock \" + \"still open\",e);\n}\n}\ncatch (InterruptedException e) {\nLOG.error(\"Unexpected exception causing shutdown\",e);\n}\n finally {\nLOG.warn(\"******* GOODBYE \" + (sock != null ? sock.getRemoteSocketAddress() : \"<null>\") + \" ********\");\ntry {\nqueuedPackets.put(proposalOfDeath);\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ignoring unexpected exception\",e);\n}\nshutdown();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8330,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 373,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This thread will receive packets from the follower and process them and also listen to new connections from new followers.\n */\n@Override public void run(){\n  try {\n    ia=BinaryInputArchive.getArchive(new BufferedInputStream(sock.getInputStream()));\n    bufferedOutput=new BufferedOutputStream(sock.getOutputStream());\n    oa=BinaryOutputArchive.getArchive(bufferedOutput);\n    QuorumPacket qp=new QuorumPacket();\n    ia.readRecord(qp,\"packet\");\n    if (qp.getType() != Leader.LASTZXID) {\n      LOG.error(\"First packet \" + qp.toString() + \" is not LASTZXID!\");\n      return;\n    }\n    long peerLastZxid=qp.getZxid();\n    int packetToSend=Leader.SNAP;\n    boolean logTxns=true;\n    long zxidToSend=0;\nsynchronized (leader.zk.committedLog) {\n      if (leader.zk.committedLog.size() != 0) {\n        if ((leader.zk.maxCommittedLog >= peerLastZxid) && (leader.zk.minCommittedLog <= peerLastZxid)) {\n          packetToSend=Leader.DIFF;\n          zxidToSend=leader.zk.maxCommittedLog;\n          for (          Proposal propose : leader.zk.committedLog) {\n            if (propose.packet.getZxid() > peerLastZxid) {\n              queuePacket(propose.packet);\n              QuorumPacket qcommit=new QuorumPacket(Leader.COMMIT,propose.packet.getZxid(),null,null);\n              queuePacket(qcommit);\n            }\n          }\n        }\n      }\n else {\n        logTxns=false;\n      }\n    }\n    long leaderLastZxid=leader.startForwarding(this,peerLastZxid);\n    QuorumPacket newLeaderQP=new QuorumPacket(Leader.NEWLEADER,leaderLastZxid,null,null);\n    oa.writeRecord(newLeaderQP,\"packet\");\n    bufferedOutput.flush();\n    if (peerLastZxid == leaderLastZxid) {\n      packetToSend=Leader.DIFF;\n      zxidToSend=leaderLastZxid;\n    }\n    if (logTxns && (peerLastZxid > leader.zk.maxCommittedLog)) {\n      packetToSend=Leader.TRUNC;\n      zxidToSend=leader.zk.maxCommittedLog;\n    }\n    oa.writeRecord(new QuorumPacket(packetToSend,zxidToSend,null,null),\"packet\");\n    bufferedOutput.flush();\n    if (packetToSend == Leader.SNAP) {\n      LOG.warn(\"Sending snapshot last zxid of peer is 0x\" + Long.toHexString(peerLastZxid) + \" \"+ \" zxid of leader is 0x\"+ Long.toHexString(leaderLastZxid));\n      leader.zk.serializeSnapshot(oa);\n      oa.writeString(\"BenWasHere\",\"signature\");\n    }\n    bufferedOutput.flush();\n    queuedPackets.add(new QuorumPacket(Leader.UPTODATE,-1,null,null));\n    new Thread(){\n      public void run(){\n        Thread.currentThread().setName(\"Sender-\" + sock.getRemoteSocketAddress());\n        try {\n          sendPackets();\n        }\n catch (        InterruptedException e) {\n          LOG.warn(\"Unexpected interruption\",e);\n        }\n      }\n    }\n.start();\n    while (true) {\n      qp=new QuorumPacket();\n      ia.readRecord(qp,\"packet\");\n      long traceMask=ZooTrace.SERVER_PACKET_TRACE_MASK;\n      if (qp.getType() == Leader.PING) {\n        traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n      }\n      ZooTrace.logQuorumPacket(LOG,traceMask,'i',qp);\n      tickOfLastAck=leader.self.tick;\n      ByteBuffer bb;\n      long sessionId;\n      int cxid;\n      int type;\nswitch (qp.getType()) {\ncase Leader.ACK:        leader.processAck(qp.getZxid(),sock.getLocalSocketAddress());\n      break;\ncase Leader.PING:    ByteArrayInputStream bis=new ByteArrayInputStream(qp.getData());\n  DataInputStream dis=new DataInputStream(bis);\nwhile (dis.available() > 0) {\n  long sess=dis.readLong();\n  int to=dis.readInt();\n  leader.zk.touch(sess,to);\n}\nbreak;\ncase Leader.REVALIDATE:bis=new ByteArrayInputStream(qp.getData());\ndis=new DataInputStream(bis);\nlong id=dis.readLong();\nint to=dis.readInt();\nByteArrayOutputStream bos=new ByteArrayOutputStream();\nDataOutputStream dos=new DataOutputStream(bos);\ndos.writeLong(id);\nboolean valid=leader.zk.touch(id,to);\nZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK,\"Session 0x\" + Long.toHexString(id) + \" is valid: \"+ valid);\ndos.writeBoolean(valid);\nqp.setData(bos.toByteArray());\nqueuedPackets.add(qp);\nbreak;\ncase Leader.REQUEST:bb=ByteBuffer.wrap(qp.getData());\nsessionId=bb.getLong();\ncxid=bb.getInt();\ntype=bb.getInt();\nbb=bb.slice();\nif (type == OpCode.sync) {\nleader.zk.submitRequest(new FollowerSyncRequest(this,sessionId,cxid,type,bb,qp.getAuthinfo()));\n}\n else {\nleader.zk.submitRequest(null,sessionId,type,cxid,bb,qp.getAuthinfo());\n}\nbreak;\ndefault:}\n}\n}\n catch (IOException e) {\nif (sock != null && !sock.isClosed()) {\nLOG.error(\"Unexpected exception causing shutdown while sock \" + \"still open\",e);\n}\n}\ncatch (InterruptedException e) {\nLOG.error(\"Unexpected exception causing shutdown\",e);\n}\n finally {\nLOG.warn(\"******* GOODBYE \" + (sock != null ? sock.getRemoteSocketAddress() : \"<null>\") + \" ********\");\ntry {\nqueuedPackets.put(proposalOfDeath);\n}\n catch (InterruptedException e) {\nLOG.warn(\"Ignoring unexpected exception\",e);\n}\nshutdown();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 781,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 314,
        "startColumnNumber" : 20,
        "endLineNumber" : 318,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (dis.available() > 0) {\n  long sess=dis.readLong();\n  int to=dis.readInt();\n  leader.zk.touch(sess,to);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 314,
    "startColumnNumber" : 27,
    "endLineNumber" : 314,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}