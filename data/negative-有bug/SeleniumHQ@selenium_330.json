{
  "id" : 330,
  "expression" : "req",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/tracing/SpanWrappedHttpHandler.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 57,
      "startColumnNumber" : 26,
      "endLineNumber" : 57,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 57,
        "startColumnNumber" : 26,
        "endLineNumber" : 57,
        "endColumnNumber" : 67
      },
      "nodeContext" : "req.getAttribute(\"selenium.tracing.span\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 57,
        "startColumnNumber" : 11,
        "endLineNumber" : 57,
        "endColumnNumber" : 67
      },
      "nodeContext" : "possibleSpan=req.getAttribute(\"selenium.tracing.span\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 63,
      "startColumnNumber" : 30,
      "endLineNumber" : 63,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 63,
        "startColumnNumber" : 13,
        "endLineNumber" : 63,
        "endColumnNumber" : 34
      },
      "nodeContext" : "delegate.execute(req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 63,
        "startColumnNumber" : 6,
        "endLineNumber" : 63,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return delegate.execute(req);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 62,
        "startColumnNumber" : 38,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return delegate.execute(req);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (possibleSpan instanceof Span) {\n  return delegate.execute(req);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 63,
        "startColumnNumber" : 6,
        "endLineNumber" : 63,
        "endColumnNumber" : 35
      },
      "nodeContext" : "return delegate.execute(req);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 66,
      "startColumnNumber" : 62,
      "endLineNumber" : 66,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 66,
        "startColumnNumber" : 50,
        "endLineNumber" : 66,
        "endColumnNumber" : 66
      },
      "nodeContext" : "namer.apply(req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 66,
        "startColumnNumber" : 18,
        "endLineNumber" : 66,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Require.state(\"Operation name\",namer.apply(req))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 66,
        "startColumnNumber" : 18,
        "endLineNumber" : 66,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 66,
        "startColumnNumber" : 11,
        "endLineNumber" : 66,
        "endColumnNumber" : 102
      },
      "nodeContext" : "name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 66,
      "startColumnNumber" : 98,
      "endLineNumber" : 66,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 66,
        "startColumnNumber" : 18,
        "endLineNumber" : 66,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 66,
        "startColumnNumber" : 11,
        "endLineNumber" : 66,
        "endColumnNumber" : 102
      },
      "nodeContext" : "name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 103
      },
      "nodeContext" : "String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 69,
      "startColumnNumber" : 41,
      "endLineNumber" : 69,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 51
      },
      "nodeContext" : "newSpanAsChildOf(tracer,req,name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 69,
        "startColumnNumber" : 9,
        "endLineNumber" : 69,
        "endColumnNumber" : 51
      },
      "nodeContext" : "span=newSpanAsChildOf(tracer,req,name)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Span span=newSpanAsChildOf(tracer,req,name);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Span span=newSpanAsChildOf(tracer,req,name);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 74,
      "startColumnNumber" : 6,
      "endLineNumber" : 74,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 53
      },
      "nodeContext" : "req.setAttribute(\"selenium.tracing.span\",span)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "req.setAttribute(\"selenium.tracing.span\",span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n catch (Throwable t) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,t);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n  throw t;\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "req.setAttribute(\"selenium.tracing.span\",span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 81,
      "startColumnNumber" : 32,
      "endLineNumber" : 81,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 36
      },
      "nodeContext" : "HTTP_REQUEST.accept(span,req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "HTTP_REQUEST.accept(span,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n catch (Throwable t) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,t);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n  throw t;\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 37
      },
      "nodeContext" : "HTTP_REQUEST.accept(span,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 82,
      "startColumnNumber" : 46,
      "endLineNumber" : 82,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "HTTP_REQUEST_EVENT.accept(attributeMap,req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "HTTP_REQUEST_EVENT.accept(attributeMap,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n catch (Throwable t) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,t);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n  throw t;\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "HTTP_REQUEST_EVENT.accept(attributeMap,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 84,
      "startColumnNumber" : 39,
      "endLineNumber" : 84,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 43
      },
      "nodeContext" : "HttpTracing.inject(tracer,span,req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 44
      },
      "nodeContext" : "HttpTracing.inject(tracer,span,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n catch (Throwable t) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,t);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n  throw t;\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 44
      },
      "nodeContext" : "HttpTracing.inject(tracer,span,req);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  }, {
    "nodeContext" : "req",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 86,
      "startColumnNumber" : 42,
      "endLineNumber" : 86,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 86,
        "startColumnNumber" : 25,
        "endLineNumber" : 86,
        "endColumnNumber" : 46
      },
      "nodeContext" : "delegate.execute(req)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 86,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 46
      },
      "nodeContext" : "res=delegate.execute(req)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 47
      },
      "nodeContext" : "HttpResponse res=delegate.execute(req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  TraceContext after=tracer.getCurrentContext();\n  span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n  req.setAttribute(\"selenium.tracing.span\",span);\n  if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n    LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n  }\n  KIND.accept(span,Span.Kind.SERVER);\n  HTTP_REQUEST.accept(span,req);\n  HTTP_REQUEST_EVENT.accept(attributeMap,req);\n  HttpTracing.inject(tracer,span,req);\n  HttpResponse res=delegate.execute(req);\n  HTTP_RESPONSE.accept(span,res);\n  HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n  span.addEvent(\"HTTP request execution complete\",attributeMap);\n  return res;\n}\n catch (Throwable t) {\n  span.setAttribute(\"error\",true);\n  span.setStatus(Status.UNKNOWN);\n  EXCEPTION.accept(attributeMap,t);\n  attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n  span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n  LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n  throw t;\n}\n finally {\n  span.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 55,
        "startColumnNumber" : 75,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2072,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  Object possibleSpan=req.getAttribute(\"selenium.tracing.span\");\n  Map<String,EventAttributeValue> attributeMap=new HashMap<>();\n  attributeMap.put(AttributeKey.HTTP_HANDLER_CLASS.getKey(),EventAttribute.setValue(delegate.getClass().getName()));\n  if (possibleSpan instanceof Span) {\n    return delegate.execute(req);\n  }\n  String name=Require.state(\"Operation name\",namer.apply(req)).nonNull(\"must be set for %s\",req);\n  TraceContext before=tracer.getCurrentContext();\n  Span span=newSpanAsChildOf(tracer,req,name);\n  try {\n    TraceContext after=tracer.getCurrentContext();\n    span.setAttribute(\"random.key\",UUID.randomUUID().toString());\n    req.setAttribute(\"selenium.tracing.span\",span);\n    if (!(after.getClass().getName().equals(\"org.openqa.selenium.remote.tracing.empty.NullContext\"))) {\n      LOG.fine(String.format(\"Wrapping request. Before %s and after %s\",before,after));\n    }\n    KIND.accept(span,Span.Kind.SERVER);\n    HTTP_REQUEST.accept(span,req);\n    HTTP_REQUEST_EVENT.accept(attributeMap,req);\n    HttpTracing.inject(tracer,span,req);\n    HttpResponse res=delegate.execute(req);\n    HTTP_RESPONSE.accept(span,res);\n    HTTP_RESPONSE_EVENT.accept(attributeMap,res);\n    span.addEvent(\"HTTP request execution complete\",attributeMap);\n    return res;\n  }\n catch (  Throwable t) {\n    span.setAttribute(\"error\",true);\n    span.setStatus(Status.UNKNOWN);\n    EXCEPTION.accept(attributeMap,t);\n    attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),EventAttribute.setValue(\"Unable to execute request: \" + t.getMessage()));\n    span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(),attributeMap);\n    LOG.log(Level.WARNING,\"Unable to execute request: \" + t.getMessage(),t);\n    throw t;\n  }\n finally {\n    span.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 47
      },
      "nodeContext" : "HttpResponse res=delegate.execute(req);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.openqa.selenium.remote.http.HttpRequest"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 57,
    "startColumnNumber" : 26,
    "endLineNumber" : 57,
    "endColumnNumber" : 29
  }, {
    "charLength" : 3,
    "startLineNumber" : 63,
    "startColumnNumber" : 30,
    "endLineNumber" : 63,
    "endColumnNumber" : 33
  }, {
    "charLength" : 3,
    "startLineNumber" : 66,
    "startColumnNumber" : 62,
    "endLineNumber" : 66,
    "endColumnNumber" : 65
  }, {
    "charLength" : 3,
    "startLineNumber" : 66,
    "startColumnNumber" : 98,
    "endLineNumber" : 66,
    "endColumnNumber" : 101
  }, {
    "charLength" : 3,
    "startLineNumber" : 69,
    "startColumnNumber" : 41,
    "endLineNumber" : 69,
    "endColumnNumber" : 44
  }, {
    "charLength" : 3,
    "startLineNumber" : 74,
    "startColumnNumber" : 6,
    "endLineNumber" : 74,
    "endColumnNumber" : 9
  }, {
    "charLength" : 3,
    "startLineNumber" : 81,
    "startColumnNumber" : 32,
    "endLineNumber" : 81,
    "endColumnNumber" : 35
  }, {
    "charLength" : 3,
    "startLineNumber" : 82,
    "startColumnNumber" : 46,
    "endLineNumber" : 82,
    "endColumnNumber" : 49
  }, {
    "charLength" : 3,
    "startLineNumber" : 84,
    "startColumnNumber" : 39,
    "endLineNumber" : 84,
    "endColumnNumber" : 42
  }, {
    "charLength" : 3,
    "startLineNumber" : 86,
    "startColumnNumber" : 42,
    "endLineNumber" : 86,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  } ]
}