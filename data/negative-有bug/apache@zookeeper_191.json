{
  "id" : 191,
  "expression" : "ServerState.FOLLOWING",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServerState.FOLLOWING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 574,
      "startColumnNumber" : 53,
      "endLineNumber" : 574,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 573,
        "startColumnNumber" : 42,
        "endLineNumber" : 574,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 573,
        "startColumnNumber" : 24,
        "endLineNumber" : 574,
        "endColumnNumber" : 75
      },
      "nodeContext" : "self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 573,
        "startColumnNumber" : 24,
        "endLineNumber" : 574,
        "endColumnNumber" : 76
      },
      "nodeContext" : "self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 572,
        "startColumnNumber" : 67,
        "endLineNumber" : 578,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 572,
        "startColumnNumber" : 20,
        "endLineNumber" : 599,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4525,
        "startLineNumber" : 551,
        "startColumnNumber" : 16,
        "endLineNumber" : 635,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (n.state) {\ncase LOOKING:  LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\nif (n.epoch > logicalclock) {\n  logicalclock=n.epoch;\n  recvset.clear();\n  updateProposal(self.getId(),self.getLastLoggedZxid());\n  sendNotifications();\n}\n else if (n.epoch < logicalclock) {\n  break;\n}\n else if (totalOrderPredicate(n.leader,n.zxid)) {\n  updateProposal(n.leader,n.zxid);\n  sendNotifications();\n}\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\nif (totalOrderPredicate(n.leader,n.zxid)) {\n  recvqueue.put(n);\n  break;\n}\n}\nif (n == null) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nLOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 421,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4603,
        "startLineNumber" : 549,
        "startColumnNumber" : 17,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5096,
        "startLineNumber" : 535,
        "startColumnNumber" : 12,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (n == null) {\n  if (manager.haveDelivered()) {\n    sendNotifications();\n  }\n else {\n    manager.connectAll();\n  }\n  int tmpTimeOut=notTimeout * 2;\n  notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n  LOG.info(\"Notification time out: \" + notTimeout);\n}\n else {\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 5508,
        "startLineNumber" : 524,
        "startColumnNumber" : 59,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5559,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (self.getPeerState() == ServerState.LOOKING) {\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 485,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6105,
        "startLineNumber" : 505,
        "startColumnNumber" : 60,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 554,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6363,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Starts a new round of leader election. Whenever our QuorumPeer  changes its state to LOOKING, this method is invoked, and it  sends notifications to al other peers.\n */\npublic Vote lookForLeader() throws InterruptedException {\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 562,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 573,
        "startColumnNumber" : 42,
        "endLineNumber" : 574,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.server.quorum.QuorumPeer.ServerState"
  }, {
    "nodeContext" : "ServerState.FOLLOWING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 592,
      "startColumnNumber" : 53,
      "endLineNumber" : 592,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 591,
        "startColumnNumber" : 46,
        "endLineNumber" : 592,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 591,
        "startColumnNumber" : 28,
        "endLineNumber" : 592,
        "endColumnNumber" : 75
      },
      "nodeContext" : "self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 591,
        "startColumnNumber" : 28,
        "endLineNumber" : 592,
        "endColumnNumber" : 76
      },
      "nodeContext" : "self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 590,
        "startColumnNumber" : 39,
        "endLineNumber" : 598,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 590,
        "startColumnNumber" : 24,
        "endLineNumber" : 598,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1134,
        "startLineNumber" : 578,
        "startColumnNumber" : 109,
        "endLineNumber" : 599,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1216,
        "startLineNumber" : 578,
        "startColumnNumber" : 27,
        "endLineNumber" : 599,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 572,
        "startColumnNumber" : 20,
        "endLineNumber" : 599,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4525,
        "startLineNumber" : 551,
        "startColumnNumber" : 16,
        "endLineNumber" : 635,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (n.state) {\ncase LOOKING:  LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\nif (n.epoch > logicalclock) {\n  logicalclock=n.epoch;\n  recvset.clear();\n  updateProposal(self.getId(),self.getLastLoggedZxid());\n  sendNotifications();\n}\n else if (n.epoch < logicalclock) {\n  break;\n}\n else if (totalOrderPredicate(n.leader,n.zxid)) {\n  updateProposal(n.leader,n.zxid);\n  sendNotifications();\n}\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\nif (totalOrderPredicate(n.leader,n.zxid)) {\n  recvqueue.put(n);\n  break;\n}\n}\nif (n == null) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nLOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 421,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4603,
        "startLineNumber" : 549,
        "startColumnNumber" : 17,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5096,
        "startLineNumber" : 535,
        "startColumnNumber" : 12,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (n == null) {\n  if (manager.haveDelivered()) {\n    sendNotifications();\n  }\n else {\n    manager.connectAll();\n  }\n  int tmpTimeOut=notTimeout * 2;\n  notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n  LOG.info(\"Notification time out: \" + notTimeout);\n}\n else {\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 5508,
        "startLineNumber" : 524,
        "startColumnNumber" : 59,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5559,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (self.getPeerState() == ServerState.LOOKING) {\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 485,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6105,
        "startLineNumber" : 505,
        "startColumnNumber" : 60,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 554,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6363,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Starts a new round of leader election. Whenever our QuorumPeer  changes its state to LOOKING, this method is invoked, and it  sends notifications to al other peers.\n */\npublic Vote lookForLeader() throws InterruptedException {\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 562,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 591,
        "startColumnNumber" : 46,
        "endLineNumber" : 592,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.server.quorum.QuorumPeer.ServerState"
  }, {
    "nodeContext" : "ServerState.FOLLOWING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 610,
      "startColumnNumber" : 53,
      "endLineNumber" : 610,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 609,
        "startColumnNumber" : 42,
        "endLineNumber" : 610,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 609,
        "startColumnNumber" : 24,
        "endLineNumber" : 610,
        "endColumnNumber" : 75
      },
      "nodeContext" : "self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 609,
        "startColumnNumber" : 24,
        "endLineNumber" : 610,
        "endColumnNumber" : 76
      },
      "nodeContext" : "self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 608,
        "startColumnNumber" : 47,
        "endLineNumber" : 614,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(n.leader,n.zxid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 608,
        "startColumnNumber" : 20,
        "endLineNumber" : 614,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (n.epoch == logicalclock) {\n  self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(n.leader,n.zxid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4525,
        "startLineNumber" : 551,
        "startColumnNumber" : 16,
        "endLineNumber" : 635,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (n.state) {\ncase LOOKING:  LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\nif (n.epoch > logicalclock) {\n  logicalclock=n.epoch;\n  recvset.clear();\n  updateProposal(self.getId(),self.getLastLoggedZxid());\n  sendNotifications();\n}\n else if (n.epoch < logicalclock) {\n  break;\n}\n else if (totalOrderPredicate(n.leader,n.zxid)) {\n  updateProposal(n.leader,n.zxid);\n  sendNotifications();\n}\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\nif (totalOrderPredicate(n.leader,n.zxid)) {\n  recvqueue.put(n);\n  break;\n}\n}\nif (n == null) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nLOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 421,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4603,
        "startLineNumber" : 549,
        "startColumnNumber" : 17,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5096,
        "startLineNumber" : 535,
        "startColumnNumber" : 12,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (n == null) {\n  if (manager.haveDelivered()) {\n    sendNotifications();\n  }\n else {\n    manager.connectAll();\n  }\n  int tmpTimeOut=notTimeout * 2;\n  notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n  LOG.info(\"Notification time out: \" + notTimeout);\n}\n else {\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 5508,
        "startLineNumber" : 524,
        "startColumnNumber" : 59,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5559,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (self.getPeerState() == ServerState.LOOKING) {\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 485,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6105,
        "startLineNumber" : 505,
        "startColumnNumber" : 60,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 554,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6363,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Starts a new round of leader election. Whenever our QuorumPeer  changes its state to LOOKING, this method is invoked, and it  sends notifications to al other peers.\n */\npublic Vote lookForLeader() throws InterruptedException {\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 562,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 609,
        "startColumnNumber" : 42,
        "endLineNumber" : 610,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.server.quorum.QuorumPeer.ServerState"
  }, {
    "nodeContext" : "ServerState.FOLLOWING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 627,
      "startColumnNumber" : 57,
      "endLineNumber" : 627,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 626,
        "startColumnNumber" : 46,
        "endLineNumber" : 627,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 626,
        "startColumnNumber" : 28,
        "endLineNumber" : 627,
        "endColumnNumber" : 79
      },
      "nodeContext" : "self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 626,
        "startColumnNumber" : 28,
        "endLineNumber" : 627,
        "endColumnNumber" : 80
      },
      "nodeContext" : "self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 624,
        "startColumnNumber" : 42,
        "endLineNumber" : 628,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  logicalclock=n.epoch;\n  self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 624,
        "startColumnNumber" : 24,
        "endLineNumber" : 628,
        "endColumnNumber" : 25
      },
      "nodeContext" : "synchronized (this) {\n  logicalclock=n.epoch;\n  self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 623,
        "startColumnNumber" : 78,
        "endLineNumber" : 631,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\nsynchronized (this) {\n    logicalclock=n.epoch;\n    self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  }\n  leaveInstance();\n  return new Vote(n.leader,n.zxid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 622,
        "startColumnNumber" : 20,
        "endLineNumber" : 631,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\n    logicalclock=n.epoch;\n    self.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  }\n  leaveInstance();\n  return new Vote(n.leader,n.zxid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4525,
        "startLineNumber" : 551,
        "startColumnNumber" : 16,
        "endLineNumber" : 635,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (n.state) {\ncase LOOKING:  LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\nif (n.epoch > logicalclock) {\n  logicalclock=n.epoch;\n  recvset.clear();\n  updateProposal(self.getId(),self.getLastLoggedZxid());\n  sendNotifications();\n}\n else if (n.epoch < logicalclock) {\n  break;\n}\n else if (totalOrderPredicate(n.leader,n.zxid)) {\n  updateProposal(n.leader,n.zxid);\n  sendNotifications();\n}\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\nif (totalOrderPredicate(n.leader,n.zxid)) {\n  recvqueue.put(n);\n  break;\n}\n}\nif (n == null) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nLOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 421,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4603,
        "startLineNumber" : 549,
        "startColumnNumber" : 17,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5096,
        "startLineNumber" : 535,
        "startColumnNumber" : 12,
        "endLineNumber" : 636,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (n == null) {\n  if (manager.haveDelivered()) {\n    sendNotifications();\n  }\n else {\n    manager.connectAll();\n  }\n  int tmpTimeOut=notTimeout * 2;\n  notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n  LOG.info(\"Notification time out: \" + notTimeout);\n}\n else {\nswitch (n.state) {\ncase LOOKING:    LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n  if (n.epoch > logicalclock) {\n    logicalclock=n.epoch;\n    recvset.clear();\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n    sendNotifications();\n  }\n else   if (n.epoch < logicalclock) {\n    break;\n  }\n else   if (totalOrderPredicate(n.leader,n.zxid)) {\n    updateProposal(n.leader,n.zxid);\n    sendNotifications();\n  }\nrecvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\nself.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\nLOG.debug(\"Passed predicate\");\nwhile ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n  if (totalOrderPredicate(n.leader,n.zxid)) {\n    recvqueue.put(n);\n    break;\n  }\n}\nif (n == null) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 464,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 5508,
        "startLineNumber" : 524,
        "startColumnNumber" : 59,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5559,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 637,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (self.getPeerState() == ServerState.LOOKING) {\n  Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n  if (n == null) {\n    if (manager.haveDelivered()) {\n      sendNotifications();\n    }\n else {\n      manager.connectAll();\n    }\n    int tmpTimeOut=notTimeout * 2;\n    notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n    LOG.info(\"Notification time out: \" + notTimeout);\n  }\n else {\nswitch (n.state) {\ncase LOOKING:      LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n    if (n.epoch > logicalclock) {\n      logicalclock=n.epoch;\n      recvset.clear();\n      updateProposal(self.getId(),self.getLastLoggedZxid());\n      sendNotifications();\n    }\n else     if (n.epoch < logicalclock) {\n      break;\n    }\n else     if (totalOrderPredicate(n.leader,n.zxid)) {\n      updateProposal(n.leader,n.zxid);\n      sendNotifications();\n    }\n  recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\nif (self.quorumPeers.size() == recvset.size()) {\n  self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n  leaveInstance();\n  return new Vote(proposedLeader,proposedZxid);\n}\n else if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n  LOG.debug(\"Passed predicate\");\n  while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n    if (totalOrderPredicate(n.leader,n.zxid)) {\n      recvqueue.put(n);\n      break;\n    }\n  }\n  if (n == null) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n}\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 485,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6105,
        "startLineNumber" : 505,
        "startColumnNumber" : 60,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 554,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6363,
        "startLineNumber" : 500,
        "startColumnNumber" : 4,
        "endLineNumber" : 640,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Starts a new round of leader election. Whenever our QuorumPeer  changes its state to LOOKING, this method is invoked, and it  sends notifications to al other peers.\n */\npublic Vote lookForLeader() throws InterruptedException {\n  HashMap<Long,Vote> recvset=new HashMap<Long,Vote>();\n  HashMap<Long,Vote> outofelection=new HashMap<Long,Vote>();\n  int notTimeout=finalizeWait;\nsynchronized (this) {\n    logicalclock++;\n    updateProposal(self.getId(),self.getLastLoggedZxid());\n  }\n  LOG.info(\"New election: \" + proposedZxid);\n  sendNotifications();\n  while (self.getPeerState() == ServerState.LOOKING) {\n    Notification n=recvqueue.poll(notTimeout,TimeUnit.MILLISECONDS);\n    if (n == null) {\n      if (manager.haveDelivered()) {\n        sendNotifications();\n      }\n else {\n        manager.connectAll();\n      }\n      int tmpTimeOut=notTimeout * 2;\n      notTimeout=(tmpTimeOut < maxNotificationInterval ? tmpTimeOut : maxNotificationInterval);\n      LOG.info(\"Notification time out: \" + notTimeout);\n    }\n else {\nswitch (n.state) {\ncase LOOKING:        LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\n      if (n.epoch > logicalclock) {\n        logicalclock=n.epoch;\n        recvset.clear();\n        updateProposal(self.getId(),self.getLastLoggedZxid());\n        sendNotifications();\n      }\n else       if (n.epoch < logicalclock) {\n        break;\n      }\n else       if (totalOrderPredicate(n.leader,n.zxid)) {\n        updateProposal(n.leader,n.zxid);\n        sendNotifications();\n      }\n    recvset.put(n.sid,new Vote(n.leader,n.zxid,n.epoch));\n  if (self.quorumPeers.size() == recvset.size()) {\n    self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n    leaveInstance();\n    return new Vote(proposedLeader,proposedZxid);\n  }\n else   if (termPredicate(recvset,new Vote(proposedLeader,proposedZxid,logicalclock))) {\n    LOG.debug(\"Passed predicate\");\n    while ((n=recvqueue.poll(finalizeWait,TimeUnit.MILLISECONDS)) != null) {\n      if (totalOrderPredicate(n.leader,n.zxid)) {\n        recvqueue.put(n);\n        break;\n      }\n    }\n    if (n == null) {\n      self.setPeerState((proposedLeader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n      LOG.info(\"About to leave instance:\" + proposedLeader + \", \"+ proposedZxid+ \", \"+ self.getId()+ \", \"+ self.getPeerState());\n      leaveInstance();\n      return new Vote(proposedLeader,proposedZxid);\n    }\n  }\nbreak;\ncase LEADING:if (n.epoch == logicalclock) {\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\ncase FOLLOWING:LOG.info(\"Notification: \" + n.leader + \", \"+ n.zxid+ \", \"+ n.epoch+ \", \"+ self.getId()+ \", \"+ self.getPeerState()+ \", \"+ n.state+ \", \"+ n.sid);\noutofelection.put(n.sid,new Vote(n.leader,n.zxid,n.epoch,n.state));\nif (termPredicate(outofelection,new Vote(n.leader,n.zxid,n.epoch,n.state)) && checkLeader(outofelection,n.leader,n.epoch)) {\nsynchronized (this) {\nlogicalclock=n.epoch;\nself.setPeerState((n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING);\n}\nleaveInstance();\nreturn new Vote(n.leader,n.zxid);\n}\nbreak;\ndefault:break;\n}\n}\n}\nreturn null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 562,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 626,
        "startColumnNumber" : 46,
        "endLineNumber" : 627,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(n.leader == self.getId()) ? ServerState.LEADING : ServerState.FOLLOWING",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.server.quorum.QuorumPeer.ServerState"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 574,
    "startColumnNumber" : 53,
    "endLineNumber" : 574,
    "endColumnNumber" : 74
  }, {
    "charLength" : 21,
    "startLineNumber" : 592,
    "startColumnNumber" : 53,
    "endLineNumber" : 592,
    "endColumnNumber" : 74
  }, {
    "charLength" : 21,
    "startLineNumber" : 610,
    "startColumnNumber" : 53,
    "endLineNumber" : 610,
    "endColumnNumber" : 74
  }, {
    "charLength" : 21,
    "startLineNumber" : 627,
    "startColumnNumber" : 57,
    "endLineNumber" : 627,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  } ]
}