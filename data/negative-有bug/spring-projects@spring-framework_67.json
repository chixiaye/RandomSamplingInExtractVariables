{
  "id" : 67,
  "expression" : "session",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-webflux/src/test/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketServiceTests.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 49,
      "startColumnNumber" : 2,
      "endLineNumber" : 49,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 25
      },
      "nodeContext" : "session.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 41
      },
      "nodeContext" : "session.getAttributes().put(\"a1\",\"v1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a1\",\"v1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a1\",\"v1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 50,
      "startColumnNumber" : 2,
      "endLineNumber" : 50,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 25
      },
      "nodeContext" : "session.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 41
      },
      "nodeContext" : "session.getAttributes().put(\"a2\",\"v2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a2\",\"v2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a2\",\"v2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 51,
      "startColumnNumber" : 2,
      "endLineNumber" : 51,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 25
      },
      "nodeContext" : "session.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 41
      },
      "nodeContext" : "session.getAttributes().put(\"a3\",\"v3\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a3\",\"v3\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a3\",\"v3\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 52,
      "startColumnNumber" : 2,
      "endLineNumber" : 52,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 25
      },
      "nodeContext" : "session.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 41
      },
      "nodeContext" : "session.getAttributes().put(\"a4\",\"v4\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a4\",\"v4\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a4\",\"v4\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 53,
      "startColumnNumber" : 2,
      "endLineNumber" : 53,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 25
      },
      "nodeContext" : "session.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 41
      },
      "nodeContext" : "session.getAttributes().put(\"a5\",\"v5\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a5\",\"v5\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 42
      },
      "nodeContext" : "session.getAttributes().put(\"a5\",\"v5\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  }, {
    "nodeContext" : "session",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 56,
      "startColumnNumber" : 82,
      "endLineNumber" : 56,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 56,
        "startColumnNumber" : 35,
        "endLineNumber" : 56,
        "endColumnNumber" : 90
      },
      "nodeContext" : "MockServerWebExchange.builder(request).session(session)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 56,
        "startColumnNumber" : 35,
        "endLineNumber" : 56,
        "endColumnNumber" : 98
      },
      "nodeContext" : "MockServerWebExchange.builder(request).session(session).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 56,
        "startColumnNumber" : 24,
        "endLineNumber" : 56,
        "endColumnNumber" : 98
      },
      "nodeContext" : "exchange=MockServerWebExchange.builder(request).session(session).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 99
      },
      "nodeContext" : "MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 46,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sessionAttributePredicate(){\n  MockWebSession session=new MockWebSession();\n  session.getAttributes().put(\"a1\",\"v1\");\n  session.getAttributes().put(\"a2\",\"v2\");\n  session.getAttributes().put(\"a3\",\"v3\");\n  session.getAttributes().put(\"a4\",\"v4\");\n  session.getAttributes().put(\"a5\",\"v5\");\n  MockServerHttpRequest request=initHandshakeRequest();\n  MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n  TestRequestUpgradeStrategy upgradeStrategy=new TestRequestUpgradeStrategy();\n  HandshakeWebSocketService service=new HandshakeWebSocketService(upgradeStrategy);\n  service.setSessionAttributePredicate(name -> Arrays.asList(\"a1\",\"a3\",\"a5\").contains(name));\n  service.handleRequest(exchange,mock(WebSocketHandler.class)).block();\n  HandshakeInfo info=upgradeStrategy.handshakeInfo;\n  assertNotNull(info);\n  Map<String,Object> attributes=info.getAttributes();\n  assertEquals(3,attributes.size());\n  assertThat(attributes,Matchers.hasEntry(\"a1\",\"v1\"));\n  assertThat(attributes,Matchers.hasEntry(\"a3\",\"v3\"));\n  assertThat(attributes,Matchers.hasEntry(\"a5\",\"v5\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 99
      },
      "nodeContext" : "MockServerWebExchange exchange=MockServerWebExchange.builder(request).session(session).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.springframework.mock.web.test.server.MockWebSession"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 49,
    "startColumnNumber" : 2,
    "endLineNumber" : 49,
    "endColumnNumber" : 9
  }, {
    "charLength" : 7,
    "startLineNumber" : 50,
    "startColumnNumber" : 2,
    "endLineNumber" : 50,
    "endColumnNumber" : 9
  }, {
    "charLength" : 7,
    "startLineNumber" : 51,
    "startColumnNumber" : 2,
    "endLineNumber" : 51,
    "endColumnNumber" : 9
  }, {
    "charLength" : 7,
    "startLineNumber" : 52,
    "startColumnNumber" : 2,
    "endLineNumber" : 52,
    "endColumnNumber" : 9
  }, {
    "charLength" : 7,
    "startLineNumber" : 53,
    "startColumnNumber" : 2,
    "endLineNumber" : 53,
    "endColumnNumber" : 9
  }, {
    "charLength" : 7,
    "startLineNumber" : 56,
    "startColumnNumber" : 82,
    "endLineNumber" : 56,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}