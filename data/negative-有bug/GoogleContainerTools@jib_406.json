{
  "id" : 406,
  "expression" : "countingDigestOutputStream",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/hash/CountingDigestOutputStreamTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "countingDigestOutputStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 68,
      "startColumnNumber" : 42,
      "endLineNumber" : 68,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ByteStreams.copy(toHashInputStream,countingDigestOutputStream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 58,
        "startColumnNumber" : 77,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 57,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_smokeTest() throws IOException, DigestException {\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.hash.CountingDigestOutputStream"
  }, {
    "nodeContext" : "countingDigestOutputStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 72,
      "startColumnNumber" : 50,
      "endLineNumber" : 72,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 72,
        "startColumnNumber" : 50,
        "endLineNumber" : 72,
        "endColumnNumber" : 95
      },
      "nodeContext" : "countingDigestOutputStream.toBlobDescriptor()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 58,
        "startColumnNumber" : 77,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 57,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_smokeTest() throws IOException, DigestException {\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.hash.CountingDigestOutputStream"
  }, {
    "nodeContext" : "countingDigestOutputStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 73,
      "startColumnNumber" : 46,
      "endLineNumber" : 73,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 73,
        "startColumnNumber" : 46,
        "endLineNumber" : 73,
        "endColumnNumber" : 88
      },
      "nodeContext" : "countingDigestOutputStream.getTotalBytes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 58,
        "startColumnNumber" : 77,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n  String toHash=knownHash.getKey();\n  String expectedHash=knownHash.getValue();\n  OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n  CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n  byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n  InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n  ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n  BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n  Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n  Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 57,
        "startColumnNumber" : 67,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void test_smokeTest() throws IOException, DigestException {\n  for (  Map.Entry<String,String> knownHash : knownSha256Hashes.entrySet()) {\n    String toHash=knownHash.getKey();\n    String expectedHash=knownHash.getValue();\n    OutputStream underlyingOutputStream=new ByteArrayOutputStream();\n    CountingDigestOutputStream countingDigestOutputStream=new CountingDigestOutputStream(underlyingOutputStream);\n    byte[] bytesToHash=toHash.getBytes(StandardCharsets.UTF_8);\n    InputStream toHashInputStream=new ByteArrayInputStream(bytesToHash);\n    ByteStreams.copy(toHashInputStream,countingDigestOutputStream);\n    BlobDescriptor expectedBlobDescriptor=new BlobDescriptor(bytesToHash.length,DescriptorDigest.fromHash(expectedHash));\n    Assert.assertEquals(expectedBlobDescriptor,countingDigestOutputStream.toBlobDescriptor());\n    Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Assert.assertEquals(bytesToHash.length,countingDigestOutputStream.getTotalBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.hash.CountingDigestOutputStream"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 68,
    "startColumnNumber" : 42,
    "endLineNumber" : 68,
    "endColumnNumber" : 68
  }, {
    "charLength" : 26,
    "startLineNumber" : 72,
    "startColumnNumber" : 50,
    "endLineNumber" : 72,
    "endColumnNumber" : 76
  }, {
    "charLength" : 26,
    "startLineNumber" : 73,
    "startColumnNumber" : 46,
    "endLineNumber" : 73,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}