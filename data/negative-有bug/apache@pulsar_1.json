{
  "id" : 1,
  "expression" : "pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/DispatchAccordingPermitsTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 149,
      "startLineNumber" : 68,
      "startColumnNumber" : 36,
      "endLineNumber" : 70,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 17,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 68,
        "startColumnNumber" : 36,
        "endLineNumber" : 71,
        "endColumnNumber" : 25
      },
      "nodeContext" : "pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 68,
        "startColumnNumber" : 25,
        "endLineNumber" : 71,
        "endColumnNumber" : 25
      },
      "nodeContext" : "producer=pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 63,
        "startColumnNumber" : 109,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic=\"persistent://public/default/testFlowPermitsWithMultiBatchesDispatch\";\n  final String subName=\"test\";\n  admin.topics().createSubscription(topic,\"test\",MessageId.earliest);\n  Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create();\n  for (int i=0; i < 100; i++) {\n    producer.sendAsync(\"msg - \" + i);\n  }\n  producer.flush();\n  for (int i=0; i < 350; i++) {\n    producer.sendAsync(\"msg - \" + i);\n  }\n  producer.flush();\n  for (int i=0; i < 50; i++) {\n    producer.sendAsync(\"msg - \" + i);\n    producer.flush();\n  }\n  Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(subName).subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  for (int i=0; i < 500; i++) {\n    consumer.acknowledge(consumer.receive());\n  }\n  ConsumerImpl<String> consumerImpl=(ConsumerImpl<String>)consumer;\n  Assert.assertEquals(consumerImpl.incomingMessages.size(),0);\n  TopicStats stats=admin.topics().getStats(topic);\n  Assert.assertTrue(stats.getSubscriptions().get(subName).getConsumers().get(0).getAvailablePermits() > 0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2015,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The test case is to simulate dispatch batches with different batch size to the consumer. 1. The consumer has 1000 available permits 2. The producer send batches with different batch size According the batch average size dispatching, the broker will dispatch all the batches to the consumer\n */\n@Test public void testFlowPermitsWithMultiBatchesDispatch() throws PulsarAdminException, PulsarClientException {\n  final String topic=\"persistent://public/default/testFlowPermitsWithMultiBatchesDispatch\";\n  final String subName=\"test\";\n  admin.topics().createSubscription(topic,\"test\",MessageId.earliest);\n  Producer<String> producer=pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create();\n  for (int i=0; i < 100; i++) {\n    producer.sendAsync(\"msg - \" + i);\n  }\n  producer.flush();\n  for (int i=0; i < 350; i++) {\n    producer.sendAsync(\"msg - \" + i);\n  }\n  producer.flush();\n  for (int i=0; i < 50; i++) {\n    producer.sendAsync(\"msg - \" + i);\n    producer.flush();\n  }\n  Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(topic).subscriptionName(subName).subscriptionType(SubscriptionType.Shared).subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  for (int i=0; i < 500; i++) {\n    consumer.acknowledge(consumer.receive());\n  }\n  ConsumerImpl<String> consumerImpl=(ConsumerImpl<String>)consumer;\n  Assert.assertEquals(consumerImpl.incomingMessages.size(),0);\n  TopicStats stats=admin.topics().getStats(topic);\n  Assert.assertTrue(stats.getSubscriptions().get(subName).getConsumers().get(0).getAvailablePermits() > 0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 68,
        "startColumnNumber" : 36,
        "endLineNumber" : 71,
        "endColumnNumber" : 25
      },
      "nodeContext" : "pulsarClient.newProducer(Schema.STRING).topic(topic).batchingMaxPublishDelay(Long.MAX_VALUE,TimeUnit.MILLISECONDS).create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 12,
    "type" : "org.apache.pulsar.client.api.ProducerBuilder<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 149,
    "startLineNumber" : 68,
    "startColumnNumber" : 36,
    "endLineNumber" : 70,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}