{
  "id" : 52,
  "expression" : "Lists",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/ConfigsExportServiceTest.java",
  "occurrences" : 12,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 102,
      "startColumnNumber" : 27,
      "endLineNumber" : 102,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 102,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Lists.newArrayList(app1,app2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 102,
        "startColumnNumber" : 14,
        "endLineNumber" : 102,
        "endColumnNumber" : 57
      },
      "nodeContext" : "exportApps=Lists.newArrayList(app1,app2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 58
      },
      "nodeContext" : "List<App> exportApps=Lists.newArrayList(app1,app2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 58
      },
      "nodeContext" : "List<App> exportApps=Lists.newArrayList(app1,app2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 110,
      "startColumnNumber" : 39,
      "endLineNumber" : 110,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 110,
        "startColumnNumber" : 39,
        "endLineNumber" : 110,
        "endColumnNumber" : 105
      },
      "nodeContext" : "Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 110,
        "startColumnNumber" : 23,
        "endLineNumber" : 110,
        "endColumnNumber" : 105
      },
      "nodeContext" : "appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 106
      },
      "nodeContext" : "List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 106
      },
      "nodeContext" : "List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 122,
      "startColumnNumber" : 8,
      "endLineNumber" : 122,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Lists.newArrayList(app1Cluster1,app1Cluster2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 54
      },
      "nodeContext" : "app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 55
      },
      "nodeContext" : "List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Lists.newArrayList(app1Cluster1,app1Cluster2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 125,
      "startColumnNumber" : 8,
      "endLineNumber" : 125,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Lists.newArrayList(app2Cluster1,app2Cluster2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 55
      },
      "nodeContext" : "List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Lists.newArrayList(app2Cluster1,app2Cluster2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 129,
      "startColumnNumber" : 25,
      "endLineNumber" : 129,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 129,
        "startColumnNumber" : 25,
        "endLineNumber" : 129,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Lists.newArrayList(item1,item2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 129,
        "startColumnNumber" : 17,
        "endLineNumber" : 129,
        "endColumnNumber" : 57
      },
      "nodeContext" : "items=Lists.newArrayList(item1,item2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 58
      },
      "nodeContext" : "List<ItemBO> items=Lists.newArrayList(item1,item2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 58
      },
      "nodeContext" : "List<ItemBO> items=Lists.newArrayList(item1,item2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 135,
      "startColumnNumber" : 46,
      "endLineNumber" : 135,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 135,
        "startColumnNumber" : 46,
        "endLineNumber" : 135,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 135,
        "startColumnNumber" : 22,
        "endLineNumber" : 135,
        "endColumnNumber" : 112
      },
      "nodeContext" : "app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 113
      },
      "nodeContext" : "List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 113
      },
      "nodeContext" : "List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 137,
      "startColumnNumber" : 46,
      "endLineNumber" : 137,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 137,
        "startColumnNumber" : 46,
        "endLineNumber" : 137,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Lists.newArrayList(app1Cluster2Namespace1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 137,
        "startColumnNumber" : 22,
        "endLineNumber" : 137,
        "endColumnNumber" : 88
      },
      "nodeContext" : "app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 89
      },
      "nodeContext" : "List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 89
      },
      "nodeContext" : "List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 140,
      "startColumnNumber" : 46,
      "endLineNumber" : 140,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 140,
        "startColumnNumber" : 46,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Lists.newArrayList(app2Cluster1Namespace1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 140,
        "startColumnNumber" : 22,
        "endLineNumber" : 140,
        "endColumnNumber" : 88
      },
      "nodeContext" : "app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 89
      },
      "nodeContext" : "List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 89
      },
      "nodeContext" : "List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 143,
      "startColumnNumber" : 46,
      "endLineNumber" : 143,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 143,
        "startColumnNumber" : 46,
        "endLineNumber" : 143,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 143,
        "startColumnNumber" : 22,
        "endLineNumber" : 143,
        "endColumnNumber" : 112
      },
      "nodeContext" : "app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 113
      },
      "nodeContext" : "List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 113
      },
      "nodeContext" : "List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 157,
      "startColumnNumber" : 54,
      "endLineNumber" : 157,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 157,
        "startColumnNumber" : 54,
        "endLineNumber" : 157,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Lists.newArrayList(Env.DEV)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 82
      },
      "nodeContext" : "configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 83
      },
      "nodeContext" : "configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 83
      },
      "nodeContext" : "configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 170,
      "startColumnNumber" : 71,
      "endLineNumber" : 170,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 170,
        "startColumnNumber" : 71,
        "endLineNumber" : 170,
        "endColumnNumber" : 91
      },
      "nodeContext" : "Lists.newArrayList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 92
      },
      "nodeContext" : "when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 93
      },
      "nodeContext" : "when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 93
      },
      "nodeContext" : "when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Lists",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 178,
      "startColumnNumber" : 49,
      "endLineNumber" : 178,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 178,
        "startColumnNumber" : 49,
        "endLineNumber" : 178,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Lists.newArrayList(Env.DEV)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 100
      },
      "nodeContext" : "configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 101
      },
      "nodeContext" : "configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5612,
        "startLineNumber" : 84,
        "startColumnNumber" : 71,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 814,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5690,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testNamespaceExportImport() throws FileNotFoundException {\n  String filePath=\"/tmp/apollo.zip\";\n  File file=new File(filePath);\n  if (file.exists()) {\n    file.delete();\n  }\n  UserInfo userInfo=genUser();\n  when(userInfoHolder.getUser()).thenReturn(userInfo);\n  Env env=Env.DEV;\n  String appId1=\"app1\";\n  String appId2=\"app2\";\n  App app1=genApp(appId1,appId1,\"org1\",\"org2\");\n  App app2=genApp(appId2,appId2,\"org1\",\"org2\");\n  List<App> exportApps=Lists.newArrayList(app1,app2);\n  String appNamespaceName1=\"ns1\";\n  String appNamespaceName2=\"ns2\";\n  AppNamespace app1Namespace1=genAppNamespace(appId1,appNamespaceName1,false);\n  AppNamespace app1Namespace2=genAppNamespace(appId1,appNamespaceName2,true);\n  AppNamespace app2Namespace1=genAppNamespace(appId2,appNamespaceName1,false);\n  List<AppNamespace> appNamespaces=Lists.newArrayList(app1Namespace1,app1Namespace2,app2Namespace1);\n  String clusterName1=\"c1\";\n  String clusterName2=\"c2\";\n  ClusterDTO app1Cluster1=genCluster(clusterName1,appId1);\n  ClusterDTO app1Cluster2=genCluster(clusterName2,appId1);\n  ClusterDTO app2Cluster1=genCluster(clusterName1,appId2);\n  ClusterDTO app2Cluster2=genCluster(clusterName2,appId2);\n  List<ClusterDTO> app1Clusters=Lists.newArrayList(app1Cluster1,app1Cluster2);\n  List<ClusterDTO> app2Clusters=Lists.newArrayList(app2Cluster1,app2Cluster2);\n  ItemBO item1=genItem(\"k1\",\"v1\");\n  ItemBO item2=genItem(\"k2\",\"v2\");\n  List<ItemBO> items=Lists.newArrayList(item1,item2);\n  String namespaceName1=\"namespace1\";\n  String namespaceName2=\"namespace2\";\n  NamespaceBO app1Cluster1Namespace1=genNamespace(app1,app1Cluster1,items,namespaceName1);\n  NamespaceBO app1Cluster1Namespace2=genNamespace(app1,app1Cluster1,items,namespaceName2);\n  List<NamespaceBO> app1Cluster1Namespace=Lists.newArrayList(app1Cluster1Namespace1,app1Cluster1Namespace2);\n  NamespaceBO app1Cluster2Namespace1=genNamespace(app1,app1Cluster2,items,namespaceName1);\n  List<NamespaceBO> app1Cluster2Namespace=Lists.newArrayList(app1Cluster2Namespace1);\n  NamespaceBO app2Cluster1Namespace1=genNamespace(app2,app1Cluster1,items,namespaceName1);\n  List<NamespaceBO> app2Cluster1Namespace=Lists.newArrayList(app2Cluster1Namespace1);\n  NamespaceBO app2Cluster2Namespace1=genNamespace(app2,app1Cluster2,items,namespaceName1);\n  NamespaceBO app2Cluster2Namespace2=genNamespace(app2,app1Cluster2,items,namespaceName2);\n  List<NamespaceBO> app2Cluster2Namespace=Lists.newArrayList(app2Cluster2Namespace1,app2Cluster2Namespace2);\n  when(appService.findAll()).thenReturn(exportApps);\n  when(appNamespaceService.findAll()).thenReturn(appNamespaces);\n  when(permissionValidator.isAppAdmin(any())).thenReturn(true);\n  when(clusterService.findClusters(env,appId1)).thenReturn(app1Clusters);\n  when(clusterService.findClusters(env,appId2)).thenReturn(app2Clusters);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName1)).thenReturn(app1Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId1,Env.DEV,clusterName2)).thenReturn(app1Cluster2Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName1)).thenReturn(app2Cluster1Namespace);\n  when(namespaceService.findNamespaceBOs(appId2,Env.DEV,clusterName2)).thenReturn(app2Cluster2Namespace);\n  FileOutputStream fileOutputStream=new FileOutputStream(\"/tmp/apollo.zip\");\n  configsExportService.exportData(fileOutputStream,Lists.newArrayList(Env.DEV));\n  when(appNamespaceService.findByAppIdAndName(any(),any())).thenReturn(null);\n  when(appNamespaceService.importAppNamespaceInLocal(any())).thenReturn(app1Namespace1);\n  when(appService.load(any())).thenReturn(null);\n  when(appService.load(any(),any())).thenThrow(new RuntimeException());\n  when(clusterService.loadCluster(any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.loadNamespaceBaseInfo(any(),any(),any(),any())).thenThrow(new RuntimeException());\n  when(namespaceService.createNamespace(any(),any())).thenReturn(genNamespaceDTO(1));\n  when(itemService.findItems(any(),any(),any(),any())).thenReturn(Lists.newArrayList());\n  HttpStatusCodeException itemNotFoundException=new HttpClientErrorException(HttpStatus.NOT_FOUND);\n  when(itemService.loadItem(any(),any(),any(),any(),anyString())).thenThrow(itemNotFoundException);\n  FileInputStream fileInputStream=new FileInputStream(\"/tmp/apollo.zip\");\n  ZipInputStream zipInputStream=new ZipInputStream(fileInputStream);\n  try {\n    configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  verify(appNamespaceService,times(3)).importAppNamespaceInLocal(any());\n  verify(applicationEventPublisher,times(3)).publishEvent(any());\n  verify(appService,times(2)).createAppInRemote(any(),any());\n  verify(clusterService,times(4)).createCluster(any(),any());\n  verify(namespaceService,times(6)).createNamespace(any(),any());\n  verify(roleInitializationService,times(6)).initNamespaceRoles(any(),any(),anyString());\n  verify(roleInitializationService,times(6)).initNamespaceEnvRoles(any(),any(),anyString());\n  verify(itemService,times(12)).createItem(any(),any(),any(),any(),any());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 822,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 101
      },
      "nodeContext" : "configsImportService.importDataFromZipFile(Lists.newArrayList(Env.DEV),zipInputStream,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 102,
    "startColumnNumber" : 27,
    "endLineNumber" : 102,
    "endColumnNumber" : 32
  }, {
    "charLength" : 5,
    "startLineNumber" : 110,
    "startColumnNumber" : 39,
    "endLineNumber" : 110,
    "endColumnNumber" : 44
  }, {
    "charLength" : 5,
    "startLineNumber" : 122,
    "startColumnNumber" : 8,
    "endLineNumber" : 122,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 125,
    "startColumnNumber" : 8,
    "endLineNumber" : 125,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 129,
    "startColumnNumber" : 25,
    "endLineNumber" : 129,
    "endColumnNumber" : 30
  }, {
    "charLength" : 5,
    "startLineNumber" : 135,
    "startColumnNumber" : 46,
    "endLineNumber" : 135,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 137,
    "startColumnNumber" : 46,
    "endLineNumber" : 137,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 140,
    "startColumnNumber" : 46,
    "endLineNumber" : 140,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 143,
    "startColumnNumber" : 46,
    "endLineNumber" : 143,
    "endColumnNumber" : 51
  }, {
    "charLength" : 5,
    "startLineNumber" : 157,
    "startColumnNumber" : 54,
    "endLineNumber" : 157,
    "endColumnNumber" : 59
  }, {
    "charLength" : 5,
    "startLineNumber" : 170,
    "startColumnNumber" : 71,
    "endLineNumber" : 170,
    "endColumnNumber" : 76
  }, {
    "charLength" : 5,
    "startLineNumber" : 178,
    "startColumnNumber" : 49,
    "endLineNumber" : 178,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 5
  } ]
}