{
  "id" : 26,
  "expression" : "\",\"",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/test/java/com/blankj/utilcode/util/TestUtils.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\",\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 92,
      "startColumnNumber" : 76,
      "endLineNumber" : 92,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 92,
        "startColumnNumber" : 46,
        "endLineNumber" : 92,
        "endColumnNumber" : 86
      },
      "nodeContext" : "line.replace(\" \",\"\").replace(\",\",\", \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 92,
        "startColumnNumber" : 46,
        "endLineNumber" : 92,
        "endColumnNumber" : 99
      },
      "nodeContext" : "line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 29,
        "endLineNumber" : 92,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 100
      },
      "nodeContext" : "maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 101
      },
      "nodeContext" : "maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 90,
        "startColumnNumber" : 72,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (line.equals(\"```\"))   continue;\n  maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n  if (line.equals(\"```\"))   continue;\n  maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 85,
        "startColumnNumber" : 66,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n else {\n  sb.append(line);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 83,
        "startColumnNumber" : 57,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=4, len=list.size(); i < len; ++i) {\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 234,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1980,
        "startLineNumber" : 75,
        "startColumnNumber" : 44,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void formatCN() throws Exception {\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 101
      },
      "nodeContext" : "maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\",\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 101,
      "startColumnNumber" : 67,
      "endLineNumber" : 101,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 101,
        "startColumnNumber" : 37,
        "endLineNumber" : 101,
        "endColumnNumber" : 77
      },
      "nodeContext" : "line.replace(\" \",\"\").replace(\",\",\", \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 101,
        "startColumnNumber" : 37,
        "endLineNumber" : 101,
        "endColumnNumber" : 90
      },
      "nodeContext" : "line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 101,
        "startColumnNumber" : 28,
        "endLineNumber" : 101,
        "endColumnNumber" : 90
      },
      "nodeContext" : "maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 101,
        "startColumnNumber" : 24,
        "endLineNumber" : 101,
        "endColumnNumber" : 90
      },
      "nodeContext" : "l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':')",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 91
      },
      "nodeContext" : "int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 95,
        "startColumnNumber" : 63,
        "endLineNumber" : 108,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (line.equals(\"```\")) {\n    sb.append(\"```\").append(LINE_SEP);\n    continue;\n  }\n  String noSpaceLine=line.replace(\" \",\"\");\n  int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n  String spaces=\"\";\n  for (int j=0; j < l; j++) {\n    spaces+=space;\n  }\n  String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n  sb.append(temp.replace(\",\",\", \"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 772,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (; !line.equals(\"\"); line=list.get(++i)) {\n  if (line.equals(\"```\")) {\n    sb.append(\"```\").append(LINE_SEP);\n    continue;\n  }\n  String noSpaceLine=line.replace(\" \",\"\");\n  int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n  String spaces=\"\";\n  for (int j=0; j < l; j++) {\n    spaces+=space;\n  }\n  String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n  sb.append(temp.replace(\",\",\", \"));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 85,
        "startColumnNumber" : 66,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n else {\n  sb.append(line);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 83,
        "startColumnNumber" : 57,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=4, len=list.size(); i < len; ++i) {\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 234,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1980,
        "startLineNumber" : 75,
        "startColumnNumber" : 44,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void formatCN() throws Exception {\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 91
      },
      "nodeContext" : "int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\",\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 107,
      "startColumnNumber" : 43,
      "endLineNumber" : 107,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 107,
        "startColumnNumber" : 30,
        "endLineNumber" : 107,
        "endColumnNumber" : 53
      },
      "nodeContext" : "temp.replace(\",\",\", \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 107,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sb.append(temp.replace(\",\",\", \"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 107,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sb.append(temp.replace(\",\",\", \"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 95,
        "startColumnNumber" : 63,
        "endLineNumber" : 108,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (line.equals(\"```\")) {\n    sb.append(\"```\").append(LINE_SEP);\n    continue;\n  }\n  String noSpaceLine=line.replace(\" \",\"\");\n  int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n  String spaces=\"\";\n  for (int j=0; j < l; j++) {\n    spaces+=space;\n  }\n  String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n  sb.append(temp.replace(\",\",\", \"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 772,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (; !line.equals(\"\"); line=list.get(++i)) {\n  if (line.equals(\"```\")) {\n    sb.append(\"```\").append(LINE_SEP);\n    continue;\n  }\n  String noSpaceLine=line.replace(\" \",\"\");\n  int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n  String spaces=\"\";\n  for (int j=0; j < l; j++) {\n    spaces+=space;\n  }\n  String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n  sb.append(temp.replace(\",\",\", \"));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 85,
        "startColumnNumber" : 66,
        "endLineNumber" : 109,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n  sb.append(line).append(LINE_SEP);\n  int maxLen=0;\n  line=list.get(++i);\n  for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n    if (line.equals(\"```\"))     continue;\n    maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n  }\n  line=list.get(i);\n  for (; !line.equals(\"\"); line=list.get(++i)) {\n    if (line.equals(\"```\")) {\n      sb.append(\"```\").append(LINE_SEP);\n      continue;\n    }\n    String noSpaceLine=line.replace(\" \",\"\");\n    int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n    String spaces=\"\";\n    for (int j=0; j < l; j++) {\n      spaces+=space;\n    }\n    String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n    sb.append(temp.replace(\",\",\", \"));\n  }\n}\n else {\n  sb.append(line);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1459,
        "startLineNumber" : 83,
        "startColumnNumber" : 57,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=4, len=list.size(); i < len; ++i) {\n  String line=list.get(i);\n  if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n    sb.append(line).append(LINE_SEP);\n    int maxLen=0;\n    line=list.get(++i);\n    for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n      if (line.equals(\"```\"))       continue;\n      maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n    }\n    line=list.get(i);\n    for (; !line.equals(\"\"); line=list.get(++i)) {\n      if (line.equals(\"```\")) {\n        sb.append(\"```\").append(LINE_SEP);\n        continue;\n      }\n      String noSpaceLine=line.replace(\" \",\"\");\n      int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n      String spaces=\"\";\n      for (int j=0; j < l; j++) {\n        spaces+=space;\n      }\n      String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n      sb.append(temp.replace(\",\",\", \"));\n    }\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 234,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1980,
        "startLineNumber" : 75,
        "startColumnNumber" : 44,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void formatCN() throws Exception {\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    sb.append(list.get(i)).append(LINE_SEP);\n  }\n  String space=\" \";\n  for (int i=4, len=list.size(); i < len; ++i) {\n    String line=list.get(i);\n    if (line.contains(\"* ###\") && line.contains(\"Utils\")) {\n      sb.append(line).append(LINE_SEP);\n      int maxLen=0;\n      line=list.get(++i);\n      for (int j=i; !line.equals(\"\"); line=list.get(++j)) {\n        if (line.equals(\"```\"))         continue;\n        maxLen=Math.max(maxLen,line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':'));\n      }\n      line=list.get(i);\n      for (; !line.equals(\"\"); line=list.get(++i)) {\n        if (line.equals(\"```\")) {\n          sb.append(\"```\").append(LINE_SEP);\n          continue;\n        }\n        String noSpaceLine=line.replace(\" \",\"\");\n        int l=maxLen - line.replace(\" \",\"\").replace(\",\",\", \").indexOf(':');\n        String spaces=\"\";\n        for (int j=0; j < l; j++) {\n          spaces+=space;\n        }\n        String temp=noSpaceLine.substring(0,noSpaceLine.indexOf(':')) + spaces + \": \"+ noSpaceLine.substring(noSpaceLine.indexOf(':') + 1)+ LINE_SEP;\n        sb.append(temp.replace(\",\",\", \"));\n      }\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeCN,sb.toString(),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 107,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 55
      },
      "nodeContext" : "sb.append(temp.replace(\",\",\", \"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 92,
    "startColumnNumber" : 76,
    "endLineNumber" : 92,
    "endColumnNumber" : 79
  }, {
    "charLength" : 3,
    "startLineNumber" : 101,
    "startColumnNumber" : 67,
    "endLineNumber" : 101,
    "endColumnNumber" : 70
  }, {
    "charLength" : 3,
    "startLineNumber" : 107,
    "startColumnNumber" : 43,
    "endLineNumber" : 107,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}