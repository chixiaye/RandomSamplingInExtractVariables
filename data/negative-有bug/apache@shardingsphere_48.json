{
  "id" : 48,
  "expression" : "(FunctionSegment)segment",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-kernel/shardingsphere-sql-federation/shardingsphere-sql-federation-optimizer/src/main/java/org/apache/shardingsphere/sqlfederation/optimizer/converter/segment/expression/ExpressionConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(FunctionSegment)segment",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 84,
      "startColumnNumber" : 51,
      "endLineNumber" : 84,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 84,
        "startColumnNumber" : 19,
        "endLineNumber" : 84,
        "endColumnNumber" : 77
      },
      "nodeContext" : "new FunctionConverter().convert((FunctionSegment)segment)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return new FunctionConverter().convert((FunctionSegment)segment);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 83,
        "startColumnNumber" : 55,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 83,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 79,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 911,
        "startLineNumber" : 77,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 75,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1247,
        "startLineNumber" : 73,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 71,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof ColumnSegment) {\n  return new ColumnConverter().convert((ColumnSegment)segment);\n}\n else if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 69,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof BinaryOperationExpression) {\n  return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n}\n else if (segment instanceof ColumnSegment) {\n  return new ColumnConverter().convert((ColumnSegment)segment);\n}\n else if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 160,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1690,
        "startLineNumber" : 67,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof ListExpression) {\n  return new ListExpressionConverter().convert((ListExpression)segment);\n}\n else if (segment instanceof BinaryOperationExpression) {\n  return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n}\n else if (segment instanceof ColumnSegment) {\n  return new ColumnConverter().convert((ColumnSegment)segment);\n}\n else if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 176,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 64,
        "startColumnNumber" : 15,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof CommonExpressionSegment) {\n  throw new UnsupportedSQLOperationException(\"unsupported CommonExpressionSegment\");\n}\n else if (segment instanceof ListExpression) {\n  return new ListExpressionConverter().convert((ListExpression)segment);\n}\n else if (segment instanceof BinaryOperationExpression) {\n  return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n}\n else if (segment instanceof ColumnSegment) {\n  return new ColumnConverter().convert((ColumnSegment)segment);\n}\n else if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 187,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2033,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (segment instanceof LiteralExpressionSegment) {\n  return new LiteralExpressionConverter().convert((LiteralExpressionSegment)segment);\n}\n else if (segment instanceof CommonExpressionSegment) {\n  throw new UnsupportedSQLOperationException(\"unsupported CommonExpressionSegment\");\n}\n else if (segment instanceof ListExpression) {\n  return new ListExpressionConverter().convert((ListExpression)segment);\n}\n else if (segment instanceof BinaryOperationExpression) {\n  return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n}\n else if (segment instanceof ColumnSegment) {\n  return new ColumnConverter().convert((ColumnSegment)segment);\n}\n else if (segment instanceof ExistsSubqueryExpression) {\n  return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n}\n else if (segment instanceof SubqueryExpressionSegment) {\n  return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n}\n else if (segment instanceof InExpression) {\n  return new InExpressionConverter().convert((InExpression)segment);\n}\n else if (segment instanceof BetweenExpression) {\n  return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n}\n else if (segment instanceof ParameterMarkerExpressionSegment) {\n  return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n}\n else if (segment instanceof FunctionSegment) {\n  return new FunctionConverter().convert((FunctionSegment)segment);\n}\n else if (segment instanceof AggregationProjectionSegment) {\n  return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n}\n else if (segment instanceof DataTypeSegment) {\n  return new DataTypeConverter().convert((DataTypeSegment)segment);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2235,
        "startLineNumber" : 58,
        "startColumnNumber" : 70,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == segment) {\n    return Optional.empty();\n  }\n  if (segment instanceof LiteralExpressionSegment) {\n    return new LiteralExpressionConverter().convert((LiteralExpressionSegment)segment);\n  }\n else   if (segment instanceof CommonExpressionSegment) {\n    throw new UnsupportedSQLOperationException(\"unsupported CommonExpressionSegment\");\n  }\n else   if (segment instanceof ListExpression) {\n    return new ListExpressionConverter().convert((ListExpression)segment);\n  }\n else   if (segment instanceof BinaryOperationExpression) {\n    return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n  }\n else   if (segment instanceof ColumnSegment) {\n    return new ColumnConverter().convert((ColumnSegment)segment);\n  }\n else   if (segment instanceof ExistsSubqueryExpression) {\n    return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n  }\n else   if (segment instanceof SubqueryExpressionSegment) {\n    return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n  }\n else   if (segment instanceof InExpression) {\n    return new InExpressionConverter().convert((InExpression)segment);\n  }\n else   if (segment instanceof BetweenExpression) {\n    return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n  }\n else   if (segment instanceof ParameterMarkerExpressionSegment) {\n    return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n  }\n else   if (segment instanceof FunctionSegment) {\n    return new FunctionConverter().convert((FunctionSegment)segment);\n  }\n else   if (segment instanceof AggregationProjectionSegment) {\n    return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n  }\n else   if (segment instanceof DataTypeSegment) {\n    return new DataTypeConverter().convert((DataTypeSegment)segment);\n  }\n  throw new UnsupportedSQLOperationException(\"unsupported TableSegment type: \" + segment.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2315,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<SqlNode> convert(final ExpressionSegment segment){\n  if (null == segment) {\n    return Optional.empty();\n  }\n  if (segment instanceof LiteralExpressionSegment) {\n    return new LiteralExpressionConverter().convert((LiteralExpressionSegment)segment);\n  }\n else   if (segment instanceof CommonExpressionSegment) {\n    throw new UnsupportedSQLOperationException(\"unsupported CommonExpressionSegment\");\n  }\n else   if (segment instanceof ListExpression) {\n    return new ListExpressionConverter().convert((ListExpression)segment);\n  }\n else   if (segment instanceof BinaryOperationExpression) {\n    return new BinaryOperationExpressionConverter().convert((BinaryOperationExpression)segment);\n  }\n else   if (segment instanceof ColumnSegment) {\n    return new ColumnConverter().convert((ColumnSegment)segment);\n  }\n else   if (segment instanceof ExistsSubqueryExpression) {\n    return new ExistsSubqueryExpressionConverter().convert((ExistsSubqueryExpression)segment);\n  }\n else   if (segment instanceof SubqueryExpressionSegment) {\n    return new SubqueryExpressionConverter().convert((SubqueryExpressionSegment)segment);\n  }\n else   if (segment instanceof InExpression) {\n    return new InExpressionConverter().convert((InExpression)segment);\n  }\n else   if (segment instanceof BetweenExpression) {\n    return new BetweenExpressionConverter().convert((BetweenExpression)segment);\n  }\n else   if (segment instanceof ParameterMarkerExpressionSegment) {\n    return new ParameterMarkerExpressionConverter().convert((ParameterMarkerExpressionSegment)segment);\n  }\n else   if (segment instanceof FunctionSegment) {\n    return new FunctionConverter().convert((FunctionSegment)segment);\n  }\n else   if (segment instanceof AggregationProjectionSegment) {\n    return new AggregationProjectionConverter().convert((AggregationProjectionSegment)segment);\n  }\n else   if (segment instanceof DataTypeSegment) {\n    return new DataTypeConverter().convert((DataTypeSegment)segment);\n  }\n  throw new UnsupportedSQLOperationException(\"unsupported TableSegment type: \" + segment.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return new FunctionConverter().convert((FunctionSegment)segment);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.FunctionSegment"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 84,
    "startColumnNumber" : 51,
    "endLineNumber" : 84,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}