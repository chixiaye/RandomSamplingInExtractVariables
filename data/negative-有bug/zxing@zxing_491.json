{
  "id" : 491,
  "expression" : "block.getErrorCorrectionBytes()",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/qrcode/encoder/Encoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "block.getErrorCorrectionBytes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 419,
      "startColumnNumber" : 25,
      "endLineNumber" : 419,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 419,
        "startColumnNumber" : 15,
        "endLineNumber" : 419,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ecBytes=block.getErrorCorrectionBytes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 419,
        "startColumnNumber" : 8,
        "endLineNumber" : 419,
        "endColumnNumber" : 57
      },
      "nodeContext" : "byte[] ecBytes=block.getErrorCorrectionBytes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 418,
        "startColumnNumber" : 37,
        "endLineNumber" : 423,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  byte[] ecBytes=block.getErrorCorrectionBytes();\n  if (i < ecBytes.length) {\n    result.appendBits(ecBytes[i],8);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 418,
        "startColumnNumber" : 6,
        "endLineNumber" : 423,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (BlockPair block : blocks) {\n  byte[] ecBytes=block.getErrorCorrectionBytes();\n  if (i < ecBytes.length) {\n    result.appendBits(ecBytes[i],8);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 417,
        "startColumnNumber" : 44,
        "endLineNumber" : 424,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  BlockPair block : blocks) {\n    byte[] ecBytes=block.getErrorCorrectionBytes();\n    if (i < ecBytes.length) {\n      result.appendBits(ecBytes[i],8);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 417,
        "startColumnNumber" : 4,
        "endLineNumber" : 424,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < maxNumEcBytes; ++i) {\n  for (  BlockPair block : blocks) {\n    byte[] ecBytes=block.getErrorCorrectionBytes();\n    if (i < ecBytes.length) {\n      result.appendBits(ecBytes[i],8);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2334,
        "startLineNumber" : 370,
        "startColumnNumber" : 76,
        "endLineNumber" : 429,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (bits.getSizeInBytes() != numDataBytes) {\n    throw new WriterException(\"Number of bits and data bytes does not match\");\n  }\n  int dataBytesOffset=0;\n  int maxNumDataBytes=0;\n  int maxNumEcBytes=0;\n  Collection<BlockPair> blocks=new ArrayList<BlockPair>(numRSBlocks);\n  for (int i=0; i < numRSBlocks; ++i) {\n    int[] numDataBytesInBlock=new int[1];\n    int[] numEcBytesInBlock=new int[1];\n    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);\n    int size=numDataBytesInBlock[0];\n    byte[] dataBytes=new byte[size];\n    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);\n    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);\n    blocks.add(new BlockPair(dataBytes,ecBytes));\n    maxNumDataBytes=Math.max(maxNumDataBytes,size);\n    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);\n    dataBytesOffset+=numDataBytesInBlock[0];\n  }\n  if (numDataBytes != dataBytesOffset) {\n    throw new WriterException(\"Data bytes does not match offset\");\n  }\n  for (int i=0; i < maxNumDataBytes; ++i) {\n    for (    BlockPair block : blocks) {\n      byte[] dataBytes=block.getDataBytes();\n      if (i < dataBytes.length) {\n        result.appendBits(dataBytes[i],8);\n      }\n    }\n  }\n  for (int i=0; i < maxNumEcBytes; ++i) {\n    for (    BlockPair block : blocks) {\n      byte[] ecBytes=block.getErrorCorrectionBytes();\n      if (i < ecBytes.length) {\n        result.appendBits(ecBytes[i],8);\n      }\n    }\n  }\n  if (numTotalBytes != result.getSizeInBytes()) {\n    throw new WriterException(\"Interleaving error: \" + numTotalBytes + \" and \"+ result.getSizeInBytes()+ \" differ.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2835,
        "startLineNumber" : 362,
        "startColumnNumber" : 2,
        "endLineNumber" : 429,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Interleave \"bits\" with corresponding error correction bytes. On success, store the result in \"result\". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.\n */\nstatic void interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks,BitArray result) throws WriterException {\n  if (bits.getSizeInBytes() != numDataBytes) {\n    throw new WriterException(\"Number of bits and data bytes does not match\");\n  }\n  int dataBytesOffset=0;\n  int maxNumDataBytes=0;\n  int maxNumEcBytes=0;\n  Collection<BlockPair> blocks=new ArrayList<BlockPair>(numRSBlocks);\n  for (int i=0; i < numRSBlocks; ++i) {\n    int[] numDataBytesInBlock=new int[1];\n    int[] numEcBytesInBlock=new int[1];\n    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);\n    int size=numDataBytesInBlock[0];\n    byte[] dataBytes=new byte[size];\n    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);\n    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);\n    blocks.add(new BlockPair(dataBytes,ecBytes));\n    maxNumDataBytes=Math.max(maxNumDataBytes,size);\n    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);\n    dataBytesOffset+=numDataBytesInBlock[0];\n  }\n  if (numDataBytes != dataBytesOffset) {\n    throw new WriterException(\"Data bytes does not match offset\");\n  }\n  for (int i=0; i < maxNumDataBytes; ++i) {\n    for (    BlockPair block : blocks) {\n      byte[] dataBytes=block.getDataBytes();\n      if (i < dataBytes.length) {\n        result.appendBits(dataBytes[i],8);\n      }\n    }\n  }\n  for (int i=0; i < maxNumEcBytes; ++i) {\n    for (    BlockPair block : blocks) {\n      byte[] ecBytes=block.getErrorCorrectionBytes();\n      if (i < ecBytes.length) {\n        result.appendBits(ecBytes[i],8);\n      }\n    }\n  }\n  if (numTotalBytes != result.getSizeInBytes()) {\n    throw new WriterException(\"Interleaving error: \" + numTotalBytes + \" and \"+ result.getSizeInBytes()+ \" differ.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 419,
        "startColumnNumber" : 8,
        "endLineNumber" : 419,
        "endColumnNumber" : 57
      },
      "nodeContext" : "byte[] ecBytes=block.getErrorCorrectionBytes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 419,
    "startColumnNumber" : 25,
    "endLineNumber" : 419,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}