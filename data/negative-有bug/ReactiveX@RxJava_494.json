{
  "id" : 494,
  "expression" : "map.get(\"b\").intValue()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/schedulers/ComputationSchedulerTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "map.get(\"b\").intValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 83,
      "startColumnNumber" : 30,
      "endLineNumber" : 83,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertEquals(NUM,map.get(\"b\").intValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(NUM,map.get(\"b\").intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1577,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  inner.schedule(new Runnable(){\n    private HashMap<String,Integer> statefulMap=map;\n    int nonThreadSafeCounter=0;\n    @Override public void run(){\n      Integer i=statefulMap.get(\"a\");\n      if (i == null) {\n        i=1;\n        statefulMap.put(\"a\",i);\n        statefulMap.put(\"b\",i);\n      }\n else {\n        i++;\n        statefulMap.put(\"a\",i);\n        statefulMap.put(\"b\",i);\n      }\n      nonThreadSafeCounter++;\n      statefulMap.put(\"nonThreadSafeCounter\",nonThreadSafeCounter);\n      if (i < NUM) {\n        inner.schedule(this);\n      }\n else {\n        latch.countDown();\n      }\n    }\n  }\n);\n  try {\n    latch.await();\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"Count A: \" + map.get(\"a\"));\n  System.out.println(\"Count B: \" + map.get(\"b\"));\n  System.out.println(\"nonThreadSafeCounter: \" + map.get(\"nonThreadSafeCounter\"));\n  assertEquals(NUM,map.get(\"a\").intValue());\n  assertEquals(NUM,map.get(\"b\").intValue());\n  assertEquals(NUM,map.get(\"nonThreadSafeCounter\").intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1632,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  inner.schedule(new Runnable(){\n    private HashMap<String,Integer> statefulMap=map;\n    int nonThreadSafeCounter=0;\n    @Override public void run(){\n      Integer i=statefulMap.get(\"a\");\n      if (i == null) {\n        i=1;\n        statefulMap.put(\"a\",i);\n        statefulMap.put(\"b\",i);\n      }\n else {\n        i++;\n        statefulMap.put(\"a\",i);\n        statefulMap.put(\"b\",i);\n      }\n      nonThreadSafeCounter++;\n      statefulMap.put(\"nonThreadSafeCounter\",nonThreadSafeCounter);\n      if (i < NUM) {\n        inner.schedule(this);\n      }\n else {\n        latch.countDown();\n      }\n    }\n  }\n);\n  try {\n    latch.await();\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"Count A: \" + map.get(\"a\"));\n  System.out.println(\"Count B: \" + map.get(\"b\"));\n  System.out.println(\"nonThreadSafeCounter: \" + map.get(\"nonThreadSafeCounter\"));\n  assertEquals(NUM,map.get(\"a\").intValue());\n  assertEquals(NUM,map.get(\"b\").intValue());\n  assertEquals(NUM,map.get(\"nonThreadSafeCounter\").intValue());\n}\n  finally {\n  inner.dispose();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 191,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1918,
        "startLineNumber" : 36,
        "startColumnNumber" : 71,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int NUM=1000000;\n  final CountDownLatch latch=new CountDownLatch(1);\n  final HashMap<String,Integer> map=new HashMap<String,Integer>();\n  final Scheduler.Worker inner=Schedulers.computation().createWorker();\n  try {\n    inner.schedule(new Runnable(){\n      private HashMap<String,Integer> statefulMap=map;\n      int nonThreadSafeCounter=0;\n      @Override public void run(){\n        Integer i=statefulMap.get(\"a\");\n        if (i == null) {\n          i=1;\n          statefulMap.put(\"a\",i);\n          statefulMap.put(\"b\",i);\n        }\n else {\n          i++;\n          statefulMap.put(\"a\",i);\n          statefulMap.put(\"b\",i);\n        }\n        nonThreadSafeCounter++;\n        statefulMap.put(\"nonThreadSafeCounter\",nonThreadSafeCounter);\n        if (i < NUM) {\n          inner.schedule(this);\n        }\n else {\n          latch.countDown();\n        }\n      }\n    }\n);\n    try {\n      latch.await();\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"Count A: \" + map.get(\"a\"));\n    System.out.println(\"Count B: \" + map.get(\"b\"));\n    System.out.println(\"nonThreadSafeCounter: \" + map.get(\"nonThreadSafeCounter\"));\n    assertEquals(NUM,map.get(\"a\").intValue());\n    assertEquals(NUM,map.get(\"b\").intValue());\n    assertEquals(NUM,map.get(\"nonThreadSafeCounter\").intValue());\n  }\n  finally {\n    inner.dispose();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testThreadSafetyWhenSchedulerIsHoppingBetweenThreads(){\n  final int NUM=1000000;\n  final CountDownLatch latch=new CountDownLatch(1);\n  final HashMap<String,Integer> map=new HashMap<String,Integer>();\n  final Scheduler.Worker inner=Schedulers.computation().createWorker();\n  try {\n    inner.schedule(new Runnable(){\n      private HashMap<String,Integer> statefulMap=map;\n      int nonThreadSafeCounter=0;\n      @Override public void run(){\n        Integer i=statefulMap.get(\"a\");\n        if (i == null) {\n          i=1;\n          statefulMap.put(\"a\",i);\n          statefulMap.put(\"b\",i);\n        }\n else {\n          i++;\n          statefulMap.put(\"a\",i);\n          statefulMap.put(\"b\",i);\n        }\n        nonThreadSafeCounter++;\n        statefulMap.put(\"nonThreadSafeCounter\",nonThreadSafeCounter);\n        if (i < NUM) {\n          inner.schedule(this);\n        }\n else {\n          latch.countDown();\n        }\n      }\n    }\n);\n    try {\n      latch.await();\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"Count A: \" + map.get(\"a\"));\n    System.out.println(\"Count B: \" + map.get(\"b\"));\n    System.out.println(\"nonThreadSafeCounter: \" + map.get(\"nonThreadSafeCounter\"));\n    assertEquals(NUM,map.get(\"a\").intValue());\n    assertEquals(NUM,map.get(\"b\").intValue());\n    assertEquals(NUM,map.get(\"nonThreadSafeCounter\").intValue());\n  }\n  finally {\n    inner.dispose();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(NUM,map.get(\"b\").intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 83,
    "startColumnNumber" : 30,
    "endLineNumber" : 83,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}