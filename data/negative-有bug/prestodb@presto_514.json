{
  "id" : 514,
  "expression" : "histogram2",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestNumericHistogram.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "histogram2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 121,
      "startColumnNumber" : 12,
      "endLineNumber" : 121,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 36
      },
      "nodeContext" : "histogram2.add(i + 1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 37
      },
      "nodeContext" : "histogram2.add(i + 1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 119,
        "startColumnNumber" : 39,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  histogram1.add(i);\n  histogram2.add(i + 1000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 1000; i++) {\n  histogram1.add(i);\n  histogram2.add(i + 1000);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMergeDifferent(){\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 37
      },
      "nodeContext" : "histogram2.add(i + 1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.operator.aggregation.NumericHistogram"
  }, {
    "nodeContext" : "histogram2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 128,
      "startColumnNumber" : 47,
      "endLineNumber" : 128,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 128,
        "startColumnNumber" : 47,
        "endLineNumber" : 128,
        "endColumnNumber" : 70
      },
      "nodeContext" : "histogram2.getBuckets()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 128,
        "startColumnNumber" : 47,
        "endLineNumber" : 128,
        "endColumnNumber" : 81
      },
      "nodeContext" : "histogram2.getBuckets().entrySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n  expected.add(entry.getKey(),entry.getValue());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMergeDifferent(){\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 128,
        "startColumnNumber" : 47,
        "endLineNumber" : 128,
        "endColumnNumber" : 81
      },
      "nodeContext" : "histogram2.getBuckets().entrySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.operator.aggregation.NumericHistogram"
  }, {
    "nodeContext" : "histogram2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 133,
      "startColumnNumber" : 29,
      "endLineNumber" : 133,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 40
      },
      "nodeContext" : "histogram1.mergeWith(histogram2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 41
      },
      "nodeContext" : "histogram1.mergeWith(histogram2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMergeDifferent(){\n  NumericHistogram histogram1=new NumericHistogram(10,3);\n  NumericHistogram histogram2=new NumericHistogram(10,3);\n  for (int i=0; i < 1000; i++) {\n    histogram1.add(i);\n    histogram2.add(i + 1000);\n  }\n  NumericHistogram expected=new NumericHistogram(10,1000);\n  for (  Map.Entry<Double,Double> entry : histogram1.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  for (  Map.Entry<Double,Double> entry : histogram2.getBuckets().entrySet()) {\n    expected.add(entry.getKey(),entry.getValue());\n  }\n  expected.compact();\n  histogram1.mergeWith(histogram2);\n  assertEquals(histogram1.getBuckets(),expected.getBuckets());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 41
      },
      "nodeContext" : "histogram1.mergeWith(histogram2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.operator.aggregation.NumericHistogram"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 121,
    "startColumnNumber" : 12,
    "endLineNumber" : 121,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 128,
    "startColumnNumber" : 47,
    "endLineNumber" : 128,
    "endColumnNumber" : 57
  }, {
    "charLength" : 10,
    "startLineNumber" : 133,
    "startColumnNumber" : 29,
    "endLineNumber" : 133,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}