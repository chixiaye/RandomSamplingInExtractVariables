{
  "id" : 114,
  "expression" : "solver.getApspMatrix()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "solver.getApspMatrix()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 144,
      "startColumnNumber" : 22,
      "endLineNumber" : 144,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 144,
        "startColumnNumber" : 15,
        "endLineNumber" : 144,
        "endColumnNumber" : 44
      },
      "nodeContext" : "dist=solver.getApspMatrix()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 45
      },
      "nodeContext" : "double[][] dist=solver.getApspMatrix();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3304,
        "startLineNumber" : 127,
        "startColumnNumber" : 41,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=7;\n  double[][] m=createGraph(n);\n  m[0][1]=2;\n  m[0][2]=5;\n  m[0][6]=10;\n  m[1][2]=2;\n  m[1][4]=11;\n  m[2][6]=2;\n  m[6][5]=11;\n  m[4][5]=1;\n  m[5][4]=-2;\n  FloydWarshallSolver solver=new FloydWarshallSolver(m);\n  double[][] dist=solver.getApspMatrix();\n  for (int i=0; i < n; i++)   for (int j=0; j < n; j++)   System.out.printf(\"This shortest path from node %d to node %d is %.3f\\n\",i,j,dist[i][j]);\n  System.out.println();\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < n; j++) {\n      List<Integer> path=solver.reconstructShortestPath(i,j);\n      String str;\n      if (path == null) {\n        str=\"HAS AN ∞ NUMBER OF SOLUTIONS! (negative cycle case)\";\n      }\n else       if (path.size() == 0) {\n        str=String.format(\"DOES NOT EXIST (node %d doesn't reach node %d)\",i,j);\n      }\n else {\n        str=String.join(\" -> \",path.stream().map(Object::toString).collect(java.util.stream.Collectors.toList()));\n        str=\"is: [\" + str + \"]\";\n      }\n      System.out.printf(\"The shortest path from node %d to node %d %s\\n\",i,j,str);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3343,
        "startLineNumber" : 127,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=7;\n  double[][] m=createGraph(n);\n  m[0][1]=2;\n  m[0][2]=5;\n  m[0][6]=10;\n  m[1][2]=2;\n  m[1][4]=11;\n  m[2][6]=2;\n  m[6][5]=11;\n  m[4][5]=1;\n  m[5][4]=-2;\n  FloydWarshallSolver solver=new FloydWarshallSolver(m);\n  double[][] dist=solver.getApspMatrix();\n  for (int i=0; i < n; i++)   for (int j=0; j < n; j++)   System.out.printf(\"This shortest path from node %d to node %d is %.3f\\n\",i,j,dist[i][j]);\n  System.out.println();\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < n; j++) {\n      List<Integer> path=solver.reconstructShortestPath(i,j);\n      String str;\n      if (path == null) {\n        str=\"HAS AN ∞ NUMBER OF SOLUTIONS! (negative cycle case)\";\n      }\n else       if (path.size() == 0) {\n        str=String.format(\"DOES NOT EXIST (node %d doesn't reach node %d)\",i,j);\n      }\n else {\n        str=String.join(\" -> \",path.stream().map(Object::toString).collect(java.util.stream.Collectors.toList()));\n        str=\"is: [\" + str + \"]\";\n      }\n      System.out.printf(\"The shortest path from node %d to node %d %s\\n\",i,j,str);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 45
      },
      "nodeContext" : "double[][] dist=solver.getApspMatrix();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double[][]"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 144,
    "startColumnNumber" : 22,
    "endLineNumber" : 144,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}