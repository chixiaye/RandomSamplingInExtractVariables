{
  "id" : 186,
  "expression" : "i < count",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/disposables/CompositeDisposableTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < count",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 61,
      "startColumnNumber" : 24,
      "endLineNumber" : 61,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  s.add(Disposables.from(new Runnable(){\n    @Override public void run(){\n      counter.incrementAndGet();\n    }\n  }\n));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1192,
        "startLineNumber" : 55,
        "startColumnNumber" : 67,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger counter=new AtomicInteger();\n  final CompositeDisposable s=new CompositeDisposable();\n  final int count=10;\n  final CountDownLatch start=new CountDownLatch(1);\n  for (int i=0; i < count; i++) {\n    s.add(Disposables.from(new Runnable(){\n      @Override public void run(){\n        counter.incrementAndGet();\n      }\n    }\n));\n  }\n  final List<Thread> threads=new ArrayList<Thread>();\n  for (int i=0; i < count; i++) {\n    final Thread t=new Thread(){\n      @Override public void run(){\n        try {\n          start.await();\n          s.dispose();\n        }\n catch (        final InterruptedException e) {\n          fail(e.getMessage());\n        }\n      }\n    }\n;\n    t.start();\n    threads.add(t);\n  }\n  start.countDown();\n  for (  final Thread t : threads) {\n    t.join();\n  }\n  assertEquals(count,counter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1282,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void shouldUnsubscribeAll() throws InterruptedException {\n  final AtomicInteger counter=new AtomicInteger();\n  final CompositeDisposable s=new CompositeDisposable();\n  final int count=10;\n  final CountDownLatch start=new CountDownLatch(1);\n  for (int i=0; i < count; i++) {\n    s.add(Disposables.from(new Runnable(){\n      @Override public void run(){\n        counter.incrementAndGet();\n      }\n    }\n));\n  }\n  final List<Thread> threads=new ArrayList<Thread>();\n  for (int i=0; i < count; i++) {\n    final Thread t=new Thread(){\n      @Override public void run(){\n        try {\n          start.await();\n          s.dispose();\n        }\n catch (        final InterruptedException e) {\n          fail(e.getMessage());\n        }\n      }\n    }\n;\n    t.start();\n    threads.add(t);\n  }\n  start.countDown();\n  for (  final Thread t : threads) {\n    t.join();\n  }\n  assertEquals(count,counter.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  s.add(Disposables.from(new Runnable(){\n    @Override public void run(){\n      counter.incrementAndGet();\n    }\n  }\n));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 12
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < count",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 72,
      "startColumnNumber" : 24,
      "endLineNumber" : 72,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  final Thread t=new Thread(){\n    @Override public void run(){\n      try {\n        start.await();\n        s.dispose();\n      }\n catch (      final InterruptedException e) {\n        fail(e.getMessage());\n      }\n    }\n  }\n;\n  t.start();\n  threads.add(t);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1192,
        "startLineNumber" : 55,
        "startColumnNumber" : 67,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger counter=new AtomicInteger();\n  final CompositeDisposable s=new CompositeDisposable();\n  final int count=10;\n  final CountDownLatch start=new CountDownLatch(1);\n  for (int i=0; i < count; i++) {\n    s.add(Disposables.from(new Runnable(){\n      @Override public void run(){\n        counter.incrementAndGet();\n      }\n    }\n));\n  }\n  final List<Thread> threads=new ArrayList<Thread>();\n  for (int i=0; i < count; i++) {\n    final Thread t=new Thread(){\n      @Override public void run(){\n        try {\n          start.await();\n          s.dispose();\n        }\n catch (        final InterruptedException e) {\n          fail(e.getMessage());\n        }\n      }\n    }\n;\n    t.start();\n    threads.add(t);\n  }\n  start.countDown();\n  for (  final Thread t : threads) {\n    t.join();\n  }\n  assertEquals(count,counter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1282,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void shouldUnsubscribeAll() throws InterruptedException {\n  final AtomicInteger counter=new AtomicInteger();\n  final CompositeDisposable s=new CompositeDisposable();\n  final int count=10;\n  final CountDownLatch start=new CountDownLatch(1);\n  for (int i=0; i < count; i++) {\n    s.add(Disposables.from(new Runnable(){\n      @Override public void run(){\n        counter.incrementAndGet();\n      }\n    }\n));\n  }\n  final List<Thread> threads=new ArrayList<Thread>();\n  for (int i=0; i < count; i++) {\n    final Thread t=new Thread(){\n      @Override public void run(){\n        try {\n          start.await();\n          s.dispose();\n        }\n catch (        final InterruptedException e) {\n          fail(e.getMessage());\n        }\n      }\n    }\n;\n    t.start();\n    threads.add(t);\n  }\n  start.countDown();\n  for (  final Thread t : threads) {\n    t.join();\n  }\n  assertEquals(count,counter.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  final Thread t=new Thread(){\n    @Override public void run(){\n      try {\n        start.await();\n        s.dispose();\n      }\n catch (      final InterruptedException e) {\n        fail(e.getMessage());\n      }\n    }\n  }\n;\n  t.start();\n  threads.add(t);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 15
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 61,
    "startColumnNumber" : 24,
    "endLineNumber" : 61,
    "endColumnNumber" : 33
  }, {
    "charLength" : 9,
    "startLineNumber" : 72,
    "startColumnNumber" : 24,
    "endLineNumber" : 72,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}