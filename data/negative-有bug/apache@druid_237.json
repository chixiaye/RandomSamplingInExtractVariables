{
  "id" : 237,
  "expression" : "i",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/segment/join/JoinPrefixUtils.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 73,
      "startColumnNumber" : 20,
      "endLineNumber" : 73,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i < prefixes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < prefixes.size(); i++) {\n  String prefix=prefixes.get(i);\n  for (int k=i + 1; k < prefixes.size(); k++) {\n    String otherPrefix=prefixes.get(k);\n    if (prefix.equals(otherPrefix)) {\n      throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n    }\n    if (isPrefixedBy(prefix,otherPrefix)) {\n      throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Check if any prefixes in the provided list duplicate or shadow each other.\n * @param prefixes A mutable list containing the prefixes to check. This list will be sorted by descendingstring length.\n */\npublic static void checkPrefixesForDuplicatesAndShadowing(final List<String> prefixes){\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i < prefixes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 74,
      "startColumnNumber" : 35,
      "endLineNumber" : 74,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 74,
        "startColumnNumber" : 22,
        "endLineNumber" : 74,
        "endColumnNumber" : 37
      },
      "nodeContext" : "prefixes.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 74,
        "startColumnNumber" : 13,
        "endLineNumber" : 74,
        "endColumnNumber" : 37
      },
      "nodeContext" : "prefix=prefixes.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 38
      },
      "nodeContext" : "String prefix=prefixes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 73,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String prefix=prefixes.get(i);\n  for (int k=i + 1; k < prefixes.size(); k++) {\n    String otherPrefix=prefixes.get(k);\n    if (prefix.equals(otherPrefix)) {\n      throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n    }\n    if (isPrefixedBy(prefix,otherPrefix)) {\n      throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < prefixes.size(); i++) {\n  String prefix=prefixes.get(i);\n  for (int k=i + 1; k < prefixes.size(); k++) {\n    String otherPrefix=prefixes.get(k);\n    if (prefix.equals(otherPrefix)) {\n      throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n    }\n    if (isPrefixedBy(prefix,otherPrefix)) {\n      throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Check if any prefixes in the provided list duplicate or shadow each other.\n * @param prefixes A mutable list containing the prefixes to check. This list will be sorted by descendingstring length.\n */\npublic static void checkPrefixesForDuplicatesAndShadowing(final List<String> prefixes){\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 38
      },
      "nodeContext" : "String prefix=prefixes.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 75,
      "startColumnNumber" : 19,
      "endLineNumber" : 75,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 75,
        "startColumnNumber" : 15,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "k=i + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 75,
        "startColumnNumber" : 11,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "int k=i + 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 75,
        "startColumnNumber" : 6,
        "endLineNumber" : 83,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int k=i + 1; k < prefixes.size(); k++) {\n  String otherPrefix=prefixes.get(k);\n  if (prefix.equals(otherPrefix)) {\n    throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n  }\n  if (isPrefixedBy(prefix,otherPrefix)) {\n    throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 73,
        "startColumnNumber" : 46,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String prefix=prefixes.get(i);\n  for (int k=i + 1; k < prefixes.size(); k++) {\n    String otherPrefix=prefixes.get(k);\n    if (prefix.equals(otherPrefix)) {\n      throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n    }\n    if (isPrefixedBy(prefix,otherPrefix)) {\n      throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < prefixes.size(); i++) {\n  String prefix=prefixes.get(i);\n  for (int k=i + 1; k < prefixes.size(); k++) {\n    String otherPrefix=prefixes.get(k);\n    if (prefix.equals(otherPrefix)) {\n      throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n    }\n    if (isPrefixedBy(prefix,otherPrefix)) {\n      throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Check if any prefixes in the provided list duplicate or shadow each other.\n * @param prefixes A mutable list containing the prefixes to check. This list will be sorted by descendingstring length.\n */\npublic static void checkPrefixesForDuplicatesAndShadowing(final List<String> prefixes){\n  prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n  for (int i=0; i < prefixes.size(); i++) {\n    String prefix=prefixes.get(i);\n    for (int k=i + 1; k < prefixes.size(); k++) {\n      String otherPrefix=prefixes.get(k);\n      if (prefix.equals(otherPrefix)) {\n        throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\",prefix);\n      }\n      if (isPrefixedBy(prefix,otherPrefix)) {\n        throw new IAE(\"Detected conflicting prefixes in join clauses: [%s, %s]\",prefix,otherPrefix);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 75,
        "startColumnNumber" : 11,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "int k=i + 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 73,
    "startColumnNumber" : 20,
    "endLineNumber" : 73,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 74,
    "startColumnNumber" : 35,
    "endLineNumber" : 74,
    "endColumnNumber" : 36
  }, {
    "charLength" : 1,
    "startLineNumber" : 75,
    "startColumnNumber" : 19,
    "endLineNumber" : 75,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}