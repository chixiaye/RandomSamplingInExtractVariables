{
  "id" : 249,
  "expression" : "annotationNode.up()",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotationNode.up()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 44,
      "startColumnNumber" : 23,
      "endLineNumber" : 44,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 42
      },
      "nodeContext" : "typeNode=annotationNode.up()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 44,
        "endColumnNumber" : 43
      },
      "nodeContext" : "JavacNode typeNode=annotationNode.up();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 42,
        "startColumnNumber" : 109,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Data.class);\n  JavacNode typeNode=annotationNode.up();\n  JCClassDecl typeDecl=null;\n  if (typeNode.get() instanceof JCClassDecl)   typeDecl=(JCClassDecl)typeNode.get();\n  long flags=typeDecl == null ? 0 : typeDecl.mods.flags;\n  boolean notAClass=(flags & (Flags.INTERFACE | Flags.ENUM | Flags.ANNOTATION)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  String staticConstructorName=annotation.getInstance().staticConstructor();\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1245,
        "startLineNumber" : 42,
        "startColumnNumber" : 1,
        "endLineNumber" : 63,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Data> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Data.class);\n  JavacNode typeNode=annotationNode.up();\n  JCClassDecl typeDecl=null;\n  if (typeNode.get() instanceof JCClassDecl)   typeDecl=(JCClassDecl)typeNode.get();\n  long flags=typeDecl == null ? 0 : typeDecl.mods.flags;\n  boolean notAClass=(flags & (Flags.INTERFACE | Flags.ENUM | Flags.ANNOTATION)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  String staticConstructorName=annotation.getInstance().staticConstructor();\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,staticConstructorName,true,annotationNode);\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 44,
        "endColumnNumber" : 43
      },
      "nodeContext" : "JavacNode typeNode=annotationNode.up();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JavacNode"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 44,
    "startColumnNumber" : 23,
    "endLineNumber" : 44,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}