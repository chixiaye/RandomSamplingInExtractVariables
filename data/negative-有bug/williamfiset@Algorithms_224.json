{
  "id" : 224,
  "expression" : "5",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterative.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 110,
      "startColumnNumber" : 22,
      "endLineNumber" : 110,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,4,5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,4,5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 97,
        "startColumnNumber" : 41,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 774,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,4,5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 111,
      "startColumnNumber" : 19,
      "endLineNumber" : 111,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,5,6)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,5,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 97,
        "startColumnNumber" : 41,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 774,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  int n=10;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,0,1);\n  addEdge(graph,0,2);\n  addEdge(graph,1,2);\n  addEdge(graph,1,3);\n  addEdge(graph,2,3);\n  addEdge(graph,1,4);\n  addEdge(graph,2,7);\n  addEdge(graph,4,6);\n  addEdge(graph,4,5);\n  addEdge(graph,5,6);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  BridgesAdjacencyListIterative solver=new BridgesAdjacencyListIterative(graph,n);\n  List<Integer> bridges=solver.findBridges();\n  for (int i=0; i < bridges.size() / 2; i++) {\n    int node1=bridges.get(2 * i);\n    int node2=bridges.get(2 * i + 1);\n    System.out.printf(\"BRIDGE between nodes: %d and %d\\n\",node1,node2);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,5,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 110,
    "startColumnNumber" : 22,
    "endLineNumber" : 110,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 111,
    "startColumnNumber" : 19,
    "endLineNumber" : 111,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}