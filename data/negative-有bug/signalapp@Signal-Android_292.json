{
  "id" : 292,
  "expression" : "MediaSendConstants",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/sharing/ShareRepository.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MediaSendConstants",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 194,
      "startColumnNumber" : 26,
      "endLineNumber" : 194,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 194,
        "startColumnNumber" : 26,
        "endLineNumber" : 194,
        "endColumnNumber" : 53
      },
      "nodeContext" : "MediaSendConstants.MAX_PUSH",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 194,
        "endColumnNumber" : 53
      },
      "nodeContext" : "media.size() >= MediaSendConstants.MAX_PUSH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 194,
        "startColumnNumber" : 6,
        "endLineNumber" : 197,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (media.size() >= MediaSendConstants.MAX_PUSH) {\n  Log.w(TAG,\"Exceeded the attachment limit! Skipping the rest.\");\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1582,
        "startLineNumber" : 158,
        "startColumnNumber" : 62,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Uri uri=entry.getKey();\n  String mimeType=entry.getValue();\n  InputStream stream;\n  try {\n    stream=context.getContentResolver().openInputStream(uri);\n    if (stream == null) {\n      throw new IOException(\"Failed to open stream!\");\n    }\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Failed to open: \" + uri);\n    continue;\n  }\n  long size=getSize(context,uri);\n  Pair<Integer,Integer> dimens=MediaUtil.getDimensions(context,mimeType,uri);\n  long duration=getDuration(context,uri);\n  Uri blobUri=BlobProvider.getInstance().forData(stream,size).withMimeType(mimeType).createForSingleSessionOnDisk(context);\n  media.add(new Media(blobUri,mimeType,System.currentTimeMillis(),dimens.first,dimens.second,size,duration,false,false,Optional.of(Media.ALL_MEDIA_BUCKET_ID),Optional.absent(),Optional.absent()));\n  if (media.size() >= MediaSendConstants.MAX_PUSH) {\n    Log.w(TAG,\"Exceeded the attachment limit! Skipping the rest.\");\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1640,
        "startLineNumber" : 158,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<Uri,String> entry : mimeTypes.entrySet()) {\n  Uri uri=entry.getKey();\n  String mimeType=entry.getValue();\n  InputStream stream;\n  try {\n    stream=context.getContentResolver().openInputStream(uri);\n    if (stream == null) {\n      throw new IOException(\"Failed to open stream!\");\n    }\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Failed to open: \" + uri);\n    continue;\n  }\n  long size=getSize(context,uri);\n  Pair<Integer,Integer> dimens=MediaUtil.getDimensions(context,mimeType,uri);\n  long duration=getDuration(context,uri);\n  Uri blobUri=BlobProvider.getInstance().forData(stream,size).withMimeType(mimeType).createForSingleSessionOnDisk(context);\n  media.add(new Media(blobUri,mimeType,System.currentTimeMillis(),dimens.first,dimens.second,size,duration,false,false,Optional.of(Media.ALL_MEDIA_BUCKET_ID),Optional.absent(),Optional.absent()));\n  if (media.size() >= MediaSendConstants.MAX_PUSH) {\n    Log.w(TAG,\"Exceeded the attachment limit! Skipping the rest.\");\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2507,
        "startLineNumber" : 144,
        "startColumnNumber" : 95,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Context context=ApplicationDependencies.getApplication();\n  Map<Uri,String> mimeTypes=Stream.of(uris).map(uri -> new Pair<>(uri,getMimeType(context,uri,null))).filter(p -> MediaUtil.isImageType(p.second) || MediaUtil.isVideoType(p.second)).collect(Collectors.toMap(p -> p.first,p -> p.second));\n  if (mimeTypes.isEmpty()) {\n    return null;\n  }\n  List<Media> media=new ArrayList<>(mimeTypes.size());\n  for (  Map.Entry<Uri,String> entry : mimeTypes.entrySet()) {\n    Uri uri=entry.getKey();\n    String mimeType=entry.getValue();\n    InputStream stream;\n    try {\n      stream=context.getContentResolver().openInputStream(uri);\n      if (stream == null) {\n        throw new IOException(\"Failed to open stream!\");\n      }\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Failed to open: \" + uri);\n      continue;\n    }\n    long size=getSize(context,uri);\n    Pair<Integer,Integer> dimens=MediaUtil.getDimensions(context,mimeType,uri);\n    long duration=getDuration(context,uri);\n    Uri blobUri=BlobProvider.getInstance().forData(stream,size).withMimeType(mimeType).createForSingleSessionOnDisk(context);\n    media.add(new Media(blobUri,mimeType,System.currentTimeMillis(),dimens.first,dimens.second,size,duration,false,false,Optional.of(Media.ALL_MEDIA_BUCKET_ID),Optional.absent(),Optional.absent()));\n    if (media.size() >= MediaSendConstants.MAX_PUSH) {\n      Log.w(TAG,\"Exceeded the attachment limit! Skipping the rest.\");\n      break;\n    }\n  }\n  if (media.size() > 0) {\n    boolean isMmsSupported=Stream.of(media).allMatch(m -> isMmsSupported(context,asUriAttachment(m.getUri(),m.getMimeType(),m.getSize())));\n    return ShareData.forMedia(media,isMmsSupported);\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2616,
        "startLineNumber" : 143,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private @Nullable ShareData getResolvedInternal(@NonNull List<Uri> uris) throws IOException {\n  Context context=ApplicationDependencies.getApplication();\n  Map<Uri,String> mimeTypes=Stream.of(uris).map(uri -> new Pair<>(uri,getMimeType(context,uri,null))).filter(p -> MediaUtil.isImageType(p.second) || MediaUtil.isVideoType(p.second)).collect(Collectors.toMap(p -> p.first,p -> p.second));\n  if (mimeTypes.isEmpty()) {\n    return null;\n  }\n  List<Media> media=new ArrayList<>(mimeTypes.size());\n  for (  Map.Entry<Uri,String> entry : mimeTypes.entrySet()) {\n    Uri uri=entry.getKey();\n    String mimeType=entry.getValue();\n    InputStream stream;\n    try {\n      stream=context.getContentResolver().openInputStream(uri);\n      if (stream == null) {\n        throw new IOException(\"Failed to open stream!\");\n      }\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Failed to open: \" + uri);\n      continue;\n    }\n    long size=getSize(context,uri);\n    Pair<Integer,Integer> dimens=MediaUtil.getDimensions(context,mimeType,uri);\n    long duration=getDuration(context,uri);\n    Uri blobUri=BlobProvider.getInstance().forData(stream,size).withMimeType(mimeType).createForSingleSessionOnDisk(context);\n    media.add(new Media(blobUri,mimeType,System.currentTimeMillis(),dimens.first,dimens.second,size,duration,false,false,Optional.of(Media.ALL_MEDIA_BUCKET_ID),Optional.absent(),Optional.absent()));\n    if (media.size() >= MediaSendConstants.MAX_PUSH) {\n      Log.w(TAG,\"Exceeded the attachment limit! Skipping the rest.\");\n      break;\n    }\n  }\n  if (media.size() > 0) {\n    boolean isMmsSupported=Stream.of(media).allMatch(m -> isMmsSupported(context,asUriAttachment(m.getUri(),m.getMimeType(),m.getSize())));\n    return ShareData.forMedia(media,isMmsSupported);\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 331,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 194,
        "endColumnNumber" : 53
      },
      "nodeContext" : "media.size() >= MediaSendConstants.MAX_PUSH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.thoughtcrime.securesms.mediasend.MediaSendConstants"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 194,
    "startColumnNumber" : 26,
    "endLineNumber" : 194,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}