{
  "id" : 491,
  "expression" : "IBP_VERSIONS.get(key)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/server-common/src/main/java/org/apache/kafka/server/common/MetadataVersion.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IBP_VERSIONS.get(key)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 387,
      "startColumnNumber" : 35,
      "endLineNumber" : 387,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 387,
        "startColumnNumber" : 15,
        "endLineNumber" : 387,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Optional.ofNullable(IBP_VERSIONS.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 387,
        "startColumnNumber" : 15,
        "endLineNumber" : 389,
        "endColumnNumber" : 9
      },
      "nodeContext" : "Optional.ofNullable(IBP_VERSIONS.get(key)).orElseThrow(() -> new IllegalArgumentException(\"Version \" + versionString + \" is not a valid version\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 387,
        "startColumnNumber" : 8,
        "endLineNumber" : 389,
        "endColumnNumber" : 10
      },
      "nodeContext" : "return Optional.ofNullable(IBP_VERSIONS.get(key)).orElseThrow(() -> new IllegalArgumentException(\"Version \" + versionString + \" is not a valid version\"));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 378,
        "startColumnNumber" : 74,
        "endLineNumber" : 390,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] versionSegments=versionString.split(Pattern.quote(\".\"));\n  int numSegments=(versionString.startsWith(\"0.\")) ? 3 : 2;\n  String key;\n  if (numSegments >= versionSegments.length) {\n    key=versionString;\n  }\n else {\n    key=String.join(\".\",Arrays.copyOfRange(versionSegments,0,numSegments));\n  }\n  return Optional.ofNullable(IBP_VERSIONS.get(key)).orElseThrow(() -> new IllegalArgumentException(\"Version \" + versionString + \" is not a valid version\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 372,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Return an `MetadataVersion` instance for `versionString`, which can be in a variety of formats (e.g. \"0.8.0\", \"0.8.0.x\", \"0.10.0\", \"0.10.0-IV1\"). `IllegalArgumentException` is thrown if `versionString` cannot be mapped to an `MetadataVersion`. Note that 'misconfigured' values such as \"1.0.1\" will be parsed to `IBP_1_0_IV0` as we ignore anything after the first two digits for versions that don't start with \"0.\"\n */\npublic static MetadataVersion fromVersionString(String versionString){\n  String[] versionSegments=versionString.split(Pattern.quote(\".\"));\n  int numSegments=(versionString.startsWith(\"0.\")) ? 3 : 2;\n  String key;\n  if (numSegments >= versionSegments.length) {\n    key=versionString;\n  }\n else {\n    key=String.join(\".\",Arrays.copyOfRange(versionSegments,0,numSegments));\n  }\n  return Optional.ofNullable(IBP_VERSIONS.get(key)).orElseThrow(() -> new IllegalArgumentException(\"Version \" + versionString + \" is not a valid version\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 387,
        "startColumnNumber" : 15,
        "endLineNumber" : 387,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Optional.ofNullable(IBP_VERSIONS.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "org.apache.kafka.server.common.MetadataVersion"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 387,
    "startColumnNumber" : 35,
    "endLineNumber" : 387,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}