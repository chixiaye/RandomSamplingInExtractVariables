{
  "id" : 28,
  "expression" : "(right - left + 1) / moduleSize",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/qrcode/QRCodeReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(right - left + 1) / moduleSize",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 128,
      "startColumnNumber" : 33,
      "endLineNumber" : 128,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 128,
        "startColumnNumber" : 22,
        "endLineNumber" : 128,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Math.round((right - left + 1) / moduleSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 65
      },
      "nodeContext" : "matrixWidth=Math.round((right - left + 1) / moduleSize)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 66
      },
      "nodeContext" : "int matrixWidth=Math.round((right - left + 1) / moduleSize);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 107,
        "startColumnNumber" : 85,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] leftTopBlack=image.getTopLeftOnBit();\n  int[] rightBottomBlack=image.getBottomRightOnBit();\n  if (leftTopBlack == null || rightBottomBlack == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  float moduleSize=moduleSize(leftTopBlack,image);\n  int top=leftTopBlack[1];\n  int bottom=rightBottomBlack[1];\n  int left=leftTopBlack[0];\n  int right=rightBottomBlack[0];\n  if (bottom - top != right - left) {\n    right=left + (bottom - top);\n  }\n  int matrixWidth=Math.round((right - left + 1) / moduleSize);\n  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);\n  if (matrixWidth <= 0 || matrixHeight <= 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (matrixHeight != matrixWidth) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int nudge=(int)(moduleSize / 2.0f);\n  top+=nudge;\n  left+=nudge;\n  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);\n  for (int y=0; y < matrixHeight; y++) {\n    int iOffset=top + (int)(y * moduleSize);\n    for (int x=0; x < matrixWidth; x++) {\n      if (image.get(left + (int)(x * moduleSize),iOffset)) {\n        bits.set(x,y);\n      }\n    }\n  }\n  return bits;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2290,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method detects a code in a \"pure\" image -- that is, pure monochrome image which contains only an unrotated, unskewed, image of a code, with some white border around it. This is a specialized method that works exceptionally fast in this special case.\n * @see com.google.zxing.pdf417.PDF417Reader#extractPureBits(BitMatrix)\n * @see com.google.zxing.datamatrix.DataMatrixReader#extractPureBits(BitMatrix)\n */\nprivate static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {\n  int[] leftTopBlack=image.getTopLeftOnBit();\n  int[] rightBottomBlack=image.getBottomRightOnBit();\n  if (leftTopBlack == null || rightBottomBlack == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  float moduleSize=moduleSize(leftTopBlack,image);\n  int top=leftTopBlack[1];\n  int bottom=rightBottomBlack[1];\n  int left=leftTopBlack[0];\n  int right=rightBottomBlack[0];\n  if (bottom - top != right - left) {\n    right=left + (bottom - top);\n  }\n  int matrixWidth=Math.round((right - left + 1) / moduleSize);\n  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);\n  if (matrixWidth <= 0 || matrixHeight <= 0) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  if (matrixHeight != matrixWidth) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  int nudge=(int)(moduleSize / 2.0f);\n  top+=nudge;\n  left+=nudge;\n  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);\n  for (int y=0; y < matrixHeight; y++) {\n    int iOffset=top + (int)(y * moduleSize);\n    for (int x=0; x < matrixWidth; x++) {\n      if (image.get(left + (int)(x * moduleSize),iOffset)) {\n        bits.set(x,y);\n      }\n    }\n  }\n  return bits;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 237,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 66
      },
      "nodeContext" : "int matrixWidth=Math.round((right - left + 1) / moduleSize);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 7,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 128,
    "startColumnNumber" : 33,
    "endLineNumber" : 128,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}