{
  "id" : 371,
  "expression" : "UUID.fromString(uuid)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "UUID.fromString(uuid)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 883,
      "startColumnNumber" : 65,
      "endLineNumber" : 883,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 883,
        "startColumnNumber" : 20,
        "endLineNumber" : 883,
        "endColumnNumber" : 87
      },
      "nodeContext" : "collection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 883,
        "startColumnNumber" : 20,
        "endLineNumber" : 883,
        "endColumnNumber" : 88
      },
      "nodeContext" : "collection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12197,
        "startLineNumber" : 821,
        "startColumnNumber" : 12,
        "endLineNumber" : 1028,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (type) {\ncase STRING:  collection.setValue(AllJavaTypes.FIELD_STRING,\"foo\");\nassertElements(collection,obj -> assertEquals(\"foo\",obj.getFieldString()));\ncollection.setValue(AllJavaTypes.FIELD_STRING,null);\nassertElements(collection,obj -> assertEquals(null,obj.getFieldString()));\nbreak;\ncase BOOLEAN:collection.setValue(AllJavaTypes.FIELD_BOOLEAN,true);\nassertElements(collection,obj -> assertTrue(obj.isFieldBoolean()));\nbreak;\ncase BYTE:collection.setValue(AllJavaTypes.FIELD_BYTE,(byte)1);\nassertElements(collection,obj -> assertEquals((byte)1,obj.getFieldByte()));\nbreak;\ncase SHORT:collection.setValue(AllJavaTypes.FIELD_SHORT,(short)2);\nassertElements(collection,obj -> assertEquals((short)2,obj.getFieldShort()));\nbreak;\ncase INTEGER:collection.setValue(AllJavaTypes.FIELD_INT,3);\nassertElements(collection,obj -> assertEquals(3,obj.getFieldInt()));\nbreak;\ncase LONG:collection.setValue(AllJavaTypes.FIELD_LONG,4L);\nassertElements(collection,obj -> assertEquals(4L,obj.getFieldLong()));\nbreak;\ncase FLOAT:collection.setValue(AllJavaTypes.FIELD_FLOAT,1.23F);\nassertElements(collection,obj -> assertEquals(1.23F,obj.getFieldFloat(),0F));\nbreak;\ncase DOUBLE:collection.setValue(AllJavaTypes.FIELD_DOUBLE,1.234);\nassertElements(collection,obj -> assertEquals(1.234,obj.getFieldDouble(),0F));\nbreak;\ncase BINARY:collection.setValue(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nassertElements(collection,obj -> assertArrayEquals(new byte[]{1,2,3},obj.getFieldBinary()));\ncollection.setValue(AllJavaTypes.FIELD_BINARY,null);\nassertElements(collection,obj -> assertNull(obj.getFieldBinary()));\nbreak;\ncase DATE:collection.setValue(AllJavaTypes.FIELD_DATE,new Date(1000));\nassertElements(collection,obj -> assertEquals(new Date(1000),obj.getFieldDate()));\ncollection.setValue(AllJavaTypes.FIELD_DATE,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDate()));\nbreak;\ncase DECIMAL128:collection.setValue(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(1000));\nassertElements(collection,obj -> assertEquals(new Decimal128(1000),obj.getFieldDecimal128()));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDecimal128()));\nbreak;\ncase OBJECT_ID:String hex=TestHelper.randomObjectIdHexString();\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(hex));\nassertElements(collection,obj -> assertEquals(new ObjectId(hex),obj.getFieldObjectId()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObjectId()));\nbreak;\ncase UUID:String uuid=UUID.randomUUID().toString();\ncollection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\nassertElements(collection,obj -> assertEquals(UUID.fromString(uuid),obj.getFieldUUID()));\ncollection.setValue(AllJavaTypes.FIELD_UUID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldUUID()));\nbreak;\ncase OBJECT:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,42);\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,childObj);\nassertElements(collection,obj -> assertEquals(childObj,obj.getFieldObject()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObject()));\nbreak;\n}\ncase MODEL_LIST:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,43);\ncollection.setValue(AllJavaTypes.FIELD_LIST,new RealmList<>(childObj));\nassertElements(collection,obj -> {\nassertEquals(1,obj.getFieldList().size());\nassertEquals(childObj,obj.getFieldList().first());\n}\n);\nbreak;\n}\ncase STRING_VALUE_LIST:{\nRealmList<String> list=new RealmList<>(\"Foo\",\"Bar\");\ncollection.setValue(AllJavaTypes.FIELD_STRING_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(\"Foo\",obj.getFieldStringList().first());\nassertEquals(\"Bar\",obj.getFieldStringList().last());\n}\n);\nbreak;\n}\ncase BOOLEAN_VALUE_LIST:{\nRealmList<Boolean> list=new RealmList<>(true,false);\ncollection.setValue(AllJavaTypes.FIELD_BOOLEAN_LIST,list);\nassertElements(collection,obj -> {\nassertTrue(obj.getFieldBooleanList().first());\nassertFalse(obj.getFieldBooleanList().last());\n}\n);\nbreak;\n}\ncase BYTE_VALUE_LIST:{\nRealmList<Byte> list=new RealmList<>((byte)1,(byte)2);\ncollection.setValue(AllJavaTypes.FIELD_BYTE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Byte.valueOf((byte)1),obj.getFieldByteList().first());\nassertEquals(Byte.valueOf((byte)2),obj.getFieldByteList().last());\n}\n);\nbreak;\n}\ncase SHORT_VALUE_LIST:{\nRealmList<Short> list=new RealmList<>((short)1,(short)2);\ncollection.setValue(AllJavaTypes.FIELD_SHORT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Short.valueOf((short)1),obj.getFieldShortList().first());\nassertEquals(Short.valueOf((short)2),obj.getFieldShortList().last());\n}\n);\nbreak;\n}\ncase INTEGER_VALUE_LIST:{\nRealmList<Integer> list=new RealmList<>(1,2);\ncollection.setValue(AllJavaTypes.FIELD_INTEGER_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Integer.valueOf(1),obj.getFieldIntegerList().first());\nassertEquals(Integer.valueOf(2),obj.getFieldIntegerList().last());\n}\n);\nbreak;\n}\ncase LONG_VALUE_LIST:{\nRealmList<Long> list=new RealmList<>(1L,2L);\ncollection.setValue(AllJavaTypes.FIELD_LONG_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Long.valueOf(1),obj.getFieldLongList().first());\nassertEquals(Long.valueOf(2),obj.getFieldLongList().last());\n}\n);\nbreak;\n}\ncase FLOAT_VALUE_LIST:{\nRealmList<Float> list=new RealmList<>(1.1F,2.2F);\ncollection.setValue(AllJavaTypes.FIELD_FLOAT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1F,obj.getFieldFloatList().first(),0F);\nassertEquals(2.2F,obj.getFieldFloatList().last(),0F);\n}\n);\nbreak;\n}\ncase DOUBLE_VALUE_LIST:{\nRealmList<Double> list=new RealmList<>(1.1D,2.2D);\ncollection.setValue(AllJavaTypes.FIELD_DOUBLE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1D,obj.getFieldDoubleList().first(),0D);\nassertEquals(2.2D,obj.getFieldDoubleList().last(),0D);\n}\n);\nbreak;\n}\ncase BINARY_VALUE_LIST:{\nRealmList<byte[]> list=new RealmList<>(new byte[]{1,2,3},new byte[]{2,3,4});\ncollection.setValue(AllJavaTypes.FIELD_BINARY_LIST,list);\nassertElements(collection,obj -> {\nassertArrayEquals(new byte[]{1,2,3},obj.getFieldBinaryList().first());\nassertArrayEquals(new byte[]{2,3,4},obj.getFieldBinaryList().last());\n}\n);\nbreak;\n}\ncase DATE_VALUE_LIST:{\nRealmList<Date> list=new RealmList<>(new Date(1000),new Date(2000));\ncollection.setValue(AllJavaTypes.FIELD_DATE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Date(1000),obj.getFieldDateList().first());\nassertEquals(new Date(2000),obj.getFieldDateList().last());\n}\n);\nbreak;\n}\ncase DECIMAL128_VALUE_LIST:{\nRealmList<Decimal128> list=new RealmList<>(new Decimal128(1000),new Decimal128(2000));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Decimal128(1000),obj.getFieldDecimal128List().first());\nassertEquals(new Decimal128(2000),obj.getFieldDecimal128List().last());\n}\n);\nbreak;\n}\ncase OBJECT_ID_VALUE_LIST:{\nString hex1=TestHelper.randomObjectIdHexString();\nString hex2=TestHelper.randomObjectIdHexString();\nRealmList<ObjectId> list=new RealmList<>(new ObjectId(hex1),new ObjectId(hex2));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new ObjectId(hex1),obj.getFieldObjectIdList().first());\nassertEquals(new ObjectId(hex2),obj.getFieldObjectIdList().last());\n}\n);\nbreak;\n}\ncase UUID_VALUE_LIST:{\nString uuid1=UUID.randomUUID().toString();\nString uuid2=UUID.randomUUID().toString();\nRealmList<UUID> list=new RealmList<>(UUID.fromString(uuid1),UUID.fromString(uuid2));\ncollection.setValue(AllJavaTypes.FIELD_UUID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(UUID.fromString(uuid1),obj.getFieldUUIDList().first());\nassertEquals(UUID.fromString(uuid2),obj.getFieldUUIDList().last());\n}\n);\nbreak;\n}\ndefault:fail(\"Unknown type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1449,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 12221,
        "startLineNumber" : 820,
        "startColumnNumber" : 60,
        "endLineNumber" : 1029,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (type) {\ncase STRING:    collection.setValue(AllJavaTypes.FIELD_STRING,\"foo\");\n  assertElements(collection,obj -> assertEquals(\"foo\",obj.getFieldString()));\ncollection.setValue(AllJavaTypes.FIELD_STRING,null);\nassertElements(collection,obj -> assertEquals(null,obj.getFieldString()));\nbreak;\ncase BOOLEAN:collection.setValue(AllJavaTypes.FIELD_BOOLEAN,true);\nassertElements(collection,obj -> assertTrue(obj.isFieldBoolean()));\nbreak;\ncase BYTE:collection.setValue(AllJavaTypes.FIELD_BYTE,(byte)1);\nassertElements(collection,obj -> assertEquals((byte)1,obj.getFieldByte()));\nbreak;\ncase SHORT:collection.setValue(AllJavaTypes.FIELD_SHORT,(short)2);\nassertElements(collection,obj -> assertEquals((short)2,obj.getFieldShort()));\nbreak;\ncase INTEGER:collection.setValue(AllJavaTypes.FIELD_INT,3);\nassertElements(collection,obj -> assertEquals(3,obj.getFieldInt()));\nbreak;\ncase LONG:collection.setValue(AllJavaTypes.FIELD_LONG,4L);\nassertElements(collection,obj -> assertEquals(4L,obj.getFieldLong()));\nbreak;\ncase FLOAT:collection.setValue(AllJavaTypes.FIELD_FLOAT,1.23F);\nassertElements(collection,obj -> assertEquals(1.23F,obj.getFieldFloat(),0F));\nbreak;\ncase DOUBLE:collection.setValue(AllJavaTypes.FIELD_DOUBLE,1.234);\nassertElements(collection,obj -> assertEquals(1.234,obj.getFieldDouble(),0F));\nbreak;\ncase BINARY:collection.setValue(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nassertElements(collection,obj -> assertArrayEquals(new byte[]{1,2,3},obj.getFieldBinary()));\ncollection.setValue(AllJavaTypes.FIELD_BINARY,null);\nassertElements(collection,obj -> assertNull(obj.getFieldBinary()));\nbreak;\ncase DATE:collection.setValue(AllJavaTypes.FIELD_DATE,new Date(1000));\nassertElements(collection,obj -> assertEquals(new Date(1000),obj.getFieldDate()));\ncollection.setValue(AllJavaTypes.FIELD_DATE,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDate()));\nbreak;\ncase DECIMAL128:collection.setValue(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(1000));\nassertElements(collection,obj -> assertEquals(new Decimal128(1000),obj.getFieldDecimal128()));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDecimal128()));\nbreak;\ncase OBJECT_ID:String hex=TestHelper.randomObjectIdHexString();\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(hex));\nassertElements(collection,obj -> assertEquals(new ObjectId(hex),obj.getFieldObjectId()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObjectId()));\nbreak;\ncase UUID:String uuid=UUID.randomUUID().toString();\ncollection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\nassertElements(collection,obj -> assertEquals(UUID.fromString(uuid),obj.getFieldUUID()));\ncollection.setValue(AllJavaTypes.FIELD_UUID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldUUID()));\nbreak;\ncase OBJECT:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,42);\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,childObj);\nassertElements(collection,obj -> assertEquals(childObj,obj.getFieldObject()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObject()));\nbreak;\n}\ncase MODEL_LIST:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,43);\ncollection.setValue(AllJavaTypes.FIELD_LIST,new RealmList<>(childObj));\nassertElements(collection,obj -> {\nassertEquals(1,obj.getFieldList().size());\nassertEquals(childObj,obj.getFieldList().first());\n}\n);\nbreak;\n}\ncase STRING_VALUE_LIST:{\nRealmList<String> list=new RealmList<>(\"Foo\",\"Bar\");\ncollection.setValue(AllJavaTypes.FIELD_STRING_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(\"Foo\",obj.getFieldStringList().first());\nassertEquals(\"Bar\",obj.getFieldStringList().last());\n}\n);\nbreak;\n}\ncase BOOLEAN_VALUE_LIST:{\nRealmList<Boolean> list=new RealmList<>(true,false);\ncollection.setValue(AllJavaTypes.FIELD_BOOLEAN_LIST,list);\nassertElements(collection,obj -> {\nassertTrue(obj.getFieldBooleanList().first());\nassertFalse(obj.getFieldBooleanList().last());\n}\n);\nbreak;\n}\ncase BYTE_VALUE_LIST:{\nRealmList<Byte> list=new RealmList<>((byte)1,(byte)2);\ncollection.setValue(AllJavaTypes.FIELD_BYTE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Byte.valueOf((byte)1),obj.getFieldByteList().first());\nassertEquals(Byte.valueOf((byte)2),obj.getFieldByteList().last());\n}\n);\nbreak;\n}\ncase SHORT_VALUE_LIST:{\nRealmList<Short> list=new RealmList<>((short)1,(short)2);\ncollection.setValue(AllJavaTypes.FIELD_SHORT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Short.valueOf((short)1),obj.getFieldShortList().first());\nassertEquals(Short.valueOf((short)2),obj.getFieldShortList().last());\n}\n);\nbreak;\n}\ncase INTEGER_VALUE_LIST:{\nRealmList<Integer> list=new RealmList<>(1,2);\ncollection.setValue(AllJavaTypes.FIELD_INTEGER_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Integer.valueOf(1),obj.getFieldIntegerList().first());\nassertEquals(Integer.valueOf(2),obj.getFieldIntegerList().last());\n}\n);\nbreak;\n}\ncase LONG_VALUE_LIST:{\nRealmList<Long> list=new RealmList<>(1L,2L);\ncollection.setValue(AllJavaTypes.FIELD_LONG_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Long.valueOf(1),obj.getFieldLongList().first());\nassertEquals(Long.valueOf(2),obj.getFieldLongList().last());\n}\n);\nbreak;\n}\ncase FLOAT_VALUE_LIST:{\nRealmList<Float> list=new RealmList<>(1.1F,2.2F);\ncollection.setValue(AllJavaTypes.FIELD_FLOAT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1F,obj.getFieldFloatList().first(),0F);\nassertEquals(2.2F,obj.getFieldFloatList().last(),0F);\n}\n);\nbreak;\n}\ncase DOUBLE_VALUE_LIST:{\nRealmList<Double> list=new RealmList<>(1.1D,2.2D);\ncollection.setValue(AllJavaTypes.FIELD_DOUBLE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1D,obj.getFieldDoubleList().first(),0D);\nassertEquals(2.2D,obj.getFieldDoubleList().last(),0D);\n}\n);\nbreak;\n}\ncase BINARY_VALUE_LIST:{\nRealmList<byte[]> list=new RealmList<>(new byte[]{1,2,3},new byte[]{2,3,4});\ncollection.setValue(AllJavaTypes.FIELD_BINARY_LIST,list);\nassertElements(collection,obj -> {\nassertArrayEquals(new byte[]{1,2,3},obj.getFieldBinaryList().first());\nassertArrayEquals(new byte[]{2,3,4},obj.getFieldBinaryList().last());\n}\n);\nbreak;\n}\ncase DATE_VALUE_LIST:{\nRealmList<Date> list=new RealmList<>(new Date(1000),new Date(2000));\ncollection.setValue(AllJavaTypes.FIELD_DATE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Date(1000),obj.getFieldDateList().first());\nassertEquals(new Date(2000),obj.getFieldDateList().last());\n}\n);\nbreak;\n}\ncase DECIMAL128_VALUE_LIST:{\nRealmList<Decimal128> list=new RealmList<>(new Decimal128(1000),new Decimal128(2000));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Decimal128(1000),obj.getFieldDecimal128List().first());\nassertEquals(new Decimal128(2000),obj.getFieldDecimal128List().last());\n}\n);\nbreak;\n}\ncase OBJECT_ID_VALUE_LIST:{\nString hex1=TestHelper.randomObjectIdHexString();\nString hex2=TestHelper.randomObjectIdHexString();\nRealmList<ObjectId> list=new RealmList<>(new ObjectId(hex1),new ObjectId(hex2));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new ObjectId(hex1),obj.getFieldObjectIdList().first());\nassertEquals(new ObjectId(hex2),obj.getFieldObjectIdList().last());\n}\n);\nbreak;\n}\ncase UUID_VALUE_LIST:{\nString uuid1=UUID.randomUUID().toString();\nString uuid2=UUID.randomUUID().toString();\nRealmList<UUID> list=new RealmList<>(UUID.fromString(uuid1),UUID.fromString(uuid2));\ncollection.setValue(AllJavaTypes.FIELD_UUID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(UUID.fromString(uuid1),obj.getFieldUUIDList().first());\nassertEquals(UUID.fromString(uuid2),obj.getFieldUUIDList().last());\n}\n);\nbreak;\n}\ndefault:fail(\"Unknown type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1450,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12273,
        "startLineNumber" : 820,
        "startColumnNumber" : 8,
        "endLineNumber" : 1029,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (BulkSetMethods type : BulkSetMethods.values()) {\nswitch (type) {\ncase STRING:    collection.setValue(AllJavaTypes.FIELD_STRING,\"foo\");\n  assertElements(collection,obj -> assertEquals(\"foo\",obj.getFieldString()));\ncollection.setValue(AllJavaTypes.FIELD_STRING,null);\nassertElements(collection,obj -> assertEquals(null,obj.getFieldString()));\nbreak;\ncase BOOLEAN:collection.setValue(AllJavaTypes.FIELD_BOOLEAN,true);\nassertElements(collection,obj -> assertTrue(obj.isFieldBoolean()));\nbreak;\ncase BYTE:collection.setValue(AllJavaTypes.FIELD_BYTE,(byte)1);\nassertElements(collection,obj -> assertEquals((byte)1,obj.getFieldByte()));\nbreak;\ncase SHORT:collection.setValue(AllJavaTypes.FIELD_SHORT,(short)2);\nassertElements(collection,obj -> assertEquals((short)2,obj.getFieldShort()));\nbreak;\ncase INTEGER:collection.setValue(AllJavaTypes.FIELD_INT,3);\nassertElements(collection,obj -> assertEquals(3,obj.getFieldInt()));\nbreak;\ncase LONG:collection.setValue(AllJavaTypes.FIELD_LONG,4L);\nassertElements(collection,obj -> assertEquals(4L,obj.getFieldLong()));\nbreak;\ncase FLOAT:collection.setValue(AllJavaTypes.FIELD_FLOAT,1.23F);\nassertElements(collection,obj -> assertEquals(1.23F,obj.getFieldFloat(),0F));\nbreak;\ncase DOUBLE:collection.setValue(AllJavaTypes.FIELD_DOUBLE,1.234);\nassertElements(collection,obj -> assertEquals(1.234,obj.getFieldDouble(),0F));\nbreak;\ncase BINARY:collection.setValue(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nassertElements(collection,obj -> assertArrayEquals(new byte[]{1,2,3},obj.getFieldBinary()));\ncollection.setValue(AllJavaTypes.FIELD_BINARY,null);\nassertElements(collection,obj -> assertNull(obj.getFieldBinary()));\nbreak;\ncase DATE:collection.setValue(AllJavaTypes.FIELD_DATE,new Date(1000));\nassertElements(collection,obj -> assertEquals(new Date(1000),obj.getFieldDate()));\ncollection.setValue(AllJavaTypes.FIELD_DATE,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDate()));\nbreak;\ncase DECIMAL128:collection.setValue(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(1000));\nassertElements(collection,obj -> assertEquals(new Decimal128(1000),obj.getFieldDecimal128()));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDecimal128()));\nbreak;\ncase OBJECT_ID:String hex=TestHelper.randomObjectIdHexString();\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(hex));\nassertElements(collection,obj -> assertEquals(new ObjectId(hex),obj.getFieldObjectId()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObjectId()));\nbreak;\ncase UUID:String uuid=UUID.randomUUID().toString();\ncollection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\nassertElements(collection,obj -> assertEquals(UUID.fromString(uuid),obj.getFieldUUID()));\ncollection.setValue(AllJavaTypes.FIELD_UUID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldUUID()));\nbreak;\ncase OBJECT:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,42);\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,childObj);\nassertElements(collection,obj -> assertEquals(childObj,obj.getFieldObject()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObject()));\nbreak;\n}\ncase MODEL_LIST:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,43);\ncollection.setValue(AllJavaTypes.FIELD_LIST,new RealmList<>(childObj));\nassertElements(collection,obj -> {\nassertEquals(1,obj.getFieldList().size());\nassertEquals(childObj,obj.getFieldList().first());\n}\n);\nbreak;\n}\ncase STRING_VALUE_LIST:{\nRealmList<String> list=new RealmList<>(\"Foo\",\"Bar\");\ncollection.setValue(AllJavaTypes.FIELD_STRING_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(\"Foo\",obj.getFieldStringList().first());\nassertEquals(\"Bar\",obj.getFieldStringList().last());\n}\n);\nbreak;\n}\ncase BOOLEAN_VALUE_LIST:{\nRealmList<Boolean> list=new RealmList<>(true,false);\ncollection.setValue(AllJavaTypes.FIELD_BOOLEAN_LIST,list);\nassertElements(collection,obj -> {\nassertTrue(obj.getFieldBooleanList().first());\nassertFalse(obj.getFieldBooleanList().last());\n}\n);\nbreak;\n}\ncase BYTE_VALUE_LIST:{\nRealmList<Byte> list=new RealmList<>((byte)1,(byte)2);\ncollection.setValue(AllJavaTypes.FIELD_BYTE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Byte.valueOf((byte)1),obj.getFieldByteList().first());\nassertEquals(Byte.valueOf((byte)2),obj.getFieldByteList().last());\n}\n);\nbreak;\n}\ncase SHORT_VALUE_LIST:{\nRealmList<Short> list=new RealmList<>((short)1,(short)2);\ncollection.setValue(AllJavaTypes.FIELD_SHORT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Short.valueOf((short)1),obj.getFieldShortList().first());\nassertEquals(Short.valueOf((short)2),obj.getFieldShortList().last());\n}\n);\nbreak;\n}\ncase INTEGER_VALUE_LIST:{\nRealmList<Integer> list=new RealmList<>(1,2);\ncollection.setValue(AllJavaTypes.FIELD_INTEGER_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Integer.valueOf(1),obj.getFieldIntegerList().first());\nassertEquals(Integer.valueOf(2),obj.getFieldIntegerList().last());\n}\n);\nbreak;\n}\ncase LONG_VALUE_LIST:{\nRealmList<Long> list=new RealmList<>(1L,2L);\ncollection.setValue(AllJavaTypes.FIELD_LONG_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Long.valueOf(1),obj.getFieldLongList().first());\nassertEquals(Long.valueOf(2),obj.getFieldLongList().last());\n}\n);\nbreak;\n}\ncase FLOAT_VALUE_LIST:{\nRealmList<Float> list=new RealmList<>(1.1F,2.2F);\ncollection.setValue(AllJavaTypes.FIELD_FLOAT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1F,obj.getFieldFloatList().first(),0F);\nassertEquals(2.2F,obj.getFieldFloatList().last(),0F);\n}\n);\nbreak;\n}\ncase DOUBLE_VALUE_LIST:{\nRealmList<Double> list=new RealmList<>(1.1D,2.2D);\ncollection.setValue(AllJavaTypes.FIELD_DOUBLE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1D,obj.getFieldDoubleList().first(),0D);\nassertEquals(2.2D,obj.getFieldDoubleList().last(),0D);\n}\n);\nbreak;\n}\ncase BINARY_VALUE_LIST:{\nRealmList<byte[]> list=new RealmList<>(new byte[]{1,2,3},new byte[]{2,3,4});\ncollection.setValue(AllJavaTypes.FIELD_BINARY_LIST,list);\nassertElements(collection,obj -> {\nassertArrayEquals(new byte[]{1,2,3},obj.getFieldBinaryList().first());\nassertArrayEquals(new byte[]{2,3,4},obj.getFieldBinaryList().last());\n}\n);\nbreak;\n}\ncase DATE_VALUE_LIST:{\nRealmList<Date> list=new RealmList<>(new Date(1000),new Date(2000));\ncollection.setValue(AllJavaTypes.FIELD_DATE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Date(1000),obj.getFieldDateList().first());\nassertEquals(new Date(2000),obj.getFieldDateList().last());\n}\n);\nbreak;\n}\ncase DECIMAL128_VALUE_LIST:{\nRealmList<Decimal128> list=new RealmList<>(new Decimal128(1000),new Decimal128(2000));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Decimal128(1000),obj.getFieldDecimal128List().first());\nassertEquals(new Decimal128(2000),obj.getFieldDecimal128List().last());\n}\n);\nbreak;\n}\ncase OBJECT_ID_VALUE_LIST:{\nString hex1=TestHelper.randomObjectIdHexString();\nString hex2=TestHelper.randomObjectIdHexString();\nRealmList<ObjectId> list=new RealmList<>(new ObjectId(hex1),new ObjectId(hex2));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new ObjectId(hex1),obj.getFieldObjectIdList().first());\nassertEquals(new ObjectId(hex2),obj.getFieldObjectIdList().last());\n}\n);\nbreak;\n}\ncase UUID_VALUE_LIST:{\nString uuid1=UUID.randomUUID().toString();\nString uuid2=UUID.randomUUID().toString();\nRealmList<UUID> list=new RealmList<>(UUID.fromString(uuid1),UUID.fromString(uuid2));\ncollection.setValue(AllJavaTypes.FIELD_UUID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(UUID.fromString(uuid1),obj.getFieldUUIDList().first());\nassertEquals(UUID.fromString(uuid2),obj.getFieldUUIDList().last());\n}\n);\nbreak;\n}\ndefault:fail(\"Unknown type: \" + type);\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 1458,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12447,
        "startLineNumber" : 816,
        "startColumnNumber" : 27,
        "endLineNumber" : 1030,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  populateAllJavaTypes(5);\n  RealmResults<AllJavaTypes> collection=realm.where(AllJavaTypes.class).findAll();\n  realm.beginTransaction();\n  for (  BulkSetMethods type : BulkSetMethods.values()) {\nswitch (type) {\ncase STRING:      collection.setValue(AllJavaTypes.FIELD_STRING,\"foo\");\n    assertElements(collection,obj -> assertEquals(\"foo\",obj.getFieldString()));\n  collection.setValue(AllJavaTypes.FIELD_STRING,null);\nassertElements(collection,obj -> assertEquals(null,obj.getFieldString()));\nbreak;\ncase BOOLEAN:collection.setValue(AllJavaTypes.FIELD_BOOLEAN,true);\nassertElements(collection,obj -> assertTrue(obj.isFieldBoolean()));\nbreak;\ncase BYTE:collection.setValue(AllJavaTypes.FIELD_BYTE,(byte)1);\nassertElements(collection,obj -> assertEquals((byte)1,obj.getFieldByte()));\nbreak;\ncase SHORT:collection.setValue(AllJavaTypes.FIELD_SHORT,(short)2);\nassertElements(collection,obj -> assertEquals((short)2,obj.getFieldShort()));\nbreak;\ncase INTEGER:collection.setValue(AllJavaTypes.FIELD_INT,3);\nassertElements(collection,obj -> assertEquals(3,obj.getFieldInt()));\nbreak;\ncase LONG:collection.setValue(AllJavaTypes.FIELD_LONG,4L);\nassertElements(collection,obj -> assertEquals(4L,obj.getFieldLong()));\nbreak;\ncase FLOAT:collection.setValue(AllJavaTypes.FIELD_FLOAT,1.23F);\nassertElements(collection,obj -> assertEquals(1.23F,obj.getFieldFloat(),0F));\nbreak;\ncase DOUBLE:collection.setValue(AllJavaTypes.FIELD_DOUBLE,1.234);\nassertElements(collection,obj -> assertEquals(1.234,obj.getFieldDouble(),0F));\nbreak;\ncase BINARY:collection.setValue(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nassertElements(collection,obj -> assertArrayEquals(new byte[]{1,2,3},obj.getFieldBinary()));\ncollection.setValue(AllJavaTypes.FIELD_BINARY,null);\nassertElements(collection,obj -> assertNull(obj.getFieldBinary()));\nbreak;\ncase DATE:collection.setValue(AllJavaTypes.FIELD_DATE,new Date(1000));\nassertElements(collection,obj -> assertEquals(new Date(1000),obj.getFieldDate()));\ncollection.setValue(AllJavaTypes.FIELD_DATE,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDate()));\nbreak;\ncase DECIMAL128:collection.setValue(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(1000));\nassertElements(collection,obj -> assertEquals(new Decimal128(1000),obj.getFieldDecimal128()));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDecimal128()));\nbreak;\ncase OBJECT_ID:String hex=TestHelper.randomObjectIdHexString();\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(hex));\nassertElements(collection,obj -> assertEquals(new ObjectId(hex),obj.getFieldObjectId()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObjectId()));\nbreak;\ncase UUID:String uuid=UUID.randomUUID().toString();\ncollection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\nassertElements(collection,obj -> assertEquals(UUID.fromString(uuid),obj.getFieldUUID()));\ncollection.setValue(AllJavaTypes.FIELD_UUID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldUUID()));\nbreak;\ncase OBJECT:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,42);\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,childObj);\nassertElements(collection,obj -> assertEquals(childObj,obj.getFieldObject()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObject()));\nbreak;\n}\ncase MODEL_LIST:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,43);\ncollection.setValue(AllJavaTypes.FIELD_LIST,new RealmList<>(childObj));\nassertElements(collection,obj -> {\nassertEquals(1,obj.getFieldList().size());\nassertEquals(childObj,obj.getFieldList().first());\n}\n);\nbreak;\n}\ncase STRING_VALUE_LIST:{\nRealmList<String> list=new RealmList<>(\"Foo\",\"Bar\");\ncollection.setValue(AllJavaTypes.FIELD_STRING_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(\"Foo\",obj.getFieldStringList().first());\nassertEquals(\"Bar\",obj.getFieldStringList().last());\n}\n);\nbreak;\n}\ncase BOOLEAN_VALUE_LIST:{\nRealmList<Boolean> list=new RealmList<>(true,false);\ncollection.setValue(AllJavaTypes.FIELD_BOOLEAN_LIST,list);\nassertElements(collection,obj -> {\nassertTrue(obj.getFieldBooleanList().first());\nassertFalse(obj.getFieldBooleanList().last());\n}\n);\nbreak;\n}\ncase BYTE_VALUE_LIST:{\nRealmList<Byte> list=new RealmList<>((byte)1,(byte)2);\ncollection.setValue(AllJavaTypes.FIELD_BYTE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Byte.valueOf((byte)1),obj.getFieldByteList().first());\nassertEquals(Byte.valueOf((byte)2),obj.getFieldByteList().last());\n}\n);\nbreak;\n}\ncase SHORT_VALUE_LIST:{\nRealmList<Short> list=new RealmList<>((short)1,(short)2);\ncollection.setValue(AllJavaTypes.FIELD_SHORT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Short.valueOf((short)1),obj.getFieldShortList().first());\nassertEquals(Short.valueOf((short)2),obj.getFieldShortList().last());\n}\n);\nbreak;\n}\ncase INTEGER_VALUE_LIST:{\nRealmList<Integer> list=new RealmList<>(1,2);\ncollection.setValue(AllJavaTypes.FIELD_INTEGER_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Integer.valueOf(1),obj.getFieldIntegerList().first());\nassertEquals(Integer.valueOf(2),obj.getFieldIntegerList().last());\n}\n);\nbreak;\n}\ncase LONG_VALUE_LIST:{\nRealmList<Long> list=new RealmList<>(1L,2L);\ncollection.setValue(AllJavaTypes.FIELD_LONG_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Long.valueOf(1),obj.getFieldLongList().first());\nassertEquals(Long.valueOf(2),obj.getFieldLongList().last());\n}\n);\nbreak;\n}\ncase FLOAT_VALUE_LIST:{\nRealmList<Float> list=new RealmList<>(1.1F,2.2F);\ncollection.setValue(AllJavaTypes.FIELD_FLOAT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1F,obj.getFieldFloatList().first(),0F);\nassertEquals(2.2F,obj.getFieldFloatList().last(),0F);\n}\n);\nbreak;\n}\ncase DOUBLE_VALUE_LIST:{\nRealmList<Double> list=new RealmList<>(1.1D,2.2D);\ncollection.setValue(AllJavaTypes.FIELD_DOUBLE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1D,obj.getFieldDoubleList().first(),0D);\nassertEquals(2.2D,obj.getFieldDoubleList().last(),0D);\n}\n);\nbreak;\n}\ncase BINARY_VALUE_LIST:{\nRealmList<byte[]> list=new RealmList<>(new byte[]{1,2,3},new byte[]{2,3,4});\ncollection.setValue(AllJavaTypes.FIELD_BINARY_LIST,list);\nassertElements(collection,obj -> {\nassertArrayEquals(new byte[]{1,2,3},obj.getFieldBinaryList().first());\nassertArrayEquals(new byte[]{2,3,4},obj.getFieldBinaryList().last());\n}\n);\nbreak;\n}\ncase DATE_VALUE_LIST:{\nRealmList<Date> list=new RealmList<>(new Date(1000),new Date(2000));\ncollection.setValue(AllJavaTypes.FIELD_DATE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Date(1000),obj.getFieldDateList().first());\nassertEquals(new Date(2000),obj.getFieldDateList().last());\n}\n);\nbreak;\n}\ncase DECIMAL128_VALUE_LIST:{\nRealmList<Decimal128> list=new RealmList<>(new Decimal128(1000),new Decimal128(2000));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Decimal128(1000),obj.getFieldDecimal128List().first());\nassertEquals(new Decimal128(2000),obj.getFieldDecimal128List().last());\n}\n);\nbreak;\n}\ncase OBJECT_ID_VALUE_LIST:{\nString hex1=TestHelper.randomObjectIdHexString();\nString hex2=TestHelper.randomObjectIdHexString();\nRealmList<ObjectId> list=new RealmList<>(new ObjectId(hex1),new ObjectId(hex2));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new ObjectId(hex1),obj.getFieldObjectIdList().first());\nassertEquals(new ObjectId(hex2),obj.getFieldObjectIdList().last());\n}\n);\nbreak;\n}\ncase UUID_VALUE_LIST:{\nString uuid1=UUID.randomUUID().toString();\nString uuid2=UUID.randomUUID().toString();\nRealmList<UUID> list=new RealmList<>(UUID.fromString(uuid1),UUID.fromString(uuid2));\ncollection.setValue(AllJavaTypes.FIELD_UUID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(UUID.fromString(uuid1),obj.getFieldUUIDList().first());\nassertEquals(UUID.fromString(uuid2),obj.getFieldUUIDList().last());\n}\n);\nbreak;\n}\ndefault:fail(\"Unknown type: \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12480,
        "startLineNumber" : 815,
        "startColumnNumber" : 4,
        "endLineNumber" : 1030,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void setValue(){\n  populateAllJavaTypes(5);\n  RealmResults<AllJavaTypes> collection=realm.where(AllJavaTypes.class).findAll();\n  realm.beginTransaction();\n  for (  BulkSetMethods type : BulkSetMethods.values()) {\nswitch (type) {\ncase STRING:      collection.setValue(AllJavaTypes.FIELD_STRING,\"foo\");\n    assertElements(collection,obj -> assertEquals(\"foo\",obj.getFieldString()));\n  collection.setValue(AllJavaTypes.FIELD_STRING,null);\nassertElements(collection,obj -> assertEquals(null,obj.getFieldString()));\nbreak;\ncase BOOLEAN:collection.setValue(AllJavaTypes.FIELD_BOOLEAN,true);\nassertElements(collection,obj -> assertTrue(obj.isFieldBoolean()));\nbreak;\ncase BYTE:collection.setValue(AllJavaTypes.FIELD_BYTE,(byte)1);\nassertElements(collection,obj -> assertEquals((byte)1,obj.getFieldByte()));\nbreak;\ncase SHORT:collection.setValue(AllJavaTypes.FIELD_SHORT,(short)2);\nassertElements(collection,obj -> assertEquals((short)2,obj.getFieldShort()));\nbreak;\ncase INTEGER:collection.setValue(AllJavaTypes.FIELD_INT,3);\nassertElements(collection,obj -> assertEquals(3,obj.getFieldInt()));\nbreak;\ncase LONG:collection.setValue(AllJavaTypes.FIELD_LONG,4L);\nassertElements(collection,obj -> assertEquals(4L,obj.getFieldLong()));\nbreak;\ncase FLOAT:collection.setValue(AllJavaTypes.FIELD_FLOAT,1.23F);\nassertElements(collection,obj -> assertEquals(1.23F,obj.getFieldFloat(),0F));\nbreak;\ncase DOUBLE:collection.setValue(AllJavaTypes.FIELD_DOUBLE,1.234);\nassertElements(collection,obj -> assertEquals(1.234,obj.getFieldDouble(),0F));\nbreak;\ncase BINARY:collection.setValue(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nassertElements(collection,obj -> assertArrayEquals(new byte[]{1,2,3},obj.getFieldBinary()));\ncollection.setValue(AllJavaTypes.FIELD_BINARY,null);\nassertElements(collection,obj -> assertNull(obj.getFieldBinary()));\nbreak;\ncase DATE:collection.setValue(AllJavaTypes.FIELD_DATE,new Date(1000));\nassertElements(collection,obj -> assertEquals(new Date(1000),obj.getFieldDate()));\ncollection.setValue(AllJavaTypes.FIELD_DATE,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDate()));\nbreak;\ncase DECIMAL128:collection.setValue(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(1000));\nassertElements(collection,obj -> assertEquals(new Decimal128(1000),obj.getFieldDecimal128()));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128,null);\nassertElements(collection,obj -> assertNull(obj.getFieldDecimal128()));\nbreak;\ncase OBJECT_ID:String hex=TestHelper.randomObjectIdHexString();\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(hex));\nassertElements(collection,obj -> assertEquals(new ObjectId(hex),obj.getFieldObjectId()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObjectId()));\nbreak;\ncase UUID:String uuid=UUID.randomUUID().toString();\ncollection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\nassertElements(collection,obj -> assertEquals(UUID.fromString(uuid),obj.getFieldUUID()));\ncollection.setValue(AllJavaTypes.FIELD_UUID,null);\nassertElements(collection,obj -> assertNull(obj.getFieldUUID()));\nbreak;\ncase OBJECT:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,42);\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,childObj);\nassertElements(collection,obj -> assertEquals(childObj,obj.getFieldObject()));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT,null);\nassertElements(collection,obj -> assertNull(obj.getFieldObject()));\nbreak;\n}\ncase MODEL_LIST:{\nAllJavaTypes childObj=realm.createObject(AllJavaTypes.class,43);\ncollection.setValue(AllJavaTypes.FIELD_LIST,new RealmList<>(childObj));\nassertElements(collection,obj -> {\nassertEquals(1,obj.getFieldList().size());\nassertEquals(childObj,obj.getFieldList().first());\n}\n);\nbreak;\n}\ncase STRING_VALUE_LIST:{\nRealmList<String> list=new RealmList<>(\"Foo\",\"Bar\");\ncollection.setValue(AllJavaTypes.FIELD_STRING_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(\"Foo\",obj.getFieldStringList().first());\nassertEquals(\"Bar\",obj.getFieldStringList().last());\n}\n);\nbreak;\n}\ncase BOOLEAN_VALUE_LIST:{\nRealmList<Boolean> list=new RealmList<>(true,false);\ncollection.setValue(AllJavaTypes.FIELD_BOOLEAN_LIST,list);\nassertElements(collection,obj -> {\nassertTrue(obj.getFieldBooleanList().first());\nassertFalse(obj.getFieldBooleanList().last());\n}\n);\nbreak;\n}\ncase BYTE_VALUE_LIST:{\nRealmList<Byte> list=new RealmList<>((byte)1,(byte)2);\ncollection.setValue(AllJavaTypes.FIELD_BYTE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Byte.valueOf((byte)1),obj.getFieldByteList().first());\nassertEquals(Byte.valueOf((byte)2),obj.getFieldByteList().last());\n}\n);\nbreak;\n}\ncase SHORT_VALUE_LIST:{\nRealmList<Short> list=new RealmList<>((short)1,(short)2);\ncollection.setValue(AllJavaTypes.FIELD_SHORT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Short.valueOf((short)1),obj.getFieldShortList().first());\nassertEquals(Short.valueOf((short)2),obj.getFieldShortList().last());\n}\n);\nbreak;\n}\ncase INTEGER_VALUE_LIST:{\nRealmList<Integer> list=new RealmList<>(1,2);\ncollection.setValue(AllJavaTypes.FIELD_INTEGER_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Integer.valueOf(1),obj.getFieldIntegerList().first());\nassertEquals(Integer.valueOf(2),obj.getFieldIntegerList().last());\n}\n);\nbreak;\n}\ncase LONG_VALUE_LIST:{\nRealmList<Long> list=new RealmList<>(1L,2L);\ncollection.setValue(AllJavaTypes.FIELD_LONG_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(Long.valueOf(1),obj.getFieldLongList().first());\nassertEquals(Long.valueOf(2),obj.getFieldLongList().last());\n}\n);\nbreak;\n}\ncase FLOAT_VALUE_LIST:{\nRealmList<Float> list=new RealmList<>(1.1F,2.2F);\ncollection.setValue(AllJavaTypes.FIELD_FLOAT_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1F,obj.getFieldFloatList().first(),0F);\nassertEquals(2.2F,obj.getFieldFloatList().last(),0F);\n}\n);\nbreak;\n}\ncase DOUBLE_VALUE_LIST:{\nRealmList<Double> list=new RealmList<>(1.1D,2.2D);\ncollection.setValue(AllJavaTypes.FIELD_DOUBLE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(1.1D,obj.getFieldDoubleList().first(),0D);\nassertEquals(2.2D,obj.getFieldDoubleList().last(),0D);\n}\n);\nbreak;\n}\ncase BINARY_VALUE_LIST:{\nRealmList<byte[]> list=new RealmList<>(new byte[]{1,2,3},new byte[]{2,3,4});\ncollection.setValue(AllJavaTypes.FIELD_BINARY_LIST,list);\nassertElements(collection,obj -> {\nassertArrayEquals(new byte[]{1,2,3},obj.getFieldBinaryList().first());\nassertArrayEquals(new byte[]{2,3,4},obj.getFieldBinaryList().last());\n}\n);\nbreak;\n}\ncase DATE_VALUE_LIST:{\nRealmList<Date> list=new RealmList<>(new Date(1000),new Date(2000));\ncollection.setValue(AllJavaTypes.FIELD_DATE_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Date(1000),obj.getFieldDateList().first());\nassertEquals(new Date(2000),obj.getFieldDateList().last());\n}\n);\nbreak;\n}\ncase DECIMAL128_VALUE_LIST:{\nRealmList<Decimal128> list=new RealmList<>(new Decimal128(1000),new Decimal128(2000));\ncollection.setValue(AllJavaTypes.FIELD_DECIMAL128_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new Decimal128(1000),obj.getFieldDecimal128List().first());\nassertEquals(new Decimal128(2000),obj.getFieldDecimal128List().last());\n}\n);\nbreak;\n}\ncase OBJECT_ID_VALUE_LIST:{\nString hex1=TestHelper.randomObjectIdHexString();\nString hex2=TestHelper.randomObjectIdHexString();\nRealmList<ObjectId> list=new RealmList<>(new ObjectId(hex1),new ObjectId(hex2));\ncollection.setValue(AllJavaTypes.FIELD_OBJECT_ID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(new ObjectId(hex1),obj.getFieldObjectIdList().first());\nassertEquals(new ObjectId(hex2),obj.getFieldObjectIdList().last());\n}\n);\nbreak;\n}\ncase UUID_VALUE_LIST:{\nString uuid1=UUID.randomUUID().toString();\nString uuid2=UUID.randomUUID().toString();\nRealmList<UUID> list=new RealmList<>(UUID.fromString(uuid1),UUID.fromString(uuid2));\ncollection.setValue(AllJavaTypes.FIELD_UUID_LIST,list);\nassertElements(collection,obj -> {\nassertEquals(UUID.fromString(uuid1),obj.getFieldUUIDList().first());\nassertEquals(UUID.fromString(uuid2),obj.getFieldUUIDList().last());\n}\n);\nbreak;\n}\ndefault:fail(\"Unknown type: \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1489,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 883,
        "startColumnNumber" : 20,
        "endLineNumber" : 883,
        "endColumnNumber" : 88
      },
      "nodeContext" : "collection.setValue(AllJavaTypes.FIELD_UUID,UUID.fromString(uuid));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.UUID"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 883,
    "startColumnNumber" : 65,
    "endLineNumber" : 883,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}