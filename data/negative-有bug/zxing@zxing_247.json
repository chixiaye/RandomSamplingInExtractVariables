{
  "id" : 247,
  "expression" : "new IllegalArgumentException(\"Found empty contents\")",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(\"Found empty contents\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 52,
      "startColumnNumber" : 12,
      "endLineNumber" : 52,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 65
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Found empty contents\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Found empty contents\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (contents.isEmpty()) {\n  throw new IllegalArgumentException(\"Found empty contents\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2842,
        "startLineNumber" : 49,
        "startColumnNumber" : 117,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (contents.isEmpty()) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  if (format != BarcodeFormat.DATA_MATRIX) {\n    throw new IllegalArgumentException(\"Can only encode DATA_MATRIX, but got \" + format);\n  }\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Requested dimensions can't be negative: \" + width + 'x'+ height);\n  }\n  SymbolShapeHint shape=SymbolShapeHint.FORCE_NONE;\n  Dimension minSize=null;\n  Dimension maxSize=null;\n  if (hints != null) {\n    SymbolShapeHint requestedShape=(SymbolShapeHint)hints.get(EncodeHintType.DATA_MATRIX_SHAPE);\n    if (requestedShape != null) {\n      shape=requestedShape;\n    }\n    @SuppressWarnings(\"deprecation\") Dimension requestedMinSize=(Dimension)hints.get(EncodeHintType.MIN_SIZE);\n    if (requestedMinSize != null) {\n      minSize=requestedMinSize;\n    }\n    @SuppressWarnings(\"deprecation\") Dimension requestedMaxSize=(Dimension)hints.get(EncodeHintType.MAX_SIZE);\n    if (requestedMaxSize != null) {\n      maxSize=requestedMaxSize;\n    }\n  }\n  String encoded;\n  boolean hasCompactionHint=hints != null && hints.containsKey(EncodeHintType.DATA_MATRIX_COMPACT) && Boolean.parseBoolean(hints.get(EncodeHintType.DATA_MATRIX_COMPACT).toString());\n  if (hasCompactionHint) {\n    boolean hasGS1FormatHint=hints.containsKey(EncodeHintType.GS1_FORMAT) && Boolean.parseBoolean(hints.get(EncodeHintType.GS1_FORMAT).toString());\n    Charset charset=null;\n    boolean hasEncodingHint=hints.containsKey(EncodeHintType.CHARACTER_SET);\n    if (hasEncodingHint) {\n      charset=Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());\n    }\n    encoded=MinimalEncoder.encodeHighLevel(contents,charset,hasGS1FormatHint ? 0x1D : -1,shape);\n  }\n else {\n    boolean hasForceC40Hint=hints != null && hints.containsKey(EncodeHintType.FORCE_C40) && Boolean.parseBoolean(hints.get(EncodeHintType.FORCE_C40).toString());\n    encoded=HighLevelEncoder.encodeHighLevel(contents,shape,minSize,maxSize,hasForceC40Hint);\n  }\n  SymbolInfo symbolInfo=SymbolInfo.lookup(encoded.length(),shape,minSize,maxSize,true);\n  String codewords=ErrorCorrection.encodeECC200(encoded,symbolInfo);\n  DefaultPlacement placement=new DefaultPlacement(codewords,symbolInfo.getSymbolDataWidth(),symbolInfo.getSymbolDataHeight());\n  placement.place();\n  return encodeLowLevel(placement,symbolInfo,width,height);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BitMatrix encode(String contents,BarcodeFormat format,int width,int height,Map<EncodeHintType,?> hints){\n  if (contents.isEmpty()) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  if (format != BarcodeFormat.DATA_MATRIX) {\n    throw new IllegalArgumentException(\"Can only encode DATA_MATRIX, but got \" + format);\n  }\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Requested dimensions can't be negative: \" + width + 'x'+ height);\n  }\n  SymbolShapeHint shape=SymbolShapeHint.FORCE_NONE;\n  Dimension minSize=null;\n  Dimension maxSize=null;\n  if (hints != null) {\n    SymbolShapeHint requestedShape=(SymbolShapeHint)hints.get(EncodeHintType.DATA_MATRIX_SHAPE);\n    if (requestedShape != null) {\n      shape=requestedShape;\n    }\n    @SuppressWarnings(\"deprecation\") Dimension requestedMinSize=(Dimension)hints.get(EncodeHintType.MIN_SIZE);\n    if (requestedMinSize != null) {\n      minSize=requestedMinSize;\n    }\n    @SuppressWarnings(\"deprecation\") Dimension requestedMaxSize=(Dimension)hints.get(EncodeHintType.MAX_SIZE);\n    if (requestedMaxSize != null) {\n      maxSize=requestedMaxSize;\n    }\n  }\n  String encoded;\n  boolean hasCompactionHint=hints != null && hints.containsKey(EncodeHintType.DATA_MATRIX_COMPACT) && Boolean.parseBoolean(hints.get(EncodeHintType.DATA_MATRIX_COMPACT).toString());\n  if (hasCompactionHint) {\n    boolean hasGS1FormatHint=hints.containsKey(EncodeHintType.GS1_FORMAT) && Boolean.parseBoolean(hints.get(EncodeHintType.GS1_FORMAT).toString());\n    Charset charset=null;\n    boolean hasEncodingHint=hints.containsKey(EncodeHintType.CHARACTER_SET);\n    if (hasEncodingHint) {\n      charset=Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());\n    }\n    encoded=MinimalEncoder.encodeHighLevel(contents,charset,hasGS1FormatHint ? 0x1D : -1,shape);\n  }\n else {\n    boolean hasForceC40Hint=hints != null && hints.containsKey(EncodeHintType.FORCE_C40) && Boolean.parseBoolean(hints.get(EncodeHintType.FORCE_C40).toString());\n    encoded=HighLevelEncoder.encodeHighLevel(contents,shape,minSize,maxSize,hasForceC40Hint);\n  }\n  SymbolInfo symbolInfo=SymbolInfo.lookup(encoded.length(),shape,minSize,maxSize,true);\n  String codewords=ErrorCorrection.encodeECC200(encoded,symbolInfo);\n  DefaultPlacement placement=new DefaultPlacement(codewords,symbolInfo.getSymbolDataWidth(),symbolInfo.getSymbolDataHeight());\n  placement.place();\n  return encodeLowLevel(placement,symbolInfo,width,height);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 65
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Found empty contents\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 52,
    "startColumnNumber" : 12,
    "endLineNumber" : 52,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}