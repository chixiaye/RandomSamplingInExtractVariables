{
  "id" : 3,
  "expression" : "cacheKey != null",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/main/java/com/netflix/hystrix/AbstractCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cacheKey != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 492,
      "startColumnNumber" : 43,
      "endLineNumber" : 492,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 492,
        "startColumnNumber" : 20,
        "endLineNumber" : 492,
        "endColumnNumber" : 59
      },
      "nodeContext" : "requestCacheEnabled && cacheKey != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 962,
        "startLineNumber" : 492,
        "startColumnNumber" : 16,
        "endLineNumber" : 507,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (requestCacheEnabled && cacheKey != null) {\n  HystrixCachedObservable<R> toCache=HystrixCachedObservable.from(hystrixObservable,_cmd);\n  HystrixCommandResponseFromCache<R> fromCache=(HystrixCommandResponseFromCache<R>)requestCache.putIfAbsent(cacheKey,toCache);\n  if (fromCache != null) {\n    toCache.unsubscribe();\n    isResponseFromCache=true;\n    return handleRequestCacheHitAndEmitValues(fromCache,_cmd);\n  }\n else {\n    afterCache=toCache.toObservable();\n  }\n}\n else {\n  afterCache=hystrixObservable;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3166,
        "startLineNumber" : 456,
        "startColumnNumber" : 40,
        "endLineNumber" : 513,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!commandState.compareAndSet(CommandState.NOT_STARTED,CommandState.OBSERVABLE_CHAIN_CREATED)) {\n    IllegalStateException ex=new IllegalStateException(\"This instance can only be executed once. Please instantiate a new instance.\");\n    throw new HystrixRuntimeException(FailureType.BAD_REQUEST_EXCEPTION,_cmd.getClass(),getLogMessagePrefix() + \" command executed multiple times - this is not permitted.\",ex,null);\n  }\n  commandStartTimestamp=System.currentTimeMillis();\n  if (properties.requestLogEnabled().get()) {\n    if (currentRequestLog != null) {\n      currentRequestLog.addExecutedCommand(_cmd);\n    }\n  }\n  final boolean requestCacheEnabled=isRequestCachingEnabled();\n  final String cacheKey=getCacheKey();\n  if (requestCacheEnabled) {\n    HystrixCommandResponseFromCache<R> fromCache=(HystrixCommandResponseFromCache<R>)requestCache.get(cacheKey);\n    if (fromCache != null) {\n      isResponseFromCache=true;\n      return handleRequestCacheHitAndEmitValues(fromCache,_cmd);\n    }\n  }\n  Observable<R> hystrixObservable=Observable.defer(applyHystrixSemantics).map(wrapWithAllOnNextHooks);\n  Observable<R> afterCache;\n  if (requestCacheEnabled && cacheKey != null) {\n    HystrixCachedObservable<R> toCache=HystrixCachedObservable.from(hystrixObservable,_cmd);\n    HystrixCommandResponseFromCache<R> fromCache=(HystrixCommandResponseFromCache<R>)requestCache.putIfAbsent(cacheKey,toCache);\n    if (fromCache != null) {\n      toCache.unsubscribe();\n      isResponseFromCache=true;\n      return handleRequestCacheHitAndEmitValues(fromCache,_cmd);\n    }\n else {\n      afterCache=toCache.toObservable();\n    }\n  }\n else {\n    afterCache=hystrixObservable;\n  }\n  return afterCache.doOnTerminate(terminateCommandCleanup).doOnUnsubscribe(unsubscribeCommandCleanup).doOnCompleted(fireOnCompletedHook);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3216,
        "startLineNumber" : 455,
        "startColumnNumber" : 12,
        "endLineNumber" : 513,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public Observable<R> call(){\n  if (!commandState.compareAndSet(CommandState.NOT_STARTED,CommandState.OBSERVABLE_CHAIN_CREATED)) {\n    IllegalStateException ex=new IllegalStateException(\"This instance can only be executed once. Please instantiate a new instance.\");\n    throw new HystrixRuntimeException(FailureType.BAD_REQUEST_EXCEPTION,_cmd.getClass(),getLogMessagePrefix() + \" command executed multiple times - this is not permitted.\",ex,null);\n  }\n  commandStartTimestamp=System.currentTimeMillis();\n  if (properties.requestLogEnabled().get()) {\n    if (currentRequestLog != null) {\n      currentRequestLog.addExecutedCommand(_cmd);\n    }\n  }\n  final boolean requestCacheEnabled=isRequestCachingEnabled();\n  final String cacheKey=getCacheKey();\n  if (requestCacheEnabled) {\n    HystrixCommandResponseFromCache<R> fromCache=(HystrixCommandResponseFromCache<R>)requestCache.get(cacheKey);\n    if (fromCache != null) {\n      isResponseFromCache=true;\n      return handleRequestCacheHitAndEmitValues(fromCache,_cmd);\n    }\n  }\n  Observable<R> hystrixObservable=Observable.defer(applyHystrixSemantics).map(wrapWithAllOnNextHooks);\n  Observable<R> afterCache;\n  if (requestCacheEnabled && cacheKey != null) {\n    HystrixCachedObservable<R> toCache=HystrixCachedObservable.from(hystrixObservable,_cmd);\n    HystrixCommandResponseFromCache<R> fromCache=(HystrixCommandResponseFromCache<R>)requestCache.putIfAbsent(cacheKey,toCache);\n    if (fromCache != null) {\n      toCache.unsubscribe();\n      isResponseFromCache=true;\n      return handleRequestCacheHitAndEmitValues(fromCache,_cmd);\n    }\n else {\n      afterCache=toCache.toObservable();\n    }\n  }\n else {\n    afterCache=hystrixObservable;\n  }\n  return afterCache.doOnTerminate(terminateCommandCleanup).doOnUnsubscribe(unsubscribeCommandCleanup).doOnCompleted(fireOnCompletedHook);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 224,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 492,
        "startColumnNumber" : 20,
        "endLineNumber" : 492,
        "endColumnNumber" : 59
      },
      "nodeContext" : "requestCacheEnabled && cacheKey != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 492,
    "startColumnNumber" : 43,
    "endLineNumber" : 492,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}