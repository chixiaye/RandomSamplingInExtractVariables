{
  "id" : 463,
  "expression" : "0",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableDoOnUnsubscribeTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 72,
      "startColumnNumber" : 21,
      "endLineNumber" : 72,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 72,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 72,
        "startColumnNumber" : 13,
        "endLineNumber" : 72,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < subCount; ++i) {\n  TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n  subscriptions.add(NbpSubscriber);\n  longs.subscribe(NbpSubscriber);\n  subscribers.add(NbpSubscriber);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2822,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2884,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 72,
        "startColumnNumber" : 13,
        "endLineNumber" : 72,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 80,
      "startColumnNumber" : 21,
      "endLineNumber" : 80,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 80,
        "startColumnNumber" : 17,
        "endLineNumber" : 80,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 13,
        "endLineNumber" : 80,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < subCount; ++i) {\n  subscriptions.get(i).dispose();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2822,
        "startLineNumber" : 32,
        "startColumnNumber" : 55,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2884,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDoOnUnsubscribe() throws Exception {\n  int subCount=3;\n  final CountDownLatch upperLatch=new CountDownLatch(subCount);\n  final CountDownLatch lowerLatch=new CountDownLatch(subCount);\n  final CountDownLatch onNextLatch=new CountDownLatch(subCount);\n  final AtomicInteger upperCount=new AtomicInteger();\n  final AtomicInteger lowerCount=new AtomicInteger();\n  Observable<Long> longs=Observable.interval(50,TimeUnit.MILLISECONDS).doOnCancel(new Runnable(){\n    @Override public void run(){\n      upperLatch.countDown();\n      upperCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long aLong){\n      onNextLatch.countDown();\n    }\n  }\n).doOnCancel(new Runnable(){\n    @Override public void run(){\n      lowerLatch.countDown();\n      lowerCount.incrementAndGet();\n    }\n  }\n);\n  List<Disposable> subscriptions=new ArrayList<Disposable>();\n  List<TestObserver<Long>> subscribers=new ArrayList<TestObserver<Long>>();\n  for (int i=0; i < subCount; ++i) {\n    TestObserver<Long> NbpSubscriber=new TestObserver<Long>();\n    subscriptions.add(NbpSubscriber);\n    longs.subscribe(NbpSubscriber);\n    subscribers.add(NbpSubscriber);\n  }\n  onNextLatch.await();\n  for (int i=0; i < subCount; ++i) {\n    subscriptions.get(i).dispose();\n  }\n  upperLatch.await();\n  lowerLatch.await();\n  assertEquals(String.format(\"There should exactly %d un-subscription events for upper stream\",subCount),subCount,upperCount.get());\n  assertEquals(String.format(\"There should exactly %d un-subscription events for lower stream\",subCount),subCount,lowerCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 80,
        "startColumnNumber" : 13,
        "endLineNumber" : 80,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 72,
    "startColumnNumber" : 21,
    "endLineNumber" : 72,
    "endColumnNumber" : 22
  }, {
    "charLength" : 1,
    "startLineNumber" : 80,
    "startColumnNumber" : 21,
    "endLineNumber" : 80,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}