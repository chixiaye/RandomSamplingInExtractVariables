{
  "id" : 353,
  "expression" : "SuppressWarnings",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/tests/ShardedJedisTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SuppressWarnings",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 41,
      "startColumnNumber" : 5,
      "endLineNumber" : 41,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 33
      },
      "nodeContext" : "@SuppressWarnings(\"resource\")",
      "nodeType" : "SingleMemberAnnotation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 42,
        "endColumnNumber" : 57
      },
      "nodeContext" : "@SuppressWarnings(\"resource\") ShardedJedis shardedJedis=new ShardedJedis(shards);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 30,
        "startColumnNumber" : 73,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<JedisShardInfo> shards=new ArrayList<JedisShardInfo>(2);\n  JedisShardInfo shard1=new JedisShardInfo(redis1.getHost(),redis1.getPort());\n  shard1.setPassword(\"foobared\");\n  shards.add(shard1);\n  JedisShardInfo shard2=new JedisShardInfo(redis2.getHost(),redis2.getPort());\n  shard2.setPassword(\"foobared\");\n  shards.add(shard2);\n  @SuppressWarnings(\"resource\") ShardedJedis shardedJedis=new ShardedJedis(shards);\n  shardedJedis.set(\"a\",\"bar\");\n  JedisShardInfo ak=shardedJedis.getShardInfo(\"a\");\n  assertEquals(shard2,ak);\n  shardedJedis.set(\"b\",\"bar1\");\n  JedisShardInfo bk=shardedJedis.getShardInfo(\"b\");\n  assertEquals(shard1,bk);\n  Iterator<Jedis> it=shardedJedis.getAllShards().iterator();\n  Jedis deadClient=it.next();\n  deadClient.clientSetname(\"DEAD\");\n  for (  String clientInfo : deadClient.clientList().split(\"\\n\")) {\n    if (clientInfo.contains(\"DEAD\")) {\n      String[] hostAndPort=clientInfo.split(\" \")[1].split(\"=\")[1].split(\":\");\n      deadClient.clientKill(hostAndPort[0] + \":\" + hostAndPort[1]);\n    }\n  }\n  assertEquals(true,deadClient.isConnected());\n  assertEquals(false,deadClient.getClient().getSocket().isClosed());\n  assertEquals(false,deadClient.getClient().isBroken());\n  shardedJedis.disconnect();\n  assertEquals(false,deadClient.isConnected());\n  assertEquals(true,deadClient.getClient().getSocket().isClosed());\n  assertEquals(true,deadClient.getClient().isBroken());\n  Jedis jedis2=it.next();\n  assertEquals(false,jedis2.isConnected());\n  assertEquals(true,jedis2.getClient().getSocket().isClosed());\n  assertEquals(false,jedis2.getClient().isBroken());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2334,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Test for \"Issue - BinaryShardedJedis.disconnect() may occur memory leak\". You can find more detailed information at https://github.com/xetorthio/jedis/issues/808\n * @throws InterruptedException\n */\n@Test public void testAvoidLeaksUponDisconnect() throws InterruptedException {\n  List<JedisShardInfo> shards=new ArrayList<JedisShardInfo>(2);\n  JedisShardInfo shard1=new JedisShardInfo(redis1.getHost(),redis1.getPort());\n  shard1.setPassword(\"foobared\");\n  shards.add(shard1);\n  JedisShardInfo shard2=new JedisShardInfo(redis2.getHost(),redis2.getPort());\n  shard2.setPassword(\"foobared\");\n  shards.add(shard2);\n  @SuppressWarnings(\"resource\") ShardedJedis shardedJedis=new ShardedJedis(shards);\n  shardedJedis.set(\"a\",\"bar\");\n  JedisShardInfo ak=shardedJedis.getShardInfo(\"a\");\n  assertEquals(shard2,ak);\n  shardedJedis.set(\"b\",\"bar1\");\n  JedisShardInfo bk=shardedJedis.getShardInfo(\"b\");\n  assertEquals(shard1,bk);\n  Iterator<Jedis> it=shardedJedis.getAllShards().iterator();\n  Jedis deadClient=it.next();\n  deadClient.clientSetname(\"DEAD\");\n  for (  String clientInfo : deadClient.clientList().split(\"\\n\")) {\n    if (clientInfo.contains(\"DEAD\")) {\n      String[] hostAndPort=clientInfo.split(\" \")[1].split(\"=\")[1].split(\":\");\n      deadClient.clientKill(hostAndPort[0] + \":\" + hostAndPort[1]);\n    }\n  }\n  assertEquals(true,deadClient.isConnected());\n  assertEquals(false,deadClient.getClient().getSocket().isClosed());\n  assertEquals(false,deadClient.getClient().isBroken());\n  shardedJedis.disconnect();\n  assertEquals(false,deadClient.isConnected());\n  assertEquals(true,deadClient.getClient().getSocket().isClosed());\n  assertEquals(true,deadClient.getClient().isBroken());\n  Jedis jedis2=it.next();\n  assertEquals(false,jedis2.isConnected());\n  assertEquals(true,jedis2.getClient().getSocket().isClosed());\n  assertEquals(false,jedis2.getClient().isBroken());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 33
      },
      "nodeContext" : "@SuppressWarnings(\"resource\")",
      "nodeType" : "SingleMemberAnnotation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.SuppressWarnings"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 41,
    "startColumnNumber" : 5,
    "endLineNumber" : 41,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}