{
  "id" : 153,
  "expression" : "this.responseTemplate",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/common/queue/src/main/java/org/thingsboard/server/queue/common/DefaultTbQueueResponseTemplate.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.responseTemplate",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 80,
      "startColumnNumber" : 8,
      "endLineNumber" : 80,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 36
      },
      "nodeContext" : "this.responseTemplate.init()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.responseTemplate.init();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4327,
        "startLineNumber" : 79,
        "startColumnNumber" : 64,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.responseTemplate.init();\n  requestTemplate.subscribe();\n  loopExecutor.submit(() -> {\n    while (!stopped) {\n      try {\n        while (pendingRequestCount.get() >= maxPendingRequests) {\n          try {\n            Thread.sleep(pollInterval);\n          }\n catch (          InterruptedException e) {\n            log.trace(\"Failed to wait until the server has capacity to handle new requests\",e);\n          }\n        }\n        List<Request> requests=requestTemplate.poll(pollInterval);\n        if (requests.isEmpty()) {\n          continue;\n        }\n        requests.forEach(request -> {\n          long currentTime=System.currentTimeMillis();\n          long requestTime=bytesToLong(request.getHeaders().get(REQUEST_TIME));\n          if (requestTime + requestTimeout >= currentTime) {\n            byte[] requestIdHeader=request.getHeaders().get(REQUEST_ID_HEADER);\n            if (requestIdHeader == null) {\n              log.error(\"[{}] Missing requestId in header\",request);\n              return;\n            }\n            byte[] responseTopicHeader=request.getHeaders().get(RESPONSE_TOPIC_HEADER);\n            if (responseTopicHeader == null) {\n              log.error(\"[{}] Missing response topic in header\",request);\n              return;\n            }\n            UUID requestId=bytesToUuid(requestIdHeader);\n            String responseTopic=bytesToString(responseTopicHeader);\n            try {\n              pendingRequestCount.getAndIncrement();\n              stats.incrementTotal();\n              AsyncCallbackTemplate.withCallbackAndTimeout(handler.handle(request),response -> {\n                pendingRequestCount.decrementAndGet();\n                response.getHeaders().put(REQUEST_ID_HEADER,uuidToBytes(requestId));\n                responseTemplate.send(TopicPartitionInfo.builder().topic(responseTopic).build(),response,null);\n                stats.incrementSuccessful();\n              }\n,e -> {\n                pendingRequestCount.decrementAndGet();\n                if (e.getCause() != null && e.getCause() instanceof TimeoutException) {\n                  log.warn(\"[{}] Timeout to process the request: {}\",requestId,request,e);\n                }\n else {\n                  log.trace(\"[{}] Failed to process the request: {}\",requestId,request,e);\n                }\n                stats.incrementFailed();\n              }\n,requestTimeout,timeoutExecutor,callbackExecutor);\n            }\n catch (            Throwable e) {\n              pendingRequestCount.decrementAndGet();\n              log.warn(\"[{}] Failed to process the request: {}\",requestId,request,e);\n              stats.incrementFailed();\n            }\n          }\n        }\n);\n        requestTemplate.commit();\n      }\n catch (      Throwable e) {\n        log.warn(\"Failed to obtain messages from queue.\",e);\n        try {\n          Thread.sleep(pollInterval);\n        }\n catch (        InterruptedException e2) {\n          log.trace(\"Failed to wait until the server has capacity to handle new requests\",e2);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4401,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void init(TbQueueHandler<Request,Response> handler){\n  this.responseTemplate.init();\n  requestTemplate.subscribe();\n  loopExecutor.submit(() -> {\n    while (!stopped) {\n      try {\n        while (pendingRequestCount.get() >= maxPendingRequests) {\n          try {\n            Thread.sleep(pollInterval);\n          }\n catch (          InterruptedException e) {\n            log.trace(\"Failed to wait until the server has capacity to handle new requests\",e);\n          }\n        }\n        List<Request> requests=requestTemplate.poll(pollInterval);\n        if (requests.isEmpty()) {\n          continue;\n        }\n        requests.forEach(request -> {\n          long currentTime=System.currentTimeMillis();\n          long requestTime=bytesToLong(request.getHeaders().get(REQUEST_TIME));\n          if (requestTime + requestTimeout >= currentTime) {\n            byte[] requestIdHeader=request.getHeaders().get(REQUEST_ID_HEADER);\n            if (requestIdHeader == null) {\n              log.error(\"[{}] Missing requestId in header\",request);\n              return;\n            }\n            byte[] responseTopicHeader=request.getHeaders().get(RESPONSE_TOPIC_HEADER);\n            if (responseTopicHeader == null) {\n              log.error(\"[{}] Missing response topic in header\",request);\n              return;\n            }\n            UUID requestId=bytesToUuid(requestIdHeader);\n            String responseTopic=bytesToString(responseTopicHeader);\n            try {\n              pendingRequestCount.getAndIncrement();\n              stats.incrementTotal();\n              AsyncCallbackTemplate.withCallbackAndTimeout(handler.handle(request),response -> {\n                pendingRequestCount.decrementAndGet();\n                response.getHeaders().put(REQUEST_ID_HEADER,uuidToBytes(requestId));\n                responseTemplate.send(TopicPartitionInfo.builder().topic(responseTopic).build(),response,null);\n                stats.incrementSuccessful();\n              }\n,e -> {\n                pendingRequestCount.decrementAndGet();\n                if (e.getCause() != null && e.getCause() instanceof TimeoutException) {\n                  log.warn(\"[{}] Timeout to process the request: {}\",requestId,request,e);\n                }\n else {\n                  log.trace(\"[{}] Failed to process the request: {}\",requestId,request,e);\n                }\n                stats.incrementFailed();\n              }\n,requestTimeout,timeoutExecutor,callbackExecutor);\n            }\n catch (            Throwable e) {\n              pendingRequestCount.decrementAndGet();\n              log.warn(\"[{}] Failed to process the request: {}\",requestId,request,e);\n              stats.incrementFailed();\n            }\n          }\n        }\n);\n        requestTemplate.commit();\n      }\n catch (      Throwable e) {\n        log.warn(\"Failed to obtain messages from queue.\",e);\n        try {\n          Thread.sleep(pollInterval);\n        }\n catch (        InterruptedException e2) {\n          log.trace(\"Failed to wait until the server has capacity to handle new requests\",e2);\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.responseTemplate.init();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.thingsboard.server.queue.TbQueueProducer<Response>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 80,
    "startColumnNumber" : 8,
    "endLineNumber" : 80,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}