{
  "id" : 229,
  "expression" : "MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 1419,
      "startColumnNumber" : 34,
      "endLineNumber" : 1419,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 13,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 1419,
        "startColumnNumber" : 12,
        "endLineNumber" : 1419,
        "endColumnNumber" : 99
      },
      "nodeContext" : "nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1419,
        "startColumnNumber" : 12,
        "endLineNumber" : 1419,
        "endColumnNumber" : 100
      },
      "nodeContext" : "nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 1409,
        "startColumnNumber" : 40,
        "endLineNumber" : 1422,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  nalBuffer.reset(sampleCurrentNalBytesRemaining);\n  input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n  output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n  writtenBytes=sampleCurrentNalBytesRemaining;\n  int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n  nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n  nalBuffer.setLimit(unescapedLength);\n  CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1039,
        "startLineNumber" : 1409,
        "startColumnNumber" : 10,
        "endLineNumber" : 1425,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (processSeiNalUnitPayload) {\n  nalBuffer.reset(sampleCurrentNalBytesRemaining);\n  input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n  output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n  writtenBytes=sampleCurrentNalBytesRemaining;\n  int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n  nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n  nalBuffer.setLimit(unescapedLength);\n  CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n}\n else {\n  writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1193,
        "startLineNumber" : 1407,
        "startColumnNumber" : 15,
        "endLineNumber" : 1428,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int writtenBytes;\n  if (processSeiNalUnitPayload) {\n    nalBuffer.reset(sampleCurrentNalBytesRemaining);\n    input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n    output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n    writtenBytes=sampleCurrentNalBytesRemaining;\n    int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n    nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n    nalBuffer.setLimit(unescapedLength);\n    CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n  }\n else {\n    writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n  }\n  sampleBytesWritten+=writtenBytes;\n  sampleCurrentNalBytesRemaining-=writtenBytes;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2239,
        "startLineNumber" : 1387,
        "startColumnNumber" : 8,
        "endLineNumber" : 1428,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sampleCurrentNalBytesRemaining == 0) {\n  input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n  nalPrefix.setPosition(0);\n  int nalLengthInt=nalPrefix.readInt();\n  if (nalLengthInt < 1) {\n    throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n  }\n  sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n  nalStartCode.setPosition(0);\n  output.sampleData(nalStartCode,4);\n  output.sampleData(nalPrefix,1);\n  processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n  sampleBytesWritten+=5;\n  sampleSize+=nalUnitLengthFieldLengthDiff;\n}\n else {\n  int writtenBytes;\n  if (processSeiNalUnitPayload) {\n    nalBuffer.reset(sampleCurrentNalBytesRemaining);\n    input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n    output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n    writtenBytes=sampleCurrentNalBytesRemaining;\n    int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n    nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n    nalBuffer.setLimit(unescapedLength);\n    CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n  }\n else {\n    writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n  }\n  sampleBytesWritten+=writtenBytes;\n  sampleCurrentNalBytesRemaining-=writtenBytes;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 178,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2257,
        "startLineNumber" : 1386,
        "startColumnNumber" : 46,
        "endLineNumber" : 1429,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (sampleCurrentNalBytesRemaining == 0) {\n    input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n    nalPrefix.setPosition(0);\n    int nalLengthInt=nalPrefix.readInt();\n    if (nalLengthInt < 1) {\n      throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n    }\n    sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n    nalStartCode.setPosition(0);\n    output.sampleData(nalStartCode,4);\n    output.sampleData(nalPrefix,1);\n    processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n    sampleBytesWritten+=5;\n    sampleSize+=nalUnitLengthFieldLengthDiff;\n  }\n else {\n    int writtenBytes;\n    if (processSeiNalUnitPayload) {\n      nalBuffer.reset(sampleCurrentNalBytesRemaining);\n      input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n      output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n      writtenBytes=sampleCurrentNalBytesRemaining;\n      int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n      nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n      nalBuffer.setLimit(unescapedLength);\n      CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n    }\n else {\n      writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n    }\n    sampleBytesWritten+=writtenBytes;\n    sampleCurrentNalBytesRemaining-=writtenBytes;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2297,
        "startLineNumber" : 1386,
        "startColumnNumber" : 6,
        "endLineNumber" : 1429,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (sampleBytesWritten < sampleSize) {\n  if (sampleCurrentNalBytesRemaining == 0) {\n    input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n    nalPrefix.setPosition(0);\n    int nalLengthInt=nalPrefix.readInt();\n    if (nalLengthInt < 1) {\n      throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n    }\n    sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n    nalStartCode.setPosition(0);\n    output.sampleData(nalStartCode,4);\n    output.sampleData(nalPrefix,1);\n    processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n    sampleBytesWritten+=5;\n    sampleSize+=nalUnitLengthFieldLengthDiff;\n  }\n else {\n    int writtenBytes;\n    if (processSeiNalUnitPayload) {\n      nalBuffer.reset(sampleCurrentNalBytesRemaining);\n      input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n      output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n      writtenBytes=sampleCurrentNalBytesRemaining;\n      int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n      nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n      nalBuffer.setLimit(unescapedLength);\n      CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n    }\n else {\n      writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n    }\n    sampleBytesWritten+=writtenBytes;\n    sampleCurrentNalBytesRemaining-=writtenBytes;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 183,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2965,
        "startLineNumber" : 1374,
        "startColumnNumber" : 45,
        "endLineNumber" : 1430,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte[] nalPrefixData=nalPrefix.getData();\n  nalPrefixData[0]=0;\n  nalPrefixData[1]=0;\n  nalPrefixData[2]=0;\n  int nalUnitPrefixLength=track.nalUnitLengthFieldLength + 1;\n  int nalUnitLengthFieldLengthDiff=4 - track.nalUnitLengthFieldLength;\n  while (sampleBytesWritten < sampleSize) {\n    if (sampleCurrentNalBytesRemaining == 0) {\n      input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n      nalPrefix.setPosition(0);\n      int nalLengthInt=nalPrefix.readInt();\n      if (nalLengthInt < 1) {\n        throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n      }\n      sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n      nalStartCode.setPosition(0);\n      output.sampleData(nalStartCode,4);\n      output.sampleData(nalPrefix,1);\n      processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n      sampleBytesWritten+=5;\n      sampleSize+=nalUnitLengthFieldLengthDiff;\n    }\n else {\n      int writtenBytes;\n      if (processSeiNalUnitPayload) {\n        nalBuffer.reset(sampleCurrentNalBytesRemaining);\n        input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n        output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n        writtenBytes=sampleCurrentNalBytesRemaining;\n        int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n        nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n        nalBuffer.setLimit(unescapedLength);\n        CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n      }\n else {\n        writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n      }\n      sampleBytesWritten+=writtenBytes;\n      sampleCurrentNalBytesRemaining-=writtenBytes;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3212,
        "startLineNumber" : 1374,
        "startColumnNumber" : 4,
        "endLineNumber" : 1435,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (track.nalUnitLengthFieldLength != 0) {\n  byte[] nalPrefixData=nalPrefix.getData();\n  nalPrefixData[0]=0;\n  nalPrefixData[1]=0;\n  nalPrefixData[2]=0;\n  int nalUnitPrefixLength=track.nalUnitLengthFieldLength + 1;\n  int nalUnitLengthFieldLengthDiff=4 - track.nalUnitLengthFieldLength;\n  while (sampleBytesWritten < sampleSize) {\n    if (sampleCurrentNalBytesRemaining == 0) {\n      input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n      nalPrefix.setPosition(0);\n      int nalLengthInt=nalPrefix.readInt();\n      if (nalLengthInt < 1) {\n        throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n      }\n      sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n      nalStartCode.setPosition(0);\n      output.sampleData(nalStartCode,4);\n      output.sampleData(nalPrefix,1);\n      processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n      sampleBytesWritten+=5;\n      sampleSize+=nalUnitLengthFieldLengthDiff;\n    }\n else {\n      int writtenBytes;\n      if (processSeiNalUnitPayload) {\n        nalBuffer.reset(sampleCurrentNalBytesRemaining);\n        input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n        output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n        writtenBytes=sampleCurrentNalBytesRemaining;\n        int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n        nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n        nalBuffer.setLimit(unescapedLength);\n        CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n      }\n else {\n        writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n      }\n      sampleBytesWritten+=writtenBytes;\n      sampleCurrentNalBytesRemaining-=writtenBytes;\n    }\n  }\n}\n else {\n  while (sampleBytesWritten < sampleSize) {\n    int writtenBytes=output.sampleData(input,sampleSize - sampleBytesWritten,false);\n    sampleBytesWritten+=writtenBytes;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6776,
        "startLineNumber" : 1305,
        "startColumnNumber" : 70,
        "endLineNumber" : 1455,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  @Nullable TrackBundle trackBundle=currentTrackBundle;\n  if (trackBundle == null) {\n    trackBundle=getNextTrackBundle(trackBundles);\n    if (trackBundle == null) {\n      int bytesToSkip=(int)(endOfMdatPosition - input.getPosition());\n      if (bytesToSkip < 0) {\n        throw ParserException.createForMalformedContainer(\"Offset to end of mdat was negative.\",null);\n      }\n      input.skipFully(bytesToSkip);\n      enterReadingAtomHeaderState();\n      return false;\n    }\n    long nextDataPosition=trackBundle.getCurrentSampleOffset();\n    int bytesToSkip=(int)(nextDataPosition - input.getPosition());\n    if (bytesToSkip < 0) {\n      Log.w(TAG,\"Ignoring negative offset to sample data.\");\n      bytesToSkip=0;\n    }\n    input.skipFully(bytesToSkip);\n    currentTrackBundle=trackBundle;\n  }\n  if (parserState == STATE_READING_SAMPLE_START) {\n    sampleSize=trackBundle.getCurrentSampleSize();\n    if (trackBundle.currentSampleIndex < trackBundle.firstSampleToOutputIndex) {\n      input.skipFully(sampleSize);\n      trackBundle.skipSampleEncryptionData();\n      if (!trackBundle.next()) {\n        currentTrackBundle=null;\n      }\n      parserState=STATE_READING_SAMPLE_START;\n      return true;\n    }\n    if (trackBundle.moovSampleTable.track.sampleTransformation == Track.TRANSFORMATION_CEA608_CDAT) {\n      sampleSize-=Atom.HEADER_SIZE;\n      input.skipFully(Atom.HEADER_SIZE);\n    }\n    if (MimeTypes.AUDIO_AC4.equals(trackBundle.moovSampleTable.track.format.sampleMimeType)) {\n      sampleBytesWritten=trackBundle.outputSampleEncryptionData(sampleSize,Ac4Util.SAMPLE_HEADER_SIZE);\n      Ac4Util.getAc4SampleHeader(sampleSize,scratch);\n      trackBundle.output.sampleData(scratch,Ac4Util.SAMPLE_HEADER_SIZE);\n      sampleBytesWritten+=Ac4Util.SAMPLE_HEADER_SIZE;\n    }\n else {\n      sampleBytesWritten=trackBundle.outputSampleEncryptionData(sampleSize,0);\n    }\n    sampleSize+=sampleBytesWritten;\n    parserState=STATE_READING_SAMPLE_CONTINUE;\n    sampleCurrentNalBytesRemaining=0;\n  }\n  Track track=trackBundle.moovSampleTable.track;\n  TrackOutput output=trackBundle.output;\n  long sampleTimeUs=trackBundle.getCurrentSamplePresentationTimeUs();\n  if (timestampAdjuster != null) {\n    sampleTimeUs=timestampAdjuster.adjustSampleTimestamp(sampleTimeUs);\n  }\n  if (track.nalUnitLengthFieldLength != 0) {\n    byte[] nalPrefixData=nalPrefix.getData();\n    nalPrefixData[0]=0;\n    nalPrefixData[1]=0;\n    nalPrefixData[2]=0;\n    int nalUnitPrefixLength=track.nalUnitLengthFieldLength + 1;\n    int nalUnitLengthFieldLengthDiff=4 - track.nalUnitLengthFieldLength;\n    while (sampleBytesWritten < sampleSize) {\n      if (sampleCurrentNalBytesRemaining == 0) {\n        input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n        nalPrefix.setPosition(0);\n        int nalLengthInt=nalPrefix.readInt();\n        if (nalLengthInt < 1) {\n          throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n        }\n        sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n        nalStartCode.setPosition(0);\n        output.sampleData(nalStartCode,4);\n        output.sampleData(nalPrefix,1);\n        processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n        sampleBytesWritten+=5;\n        sampleSize+=nalUnitLengthFieldLengthDiff;\n      }\n else {\n        int writtenBytes;\n        if (processSeiNalUnitPayload) {\n          nalBuffer.reset(sampleCurrentNalBytesRemaining);\n          input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n          output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n          writtenBytes=sampleCurrentNalBytesRemaining;\n          int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n          nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n          nalBuffer.setLimit(unescapedLength);\n          CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n        }\n else {\n          writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n        }\n        sampleBytesWritten+=writtenBytes;\n        sampleCurrentNalBytesRemaining-=writtenBytes;\n      }\n    }\n  }\n else {\n    while (sampleBytesWritten < sampleSize) {\n      int writtenBytes=output.sampleData(input,sampleSize - sampleBytesWritten,false);\n      sampleBytesWritten+=writtenBytes;\n    }\n  }\n  @C.BufferFlags int sampleFlags=trackBundle.getCurrentSampleFlags();\n  @Nullable TrackOutput.CryptoData cryptoData=null;\n  @Nullable TrackEncryptionBox encryptionBox=trackBundle.getEncryptionBoxIfEncrypted();\n  if (encryptionBox != null) {\n    cryptoData=encryptionBox.cryptoData;\n  }\n  output.sampleMetadata(sampleTimeUs,sampleFlags,sampleSize,0,cryptoData);\n  outputPendingMetadataSamples(sampleTimeUs);\n  if (!trackBundle.next()) {\n    currentTrackBundle=null;\n  }\n  parserState=STATE_READING_SAMPLE_START;\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 606,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7652,
        "startLineNumber" : 1290,
        "startColumnNumber" : 2,
        "endLineNumber" : 1455,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Attempts to read the next sample in the current mdat atom. The read sample may be output or skipped. <p>If there are no more samples in the current mdat atom then the parser state is transitioned to  {@link #STATE_READING_ATOM_HEADER} and {@code false} is returned.<p>It is possible for a sample to be partially read in the case that an exception is thrown. In this case the method can be called again to read the remainder of the sample.\n * @param input The {@link ExtractorInput} from which to read data.\n * @return Whether a sample was read. The read sample may have been output or skipped. Falseindicates that there are no samples left to read in the current mdat.\n * @throws IOException If an error occurs reading from the input.\n */\nprivate boolean readSample(ExtractorInput input) throws IOException {\n  @Nullable TrackBundle trackBundle=currentTrackBundle;\n  if (trackBundle == null) {\n    trackBundle=getNextTrackBundle(trackBundles);\n    if (trackBundle == null) {\n      int bytesToSkip=(int)(endOfMdatPosition - input.getPosition());\n      if (bytesToSkip < 0) {\n        throw ParserException.createForMalformedContainer(\"Offset to end of mdat was negative.\",null);\n      }\n      input.skipFully(bytesToSkip);\n      enterReadingAtomHeaderState();\n      return false;\n    }\n    long nextDataPosition=trackBundle.getCurrentSampleOffset();\n    int bytesToSkip=(int)(nextDataPosition - input.getPosition());\n    if (bytesToSkip < 0) {\n      Log.w(TAG,\"Ignoring negative offset to sample data.\");\n      bytesToSkip=0;\n    }\n    input.skipFully(bytesToSkip);\n    currentTrackBundle=trackBundle;\n  }\n  if (parserState == STATE_READING_SAMPLE_START) {\n    sampleSize=trackBundle.getCurrentSampleSize();\n    if (trackBundle.currentSampleIndex < trackBundle.firstSampleToOutputIndex) {\n      input.skipFully(sampleSize);\n      trackBundle.skipSampleEncryptionData();\n      if (!trackBundle.next()) {\n        currentTrackBundle=null;\n      }\n      parserState=STATE_READING_SAMPLE_START;\n      return true;\n    }\n    if (trackBundle.moovSampleTable.track.sampleTransformation == Track.TRANSFORMATION_CEA608_CDAT) {\n      sampleSize-=Atom.HEADER_SIZE;\n      input.skipFully(Atom.HEADER_SIZE);\n    }\n    if (MimeTypes.AUDIO_AC4.equals(trackBundle.moovSampleTable.track.format.sampleMimeType)) {\n      sampleBytesWritten=trackBundle.outputSampleEncryptionData(sampleSize,Ac4Util.SAMPLE_HEADER_SIZE);\n      Ac4Util.getAc4SampleHeader(sampleSize,scratch);\n      trackBundle.output.sampleData(scratch,Ac4Util.SAMPLE_HEADER_SIZE);\n      sampleBytesWritten+=Ac4Util.SAMPLE_HEADER_SIZE;\n    }\n else {\n      sampleBytesWritten=trackBundle.outputSampleEncryptionData(sampleSize,0);\n    }\n    sampleSize+=sampleBytesWritten;\n    parserState=STATE_READING_SAMPLE_CONTINUE;\n    sampleCurrentNalBytesRemaining=0;\n  }\n  Track track=trackBundle.moovSampleTable.track;\n  TrackOutput output=trackBundle.output;\n  long sampleTimeUs=trackBundle.getCurrentSamplePresentationTimeUs();\n  if (timestampAdjuster != null) {\n    sampleTimeUs=timestampAdjuster.adjustSampleTimestamp(sampleTimeUs);\n  }\n  if (track.nalUnitLengthFieldLength != 0) {\n    byte[] nalPrefixData=nalPrefix.getData();\n    nalPrefixData[0]=0;\n    nalPrefixData[1]=0;\n    nalPrefixData[2]=0;\n    int nalUnitPrefixLength=track.nalUnitLengthFieldLength + 1;\n    int nalUnitLengthFieldLengthDiff=4 - track.nalUnitLengthFieldLength;\n    while (sampleBytesWritten < sampleSize) {\n      if (sampleCurrentNalBytesRemaining == 0) {\n        input.readFully(nalPrefixData,nalUnitLengthFieldLengthDiff,nalUnitPrefixLength);\n        nalPrefix.setPosition(0);\n        int nalLengthInt=nalPrefix.readInt();\n        if (nalLengthInt < 1) {\n          throw ParserException.createForMalformedContainer(\"Invalid NAL length\",null);\n        }\n        sampleCurrentNalBytesRemaining=nalLengthInt - 1;\n        nalStartCode.setPosition(0);\n        output.sampleData(nalStartCode,4);\n        output.sampleData(nalPrefix,1);\n        processSeiNalUnitPayload=ceaTrackOutputs.length > 0 && NalUnitUtil.isNalUnitSei(track.format.sampleMimeType,nalPrefixData[4]);\n        sampleBytesWritten+=5;\n        sampleSize+=nalUnitLengthFieldLengthDiff;\n      }\n else {\n        int writtenBytes;\n        if (processSeiNalUnitPayload) {\n          nalBuffer.reset(sampleCurrentNalBytesRemaining);\n          input.readFully(nalBuffer.getData(),0,sampleCurrentNalBytesRemaining);\n          output.sampleData(nalBuffer,sampleCurrentNalBytesRemaining);\n          writtenBytes=sampleCurrentNalBytesRemaining;\n          int unescapedLength=NalUnitUtil.unescapeStream(nalBuffer.getData(),nalBuffer.limit());\n          nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n          nalBuffer.setLimit(unescapedLength);\n          CeaUtil.consume(sampleTimeUs,nalBuffer,ceaTrackOutputs);\n        }\n else {\n          writtenBytes=output.sampleData(input,sampleCurrentNalBytesRemaining,false);\n        }\n        sampleBytesWritten+=writtenBytes;\n        sampleCurrentNalBytesRemaining-=writtenBytes;\n      }\n    }\n  }\n else {\n    while (sampleBytesWritten < sampleSize) {\n      int writtenBytes=output.sampleData(input,sampleSize - sampleBytesWritten,false);\n      sampleBytesWritten+=writtenBytes;\n    }\n  }\n  @C.BufferFlags int sampleFlags=trackBundle.getCurrentSampleFlags();\n  @Nullable TrackOutput.CryptoData cryptoData=null;\n  @Nullable TrackEncryptionBox encryptionBox=trackBundle.getEncryptionBoxIfEncrypted();\n  if (encryptionBox != null) {\n    cryptoData=encryptionBox.cryptoData;\n  }\n  output.sampleMetadata(sampleTimeUs,sampleFlags,sampleSize,0,cryptoData);\n  outputPendingMetadataSamples(sampleTimeUs);\n  if (!trackBundle.next()) {\n    currentTrackBundle=null;\n  }\n  parserState=STATE_READING_SAMPLE_START;\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 617,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1419,
        "startColumnNumber" : 12,
        "endLineNumber" : 1419,
        "endColumnNumber" : 100
      },
      "nodeContext" : "nalBuffer.setPosition(MimeTypes.VIDEO_H265.equals(track.format.sampleMimeType) ? 1 : 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 9,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 1419,
    "startColumnNumber" : 34,
    "endLineNumber" : 1419,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ ]
}