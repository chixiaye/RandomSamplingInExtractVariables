{
  "id" : 127,
  "expression" : "ServiceManager.class.getName()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServiceManager.class.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 411,
      "startColumnNumber" : 37,
      "endLineNumber" : 411,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 411,
        "startColumnNumber" : 20,
        "endLineNumber" : 411,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Logger.getLogger(ServiceManager.class.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 411,
        "startColumnNumber" : 11,
        "endLineNumber" : 411,
        "endColumnNumber" : 68
      },
      "nodeContext" : "logger=Logger.getLogger(ServiceManager.class.getName())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 411,
        "startColumnNumber" : 4,
        "endLineNumber" : 411,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Logger logger=Logger.getLogger(ServiceManager.class.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1424,
        "startLineNumber" : 410,
        "startColumnNumber" : 40,
        "endLineNumber" : 442,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logger logger=Logger.getLogger(ServiceManager.class.getName());\n  logger.setLevel(Level.FINEST);\n  TestLogHandler logHandler=new TestLogHandler();\n  logger.addHandler(logHandler);\n  ServiceManager manager=new ServiceManager(Arrays.<Service>asList());\n  RecordingListener listener=new RecordingListener();\n  manager.addListener(listener,directExecutor());\n  manager.startAsync().awaitHealthy();\n  assertTrue(manager.isHealthy());\n  assertTrue(listener.healthyCalled);\n  assertFalse(listener.stoppedCalled);\n  assertTrue(listener.failedServices.isEmpty());\n  manager.stopAsync().awaitStopped();\n  assertFalse(manager.isHealthy());\n  assertTrue(listener.stoppedCalled);\n  assertTrue(listener.failedServices.isEmpty());\n  assertEquals(\"ServiceManager{services=[]}\",manager.toString());\n  assertTrue(manager.servicesByState().isEmpty());\n  assertTrue(manager.startupTimes().isEmpty());\n  Formatter logFormatter=new Formatter(){\n    @Override public String format(    LogRecord record){\n      return formatMessage(record);\n    }\n  }\n;\n  for (  LogRecord record : logHandler.getStoredLogRecords()) {\n    assertThat(logFormatter.format(record)).doesNotContain(\"NoOpService\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1780,
        "startLineNumber" : 405,
        "startColumnNumber" : 2,
        "endLineNumber" : 442,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This is for covering a case where the ServiceManager would behave strangely if constructed with no service under management. Listeners would never fire because the ServiceManager was healthy and stopped at the same time. This test ensures that listeners fire and isHealthy makes sense.\n */\npublic void testEmptyServiceManager(){\n  Logger logger=Logger.getLogger(ServiceManager.class.getName());\n  logger.setLevel(Level.FINEST);\n  TestLogHandler logHandler=new TestLogHandler();\n  logger.addHandler(logHandler);\n  ServiceManager manager=new ServiceManager(Arrays.<Service>asList());\n  RecordingListener listener=new RecordingListener();\n  manager.addListener(listener,directExecutor());\n  manager.startAsync().awaitHealthy();\n  assertTrue(manager.isHealthy());\n  assertTrue(listener.healthyCalled);\n  assertFalse(listener.stoppedCalled);\n  assertTrue(listener.failedServices.isEmpty());\n  manager.stopAsync().awaitStopped();\n  assertFalse(manager.isHealthy());\n  assertTrue(listener.stoppedCalled);\n  assertTrue(listener.failedServices.isEmpty());\n  assertEquals(\"ServiceManager{services=[]}\",manager.toString());\n  assertTrue(manager.servicesByState().isEmpty());\n  assertTrue(manager.startupTimes().isEmpty());\n  Formatter logFormatter=new Formatter(){\n    @Override public String format(    LogRecord record){\n      return formatMessage(record);\n    }\n  }\n;\n  for (  LogRecord record : logHandler.getStoredLogRecords()) {\n    assertThat(logFormatter.format(record)).doesNotContain(\"NoOpService\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 411,
        "startColumnNumber" : 4,
        "endLineNumber" : 411,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Logger logger=Logger.getLogger(ServiceManager.class.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 411,
    "startColumnNumber" : 37,
    "endLineNumber" : 411,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}