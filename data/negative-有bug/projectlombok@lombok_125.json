{
  "id" : 125,
  "expression" : "baseName",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/TransformationsUtil.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 182,
      "startColumnNumber" : 14,
      "endLineNumber" : 182,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 23
      },
      "nodeContext" : "names.add(baseName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 24
      },
      "nodeContext" : "names.add(baseName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 181,
        "startColumnNumber" : 21,
        "endLineNumber" : 183,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  names.add(baseName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (acc.fluent()) {\n  names.add(baseName);\n}\n else {\n  names.add(buildName(\"is\",baseName));\n  names.add(buildName(\"get\",baseName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String baseName : baseNames) {\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 170,
        "startColumnNumber" : 127,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 160,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns all names of methods that would represent the getter for a field with the provided name. For example if  {@code isBoolean} is true, then a field named {@code isRunning} would produce:<br />{@code [isRunning, getRunning, isIsRunning, getIsRunning]}\n * @param accessors Accessors configuration.\n * @param fieldName the name of the field.\n * @param isBoolean if the field is of type 'boolean'. For fields of type 'java.lang.Boolean', you should provide {@code false}.\n */\npublic static List<String> toAllGetterNames(AnnotationValues<Accessors> accessors,CharSequence fieldName,boolean isBoolean){\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 24
      },
      "nodeContext" : "names.add(baseName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 184,
      "startColumnNumber" : 30,
      "endLineNumber" : 184,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 184,
        "startColumnNumber" : 14,
        "endLineNumber" : 184,
        "endColumnNumber" : 39
      },
      "nodeContext" : "buildName(\"is\",baseName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 40
      },
      "nodeContext" : "names.add(buildName(\"is\",baseName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 41
      },
      "nodeContext" : "names.add(buildName(\"is\",baseName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 183,
        "startColumnNumber" : 10,
        "endLineNumber" : 186,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  names.add(buildName(\"is\",baseName));\n  names.add(buildName(\"get\",baseName));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (acc.fluent()) {\n  names.add(baseName);\n}\n else {\n  names.add(buildName(\"is\",baseName));\n  names.add(buildName(\"get\",baseName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String baseName : baseNames) {\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 170,
        "startColumnNumber" : 127,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 160,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns all names of methods that would represent the getter for a field with the provided name. For example if  {@code isBoolean} is true, then a field named {@code isRunning} would produce:<br />{@code [isRunning, getRunning, isIsRunning, getIsRunning]}\n * @param accessors Accessors configuration.\n * @param fieldName the name of the field.\n * @param isBoolean if the field is of type 'boolean'. For fields of type 'java.lang.Boolean', you should provide {@code false}.\n */\npublic static List<String> toAllGetterNames(AnnotationValues<Accessors> accessors,CharSequence fieldName,boolean isBoolean){\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 41
      },
      "nodeContext" : "names.add(buildName(\"is\",baseName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 185,
      "startColumnNumber" : 31,
      "endLineNumber" : 185,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 185,
        "startColumnNumber" : 14,
        "endLineNumber" : 185,
        "endColumnNumber" : 40
      },
      "nodeContext" : "buildName(\"get\",baseName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 41
      },
      "nodeContext" : "names.add(buildName(\"get\",baseName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 42
      },
      "nodeContext" : "names.add(buildName(\"get\",baseName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 183,
        "startColumnNumber" : 10,
        "endLineNumber" : 186,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  names.add(buildName(\"is\",baseName));\n  names.add(buildName(\"get\",baseName));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 181,
        "startColumnNumber" : 3,
        "endLineNumber" : 186,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (acc.fluent()) {\n  names.add(baseName);\n}\n else {\n  names.add(buildName(\"is\",baseName));\n  names.add(buildName(\"get\",baseName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String baseName : baseNames) {\n  if (acc.fluent()) {\n    names.add(baseName);\n  }\n else {\n    names.add(buildName(\"is\",baseName));\n    names.add(buildName(\"get\",baseName));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 616,
        "startLineNumber" : 170,
        "startColumnNumber" : 127,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 160,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns all names of methods that would represent the getter for a field with the provided name. For example if  {@code isBoolean} is true, then a field named {@code isRunning} would produce:<br />{@code [isRunning, getRunning, isIsRunning, getIsRunning]}\n * @param accessors Accessors configuration.\n * @param fieldName the name of the field.\n * @param isBoolean if the field is of type 'boolean'. For fields of type 'java.lang.Boolean', you should provide {@code false}.\n */\npublic static List<String> toAllGetterNames(AnnotationValues<Accessors> accessors,CharSequence fieldName,boolean isBoolean){\n  if (!isBoolean)   return Collections.singletonList(toGetterName(accessors,fieldName,false));\n  Accessors acc=accessors.getInstance();\n  fieldName=removePrefix(fieldName,acc.prefix());\n  if (fieldName == null)   return Collections.emptyList();\n  List<String> baseNames=toBaseNames(fieldName,isBoolean,acc.fluent());\n  Set<String> names=new HashSet<String>();\n  for (  String baseName : baseNames) {\n    if (acc.fluent()) {\n      names.add(baseName);\n    }\n else {\n      names.add(buildName(\"is\",baseName));\n      names.add(buildName(\"get\",baseName));\n    }\n  }\n  return new ArrayList<String>(names);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 185,
        "endColumnNumber" : 42
      },
      "nodeContext" : "names.add(buildName(\"get\",baseName));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 182,
    "startColumnNumber" : 14,
    "endLineNumber" : 182,
    "endColumnNumber" : 22
  }, {
    "charLength" : 8,
    "startLineNumber" : 184,
    "startColumnNumber" : 30,
    "endLineNumber" : 184,
    "endColumnNumber" : 38
  }, {
    "charLength" : 8,
    "startLineNumber" : 185,
    "startColumnNumber" : 31,
    "endLineNumber" : 185,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}