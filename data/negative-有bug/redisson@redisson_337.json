{
  "id" : 337,
  "expression" : "seconds",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/executor/CronExpression.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "seconds",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 305,
      "startColumnNumber" : 16,
      "endLineNumber" : 305,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 305,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 31
      },
      "nodeContext" : "seconds == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 305,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (seconds == null) {\n  seconds=new TreeSet<Integer>();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3105,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 378,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (seconds == null) {\n    seconds=new TreeSet<Integer>();\n  }\n  if (minutes == null) {\n    minutes=new TreeSet<Integer>();\n  }\n  if (hours == null) {\n    hours=new TreeSet<Integer>();\n  }\n  if (daysOfMonth == null) {\n    daysOfMonth=new TreeSet<Integer>();\n  }\n  if (months == null) {\n    months=new TreeSet<Integer>();\n  }\n  if (daysOfWeek == null) {\n    daysOfWeek=new TreeSet<Integer>();\n  }\n  if (years == null) {\n    years=new TreeSet<Integer>();\n  }\n  int exprOn=SECOND;\n  StringTokenizer exprsTok=new StringTokenizer(expression,\" \\t\",false);\n  while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {\n    String expr=exprsTok.nextToken().trim();\n    if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n      throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\",-1);\n    }\n    if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n      throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\",-1);\n    }\n    if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {\n      throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\",-1);\n    }\n    StringTokenizer vTok=new StringTokenizer(expr,\",\");\n    while (vTok.hasMoreTokens()) {\n      String v=vTok.nextToken();\n      storeExpressionVals(0,v,exprOn);\n    }\n    exprOn++;\n  }\n  if (exprOn <= DAY_OF_WEEK) {\n    throw new ParseException(\"Unexpected end of expression.\",expression.length());\n  }\n  if (exprOn <= YEAR) {\n    storeExpressionVals(0,\"*\",YEAR);\n  }\n  TreeSet<Integer> dow=getSet(DAY_OF_WEEK);\n  TreeSet<Integer> dom=getSet(DAY_OF_MONTH);\n  boolean dayOfMSpec=!dom.contains(NO_SPEC);\n  boolean dayOfWSpec=!dow.contains(NO_SPEC);\n  if (!dayOfMSpec || dayOfWSpec) {\n    if (!dayOfWSpec || dayOfMSpec) {\n      throw new ParseException(\"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\",0);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3319,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 383,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (seconds == null) {\n    seconds=new TreeSet<Integer>();\n  }\n  if (minutes == null) {\n    minutes=new TreeSet<Integer>();\n  }\n  if (hours == null) {\n    hours=new TreeSet<Integer>();\n  }\n  if (daysOfMonth == null) {\n    daysOfMonth=new TreeSet<Integer>();\n  }\n  if (months == null) {\n    months=new TreeSet<Integer>();\n  }\n  if (daysOfWeek == null) {\n    daysOfWeek=new TreeSet<Integer>();\n  }\n  if (years == null) {\n    years=new TreeSet<Integer>();\n  }\n  int exprOn=SECOND;\n  StringTokenizer exprsTok=new StringTokenizer(expression,\" \\t\",false);\n  while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {\n    String expr=exprsTok.nextToken().trim();\n    if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n      throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\",-1);\n    }\n    if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n      throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\",-1);\n    }\n    if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {\n      throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\",-1);\n    }\n    StringTokenizer vTok=new StringTokenizer(expr,\",\");\n    while (vTok.hasMoreTokens()) {\n      String v=vTok.nextToken();\n      storeExpressionVals(0,v,exprOn);\n    }\n    exprOn++;\n  }\n  if (exprOn <= DAY_OF_WEEK) {\n    throw new ParseException(\"Unexpected end of expression.\",expression.length());\n  }\n  if (exprOn <= YEAR) {\n    storeExpressionVals(0,\"*\",YEAR);\n  }\n  TreeSet<Integer> dow=getSet(DAY_OF_WEEK);\n  TreeSet<Integer> dom=getSet(DAY_OF_MONTH);\n  boolean dayOfMSpec=!dom.contains(NO_SPEC);\n  boolean dayOfWSpec=!dow.contains(NO_SPEC);\n  if (!dayOfMSpec || dayOfWSpec) {\n    if (!dayOfWSpec || dayOfMSpec) {\n      throw new ParseException(\"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\",0);\n    }\n  }\n}\n catch (ParseException pe) {\n  throw pe;\n}\ncatch (Exception e) {\n  throw new ParseException(\"Illegal cron expression format (\" + e.toString() + \")\",0);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 370,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3369,
        "startLineNumber" : 300,
        "startColumnNumber" : 76,
        "endLineNumber" : 384,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  expressionParsed=true;\n  try {\n    if (seconds == null) {\n      seconds=new TreeSet<Integer>();\n    }\n    if (minutes == null) {\n      minutes=new TreeSet<Integer>();\n    }\n    if (hours == null) {\n      hours=new TreeSet<Integer>();\n    }\n    if (daysOfMonth == null) {\n      daysOfMonth=new TreeSet<Integer>();\n    }\n    if (months == null) {\n      months=new TreeSet<Integer>();\n    }\n    if (daysOfWeek == null) {\n      daysOfWeek=new TreeSet<Integer>();\n    }\n    if (years == null) {\n      years=new TreeSet<Integer>();\n    }\n    int exprOn=SECOND;\n    StringTokenizer exprsTok=new StringTokenizer(expression,\" \\t\",false);\n    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {\n      String expr=exprsTok.nextToken().trim();\n      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n        throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\",-1);\n      }\n      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n        throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\",-1);\n      }\n      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {\n        throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\",-1);\n      }\n      StringTokenizer vTok=new StringTokenizer(expr,\",\");\n      while (vTok.hasMoreTokens()) {\n        String v=vTok.nextToken();\n        storeExpressionVals(0,v,exprOn);\n      }\n      exprOn++;\n    }\n    if (exprOn <= DAY_OF_WEEK) {\n      throw new ParseException(\"Unexpected end of expression.\",expression.length());\n    }\n    if (exprOn <= YEAR) {\n      storeExpressionVals(0,\"*\",YEAR);\n    }\n    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);\n    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);\n    boolean dayOfMSpec=!dom.contains(NO_SPEC);\n    boolean dayOfWSpec=!dow.contains(NO_SPEC);\n    if (!dayOfMSpec || dayOfWSpec) {\n      if (!dayOfWSpec || dayOfMSpec) {\n        throw new ParseException(\"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\",0);\n      }\n    }\n  }\n catch (  ParseException pe) {\n    throw pe;\n  }\ncatch (  Exception e) {\n    throw new ParseException(\"Illegal cron expression format (\" + e.toString() + \")\",0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 375,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3441,
        "startLineNumber" : 300,
        "startColumnNumber" : 4,
        "endLineNumber" : 384,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void buildExpression(String expression) throws ParseException {\n  expressionParsed=true;\n  try {\n    if (seconds == null) {\n      seconds=new TreeSet<Integer>();\n    }\n    if (minutes == null) {\n      minutes=new TreeSet<Integer>();\n    }\n    if (hours == null) {\n      hours=new TreeSet<Integer>();\n    }\n    if (daysOfMonth == null) {\n      daysOfMonth=new TreeSet<Integer>();\n    }\n    if (months == null) {\n      months=new TreeSet<Integer>();\n    }\n    if (daysOfWeek == null) {\n      daysOfWeek=new TreeSet<Integer>();\n    }\n    if (years == null) {\n      years=new TreeSet<Integer>();\n    }\n    int exprOn=SECOND;\n    StringTokenizer exprsTok=new StringTokenizer(expression,\" \\t\",false);\n    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {\n      String expr=exprsTok.nextToken().trim();\n      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n        throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\",-1);\n      }\n      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n        throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\",-1);\n      }\n      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {\n        throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\",-1);\n      }\n      StringTokenizer vTok=new StringTokenizer(expr,\",\");\n      while (vTok.hasMoreTokens()) {\n        String v=vTok.nextToken();\n        storeExpressionVals(0,v,exprOn);\n      }\n      exprOn++;\n    }\n    if (exprOn <= DAY_OF_WEEK) {\n      throw new ParseException(\"Unexpected end of expression.\",expression.length());\n    }\n    if (exprOn <= YEAR) {\n      storeExpressionVals(0,\"*\",YEAR);\n    }\n    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);\n    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);\n    boolean dayOfMSpec=!dom.contains(NO_SPEC);\n    boolean dayOfWSpec=!dow.contains(NO_SPEC);\n    if (!dayOfMSpec || dayOfWSpec) {\n      if (!dayOfWSpec || dayOfMSpec) {\n        throw new ParseException(\"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\",0);\n      }\n    }\n  }\n catch (  ParseException pe) {\n    throw pe;\n  }\ncatch (  Exception e) {\n    throw new ParseException(\"Illegal cron expression format (\" + e.toString() + \")\",0);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 305,
        "startColumnNumber" : 16,
        "endLineNumber" : 305,
        "endColumnNumber" : 31
      },
      "nodeContext" : "seconds == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.TreeSet<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 305,
    "startColumnNumber" : 16,
    "endLineNumber" : 305,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}