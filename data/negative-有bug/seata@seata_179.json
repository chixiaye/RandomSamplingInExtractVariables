{
  "id" : 179,
  "expression" : "initialized.compareAndSet(false,true)",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "initialized.compareAndSet(false,true)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 215,
      "startColumnNumber" : 12,
      "endLineNumber" : 215,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 76
      },
      "nodeContext" : "initialized.compareAndSet(false,true) && LOGGER.isInfoEnabled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (initialized.compareAndSet(false,true) && LOGGER.isInfoEnabled()) {\n  LOGGER.info(\"AbstractRpcRemotingClient has started\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3949,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this.defaultEventExecutorGroup == null) {\n    this.defaultEventExecutorGroup=new DefaultEventExecutorGroup(nettyClientConfig.getClientWorkerThreads(),new NamedThreadFactory(getThreadPrefix(nettyClientConfig.getClientWorkerThreadPrefix()),nettyClientConfig.getClientWorkerThreads()));\n  }\n  this.bootstrap.group(this.eventLoopGroupWorker).channel(nettyClientConfig.getClientChannelClazz()).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_KEEPALIVE,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,nettyClientConfig.getConnectTimeoutMillis()).option(ChannelOption.SO_SNDBUF,nettyClientConfig.getClientSocketSndBufSize()).option(ChannelOption.SO_RCVBUF,nettyClientConfig.getClientSocketRcvBufSize());\n  if (nettyClientConfig.enableNative()) {\n    if (PlatformDependent.isOsx()) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"client run on macOS\");\n      }\n    }\n else {\n      bootstrap.option(EpollChannelOption.EPOLL_MODE,EpollMode.EDGE_TRIGGERED).option(EpollChannelOption.TCP_QUICKACK,true);\n    }\n  }\n  if (nettyClientConfig.isUseConnPool()) {\n    clientChannelPool=new AbstractChannelPoolMap<InetSocketAddress,FixedChannelPool>(){\n      @Override protected FixedChannelPool newPool(      InetSocketAddress key){\n        FixedChannelPool fixedClientChannelPool=new FixedChannelPool(bootstrap.remoteAddress(key),new DefaultChannelPoolHandler(){\n          @Override public void channelCreated(          Channel ch) throws Exception {\n            super.channelCreated(ch);\n            final ChannelPipeline pipeline=ch.pipeline();\n            pipeline.addLast(defaultEventExecutorGroup,new IdleStateHandler(nettyClientConfig.getChannelMaxReadIdleSeconds(),nettyClientConfig.getChannelMaxWriteIdleSeconds(),nettyClientConfig.getChannelMaxAllIdleSeconds()));\n            pipeline.addLast(defaultEventExecutorGroup,new RpcClientHandler());\n          }\n        }\n,ChannelHealthChecker.ACTIVE,AcquireTimeoutAction.FAIL,nettyClientConfig.getMaxAcquireConnMills(),nettyClientConfig.getPerHostMaxConn(),nettyClientConfig.getPendingConnSize(),false);\n        return fixedClientChannelPool;\n      }\n    }\n;\n  }\n else {\n    bootstrap.handler(new ChannelInitializer<SocketChannel>(){\n      @Override public void initChannel(      SocketChannel ch){\n        ChannelPipeline pipeline=ch.pipeline();\n        pipeline.addLast(new IdleStateHandler(nettyClientConfig.getChannelMaxReadIdleSeconds(),nettyClientConfig.getChannelMaxWriteIdleSeconds(),nettyClientConfig.getChannelMaxAllIdleSeconds())).addLast(new MessageCodecHandler());\n        if (null != channelHandlers) {\n          addChannelPipelineLast(ch,channelHandlers);\n        }\n      }\n    }\n);\n  }\n  if (initialized.compareAndSet(false,true) && LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"AbstractRpcRemotingClient has started\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 309,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3983,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void start(){\n  if (this.defaultEventExecutorGroup == null) {\n    this.defaultEventExecutorGroup=new DefaultEventExecutorGroup(nettyClientConfig.getClientWorkerThreads(),new NamedThreadFactory(getThreadPrefix(nettyClientConfig.getClientWorkerThreadPrefix()),nettyClientConfig.getClientWorkerThreads()));\n  }\n  this.bootstrap.group(this.eventLoopGroupWorker).channel(nettyClientConfig.getClientChannelClazz()).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_KEEPALIVE,true).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,nettyClientConfig.getConnectTimeoutMillis()).option(ChannelOption.SO_SNDBUF,nettyClientConfig.getClientSocketSndBufSize()).option(ChannelOption.SO_RCVBUF,nettyClientConfig.getClientSocketRcvBufSize());\n  if (nettyClientConfig.enableNative()) {\n    if (PlatformDependent.isOsx()) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"client run on macOS\");\n      }\n    }\n else {\n      bootstrap.option(EpollChannelOption.EPOLL_MODE,EpollMode.EDGE_TRIGGERED).option(EpollChannelOption.TCP_QUICKACK,true);\n    }\n  }\n  if (nettyClientConfig.isUseConnPool()) {\n    clientChannelPool=new AbstractChannelPoolMap<InetSocketAddress,FixedChannelPool>(){\n      @Override protected FixedChannelPool newPool(      InetSocketAddress key){\n        FixedChannelPool fixedClientChannelPool=new FixedChannelPool(bootstrap.remoteAddress(key),new DefaultChannelPoolHandler(){\n          @Override public void channelCreated(          Channel ch) throws Exception {\n            super.channelCreated(ch);\n            final ChannelPipeline pipeline=ch.pipeline();\n            pipeline.addLast(defaultEventExecutorGroup,new IdleStateHandler(nettyClientConfig.getChannelMaxReadIdleSeconds(),nettyClientConfig.getChannelMaxWriteIdleSeconds(),nettyClientConfig.getChannelMaxAllIdleSeconds()));\n            pipeline.addLast(defaultEventExecutorGroup,new RpcClientHandler());\n          }\n        }\n,ChannelHealthChecker.ACTIVE,AcquireTimeoutAction.FAIL,nettyClientConfig.getMaxAcquireConnMills(),nettyClientConfig.getPerHostMaxConn(),nettyClientConfig.getPendingConnSize(),false);\n        return fixedClientChannelPool;\n      }\n    }\n;\n  }\n else {\n    bootstrap.handler(new ChannelInitializer<SocketChannel>(){\n      @Override public void initChannel(      SocketChannel ch){\n        ChannelPipeline pipeline=ch.pipeline();\n        pipeline.addLast(new IdleStateHandler(nettyClientConfig.getChannelMaxReadIdleSeconds(),nettyClientConfig.getChannelMaxWriteIdleSeconds(),nettyClientConfig.getChannelMaxAllIdleSeconds())).addLast(new MessageCodecHandler());\n        if (null != channelHandlers) {\n          addChannelPipelineLast(ch,channelHandlers);\n        }\n      }\n    }\n);\n  }\n  if (initialized.compareAndSet(false,true) && LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"AbstractRpcRemotingClient has started\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 215,
        "endColumnNumber" : 76
      },
      "nodeContext" : "initialized.compareAndSet(false,true) && LOGGER.isInfoEnabled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 215,
    "startColumnNumber" : 12,
    "endLineNumber" : 215,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}