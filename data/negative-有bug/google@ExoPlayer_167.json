{
  "id" : 167,
  "expression" : "floatValue",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/audio/ResamplingAudioProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "floatValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 123,
      "startColumnNumber" : 38,
      "endLineNumber" : 123,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 123,
        "startColumnNumber" : 38,
        "endLineNumber" : 123,
        "endColumnNumber" : 66
      },
      "nodeContext" : "floatValue * Short.MAX_VALUE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 123,
        "startColumnNumber" : 37,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(floatValue * Short.MAX_VALUE)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 123,
        "startColumnNumber" : 29,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(short)(floatValue * Short.MAX_VALUE)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "shortValue=(short)(floatValue * Short.MAX_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 123,
        "startColumnNumber" : 10,
        "endLineNumber" : 123,
        "endColumnNumber" : 68
      },
      "nodeContext" : "short shortValue=(short)(floatValue * Short.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 118,
        "startColumnNumber" : 50,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float floatValue=Util.constrainValue(inputBuffer.getFloat(i),-1,1);\n  short shortValue=(short)(floatValue * Short.MAX_VALUE);\n  buffer.put((byte)(shortValue & 0xFF));\n  buffer.put((byte)((shortValue >> 8) & 0xFF));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=position; i < limit; i+=4) {\n  float floatValue=Util.constrainValue(inputBuffer.getFloat(i),-1,1);\n  short shortValue=(short)(floatValue * Short.MAX_VALUE);\n  buffer.put((byte)(shortValue & 0xFF));\n  buffer.put((byte)((shortValue >> 8) & 0xFF));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2050,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (inputAudioFormat.encoding) {\ncase C.ENCODING_PCM_8BIT:  for (int i=position; i < limit; i++) {\n    buffer.put((byte)0);\n    buffer.put((byte)((inputBuffer.get(i) & 0xFF) - 128));\n  }\nbreak;\ncase C.ENCODING_PCM_16BIT_BIG_ENDIAN:for (int i=position; i < limit; i+=2) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i));\n}\nbreak;\ncase C.ENCODING_PCM_24BIT:for (int i=position; i < limit; i+=3) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i + 2));\n}\nbreak;\ncase C.ENCODING_PCM_32BIT:for (int i=position; i < limit; i+=4) {\nbuffer.put(inputBuffer.get(i + 2));\nbuffer.put(inputBuffer.get(i + 3));\n}\nbreak;\ncase C.ENCODING_PCM_FLOAT:for (int i=position; i < limit; i+=4) {\nfloat floatValue=Util.constrainValue(inputBuffer.getFloat(i),-1,1);\nshort shortValue=(short)(floatValue * Short.MAX_VALUE);\nbuffer.put((byte)(shortValue & 0xFF));\nbuffer.put((byte)((shortValue >> 8) & 0xFF));\n}\nbreak;\ncase C.ENCODING_PCM_16BIT:case C.ENCODING_INVALID:case Format.NO_VALUE:default:throw new IllegalStateException();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 240,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3004,
        "startLineNumber" : 57,
        "startColumnNumber" : 49,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int position=inputBuffer.position();\n  int limit=inputBuffer.limit();\n  int size=limit - position;\n  int resampledSize;\nswitch (inputAudioFormat.encoding) {\ncase C.ENCODING_PCM_8BIT:    resampledSize=size * 2;\n  break;\ncase C.ENCODING_PCM_16BIT_BIG_ENDIAN:resampledSize=size;\nbreak;\ncase C.ENCODING_PCM_24BIT:resampledSize=(size / 3) * 2;\nbreak;\ncase C.ENCODING_PCM_32BIT:case C.ENCODING_PCM_FLOAT:resampledSize=size / 2;\nbreak;\ncase C.ENCODING_PCM_16BIT:case C.ENCODING_INVALID:case Format.NO_VALUE:default:throw new IllegalStateException();\n}\nByteBuffer buffer=replaceOutputBuffer(resampledSize);\nswitch (inputAudioFormat.encoding) {\ncase C.ENCODING_PCM_8BIT:for (int i=position; i < limit; i++) {\nbuffer.put((byte)0);\nbuffer.put((byte)((inputBuffer.get(i) & 0xFF) - 128));\n}\nbreak;\ncase C.ENCODING_PCM_16BIT_BIG_ENDIAN:for (int i=position; i < limit; i+=2) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i));\n}\nbreak;\ncase C.ENCODING_PCM_24BIT:for (int i=position; i < limit; i+=3) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i + 2));\n}\nbreak;\ncase C.ENCODING_PCM_32BIT:for (int i=position; i < limit; i+=4) {\nbuffer.put(inputBuffer.get(i + 2));\nbuffer.put(inputBuffer.get(i + 3));\n}\nbreak;\ncase C.ENCODING_PCM_FLOAT:for (int i=position; i < limit; i+=4) {\nfloat floatValue=Util.constrainValue(inputBuffer.getFloat(i),-1,1);\nshort shortValue=(short)(floatValue * Short.MAX_VALUE);\nbuffer.put((byte)(shortValue & 0xFF));\nbuffer.put((byte)((shortValue >> 8) & 0xFF));\n}\nbreak;\ncase C.ENCODING_PCM_16BIT:case C.ENCODING_INVALID:case Format.NO_VALUE:default:throw new IllegalStateException();\n}\ninputBuffer.position(inputBuffer.limit());\nbuffer.flip();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 355,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3063,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void queueInput(ByteBuffer inputBuffer){\n  int position=inputBuffer.position();\n  int limit=inputBuffer.limit();\n  int size=limit - position;\n  int resampledSize;\nswitch (inputAudioFormat.encoding) {\ncase C.ENCODING_PCM_8BIT:    resampledSize=size * 2;\n  break;\ncase C.ENCODING_PCM_16BIT_BIG_ENDIAN:resampledSize=size;\nbreak;\ncase C.ENCODING_PCM_24BIT:resampledSize=(size / 3) * 2;\nbreak;\ncase C.ENCODING_PCM_32BIT:case C.ENCODING_PCM_FLOAT:resampledSize=size / 2;\nbreak;\ncase C.ENCODING_PCM_16BIT:case C.ENCODING_INVALID:case Format.NO_VALUE:default:throw new IllegalStateException();\n}\nByteBuffer buffer=replaceOutputBuffer(resampledSize);\nswitch (inputAudioFormat.encoding) {\ncase C.ENCODING_PCM_8BIT:for (int i=position; i < limit; i++) {\nbuffer.put((byte)0);\nbuffer.put((byte)((inputBuffer.get(i) & 0xFF) - 128));\n}\nbreak;\ncase C.ENCODING_PCM_16BIT_BIG_ENDIAN:for (int i=position; i < limit; i+=2) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i));\n}\nbreak;\ncase C.ENCODING_PCM_24BIT:for (int i=position; i < limit; i+=3) {\nbuffer.put(inputBuffer.get(i + 1));\nbuffer.put(inputBuffer.get(i + 2));\n}\nbreak;\ncase C.ENCODING_PCM_32BIT:for (int i=position; i < limit; i+=4) {\nbuffer.put(inputBuffer.get(i + 2));\nbuffer.put(inputBuffer.get(i + 3));\n}\nbreak;\ncase C.ENCODING_PCM_FLOAT:for (int i=position; i < limit; i+=4) {\nfloat floatValue=Util.constrainValue(inputBuffer.getFloat(i),-1,1);\nshort shortValue=(short)(floatValue * Short.MAX_VALUE);\nbuffer.put((byte)(shortValue & 0xFF));\nbuffer.put((byte)((shortValue >> 8) & 0xFF));\n}\nbreak;\ncase C.ENCODING_PCM_16BIT:case C.ENCODING_INVALID:case Format.NO_VALUE:default:throw new IllegalStateException();\n}\ninputBuffer.position(inputBuffer.limit());\nbuffer.flip();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 365,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 123,
        "startColumnNumber" : 10,
        "endLineNumber" : 123,
        "endColumnNumber" : 68
      },
      "nodeContext" : "short shortValue=(short)(floatValue * Short.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 123,
    "startColumnNumber" : 38,
    "endLineNumber" : 123,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}