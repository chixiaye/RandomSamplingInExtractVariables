{
  "id" : 267,
  "expression" : "mediaSegment.relativeDiscontinuitySequence",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mediaSegment.relativeDiscontinuitySequence",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 133,
      "startColumnNumber" : 46,
      "endLineNumber" : 133,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 88
      },
      "nodeContext" : "discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 89
      },
      "nodeContext" : "int discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3939,
        "startLineNumber" : 94,
        "startColumnNumber" : 30,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HlsMediaPlaylist.SegmentBase mediaSegment=segmentBaseHolder.segmentBase;\n  DataSpec dataSpec=new DataSpec.Builder().setUri(UriUtil.resolveToUri(mediaPlaylist.baseUri,mediaSegment.url)).setPosition(mediaSegment.byteRangeOffset).setLength(mediaSegment.byteRangeLength).setFlags(segmentBaseHolder.isPreload ? FLAG_MIGHT_NOT_USE_FULL_NETWORK_SPEED : 0).build();\n  boolean mediaSegmentEncrypted=mediaSegmentKey != null;\n  @Nullable byte[] mediaSegmentIv=mediaSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(mediaSegment.encryptionIV)) : null;\n  DataSource mediaDataSource=buildDataSource(dataSource,mediaSegmentKey,mediaSegmentIv);\n  HlsMediaPlaylist.Segment initSegment=mediaSegment.initializationSegment;\n  DataSpec initDataSpec=null;\n  boolean initSegmentEncrypted=false;\n  @Nullable DataSource initDataSource=null;\n  if (initSegment != null) {\n    initSegmentEncrypted=initSegmentKey != null;\n    @Nullable byte[] initSegmentIv=initSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(initSegment.encryptionIV)) : null;\n    Uri initSegmentUri=UriUtil.resolveToUri(mediaPlaylist.baseUri,initSegment.url);\n    initDataSpec=new DataSpec(initSegmentUri,initSegment.byteRangeOffset,initSegment.byteRangeLength);\n    initDataSource=buildDataSource(dataSource,initSegmentKey,initSegmentIv);\n  }\n  long segmentStartTimeInPeriodUs=startOfPlaylistInPeriodUs + mediaSegment.relativeStartTimeUs;\n  long segmentEndTimeInPeriodUs=segmentStartTimeInPeriodUs + mediaSegment.durationUs;\n  int discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence;\n  @Nullable HlsMediaChunkExtractor previousExtractor=null;\n  Id3Decoder id3Decoder;\n  ParsableByteArray scratchId3Data;\n  if (previousChunk != null) {\n    boolean isSameInitData=initDataSpec == previousChunk.initDataSpec || (initDataSpec != null && previousChunk.initDataSpec != null && initDataSpec.uri.equals(previousChunk.initDataSpec.uri) && initDataSpec.position == previousChunk.initDataSpec.position);\n    boolean isFollowingChunk=playlistUrl.equals(previousChunk.playlistUrl) && previousChunk.loadCompleted;\n    id3Decoder=previousChunk.id3Decoder;\n    scratchId3Data=previousChunk.scratchId3Data;\n    previousExtractor=isSameInitData && isFollowingChunk && !previousChunk.extractorInvalidated&& previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber ? previousChunk.extractor : null;\n  }\n else {\n    id3Decoder=new Id3Decoder();\n    scratchId3Data=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);\n  }\n  return new HlsMediaChunk(extractorFactory,mediaDataSource,dataSpec,format,mediaSegmentEncrypted,initDataSource,initDataSpec,initSegmentEncrypted,playlistUrl,muxedCaptionFormats,trackSelectionReason,trackSelectionData,segmentStartTimeInPeriodUs,segmentEndTimeInPeriodUs,segmentBaseHolder.mediaSequence,segmentBaseHolder.partIndex,!segmentBaseHolder.isPreload,discontinuitySequenceNumber,mediaSegment.hasGapTag,isMasterTimestampSource,timestampAdjusterProvider.getAdjuster(discontinuitySequenceNumber),mediaSegment.drmInitData,previousExtractor,id3Decoder,scratchId3Data,shouldSpliceIn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6118,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a new instance.\n * @param extractorFactory A {@link HlsExtractorFactory} from which the {@link HlsMediaChunkExtractor} is obtained.\n * @param dataSource The source from which the data should be loaded.\n * @param format The chunk format.\n * @param startOfPlaylistInPeriodUs The position of the playlist in the period in microseconds.\n * @param mediaPlaylist The media playlist from which this chunk was obtained.\n * @param segmentBaseHolder The segment holder.\n * @param playlistUrl The url of the playlist from which this chunk was obtained.\n * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption information is available in the master playlist.\n * @param trackSelectionReason See {@link #trackSelectionReason}.\n * @param trackSelectionData See {@link #trackSelectionData}.\n * @param isMasterTimestampSource True if the chunk can initialize the timestamp adjuster.\n * @param timestampAdjusterProvider The provider from which to obtain the {@link TimestampAdjuster}.\n * @param previousChunk The {@link HlsMediaChunk} that preceded this one. May be null.\n * @param mediaSegmentKey The media segment decryption key, if fully encrypted. Null otherwise.\n * @param initSegmentKey The initialization segment decryption key, if fully encrypted. Nullotherwise.\n * @param shouldSpliceIn Whether samples for this chunk should be spliced into existing samples.\n */\npublic static HlsMediaChunk createInstance(HlsExtractorFactory extractorFactory,DataSource dataSource,Format format,long startOfPlaylistInPeriodUs,HlsMediaPlaylist mediaPlaylist,HlsChunkSource.SegmentBaseHolder segmentBaseHolder,Uri playlistUrl,@Nullable List<Format> muxedCaptionFormats,@C.SelectionReason int trackSelectionReason,@Nullable Object trackSelectionData,boolean isMasterTimestampSource,TimestampAdjusterProvider timestampAdjusterProvider,@Nullable HlsMediaChunk previousChunk,@Nullable byte[] mediaSegmentKey,@Nullable byte[] initSegmentKey,boolean shouldSpliceIn){\n  HlsMediaPlaylist.SegmentBase mediaSegment=segmentBaseHolder.segmentBase;\n  DataSpec dataSpec=new DataSpec.Builder().setUri(UriUtil.resolveToUri(mediaPlaylist.baseUri,mediaSegment.url)).setPosition(mediaSegment.byteRangeOffset).setLength(mediaSegment.byteRangeLength).setFlags(segmentBaseHolder.isPreload ? FLAG_MIGHT_NOT_USE_FULL_NETWORK_SPEED : 0).build();\n  boolean mediaSegmentEncrypted=mediaSegmentKey != null;\n  @Nullable byte[] mediaSegmentIv=mediaSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(mediaSegment.encryptionIV)) : null;\n  DataSource mediaDataSource=buildDataSource(dataSource,mediaSegmentKey,mediaSegmentIv);\n  HlsMediaPlaylist.Segment initSegment=mediaSegment.initializationSegment;\n  DataSpec initDataSpec=null;\n  boolean initSegmentEncrypted=false;\n  @Nullable DataSource initDataSource=null;\n  if (initSegment != null) {\n    initSegmentEncrypted=initSegmentKey != null;\n    @Nullable byte[] initSegmentIv=initSegmentEncrypted ? getEncryptionIvArray(Assertions.checkNotNull(initSegment.encryptionIV)) : null;\n    Uri initSegmentUri=UriUtil.resolveToUri(mediaPlaylist.baseUri,initSegment.url);\n    initDataSpec=new DataSpec(initSegmentUri,initSegment.byteRangeOffset,initSegment.byteRangeLength);\n    initDataSource=buildDataSource(dataSource,initSegmentKey,initSegmentIv);\n  }\n  long segmentStartTimeInPeriodUs=startOfPlaylistInPeriodUs + mediaSegment.relativeStartTimeUs;\n  long segmentEndTimeInPeriodUs=segmentStartTimeInPeriodUs + mediaSegment.durationUs;\n  int discontinuitySequenceNumber=mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence;\n  @Nullable HlsMediaChunkExtractor previousExtractor=null;\n  Id3Decoder id3Decoder;\n  ParsableByteArray scratchId3Data;\n  if (previousChunk != null) {\n    boolean isSameInitData=initDataSpec == previousChunk.initDataSpec || (initDataSpec != null && previousChunk.initDataSpec != null && initDataSpec.uri.equals(previousChunk.initDataSpec.uri) && initDataSpec.position == previousChunk.initDataSpec.position);\n    boolean isFollowingChunk=playlistUrl.equals(previousChunk.playlistUrl) && previousChunk.loadCompleted;\n    id3Decoder=previousChunk.id3Decoder;\n    scratchId3Data=previousChunk.scratchId3Data;\n    previousExtractor=isSameInitData && isFollowingChunk && !previousChunk.extractorInvalidated&& previousChunk.discontinuitySequenceNumber == discontinuitySequenceNumber ? previousChunk.extractor : null;\n  }\n else {\n    id3Decoder=new Id3Decoder();\n    scratchId3Data=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);\n  }\n  return new HlsMediaChunk(extractorFactory,mediaDataSource,dataSpec,format,mediaSegmentEncrypted,initDataSource,initDataSpec,initSegmentEncrypted,playlistUrl,muxedCaptionFormats,trackSelectionReason,trackSelectionData,segmentStartTimeInPeriodUs,segmentEndTimeInPeriodUs,segmentBaseHolder.mediaSequence,segmentBaseHolder.partIndex,!segmentBaseHolder.isPreload,discontinuitySequenceNumber,mediaSegment.hasGapTag,isMasterTimestampSource,timestampAdjusterProvider.getAdjuster(discontinuitySequenceNumber),mediaSegment.drmInitData,previousExtractor,id3Decoder,scratchId3Data,shouldSpliceIn);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 469,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mediaPlaylist.discontinuitySequence + mediaSegment.relativeDiscontinuitySequence",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 133,
    "startColumnNumber" : 46,
    "endLineNumber" : 133,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}