{
  "id" : 91,
  "expression" : "resultMap",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/map/MapUtil.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "resultMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 398,
      "startColumnNumber" : 10,
      "endLineNumber" : 398,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 398,
        "startColumnNumber" : 3,
        "endLineNumber" : 398,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return resultMap;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 397,
        "startColumnNumber" : 33,
        "endLineNumber" : 399,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return resultMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 397,
        "startColumnNumber" : 2,
        "endLineNumber" : 399,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (CollUtil.isEmpty(mapList)) {\n  return resultMap;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 395,
        "startColumnNumber" : 87,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 365,
        "startColumnNumber" : 1,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 行转列，合并相同的键，值合并为列表<br> 将Map列表中相同key的值组成列表做为Map的value<br> 是 {@link #toMapList(Map)}的逆方法<br> 比如传入数据： <pre> [ {a: 1, b: 1, c: 1} {a: 2, b: 2} {a: 3, b: 3} {a: 4} ] </pre> <p> 结果是： <pre> { a: [1,2,3,4] b: [1,2,3,] c: [1] } </pre>\n * @param < K >     键类型\n * @param < V >     值类型\n * @param mapList Map列表\n * @return Map\n */\npublic static <K,V>Map<K,List<V>> toListMap(Iterable<? extends Map<K,V>> mapList){\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 398,
        "startColumnNumber" : 3,
        "endLineNumber" : 398,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return resultMap;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<K,java.util.List<V>>"
  }, {
    "nodeContext" : "resultMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 408,
      "startColumnNumber" : 16,
      "endLineNumber" : 408,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 408,
        "startColumnNumber" : 16,
        "endLineNumber" : 408,
        "endColumnNumber" : 34
      },
      "nodeContext" : "resultMap.get(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 408,
        "startColumnNumber" : 4,
        "endLineNumber" : 408,
        "endColumnNumber" : 34
      },
      "nodeContext" : "valueList=resultMap.get(key)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 408,
        "startColumnNumber" : 4,
        "endLineNumber" : 408,
        "endColumnNumber" : 35
      },
      "nodeContext" : "valueList=resultMap.get(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 406,
        "startColumnNumber" : 38,
        "endLineNumber" : 415,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  key=entry.getKey();\n  valueList=resultMap.get(key);\n  if (null == valueList) {\n    valueList=CollUtil.newArrayList(entry.getValue());\n    resultMap.put(key,valueList);\n  }\n else {\n    valueList.add(entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 406,
        "startColumnNumber" : 3,
        "endLineNumber" : 415,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (Entry<K,V> entry : entrySet) {\n  key=entry.getKey();\n  valueList=resultMap.get(key);\n  if (null == valueList) {\n    valueList=CollUtil.newArrayList(entry.getValue());\n    resultMap.put(key,valueList);\n  }\n else {\n    valueList.add(entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 402,
        "startColumnNumber" : 32,
        "endLineNumber" : 416,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  entrySet=map.entrySet();\n  K key;\n  List<V> valueList;\n  for (  Entry<K,V> entry : entrySet) {\n    key=entry.getKey();\n    valueList=resultMap.get(key);\n    if (null == valueList) {\n      valueList=CollUtil.newArrayList(entry.getValue());\n      resultMap.put(key,valueList);\n    }\n else {\n      valueList.add(entry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 402,
        "startColumnNumber" : 2,
        "endLineNumber" : 416,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map<K,V> map : mapList) {\n  entrySet=map.entrySet();\n  K key;\n  List<V> valueList;\n  for (  Entry<K,V> entry : entrySet) {\n    key=entry.getKey();\n    valueList=resultMap.get(key);\n    if (null == valueList) {\n      valueList=CollUtil.newArrayList(entry.getValue());\n      resultMap.put(key,valueList);\n    }\n else {\n      valueList.add(entry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 395,
        "startColumnNumber" : 87,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 365,
        "startColumnNumber" : 1,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 行转列，合并相同的键，值合并为列表<br> 将Map列表中相同key的值组成列表做为Map的value<br> 是 {@link #toMapList(Map)}的逆方法<br> 比如传入数据： <pre> [ {a: 1, b: 1, c: 1} {a: 2, b: 2} {a: 3, b: 3} {a: 4} ] </pre> <p> 结果是： <pre> { a: [1,2,3,4] b: [1,2,3,] c: [1] } </pre>\n * @param < K >     键类型\n * @param < V >     值类型\n * @param mapList Map列表\n * @return Map\n */\npublic static <K,V>Map<K,List<V>> toListMap(Iterable<? extends Map<K,V>> mapList){\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 408,
        "startColumnNumber" : 4,
        "endLineNumber" : 408,
        "endColumnNumber" : 35
      },
      "nodeContext" : "valueList=resultMap.get(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<K,java.util.List<V>>"
  }, {
    "nodeContext" : "resultMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 411,
      "startColumnNumber" : 5,
      "endLineNumber" : 411,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 34
      },
      "nodeContext" : "resultMap.put(key,valueList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 35
      },
      "nodeContext" : "resultMap.put(key,valueList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 409,
        "startColumnNumber" : 27,
        "endLineNumber" : 412,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  valueList=CollUtil.newArrayList(entry.getValue());\n  resultMap.put(key,valueList);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 409,
        "startColumnNumber" : 4,
        "endLineNumber" : 414,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (null == valueList) {\n  valueList=CollUtil.newArrayList(entry.getValue());\n  resultMap.put(key,valueList);\n}\n else {\n  valueList.add(entry.getValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 406,
        "startColumnNumber" : 38,
        "endLineNumber" : 415,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  key=entry.getKey();\n  valueList=resultMap.get(key);\n  if (null == valueList) {\n    valueList=CollUtil.newArrayList(entry.getValue());\n    resultMap.put(key,valueList);\n  }\n else {\n    valueList.add(entry.getValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 406,
        "startColumnNumber" : 3,
        "endLineNumber" : 415,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (Entry<K,V> entry : entrySet) {\n  key=entry.getKey();\n  valueList=resultMap.get(key);\n  if (null == valueList) {\n    valueList=CollUtil.newArrayList(entry.getValue());\n    resultMap.put(key,valueList);\n  }\n else {\n    valueList.add(entry.getValue());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 402,
        "startColumnNumber" : 32,
        "endLineNumber" : 416,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  entrySet=map.entrySet();\n  K key;\n  List<V> valueList;\n  for (  Entry<K,V> entry : entrySet) {\n    key=entry.getKey();\n    valueList=resultMap.get(key);\n    if (null == valueList) {\n      valueList=CollUtil.newArrayList(entry.getValue());\n      resultMap.put(key,valueList);\n    }\n else {\n      valueList.add(entry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 402,
        "startColumnNumber" : 2,
        "endLineNumber" : 416,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Map<K,V> map : mapList) {\n  entrySet=map.entrySet();\n  K key;\n  List<V> valueList;\n  for (  Entry<K,V> entry : entrySet) {\n    key=entry.getKey();\n    valueList=resultMap.get(key);\n    if (null == valueList) {\n      valueList=CollUtil.newArrayList(entry.getValue());\n      resultMap.put(key,valueList);\n    }\n else {\n      valueList.add(entry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 395,
        "startColumnNumber" : 87,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 365,
        "startColumnNumber" : 1,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 行转列，合并相同的键，值合并为列表<br> 将Map列表中相同key的值组成列表做为Map的value<br> 是 {@link #toMapList(Map)}的逆方法<br> 比如传入数据： <pre> [ {a: 1, b: 1, c: 1} {a: 2, b: 2} {a: 3, b: 3} {a: 4} ] </pre> <p> 结果是： <pre> { a: [1,2,3,4] b: [1,2,3,] c: [1] } </pre>\n * @param < K >     键类型\n * @param < V >     值类型\n * @param mapList Map列表\n * @return Map\n */\npublic static <K,V>Map<K,List<V>> toListMap(Iterable<? extends Map<K,V>> mapList){\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 411,
        "startColumnNumber" : 5,
        "endLineNumber" : 411,
        "endColumnNumber" : 35
      },
      "nodeContext" : "resultMap.put(key,valueList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<K,java.util.List<V>>"
  }, {
    "nodeContext" : "resultMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 418,
      "startColumnNumber" : 9,
      "endLineNumber" : 418,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 418,
        "startColumnNumber" : 2,
        "endLineNumber" : 418,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return resultMap;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 583,
        "startLineNumber" : 395,
        "startColumnNumber" : 87,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 365,
        "startColumnNumber" : 1,
        "endLineNumber" : 419,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 行转列，合并相同的键，值合并为列表<br> 将Map列表中相同key的值组成列表做为Map的value<br> 是 {@link #toMapList(Map)}的逆方法<br> 比如传入数据： <pre> [ {a: 1, b: 1, c: 1} {a: 2, b: 2} {a: 3, b: 3} {a: 4} ] </pre> <p> 结果是： <pre> { a: [1,2,3,4] b: [1,2,3,] c: [1] } </pre>\n * @param < K >     键类型\n * @param < V >     值类型\n * @param mapList Map列表\n * @return Map\n */\npublic static <K,V>Map<K,List<V>> toListMap(Iterable<? extends Map<K,V>> mapList){\n  final HashMap<K,List<V>> resultMap=new HashMap<>();\n  if (CollUtil.isEmpty(mapList)) {\n    return resultMap;\n  }\n  Set<Entry<K,V>> entrySet;\n  for (  Map<K,V> map : mapList) {\n    entrySet=map.entrySet();\n    K key;\n    List<V> valueList;\n    for (    Entry<K,V> entry : entrySet) {\n      key=entry.getKey();\n      valueList=resultMap.get(key);\n      if (null == valueList) {\n        valueList=CollUtil.newArrayList(entry.getValue());\n        resultMap.put(key,valueList);\n      }\n else {\n        valueList.add(entry.getValue());\n      }\n    }\n  }\n  return resultMap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 418,
        "startColumnNumber" : 2,
        "endLineNumber" : 418,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return resultMap;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<K,java.util.List<V>>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 398,
    "startColumnNumber" : 10,
    "endLineNumber" : 398,
    "endColumnNumber" : 19
  }, {
    "charLength" : 9,
    "startLineNumber" : 408,
    "startColumnNumber" : 16,
    "endLineNumber" : 408,
    "endColumnNumber" : 25
  }, {
    "charLength" : 9,
    "startLineNumber" : 411,
    "startColumnNumber" : 5,
    "endLineNumber" : 411,
    "endColumnNumber" : 14
  }, {
    "charLength" : 9,
    "startLineNumber" : 418,
    "startColumnNumber" : 9,
    "endLineNumber" : 418,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  } ]
}