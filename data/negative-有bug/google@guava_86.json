{
  "id" : 86,
  "expression" : "i < numBytes",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/base/Utf8Test.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < numBytes",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 329,
      "startColumnNumber" : 22,
      "endLineNumber" : 329,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 329,
        "startColumnNumber" : 6,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < numBytes; i++) {\n  bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n  tmpByteChar=tmpByteChar >> 8;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 327,
        "startColumnNumber" : 60,
        "endLineNumber" : 345,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long tmpByteChar=byteChar;\n  for (int i=0; i < numBytes; i++) {\n    bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n    tmpByteChar=tmpByteChar >> 8;\n  }\n  boolean isRoundTrippable=Utf8.isWellFormed(bytes);\n  assertEquals(isRoundTrippable,Utf8.isWellFormed(bytes,0,numBytes));\n  String s=new String(bytes,Charsets.UTF_8);\n  byte[] bytesReencoded=s.getBytes(Charsets.UTF_8);\n  boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);\n  if (bytesEqual != isRoundTrippable) {\n    fail();\n  }\n  if (isRoundTrippable) {\n    countRoundTripped++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 712,
        "startLineNumber" : 327,
        "startColumnNumber" : 4,
        "endLineNumber" : 345,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (long byteChar=start; byteChar < lim; byteChar++) {\n  long tmpByteChar=byteChar;\n  for (int i=0; i < numBytes; i++) {\n    bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n    tmpByteChar=tmpByteChar >> 8;\n  }\n  boolean isRoundTrippable=Utf8.isWellFormed(bytes);\n  assertEquals(isRoundTrippable,Utf8.isWellFormed(bytes,0,numBytes));\n  String s=new String(bytes,Charsets.UTF_8);\n  byte[] bytesReencoded=s.getBytes(Charsets.UTF_8);\n  boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);\n  if (bytesEqual != isRoundTrippable) {\n    fail();\n  }\n  if (isRoundTrippable) {\n    countRoundTripped++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 113,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 321,
        "startColumnNumber" : 88,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] bytes=new byte[numBytes];\n  if (lim == -1) {\n    lim=1L << (numBytes * 8);\n  }\n  long countRoundTripped=0;\n  for (long byteChar=start; byteChar < lim; byteChar++) {\n    long tmpByteChar=byteChar;\n    for (int i=0; i < numBytes; i++) {\n      bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n      tmpByteChar=tmpByteChar >> 8;\n    }\n    boolean isRoundTrippable=Utf8.isWellFormed(bytes);\n    assertEquals(isRoundTrippable,Utf8.isWellFormed(bytes,0,numBytes));\n    String s=new String(bytes,Charsets.UTF_8);\n    byte[] bytesReencoded=s.getBytes(Charsets.UTF_8);\n    boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);\n    if (bytesEqual != isRoundTrippable) {\n      fail();\n    }\n    if (isRoundTrippable) {\n      countRoundTripped++;\n    }\n  }\n  assertEquals(expectedCount,countRoundTripped);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1593,
        "startLineNumber" : 310,
        "startColumnNumber" : 2,
        "endLineNumber" : 347,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Helper to run the loop to test all the permutations for the number of bytes specified. This overload is useful for debugging to get the loop to start at a certain character.\n * @param numBytes the number of bytes in the byte array\n * @param expectedCount the expected number of roundtrippable permutations\n * @param start the starting bytes encoded as a long as big-endian\n * @param lim the limit of bytes to process encoded as a long as big-endian, or -1 to mean the maxlimit for numBytes\n */\n@GwtIncompatible private static void testBytes(int numBytes,long expectedCount,long start,long lim){\n  byte[] bytes=new byte[numBytes];\n  if (lim == -1) {\n    lim=1L << (numBytes * 8);\n  }\n  long countRoundTripped=0;\n  for (long byteChar=start; byteChar < lim; byteChar++) {\n    long tmpByteChar=byteChar;\n    for (int i=0; i < numBytes; i++) {\n      bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n      tmpByteChar=tmpByteChar >> 8;\n    }\n    boolean isRoundTrippable=Utf8.isWellFormed(bytes);\n    assertEquals(isRoundTrippable,Utf8.isWellFormed(bytes,0,numBytes));\n    String s=new String(bytes,Charsets.UTF_8);\n    byte[] bytesReencoded=s.getBytes(Charsets.UTF_8);\n    boolean bytesEqual=Arrays.equals(bytes,bytesReencoded);\n    if (bytesEqual != isRoundTrippable) {\n      fail();\n    }\n    if (isRoundTrippable) {\n      countRoundTripped++;\n    }\n  }\n  assertEquals(expectedCount,countRoundTripped);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 329,
        "startColumnNumber" : 6,
        "endLineNumber" : 332,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < numBytes; i++) {\n  bytes[bytes.length - i - 1]=(byte)tmpByteChar;\n  tmpByteChar=tmpByteChar >> 8;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 329,
    "startColumnNumber" : 22,
    "endLineNumber" : 329,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}