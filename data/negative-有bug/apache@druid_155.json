{
  "id" : 155,
  "expression" : "TieredBrokerConfig",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/router/CoordinatorRuleManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TieredBrokerConfig",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 130,
      "startColumnNumber" : 8,
      "endLineNumber" : 130,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 44
      },
      "nodeContext" : "TieredBrokerConfig.DEFAULT_RULE_NAME",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 120,
        "startColumnNumber" : 42,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "ImmutableMap.of(DATASOURCE1,ImmutableList.of(new ForeverLoadRule(null)),DATASOURCE2,ImmutableList.of(new ForeverLoadRule(null),new IntervalDropRule(Intervals.of(\"2020-01-01/2020-01-02\"))),\"datasource3\",ImmutableList.of(new PeriodLoadRule(new Period(\"P1M\"),true,null),new ForeverDropRule()),TieredBrokerConfig.DEFAULT_RULE_NAME,ImmutableList.of(new ForeverLoadRule(ImmutableMap.of(\"__default\",2))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 56,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 521,
        "startLineNumber" : 120,
        "startColumnNumber" : 34,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "rules=ImmutableMap.of(DATASOURCE1,ImmutableList.of(new ForeverLoadRule(null)),DATASOURCE2,ImmutableList.of(new ForeverLoadRule(null),new IntervalDropRule(Intervals.of(\"2020-01-01/2020-01-02\"))),\"datasource3\",ImmutableList.of(new PeriodLoadRule(new Period(\"P1M\"),true,null),new ForeverDropRule()),TieredBrokerConfig.DEFAULT_RULE_NAME,ImmutableList.of(new ForeverLoadRule(ImmutableMap.of(\"__default\",2))))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 58,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final Map<String,List<Rule>> rules=ImmutableMap.of(DATASOURCE1,ImmutableList.of(new ForeverLoadRule(null)),DATASOURCE2,ImmutableList.of(new ForeverLoadRule(null),new IntervalDropRule(Intervals.of(\"2020-01-01/2020-01-02\"))),\"datasource3\",ImmutableList.of(new PeriodLoadRule(new Period(\"P1M\"),true,null),new ForeverDropRule()),TieredBrokerConfig.DEFAULT_RULE_NAME,ImmutableList.of(new ForeverLoadRule(ImmutableMap.of(\"__default\",2))));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Map<String,List<Rule>> rules=ImmutableMap.of(DATASOURCE1,ImmutableList.of(new ForeverLoadRule(null)),DATASOURCE2,ImmutableList.of(new ForeverLoadRule(null),new IntervalDropRule(Intervals.of(\"2020-01-01/2020-01-02\"))),\"datasource3\",ImmutableList.of(new PeriodLoadRule(new Period(\"P1M\"),true,null),new ForeverDropRule()),TieredBrokerConfig.DEFAULT_RULE_NAME,ImmutableList.of(new ForeverLoadRule(ImmutableMap.of(\"__default\",2))));\n  final StringFullResponseHolder holder=EasyMock.niceMock(StringFullResponseHolder.class);\n  EasyMock.expect(holder.getStatus()).andReturn(HttpResponseStatus.OK);\n  try {\n    EasyMock.expect(holder.getContent()).andReturn(objectMapper.writeValueAsString(rules));\n    final DruidLeaderClient client=EasyMock.niceMock(DruidLeaderClient.class);\n    EasyMock.expect(client.go(EasyMock.anyObject())).andReturn(holder);\n    EasyMock.replay(holder,client);\n    return client;\n  }\n catch (  IOException|InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1236,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private DruidLeaderClient mockClient(){\n  final Map<String,List<Rule>> rules=ImmutableMap.of(DATASOURCE1,ImmutableList.of(new ForeverLoadRule(null)),DATASOURCE2,ImmutableList.of(new ForeverLoadRule(null),new IntervalDropRule(Intervals.of(\"2020-01-01/2020-01-02\"))),\"datasource3\",ImmutableList.of(new PeriodLoadRule(new Period(\"P1M\"),true,null),new ForeverDropRule()),TieredBrokerConfig.DEFAULT_RULE_NAME,ImmutableList.of(new ForeverLoadRule(ImmutableMap.of(\"__default\",2))));\n  final StringFullResponseHolder holder=EasyMock.niceMock(StringFullResponseHolder.class);\n  EasyMock.expect(holder.getStatus()).andReturn(HttpResponseStatus.OK);\n  try {\n    EasyMock.expect(holder.getContent()).andReturn(objectMapper.writeValueAsString(rules));\n    final DruidLeaderClient client=EasyMock.niceMock(DruidLeaderClient.class);\n    EasyMock.expect(client.go(EasyMock.anyObject())).andReturn(holder);\n    EasyMock.replay(holder,client);\n    return client;\n  }\n catch (  IOException|InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 44
      },
      "nodeContext" : "TieredBrokerConfig.DEFAULT_RULE_NAME",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.server.router.TieredBrokerConfig"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 130,
    "startColumnNumber" : 8,
    "endLineNumber" : 130,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}