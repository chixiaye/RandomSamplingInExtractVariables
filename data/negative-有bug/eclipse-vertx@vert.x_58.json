{
  "id" : 58,
  "expression" : "!constructor.isAccessible()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/cli/converters/ConstructorBasedConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!constructor.isAccessible()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 46,
      "startColumnNumber" : 10,
      "endLineNumber" : 46,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 46,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!constructor.isAccessible()) {\n  constructor.setAccessible(true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Constructor<T> constructor=clazz.getConstructor(String.class);\n  if (!constructor.isAccessible()) {\n    constructor.setAccessible(true);\n  }\n  return new ConstructorBasedConverter<>(constructor);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  final Constructor<T> constructor=clazz.getConstructor(String.class);\n  if (!constructor.isAccessible()) {\n    constructor.setAccessible(true);\n  }\n  return new ConstructorBasedConverter<>(constructor);\n}\n catch (NoSuchMethodException e) {\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 43,
        "startColumnNumber" : 79,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    final Constructor<T> constructor=clazz.getConstructor(String.class);\n    if (!constructor.isAccessible()) {\n      constructor.setAccessible(true);\n    }\n    return new ConstructorBasedConverter<>(constructor);\n  }\n catch (  NoSuchMethodException e) {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Checks whether the given class can be used by the  {@link ConstructorBasedConverter} (i.e. has a constructortaking a single String as argument). If so, creates a new instance of converter for this type.\n * @param clazz the class\n * @return a {@link ConstructorBasedConverter} if the given class is eligible,{@literal null} otherwise.\n */\npublic static <T>ConstructorBasedConverter<T> getIfEligible(Class<T> clazz){\n  try {\n    final Constructor<T> constructor=clazz.getConstructor(String.class);\n    if (!constructor.isAccessible()) {\n      constructor.setAccessible(true);\n    }\n    return new ConstructorBasedConverter<>(constructor);\n  }\n catch (  NoSuchMethodException e) {\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 46,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!constructor.isAccessible()) {\n  constructor.setAccessible(true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 46,
    "startColumnNumber" : 10,
    "endLineNumber" : 46,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}