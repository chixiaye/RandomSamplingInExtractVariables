{
  "id" : 459,
  "expression" : "predicateFactory",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/filter/vector/FloatVectorValueMatcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "predicateFactory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 89,
      "startColumnNumber" : 42,
      "endLineNumber" : 89,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 89,
        "startColumnNumber" : 42,
        "endLineNumber" : 89,
        "endColumnNumber" : 79
      },
      "nodeContext" : "predicateFactory.makeFloatPredicate()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 89,
        "startColumnNumber" : 30,
        "endLineNumber" : 89,
        "endColumnNumber" : 79
      },
      "nodeContext" : "predicate=predicateFactory.makeFloatPredicate()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 80
      },
      "nodeContext" : "final DruidFloatPredicate predicate=predicateFactory.makeFloatPredicate();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1083,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final DruidFloatPredicate predicate=predicateFactory.makeFloatPredicate();\n  return new BaseVectorValueMatcher(selector){\n    final VectorMatch match=VectorMatch.wrap(new int[selector.getMaxVectorSize()]);\n    @Override public ReadableVectorMatch match(    final ReadableVectorMatch mask){\n      final float[] vector=selector.getFloatVector();\n      final int[] selection=match.getSelection();\n      final boolean[] nulls=selector.getNullVector();\n      final boolean hasNulls=canHaveNulls && nulls != null;\n      int numRows=0;\n      for (int i=0; i < mask.getSelectionSize(); i++) {\n        final int rowNum=mask.getSelection()[i];\n        if (hasNulls && nulls[rowNum]) {\n          if (predicate.applyNull()) {\n            selection[numRows++]=rowNum;\n          }\n        }\n else         if (predicate.applyFloat(vector[rowNum])) {\n          selection[numRows++]=rowNum;\n        }\n      }\n      match.setSelectionSize(numRows);\n      assert match.isValid(mask);\n      return match;\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1181,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public VectorValueMatcher makeMatcher(final DruidPredicateFactory predicateFactory){\n  final DruidFloatPredicate predicate=predicateFactory.makeFloatPredicate();\n  return new BaseVectorValueMatcher(selector){\n    final VectorMatch match=VectorMatch.wrap(new int[selector.getMaxVectorSize()]);\n    @Override public ReadableVectorMatch match(    final ReadableVectorMatch mask){\n      final float[] vector=selector.getFloatVector();\n      final int[] selection=match.getSelection();\n      final boolean[] nulls=selector.getNullVector();\n      final boolean hasNulls=canHaveNulls && nulls != null;\n      int numRows=0;\n      for (int i=0; i < mask.getSelectionSize(); i++) {\n        final int rowNum=mask.getSelection()[i];\n        if (hasNulls && nulls[rowNum]) {\n          if (predicate.applyNull()) {\n            selection[numRows++]=rowNum;\n          }\n        }\n else         if (predicate.applyFloat(vector[rowNum])) {\n          selection[numRows++]=rowNum;\n        }\n      }\n      match.setSelectionSize(numRows);\n      assert match.isValid(mask);\n      return match;\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 80
      },
      "nodeContext" : "final DruidFloatPredicate predicate=predicateFactory.makeFloatPredicate();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.filter.DruidPredicateFactory"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 89,
    "startColumnNumber" : 42,
    "endLineNumber" : 89,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}