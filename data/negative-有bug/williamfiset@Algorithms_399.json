{
  "id" : 399,
  "expression" : "new HSet<>(sz)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/set/HSetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HSet<>(sz)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 97,
      "startColumnNumber" : 26,
      "endLineNumber" : 97,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 97,
        "startColumnNumber" : 21,
        "endLineNumber" : 97,
        "endColumnNumber" : 40
      },
      "nodeContext" : "hs=new HSet<>(sz)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 41
      },
      "nodeContext" : "HSet<ConstObj> hs=new HSet<>(sz);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 94,
        "startColumnNumber" : 45,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sz=(int)(Math.random() * TEST_SZ) + 1;\n  HSet<ConstObj> hs=new HSet<>(sz);\n  s.clear();\n  List<Integer> nums=genRandList(TEST_SZ);\n  for (int i=0; i < TEST_SZ; i++) {\n    int num=nums.get(i);\n    ConstObj obj=new ConstObj(java.util.Objects.hash(num),num);\n    hs.add(obj);\n    s.add(obj);\n    for (    ConstObj n : s)     hs.contains(n);\n    for (    ConstObj n : hs)     s.contains(n);\n    assertEquals(s.size(),hs.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  int sz=(int)(Math.random() * TEST_SZ) + 1;\n  HSet<ConstObj> hs=new HSet<>(sz);\n  s.clear();\n  List<Integer> nums=genRandList(TEST_SZ);\n  for (int i=0; i < TEST_SZ; i++) {\n    int num=nums.get(i);\n    ConstObj obj=new ConstObj(java.util.Objects.hash(num),num);\n    hs.add(obj);\n    s.add(obj);\n    for (    ConstObj n : s)     hs.contains(n);\n    for (    ConstObj n : hs)     s.contains(n);\n    assertEquals(s.size(),hs.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 90,
        "startColumnNumber" : 35,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashSet<ConstObj> s=new HashSet<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    int sz=(int)(Math.random() * TEST_SZ) + 1;\n    HSet<ConstObj> hs=new HSet<>(sz);\n    s.clear();\n    List<Integer> nums=genRandList(TEST_SZ);\n    for (int i=0; i < TEST_SZ; i++) {\n      int num=nums.get(i);\n      ConstObj obj=new ConstObj(java.util.Objects.hash(num),num);\n      hs.add(obj);\n      s.add(obj);\n      for (      ConstObj n : s)       hs.contains(n);\n      for (      ConstObj n : hs)       s.contains(n);\n      assertEquals(s.size(),hs.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedSetTest2(){\n  HashSet<ConstObj> s=new HashSet<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    int sz=(int)(Math.random() * TEST_SZ) + 1;\n    HSet<ConstObj> hs=new HSet<>(sz);\n    s.clear();\n    List<Integer> nums=genRandList(TEST_SZ);\n    for (int i=0; i < TEST_SZ; i++) {\n      int num=nums.get(i);\n      ConstObj obj=new ConstObj(java.util.Objects.hash(num),num);\n      hs.add(obj);\n      s.add(obj);\n      for (      ConstObj n : s)       hs.contains(n);\n      for (      ConstObj n : hs)       s.contains(n);\n      assertEquals(s.size(),hs.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 97,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 41
      },
      "nodeContext" : "HSet<ConstObj> hs=new HSet<>(sz);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.williamfiset.algorithms.datastructures.set.HSet<com.williamfiset.algorithms.datastructures.set.ConstObj>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 97,
    "startColumnNumber" : 26,
    "endLineNumber" : 97,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}