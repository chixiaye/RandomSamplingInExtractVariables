{
  "id" : 171,
  "expression" : "gsum",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/main/java/com/blankj/utilcode/util/ImageUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "gsum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 825,
      "startColumnNumber" : 27,
      "endLineNumber" : 825,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 825,
        "startColumnNumber" : 24,
        "endLineNumber" : 825,
        "endColumnNumber" : 32
      },
      "nodeContext" : "dv[gsum]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 825,
        "startColumnNumber" : 16,
        "endLineNumber" : 825,
        "endColumnNumber" : 32
      },
      "nodeContext" : "g[yi]=dv[gsum]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 825,
        "startColumnNumber" : 16,
        "endLineNumber" : 825,
        "endColumnNumber" : 33
      },
      "nodeContext" : "g[yi]=dv[gsum];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 822,
        "startColumnNumber" : 36,
        "endLineNumber" : 868,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  r[yi]=dv[rsum];\n  g[yi]=dv[gsum];\n  b[yi]=dv[bsum];\n  rsum-=routsum;\n  gsum-=goutsum;\n  bsum-=boutsum;\n  stackstart=stackpointer - radius + div;\n  sir=stack[stackstart % div];\n  routsum-=sir[0];\n  goutsum-=sir[1];\n  boutsum-=sir[2];\n  if (y == 0) {\n    vmin[x]=Math.min(x + radius + 1,wm);\n  }\n  p=pix[yw + vmin[x]];\n  sir[0]=(p & 0xff0000) >> 16;\n  sir[1]=(p & 0x00ff00) >> 8;\n  sir[2]=(p & 0x0000ff);\n  rinsum+=sir[0];\n  ginsum+=sir[1];\n  binsum+=sir[2];\n  rsum+=rinsum;\n  gsum+=ginsum;\n  bsum+=binsum;\n  stackpointer=(stackpointer + 1) % div;\n  sir=stack[(stackpointer) % div];\n  routsum+=sir[0];\n  goutsum+=sir[1];\n  boutsum+=sir[2];\n  rinsum-=sir[0];\n  ginsum-=sir[1];\n  binsum-=sir[2];\n  yi++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 822,
        "startColumnNumber" : 12,
        "endLineNumber" : 868,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (x=0; x < w; x++) {\n  r[yi]=dv[rsum];\n  g[yi]=dv[gsum];\n  b[yi]=dv[bsum];\n  rsum-=routsum;\n  gsum-=goutsum;\n  bsum-=boutsum;\n  stackstart=stackpointer - radius + div;\n  sir=stack[stackstart % div];\n  routsum-=sir[0];\n  goutsum-=sir[1];\n  boutsum-=sir[2];\n  if (y == 0) {\n    vmin[x]=Math.min(x + radius + 1,wm);\n  }\n  p=pix[yw + vmin[x]];\n  sir[0]=(p & 0xff0000) >> 16;\n  sir[1]=(p & 0x00ff00) >> 8;\n  sir[2]=(p & 0x0000ff);\n  rinsum+=sir[0];\n  ginsum+=sir[1];\n  binsum+=sir[2];\n  rsum+=rinsum;\n  gsum+=ginsum;\n  bsum+=binsum;\n  stackpointer=(stackpointer + 1) % div;\n  sir=stack[(stackpointer) % div];\n  routsum+=sir[0];\n  goutsum+=sir[1];\n  boutsum+=sir[2];\n  rinsum-=sir[0];\n  ginsum-=sir[1];\n  binsum-=sir[2];\n  yi++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 226,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2208,
        "startLineNumber" : 798,
        "startColumnNumber" : 32,
        "endLineNumber" : 870,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n  for (i=-radius; i <= radius; i++) {\n    p=pix[yi + Math.min(wm,Math.max(i,0))];\n    sir=stack[i + radius];\n    sir[0]=(p & 0xff0000) >> 16;\n    sir[1]=(p & 0x00ff00) >> 8;\n    sir[2]=(p & 0x0000ff);\n    rbs=r1 - Math.abs(i);\n    rsum+=sir[0] * rbs;\n    gsum+=sir[1] * rbs;\n    bsum+=sir[2] * rbs;\n    if (i > 0) {\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n    }\n else {\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n    }\n  }\n  stackpointer=radius;\n  for (x=0; x < w; x++) {\n    r[yi]=dv[rsum];\n    g[yi]=dv[gsum];\n    b[yi]=dv[bsum];\n    rsum-=routsum;\n    gsum-=goutsum;\n    bsum-=boutsum;\n    stackstart=stackpointer - radius + div;\n    sir=stack[stackstart % div];\n    routsum-=sir[0];\n    goutsum-=sir[1];\n    boutsum-=sir[2];\n    if (y == 0) {\n      vmin[x]=Math.min(x + radius + 1,wm);\n    }\n    p=pix[yw + vmin[x]];\n    sir[0]=(p & 0xff0000) >> 16;\n    sir[1]=(p & 0x00ff00) >> 8;\n    sir[2]=(p & 0x0000ff);\n    rinsum+=sir[0];\n    ginsum+=sir[1];\n    binsum+=sir[2];\n    rsum+=rinsum;\n    gsum+=ginsum;\n    bsum+=binsum;\n    stackpointer=(stackpointer + 1) % div;\n    sir=stack[(stackpointer) % div];\n    routsum+=sir[0];\n    goutsum+=sir[1];\n    boutsum+=sir[2];\n    rinsum-=sir[0];\n    ginsum-=sir[1];\n    binsum-=sir[2];\n    yi++;\n  }\n  yw+=w;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 396,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2232,
        "startLineNumber" : 798,
        "startColumnNumber" : 8,
        "endLineNumber" : 870,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (y=0; y < h; y++) {\n  rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n  for (i=-radius; i <= radius; i++) {\n    p=pix[yi + Math.min(wm,Math.max(i,0))];\n    sir=stack[i + radius];\n    sir[0]=(p & 0xff0000) >> 16;\n    sir[1]=(p & 0x00ff00) >> 8;\n    sir[2]=(p & 0x0000ff);\n    rbs=r1 - Math.abs(i);\n    rsum+=sir[0] * rbs;\n    gsum+=sir[1] * rbs;\n    bsum+=sir[2] * rbs;\n    if (i > 0) {\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n    }\n else {\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n    }\n  }\n  stackpointer=radius;\n  for (x=0; x < w; x++) {\n    r[yi]=dv[rsum];\n    g[yi]=dv[gsum];\n    b[yi]=dv[bsum];\n    rsum-=routsum;\n    gsum-=goutsum;\n    bsum-=boutsum;\n    stackstart=stackpointer - radius + div;\n    sir=stack[stackstart % div];\n    routsum-=sir[0];\n    goutsum-=sir[1];\n    boutsum-=sir[2];\n    if (y == 0) {\n      vmin[x]=Math.min(x + radius + 1,wm);\n    }\n    p=pix[yw + vmin[x]];\n    sir[0]=(p & 0xff0000) >> 16;\n    sir[1]=(p & 0x00ff00) >> 8;\n    sir[2]=(p & 0x0000ff);\n    rinsum+=sir[0];\n    ginsum+=sir[1];\n    binsum+=sir[2];\n    rsum+=rinsum;\n    gsum+=ginsum;\n    bsum+=binsum;\n    stackpointer=(stackpointer + 1) % div;\n    sir=stack[(stackpointer) % div];\n    routsum+=sir[0];\n    goutsum+=sir[1];\n    boutsum+=sir[2];\n    rinsum-=sir[0];\n    ginsum-=sir[1];\n    binsum-=sir[2];\n    yi++;\n  }\n  yw+=w;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5725,
        "startLineNumber" : 751,
        "startColumnNumber" : 94,
        "endLineNumber" : 953,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Bitmap ret;\n  if (recycle) {\n    ret=src;\n  }\n else {\n    ret=src.copy(src.getConfig(),true);\n  }\n  if (radius < 1) {\n    return null;\n  }\n  int w=ret.getWidth();\n  int h=ret.getHeight();\n  int[] pix=new int[w * h];\n  ret.getPixels(pix,0,w,0,0,w,h);\n  int wm=w - 1;\n  int hm=h - 1;\n  int wh=w * h;\n  int div=radius + radius + 1;\n  int r[]=new int[wh];\n  int g[]=new int[wh];\n  int b[]=new int[wh];\n  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n  int vmin[]=new int[Math.max(w,h)];\n  int divsum=(div + 1) >> 1;\n  divsum*=divsum;\n  int dv[]=new int[256 * divsum];\n  for (i=0; i < 256 * divsum; i++) {\n    dv[i]=(i / divsum);\n  }\n  yw=yi=0;\n  int[][] stack=new int[div][3];\n  int stackpointer;\n  int stackstart;\n  int[] sir;\n  int rbs;\n  int r1=radius + 1;\n  int routsum, goutsum, boutsum;\n  int rinsum, ginsum, binsum;\n  for (y=0; y < h; y++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    for (i=-radius; i <= radius; i++) {\n      p=pix[yi + Math.min(wm,Math.max(i,0))];\n      sir=stack[i + radius];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rbs=r1 - Math.abs(i);\n      rsum+=sir[0] * rbs;\n      gsum+=sir[1] * rbs;\n      bsum+=sir[2] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n    }\n    stackpointer=radius;\n    for (x=0; x < w; x++) {\n      r[yi]=dv[rsum];\n      g[yi]=dv[gsum];\n      b[yi]=dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (y == 0) {\n        vmin[x]=Math.min(x + radius + 1,wm);\n      }\n      p=pix[yw + vmin[x]];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[(stackpointer) % div];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi++;\n    }\n    yw+=w;\n  }\n  for (x=0; x < w; x++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    yp=-radius * w;\n    for (i=-radius; i <= radius; i++) {\n      yi=Math.max(0,yp) + x;\n      sir=stack[i + radius];\n      sir[0]=r[yi];\n      sir[1]=g[yi];\n      sir[2]=b[yi];\n      rbs=r1 - Math.abs(i);\n      rsum+=r[yi] * rbs;\n      gsum+=g[yi] * rbs;\n      bsum+=b[yi] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n      if (i < hm) {\n        yp+=w;\n      }\n    }\n    yi=x;\n    stackpointer=radius;\n    for (y=0; y < h; y++) {\n      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (x == 0) {\n        vmin[y]=Math.min(y + r1,hm) * w;\n      }\n      p=x + vmin[y];\n      sir[0]=r[p];\n      sir[1]=g[p];\n      sir[2]=b[p];\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[stackpointer];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi+=w;\n    }\n  }\n  ret.setPixels(pix,0,w,0,0,w,h);\n  return ret;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1091,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5962,
        "startLineNumber" : 743,
        "startColumnNumber" : 4,
        "endLineNumber" : 953,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * stack模糊图片\n * @param src     源图片\n * @param radius  模糊半径\n * @param recycle 是否回收\n * @return stack模糊后的图片\n */\npublic static Bitmap stackBlur(final Bitmap src,final int radius,final boolean recycle){\n  Bitmap ret;\n  if (recycle) {\n    ret=src;\n  }\n else {\n    ret=src.copy(src.getConfig(),true);\n  }\n  if (radius < 1) {\n    return null;\n  }\n  int w=ret.getWidth();\n  int h=ret.getHeight();\n  int[] pix=new int[w * h];\n  ret.getPixels(pix,0,w,0,0,w,h);\n  int wm=w - 1;\n  int hm=h - 1;\n  int wh=w * h;\n  int div=radius + radius + 1;\n  int r[]=new int[wh];\n  int g[]=new int[wh];\n  int b[]=new int[wh];\n  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n  int vmin[]=new int[Math.max(w,h)];\n  int divsum=(div + 1) >> 1;\n  divsum*=divsum;\n  int dv[]=new int[256 * divsum];\n  for (i=0; i < 256 * divsum; i++) {\n    dv[i]=(i / divsum);\n  }\n  yw=yi=0;\n  int[][] stack=new int[div][3];\n  int stackpointer;\n  int stackstart;\n  int[] sir;\n  int rbs;\n  int r1=radius + 1;\n  int routsum, goutsum, boutsum;\n  int rinsum, ginsum, binsum;\n  for (y=0; y < h; y++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    for (i=-radius; i <= radius; i++) {\n      p=pix[yi + Math.min(wm,Math.max(i,0))];\n      sir=stack[i + radius];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rbs=r1 - Math.abs(i);\n      rsum+=sir[0] * rbs;\n      gsum+=sir[1] * rbs;\n      bsum+=sir[2] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n    }\n    stackpointer=radius;\n    for (x=0; x < w; x++) {\n      r[yi]=dv[rsum];\n      g[yi]=dv[gsum];\n      b[yi]=dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (y == 0) {\n        vmin[x]=Math.min(x + radius + 1,wm);\n      }\n      p=pix[yw + vmin[x]];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[(stackpointer) % div];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi++;\n    }\n    yw+=w;\n  }\n  for (x=0; x < w; x++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    yp=-radius * w;\n    for (i=-radius; i <= radius; i++) {\n      yi=Math.max(0,yp) + x;\n      sir=stack[i + radius];\n      sir[0]=r[yi];\n      sir[1]=g[yi];\n      sir[2]=b[yi];\n      rbs=r1 - Math.abs(i);\n      rsum+=r[yi] * rbs;\n      gsum+=g[yi] * rbs;\n      bsum+=b[yi] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n      if (i < hm) {\n        yp+=w;\n      }\n    }\n    yi=x;\n    stackpointer=radius;\n    for (y=0; y < h; y++) {\n      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (x == 0) {\n        vmin[y]=Math.min(y + r1,hm) * w;\n      }\n      p=x + vmin[y];\n      sir[0]=r[p];\n      sir[1]=g[p];\n      sir[2]=b[p];\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[stackpointer];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi+=w;\n    }\n  }\n  ret.setPixels(pix,0,w,0,0,w,h);\n  return ret;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1111,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 825,
        "startColumnNumber" : 16,
        "endLineNumber" : 825,
        "endColumnNumber" : 33
      },
      "nodeContext" : "g[yi]=dv[gsum];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "gsum",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 907,
      "startColumnNumber" : 74,
      "endLineNumber" : 907,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 907,
        "startColumnNumber" : 71,
        "endLineNumber" : 907,
        "endColumnNumber" : 79
      },
      "nodeContext" : "dv[gsum]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 907,
        "startColumnNumber" : 71,
        "endLineNumber" : 907,
        "endColumnNumber" : 84
      },
      "nodeContext" : "dv[gsum] << 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 907,
        "startColumnNumber" : 70,
        "endLineNumber" : 907,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(dv[gsum] << 8)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 907,
        "startColumnNumber" : 26,
        "endLineNumber" : 907,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 907,
        "startColumnNumber" : 16,
        "endLineNumber" : 907,
        "endColumnNumber" : 96
      },
      "nodeContext" : "pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 907,
        "startColumnNumber" : 16,
        "endLineNumber" : 907,
        "endColumnNumber" : 97
      },
      "nodeContext" : "pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1261,
        "startLineNumber" : 905,
        "startColumnNumber" : 36,
        "endLineNumber" : 949,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n  rsum-=routsum;\n  gsum-=goutsum;\n  bsum-=boutsum;\n  stackstart=stackpointer - radius + div;\n  sir=stack[stackstart % div];\n  routsum-=sir[0];\n  goutsum-=sir[1];\n  boutsum-=sir[2];\n  if (x == 0) {\n    vmin[y]=Math.min(y + r1,hm) * w;\n  }\n  p=x + vmin[y];\n  sir[0]=r[p];\n  sir[1]=g[p];\n  sir[2]=b[p];\n  rinsum+=sir[0];\n  ginsum+=sir[1];\n  binsum+=sir[2];\n  rsum+=rinsum;\n  gsum+=ginsum;\n  bsum+=binsum;\n  stackpointer=(stackpointer + 1) % div;\n  sir=stack[stackpointer];\n  routsum+=sir[0];\n  goutsum+=sir[1];\n  boutsum+=sir[2];\n  rinsum-=sir[0];\n  ginsum-=sir[1];\n  binsum-=sir[2];\n  yi+=w;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1285,
        "startLineNumber" : 905,
        "startColumnNumber" : 12,
        "endLineNumber" : 949,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (y=0; y < h; y++) {\n  pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n  rsum-=routsum;\n  gsum-=goutsum;\n  bsum-=boutsum;\n  stackstart=stackpointer - radius + div;\n  sir=stack[stackstart % div];\n  routsum-=sir[0];\n  goutsum-=sir[1];\n  boutsum-=sir[2];\n  if (x == 0) {\n    vmin[y]=Math.min(y + r1,hm) * w;\n  }\n  p=x + vmin[y];\n  sir[0]=r[p];\n  sir[1]=g[p];\n  sir[2]=b[p];\n  rinsum+=sir[0];\n  ginsum+=sir[1];\n  binsum+=sir[2];\n  rsum+=rinsum;\n  gsum+=ginsum;\n  bsum+=binsum;\n  stackpointer=(stackpointer + 1) % div;\n  sir=stack[stackpointer];\n  routsum+=sir[0];\n  goutsum+=sir[1];\n  boutsum+=sir[2];\n  rinsum-=sir[0];\n  ginsum-=sir[1];\n  binsum-=sir[2];\n  yi+=w;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 219,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2267,
        "startLineNumber" : 871,
        "startColumnNumber" : 32,
        "endLineNumber" : 950,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n  yp=-radius * w;\n  for (i=-radius; i <= radius; i++) {\n    yi=Math.max(0,yp) + x;\n    sir=stack[i + radius];\n    sir[0]=r[yi];\n    sir[1]=g[yi];\n    sir[2]=b[yi];\n    rbs=r1 - Math.abs(i);\n    rsum+=r[yi] * rbs;\n    gsum+=g[yi] * rbs;\n    bsum+=b[yi] * rbs;\n    if (i > 0) {\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n    }\n else {\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n    }\n    if (i < hm) {\n      yp+=w;\n    }\n  }\n  yi=x;\n  stackpointer=radius;\n  for (y=0; y < h; y++) {\n    pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n    rsum-=routsum;\n    gsum-=goutsum;\n    bsum-=boutsum;\n    stackstart=stackpointer - radius + div;\n    sir=stack[stackstart % div];\n    routsum-=sir[0];\n    goutsum-=sir[1];\n    boutsum-=sir[2];\n    if (x == 0) {\n      vmin[y]=Math.min(y + r1,hm) * w;\n    }\n    p=x + vmin[y];\n    sir[0]=r[p];\n    sir[1]=g[p];\n    sir[2]=b[p];\n    rinsum+=sir[0];\n    ginsum+=sir[1];\n    binsum+=sir[2];\n    rsum+=rinsum;\n    gsum+=ginsum;\n    bsum+=binsum;\n    stackpointer=(stackpointer + 1) % div;\n    sir=stack[stackpointer];\n    routsum+=sir[0];\n    goutsum+=sir[1];\n    boutsum+=sir[2];\n    rinsum-=sir[0];\n    ginsum-=sir[1];\n    binsum-=sir[2];\n    yi+=w;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 392,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 871,
        "startColumnNumber" : 8,
        "endLineNumber" : 950,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (x=0; x < w; x++) {\n  rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n  yp=-radius * w;\n  for (i=-radius; i <= radius; i++) {\n    yi=Math.max(0,yp) + x;\n    sir=stack[i + radius];\n    sir[0]=r[yi];\n    sir[1]=g[yi];\n    sir[2]=b[yi];\n    rbs=r1 - Math.abs(i);\n    rsum+=r[yi] * rbs;\n    gsum+=g[yi] * rbs;\n    bsum+=b[yi] * rbs;\n    if (i > 0) {\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n    }\n else {\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n    }\n    if (i < hm) {\n      yp+=w;\n    }\n  }\n  yi=x;\n  stackpointer=radius;\n  for (y=0; y < h; y++) {\n    pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n    rsum-=routsum;\n    gsum-=goutsum;\n    bsum-=boutsum;\n    stackstart=stackpointer - radius + div;\n    sir=stack[stackstart % div];\n    routsum-=sir[0];\n    goutsum-=sir[1];\n    boutsum-=sir[2];\n    if (x == 0) {\n      vmin[y]=Math.min(y + r1,hm) * w;\n    }\n    p=x + vmin[y];\n    sir[0]=r[p];\n    sir[1]=g[p];\n    sir[2]=b[p];\n    rinsum+=sir[0];\n    ginsum+=sir[1];\n    binsum+=sir[2];\n    rsum+=rinsum;\n    gsum+=ginsum;\n    bsum+=binsum;\n    stackpointer=(stackpointer + 1) % div;\n    sir=stack[stackpointer];\n    routsum+=sir[0];\n    goutsum+=sir[1];\n    boutsum+=sir[2];\n    rinsum-=sir[0];\n    ginsum-=sir[1];\n    binsum-=sir[2];\n    yi+=w;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 401,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5725,
        "startLineNumber" : 751,
        "startColumnNumber" : 94,
        "endLineNumber" : 953,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Bitmap ret;\n  if (recycle) {\n    ret=src;\n  }\n else {\n    ret=src.copy(src.getConfig(),true);\n  }\n  if (radius < 1) {\n    return null;\n  }\n  int w=ret.getWidth();\n  int h=ret.getHeight();\n  int[] pix=new int[w * h];\n  ret.getPixels(pix,0,w,0,0,w,h);\n  int wm=w - 1;\n  int hm=h - 1;\n  int wh=w * h;\n  int div=radius + radius + 1;\n  int r[]=new int[wh];\n  int g[]=new int[wh];\n  int b[]=new int[wh];\n  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n  int vmin[]=new int[Math.max(w,h)];\n  int divsum=(div + 1) >> 1;\n  divsum*=divsum;\n  int dv[]=new int[256 * divsum];\n  for (i=0; i < 256 * divsum; i++) {\n    dv[i]=(i / divsum);\n  }\n  yw=yi=0;\n  int[][] stack=new int[div][3];\n  int stackpointer;\n  int stackstart;\n  int[] sir;\n  int rbs;\n  int r1=radius + 1;\n  int routsum, goutsum, boutsum;\n  int rinsum, ginsum, binsum;\n  for (y=0; y < h; y++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    for (i=-radius; i <= radius; i++) {\n      p=pix[yi + Math.min(wm,Math.max(i,0))];\n      sir=stack[i + radius];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rbs=r1 - Math.abs(i);\n      rsum+=sir[0] * rbs;\n      gsum+=sir[1] * rbs;\n      bsum+=sir[2] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n    }\n    stackpointer=radius;\n    for (x=0; x < w; x++) {\n      r[yi]=dv[rsum];\n      g[yi]=dv[gsum];\n      b[yi]=dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (y == 0) {\n        vmin[x]=Math.min(x + radius + 1,wm);\n      }\n      p=pix[yw + vmin[x]];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[(stackpointer) % div];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi++;\n    }\n    yw+=w;\n  }\n  for (x=0; x < w; x++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    yp=-radius * w;\n    for (i=-radius; i <= radius; i++) {\n      yi=Math.max(0,yp) + x;\n      sir=stack[i + radius];\n      sir[0]=r[yi];\n      sir[1]=g[yi];\n      sir[2]=b[yi];\n      rbs=r1 - Math.abs(i);\n      rsum+=r[yi] * rbs;\n      gsum+=g[yi] * rbs;\n      bsum+=b[yi] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n      if (i < hm) {\n        yp+=w;\n      }\n    }\n    yi=x;\n    stackpointer=radius;\n    for (y=0; y < h; y++) {\n      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (x == 0) {\n        vmin[y]=Math.min(y + r1,hm) * w;\n      }\n      p=x + vmin[y];\n      sir[0]=r[p];\n      sir[1]=g[p];\n      sir[2]=b[p];\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[stackpointer];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi+=w;\n    }\n  }\n  ret.setPixels(pix,0,w,0,0,w,h);\n  return ret;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1091,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5962,
        "startLineNumber" : 743,
        "startColumnNumber" : 4,
        "endLineNumber" : 953,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * stack模糊图片\n * @param src     源图片\n * @param radius  模糊半径\n * @param recycle 是否回收\n * @return stack模糊后的图片\n */\npublic static Bitmap stackBlur(final Bitmap src,final int radius,final boolean recycle){\n  Bitmap ret;\n  if (recycle) {\n    ret=src;\n  }\n else {\n    ret=src.copy(src.getConfig(),true);\n  }\n  if (radius < 1) {\n    return null;\n  }\n  int w=ret.getWidth();\n  int h=ret.getHeight();\n  int[] pix=new int[w * h];\n  ret.getPixels(pix,0,w,0,0,w,h);\n  int wm=w - 1;\n  int hm=h - 1;\n  int wh=w * h;\n  int div=radius + radius + 1;\n  int r[]=new int[wh];\n  int g[]=new int[wh];\n  int b[]=new int[wh];\n  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;\n  int vmin[]=new int[Math.max(w,h)];\n  int divsum=(div + 1) >> 1;\n  divsum*=divsum;\n  int dv[]=new int[256 * divsum];\n  for (i=0; i < 256 * divsum; i++) {\n    dv[i]=(i / divsum);\n  }\n  yw=yi=0;\n  int[][] stack=new int[div][3];\n  int stackpointer;\n  int stackstart;\n  int[] sir;\n  int rbs;\n  int r1=radius + 1;\n  int routsum, goutsum, boutsum;\n  int rinsum, ginsum, binsum;\n  for (y=0; y < h; y++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    for (i=-radius; i <= radius; i++) {\n      p=pix[yi + Math.min(wm,Math.max(i,0))];\n      sir=stack[i + radius];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rbs=r1 - Math.abs(i);\n      rsum+=sir[0] * rbs;\n      gsum+=sir[1] * rbs;\n      bsum+=sir[2] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n    }\n    stackpointer=radius;\n    for (x=0; x < w; x++) {\n      r[yi]=dv[rsum];\n      g[yi]=dv[gsum];\n      b[yi]=dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (y == 0) {\n        vmin[x]=Math.min(x + radius + 1,wm);\n      }\n      p=pix[yw + vmin[x]];\n      sir[0]=(p & 0xff0000) >> 16;\n      sir[1]=(p & 0x00ff00) >> 8;\n      sir[2]=(p & 0x0000ff);\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[(stackpointer) % div];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi++;\n    }\n    yw+=w;\n  }\n  for (x=0; x < w; x++) {\n    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;\n    yp=-radius * w;\n    for (i=-radius; i <= radius; i++) {\n      yi=Math.max(0,yp) + x;\n      sir=stack[i + radius];\n      sir[0]=r[yi];\n      sir[1]=g[yi];\n      sir[2]=b[yi];\n      rbs=r1 - Math.abs(i);\n      rsum+=r[yi] * rbs;\n      gsum+=g[yi] * rbs;\n      bsum+=b[yi] * rbs;\n      if (i > 0) {\n        rinsum+=sir[0];\n        ginsum+=sir[1];\n        binsum+=sir[2];\n      }\n else {\n        routsum+=sir[0];\n        goutsum+=sir[1];\n        boutsum+=sir[2];\n      }\n      if (i < hm) {\n        yp+=w;\n      }\n    }\n    yi=x;\n    stackpointer=radius;\n    for (y=0; y < h; y++) {\n      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n      rsum-=routsum;\n      gsum-=goutsum;\n      bsum-=boutsum;\n      stackstart=stackpointer - radius + div;\n      sir=stack[stackstart % div];\n      routsum-=sir[0];\n      goutsum-=sir[1];\n      boutsum-=sir[2];\n      if (x == 0) {\n        vmin[y]=Math.min(y + r1,hm) * w;\n      }\n      p=x + vmin[y];\n      sir[0]=r[p];\n      sir[1]=g[p];\n      sir[2]=b[p];\n      rinsum+=sir[0];\n      ginsum+=sir[1];\n      binsum+=sir[2];\n      rsum+=rinsum;\n      gsum+=ginsum;\n      bsum+=binsum;\n      stackpointer=(stackpointer + 1) % div;\n      sir=stack[stackpointer];\n      routsum+=sir[0];\n      goutsum+=sir[1];\n      boutsum+=sir[2];\n      rinsum-=sir[0];\n      ginsum-=sir[1];\n      binsum-=sir[2];\n      yi+=w;\n    }\n  }\n  ret.setPixels(pix,0,w,0,0,w,h);\n  return ret;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1111,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 907,
        "startColumnNumber" : 16,
        "endLineNumber" : 907,
        "endColumnNumber" : 97
      },
      "nodeContext" : "pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 825,
    "startColumnNumber" : 27,
    "endLineNumber" : 825,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 907,
    "startColumnNumber" : 74,
    "endLineNumber" : 907,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  } ]
}