{
  "id" : 312,
  "expression" : "CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING))",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.editors.sql/src/org/jkiss/dbeaver/ui/editors/sql/convert/impl/SourceCodeSQLConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 58,
      "startLineNumber" : 62,
      "startColumnNumber" : 37,
      "endLineNumber" : 62,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 96
      },
      "nodeContext" : "boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1023,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String sourceText=document.get(startPos,length);\n  String[] sourceLines;\n  if (sourceText.contains(\"\\n\") || sourceText.contains(\"\\r\")) {\n    sourceLines=sourceText.split(\"[\\\\n\\\\r]+\");\n  }\n else {\n    sourceLines=new String[]{sourceText};\n  }\n  boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n  if (!keepFormatting) {\n    for (int i=0; i < sourceLines.length; i++) {\n      sourceLines[i]=sourceLines[i].trim();\n    }\n  }\n  String lineDelimiter=CommonUtils.toString(options.get(OPTION_LINE_DELIMITER),DEF_LINE_DELIMITER);\n  if (CommonUtils.isEmpty(lineDelimiter)) {\n    lineDelimiter=\" \";\n  }\n  StringBuilder result=new StringBuilder();\n  convertSourceLines(result,sourceLines,lineDelimiter,options);\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1119,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String sourceText=document.get(startPos,length);\n  String[] sourceLines;\n  if (sourceText.contains(\"\\n\") || sourceText.contains(\"\\r\")) {\n    sourceLines=sourceText.split(\"[\\\\n\\\\r]+\");\n  }\n else {\n    sourceLines=new String[]{sourceText};\n  }\n  boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n  if (!keepFormatting) {\n    for (int i=0; i < sourceLines.length; i++) {\n      sourceLines[i]=sourceLines[i].trim();\n    }\n  }\n  String lineDelimiter=CommonUtils.toString(options.get(OPTION_LINE_DELIMITER),DEF_LINE_DELIMITER);\n  if (CommonUtils.isEmpty(lineDelimiter)) {\n    lineDelimiter=\" \";\n  }\n  StringBuilder result=new StringBuilder();\n  convertSourceLines(result,sourceLines,lineDelimiter,options);\n  return result.toString();\n}\n catch (BadLocationException e) {\n  log.error(e);\n  return \"\";\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 142,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    String sourceText=document.get(startPos,length);\n    String[] sourceLines;\n    if (sourceText.contains(\"\\n\") || sourceText.contains(\"\\r\")) {\n      sourceLines=sourceText.split(\"[\\\\n\\\\r]+\");\n    }\n else {\n      sourceLines=new String[]{sourceText};\n    }\n    boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n    if (!keepFormatting) {\n      for (int i=0; i < sourceLines.length; i++) {\n        sourceLines[i]=sourceLines[i].trim();\n      }\n    }\n    String lineDelimiter=CommonUtils.toString(options.get(OPTION_LINE_DELIMITER),DEF_LINE_DELIMITER);\n    if (CommonUtils.isEmpty(lineDelimiter)) {\n      lineDelimiter=\" \";\n    }\n    StringBuilder result=new StringBuilder();\n    convertSourceLines(result,sourceLines,lineDelimiter,options);\n    return result.toString();\n  }\n catch (  BadLocationException e) {\n    log.error(e);\n    return \"\";\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1477,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@NotNull @Override public String convertText(@NotNull SQLDialect dialect,@NotNull SQLSyntaxManager syntaxManager,@NotNull SQLRuleScanner ruleManager,@NotNull IDocument document,int startPos,int length,@NotNull Map<String,Object> options){\n  try {\n    String sourceText=document.get(startPos,length);\n    String[] sourceLines;\n    if (sourceText.contains(\"\\n\") || sourceText.contains(\"\\r\")) {\n      sourceLines=sourceText.split(\"[\\\\n\\\\r]+\");\n    }\n else {\n      sourceLines=new String[]{sourceText};\n    }\n    boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n    if (!keepFormatting) {\n      for (int i=0; i < sourceLines.length; i++) {\n        sourceLines[i]=sourceLines[i].trim();\n      }\n    }\n    String lineDelimiter=CommonUtils.toString(options.get(OPTION_LINE_DELIMITER),DEF_LINE_DELIMITER);\n    if (CommonUtils.isEmpty(lineDelimiter)) {\n      lineDelimiter=\" \";\n    }\n    StringBuilder result=new StringBuilder();\n    convertSourceLines(result,sourceLines,lineDelimiter,options);\n    return result.toString();\n  }\n catch (  BadLocationException e) {\n    log.error(e);\n    return \"\";\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 96
      },
      "nodeContext" : "boolean keepFormatting=CommonUtils.toBoolean(options.get(OPTION_KEEP_FORMATTING));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 58,
    "startLineNumber" : 62,
    "startColumnNumber" : 37,
    "endLineNumber" : 62,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}