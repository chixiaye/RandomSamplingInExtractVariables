{
  "id" : 490,
  "expression" : "new MethodNode(this,mth,true)",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new MethodNode(this,mth,true)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 92,
      "startColumnNumber" : 17,
      "endLineNumber" : 92,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 92,
        "startColumnNumber" : 5,
        "endLineNumber" : 92,
        "endColumnNumber" : 49
      },
      "nodeContext" : "methods.add(new MethodNode(this,mth,true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 92,
        "startColumnNumber" : 5,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "methods.add(new MethodNode(this,mth,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 91,
        "startColumnNumber" : 51,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  methods.add(new MethodNode(this,mth,true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Method mth : clsData.getVirtualMethods()) {\n  methods.add(new MethodNode(this,mth,true));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 774,
        "startLineNumber" : 80,
        "startColumnNumber" : 38,
        "endLineNumber" : 102,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ClassData clsData=dex.readClassData(cls);\n  int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n  int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n  methods=new ArrayList<>(mthsCount);\n  fields=new ArrayList<>(fieldsCount);\n  for (  Method mth : clsData.getDirectMethods()) {\n    methods.add(new MethodNode(this,mth,false));\n  }\n  for (  Method mth : clsData.getVirtualMethods()) {\n    methods.add(new MethodNode(this,mth,true));\n  }\n  for (  Field f : clsData.getStaticFields()) {\n    fields.add(new FieldNode(this,f));\n  }\n  loadStaticValues(cls,fields);\n  for (  Field f : clsData.getInstanceFields()) {\n    fields.add(new FieldNode(this,f));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 80,
        "startColumnNumber" : 3,
        "endLineNumber" : 105,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (cls.getClassDataOffset() != 0) {\n  ClassData clsData=dex.readClassData(cls);\n  int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n  int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n  methods=new ArrayList<>(mthsCount);\n  fields=new ArrayList<>(fieldsCount);\n  for (  Method mth : clsData.getDirectMethods()) {\n    methods.add(new MethodNode(this,mth,false));\n  }\n  for (  Method mth : clsData.getVirtualMethods()) {\n    methods.add(new MethodNode(this,mth,true));\n  }\n  for (  Field f : clsData.getStaticFields()) {\n    fields.add(new FieldNode(this,f));\n  }\n  loadStaticValues(cls,fields);\n  for (  Field f : clsData.getInstanceFields()) {\n    fields.add(new FieldNode(this,f));\n  }\n}\n else {\n  methods=Collections.emptyList();\n  fields=Collections.emptyList();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1901,
        "startLineNumber" : 70,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {\n    this.superClass=null;\n  }\n else {\n    this.superClass=dex.getType(cls.getSupertypeIndex());\n  }\n  this.interfaces=new ArrayList<>(cls.getInterfaces().length);\n  for (  short interfaceIdx : cls.getInterfaces()) {\n    this.interfaces.add(dex.getType(interfaceIdx));\n  }\n  if (cls.getClassDataOffset() != 0) {\n    ClassData clsData=dex.readClassData(cls);\n    int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n    int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n    methods=new ArrayList<>(mthsCount);\n    fields=new ArrayList<>(fieldsCount);\n    for (    Method mth : clsData.getDirectMethods()) {\n      methods.add(new MethodNode(this,mth,false));\n    }\n    for (    Method mth : clsData.getVirtualMethods()) {\n      methods.add(new MethodNode(this,mth,true));\n    }\n    for (    Field f : clsData.getStaticFields()) {\n      fields.add(new FieldNode(this,f));\n    }\n    loadStaticValues(cls,fields);\n    for (    Field f : clsData.getInstanceFields()) {\n      fields.add(new FieldNode(this,f));\n    }\n  }\n else {\n    methods=Collections.emptyList();\n    fields=Collections.emptyList();\n  }\n  loadAnnotations(cls);\n  parseClassSignature();\n  setFieldsTypesFromSignature();\n  int sfIdx=cls.getSourceFileIndex();\n  if (sfIdx != DexNode.NO_INDEX) {\n    String fileName=dex.getString(sfIdx);\n    addSourceFilenameAttr(fileName);\n  }\n  int accFlagsValue;\n  Annotation a=getAnnotation(Consts.DALVIK_INNER_CLASS);\n  if (a != null) {\n    accFlagsValue=(Integer)a.getValues().get(\"accessFlags\");\n  }\n else {\n    accFlagsValue=cls.getAccessFlags();\n  }\n  this.accessFlags=new AccessInfo(accFlagsValue,AFType.CLASS);\n  markAnonymousClass(this);\n  buildCache();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {\n    this.superClass=null;\n  }\n else {\n    this.superClass=dex.getType(cls.getSupertypeIndex());\n  }\n  this.interfaces=new ArrayList<>(cls.getInterfaces().length);\n  for (  short interfaceIdx : cls.getInterfaces()) {\n    this.interfaces.add(dex.getType(interfaceIdx));\n  }\n  if (cls.getClassDataOffset() != 0) {\n    ClassData clsData=dex.readClassData(cls);\n    int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n    int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n    methods=new ArrayList<>(mthsCount);\n    fields=new ArrayList<>(fieldsCount);\n    for (    Method mth : clsData.getDirectMethods()) {\n      methods.add(new MethodNode(this,mth,false));\n    }\n    for (    Method mth : clsData.getVirtualMethods()) {\n      methods.add(new MethodNode(this,mth,true));\n    }\n    for (    Field f : clsData.getStaticFields()) {\n      fields.add(new FieldNode(this,f));\n    }\n    loadStaticValues(cls,fields);\n    for (    Field f : clsData.getInstanceFields()) {\n      fields.add(new FieldNode(this,f));\n    }\n  }\n else {\n    methods=Collections.emptyList();\n    fields=Collections.emptyList();\n  }\n  loadAnnotations(cls);\n  parseClassSignature();\n  setFieldsTypesFromSignature();\n  int sfIdx=cls.getSourceFileIndex();\n  if (sfIdx != DexNode.NO_INDEX) {\n    String fileName=dex.getString(sfIdx);\n    addSourceFilenameAttr(fileName);\n  }\n  int accFlagsValue;\n  Annotation a=getAnnotation(Consts.DALVIK_INNER_CLASS);\n  if (a != null) {\n    accFlagsValue=(Integer)a.getValues().get(\"accessFlags\");\n  }\n else {\n    accFlagsValue=cls.getAccessFlags();\n  }\n  this.accessFlags=new AccessInfo(accFlagsValue,AFType.CLASS);\n  markAnonymousClass(this);\n  buildCache();\n}\n catch (Exception e) {\n  throw new JadxRuntimeException(\"Error decode class: \" + clsInfo,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 323,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2089,
        "startLineNumber" : 67,
        "startColumnNumber" : 45,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.dex=dex;\n  this.clsInfo=ClassInfo.fromDex(dex,cls.getTypeIndex());\n  try {\n    if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {\n      this.superClass=null;\n    }\n else {\n      this.superClass=dex.getType(cls.getSupertypeIndex());\n    }\n    this.interfaces=new ArrayList<>(cls.getInterfaces().length);\n    for (    short interfaceIdx : cls.getInterfaces()) {\n      this.interfaces.add(dex.getType(interfaceIdx));\n    }\n    if (cls.getClassDataOffset() != 0) {\n      ClassData clsData=dex.readClassData(cls);\n      int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n      int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n      methods=new ArrayList<>(mthsCount);\n      fields=new ArrayList<>(fieldsCount);\n      for (      Method mth : clsData.getDirectMethods()) {\n        methods.add(new MethodNode(this,mth,false));\n      }\n      for (      Method mth : clsData.getVirtualMethods()) {\n        methods.add(new MethodNode(this,mth,true));\n      }\n      for (      Field f : clsData.getStaticFields()) {\n        fields.add(new FieldNode(this,f));\n      }\n      loadStaticValues(cls,fields);\n      for (      Field f : clsData.getInstanceFields()) {\n        fields.add(new FieldNode(this,f));\n      }\n    }\n else {\n      methods=Collections.emptyList();\n      fields=Collections.emptyList();\n    }\n    loadAnnotations(cls);\n    parseClassSignature();\n    setFieldsTypesFromSignature();\n    int sfIdx=cls.getSourceFileIndex();\n    if (sfIdx != DexNode.NO_INDEX) {\n      String fileName=dex.getString(sfIdx);\n      addSourceFilenameAttr(fileName);\n    }\n    int accFlagsValue;\n    Annotation a=getAnnotation(Consts.DALVIK_INNER_CLASS);\n    if (a != null) {\n      accFlagsValue=(Integer)a.getValues().get(\"accessFlags\");\n    }\n else {\n      accFlagsValue=cls.getAccessFlags();\n    }\n    this.accessFlags=new AccessInfo(accFlagsValue,AFType.CLASS);\n    markAnonymousClass(this);\n    buildCache();\n  }\n catch (  Exception e) {\n    throw new JadxRuntimeException(\"Error decode class: \" + clsInfo,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2133,
        "startLineNumber" : 67,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public ClassNode(DexNode dex,ClassDef cls){\n  this.dex=dex;\n  this.clsInfo=ClassInfo.fromDex(dex,cls.getTypeIndex());\n  try {\n    if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {\n      this.superClass=null;\n    }\n else {\n      this.superClass=dex.getType(cls.getSupertypeIndex());\n    }\n    this.interfaces=new ArrayList<>(cls.getInterfaces().length);\n    for (    short interfaceIdx : cls.getInterfaces()) {\n      this.interfaces.add(dex.getType(interfaceIdx));\n    }\n    if (cls.getClassDataOffset() != 0) {\n      ClassData clsData=dex.readClassData(cls);\n      int mthsCount=clsData.getDirectMethods().length + clsData.getVirtualMethods().length;\n      int fieldsCount=clsData.getStaticFields().length + clsData.getInstanceFields().length;\n      methods=new ArrayList<>(mthsCount);\n      fields=new ArrayList<>(fieldsCount);\n      for (      Method mth : clsData.getDirectMethods()) {\n        methods.add(new MethodNode(this,mth,false));\n      }\n      for (      Method mth : clsData.getVirtualMethods()) {\n        methods.add(new MethodNode(this,mth,true));\n      }\n      for (      Field f : clsData.getStaticFields()) {\n        fields.add(new FieldNode(this,f));\n      }\n      loadStaticValues(cls,fields);\n      for (      Field f : clsData.getInstanceFields()) {\n        fields.add(new FieldNode(this,f));\n      }\n    }\n else {\n      methods=Collections.emptyList();\n      fields=Collections.emptyList();\n    }\n    loadAnnotations(cls);\n    parseClassSignature();\n    setFieldsTypesFromSignature();\n    int sfIdx=cls.getSourceFileIndex();\n    if (sfIdx != DexNode.NO_INDEX) {\n      String fileName=dex.getString(sfIdx);\n      addSourceFilenameAttr(fileName);\n    }\n    int accFlagsValue;\n    Annotation a=getAnnotation(Consts.DALVIK_INNER_CLASS);\n    if (a != null) {\n      accFlagsValue=(Integer)a.getValues().get(\"accessFlags\");\n    }\n else {\n      accFlagsValue=cls.getAccessFlags();\n    }\n    this.accessFlags=new AccessInfo(accFlagsValue,AFType.CLASS);\n    markAnonymousClass(this);\n    buildCache();\n  }\n catch (  Exception e) {\n    throw new JadxRuntimeException(\"Error decode class: \" + clsInfo,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 92,
        "startColumnNumber" : 5,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "methods.add(new MethodNode(this,mth,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "jadx.core.dex.nodes.MethodNode"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 92,
    "startColumnNumber" : 17,
    "endLineNumber" : 92,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}