{
  "id" : 171,
  "expression" : "\"UseDefault\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/common/options/InvocationPolicyEnforcer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"UseDefault\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 156,
      "startColumnNumber" : 22,
      "endLineNumber" : 156,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 91
      },
      "nodeContext" : "applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 92
      },
      "nodeContext" : "applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 149,
        "startColumnNumber" : 6,
        "endLineNumber" : 195,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (flagPolicy.policy.getOperationCase()) {\ncase SET_VALUE:  applySetValueOperation(parser,flagPolicy,valueDescription,loglevel);\nbreak;\ncase USE_DEFAULT:applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\nbreak;\ncase ALLOW_VALUES:AllowValues allowValues=flagPolicy.policy.getAllowValues();\nFilterValueOperation.AllowValueOperation allowValueOperation=new FilterValueOperation.AllowValueOperation(loglevel);\nallowValueOperation.apply(parser,flagPolicy.origin,allowValues.getAllowedValuesList(),allowValues.hasNewValue() ? allowValues.getNewValue() : null,allowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase DISALLOW_VALUES:DisallowValues disallowValues=flagPolicy.policy.getDisallowValues();\nFilterValueOperation.DisallowValueOperation disallowValueOperation=new FilterValueOperation.DisallowValueOperation(loglevel);\ndisallowValueOperation.apply(parser,flagPolicy.origin,disallowValues.getDisallowedValuesList(),disallowValues.hasNewValue() ? disallowValues.getNewValue() : null,disallowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase OPERATION_NOT_SET:throw new PolicyOperationNotSetException(flagName);\ndefault:logger.atWarning().log(\"Unknown operation '%s' from invocation policy for flag '%s'\",flagPolicy.policy.getOperationCase(),flagName);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 156,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2815,
        "startLineNumber" : 129,
        "startColumnNumber" : 63,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String flagName=flagPolicy.policy.getFlagName();\n  OptionValueDescription valueDescription;\n  try {\n    valueDescription=parser.getOptionValueDescription(flagName);\n  }\n catch (  IllegalArgumentException e) {\n    logger.at(loglevel).log(\"Flag '%s' specified by invocation policy does not exist\",flagName);\n    continue;\n  }\n  Verify.verifyNotNull(flagPolicy.description);\nswitch (flagPolicy.policy.getOperationCase()) {\ncase SET_VALUE:    applySetValueOperation(parser,flagPolicy,valueDescription,loglevel);\n  break;\ncase USE_DEFAULT:applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\nbreak;\ncase ALLOW_VALUES:AllowValues allowValues=flagPolicy.policy.getAllowValues();\nFilterValueOperation.AllowValueOperation allowValueOperation=new FilterValueOperation.AllowValueOperation(loglevel);\nallowValueOperation.apply(parser,flagPolicy.origin,allowValues.getAllowedValuesList(),allowValues.hasNewValue() ? allowValues.getNewValue() : null,allowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase DISALLOW_VALUES:DisallowValues disallowValues=flagPolicy.policy.getDisallowValues();\nFilterValueOperation.DisallowValueOperation disallowValueOperation=new FilterValueOperation.DisallowValueOperation(loglevel);\ndisallowValueOperation.apply(parser,flagPolicy.origin,disallowValues.getDisallowedValuesList(),disallowValues.hasNewValue() ? disallowValues.getNewValue() : null,disallowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase OPERATION_NOT_SET:throw new PolicyOperationNotSetException(flagName);\ndefault:logger.atWarning().log(\"Unknown operation '%s' from invocation policy for flag '%s'\",flagPolicy.policy.getOperationCase(),flagName);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2874,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (FlagPolicyWithContext flagPolicy : effectivePolicies) {\n  String flagName=flagPolicy.policy.getFlagName();\n  OptionValueDescription valueDescription;\n  try {\n    valueDescription=parser.getOptionValueDescription(flagName);\n  }\n catch (  IllegalArgumentException e) {\n    logger.at(loglevel).log(\"Flag '%s' specified by invocation policy does not exist\",flagName);\n    continue;\n  }\n  Verify.verifyNotNull(flagPolicy.description);\nswitch (flagPolicy.policy.getOperationCase()) {\ncase SET_VALUE:    applySetValueOperation(parser,flagPolicy,valueDescription,loglevel);\n  break;\ncase USE_DEFAULT:applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\nbreak;\ncase ALLOW_VALUES:AllowValues allowValues=flagPolicy.policy.getAllowValues();\nFilterValueOperation.AllowValueOperation allowValueOperation=new FilterValueOperation.AllowValueOperation(loglevel);\nallowValueOperation.apply(parser,flagPolicy.origin,allowValues.getAllowedValuesList(),allowValues.hasNewValue() ? allowValues.getNewValue() : null,allowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase DISALLOW_VALUES:DisallowValues disallowValues=flagPolicy.policy.getDisallowValues();\nFilterValueOperation.DisallowValueOperation disallowValueOperation=new FilterValueOperation.DisallowValueOperation(loglevel);\ndisallowValueOperation.apply(parser,flagPolicy.origin,disallowValues.getDisallowedValuesList(),disallowValues.hasNewValue() ? disallowValues.getNewValue() : null,disallowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase OPERATION_NOT_SET:throw new PolicyOperationNotSetException(flagName);\ndefault:logger.atWarning().log(\"Unknown operation '%s' from invocation policy for flag '%s'\",flagPolicy.policy.getOperationCase(),flagName);\nbreak;\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 210,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3251,
        "startLineNumber" : 119,
        "startColumnNumber" : 37,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (invocationPolicy == null || invocationPolicy.getFlagPoliciesCount() == 0) {\n    return;\n  }\n  List<FlagPolicyWithContext> effectivePolicies=getEffectivePolicies(invocationPolicy,parser,command,loglevel);\n  for (  FlagPolicyWithContext flagPolicy : effectivePolicies) {\n    String flagName=flagPolicy.policy.getFlagName();\n    OptionValueDescription valueDescription;\n    try {\n      valueDescription=parser.getOptionValueDescription(flagName);\n    }\n catch (    IllegalArgumentException e) {\n      logger.at(loglevel).log(\"Flag '%s' specified by invocation policy does not exist\",flagName);\n      continue;\n    }\n    Verify.verifyNotNull(flagPolicy.description);\nswitch (flagPolicy.policy.getOperationCase()) {\ncase SET_VALUE:      applySetValueOperation(parser,flagPolicy,valueDescription,loglevel);\n    break;\ncase USE_DEFAULT:  applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\nbreak;\ncase ALLOW_VALUES:AllowValues allowValues=flagPolicy.policy.getAllowValues();\nFilterValueOperation.AllowValueOperation allowValueOperation=new FilterValueOperation.AllowValueOperation(loglevel);\nallowValueOperation.apply(parser,flagPolicy.origin,allowValues.getAllowedValuesList(),allowValues.hasNewValue() ? allowValues.getNewValue() : null,allowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase DISALLOW_VALUES:DisallowValues disallowValues=flagPolicy.policy.getDisallowValues();\nFilterValueOperation.DisallowValueOperation disallowValueOperation=new FilterValueOperation.DisallowValueOperation(loglevel);\ndisallowValueOperation.apply(parser,flagPolicy.origin,disallowValues.getDisallowedValuesList(),disallowValues.hasNewValue() ? disallowValues.getNewValue() : null,disallowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase OPERATION_NOT_SET:throw new PolicyOperationNotSetException(flagName);\ndefault:logger.atWarning().log(\"Unknown operation '%s' from invocation policy for flag '%s'\",flagPolicy.policy.getOperationCase(),flagName);\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3794,
        "startLineNumber" : 109,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Applies this OptionsPolicyEnforcer's policy to the given OptionsParser.\n * @param parser The OptionsParser to enforce policy on.\n * @param command The current blaze command, for flag policies that apply to only specificcommands. Such policies will be enforced only if they contain this command or a command they inherit from\n * @throws OptionsParsingException if any flag policy is invalid.\n */\npublic void enforce(OptionsParser parser,@Nullable String command) throws OptionsParsingException {\n  if (invocationPolicy == null || invocationPolicy.getFlagPoliciesCount() == 0) {\n    return;\n  }\n  List<FlagPolicyWithContext> effectivePolicies=getEffectivePolicies(invocationPolicy,parser,command,loglevel);\n  for (  FlagPolicyWithContext flagPolicy : effectivePolicies) {\n    String flagName=flagPolicy.policy.getFlagName();\n    OptionValueDescription valueDescription;\n    try {\n      valueDescription=parser.getOptionValueDescription(flagName);\n    }\n catch (    IllegalArgumentException e) {\n      logger.at(loglevel).log(\"Flag '%s' specified by invocation policy does not exist\",flagName);\n      continue;\n    }\n    Verify.verifyNotNull(flagPolicy.description);\nswitch (flagPolicy.policy.getOperationCase()) {\ncase SET_VALUE:      applySetValueOperation(parser,flagPolicy,valueDescription,loglevel);\n    break;\ncase USE_DEFAULT:  applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel);\nbreak;\ncase ALLOW_VALUES:AllowValues allowValues=flagPolicy.policy.getAllowValues();\nFilterValueOperation.AllowValueOperation allowValueOperation=new FilterValueOperation.AllowValueOperation(loglevel);\nallowValueOperation.apply(parser,flagPolicy.origin,allowValues.getAllowedValuesList(),allowValues.hasNewValue() ? allowValues.getNewValue() : null,allowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase DISALLOW_VALUES:DisallowValues disallowValues=flagPolicy.policy.getDisallowValues();\nFilterValueOperation.DisallowValueOperation disallowValueOperation=new FilterValueOperation.DisallowValueOperation(loglevel);\ndisallowValueOperation.apply(parser,flagPolicy.origin,disallowValues.getDisallowedValuesList(),disallowValues.hasNewValue() ? disallowValues.getNewValue() : null,disallowValues.hasUseDefault(),valueDescription,flagPolicy.description);\nbreak;\ncase OPERATION_NOT_SET:throw new PolicyOperationNotSetException(flagName);\ndefault:logger.atWarning().log(\"Unknown operation '%s' from invocation policy for flag '%s'\",flagPolicy.policy.getOperationCase(),flagName);\nbreak;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 155,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 91
      },
      "nodeContext" : "applyUseDefaultOperation(parser,\"UseDefault\",flagPolicy.description.getOptionDefinition(),loglevel)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 156,
    "startColumnNumber" : 22,
    "endLineNumber" : 156,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}