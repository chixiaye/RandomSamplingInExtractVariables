{
  "id" : 52,
  "expression" : "isLexer() && ttype >= Lexer.MIN_CHAR_VALUE",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/tool/Grammar.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isLexer() && ttype >= Lexer.MIN_CHAR_VALUE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 650,
      "startColumnNumber" : 7,
      "endLineNumber" : 651,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 650,
        "startColumnNumber" : 7,
        "endLineNumber" : 651,
        "endColumnNumber" : 66
      },
      "nodeContext" : "isLexer() && ttype >= Lexer.MIN_CHAR_VALUE && ttype <= Lexer.MAX_CHAR_VALUE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 650,
        "startColumnNumber" : 2,
        "endLineNumber" : 654,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (isLexer() && ttype >= Lexer.MIN_CHAR_VALUE && ttype <= Lexer.MAX_CHAR_VALUE) {\n  return CharSupport.getANTLRCharLiteralForChar(ttype);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 648,
        "startColumnNumber" : 46,
        "endLineNumber" : 673,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (isLexer() && ttype >= Lexer.MIN_CHAR_VALUE && ttype <= Lexer.MAX_CHAR_VALUE) {\n    return CharSupport.getANTLRCharLiteralForChar(ttype);\n  }\n  if (ttype == Token.EOF) {\n    return \"EOF\";\n  }\n  if (ttype == Token.INVALID_TYPE) {\n    return INVALID_TOKEN_NAME;\n  }\n  if (ttype >= 0 && ttype < typeToStringLiteralList.size() && typeToStringLiteralList.get(ttype) != null) {\n    return typeToStringLiteralList.get(ttype);\n  }\n  if (ttype >= 0 && ttype < typeToTokenList.size() && typeToTokenList.get(ttype) != null) {\n    return typeToTokenList.get(ttype);\n  }\n  return String.valueOf(ttype);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 644,
        "startColumnNumber" : 1,
        "endLineNumber" : 673,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a token type, get a meaningful name for it such as the ID or string literal.  If this is a lexer and the ttype is in the char vocabulary, compute an ANTLR-valid (possibly escaped) char literal.\n */\npublic String getTokenDisplayName(int ttype){\n  if (isLexer() && ttype >= Lexer.MIN_CHAR_VALUE && ttype <= Lexer.MAX_CHAR_VALUE) {\n    return CharSupport.getANTLRCharLiteralForChar(ttype);\n  }\n  if (ttype == Token.EOF) {\n    return \"EOF\";\n  }\n  if (ttype == Token.INVALID_TYPE) {\n    return INVALID_TOKEN_NAME;\n  }\n  if (ttype >= 0 && ttype < typeToStringLiteralList.size() && typeToStringLiteralList.get(ttype) != null) {\n    return typeToStringLiteralList.get(ttype);\n  }\n  if (ttype >= 0 && ttype < typeToTokenList.size() && typeToTokenList.get(ttype) != null) {\n    return typeToTokenList.get(ttype);\n  }\n  return String.valueOf(ttype);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 650,
        "startColumnNumber" : 7,
        "endLineNumber" : 651,
        "endColumnNumber" : 66
      },
      "nodeContext" : "isLexer() && ttype >= Lexer.MIN_CHAR_VALUE && ttype <= Lexer.MAX_CHAR_VALUE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 650,
    "startColumnNumber" : 7,
    "endLineNumber" : 651,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}