{
  "id" : 292,
  "expression" : "Flowable.bufferSize() * 2",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelayTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flowable.bufferSize() * 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 642,
      "startColumnNumber" : 26,
      "endLineNumber" : 642,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 642,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 643,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 644,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 659,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n  int c=0;\n  @Override public Integer apply(  Integer t){\n    if (c++ <= 0) {\n      try {\n        Thread.sleep(500);\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    return t;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 69,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n  int c=0;\n  @Override public Integer apply(  Integer t){\n    if (c++ <= 0) {\n      try {\n        Thread.sleep(500);\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    return t;\n  }\n}\n).subscribe(ts)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 674,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n  int c=0;\n  @Override public Integer apply(  Integer t){\n    if (c++ <= 0) {\n      try {\n        Thread.sleep(500);\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    return t;\n  }\n}\n).subscribe(ts);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 73,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 640,
        "startColumnNumber" : 49,
        "endLineNumber" : 665,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n    int c=0;\n    @Override public Integer apply(    Integer t){\n      if (c++ <= 0) {\n        try {\n          Thread.sleep(500);\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      return t;\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent();\n  ts.assertNoErrors();\n  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 639,
        "startColumnNumber" : 4,
        "endLineNumber" : 665,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBackpressureWithTimedDelay(){\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n    int c=0;\n    @Override public Integer apply(    Integer t){\n      if (c++ <= 0) {\n        try {\n          Thread.sleep(500);\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      return t;\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent();\n  ts.assertNoErrors();\n  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 642,
        "startColumnNumber" : 8,
        "endLineNumber" : 642,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Flowable.range(1,Flowable.bufferSize() * 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "int"
  }, {
    "nodeContext" : "Flowable.bufferSize() * 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 664,
      "startColumnNumber" : 21,
      "endLineNumber" : 664,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 664,
        "startColumnNumber" : 8,
        "endLineNumber" : 664,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(Flowable.bufferSize() * 2,ts.valueCount())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 664,
        "startColumnNumber" : 8,
        "endLineNumber" : 664,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 640,
        "startColumnNumber" : 49,
        "endLineNumber" : 665,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n    int c=0;\n    @Override public Integer apply(    Integer t){\n      if (c++ <= 0) {\n        try {\n          Thread.sleep(500);\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      return t;\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent();\n  ts.assertNoErrors();\n  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 639,
        "startColumnNumber" : 4,
        "endLineNumber" : 665,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBackpressureWithTimedDelay(){\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){\n    int c=0;\n    @Override public Integer apply(    Integer t){\n      if (c++ <= 0) {\n        try {\n          Thread.sleep(500);\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      return t;\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent();\n  ts.assertNoErrors();\n  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 664,
        "startColumnNumber" : 8,
        "endLineNumber" : 664,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(Flowable.bufferSize() * 2,ts.valueCount());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 642,
    "startColumnNumber" : 26,
    "endLineNumber" : 642,
    "endColumnNumber" : 51
  }, {
    "charLength" : 25,
    "startLineNumber" : 664,
    "startColumnNumber" : 21,
    "endLineNumber" : 664,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}