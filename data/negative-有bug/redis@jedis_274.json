{
  "id" : 274,
  "expression" : "results.get(3).getClass()",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/modules/graph/GraphTransactionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results.get(3).getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 87,
      "startColumnNumber" : 29,
      "endLineNumber" : 87,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(Long.class,results.get(3).getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(Long.class,results.get(3).getClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 57,
        "startColumnNumber" : 30,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Transaction transaction=new Transaction(c);\n  transaction.set(\"x\",\"1\");\n  transaction.graphQuery(\"social\",\"CREATE (:Person {name:'a'})\");\n  transaction.graphQuery(\"g\",\"CREATE (:Person {name:'a'})\");\n  transaction.incr(\"x\");\n  transaction.get(\"x\");\n  transaction.graphQuery(\"social\",\"MATCH (n:Person) RETURN n\");\n  transaction.graphDelete(\"g\");\n  transaction.graphQuery(\"social\",\"CALL db.labels()\");\n  List<Object> results=transaction.exec();\n  assertEquals(String.class,results.get(0).getClass());\n  assertEquals(\"OK\",results.get(0));\n  ResultSet resultSet=(ResultSet)results.get(1);\n  assertEquals(1,resultSet.getStatistics().nodesCreated());\n  assertEquals(1,resultSet.getStatistics().propertiesSet());\n  resultSet=(ResultSet)results.get(2);\n  assertEquals(1,resultSet.getStatistics().nodesCreated());\n  assertEquals(1,resultSet.getStatistics().propertiesSet());\n  assertEquals(Long.class,results.get(3).getClass());\n  assertEquals(2L,results.get(3));\n  assertEquals(String.class,results.get(4).getClass());\n  assertEquals(\"2\",results.get(4));\n  resultSet=(ResultSet)results.get(5);\n  assertNotNull(resultSet.getHeader());\n  Header header=resultSet.getHeader();\n  List<String> schemaNames=header.getSchemaNames();\n  assertNotNull(schemaNames);\n  assertEquals(1,schemaNames.size());\n  assertEquals(\"n\",schemaNames.get(0));\n  Property<String> nameProperty=new Property<>(\"name\",\"a\");\n  Node expectedNode=new Node();\n  expectedNode.setId(0);\n  expectedNode.addLabel(\"Person\");\n  expectedNode.addProperty(nameProperty);\n  assertEquals(1,resultSet.size());\n  Iterator<Record> iterator=resultSet.iterator();\n  assertTrue(iterator.hasNext());\n  Record record=iterator.next();\n  assertFalse(iterator.hasNext());\n  assertEquals(Arrays.asList(\"n\"),record.keys());\n  assertEquals(expectedNode,record.getValue(\"n\"));\n  resultSet=(ResultSet)results.get(7);\n  assertNotNull(resultSet.getHeader());\n  header=resultSet.getHeader();\n  schemaNames=header.getSchemaNames();\n  assertNotNull(schemaNames);\n  assertEquals(1,schemaNames.size());\n  assertEquals(\"label\",schemaNames.get(0));\n  assertEquals(1,resultSet.size());\n  iterator=resultSet.iterator();\n  assertTrue(iterator.hasNext());\n  record=iterator.next();\n  assertFalse(iterator.hasNext());\n  assertEquals(Arrays.asList(\"label\"),record.keys());\n  assertEquals(\"Person\",record.getValue(\"label\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3168,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testMultiExec(){\n  Transaction transaction=new Transaction(c);\n  transaction.set(\"x\",\"1\");\n  transaction.graphQuery(\"social\",\"CREATE (:Person {name:'a'})\");\n  transaction.graphQuery(\"g\",\"CREATE (:Person {name:'a'})\");\n  transaction.incr(\"x\");\n  transaction.get(\"x\");\n  transaction.graphQuery(\"social\",\"MATCH (n:Person) RETURN n\");\n  transaction.graphDelete(\"g\");\n  transaction.graphQuery(\"social\",\"CALL db.labels()\");\n  List<Object> results=transaction.exec();\n  assertEquals(String.class,results.get(0).getClass());\n  assertEquals(\"OK\",results.get(0));\n  ResultSet resultSet=(ResultSet)results.get(1);\n  assertEquals(1,resultSet.getStatistics().nodesCreated());\n  assertEquals(1,resultSet.getStatistics().propertiesSet());\n  resultSet=(ResultSet)results.get(2);\n  assertEquals(1,resultSet.getStatistics().nodesCreated());\n  assertEquals(1,resultSet.getStatistics().propertiesSet());\n  assertEquals(Long.class,results.get(3).getClass());\n  assertEquals(2L,results.get(3));\n  assertEquals(String.class,results.get(4).getClass());\n  assertEquals(\"2\",results.get(4));\n  resultSet=(ResultSet)results.get(5);\n  assertNotNull(resultSet.getHeader());\n  Header header=resultSet.getHeader();\n  List<String> schemaNames=header.getSchemaNames();\n  assertNotNull(schemaNames);\n  assertEquals(1,schemaNames.size());\n  assertEquals(\"n\",schemaNames.get(0));\n  Property<String> nameProperty=new Property<>(\"name\",\"a\");\n  Node expectedNode=new Node();\n  expectedNode.setId(0);\n  expectedNode.addLabel(\"Person\");\n  expectedNode.addProperty(nameProperty);\n  assertEquals(1,resultSet.size());\n  Iterator<Record> iterator=resultSet.iterator();\n  assertTrue(iterator.hasNext());\n  Record record=iterator.next();\n  assertFalse(iterator.hasNext());\n  assertEquals(Arrays.asList(\"n\"),record.keys());\n  assertEquals(expectedNode,record.getValue(\"n\"));\n  resultSet=(ResultSet)results.get(7);\n  assertNotNull(resultSet.getHeader());\n  header=resultSet.getHeader();\n  schemaNames=header.getSchemaNames();\n  assertNotNull(schemaNames);\n  assertEquals(1,schemaNames.size());\n  assertEquals(\"label\",schemaNames.get(0));\n  assertEquals(1,resultSet.size());\n  iterator=resultSet.iterator();\n  assertTrue(iterator.hasNext());\n  record=iterator.next();\n  assertFalse(iterator.hasNext());\n  assertEquals(Arrays.asList(\"label\"),record.keys());\n  assertEquals(\"Person\",record.getValue(\"label\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 433,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(Long.class,results.get(3).getClass());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 87,
    "startColumnNumber" : 29,
    "endLineNumber" : 87,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}