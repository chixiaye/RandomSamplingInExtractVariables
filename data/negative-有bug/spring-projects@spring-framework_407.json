{
  "id" : 407,
  "expression" : "createDataSource(inputStreamSource,contentType,attachmentFilename)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createDataSource(inputStreamSource,contentType,attachmentFilename)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 1079,
      "startColumnNumber" : 26,
      "endLineNumber" : 1079,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 1079,
        "startColumnNumber" : 13,
        "endLineNumber" : 1079,
        "endColumnNumber" : 94
      },
      "nodeContext" : "dataSource=createDataSource(inputStreamSource,contentType,attachmentFilename)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1079,
        "startColumnNumber" : 2,
        "endLineNumber" : 1079,
        "endColumnNumber" : 95
      },
      "nodeContext" : "DataSource dataSource=createDataSource(inputStreamSource,contentType,attachmentFilename);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 1071,
        "startColumnNumber" : 29,
        "endLineNumber" : 1081,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(inputStreamSource,\"InputStreamSource must not be null\");\n  if (inputStreamSource instanceof Resource && ((Resource)inputStreamSource).isOpen()) {\n    throw new IllegalArgumentException(\"Passed-in Resource contains an open stream: invalid argument. \" + \"JavaMail requires an InputStreamSource that creates a fresh stream for every call.\");\n  }\n  DataSource dataSource=createDataSource(inputStreamSource,contentType,attachmentFilename);\n  addAttachment(attachmentFilename,dataSource);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 1053,
        "startColumnNumber" : 1,
        "endLineNumber" : 1081,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Add an attachment to the MimeMessage, taking the content from an {@code org.springframework.core.io.InputStreamResource}. <p>Note that the InputStream returned by the InputStreamSource implementation needs to be a <i>fresh one on each call</i>, as JavaMail will invoke  {@code getInputStream()} multiple times.\n * @param attachmentFilename the name of the attachment as it willappear in the mail\n * @param inputStreamSource the resource to take the content from(all of Spring's Resource implementations can be passed in here)\n * @param contentType the content type to use for the element\n * @throws MessagingException in case of errors\n * @see #addAttachment(String,java.io.File)\n * @see #addAttachment(String,javax.activation.DataSource)\n * @see org.springframework.core.io.Resource\n */\npublic void addAttachment(String attachmentFilename,InputStreamSource inputStreamSource,String contentType) throws MessagingException {\n  Assert.notNull(inputStreamSource,\"InputStreamSource must not be null\");\n  if (inputStreamSource instanceof Resource && ((Resource)inputStreamSource).isOpen()) {\n    throw new IllegalArgumentException(\"Passed-in Resource contains an open stream: invalid argument. \" + \"JavaMail requires an InputStreamSource that creates a fresh stream for every call.\");\n  }\n  DataSource dataSource=createDataSource(inputStreamSource,contentType,attachmentFilename);\n  addAttachment(attachmentFilename,dataSource);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 1079,
        "startColumnNumber" : 2,
        "endLineNumber" : 1079,
        "endColumnNumber" : 95
      },
      "nodeContext" : "DataSource dataSource=createDataSource(inputStreamSource,contentType,attachmentFilename);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "org.springframework.mail.javamail.DataSource"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 1079,
    "startColumnNumber" : 26,
    "endLineNumber" : 1079,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}