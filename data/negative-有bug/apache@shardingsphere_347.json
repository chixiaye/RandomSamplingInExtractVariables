{
  "id" : 347,
  "expression" : "actual.getClass().getSimpleName()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-test/shardingsphere-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/distsql/TableRuleAssert.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 49,
      "startColumnNumber" : 106,
      "endLineNumber" : 49,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 49,
        "startColumnNumber" : 45,
        "endLineNumber" : 49,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 51,
      "startColumnNumber" : 106,
      "endLineNumber" : 51,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 51,
        "startColumnNumber" : 45,
        "endLineNumber" : 51,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 51,
        "startColumnNumber" : 23,
        "endLineNumber" : 51,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 51,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 51,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 51,
        "startColumnNumber" : 23,
        "endLineNumber" : 51,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 53,
      "startColumnNumber" : 106,
      "endLineNumber" : 53,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 53,
        "startColumnNumber" : 45,
        "endLineNumber" : 53,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 53,
        "startColumnNumber" : 23,
        "endLineNumber" : 53,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 126
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 127
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 53,
        "startColumnNumber" : 23,
        "endLineNumber" : 53,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 55,
      "startColumnNumber" : 106,
      "endLineNumber" : 55,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 55,
        "startColumnNumber" : 45,
        "endLineNumber" : 55,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 55,
        "startColumnNumber" : 23,
        "endLineNumber" : 55,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 106
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 107
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 55,
        "startColumnNumber" : 23,
        "endLineNumber" : 55,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 57,
      "startColumnNumber" : 106,
      "endLineNumber" : 57,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 57,
        "startColumnNumber" : 45,
        "endLineNumber" : 57,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 57,
        "startColumnNumber" : 23,
        "endLineNumber" : 57,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 140
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 57,
        "startColumnNumber" : 23,
        "endLineNumber" : 57,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 59,
      "startColumnNumber" : 106,
      "endLineNumber" : 59,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 59,
        "startColumnNumber" : 45,
        "endLineNumber" : 59,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 59,
        "startColumnNumber" : 23,
        "endLineNumber" : 59,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 128
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 129
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 59,
        "startColumnNumber" : 23,
        "endLineNumber" : 59,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 61,
      "startColumnNumber" : 106,
      "endLineNumber" : 61,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 61,
        "startColumnNumber" : 45,
        "endLineNumber" : 61,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 61,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 108
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 61,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 63,
      "startColumnNumber" : 106,
      "endLineNumber" : 63,
      "endColumnNumber" : 139
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 63,
        "startColumnNumber" : 45,
        "endLineNumber" : 63,
        "endColumnNumber" : 140
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 142
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 143
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 141
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "actual.getClass().getSimpleName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 66,
      "startColumnNumber" : 110,
      "endLineNumber" : 66,
      "endColumnNumber" : 143
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 66,
        "startColumnNumber" : 49,
        "endLineNumber" : 66,
        "endColumnNumber" : 144
      },
      "nodeContext" : "String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 66,
        "startColumnNumber" : 27,
        "endLineNumber" : 66,
        "endColumnNumber" : 145
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 123
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 124
      },
      "nodeContext" : "assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 65,
        "startColumnNumber" : 56,
        "endLineNumber" : 68,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (null != actual.getKeyGenerateSegment()) {\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2504,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2637,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null == expected) {\n  assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n}\n else {\n  assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n  assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n  if (null != actual.getKeyGenerateSegment()) {\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 262,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2653,
        "startLineNumber" : 44,
        "startColumnNumber" : 139,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3011,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert table rule is correct with expected parser result.\n * @param assertContext assert context\n * @param actual actual table rule\n * @param expected expected table rule test case\n */\npublic static void assertIs(final SQLCaseAssertContext assertContext,final TableRuleSegment actual,final ExpectedTableRule expected){\n  if (null == expected) {\n    assertNull(assertContext.getText(\"Actual table rule should not exist.\"),actual);\n  }\n else {\n    assertNotNull(assertContext.getText(\"Actual table rule should exist.\"),actual);\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLogicTable(),is(expected.getName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSourceNodes(),is(expected.getDataSources()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingColumn(),is(expected.getTableStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getType(),is(expected.getTableStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getTableStrategySegment().getShardingAlgorithmName(),is(expected.getTableStrategy().getShardingAlgorithmName()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingColumn(),is(expected.getDataStrategy().getShardingColumn()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getType(),is(expected.getDataStrategy().getType()));\n    assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDatabaseStrategySegment().getShardingAlgorithmName(),is(expected.getDataStrategy().getShardingAlgorithmName()));\n    if (null != actual.getKeyGenerateSegment()) {\n      assertThat(assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getKeyGenerateSegment().getKeyGenerateColumn(),is(expected.getKeyGenerateStrategyColumn()));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 66,
        "startColumnNumber" : 27,
        "endLineNumber" : 66,
        "endColumnNumber" : 145
      },
      "nodeContext" : "assertContext.getText(String.format(\"`%s`'s table rule segment assertion error: \",actual.getClass().getSimpleName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 49,
    "startColumnNumber" : 106,
    "endLineNumber" : 49,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 51,
    "startColumnNumber" : 106,
    "endLineNumber" : 51,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 53,
    "startColumnNumber" : 106,
    "endLineNumber" : 53,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 55,
    "startColumnNumber" : 106,
    "endLineNumber" : 55,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 57,
    "startColumnNumber" : 106,
    "endLineNumber" : 57,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 59,
    "startColumnNumber" : 106,
    "endLineNumber" : 59,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 61,
    "startColumnNumber" : 106,
    "endLineNumber" : 61,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 63,
    "startColumnNumber" : 106,
    "endLineNumber" : 63,
    "endColumnNumber" : 139
  }, {
    "charLength" : 33,
    "startLineNumber" : 66,
    "startColumnNumber" : 110,
    "endLineNumber" : 66,
    "endColumnNumber" : 143
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  } ]
}