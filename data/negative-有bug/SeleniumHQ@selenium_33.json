{
  "id" : 33,
  "expression" : "new TypeToken<List<StackFrame>>(){\n}\n",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/src/org/openqa/selenium/bidi/log/StackTrace.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TypeToken<List<StackFrame>>(){\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 50,
      "startColumnNumber" : 32,
      "endLineNumber" : 51,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 50,
        "startColumnNumber" : 32,
        "endLineNumber" : 51,
        "endColumnNumber" : 19
      },
      "nodeContext" : "new TypeToken<List<StackFrame>>(){\n}\n.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 50,
        "startColumnNumber" : 21,
        "endLineNumber" : 51,
        "endColumnNumber" : 20
      },
      "nodeContext" : "input.read(new TypeToken<List<StackFrame>>(){\n}\n.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 20
      },
      "nodeContext" : "callFrames=input.read(new TypeToken<List<StackFrame>>(){\n}\n.getType())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 21
      },
      "nodeContext" : "callFrames=input.read(new TypeToken<List<StackFrame>>(){\n}\n.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 49,
        "startColumnNumber" : 49,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  callFrames=input.read(new TypeToken<List<StackFrame>>(){\n  }\n.getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (\"callFrames\".equals(input.nextName())) {\n  callFrames=input.read(new TypeToken<List<StackFrame>>(){\n  }\n.getType());\n}\n else {\n  input.skipValue();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 48,
        "startColumnNumber" : 28,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (\"callFrames\".equals(input.nextName())) {\n    callFrames=input.read(new TypeToken<List<StackFrame>>(){\n    }\n.getType());\n  }\n else {\n    input.skipValue();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (input.hasNext()) {\n  if (\"callFrames\".equals(input.nextName())) {\n    callFrames=input.read(new TypeToken<List<StackFrame>>(){\n    }\n.getType());\n  }\n else {\n    input.skipValue();\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 36,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 43,
        "startColumnNumber" : 53,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<StackFrame> callFrames=Collections.emptyList();\n  input.beginObject();\n  while (input.hasNext()) {\n    if (\"callFrames\".equals(input.nextName())) {\n      callFrames=input.read(new TypeToken<List<StackFrame>>(){\n      }\n.getType());\n    }\n else {\n      input.skipValue();\n    }\n  }\n  input.endObject();\n  return new StackTrace(callFrames);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static StackTrace fromJson(JsonInput input){\n  List<StackFrame> callFrames=Collections.emptyList();\n  input.beginObject();\n  while (input.hasNext()) {\n    if (\"callFrames\".equals(input.nextName())) {\n      callFrames=input.read(new TypeToken<List<StackFrame>>(){\n      }\n.getType());\n    }\n else {\n      input.skipValue();\n    }\n  }\n  input.endObject();\n  return new StackTrace(callFrames);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 71,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 21
      },
      "nodeContext" : "callFrames=input.read(new TypeToken<List<StackFrame>>(){\n}\n.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 50,
    "startColumnNumber" : 32,
    "endLineNumber" : 51,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}