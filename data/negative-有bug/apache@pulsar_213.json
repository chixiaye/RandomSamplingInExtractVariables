{
  "id" : 213,
  "expression" : "\"usage_threshold\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdNamespaceIsolationPolicy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"usage_threshold\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 208,
      "startColumnNumber" : 54,
      "endLineNumber" : 208,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 208,
        "startColumnNumber" : 39,
        "endLineNumber" : 208,
        "endColumnNumber" : 73
      },
      "nodeContext" : "{\"min_limit\",\"usage_threshold\"}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 208,
        "startColumnNumber" : 21,
        "endLineNumber" : 208,
        "endColumnNumber" : 73
      },
      "nodeContext" : "expectParamKeys={\"min_limit\",\"usage_threshold\"}",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 74
      },
      "nodeContext" : "String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 205,
        "startColumnNumber" : 64,
        "endLineNumber" : 224,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean error=true;\n  String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n  if (autoFailoverPolicyParams.size() == expectParamKeys.length) {\n    for (    String paramKey : expectParamKeys) {\n      if (!autoFailoverPolicyParams.containsKey(paramKey)) {\n        break;\n      }\n    }\n    error=false;\n  }\n  if (error) {\n    throw new ParameterException(\"Unknown auto failover policy params specified : \" + autoFailoverPolicyParams);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (policyType == AutoFailoverPolicyType.min_available) {\n  boolean error=true;\n  String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n  if (autoFailoverPolicyParams.size() == expectParamKeys.length) {\n    for (    String paramKey : expectParamKeys) {\n      if (!autoFailoverPolicyParams.containsKey(paramKey)) {\n        break;\n      }\n    }\n    error=false;\n  }\n  if (error) {\n    throw new ParameterException(\"Unknown auto failover policy params specified : \" + autoFailoverPolicyParams);\n  }\n}\n else {\n  throw new ParameterException(\"Unknown auto failover policy type specified : \" + autoFailoverPolicyTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2554,
        "startLineNumber" : 162,
        "startColumnNumber" : 173,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  namespaces=validateList(namespaces);\n  if (namespaces.isEmpty()) {\n    throw new ParameterException(\"unable to parse namespaces parameter list: \" + namespaces);\n  }\n  primary=validateList(primary);\n  if (primary.isEmpty()) {\n    throw new ParameterException(\"unable to parse primary parameter list: \" + namespaces);\n  }\n  secondary=validateList(secondary);\n  NamespaceIsolationData.Builder nsIsolationDataBuilder=NamespaceIsolationData.builder();\n  if (namespaces != null) {\n    nsIsolationDataBuilder.namespaces(namespaces);\n  }\n  if (primary != null) {\n    nsIsolationDataBuilder.primary(primary);\n  }\n  if (secondary != null) {\n    nsIsolationDataBuilder.secondary(secondary);\n  }\n  AutoFailoverPolicyType policyType=AutoFailoverPolicyType.fromString(autoFailoverPolicyTypeName);\n  nsIsolationDataBuilder.autoFailoverPolicy(AutoFailoverPolicyData.builder().policyType(policyType).parameters(autoFailoverPolicyParams).build());\n  if (policyType == AutoFailoverPolicyType.min_available) {\n    boolean error=true;\n    String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n    if (autoFailoverPolicyParams.size() == expectParamKeys.length) {\n      for (      String paramKey : expectParamKeys) {\n        if (!autoFailoverPolicyParams.containsKey(paramKey)) {\n          break;\n        }\n      }\n      error=false;\n    }\n    if (error) {\n      throw new ParameterException(\"Unknown auto failover policy params specified : \" + autoFailoverPolicyParams);\n    }\n  }\n else {\n    throw new ParameterException(\"Unknown auto failover policy type specified : \" + autoFailoverPolicyTypeName);\n  }\n  return nsIsolationDataBuilder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2834,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private NamespaceIsolationData createNamespaceIsolationData(List<String> namespaces,List<String> primary,List<String> secondary,String autoFailoverPolicyTypeName,Map<String,String> autoFailoverPolicyParams){\n  namespaces=validateList(namespaces);\n  if (namespaces.isEmpty()) {\n    throw new ParameterException(\"unable to parse namespaces parameter list: \" + namespaces);\n  }\n  primary=validateList(primary);\n  if (primary.isEmpty()) {\n    throw new ParameterException(\"unable to parse primary parameter list: \" + namespaces);\n  }\n  secondary=validateList(secondary);\n  NamespaceIsolationData.Builder nsIsolationDataBuilder=NamespaceIsolationData.builder();\n  if (namespaces != null) {\n    nsIsolationDataBuilder.namespaces(namespaces);\n  }\n  if (primary != null) {\n    nsIsolationDataBuilder.primary(primary);\n  }\n  if (secondary != null) {\n    nsIsolationDataBuilder.secondary(secondary);\n  }\n  AutoFailoverPolicyType policyType=AutoFailoverPolicyType.fromString(autoFailoverPolicyTypeName);\n  nsIsolationDataBuilder.autoFailoverPolicy(AutoFailoverPolicyData.builder().policyType(policyType).parameters(autoFailoverPolicyParams).build());\n  if (policyType == AutoFailoverPolicyType.min_available) {\n    boolean error=true;\n    String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n    if (autoFailoverPolicyParams.size() == expectParamKeys.length) {\n      for (      String paramKey : expectParamKeys) {\n        if (!autoFailoverPolicyParams.containsKey(paramKey)) {\n          break;\n        }\n      }\n      error=false;\n    }\n    if (error) {\n      throw new ParameterException(\"Unknown auto failover policy params specified : \" + autoFailoverPolicyParams);\n    }\n  }\n else {\n    throw new ParameterException(\"Unknown auto failover policy type specified : \" + autoFailoverPolicyTypeName);\n  }\n  return nsIsolationDataBuilder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 74
      },
      "nodeContext" : "String[] expectParamKeys={\"min_limit\",\"usage_threshold\"};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 208,
    "startColumnNumber" : 54,
    "endLineNumber" : 208,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}