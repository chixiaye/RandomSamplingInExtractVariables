{
  "id" : 240,
  "expression" : "numberFormat",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/drawee/src/test/java/com/facebook/drawee/components/DeferredReleaserStressTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numberFormat",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 87,
      "startColumnNumber" : 14,
      "endLineNumber" : 87,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 87,
        "startColumnNumber" : 14,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "numberFormat.format(durationScheduling)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 52
      },
      "nodeContext" : "deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 53
      },
      "nodeContext" : "System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 54
      },
      "nodeContext" : "System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1827,
        "startLineNumber" : 31,
        "startColumnNumber" : 74,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<Releasable> releasables=new ArrayList<>();\n  final AtomicInteger releaseCalls=new AtomicInteger(0);\n  int batchSize=32;\n  int repeatCount=K;\n  for (int i=0; i < batchSize; i++) {\n    releasables.add(new Noop(releaseCalls));\n  }\n  final List<Releasable> cancels=new ArrayList<>(releasables);\n  Collections.shuffle(cancels);\n  long durationScheduling=0;\n  long durationReleasing=0;\n  for (int i=0; i < repeatCount; i++) {\n    int before=releaseCalls.get();\n{\n      ShadowLooper.pauseMainLooper();\n      long start=System.nanoTime();\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : cancels) {\n        deferredReleaser.cancelDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      durationScheduling+=System.nanoTime() - start;\n      Assert.assertEquals(before,releaseCalls.get());\n    }\n{\n      ShadowLooper.unPauseMainLooper();\n      long start=System.nanoTime();\n      ShadowLooper.runUiThreadTasks();\n      durationReleasing+=System.nanoTime() - start;\n      Assert.assertEquals(before + batchSize,releaseCalls.get());\n    }\n  }\n  Assert.assertEquals(repeatCount * batchSize,releaseCalls.get());\n  NumberFormat numberFormat=NumberFormat.getInstance();\n  System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void stressTest(final DeferredReleaser deferredReleaser){\n  final List<Releasable> releasables=new ArrayList<>();\n  final AtomicInteger releaseCalls=new AtomicInteger(0);\n  int batchSize=32;\n  int repeatCount=K;\n  for (int i=0; i < batchSize; i++) {\n    releasables.add(new Noop(releaseCalls));\n  }\n  final List<Releasable> cancels=new ArrayList<>(releasables);\n  Collections.shuffle(cancels);\n  long durationScheduling=0;\n  long durationReleasing=0;\n  for (int i=0; i < repeatCount; i++) {\n    int before=releaseCalls.get();\n{\n      ShadowLooper.pauseMainLooper();\n      long start=System.nanoTime();\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : cancels) {\n        deferredReleaser.cancelDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      durationScheduling+=System.nanoTime() - start;\n      Assert.assertEquals(before,releaseCalls.get());\n    }\n{\n      ShadowLooper.unPauseMainLooper();\n      long start=System.nanoTime();\n      ShadowLooper.runUiThreadTasks();\n      durationReleasing+=System.nanoTime() - start;\n      Assert.assertEquals(before + batchSize,releaseCalls.get());\n    }\n  }\n  Assert.assertEquals(repeatCount * batchSize,releaseCalls.get());\n  NumberFormat numberFormat=NumberFormat.getInstance();\n  System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 87,
        "startColumnNumber" : 14,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "numberFormat.format(durationScheduling)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.text.NumberFormat"
  }, {
    "nodeContext" : "numberFormat",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 89,
      "startColumnNumber" : 14,
      "endLineNumber" : 89,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 89,
        "startColumnNumber" : 14,
        "endLineNumber" : 89,
        "endColumnNumber" : 52
      },
      "nodeContext" : "numberFormat.format(durationReleasing)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 52
      },
      "nodeContext" : "deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 53
      },
      "nodeContext" : "System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 54
      },
      "nodeContext" : "System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1827,
        "startLineNumber" : 31,
        "startColumnNumber" : 74,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<Releasable> releasables=new ArrayList<>();\n  final AtomicInteger releaseCalls=new AtomicInteger(0);\n  int batchSize=32;\n  int repeatCount=K;\n  for (int i=0; i < batchSize; i++) {\n    releasables.add(new Noop(releaseCalls));\n  }\n  final List<Releasable> cancels=new ArrayList<>(releasables);\n  Collections.shuffle(cancels);\n  long durationScheduling=0;\n  long durationReleasing=0;\n  for (int i=0; i < repeatCount; i++) {\n    int before=releaseCalls.get();\n{\n      ShadowLooper.pauseMainLooper();\n      long start=System.nanoTime();\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : cancels) {\n        deferredReleaser.cancelDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      durationScheduling+=System.nanoTime() - start;\n      Assert.assertEquals(before,releaseCalls.get());\n    }\n{\n      ShadowLooper.unPauseMainLooper();\n      long start=System.nanoTime();\n      ShadowLooper.runUiThreadTasks();\n      durationReleasing+=System.nanoTime() - start;\n      Assert.assertEquals(before + batchSize,releaseCalls.get());\n    }\n  }\n  Assert.assertEquals(repeatCount * batchSize,releaseCalls.get());\n  NumberFormat numberFormat=NumberFormat.getInstance();\n  System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void stressTest(final DeferredReleaser deferredReleaser){\n  final List<Releasable> releasables=new ArrayList<>();\n  final AtomicInteger releaseCalls=new AtomicInteger(0);\n  int batchSize=32;\n  int repeatCount=K;\n  for (int i=0; i < batchSize; i++) {\n    releasables.add(new Noop(releaseCalls));\n  }\n  final List<Releasable> cancels=new ArrayList<>(releasables);\n  Collections.shuffle(cancels);\n  long durationScheduling=0;\n  long durationReleasing=0;\n  for (int i=0; i < repeatCount; i++) {\n    int before=releaseCalls.get();\n{\n      ShadowLooper.pauseMainLooper();\n      long start=System.nanoTime();\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : cancels) {\n        deferredReleaser.cancelDeferredRelease(releasable);\n      }\n      for (      Releasable releasable : releasables) {\n        deferredReleaser.scheduleDeferredRelease(releasable);\n      }\n      durationScheduling+=System.nanoTime() - start;\n      Assert.assertEquals(before,releaseCalls.get());\n    }\n{\n      ShadowLooper.unPauseMainLooper();\n      long start=System.nanoTime();\n      ShadowLooper.runUiThreadTasks();\n      durationReleasing+=System.nanoTime() - start;\n      Assert.assertEquals(before + batchSize,releaseCalls.get());\n    }\n  }\n  Assert.assertEquals(repeatCount * batchSize,releaseCalls.get());\n  NumberFormat numberFormat=NumberFormat.getInstance();\n  System.out.println(deferredReleaser.getClass().getSimpleName() + \" Schedule/Cancel: \" + numberFormat.format(durationScheduling)+ \", Release: \"+ numberFormat.format(durationReleasing));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 89,
        "startColumnNumber" : 14,
        "endLineNumber" : 89,
        "endColumnNumber" : 52
      },
      "nodeContext" : "numberFormat.format(durationReleasing)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.text.NumberFormat"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 87,
    "startColumnNumber" : 14,
    "endLineNumber" : 87,
    "endColumnNumber" : 26
  }, {
    "charLength" : 12,
    "startLineNumber" : 89,
    "startColumnNumber" : 14,
    "endLineNumber" : 89,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}