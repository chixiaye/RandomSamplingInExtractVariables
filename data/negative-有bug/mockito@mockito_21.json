{
  "id" : 21,
  "expression" : "\"\\n\" + \"\\n\" + \"No tests found in \"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/runners/RunnerFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\n\" + \"\\n\" + \"No tests found in \"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 100,
      "startLineNumber" : 81,
      "startColumnNumber" : 24,
      "endLineNumber" : 83,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 81,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 59
      },
      "nodeContext" : "\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 409,
        "startLineNumber" : 80,
        "startColumnNumber" : 22,
        "endLineNumber" : 88,
        "endColumnNumber" : 26
      },
      "nodeContext" : "new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 88,
        "endColumnNumber" : 27
      },
      "nodeContext" : "throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 79,
        "startColumnNumber" : 40,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!hasTestMethods(klass)) {\n  throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 78,
        "startColumnNumber" : 46,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!hasTestMethods(klass)) {\n    throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n  }\n  throw e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (InvocationTargetException e) {\n  if (!hasTestMethods(klass)) {\n    throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n  }\n  throw e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1771,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String runnerClassName=\"org.mockito.internal.runners.DefaultInternalRunner\";\n  return new RunnerProvider().newInstance(runnerClassName,klass,listenerSupplier);\n}\n catch (InvocationTargetException e) {\n  if (!hasTestMethods(klass)) {\n    throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n  }\n  throw e;\n}\ncatch (Throwable t) {\n  throw new MockitoException(\"\\n\" + \"\\n\" + \"MockitoRunner can only be used with JUnit 4.5 or higher.\\n\"+ \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\"+ \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\"+ \"If you get this error despite using JUnit 4.5 or higher then please report this error to the mockito mailing list.\\n\",t);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1789,
        "startLineNumber" : 70,
        "startColumnNumber" : 45,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    String runnerClassName=\"org.mockito.internal.runners.DefaultInternalRunner\";\n    return new RunnerProvider().newInstance(runnerClassName,klass,listenerSupplier);\n  }\n catch (  InvocationTargetException e) {\n    if (!hasTestMethods(klass)) {\n      throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n    }\n    throw e;\n  }\ncatch (  Throwable t) {\n    throw new MockitoException(\"\\n\" + \"\\n\" + \"MockitoRunner can only be used with JUnit 4.5 or higher.\\n\"+ \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\"+ \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\"+ \"If you get this error despite using JUnit 4.5 or higher then please report this error to the mockito mailing list.\\n\",t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2016,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates runner implementation with provided listener supplier\n */\npublic InternalRunner create(Class<?> klass,Supplier<MockitoTestListener> listenerSupplier) throws InvocationTargetException {\n  try {\n    String runnerClassName=\"org.mockito.internal.runners.DefaultInternalRunner\";\n    return new RunnerProvider().newInstance(runnerClassName,klass,listenerSupplier);\n  }\n catch (  InvocationTargetException e) {\n    if (!hasTestMethods(klass)) {\n      throw new MockitoException(\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\",e);\n    }\n    throw e;\n  }\ncatch (  Throwable t) {\n    throw new MockitoException(\"\\n\" + \"\\n\" + \"MockitoRunner can only be used with JUnit 4.5 or higher.\\n\"+ \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\"+ \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\"+ \"If you get this error despite using JUnit 4.5 or higher then please report this error to the mockito mailing list.\\n\",t);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 81,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 59
      },
      "nodeContext" : "\"\\n\" + \"\\n\" + \"No tests found in \" + klass.getSimpleName() + \"\\n\"+ \"Is the method annotated with @Test?\\n\"+ \"Is the method public?\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 100,
    "startLineNumber" : 81,
    "startColumnNumber" : 24,
    "endLineNumber" : 83,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}