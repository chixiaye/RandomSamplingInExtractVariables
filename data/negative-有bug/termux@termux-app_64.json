{
  "id" : 64,
  "expression" : "false",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 97,
      "startColumnNumber" : 20,
      "endLineNumber" : 97,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 156
      },
      "nodeContext" : "sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 470,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 157
      },
      "nodeContext" : "sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 88,
        "startColumnNumber" : 31,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  resultData.setStateFailed(error);\n  Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n  sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (error != null) {\n  resultData.setStateFailed(error);\n  Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n  sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1554,
        "startLineNumber" : 78,
        "startColumnNumber" : 55,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (executionCommand.resultConfig.resultPendingIntent != null)   setPluginResultPendingIntentVariables(executionCommand);\n  if (executionCommand.resultConfig.resultDirectoryPath != null)   setPluginResultDirectoryVariables(executionCommand);\n  error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);\n  if (error != null) {\n    resultData.setStateFailed(error);\n    Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n    sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isPluginExecutionCommandWithPendingResult) {\n  if (executionCommand.resultConfig.resultPendingIntent != null)   setPluginResultPendingIntentVariables(executionCommand);\n  if (executionCommand.resultConfig.resultDirectoryPath != null)   setPluginResultDirectoryVariables(executionCommand);\n  error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);\n  if (error != null) {\n    resultData.setStateFailed(error);\n    Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n    sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2986,
        "startLineNumber" : 57,
        "startColumnNumber" : 138,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (executionCommand == null)   return;\n  logTag=DataUtils.getDefaultIfNull(logTag,LOG_TAG);\n  Error error=null;\n  ResultData resultData=executionCommand.resultData;\n  if (!executionCommand.hasExecuted()) {\n    Logger.logWarn(logTag,executionCommand.getCommandIdAndLabelLogString() + \": Ignoring call to processPluginExecutionCommandResult() since the execution command state is not higher than the ExecutionState.EXECUTED\");\n    return;\n  }\n  boolean isPluginExecutionCommandWithPendingResult=executionCommand.isPluginExecutionCommandWithPendingResult();\n  boolean isExecutionCommandLoggingEnabled=Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);\n  Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,!isPluginExecutionCommandWithPendingResult,isExecutionCommandLoggingEnabled));\n  if (isPluginExecutionCommandWithPendingResult) {\n    if (executionCommand.resultConfig.resultPendingIntent != null)     setPluginResultPendingIntentVariables(executionCommand);\n    if (executionCommand.resultConfig.resultDirectoryPath != null)     setPluginResultDirectoryVariables(executionCommand);\n    error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);\n    if (error != null) {\n      resultData.setStateFailed(error);\n      Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n      sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n    }\n  }\n  if (!executionCommand.isStateFailed() && error == null)   executionCommand.setState(ExecutionCommand.ExecutionState.SUCCESS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3851,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Process  {@link ExecutionCommand} result.The ExecutionCommand currentState must be greater or equal to {@link ExecutionCommand.ExecutionState#EXECUTED}. If the  {@link ExecutionCommand#isPluginExecutionCommand} is {@code true} and{@link ResultConfig#resultPendingIntent} or {@link ResultConfig#resultDirectoryPath}is not  {@code null}, then the result of commands are sent back to the command caller.\n * @param context The {@link Context} that will be used to send result intent to the {@link PendingIntent} creator.\n * @param logTag The log tag to use for logging.\n * @param executionCommand The {@link ExecutionCommand} to process.\n */\npublic static void processPluginExecutionCommandResult(final Context context,String logTag,final ExecutionCommand executionCommand){\n  if (executionCommand == null)   return;\n  logTag=DataUtils.getDefaultIfNull(logTag,LOG_TAG);\n  Error error=null;\n  ResultData resultData=executionCommand.resultData;\n  if (!executionCommand.hasExecuted()) {\n    Logger.logWarn(logTag,executionCommand.getCommandIdAndLabelLogString() + \": Ignoring call to processPluginExecutionCommandResult() since the execution command state is not higher than the ExecutionState.EXECUTED\");\n    return;\n  }\n  boolean isPluginExecutionCommandWithPendingResult=executionCommand.isPluginExecutionCommandWithPendingResult();\n  boolean isExecutionCommandLoggingEnabled=Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);\n  Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,!isPluginExecutionCommandWithPendingResult,isExecutionCommandLoggingEnabled));\n  if (isPluginExecutionCommandWithPendingResult) {\n    if (executionCommand.resultConfig.resultPendingIntent != null)     setPluginResultPendingIntentVariables(executionCommand);\n    if (executionCommand.resultConfig.resultDirectoryPath != null)     setPluginResultDirectoryVariables(executionCommand);\n    error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);\n    if (error != null) {\n      resultData.setStateFailed(error);\n      Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));\n      sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);\n    }\n  }\n  if (!executionCommand.isStateFailed() && error == null)   executionCommand.setState(ExecutionCommand.ExecutionState.SUCCESS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 94,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 156
      },
      "nodeContext" : "sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 97,
    "startColumnNumber" : 20,
    "endLineNumber" : 97,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}