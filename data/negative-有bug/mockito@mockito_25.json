{
  "id" : 25,
  "expression" : "anyMapOf(String.class,String.class)",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/matchers/NewMatchersTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "anyMapOf(String.class,String.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 52,
      "startColumnNumber" : 25,
      "endLineNumber" : 52,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 52,
        "startColumnNumber" : 13,
        "endLineNumber" : 52,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mock.forMap(anyMapOf(String.class,String.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 63
      },
      "nodeContext" : "when(mock.forMap(anyMapOf(String.class,String.class)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 85
      },
      "nodeContext" : "when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 51,
        "startColumnNumber" : 36,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n  assertEquals(\"matched\",mock.forMap(new HashMap<String,String>()));\n  assertEquals(null,mock.forMap(null));\n  verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldAllowAnyMap(){\n  when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n  assertEquals(\"matched\",mock.forMap(new HashMap<String,String>()));\n  assertEquals(null,mock.forMap(null));\n  verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 86
      },
      "nodeContext" : "when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "anyMapOf(String.class,String.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 57,
      "startColumnNumber" : 38,
      "endLineNumber" : 57,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 75
      },
      "nodeContext" : "verify(mock,times(1)).forMap(anyMapOf(String.class,String.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 76
      },
      "nodeContext" : "verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 51,
        "startColumnNumber" : 36,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n  assertEquals(\"matched\",mock.forMap(new HashMap<String,String>()));\n  assertEquals(null,mock.forMap(null));\n  verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldAllowAnyMap(){\n  when(mock.forMap(anyMapOf(String.class,String.class))).thenReturn(\"matched\");\n  assertEquals(\"matched\",mock.forMap(new HashMap<String,String>()));\n  assertEquals(null,mock.forMap(null));\n  verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 76
      },
      "nodeContext" : "verify(mock,times(1)).forMap(anyMapOf(String.class,String.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 52,
    "startColumnNumber" : 25,
    "endLineNumber" : 52,
    "endColumnNumber" : 61
  }, {
    "charLength" : 36,
    "startLineNumber" : 57,
    "startColumnNumber" : 38,
    "endLineNumber" : 57,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}