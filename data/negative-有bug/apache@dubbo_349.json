{
  "id" : 349,
  "expression" : "((ParameterizedType)genericReturnType5).getActualTypeArguments()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((ParameterizedType)genericReturnType5).getActualTypeArguments()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 204,
      "startColumnNumber" : 32,
      "endLineNumber" : 204,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 7,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 204,
        "startColumnNumber" : 32,
        "endLineNumber" : 204,
        "endColumnNumber" : 100
      },
      "nodeContext" : "((ParameterizedType)genericReturnType5).getActualTypeArguments()[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Assertions.assertEquals(((ParameterizedType)genericReturnType5).getActualTypeArguments()[0],types5[1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 113
      },
      "nodeContext" : "Assertions.assertEquals(((ParameterizedType)genericReturnType5).getActualTypeArguments()[0],types5[1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3682,
        "startLineNumber" : 151,
        "startColumnNumber" : 54,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> demoServiceClass=DemoService.class;\n  String serviceName=demoServiceClass.getName();\n  Invoker invoker=mock(Invoker.class);\n  given(invoker.getUrl()).willReturn(URL.valueOf(\"test://127.0.0.1:1/org.apache.dubbo.rpc.support.DemoService?interface=org.apache.dubbo.rpc.support.DemoService\"));\n  RpcInvocation inv=new RpcInvocation(\"testReturnType\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  Type[] types=RpcUtils.getReturnTypes(inv);\n  Assertions.assertNotNull(types);\n  Assertions.assertEquals(2,types.length);\n  Assertions.assertEquals(String.class,types[0]);\n  Assertions.assertEquals(String.class,types[1]);\n  Assertions.assertArrayEquals(types,inv.getReturnTypes());\n  RpcInvocation inv1=new RpcInvocation(\"testReturnType1\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types1=RpcUtils.getReturnTypes(inv1);\n  Assertions.assertNotNull(types1);\n  Assertions.assertEquals(2,types1.length);\n  Assertions.assertEquals(List.class,types1[0]);\n  Assertions.assertEquals(demoServiceClass.getMethod(\"testReturnType1\",String.class).getGenericReturnType(),types1[1]);\n  Assertions.assertArrayEquals(types1,inv1.getReturnTypes());\n  RpcInvocation inv2=new RpcInvocation(\"testReturnType2\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types2=RpcUtils.getReturnTypes(inv2);\n  Assertions.assertNotNull(types2);\n  Assertions.assertEquals(2,types2.length);\n  Assertions.assertEquals(String.class,types2[0]);\n  Assertions.assertEquals(String.class,types2[1]);\n  Assertions.assertArrayEquals(types2,inv2.getReturnTypes());\n  RpcInvocation inv3=new RpcInvocation(\"testReturnType3\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types3=RpcUtils.getReturnTypes(inv3);\n  Assertions.assertNotNull(types3);\n  Assertions.assertEquals(2,types3.length);\n  Assertions.assertEquals(List.class,types3[0]);\n  java.lang.reflect.Type genericReturnType3=demoServiceClass.getMethod(\"testReturnType3\",String.class).getGenericReturnType();\n  Assertions.assertEquals(((ParameterizedType)genericReturnType3).getActualTypeArguments()[0],types3[1]);\n  Assertions.assertArrayEquals(types3,inv3.getReturnTypes());\n  RpcInvocation inv4=new RpcInvocation(\"testReturnType4\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types4=RpcUtils.getReturnTypes(inv4);\n  Assertions.assertNotNull(types4);\n  Assertions.assertEquals(2,types4.length);\n  Assertions.assertNull(types4[0]);\n  Assertions.assertNull(types4[1]);\n  Assertions.assertArrayEquals(types4,inv4.getReturnTypes());\n  RpcInvocation inv5=new RpcInvocation(\"testReturnType5\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types5=RpcUtils.getReturnTypes(inv5);\n  Assertions.assertNotNull(types5);\n  Assertions.assertEquals(2,types5.length);\n  Assertions.assertEquals(Map.class,types5[0]);\n  java.lang.reflect.Type genericReturnType5=demoServiceClass.getMethod(\"testReturnType5\",String.class).getGenericReturnType();\n  Assertions.assertEquals(((ParameterizedType)genericReturnType5).getActualTypeArguments()[0],types5[1]);\n  Assertions.assertArrayEquals(types5,inv5.getReturnTypes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 591,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3742,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGetReturnTypes() throws Exception {\n  Class<?> demoServiceClass=DemoService.class;\n  String serviceName=demoServiceClass.getName();\n  Invoker invoker=mock(Invoker.class);\n  given(invoker.getUrl()).willReturn(URL.valueOf(\"test://127.0.0.1:1/org.apache.dubbo.rpc.support.DemoService?interface=org.apache.dubbo.rpc.support.DemoService\"));\n  RpcInvocation inv=new RpcInvocation(\"testReturnType\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  Type[] types=RpcUtils.getReturnTypes(inv);\n  Assertions.assertNotNull(types);\n  Assertions.assertEquals(2,types.length);\n  Assertions.assertEquals(String.class,types[0]);\n  Assertions.assertEquals(String.class,types[1]);\n  Assertions.assertArrayEquals(types,inv.getReturnTypes());\n  RpcInvocation inv1=new RpcInvocation(\"testReturnType1\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types1=RpcUtils.getReturnTypes(inv1);\n  Assertions.assertNotNull(types1);\n  Assertions.assertEquals(2,types1.length);\n  Assertions.assertEquals(List.class,types1[0]);\n  Assertions.assertEquals(demoServiceClass.getMethod(\"testReturnType1\",String.class).getGenericReturnType(),types1[1]);\n  Assertions.assertArrayEquals(types1,inv1.getReturnTypes());\n  RpcInvocation inv2=new RpcInvocation(\"testReturnType2\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types2=RpcUtils.getReturnTypes(inv2);\n  Assertions.assertNotNull(types2);\n  Assertions.assertEquals(2,types2.length);\n  Assertions.assertEquals(String.class,types2[0]);\n  Assertions.assertEquals(String.class,types2[1]);\n  Assertions.assertArrayEquals(types2,inv2.getReturnTypes());\n  RpcInvocation inv3=new RpcInvocation(\"testReturnType3\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types3=RpcUtils.getReturnTypes(inv3);\n  Assertions.assertNotNull(types3);\n  Assertions.assertEquals(2,types3.length);\n  Assertions.assertEquals(List.class,types3[0]);\n  java.lang.reflect.Type genericReturnType3=demoServiceClass.getMethod(\"testReturnType3\",String.class).getGenericReturnType();\n  Assertions.assertEquals(((ParameterizedType)genericReturnType3).getActualTypeArguments()[0],types3[1]);\n  Assertions.assertArrayEquals(types3,inv3.getReturnTypes());\n  RpcInvocation inv4=new RpcInvocation(\"testReturnType4\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types4=RpcUtils.getReturnTypes(inv4);\n  Assertions.assertNotNull(types4);\n  Assertions.assertEquals(2,types4.length);\n  Assertions.assertNull(types4[0]);\n  Assertions.assertNull(types4[1]);\n  Assertions.assertArrayEquals(types4,inv4.getReturnTypes());\n  RpcInvocation inv5=new RpcInvocation(\"testReturnType5\",serviceName,\"\",new Class<?>[]{String.class},null,null,invoker,null);\n  java.lang.reflect.Type[] types5=RpcUtils.getReturnTypes(inv5);\n  Assertions.assertNotNull(types5);\n  Assertions.assertEquals(2,types5.length);\n  Assertions.assertEquals(Map.class,types5[0]);\n  java.lang.reflect.Type genericReturnType5=demoServiceClass.getMethod(\"testReturnType5\",String.class).getGenericReturnType();\n  Assertions.assertEquals(((ParameterizedType)genericReturnType5).getActualTypeArguments()[0],types5[1]);\n  Assertions.assertArrayEquals(types5,inv5.getReturnTypes());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 599,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 113
      },
      "nodeContext" : "Assertions.assertEquals(((ParameterizedType)genericReturnType5).getActualTypeArguments()[0],types5[1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "java.lang.reflect.Type[]"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 204,
    "startColumnNumber" : 32,
    "endLineNumber" : 204,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}