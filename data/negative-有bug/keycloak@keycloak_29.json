{
  "id" : 29,
  "expression" : "connectionTimeout != null",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/model/map-ldap/src/main/java/org/keycloak/models/map/storage/ldap/store/LdapMapContextManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "connectionTimeout != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 218,
      "startColumnNumber" : 12,
      "endLineNumber" : 218,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 69
      },
      "nodeContext" : "connectionTimeout != null && !connectionTimeout.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 218,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (connectionTimeout != null && !connectionTimeout.isEmpty()) {\n  env.put(\"com.sun.jndi.ldap.connect.timeout\",connectionTimeout);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2513,
        "startLineNumber" : 192,
        "startColumnNumber" : 104,
        "endLineNumber" : 252,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMap<String,Object> env=new HashMap<>();\n  env.put(Context.INITIAL_CONTEXT_FACTORY,ldapMapConfig.getFactoryName());\n  String url=ldapMapConfig.getConnectionUrl();\n  if (url != null) {\n    env.put(Context.PROVIDER_URL,url);\n  }\n else {\n    logger.warn(\"LDAP URL is null. LDAPOperationManager won't work correctly\");\n  }\n  if (!ldapMapConfig.isStartTls()) {\n    String useTruststoreSpi=ldapMapConfig.getUseTruststoreSpi();\n    LDAPConstants.setTruststoreSpiIfNeeded(useTruststoreSpi,url,env);\n  }\n  String connectionPooling=ldapMapConfig.getConnectionPooling();\n  if (connectionPooling != null) {\n    env.put(\"com.sun.jndi.ldap.connect.pool\",connectionPooling);\n  }\n  String connectionTimeout=ldapMapConfig.getConnectionTimeout();\n  if (connectionTimeout != null && !connectionTimeout.isEmpty()) {\n    env.put(\"com.sun.jndi.ldap.connect.timeout\",connectionTimeout);\n  }\n  String readTimeout=ldapMapConfig.getReadTimeout();\n  if (readTimeout != null && !readTimeout.isEmpty()) {\n    env.put(\"com.sun.jndi.ldap.read.timeout\",readTimeout);\n  }\n  Properties additionalProperties=ldapMapConfig.getAdditionalConnectionProperties();\n  if (additionalProperties != null) {\n    for (    Object key : additionalProperties.keySet()) {\n      env.put(key.toString(),additionalProperties.getProperty(key.toString()));\n    }\n  }\n  StringBuilder binaryAttrsBuilder=new StringBuilder();\n  if (ldapMapConfig.isObjectGUID()) {\n    binaryAttrsBuilder.append(LDAPConstants.OBJECT_GUID).append(\" \");\n  }\n  if (ldapMapConfig.isEdirectory()) {\n    binaryAttrsBuilder.append(LDAPConstants.NOVELL_EDIRECTORY_GUID).append(\" \");\n  }\n  for (  String attrName : ldapMapConfig.getBinaryAttributeNames()) {\n    binaryAttrsBuilder.append(attrName).append(\" \");\n  }\n  String binaryAttrs=binaryAttrsBuilder.toString().trim();\n  if (!binaryAttrs.isEmpty()) {\n    env.put(\"java.naming.ldap.attributes.binary\",binaryAttrs);\n  }\n  return new Hashtable<>(env);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2992,
        "startLineNumber" : 186,
        "startColumnNumber" : 4,
        "endLineNumber" : 252,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method is used for admin connection and user authentication. Hence it returns just connection properties NOT related to authentication (properties like bindType, bindDn, bindPassword). Caller of this method needs to fill auth-related connection properties based on the fact whether he does admin connection or user authentication\n */\npublic static Hashtable<Object,Object> getNonAuthConnectionProperties(LdapMapConfig ldapMapConfig){\n  HashMap<String,Object> env=new HashMap<>();\n  env.put(Context.INITIAL_CONTEXT_FACTORY,ldapMapConfig.getFactoryName());\n  String url=ldapMapConfig.getConnectionUrl();\n  if (url != null) {\n    env.put(Context.PROVIDER_URL,url);\n  }\n else {\n    logger.warn(\"LDAP URL is null. LDAPOperationManager won't work correctly\");\n  }\n  if (!ldapMapConfig.isStartTls()) {\n    String useTruststoreSpi=ldapMapConfig.getUseTruststoreSpi();\n    LDAPConstants.setTruststoreSpiIfNeeded(useTruststoreSpi,url,env);\n  }\n  String connectionPooling=ldapMapConfig.getConnectionPooling();\n  if (connectionPooling != null) {\n    env.put(\"com.sun.jndi.ldap.connect.pool\",connectionPooling);\n  }\n  String connectionTimeout=ldapMapConfig.getConnectionTimeout();\n  if (connectionTimeout != null && !connectionTimeout.isEmpty()) {\n    env.put(\"com.sun.jndi.ldap.connect.timeout\",connectionTimeout);\n  }\n  String readTimeout=ldapMapConfig.getReadTimeout();\n  if (readTimeout != null && !readTimeout.isEmpty()) {\n    env.put(\"com.sun.jndi.ldap.read.timeout\",readTimeout);\n  }\n  Properties additionalProperties=ldapMapConfig.getAdditionalConnectionProperties();\n  if (additionalProperties != null) {\n    for (    Object key : additionalProperties.keySet()) {\n      env.put(key.toString(),additionalProperties.getProperty(key.toString()));\n    }\n  }\n  StringBuilder binaryAttrsBuilder=new StringBuilder();\n  if (ldapMapConfig.isObjectGUID()) {\n    binaryAttrsBuilder.append(LDAPConstants.OBJECT_GUID).append(\" \");\n  }\n  if (ldapMapConfig.isEdirectory()) {\n    binaryAttrsBuilder.append(LDAPConstants.NOVELL_EDIRECTORY_GUID).append(\" \");\n  }\n  for (  String attrName : ldapMapConfig.getBinaryAttributeNames()) {\n    binaryAttrsBuilder.append(attrName).append(\" \");\n  }\n  String binaryAttrs=binaryAttrsBuilder.toString().trim();\n  if (!binaryAttrs.isEmpty()) {\n    env.put(\"java.naming.ldap.attributes.binary\",binaryAttrs);\n  }\n  return new Hashtable<>(env);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 274,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 218,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 69
      },
      "nodeContext" : "connectionTimeout != null && !connectionTimeout.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 218,
    "startColumnNumber" : 12,
    "endLineNumber" : 218,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}