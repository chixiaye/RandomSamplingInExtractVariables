{
  "id" : 203,
  "expression" : "line",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/TestUtils.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "line",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 72,
      "startColumnNumber" : 6,
      "endLineNumber" : 72,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "line[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 20
      },
      "nodeContext" : "line[i]=rand",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 21
      },
      "nodeContext" : "line[i]=rand;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 66,
        "startColumnNumber" : 37,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  byte rand;\n  do {\n    rand=randomByte();\n  }\n while (avoid && rand == avoidByte);\n  line[i]=rand;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < length; i++) {\n  byte rand;\n  do {\n    rand=randomByte();\n  }\n while (avoid && rand == avoidByte);\n  line[i]=rand;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 64,
        "startColumnNumber" : 82,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] line=new byte[length];\n  for (int i=0; i < length; i++) {\n    byte rand;\n    do {\n      rand=randomByte();\n    }\n while (avoid && rand == avoidByte);\n    line[i]=rand;\n  }\n  return line;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 598,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create an array of random bytes\n * @param length The length of the created array\n * @param avoid If true, the resulting array will not contain avoidByte\n * @param avoidByte A byte that is not to be included in the resulting array\n * @return an array of random bytes\n */\npublic static byte[] randomByteArray(int length,boolean avoid,byte avoidByte){\n  byte[] line=new byte[length];\n  for (int i=0; i < length; i++) {\n    byte rand;\n    do {\n      rand=randomByte();\n    }\n while (avoid && rand == avoidByte);\n    line[i]=rand;\n  }\n  return line;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 65,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 72,
        "endColumnNumber" : 21
      },
      "nodeContext" : "line[i]=rand;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  }, {
    "nodeContext" : "line",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 11,
      "endLineNumber" : 74,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return line;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 64,
        "startColumnNumber" : 82,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] line=new byte[length];\n  for (int i=0; i < length; i++) {\n    byte rand;\n    do {\n      rand=randomByte();\n    }\n while (avoid && rand == avoidByte);\n    line[i]=rand;\n  }\n  return line;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 598,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create an array of random bytes\n * @param length The length of the created array\n * @param avoid If true, the resulting array will not contain avoidByte\n * @param avoidByte A byte that is not to be included in the resulting array\n * @return an array of random bytes\n */\npublic static byte[] randomByteArray(int length,boolean avoid,byte avoidByte){\n  byte[] line=new byte[length];\n  for (int i=0; i < length; i++) {\n    byte rand;\n    do {\n      rand=randomByte();\n    }\n while (avoid && rand == avoidByte);\n    line[i]=rand;\n  }\n  return line;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 65,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return line;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 72,
    "startColumnNumber" : 6,
    "endLineNumber" : 72,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 11,
    "endLineNumber" : 74,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}