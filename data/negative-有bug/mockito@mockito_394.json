{
  "id" : 394,
  "expression" : "privateLookup",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "privateLookup",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 108,
      "startColumnNumber" : 63,
      "endLineNumber" : 108,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 108,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 77
      },
      "nodeContext" : "ClassLoadingStrategy.UsingLookup.of(privateLookup)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 709,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Object privateLookup;\n  try {\n    privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n  }\n catch (  InvocationTargetException exception) {\n    if (exception.getCause() instanceof IllegalAccessException) {\n      return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n    }\n else {\n      throw exception.getCause();\n    }\n  }\n  return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 96,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Object privateLookup;\n  try {\n    privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n  }\n catch (  InvocationTargetException exception) {\n    if (exception.getCause() instanceof IllegalAccessException) {\n      return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n    }\n else {\n      throw exception.getCause();\n    }\n  }\n  return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n}\n catch (Throwable exception) {\n  throw new MockitoException(join(\"The Java module system prevents Mockito from defining a mock class in the same package as \" + mockedType,\"\",\"To overcome this, you must open and export the mocked type to Mockito.\",\"Remember that you can also do so programmatically if the mocked class is defined by the same module as your test code\",exception));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1429,
        "startLineNumber" : 95,
        "startColumnNumber" : 27,
        "endLineNumber" : 119,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    Object privateLookup;\n    try {\n      privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n    }\n catch (    InvocationTargetException exception) {\n      if (exception.getCause() instanceof IllegalAccessException) {\n        return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n      }\n else {\n        throw exception.getCause();\n      }\n    }\n    return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n  }\n catch (  Throwable exception) {\n    throw new MockitoException(join(\"The Java module system prevents Mockito from defining a mock class in the same package as \" + mockedType,\"\",\"To overcome this, you must open and export the mocked type to Mockito.\",\"Remember that you can also do so programmatically if the mocked class is defined by the same module as your test code\",exception));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (localMock) {\n  try {\n    Object privateLookup;\n    try {\n      privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n    }\n catch (    InvocationTargetException exception) {\n      if (exception.getCause() instanceof IllegalAccessException) {\n        return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n      }\n else {\n        throw exception.getCause();\n      }\n    }\n    return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n  }\n catch (  Throwable exception) {\n    throw new MockitoException(join(\"The Java module system prevents Mockito from defining a mock class in the same package as \" + mockedType,\"\",\"To overcome this, you must open and export the mocked type to Mockito.\",\"Remember that you can also do so programmatically if the mocked class is defined by the same module as your test code\",exception));\n  }\n}\n else if (classLoader == InjectionBase.class.getClassLoader()) {\n  return ClassLoadingStrategy.UsingLookup.of(codegenLookup);\n}\n else {\n  return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 105,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1748,
        "startLineNumber" : 94,
        "startColumnNumber" : 81,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (localMock) {\n    try {\n      Object privateLookup;\n      try {\n        privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n      }\n catch (      InvocationTargetException exception) {\n        if (exception.getCause() instanceof IllegalAccessException) {\n          return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n        }\n else {\n          throw exception.getCause();\n        }\n      }\n      return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n    }\n catch (    Throwable exception) {\n      throw new MockitoException(join(\"The Java module system prevents Mockito from defining a mock class in the same package as \" + mockedType,\"\",\"To overcome this, you must open and export the mocked type to Mockito.\",\"Remember that you can also do so programmatically if the mocked class is defined by the same module as your test code\",exception));\n    }\n  }\n else   if (classLoader == InjectionBase.class.getClassLoader()) {\n    return ClassLoadingStrategy.UsingLookup.of(codegenLookup);\n  }\n else {\n    return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1907,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public ClassLoadingStrategy<ClassLoader> resolveStrategy(Class<?> mockedType,ClassLoader classLoader,boolean localMock){\n  if (localMock) {\n    try {\n      Object privateLookup;\n      try {\n        privateLookup=privateLookupIn.invoke(null,mockedType,lookup);\n      }\n catch (      InvocationTargetException exception) {\n        if (exception.getCause() instanceof IllegalAccessException) {\n          return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n        }\n else {\n          throw exception.getCause();\n        }\n      }\n      return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n    }\n catch (    Throwable exception) {\n      throw new MockitoException(join(\"The Java module system prevents Mockito from defining a mock class in the same package as \" + mockedType,\"\",\"To overcome this, you must open and export the mocked type to Mockito.\",\"Remember that you can also do so programmatically if the mocked class is defined by the same module as your test code\",exception));\n    }\n  }\n else   if (classLoader == InjectionBase.class.getClassLoader()) {\n    return ClassLoadingStrategy.UsingLookup.of(codegenLookup);\n  }\n else {\n    return ClassLoadingStrategy.Default.WRAPPER.with(mockedType.getProtectionDomain());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 108,
        "startColumnNumber" : 20,
        "endLineNumber" : 108,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return ClassLoadingStrategy.UsingLookup.of(privateLookup);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 108,
    "startColumnNumber" : 63,
    "endLineNumber" : 108,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}