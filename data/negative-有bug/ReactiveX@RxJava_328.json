{
  "id" : 328,
  "expression" : "\"No subscription\"",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOtherTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"No subscription\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 53,
      "startColumnNumber" : 28,
      "endLineNumber" : 53,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(\"No subscription\",1,subscribed.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(\"No subscription\",1,subscribed.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 28,
        "startColumnNumber" : 46,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishProcessor<Object> other=PublishProcessor.create();\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  final AtomicInteger subscribed=new AtomicInteger();\n  Flowable.just(1).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      subscribed.getAndIncrement();\n    }\n  }\n).delaySubscription(other).subscribe(ts);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n  ts.assertNoValues();\n  Assert.assertEquals(\"Premature subscription\",0,subscribed.get());\n  other.onNext(1);\n  Assert.assertEquals(\"No subscription\",1,subscribed.get());\n  ts.assertValue(1);\n  ts.assertNoErrors();\n  ts.assertComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNoPrematureSubscription(){\n  PublishProcessor<Object> other=PublishProcessor.create();\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  final AtomicInteger subscribed=new AtomicInteger();\n  Flowable.just(1).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      subscribed.getAndIncrement();\n    }\n  }\n).delaySubscription(other).subscribe(ts);\n  ts.assertNotComplete();\n  ts.assertNoErrors();\n  ts.assertNoValues();\n  Assert.assertEquals(\"Premature subscription\",0,subscribed.get());\n  other.onNext(1);\n  Assert.assertEquals(\"No subscription\",1,subscribed.get());\n  ts.assertValue(1);\n  ts.assertNoErrors();\n  ts.assertComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Assert.assertEquals(\"No subscription\",1,subscribed.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 53,
    "startColumnNumber" : 28,
    "endLineNumber" : 53,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}