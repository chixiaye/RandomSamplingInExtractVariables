{
  "id" : 76,
  "expression" : "(out.features & SerializerFeature.WriteNullListAsEmpty.mask)",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/ListSerializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(out.features & SerializerFeature.WriteNullListAsEmpty.mask)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 46,
      "startColumnNumber" : 16,
      "endLineNumber" : 46,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n  out.write(\"[]\");\n}\n else {\n  out.writeNull();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 45,
        "startColumnNumber" : 28,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n    out.write(\"[]\");\n  }\n else {\n    out.writeNull();\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (object == null) {\n  if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n    out.write(\"[]\");\n  }\n else {\n    out.writeNull();\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6510,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.out;\n  boolean writeClassName=(out.features & SerializerFeature.WriteClassName.mask) != 0;\n  Type elementType=null;\n  if (writeClassName) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  List<?> list=(List<?>)object;\n  final int size=list.size();\n  if (size == 0) {\n    out.append(\"[]\");\n    return;\n  }\n  SerialContext context=serializer.context;\n  if ((out.features & SerializerFeature.DisableCircularReferenceDetect.mask) == 0) {\n    serializer.context=new SerialContext(context,object,fieldName,0);\n    if (serializer.references == null) {\n      serializer.references=new IdentityHashMap<Object,SerialContext>();\n    }\n    serializer.references.put(object,context);\n  }\n  ObjectSerializer itemSerializer=null;\n  try {\n    if ((out.features & SerializerFeature.PrettyFormat.mask) != 0) {\n      out.write('[');\n      serializer.incrementIndent();\n      for (int i=0; i < size; ++i) {\n        Object item=list.get(i);\n        if (i != 0) {\n          out.write(',');\n        }\n        serializer.println();\n        if (item != null) {\n          if (serializer.references != null && serializer.references.containsKey(item)) {\n            serializer.writeReference(item);\n          }\n else {\n            itemSerializer=serializer.config.get(item.getClass());\n            SerialContext itemContext=new SerialContext(context,object,fieldName,0);\n            serializer.context=itemContext;\n            itemSerializer.write(serializer,item,i,elementType);\n          }\n        }\n else {\n          serializer.out.writeNull();\n        }\n      }\n      serializer.decrementIdent();\n      serializer.println();\n      out.write(']');\n      return;\n    }\n{\n      int newcount=out.count + 1;\n      if (newcount > out.buf.length) {\n        if (out.writer == null) {\n          out.expandCapacity(newcount);\n        }\n else {\n          out.flush();\n          newcount=1;\n        }\n      }\n      out.buf[out.count]='[';\n      out.count=newcount;\n    }\n    for (int i=0; i < list.size(); ++i) {\n      Object item=list.get(i);\n      if (i != 0) {\n{\n          int newcount=out.count + 1;\n          if (newcount > out.buf.length) {\n            if (out.writer == null) {\n              out.expandCapacity(newcount);\n            }\n else {\n              out.flush();\n              newcount=1;\n            }\n          }\n          out.buf[out.count]=',';\n          out.count=newcount;\n        }\n      }\n      if (item == null) {\n        out.append(\"null\");\n      }\n else {\n        Class<?> clazz=item.getClass();\n        if (clazz == Integer.class) {\n          out.writeInt(((Integer)item).intValue());\n        }\n else         if (clazz == Long.class) {\n          long val=((Long)item).longValue();\n          if (writeClassName) {\n            out.writeLong(val);\n            out.write('L');\n          }\n else {\n            out.writeLong(val);\n          }\n        }\n else         if (clazz == String.class) {\n          String itemStr=(String)item;\n          if ((out.features & SerializerFeature.UseSingleQuotes.mask) != 0) {\n            out.writeStringWithSingleQuote(itemStr);\n          }\n else {\n            out.writeStringWithDoubleQuote(itemStr,(char)0,true);\n          }\n        }\n else {\n          if ((out.features & SerializerFeature.DisableCircularReferenceDetect.mask) == 0) {\n            SerialContext itemContext=new SerialContext(context,object,fieldName,0);\n            serializer.context=itemContext;\n          }\n          if (serializer.references != null && serializer.references.containsKey(item)) {\n            serializer.writeReference(item);\n          }\n else {\n            itemSerializer=serializer.config.get(item.getClass());\n            itemSerializer.write(serializer,item,i,elementType);\n          }\n        }\n      }\n    }\n{\n      int newcount=out.count + 1;\n      if (newcount > out.buf.length) {\n        if (out.writer == null) {\n          out.expandCapacity(newcount);\n        }\n else {\n          out.flush();\n          newcount=1;\n        }\n      }\n      out.buf[out.count]=']';\n      out.count=newcount;\n    }\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 726,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6725,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public final void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.out;\n  boolean writeClassName=(out.features & SerializerFeature.WriteClassName.mask) != 0;\n  Type elementType=null;\n  if (writeClassName) {\n    if (fieldType instanceof ParameterizedType) {\n      ParameterizedType param=(ParameterizedType)fieldType;\n      elementType=param.getActualTypeArguments()[0];\n    }\n  }\n  if (object == null) {\n    if ((out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0) {\n      out.write(\"[]\");\n    }\n else {\n      out.writeNull();\n    }\n    return;\n  }\n  List<?> list=(List<?>)object;\n  final int size=list.size();\n  if (size == 0) {\n    out.append(\"[]\");\n    return;\n  }\n  SerialContext context=serializer.context;\n  if ((out.features & SerializerFeature.DisableCircularReferenceDetect.mask) == 0) {\n    serializer.context=new SerialContext(context,object,fieldName,0);\n    if (serializer.references == null) {\n      serializer.references=new IdentityHashMap<Object,SerialContext>();\n    }\n    serializer.references.put(object,context);\n  }\n  ObjectSerializer itemSerializer=null;\n  try {\n    if ((out.features & SerializerFeature.PrettyFormat.mask) != 0) {\n      out.write('[');\n      serializer.incrementIndent();\n      for (int i=0; i < size; ++i) {\n        Object item=list.get(i);\n        if (i != 0) {\n          out.write(',');\n        }\n        serializer.println();\n        if (item != null) {\n          if (serializer.references != null && serializer.references.containsKey(item)) {\n            serializer.writeReference(item);\n          }\n else {\n            itemSerializer=serializer.config.get(item.getClass());\n            SerialContext itemContext=new SerialContext(context,object,fieldName,0);\n            serializer.context=itemContext;\n            itemSerializer.write(serializer,item,i,elementType);\n          }\n        }\n else {\n          serializer.out.writeNull();\n        }\n      }\n      serializer.decrementIdent();\n      serializer.println();\n      out.write(']');\n      return;\n    }\n{\n      int newcount=out.count + 1;\n      if (newcount > out.buf.length) {\n        if (out.writer == null) {\n          out.expandCapacity(newcount);\n        }\n else {\n          out.flush();\n          newcount=1;\n        }\n      }\n      out.buf[out.count]='[';\n      out.count=newcount;\n    }\n    for (int i=0; i < list.size(); ++i) {\n      Object item=list.get(i);\n      if (i != 0) {\n{\n          int newcount=out.count + 1;\n          if (newcount > out.buf.length) {\n            if (out.writer == null) {\n              out.expandCapacity(newcount);\n            }\n else {\n              out.flush();\n              newcount=1;\n            }\n          }\n          out.buf[out.count]=',';\n          out.count=newcount;\n        }\n      }\n      if (item == null) {\n        out.append(\"null\");\n      }\n else {\n        Class<?> clazz=item.getClass();\n        if (clazz == Integer.class) {\n          out.writeInt(((Integer)item).intValue());\n        }\n else         if (clazz == Long.class) {\n          long val=((Long)item).longValue();\n          if (writeClassName) {\n            out.writeLong(val);\n            out.write('L');\n          }\n else {\n            out.writeLong(val);\n          }\n        }\n else         if (clazz == String.class) {\n          String itemStr=(String)item;\n          if ((out.features & SerializerFeature.UseSingleQuotes.mask) != 0) {\n            out.writeStringWithSingleQuote(itemStr);\n          }\n else {\n            out.writeStringWithDoubleQuote(itemStr,(char)0,true);\n          }\n        }\n else {\n          if ((out.features & SerializerFeature.DisableCircularReferenceDetect.mask) == 0) {\n            SerialContext itemContext=new SerialContext(context,object,fieldName,0);\n            serializer.context=itemContext;\n          }\n          if (serializer.references != null && serializer.references.containsKey(item)) {\n            serializer.writeReference(item);\n          }\n else {\n            itemSerializer=serializer.config.get(item.getClass());\n            itemSerializer.write(serializer,item,i,elementType);\n          }\n        }\n      }\n    }\n{\n      int newcount=out.count + 1;\n      if (newcount > out.buf.length) {\n        if (out.writer == null) {\n          out.expandCapacity(newcount);\n        }\n else {\n          out.flush();\n          newcount=1;\n        }\n      }\n      out.buf[out.count]=']';\n      out.count=newcount;\n    }\n  }\n  finally {\n    serializer.context=context;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 749,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(out.features & SerializerFeature.WriteNullListAsEmpty.mask) != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 46,
    "startColumnNumber" : 16,
    "endLineNumber" : 46,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}