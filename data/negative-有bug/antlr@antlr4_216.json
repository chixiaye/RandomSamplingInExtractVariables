{
  "id" : 216,
  "expression" : "firstFile",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/JavaRunner.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "firstFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 78,
      "startColumnNumber" : 7,
      "endLineNumber" : 78,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 78,
        "startColumnNumber" : 7,
        "endLineNumber" : 78,
        "endColumnNumber" : 25
      },
      "nodeContext" : "firstFile.isParser",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 25
      },
      "nodeContext" : "!firstFile.isParser",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!firstFile.isParser) {\n  FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n  try {\n    replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n  }\n catch (  IOException e) {\n    return new JavaCompiledState(generatedState,null,null,null,e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2327,
        "startLineNumber" : 72,
        "startColumnNumber" : 91,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String tempTestDir=getTempDirPath();\n  List<GeneratedFile> generatedFiles=generatedState.generatedFiles;\n  GeneratedFile firstFile=generatedFiles.get(0);\n  if (!firstFile.isParser) {\n    FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n    try {\n      replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n    }\n catch (    IOException e) {\n      return new JavaCompiledState(generatedState,null,null,null,e);\n    }\n  }\n  if (generatedFiles.stream().anyMatch(file -> file.isParser)) {\n    FileUtils.writeFile(tempTestDir,runtimeTestParserName + \".java\",testParserContent);\n  }\n  ClassLoader loader=null;\n  Class<? extends Lexer> lexer=null;\n  Class<? extends Parser> parser=null;\n  Exception exception=null;\n  try {\n    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);\n    ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();\n    List<File> files=new ArrayList<>();\n    File f=new File(tempTestDir,getTestFileWithExt());\n    files.add(f);\n    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);\n    Iterable<String> compileOptions=Arrays.asList(\"-g\",\"-source\",\"1.8\",\"-target\",\"1.8\",\"-implicit:class\",\"-Xlint:-options\",\"-d\",tempTestDir,\"-cp\",tempTestDir + PathSeparator + classPath);\n    JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,null,compileOptions,null,compilationUnits);\n    task.call();\n    loader=new URLClassLoader(new URL[]{new File(tempTestDir).toURI().toURL()},systemClassLoader);\n    if (runOptions.lexerName != null) {\n      lexer=loader.loadClass(runOptions.lexerName).asSubclass(Lexer.class);\n    }\n    if (runOptions.parserName != null) {\n      parser=loader.loadClass(runOptions.parserName).asSubclass(Parser.class);\n    }\n  }\n catch (  Exception ex) {\n    exception=ex;\n  }\n  return new JavaCompiledState(generatedState,loader,lexer,parser,exception);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2429,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected JavaCompiledState compile(RunOptions runOptions,GeneratedState generatedState){\n  String tempTestDir=getTempDirPath();\n  List<GeneratedFile> generatedFiles=generatedState.generatedFiles;\n  GeneratedFile firstFile=generatedFiles.get(0);\n  if (!firstFile.isParser) {\n    FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n    try {\n      replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n    }\n catch (    IOException e) {\n      return new JavaCompiledState(generatedState,null,null,null,e);\n    }\n  }\n  if (generatedFiles.stream().anyMatch(file -> file.isParser)) {\n    FileUtils.writeFile(tempTestDir,runtimeTestParserName + \".java\",testParserContent);\n  }\n  ClassLoader loader=null;\n  Class<? extends Lexer> lexer=null;\n  Class<? extends Parser> parser=null;\n  Exception exception=null;\n  try {\n    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);\n    ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();\n    List<File> files=new ArrayList<>();\n    File f=new File(tempTestDir,getTestFileWithExt());\n    files.add(f);\n    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);\n    Iterable<String> compileOptions=Arrays.asList(\"-g\",\"-source\",\"1.8\",\"-target\",\"1.8\",\"-implicit:class\",\"-Xlint:-options\",\"-d\",tempTestDir,\"-cp\",tempTestDir + PathSeparator + classPath);\n    JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,null,compileOptions,null,compilationUnits);\n    task.call();\n    loader=new URLClassLoader(new URL[]{new File(tempTestDir).toURI().toURL()},systemClassLoader);\n    if (runOptions.lexerName != null) {\n      lexer=loader.loadClass(runOptions.lexerName).asSubclass(Lexer.class);\n    }\n    if (runOptions.parserName != null) {\n      parser=loader.loadClass(runOptions.parserName).asSubclass(Parser.class);\n    }\n  }\n catch (  Exception ex) {\n    exception=ex;\n  }\n  return new JavaCompiledState(generatedState,loader,lexer,parser,exception);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 25
      },
      "nodeContext" : "!firstFile.isParser",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.test.runtime.GeneratedFile"
  }, {
    "nodeContext" : "firstFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 83,
      "startColumnNumber" : 46,
      "endLineNumber" : 83,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 83,
        "startColumnNumber" : 46,
        "endLineNumber" : 83,
        "endColumnNumber" : 60
      },
      "nodeContext" : "firstFile.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 83,
        "startColumnNumber" : 18,
        "endLineNumber" : 83,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Paths.get(getTempDirPath(),firstFile.name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 47
      },
      "nodeContext" : "replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 48
      },
      "nodeContext" : "replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 80,
        "startColumnNumber" : 7,
        "endLineNumber" : 86,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 80,
        "startColumnNumber" : 3,
        "endLineNumber" : 88,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n}\n catch (IOException e) {\n  return new JavaCompiledState(generatedState,null,null,null,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 78,
        "startColumnNumber" : 27,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n  try {\n    replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n  }\n catch (  IOException e) {\n    return new JavaCompiledState(generatedState,null,null,null,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!firstFile.isParser) {\n  FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n  try {\n    replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n  }\n catch (  IOException e) {\n    return new JavaCompiledState(generatedState,null,null,null,e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2327,
        "startLineNumber" : 72,
        "startColumnNumber" : 91,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String tempTestDir=getTempDirPath();\n  List<GeneratedFile> generatedFiles=generatedState.generatedFiles;\n  GeneratedFile firstFile=generatedFiles.get(0);\n  if (!firstFile.isParser) {\n    FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n    try {\n      replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n    }\n catch (    IOException e) {\n      return new JavaCompiledState(generatedState,null,null,null,e);\n    }\n  }\n  if (generatedFiles.stream().anyMatch(file -> file.isParser)) {\n    FileUtils.writeFile(tempTestDir,runtimeTestParserName + \".java\",testParserContent);\n  }\n  ClassLoader loader=null;\n  Class<? extends Lexer> lexer=null;\n  Class<? extends Parser> parser=null;\n  Exception exception=null;\n  try {\n    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);\n    ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();\n    List<File> files=new ArrayList<>();\n    File f=new File(tempTestDir,getTestFileWithExt());\n    files.add(f);\n    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);\n    Iterable<String> compileOptions=Arrays.asList(\"-g\",\"-source\",\"1.8\",\"-target\",\"1.8\",\"-implicit:class\",\"-Xlint:-options\",\"-d\",tempTestDir,\"-cp\",tempTestDir + PathSeparator + classPath);\n    JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,null,compileOptions,null,compilationUnits);\n    task.call();\n    loader=new URLClassLoader(new URL[]{new File(tempTestDir).toURI().toURL()},systemClassLoader);\n    if (runOptions.lexerName != null) {\n      lexer=loader.loadClass(runOptions.lexerName).asSubclass(Lexer.class);\n    }\n    if (runOptions.parserName != null) {\n      parser=loader.loadClass(runOptions.parserName).asSubclass(Parser.class);\n    }\n  }\n catch (  Exception ex) {\n    exception=ex;\n  }\n  return new JavaCompiledState(generatedState,loader,lexer,parser,exception);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2429,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected JavaCompiledState compile(RunOptions runOptions,GeneratedState generatedState){\n  String tempTestDir=getTempDirPath();\n  List<GeneratedFile> generatedFiles=generatedState.generatedFiles;\n  GeneratedFile firstFile=generatedFiles.get(0);\n  if (!firstFile.isParser) {\n    FileUtils.writeFile(tempTestDir,runtimeTestLexerName + \".java\",testLexerContent);\n    try {\n      replaceInFile(Paths.get(getTempDirPath(),firstFile.name),\"extends \" + runtimeTestParserName + \" {\",\"extends \" + runtimeTestLexerName + \" {\");\n    }\n catch (    IOException e) {\n      return new JavaCompiledState(generatedState,null,null,null,e);\n    }\n  }\n  if (generatedFiles.stream().anyMatch(file -> file.isParser)) {\n    FileUtils.writeFile(tempTestDir,runtimeTestParserName + \".java\",testParserContent);\n  }\n  ClassLoader loader=null;\n  Class<? extends Lexer> lexer=null;\n  Class<? extends Parser> parser=null;\n  Exception exception=null;\n  try {\n    StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);\n    ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();\n    List<File> files=new ArrayList<>();\n    File f=new File(tempTestDir,getTestFileWithExt());\n    files.add(f);\n    Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(files);\n    Iterable<String> compileOptions=Arrays.asList(\"-g\",\"-source\",\"1.8\",\"-target\",\"1.8\",\"-implicit:class\",\"-Xlint:-options\",\"-d\",tempTestDir,\"-cp\",tempTestDir + PathSeparator + classPath);\n    JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,null,compileOptions,null,compilationUnits);\n    task.call();\n    loader=new URLClassLoader(new URL[]{new File(tempTestDir).toURI().toURL()},systemClassLoader);\n    if (runOptions.lexerName != null) {\n      lexer=loader.loadClass(runOptions.lexerName).asSubclass(Lexer.class);\n    }\n    if (runOptions.parserName != null) {\n      parser=loader.loadClass(runOptions.parserName).asSubclass(Parser.class);\n    }\n  }\n catch (  Exception ex) {\n    exception=ex;\n  }\n  return new JavaCompiledState(generatedState,loader,lexer,parser,exception);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 83,
        "startColumnNumber" : 18,
        "endLineNumber" : 83,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Paths.get(getTempDirPath(),firstFile.name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.antlr.v4.test.runtime.GeneratedFile"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 78,
    "startColumnNumber" : 7,
    "endLineNumber" : 78,
    "endColumnNumber" : 16
  }, {
    "charLength" : 9,
    "startLineNumber" : 83,
    "startColumnNumber" : 46,
    "endLineNumber" : 83,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}