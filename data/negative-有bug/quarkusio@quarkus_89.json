{
  "id" : 89,
  "expression" : "Capability.OPENTRACING",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/opentelemetry/opentelemetry/deployment/src/main/java/io/quarkus/opentelemetry/deployment/tracing/TracerProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Capability.OPENTRACING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 83,
      "startColumnNumber" : 35,
      "endLineNumber" : 83,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 58
      },
      "nodeContext" : "capabilities.isPresent(Capability.OPENTRACING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 71
      },
      "nodeContext" : "capabilities.isPresent(Capability.OPENTRACING) || capabilities.isPresent(Capability.SMALLRYE_OPENTRACING)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (capabilities.isPresent(Capability.OPENTRACING) || capabilities.isPresent(Capability.SMALLRYE_OPENTRACING)) {\n  throw new ConfigurationException(\"The OpenTelemetry extension tracer can not be used in \" + \"conjunction with either the SmallRye OpenTracing or Jaeger extensions.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 81,
        "startColumnNumber" : 68,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (capabilities.isPresent(Capability.OPENTRACING) || capabilities.isPresent(Capability.SMALLRYE_OPENTRACING)) {\n    throw new ConfigurationException(\"The OpenTelemetry extension tracer can not be used in \" + \"conjunction with either the SmallRye OpenTracing or Jaeger extensions.\");\n  }\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(TracerProducer.class).build());\n  IndexView index=indexBuildItem.getIndex();\n  Collection<String> knownClasses=new HashSet<>();\n  knownClasses.add(ID_GENERATOR.toString());\n  index.getAllKnownImplementors(ID_GENERATOR).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(RESOURCE.toString());\n  index.getAllKnownImplementors(RESOURCE).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SAMPLER.toString());\n  index.getAllKnownImplementors(SAMPLER).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SPAN_EXPORTER.toString());\n  index.getAllKnownImplementors(SPAN_EXPORTER).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SPAN_PROCESSOR.toString());\n  index.getAllKnownImplementors(SPAN_PROCESSOR).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  Set<String> retainProducers=new HashSet<>();\n  for (  AnnotationInstance annotation : index.getAnnotations(DotNames.PRODUCES)) {\n    AnnotationTarget target=annotation.target();\nswitch (target.kind()) {\ncase METHOD:      MethodInfo method=target.asMethod();\n    String returnType=method.returnType().name().toString();\n  if (knownClasses.contains(returnType)) {\n    retainProducers.add(method.declaringClass().name().toString());\n  }\nbreak;\ncase FIELD:FieldInfo field=target.asField();\nString fieldType=field.type().name().toString();\nif (knownClasses.contains(fieldType)) {\nretainProducers.add(field.declaringClass().name().toString());\n}\nbreak;\ndefault:break;\n}\n}\nreturn new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassNamesExclusion(retainProducers));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BuildStep(onlyIf=TracerEnabled.class) UnremovableBeanBuildItem ensureProducersAreRetained(CombinedIndexBuildItem indexBuildItem,Capabilities capabilities,BuildProducer<AdditionalBeanBuildItem> additionalBeans){\n  if (capabilities.isPresent(Capability.OPENTRACING) || capabilities.isPresent(Capability.SMALLRYE_OPENTRACING)) {\n    throw new ConfigurationException(\"The OpenTelemetry extension tracer can not be used in \" + \"conjunction with either the SmallRye OpenTracing or Jaeger extensions.\");\n  }\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(TracerProducer.class).build());\n  IndexView index=indexBuildItem.getIndex();\n  Collection<String> knownClasses=new HashSet<>();\n  knownClasses.add(ID_GENERATOR.toString());\n  index.getAllKnownImplementors(ID_GENERATOR).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(RESOURCE.toString());\n  index.getAllKnownImplementors(RESOURCE).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SAMPLER.toString());\n  index.getAllKnownImplementors(SAMPLER).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SPAN_EXPORTER.toString());\n  index.getAllKnownImplementors(SPAN_EXPORTER).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  knownClasses.add(SPAN_PROCESSOR.toString());\n  index.getAllKnownImplementors(SPAN_PROCESSOR).forEach(classInfo -> knownClasses.add(classInfo.name().toString()));\n  Set<String> retainProducers=new HashSet<>();\n  for (  AnnotationInstance annotation : index.getAnnotations(DotNames.PRODUCES)) {\n    AnnotationTarget target=annotation.target();\nswitch (target.kind()) {\ncase METHOD:      MethodInfo method=target.asMethod();\n    String returnType=method.returnType().name().toString();\n  if (knownClasses.contains(returnType)) {\n    retainProducers.add(method.declaringClass().name().toString());\n  }\nbreak;\ncase FIELD:FieldInfo field=target.asField();\nString fieldType=field.type().name().toString();\nif (knownClasses.contains(fieldType)) {\nretainProducers.add(field.declaringClass().name().toString());\n}\nbreak;\ndefault:break;\n}\n}\nreturn new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassNamesExclusion(retainProducers));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 83,
        "endColumnNumber" : 58
      },
      "nodeContext" : "capabilities.isPresent(Capability.OPENTRACING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 83,
    "startColumnNumber" : 35,
    "endLineNumber" : 83,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}