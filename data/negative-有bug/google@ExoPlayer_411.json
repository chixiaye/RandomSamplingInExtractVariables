{
  "id" : 411,
  "expression" : "phi",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/video/spherical/Projection.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "phi",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 117,
      "startColumnNumber" : 80,
      "endLineNumber" : 117,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 117,
        "startColumnNumber" : 71,
        "endLineNumber" : 117,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.cos(phi)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 117,
        "startColumnNumber" : 44,
        "endLineNumber" : 117,
        "endColumnNumber" : 84
      },
      "nodeContext" : "radius * Math.sin(theta) * Math.cos(phi)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 117,
        "startColumnNumber" : 43,
        "endLineNumber" : 117,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(radius * Math.sin(theta) * Math.cos(phi))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 117,
        "startColumnNumber" : 35,
        "endLineNumber" : 117,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(float)(radius * Math.sin(theta) * Math.cos(phi))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 117,
        "startColumnNumber" : 34,
        "endLineNumber" : 117,
        "endColumnNumber" : 85
      },
      "nodeContext" : "-(float)(radius * Math.sin(theta) * Math.cos(phi))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 85
      },
      "nodeContext" : "vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 111,
        "startColumnNumber" : 36,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int k=0; k < 2; ++k) {\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 110,
        "startColumnNumber" : 47,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1614,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < longitudes + 1; ++i) {\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 104,
        "startColumnNumber" : 40,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2004,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int j=0; j < latitudes; ++j) {\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3457,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4287,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Generates an equirectangular projection.\n * @param radius Size of the sphere. Must be &gt; 0.\n * @param latitudes Number of rows that make up the sphere. Must be &gt;= 1.\n * @param longitudes Number of columns that make up the sphere. Must be &gt;= 1.\n * @param verticalFovDegrees Total latitudinal degrees that are covered by the sphere. Must be in(0, 180].\n * @param horizontalFovDegrees Total longitudinal degrees that are covered by the sphere.Must bein (0, 360].\n * @param stereoMode A {@link C.StereoMode} value.\n * @return an equirectangular projection.\n */\npublic static Projection createEquirectangular(float radius,int latitudes,int longitudes,float verticalFovDegrees,float horizontalFovDegrees,@C.StereoMode int stereoMode){\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "phi",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 118,
      "startColumnNumber" : 61,
      "endLineNumber" : 118,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 118,
        "startColumnNumber" : 52,
        "endLineNumber" : 118,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Math.sin(phi)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 118,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 65
      },
      "nodeContext" : "radius * Math.sin(phi)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 118,
        "startColumnNumber" : 42,
        "endLineNumber" : 118,
        "endColumnNumber" : 66
      },
      "nodeContext" : "(radius * Math.sin(phi))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 118,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 66
      },
      "nodeContext" : "(float)(radius * Math.sin(phi))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 118,
        "startColumnNumber" : 10,
        "endLineNumber" : 118,
        "endColumnNumber" : 66
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.sin(phi))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 118,
        "startColumnNumber" : 10,
        "endLineNumber" : 118,
        "endColumnNumber" : 67
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 111,
        "startColumnNumber" : 36,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int k=0; k < 2; ++k) {\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 110,
        "startColumnNumber" : 47,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1614,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < longitudes + 1; ++i) {\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 104,
        "startColumnNumber" : 40,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2004,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int j=0; j < latitudes; ++j) {\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3457,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4287,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Generates an equirectangular projection.\n * @param radius Size of the sphere. Must be &gt; 0.\n * @param latitudes Number of rows that make up the sphere. Must be &gt;= 1.\n * @param longitudes Number of columns that make up the sphere. Must be &gt;= 1.\n * @param verticalFovDegrees Total latitudinal degrees that are covered by the sphere. Must be in(0, 180].\n * @param horizontalFovDegrees Total longitudinal degrees that are covered by the sphere.Must bein (0, 360].\n * @param stereoMode A {@link C.StereoMode} value.\n * @return an equirectangular projection.\n */\npublic static Projection createEquirectangular(float radius,int latitudes,int longitudes,float verticalFovDegrees,float horizontalFovDegrees,@C.StereoMode int stereoMode){\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 118,
        "startColumnNumber" : 10,
        "endLineNumber" : 118,
        "endColumnNumber" : 67
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "phi",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 119,
      "startColumnNumber" : 79,
      "endLineNumber" : 119,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 119,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Math.cos(phi)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 119,
        "startColumnNumber" : 43,
        "endLineNumber" : 119,
        "endColumnNumber" : 83
      },
      "nodeContext" : "radius * Math.cos(theta) * Math.cos(phi)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 119,
        "startColumnNumber" : 42,
        "endLineNumber" : 119,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(radius * Math.cos(theta) * Math.cos(phi))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 119,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(float)(radius * Math.cos(theta) * Math.cos(phi))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 84
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 85
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1420,
        "startLineNumber" : 111,
        "startColumnNumber" : 36,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int k=0; k < 2; ++k) {\n  float phi=k == 0 ? phiLow : phiHigh;\n  float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n  vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n  vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n  vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n  textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n  textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n  if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n    System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n    vOffset+=POSITION_COORDS_PER_VERTEX;\n    System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n    tOffset+=TEXTURE_COORDS_PER_VERTEX;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 110,
        "startColumnNumber" : 47,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1614,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 143,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < longitudes + 1; ++i) {\n  for (int k=0; k < 2; ++k) {\n    float phi=k == 0 ? phiLow : phiHigh;\n    float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n    vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n    vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n    vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n    textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n    textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n    if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n      System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n      vOffset+=POSITION_COORDS_PER_VERTEX;\n      System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n      tOffset+=TEXTURE_COORDS_PER_VERTEX;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 104,
        "startColumnNumber" : 40,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2004,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int j=0; j < latitudes; ++j) {\n  float phiLow=quadHeightRads * j - verticalFovRads / 2;\n  float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n  for (int i=0; i < longitudes + 1; ++i) {\n    for (int k=0; k < 2; ++k) {\n      float phi=k == 0 ? phiLow : phiHigh;\n      float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n      vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n      vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n      vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n      textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n      textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n      if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n        System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n        vOffset+=POSITION_COORDS_PER_VERTEX;\n        System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n        tOffset+=TEXTURE_COORDS_PER_VERTEX;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3457,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4287,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Generates an equirectangular projection.\n * @param radius Size of the sphere. Must be &gt; 0.\n * @param latitudes Number of rows that make up the sphere. Must be &gt;= 1.\n * @param longitudes Number of columns that make up the sphere. Must be &gt;= 1.\n * @param verticalFovDegrees Total latitudinal degrees that are covered by the sphere. Must be in(0, 180].\n * @param horizontalFovDegrees Total longitudinal degrees that are covered by the sphere.Must bein (0, 360].\n * @param stereoMode A {@link C.StereoMode} value.\n * @return an equirectangular projection.\n */\npublic static Projection createEquirectangular(float radius,int latitudes,int longitudes,float verticalFovDegrees,float horizontalFovDegrees,@C.StereoMode int stereoMode){\n  Assertions.checkArgument(radius > 0);\n  Assertions.checkArgument(latitudes >= 1);\n  Assertions.checkArgument(longitudes >= 1);\n  Assertions.checkArgument(verticalFovDegrees > 0 && verticalFovDegrees <= 180);\n  Assertions.checkArgument(horizontalFovDegrees > 0 && horizontalFovDegrees <= 360);\n  float verticalFovRads=(float)Math.toRadians(verticalFovDegrees);\n  float horizontalFovRads=(float)Math.toRadians(horizontalFovDegrees);\n  float quadHeightRads=verticalFovRads / latitudes;\n  float quadWidthRads=horizontalFovRads / longitudes;\n  int vertexCount=(2 * (longitudes + 1) + 2) * latitudes;\n  float[] vertexData=new float[vertexCount * POSITION_COORDS_PER_VERTEX];\n  float[] textureData=new float[vertexCount * TEXTURE_COORDS_PER_VERTEX];\n  int vOffset=0;\n  int tOffset=0;\n  for (int j=0; j < latitudes; ++j) {\n    float phiLow=quadHeightRads * j - verticalFovRads / 2;\n    float phiHigh=quadHeightRads * (j + 1) - verticalFovRads / 2;\n    for (int i=0; i < longitudes + 1; ++i) {\n      for (int k=0; k < 2; ++k) {\n        float phi=k == 0 ? phiLow : phiHigh;\n        float theta=quadWidthRads * i + (float)Math.PI - horizontalFovRads / 2;\n        vertexData[vOffset++]=-(float)(radius * Math.sin(theta) * Math.cos(phi));\n        vertexData[vOffset++]=(float)(radius * Math.sin(phi));\n        vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n        textureData[tOffset++]=i * quadWidthRads / horizontalFovRads;\n        textureData[tOffset++]=(j + k) * quadHeightRads / verticalFovRads;\n        if ((i == 0 && k == 0) || (i == longitudes && k == 1)) {\n          System.arraycopy(vertexData,vOffset - POSITION_COORDS_PER_VERTEX,vertexData,vOffset,POSITION_COORDS_PER_VERTEX);\n          vOffset+=POSITION_COORDS_PER_VERTEX;\n          System.arraycopy(textureData,tOffset - TEXTURE_COORDS_PER_VERTEX,textureData,tOffset,TEXTURE_COORDS_PER_VERTEX);\n          tOffset+=TEXTURE_COORDS_PER_VERTEX;\n        }\n      }\n    }\n  }\n  SubMesh subMesh=new SubMesh(SubMesh.VIDEO_TEXTURE_ID,vertexData,textureData,DRAW_MODE_TRIANGLES_STRIP);\n  return new Projection(new Mesh(subMesh),stereoMode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 119,
        "endColumnNumber" : 85
      },
      "nodeContext" : "vertexData[vOffset++]=(float)(radius * Math.cos(theta) * Math.cos(phi));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 117,
    "startColumnNumber" : 80,
    "endLineNumber" : 117,
    "endColumnNumber" : 83
  }, {
    "charLength" : 3,
    "startLineNumber" : 118,
    "startColumnNumber" : 61,
    "endLineNumber" : 118,
    "endColumnNumber" : 64
  }, {
    "charLength" : 3,
    "startLineNumber" : 119,
    "startColumnNumber" : 79,
    "endLineNumber" : 119,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}