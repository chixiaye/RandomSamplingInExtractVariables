{
  "id" : 412,
  "expression" : "jsonColor",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "/lottie/src/main/java/com/airbnb/lottie/GradientStroke.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "jsonColor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 99,
      "startColumnNumber" : 10,
      "endLineNumber" : 99,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 27
      },
      "nodeContext" : "jsonColor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor != null && jsonColor.has(\"k\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (jsonColor != null && jsonColor.has(\"k\")) {\n  jsonColor=jsonColor.optJSONObject(\"k\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2708,
        "startLineNumber" : 96,
        "startColumnNumber" : 86,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static GradientStroke newInstance(JSONObject json,LottieComposition composition){\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor != null && jsonColor.has(\"k\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.airbnb.lottie.JSONObject"
  }, {
    "nodeContext" : "jsonColor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 99,
      "startColumnNumber" : 31,
      "endLineNumber" : 99,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 31,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor.has(\"k\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor != null && jsonColor.has(\"k\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (jsonColor != null && jsonColor.has(\"k\")) {\n  jsonColor=jsonColor.optJSONObject(\"k\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2708,
        "startLineNumber" : 96,
        "startColumnNumber" : 86,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static GradientStroke newInstance(JSONObject json,LottieComposition composition){\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor != null && jsonColor.has(\"k\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.airbnb.lottie.JSONObject"
  }, {
    "nodeContext" : "jsonColor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 100,
      "startColumnNumber" : 20,
      "endLineNumber" : 100,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 100,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 48
      },
      "nodeContext" : "jsonColor.optJSONObject(\"k\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 48
      },
      "nodeContext" : "jsonColor=jsonColor.optJSONObject(\"k\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor=jsonColor.optJSONObject(\"k\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 99,
        "startColumnNumber" : 51,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jsonColor=jsonColor.optJSONObject(\"k\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (jsonColor != null && jsonColor.has(\"k\")) {\n  jsonColor=jsonColor.optJSONObject(\"k\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2708,
        "startLineNumber" : 96,
        "startColumnNumber" : 86,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static GradientStroke newInstance(JSONObject json,LottieComposition composition){\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 49
      },
      "nodeContext" : "jsonColor=jsonColor.optJSONObject(\"k\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.airbnb.lottie.JSONObject"
  }, {
    "nodeContext" : "jsonColor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 103,
      "startColumnNumber" : 10,
      "endLineNumber" : 103,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 103,
        "startColumnNumber" : 10,
        "endLineNumber" : 103,
        "endColumnNumber" : 27
      },
      "nodeContext" : "jsonColor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (jsonColor != null) {\n  color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2708,
        "startLineNumber" : 96,
        "startColumnNumber" : 86,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static GradientStroke newInstance(JSONObject json,LottieComposition composition){\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 103,
        "startColumnNumber" : 10,
        "endLineNumber" : 103,
        "endColumnNumber" : 27
      },
      "nodeContext" : "jsonColor != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.airbnb.lottie.JSONObject"
  }, {
    "nodeContext" : "jsonColor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 104,
      "startColumnNumber" : 65,
      "endLineNumber" : 104,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 88
      },
      "nodeContext" : "AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 88
      },
      "nodeContext" : "color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 89
      },
      "nodeContext" : "color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 103,
        "startColumnNumber" : 29,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (jsonColor != null) {\n  color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2708,
        "startLineNumber" : 96,
        "startColumnNumber" : 86,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2790,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static GradientStroke newInstance(JSONObject json,LottieComposition composition){\n  final String name=json.optString(\"nm\");\n  JSONObject jsonColor=json.optJSONObject(\"g\");\n  if (jsonColor != null && jsonColor.has(\"k\")) {\n    jsonColor=jsonColor.optJSONObject(\"k\");\n  }\n  AnimatableGradientColorValue color=null;\n  if (jsonColor != null) {\n    color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n  }\n  JSONObject jsonOpacity=json.optJSONObject(\"o\");\n  AnimatableIntegerValue opacity=null;\n  if (jsonOpacity != null) {\n    opacity=AnimatableIntegerValue.Factory.newInstance(jsonOpacity,composition);\n  }\n  int gradientTypeInt=json.optInt(\"t\",1);\n  GradientType gradientType=gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n  JSONObject jsonStartPoint=json.optJSONObject(\"s\");\n  AnimatablePointValue startPoint=null;\n  if (jsonStartPoint != null) {\n    startPoint=AnimatablePointValue.Factory.newInstance(jsonStartPoint,composition);\n  }\n  JSONObject jsonEndPoint=json.optJSONObject(\"e\");\n  AnimatablePointValue endPoint=null;\n  if (jsonEndPoint != null) {\n    endPoint=AnimatablePointValue.Factory.newInstance(jsonEndPoint,composition);\n  }\n  AnimatableFloatValue width=AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"w\"),composition);\n  ShapeStroke.LineCapType capType=ShapeStroke.LineCapType.values()[json.optInt(\"lc\") - 1];\n  ShapeStroke.LineJoinType joinType=ShapeStroke.LineJoinType.values()[json.optInt(\"lj\") - 1];\n  AnimatableFloatValue offset=null;\n  List<AnimatableFloatValue> lineDashPattern=new ArrayList<>();\n  if (json.has(\"d\")) {\n    JSONArray dashesJson=json.optJSONArray(\"d\");\n    for (int i=0; i < dashesJson.length(); i++) {\n      JSONObject dashJson=dashesJson.optJSONObject(i);\n      String n=dashJson.optString(\"n\");\n      if (n.equals(\"o\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        offset=AnimatableFloatValue.Factory.newInstance(value,composition);\n      }\n else       if (n.equals(\"d\") || n.equals(\"g\")) {\n        JSONObject value=dashJson.optJSONObject(\"v\");\n        lineDashPattern.add(AnimatableFloatValue.Factory.newInstance(value,composition));\n      }\n    }\n    if (lineDashPattern.size() == 1) {\n      lineDashPattern.add(lineDashPattern.get(0));\n    }\n  }\n  return new GradientStroke(name,gradientType,color,opacity,startPoint,endPoint,width,capType,joinType,lineDashPattern,offset);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 89
      },
      "nodeContext" : "color=AnimatableGradientColorValue.Factory.newInstance(jsonColor,composition);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.airbnb.lottie.JSONObject"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 99,
    "startColumnNumber" : 10,
    "endLineNumber" : 99,
    "endColumnNumber" : 19
  }, {
    "charLength" : 9,
    "startLineNumber" : 99,
    "startColumnNumber" : 31,
    "endLineNumber" : 99,
    "endColumnNumber" : 40
  }, {
    "charLength" : 9,
    "startLineNumber" : 100,
    "startColumnNumber" : 20,
    "endLineNumber" : 100,
    "endColumnNumber" : 29
  }, {
    "charLength" : 9,
    "startLineNumber" : 103,
    "startColumnNumber" : 10,
    "endLineNumber" : 103,
    "endColumnNumber" : 19
  }, {
    "charLength" : 9,
    "startLineNumber" : 104,
    "startColumnNumber" : 65,
    "endLineNumber" : 104,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}