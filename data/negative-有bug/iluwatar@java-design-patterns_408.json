{
  "id" : 408,
  "expression" : "\": Queue time for order over, failed..\"",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/commander/src/main/java/com/iluwatar/commander/Commander.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\": Queue time for order over, failed..\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 235,
      "startColumnNumber" : 41,
      "endLineNumber" : 235,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 235,
        "startColumnNumber" : 16,
        "endLineNumber" : 235,
        "endColumnNumber" : 80
      },
      "nodeContext" : "\"Order \" + qt.order.id + \": Queue time for order over, failed..\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 235,
        "startColumnNumber" : 6,
        "endLineNumber" : 235,
        "endColumnNumber" : 81
      },
      "nodeContext" : "LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 235,
        "startColumnNumber" : 6,
        "endLineNumber" : 235,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 232,
        "startColumnNumber" : 77,
        "endLineNumber" : 237,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 861,
        "startLineNumber" : 232,
        "startColumnNumber" : 4,
        "endLineNumber" : 245,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (System.currentTimeMillis() - qt.order.createdTime >= this.queueTime) {\n  LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n  return;\n}\n else if (qt.taskType.equals(TaskType.Payment) && !qt.order.paid.equals(PaymentStatus.Trying) || qt.taskType.equals(TaskType.Messaging) && (qt.messageType == 1 && !qt.order.messageSent.equals(MessageSent.NoneSent) || qt.order.messageSent.equals(MessageSent.PaymentFail) || qt.order.messageSent.equals(MessageSent.PaymentSuccessful)) || qt.taskType.equals(TaskType.EmployeeDb) && qt.order.addedToEmployeeHandle) {\n  LOG.trace(\"Order \" + qt.order.id + \": Not queueing task since task already done..\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2165,
        "startLineNumber" : 231,
        "startColumnNumber" : 41,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (System.currentTimeMillis() - qt.order.createdTime >= this.queueTime) {\n    LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n    return;\n  }\n else   if (qt.taskType.equals(TaskType.Payment) && !qt.order.paid.equals(PaymentStatus.Trying) || qt.taskType.equals(TaskType.Messaging) && (qt.messageType == 1 && !qt.order.messageSent.equals(MessageSent.NoneSent) || qt.order.messageSent.equals(MessageSent.PaymentFail) || qt.order.messageSent.equals(MessageSent.PaymentSuccessful)) || qt.taskType.equals(TaskType.EmployeeDb) && qt.order.addedToEmployeeHandle) {\n    LOG.trace(\"Order \" + qt.order.id + \": Not queueing task since task already done..\");\n    return;\n  }\n  var list=queue.exceptionsList;\n  Thread t=new Thread(() -> {\n    Retry.Operation op=(list1) -> {\n      if (!list1.isEmpty()) {\n        LOG.warn(\"Order \" + qt.order.id + \": Error in connecting to queue db, trying again..\");\n        throw list1.remove(0);\n      }\n      queue.add(qt);\n      queueItems++;\n      LOG.info(\"Order \" + qt.order.id + \": \"+ qt.getType()+ \" task enqueued..\");\n      tryDoingTasksInQueue();\n    }\n;\n    Retry.HandleErrorIssue<QueueTask> handleError=(qt1,err) -> {\n      if (qt1.taskType.equals(TaskType.Payment)) {\n        qt1.order.paid=PaymentStatus.NotDone;\n        sendPaymentFailureMessage(qt1.order);\n        LOG.error(\"Order \" + qt1.order.id + \": Unable to enqueue payment task,\"+ \" payment failed..\");\n      }\n      LOG.error(\"Order \" + qt1.order.id + \": Unable to enqueue task of type \"+ qt1.getType()+ \", trying to add to employee handle..\");\n      employeeHandleIssue(qt1.order);\n    }\n;\n    var r=new Retry<>(op,handleError,numOfRetries,retryDuration,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n    try {\n      r.perform(list,qt);\n    }\n catch (    Exception e1) {\n      e1.printStackTrace();\n    }\n  }\n);\n  t.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 331,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2204,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 278,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void updateQueue(QueueTask qt){\n  if (System.currentTimeMillis() - qt.order.createdTime >= this.queueTime) {\n    LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n    return;\n  }\n else   if (qt.taskType.equals(TaskType.Payment) && !qt.order.paid.equals(PaymentStatus.Trying) || qt.taskType.equals(TaskType.Messaging) && (qt.messageType == 1 && !qt.order.messageSent.equals(MessageSent.NoneSent) || qt.order.messageSent.equals(MessageSent.PaymentFail) || qt.order.messageSent.equals(MessageSent.PaymentSuccessful)) || qt.taskType.equals(TaskType.EmployeeDb) && qt.order.addedToEmployeeHandle) {\n    LOG.trace(\"Order \" + qt.order.id + \": Not queueing task since task already done..\");\n    return;\n  }\n  var list=queue.exceptionsList;\n  Thread t=new Thread(() -> {\n    Retry.Operation op=(list1) -> {\n      if (!list1.isEmpty()) {\n        LOG.warn(\"Order \" + qt.order.id + \": Error in connecting to queue db, trying again..\");\n        throw list1.remove(0);\n      }\n      queue.add(qt);\n      queueItems++;\n      LOG.info(\"Order \" + qt.order.id + \": \"+ qt.getType()+ \" task enqueued..\");\n      tryDoingTasksInQueue();\n    }\n;\n    Retry.HandleErrorIssue<QueueTask> handleError=(qt1,err) -> {\n      if (qt1.taskType.equals(TaskType.Payment)) {\n        qt1.order.paid=PaymentStatus.NotDone;\n        sendPaymentFailureMessage(qt1.order);\n        LOG.error(\"Order \" + qt1.order.id + \": Unable to enqueue payment task,\"+ \" payment failed..\");\n      }\n      LOG.error(\"Order \" + qt1.order.id + \": Unable to enqueue task of type \"+ qt1.getType()+ \", trying to add to employee handle..\");\n      employeeHandleIssue(qt1.order);\n    }\n;\n    var r=new Retry<>(op,handleError,numOfRetries,retryDuration,e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));\n    try {\n      r.perform(list,qt);\n    }\n catch (    Exception e1) {\n      e1.printStackTrace();\n    }\n  }\n);\n  t.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 339,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 235,
        "startColumnNumber" : 6,
        "endLineNumber" : 235,
        "endColumnNumber" : 82
      },
      "nodeContext" : "LOG.trace(\"Order \" + qt.order.id + \": Queue time for order over, failed..\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 235,
    "startColumnNumber" : 41,
    "endLineNumber" : 235,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}