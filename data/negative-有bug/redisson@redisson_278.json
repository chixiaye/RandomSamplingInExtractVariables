{
  "id" : 278,
  "expression" : "Short.MAX_VALUE",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonCodecTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Short.MAX_VALUE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 107,
      "startColumnNumber" : 46,
      "endLineNumber" : 107,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 107,
        "startColumnNumber" : 46,
        "endLineNumber" : 107,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Short.MAX_VALUE * 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 107,
        "startColumnNumber" : 46,
        "endLineNumber" : 107,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Short.MAX_VALUE * 2 + 142",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 107,
        "startColumnNumber" : 28,
        "endLineNumber" : 107,
        "endColumnNumber" : 70
      },
      "nodeContext" : "RandomString.make(Short.MAX_VALUE * 2 + 142)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 107,
        "endColumnNumber" : 70
      },
      "nodeContext" : "randomData=RandomString.make(Short.MAX_VALUE * 2 + 142)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String randomData=RandomString.make(Short.MAX_VALUE * 2 + 142);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 105,
        "startColumnNumber" : 51,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SnappyCodec sc=new SnappyCodec();\n  String randomData=RandomString.make(Short.MAX_VALUE * 2 + 142);\n  ByteBuf g=sc.getValueEncoder().encode(randomData);\n  String decompressedData=(String)sc.getValueDecoder().decode(g,null);\n  assertThat(decompressedData).isEqualTo(randomData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSnappyBig() throws IOException {\n  SnappyCodec sc=new SnappyCodec();\n  String randomData=RandomString.make(Short.MAX_VALUE * 2 + 142);\n  ByteBuf g=sc.getValueEncoder().encode(randomData);\n  String decompressedData=(String)sc.getValueDecoder().decode(g,null);\n  assertThat(decompressedData).isEqualTo(randomData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 65,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String randomData=RandomString.make(Short.MAX_VALUE * 2 + 142);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 107,
    "startColumnNumber" : 46,
    "endLineNumber" : 107,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}