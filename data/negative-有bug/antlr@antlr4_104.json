{
  "id" : 104,
  "expression" : "\"   {\\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestLexerActions.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"   {\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 70,
      "startColumnNumber" : 3,
      "endLineNumber" : 70,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 61,
        "startColumnNumber" : 3,
        "endLineNumber" : 88,
        "endColumnNumber" : 35
      },
      "nodeContext" : "\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 60,
        "startColumnNumber" : 9,
        "endLineNumber" : 88,
        "endColumnNumber" : 35
      },
      "nodeContext" : "grammar=\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 31,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 36
      },
      "nodeContext" : "String grammar=\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 59,
        "startColumnNumber" : 62,
        "endLineNumber" : 98,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String grammar=\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\";\n  String found=execLexer(\"L.g4\",grammar,\"L\",\"hello Steve\\n\");\n  String expecting=\"Start:6\\n\" + \"Stop:11\\n\" + \"Hello: Steve\\n\"+ \"\\n\"+ \"[@0,0:11='hello Steve\\\\n',<1>,1:0]\\n\"+ \"[@1,12:11='<EOF>',<-1>,2:0]\\n\";\n  assertEquals(expecting,found);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1572,
        "startLineNumber" : 54,
        "startColumnNumber" : 1,
        "endLineNumber" : 98,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This is a regressing test for antlr/antlr4#469 \"Not all internal lexer rule actions are executed\". https://github.com/antlr/antlr4/issues/469\n */\n@Test public void testEvalMultipleActions() throws Exception {\n  String grammar=\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\";\n  String found=execLexer(\"L.g4\",grammar,\"L\",\"hello Steve\\n\");\n  String expecting=\"Start:6\\n\" + \"Stop:11\\n\" + \"Hello: Steve\\n\"+ \"\\n\"+ \"[@0,0:11='hello Steve\\\\n',<1>,1:0]\\n\"+ \"[@1,12:11='<EOF>',<-1>,2:0]\\n\";\n  assertEquals(expecting,found);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 61,
        "startColumnNumber" : 3,
        "endLineNumber" : 88,
        "endColumnNumber" : 35
      },
      "nodeContext" : "\"lexer grammar L;\\n\" + \"\\n\" + \"@lexer::members\\n\"+ \"{\\n\"+ \"class Marker\\n\"+ \"{\\n\"+ \"   Marker (Lexer lexer) { this.lexer = lexer; }\\n\"+ \"\\n\"+ \"   public String getText ()\\n\"+ \"   {\\n\"+ \"      return lexer._input.getText (new Interval (start_index, stop_index));\\n\"+ \"   }\\n\"+ \"\\n\"+ \"   public void start ()  { start_index = lexer._input.index (); System.out.println (\\\"Start:\\\" + start_index);}\\n\"+ \"   public void stop () { stop_index = lexer._input.index (); System.out.println (\\\"Stop:\\\" + stop_index);}\\n\"+ \"\\n\"+ \"   private int start_index = 0;\\n\"+ \"   private int stop_index = 0;\\n\"+ \"   private Lexer lexer;\\n\"+ \"}\\n\"+ \"\\n\"+ \"Marker m_name = new Marker (this);\\n\"+ \"}\\n\"+ \"\\n\"+ \"HELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\\\n' { System.out.println (\\\"Hello: \\\" + m_name.getText ()); };\\n\"+ \"NAME: ('a'..'z' | 'A'..'Z')+ ('\\\\n')?;\\n\"+ \"\\n\"+ \"fragment WS: [ \\\\r\\\\t\\\\n]+ ;\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 70,
    "startColumnNumber" : 3,
    "endLineNumber" : 70,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}