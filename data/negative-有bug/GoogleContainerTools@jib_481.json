{
  "id" : 481,
  "expression" : "ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper())",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/PluginConfigurationProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 150,
      "startLineNumber" : 79,
      "startColumnNumber" : 8,
      "endLineNumber" : 80,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 16,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 78,
        "startColumnNumber" : 31,
        "endLineNumber" : 81,
        "endColumnNumber" : 70
      },
      "nodeContext" : "baseImageConfigurationBuilder=ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ImageConfiguration.Builder baseImageConfigurationBuilder=ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2884,
        "startLineNumber" : 54,
        "startColumnNumber" : 44,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  jibExtension.handleDeprecatedParameters(logger);\n  ConfigurationPropertyValidator.checkHttpTimeoutProperty(GradleException::new);\n  GradleJibLogger.disableHttpLogging();\n  RegistryClient.setUserAgentSuffix(USER_AGENT_SUFFIX);\n  if (Boolean.getBoolean(\"sendCredentialsOverHttp\")) {\n    logger.warn(\"Authentication over HTTP is enabled. It is strongly recommended that you do not enable \" + \"this on a public network!\");\n  }\n  RegistryCredentials knownBaseRegistryCredentials=null;\n  Authorization fromAuthorization=ConfigurationPropertyValidator.getImageAuth(logger,\"jib.from.auth.username\",\"jib.from.auth.password\",jibExtension.getFrom().getAuth());\n  if (fromAuthorization != null) {\n    knownBaseRegistryCredentials=new RegistryCredentials(\"jib.from.auth\",fromAuthorization);\n  }\n  ImageConfiguration.Builder baseImageConfigurationBuilder=ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials);\n  String mainClass=projectProperties.getMainClass(jibExtension);\n  ContainerConfiguration.Builder containerConfigurationBuilder=ContainerConfiguration.builder().setEntrypoint(JavaEntrypointConstructor.makeDefaultEntrypoint(jibExtension.getJvmFlags(),mainClass)).setProgramArguments(jibExtension.getArgs()).setExposedPorts(ExposedPortsParser.parse(jibExtension.getExposedPorts()));\n  if (jibExtension.getUseCurrentTimestamp()) {\n    logger.warn(\"Setting image creation time to current time; your image may not be reproducible.\");\n    containerConfigurationBuilder.setCreationTime(Instant.now());\n  }\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(logger).setAllowInsecureRegistries(jibExtension.getAllowInsecureRegistries()).setLayerConfigurations(projectProperties.getJavaLayerConfigurations().getLayerConfigurations());\n  CacheConfiguration applicationLayersCacheConfiguration=CacheConfiguration.forPath(projectProperties.getCacheDirectory());\n  buildConfigurationBuilder.setApplicationLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  if (jibExtension.getUseOnlyProjectCache()) {\n    buildConfigurationBuilder.setBaseImageLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  }\n  return new PluginConfigurationProcessor(buildConfigurationBuilder,baseImageConfigurationBuilder,containerConfigurationBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3728,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets up  {@link BuildConfiguration} that is common among the image building tasks. This includessetting up the base image reference/authorization, container configuration, cache configuration, and layer configuration.\n * @param logger the logger used to display messages.\n * @param jibExtension the {@link JibExtension} providing the configuration data\n * @param projectProperties used for providing additional information\n * @return a new {@link PluginConfigurationProcessor} containing pre-configured builders\n * @throws InvalidImageReferenceException if parsing the base image configuration fails\n */\nstatic PluginConfigurationProcessor processCommonConfiguration(JibLogger logger,JibExtension jibExtension,GradleProjectProperties projectProperties) throws InvalidImageReferenceException {\n  jibExtension.handleDeprecatedParameters(logger);\n  ConfigurationPropertyValidator.checkHttpTimeoutProperty(GradleException::new);\n  GradleJibLogger.disableHttpLogging();\n  RegistryClient.setUserAgentSuffix(USER_AGENT_SUFFIX);\n  if (Boolean.getBoolean(\"sendCredentialsOverHttp\")) {\n    logger.warn(\"Authentication over HTTP is enabled. It is strongly recommended that you do not enable \" + \"this on a public network!\");\n  }\n  RegistryCredentials knownBaseRegistryCredentials=null;\n  Authorization fromAuthorization=ConfigurationPropertyValidator.getImageAuth(logger,\"jib.from.auth.username\",\"jib.from.auth.password\",jibExtension.getFrom().getAuth());\n  if (fromAuthorization != null) {\n    knownBaseRegistryCredentials=new RegistryCredentials(\"jib.from.auth\",fromAuthorization);\n  }\n  ImageConfiguration.Builder baseImageConfigurationBuilder=ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials);\n  String mainClass=projectProperties.getMainClass(jibExtension);\n  ContainerConfiguration.Builder containerConfigurationBuilder=ContainerConfiguration.builder().setEntrypoint(JavaEntrypointConstructor.makeDefaultEntrypoint(jibExtension.getJvmFlags(),mainClass)).setProgramArguments(jibExtension.getArgs()).setExposedPorts(ExposedPortsParser.parse(jibExtension.getExposedPorts()));\n  if (jibExtension.getUseCurrentTimestamp()) {\n    logger.warn(\"Setting image creation time to current time; your image may not be reproducible.\");\n    containerConfigurationBuilder.setCreationTime(Instant.now());\n  }\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(logger).setAllowInsecureRegistries(jibExtension.getAllowInsecureRegistries()).setLayerConfigurations(projectProperties.getJavaLayerConfigurations().getLayerConfigurations());\n  CacheConfiguration applicationLayersCacheConfiguration=CacheConfiguration.forPath(projectProperties.getCacheDirectory());\n  buildConfigurationBuilder.setApplicationLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  if (jibExtension.getUseOnlyProjectCache()) {\n    buildConfigurationBuilder.setBaseImageLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  }\n  return new PluginConfigurationProcessor(buildConfigurationBuilder,baseImageConfigurationBuilder,containerConfigurationBuilder);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ImageConfiguration.builder(ImageReference.parse(jibExtension.getBaseImage())).setCredentialHelper(jibExtension.getFrom().getCredHelper()).setKnownRegistryCredentials(knownBaseRegistryCredentials)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 10,
    "type" : "com.google.cloud.tools.jib.configuration.ImageConfiguration.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 150,
    "startLineNumber" : 79,
    "startColumnNumber" : 8,
    "endLineNumber" : 80,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}