{
  "id" : 13,
  "expression" : "key.length()",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/DefaultInputHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "key.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 332,
      "startColumnNumber" : 19,
      "endLineNumber" : 332,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 332,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 36
      },
      "nodeContext" : "key.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 332,
        "startColumnNumber" : 16,
        "endLineNumber" : 362,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key.length() == 1) {\n  char ch=Character.toUpperCase(key.charAt(0));\n  if (modifiers == 0)   return KeyStroke.getKeyStroke(ch);\n else   return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\n  System.err.println(\"Invalid key stroke: \" + keyStroke);\n  return null;\n}\n else {\n  int ch;\n  try {\n    ch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n  }\n catch (  Exception e) {\n    System.err.println(\"Invalid key stroke: \" + keyStroke);\n    return null;\n  }\n  return KeyStroke.getKeyStroke(ch,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2458,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 363,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyStroke == null)   return null;\n  int modifiers=0;\n  int index=keyStroke.indexOf('+');\n  if (index != -1) {\n    for (int i=0; i < index; i++) {\nswitch (Character.toUpperCase(keyStroke.charAt(i))) {\ncase 'A':        modifiers|=InputEvent.ALT_MASK;\n      break;\ncase 'C':    modifiers|=InputEvent.CTRL_MASK;\n  break;\ncase 'M':modifiers|=InputEvent.META_MASK;\nbreak;\ncase 'S':modifiers|=InputEvent.SHIFT_MASK;\nbreak;\n}\n}\n}\nString key=keyStroke.substring(index + 1);\nif (key.length() == 1) {\nchar ch=Character.toUpperCase(key.charAt(0));\nif (modifiers == 0) return KeyStroke.getKeyStroke(ch);\n else return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\n else {\nint ch;\ntry {\nch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n}\n catch (Exception e) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\nreturn KeyStroke.getKeyStroke(ch,modifiers);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3021,
        "startLineNumber" : 294,
        "startColumnNumber" : 8,
        "endLineNumber" : 363,
        "endColumnNumber" : 9
      },
      "nodeContext" : "/** \n * Converts a string to a keystroke. The string should be of the form <i>modifiers</i>+<i>shortcut</i> where <i>modifiers</i> is any combination of A for Alt, C for Control, S for Shift or M for Meta, and <i>shortcut</i> is either a single character, or a keycode name from the <code>KeyEvent</code> class, without the <code>VK_</code> prefix.\n * @param keyStroke A string description of the key stroke\n */\npublic static KeyStroke parseKeyStroke(String keyStroke){\n  if (keyStroke == null)   return null;\n  int modifiers=0;\n  int index=keyStroke.indexOf('+');\n  if (index != -1) {\n    for (int i=0; i < index; i++) {\nswitch (Character.toUpperCase(keyStroke.charAt(i))) {\ncase 'A':        modifiers|=InputEvent.ALT_MASK;\n      break;\ncase 'C':    modifiers|=InputEvent.CTRL_MASK;\n  break;\ncase 'M':modifiers|=InputEvent.META_MASK;\nbreak;\ncase 'S':modifiers|=InputEvent.SHIFT_MASK;\nbreak;\n}\n}\n}\nString key=keyStroke.substring(index + 1);\nif (key.length() == 1) {\nchar ch=Character.toUpperCase(key.charAt(0));\nif (modifiers == 0) return KeyStroke.getKeyStroke(ch);\n else return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\n else {\nint ch;\ntry {\nch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n}\n catch (Exception e) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\nreturn KeyStroke.getKeyStroke(ch,modifiers);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 332,
        "startColumnNumber" : 19,
        "endLineNumber" : 332,
        "endColumnNumber" : 36
      },
      "nodeContext" : "key.length() == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "key.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 340,
      "startColumnNumber" : 24,
      "endLineNumber" : 340,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 340,
        "startColumnNumber" : 24,
        "endLineNumber" : 340,
        "endColumnNumber" : 41
      },
      "nodeContext" : "key.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 340,
        "startColumnNumber" : 21,
        "endLineNumber" : 362,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key.length() == 0) {\n  System.err.println(\"Invalid key stroke: \" + keyStroke);\n  return null;\n}\n else {\n  int ch;\n  try {\n    ch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n  }\n catch (  Exception e) {\n    System.err.println(\"Invalid key stroke: \" + keyStroke);\n    return null;\n  }\n  return KeyStroke.getKeyStroke(ch,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 332,
        "startColumnNumber" : 16,
        "endLineNumber" : 362,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key.length() == 1) {\n  char ch=Character.toUpperCase(key.charAt(0));\n  if (modifiers == 0)   return KeyStroke.getKeyStroke(ch);\n else   return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\n  System.err.println(\"Invalid key stroke: \" + keyStroke);\n  return null;\n}\n else {\n  int ch;\n  try {\n    ch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n  }\n catch (  Exception e) {\n    System.err.println(\"Invalid key stroke: \" + keyStroke);\n    return null;\n  }\n  return KeyStroke.getKeyStroke(ch,modifiers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2458,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 363,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyStroke == null)   return null;\n  int modifiers=0;\n  int index=keyStroke.indexOf('+');\n  if (index != -1) {\n    for (int i=0; i < index; i++) {\nswitch (Character.toUpperCase(keyStroke.charAt(i))) {\ncase 'A':        modifiers|=InputEvent.ALT_MASK;\n      break;\ncase 'C':    modifiers|=InputEvent.CTRL_MASK;\n  break;\ncase 'M':modifiers|=InputEvent.META_MASK;\nbreak;\ncase 'S':modifiers|=InputEvent.SHIFT_MASK;\nbreak;\n}\n}\n}\nString key=keyStroke.substring(index + 1);\nif (key.length() == 1) {\nchar ch=Character.toUpperCase(key.charAt(0));\nif (modifiers == 0) return KeyStroke.getKeyStroke(ch);\n else return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\n else {\nint ch;\ntry {\nch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n}\n catch (Exception e) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\nreturn KeyStroke.getKeyStroke(ch,modifiers);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3021,
        "startLineNumber" : 294,
        "startColumnNumber" : 8,
        "endLineNumber" : 363,
        "endColumnNumber" : 9
      },
      "nodeContext" : "/** \n * Converts a string to a keystroke. The string should be of the form <i>modifiers</i>+<i>shortcut</i> where <i>modifiers</i> is any combination of A for Alt, C for Control, S for Shift or M for Meta, and <i>shortcut</i> is either a single character, or a keycode name from the <code>KeyEvent</code> class, without the <code>VK_</code> prefix.\n * @param keyStroke A string description of the key stroke\n */\npublic static KeyStroke parseKeyStroke(String keyStroke){\n  if (keyStroke == null)   return null;\n  int modifiers=0;\n  int index=keyStroke.indexOf('+');\n  if (index != -1) {\n    for (int i=0; i < index; i++) {\nswitch (Character.toUpperCase(keyStroke.charAt(i))) {\ncase 'A':        modifiers|=InputEvent.ALT_MASK;\n      break;\ncase 'C':    modifiers|=InputEvent.CTRL_MASK;\n  break;\ncase 'M':modifiers|=InputEvent.META_MASK;\nbreak;\ncase 'S':modifiers|=InputEvent.SHIFT_MASK;\nbreak;\n}\n}\n}\nString key=keyStroke.substring(index + 1);\nif (key.length() == 1) {\nchar ch=Character.toUpperCase(key.charAt(0));\nif (modifiers == 0) return KeyStroke.getKeyStroke(ch);\n else return KeyStroke.getKeyStroke(ch,modifiers);\n}\n else if (key.length() == 0) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\n else {\nint ch;\ntry {\nch=KeyEvent.class.getField(\"VK_\".concat(key)).getInt(null);\n}\n catch (Exception e) {\nSystem.err.println(\"Invalid key stroke: \" + keyStroke);\nreturn null;\n}\nreturn KeyStroke.getKeyStroke(ch,modifiers);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 340,
        "startColumnNumber" : 24,
        "endLineNumber" : 340,
        "endColumnNumber" : 41
      },
      "nodeContext" : "key.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 332,
    "startColumnNumber" : 19,
    "endLineNumber" : 332,
    "endColumnNumber" : 31
  }, {
    "charLength" : 12,
    "startLineNumber" : 340,
    "startColumnNumber" : 24,
    "endLineNumber" : 340,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}