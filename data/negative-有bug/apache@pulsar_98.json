{
  "id" : 98,
  "expression" : "DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/api/MessageDispatchThrottlingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 177,
      "startLineNumber" : 614,
      "startColumnNumber" : 36,
      "endLineNumber" : 617,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 614,
        "startColumnNumber" : 36,
        "endLineNumber" : 618,
        "endColumnNumber" : 24
      },
      "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 614,
        "startColumnNumber" : 21,
        "endLineNumber" : 618,
        "endColumnNumber" : 24
      },
      "nodeContext" : "dispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 614,
        "startColumnNumber" : 8,
        "endLineNumber" : 618,
        "endColumnNumber" : 25
      },
      "nodeContext" : "DispatchRate dispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2915,
        "startLineNumber" : 606,
        "startColumnNumber" : 102,
        "endLineNumber" : 670,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  final String namespace=\"my-property/throttling_ns\";\n  final String topicName=\"persistent://\" + namespace + \"/throttlingAll\";\n  final int messageRate=5;\n  final long byteRate=10;\n  DispatchRate dispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build();\n  admin.namespaces().createNamespace(namespace,Sets.newHashSet(\"test\"));\n  admin.namespaces().setDispatchRate(namespace,dispatchRate);\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  PersistentTopic topic=(PersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  boolean isMessageRateUpdate=false;\n  int retry=5;\n  for (int i=0; i < retry; i++) {\n    if (topic.getDispatchRateLimiter().get().getDispatchRateOnMsg() > 0 && topic.getDispatchRateLimiter().get().getDispatchRateOnByte() > 0) {\n      isMessageRateUpdate=true;\n      break;\n    }\n else {\n      if (i != retry - 1) {\n        Thread.sleep(100);\n      }\n    }\n  }\n  Assert.assertTrue(isMessageRateUpdate);\n  Assert.assertEquals(admin.namespaces().getDispatchRate(namespace),dispatchRate);\n  final int numProducedMessages=200;\n  final AtomicInteger totalReceived=new AtomicInteger(0);\n  ConsumerBuilder<byte[]> consumerBuilder=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"my-subscriber-name\").subscriptionType(subscription).messageListener((c1,msg) -> {\n    Assert.assertNotNull(msg,\"Message cannot be null\");\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message [{}] in the listener\",receivedMessage);\n    totalReceived.incrementAndGet();\n  }\n);\n  Consumer<byte[]> consumer=consumerBuilder.subscribe();\n  deactiveCursors((ManagedLedgerImpl)topic.getManagedLedger());\n  consumer.close();\n  final int dataSize=50;\n  final byte[] data=new byte[dataSize];\n  for (int i=0; i < numProducedMessages; i++) {\n    producer.send(data);\n  }\n  consumer=consumerBuilder.subscribe();\n  final int totalReceivedBytes=dataSize * totalReceived.get();\n  Assert.assertNotEquals(totalReceivedBytes,byteRate * 2);\n  consumer.close();\n  producer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3264,
        "startLineNumber" : 599,
        "startColumnNumber" : 4,
        "endLineNumber" : 670,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It verifies that that dispatch-throttling considers both msg/byte rate if both of them are configured together\n * @param subscription\n * @throws Exception\n */\n@Test(dataProvider=\"subscriptions\",timeOut=5000) public void testMessageByteRateThrottlingCombined(SubscriptionType subscription) throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  final String namespace=\"my-property/throttling_ns\";\n  final String topicName=\"persistent://\" + namespace + \"/throttlingAll\";\n  final int messageRate=5;\n  final long byteRate=10;\n  DispatchRate dispatchRate=DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build();\n  admin.namespaces().createNamespace(namespace,Sets.newHashSet(\"test\"));\n  admin.namespaces().setDispatchRate(namespace,dispatchRate);\n  Producer<byte[]> producer=pulsarClient.newProducer().topic(topicName).create();\n  PersistentTopic topic=(PersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  boolean isMessageRateUpdate=false;\n  int retry=5;\n  for (int i=0; i < retry; i++) {\n    if (topic.getDispatchRateLimiter().get().getDispatchRateOnMsg() > 0 && topic.getDispatchRateLimiter().get().getDispatchRateOnByte() > 0) {\n      isMessageRateUpdate=true;\n      break;\n    }\n else {\n      if (i != retry - 1) {\n        Thread.sleep(100);\n      }\n    }\n  }\n  Assert.assertTrue(isMessageRateUpdate);\n  Assert.assertEquals(admin.namespaces().getDispatchRate(namespace),dispatchRate);\n  final int numProducedMessages=200;\n  final AtomicInteger totalReceived=new AtomicInteger(0);\n  ConsumerBuilder<byte[]> consumerBuilder=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"my-subscriber-name\").subscriptionType(subscription).messageListener((c1,msg) -> {\n    Assert.assertNotNull(msg,\"Message cannot be null\");\n    String receivedMessage=new String(msg.getData());\n    log.debug(\"Received message [{}] in the listener\",receivedMessage);\n    totalReceived.incrementAndGet();\n  }\n);\n  Consumer<byte[]> consumer=consumerBuilder.subscribe();\n  deactiveCursors((ManagedLedgerImpl)topic.getManagedLedger());\n  consumer.close();\n  final int dataSize=50;\n  final byte[] data=new byte[dataSize];\n  for (int i=0; i < numProducedMessages; i++) {\n    producer.send(data);\n  }\n  consumer=consumerBuilder.subscribe();\n  final int totalReceivedBytes=dataSize * totalReceived.get();\n  Assert.assertNotEquals(totalReceivedBytes,byteRate * 2);\n  consumer.close();\n  producer.close();\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 373,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 614,
        "startColumnNumber" : 36,
        "endLineNumber" : 618,
        "endColumnNumber" : 24
      },
      "nodeContext" : "DispatchRate.builder().dispatchThrottlingRateInMsg(messageRate).dispatchThrottlingRateInByte(byteRate).ratePeriodInSecond(360).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "org.apache.pulsar.common.policies.data.DispatchRate.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 177,
    "startLineNumber" : 614,
    "startColumnNumber" : 36,
    "endLineNumber" : 617,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}