{
  "id" : 105,
  "expression" : "((float)bh / vh)",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/sample/src/main/java/com/nostra13/universalimageloader/sample/ext/OldRoundedBitmapDisplayer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((float)bh / vh)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 121,
      "startColumnNumber" : 25,
      "endLineNumber" : 121,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 121,
        "startColumnNumber" : 20,
        "endLineNumber" : 121,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bw / ((float)bh / vh)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 121,
        "startColumnNumber" : 19,
        "endLineNumber" : 121,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(bw / ((float)bh / vh))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 121,
        "startColumnNumber" : 13,
        "endLineNumber" : 121,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(int)(bw / ((float)bh / vh))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 121,
        "startColumnNumber" : 5,
        "endLineNumber" : 121,
        "endColumnNumber" : 43
      },
      "nodeContext" : "width=(int)(bw / ((float)bh / vh))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 121,
        "startColumnNumber" : 5,
        "endLineNumber" : 121,
        "endColumnNumber" : 44
      },
      "nodeContext" : "width=(int)(bw / ((float)bh / vh));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 120,
        "startColumnNumber" : 27,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  width=(int)(bw / ((float)bh / vh));\n  height=vh;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (vRation > bRation) {\n  width=(int)(bw / ((float)bh / vh));\n  height=vh;\n}\n else {\n  width=vw;\n  height=(int)(bh / ((float)bw / vw));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2069,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (scaleType) {\ncase CENTER_INSIDE:  float vRation=(float)vw / vh;\nfloat bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 440,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ImageView imageView=imageAware.getWrappedView();\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view properties.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageAware.getWidth();\n  int vh=imageAware.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 575,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3601,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Process incoming  {@linkplain Bitmap} to make rounded corners according to target{@link com.nostra13.universalimageloader.core.imageaware.ImageViewAware}.<br /> This method <b>doesn't display</b> result bitmap in  {@link ImageView}\n * @param bitmap      Incoming Bitmap to process\n * @param imageAware  Target {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware} todisplay bitmap in\n * @param roundPixels Rounded pixels of corner\n * @return Result bitmap with rounded corners\n */\npublic static Bitmap roundCorners(Bitmap bitmap,ImageViewAware imageAware,int roundPixels){\n  ImageView imageView=imageAware.getWrappedView();\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view properties.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageAware.getWidth();\n  int vh=imageAware.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 593,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 121,
        "startColumnNumber" : 5,
        "endLineNumber" : 121,
        "endColumnNumber" : 44
      },
      "nodeContext" : "width=(int)(bw / ((float)bh / vh));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "float"
  }, {
    "nodeContext" : "((float)bh / vh)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 141,
      "startColumnNumber" : 28,
      "endLineNumber" : 141,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 23,
        "endLineNumber" : 141,
        "endColumnNumber" : 45
      },
      "nodeContext" : "vw * ((float)bh / vh)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 141,
        "startColumnNumber" : 22,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(vw * ((float)bh / vh))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 141,
        "startColumnNumber" : 16,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(int)(vw * ((float)bh / vh))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "srcWidth=(int)(vw * ((float)bh / vh))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 47
      },
      "nodeContext" : "srcWidth=(int)(vw * ((float)bh / vh));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 140,
        "startColumnNumber" : 11,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  srcWidth=(int)(vw * ((float)bh / vh));\n  srcHeight=bh;\n  x=(bw - srcWidth) / 2;\n  y=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (vRation > bRation) {\n  srcWidth=bw;\n  srcHeight=(int)(vh * ((float)bw / vw));\n  x=0;\n  y=(bh - srcHeight) / 2;\n}\n else {\n  srcWidth=(int)(vw * ((float)bh / vh));\n  srcHeight=bh;\n  x=(bw - srcWidth) / 2;\n  y=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2069,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 166,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (scaleType) {\ncase CENTER_INSIDE:  float vRation=(float)vw / vh;\nfloat bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 440,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ImageView imageView=imageAware.getWrappedView();\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view properties.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageAware.getWidth();\n  int vh=imageAware.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 575,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3601,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Process incoming  {@linkplain Bitmap} to make rounded corners according to target{@link com.nostra13.universalimageloader.core.imageaware.ImageViewAware}.<br /> This method <b>doesn't display</b> result bitmap in  {@link ImageView}\n * @param bitmap      Incoming Bitmap to process\n * @param imageAware  Target {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware} todisplay bitmap in\n * @param roundPixels Rounded pixels of corner\n * @return Result bitmap with rounded corners\n */\npublic static Bitmap roundCorners(Bitmap bitmap,ImageViewAware imageAware,int roundPixels){\n  ImageView imageView=imageAware.getWrappedView();\n  if (imageView == null) {\n    L.w(\"View is collected probably. Can't round bitmap corners without view properties.\");\n    return bitmap;\n  }\n  Bitmap roundBitmap;\n  int bw=bitmap.getWidth();\n  int bh=bitmap.getHeight();\n  int vw=imageAware.getWidth();\n  int vh=imageAware.getHeight();\n  if (vw <= 0)   vw=bw;\n  if (vh <= 0)   vh=bh;\n  final ImageView.ScaleType scaleType=imageView.getScaleType();\n  if (scaleType == null) {\n    return bitmap;\n  }\n  int width, height;\n  Rect srcRect;\n  Rect destRect;\nswitch (scaleType) {\ncase CENTER_INSIDE:    float vRation=(float)vw / vh;\n  float bRation=(float)bw / bh;\nint destWidth;\nint destHeight;\nif (vRation > bRation) {\ndestHeight=Math.min(vh,bh);\ndestWidth=(int)(bw / ((float)bh / destHeight));\n}\n else {\ndestWidth=Math.min(vw,bw);\ndestHeight=(int)(bh / ((float)bw / destWidth));\n}\nint x=(vw - destWidth) / 2;\nint y=(vh - destHeight) / 2;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(x,y,x + destWidth,y + destHeight);\nwidth=vw;\nheight=vh;\nbreak;\ncase FIT_CENTER:case FIT_START:case FIT_END:default:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nif (vRation > bRation) {\nwidth=(int)(bw / ((float)bh / vh));\nheight=vh;\n}\n else {\nwidth=vw;\nheight=(int)(bh / ((float)bw / vw));\n}\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER_CROP:vRation=(float)vw / vh;\nbRation=(float)bw / bh;\nint srcWidth;\nint srcHeight;\nif (vRation > bRation) {\nsrcWidth=bw;\nsrcHeight=(int)(vh * ((float)bw / vw));\nx=0;\ny=(bh - srcHeight) / 2;\n}\n else {\nsrcWidth=(int)(vw * ((float)bh / vh));\nsrcHeight=bh;\nx=(bw - srcWidth) / 2;\ny=0;\n}\nwidth=srcWidth;\nheight=srcHeight;\nsrcRect=new Rect(x,y,x + srcWidth,y + srcHeight);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase FIT_XY:width=vw;\nheight=vh;\nsrcRect=new Rect(0,0,bw,bh);\ndestRect=new Rect(0,0,width,height);\nbreak;\ncase CENTER:case MATRIX:width=Math.min(vw,bw);\nheight=Math.min(vh,bh);\nx=(bw - width) / 2;\ny=(bh - height) / 2;\nsrcRect=new Rect(x,y,x + width,y + height);\ndestRect=new Rect(0,0,width,height);\nbreak;\n}\ntry {\nroundBitmap=getRoundedCornerBitmap(bitmap,roundPixels,srcRect,destRect,width,height);\n}\n catch (OutOfMemoryError e) {\nL.e(e,\"Can't create bitmap with rounded corners. Not enough memory.\");\nroundBitmap=bitmap;\n}\nreturn roundBitmap;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 593,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 47
      },
      "nodeContext" : "srcWidth=(int)(vw * ((float)bh / vh));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 121,
    "startColumnNumber" : 25,
    "endLineNumber" : 121,
    "endColumnNumber" : 42
  }, {
    "charLength" : 17,
    "startLineNumber" : 141,
    "startColumnNumber" : 28,
    "endLineNumber" : 141,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}