{
  "id" : 204,
  "expression" : "TopicDomain.persistent.value()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/ClientGetSchemaTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TopicDomain.persistent.value()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 133,
      "startColumnNumber" : 45,
      "endLineNumber" : 133,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 133,
        "startColumnNumber" : 31,
        "endLineNumber" : 133,
        "endColumnNumber" : 105
      },
      "nodeContext" : "TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 133,
        "startColumnNumber" : 31,
        "endLineNumber" : 133,
        "endColumnNumber" : 116
      },
      "nodeContext" : "TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 133,
        "startColumnNumber" : 21,
        "endLineNumber" : 133,
        "endColumnNumber" : 116
      },
      "nodeContext" : "fqtnOne=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 117
      },
      "nodeContext" : "final String fqtnOne=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2424,
        "startLineNumber" : 129,
        "startColumnNumber" : 53,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicOne=\"test-broken-schema-storage\";\n  final String fqtnOne=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(\"test\"));\n  Producer<Schemas.PersonTwo> producer=pulsarClient.newProducer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).topic(fqtnOne).create();\n  producer.close();\n  String key=TopicName.get(fqtnOne).getSchemaName();\n  BookkeeperSchemaStorage schemaStrogate=(BookkeeperSchemaStorage)pulsar.getSchemaStorage();\n  long schemaLedgerId=schemaStrogate.getSchemaLedgerList(key).get(0);\n  schemaStrogate.getBookKeeper().deleteLedger(schemaLedgerId);\n  admin.topics().unload(fqtnOne);\n  producer=pulsarClient.newProducer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).topic(fqtnOne).create();\n  assertNotEquals(schemaLedgerId,schemaStrogate.getSchemaLedgerList(key).get(0));\n  Schemas.PersonTwo personTwo=new Schemas.PersonTwo();\n  personTwo.setId(1);\n  personTwo.setName(\"Tom\");\n  Consumer<Schemas.PersonTwo> consumer=pulsarClient.newConsumer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).subscriptionName(\"test\").topic(fqtnOne).subscribe();\n  producer.send(personTwo);\n  Schemas.PersonTwo personConsume=consumer.receive().getValue();\n  assertEquals(\"Tom\",personConsume.getName());\n  assertEquals(1,personConsume.getId());\n  producer.close();\n  consumer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2686,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * It validates if schema ledger is deleted or non recoverable then it will clean up schema storage for the topic and make the topic available.\n * @throws Exception\n */\n@Test public void testSchemaFailure() throws Exception {\n  final String tenant=PUBLIC_TENANT;\n  final String namespace=\"test-namespace-\" + randomName(16);\n  final String topicOne=\"test-broken-schema-storage\";\n  final String fqtnOne=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString();\n  admin.namespaces().createNamespace(tenant + \"/\" + namespace,Sets.newHashSet(\"test\"));\n  Producer<Schemas.PersonTwo> producer=pulsarClient.newProducer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).topic(fqtnOne).create();\n  producer.close();\n  String key=TopicName.get(fqtnOne).getSchemaName();\n  BookkeeperSchemaStorage schemaStrogate=(BookkeeperSchemaStorage)pulsar.getSchemaStorage();\n  long schemaLedgerId=schemaStrogate.getSchemaLedgerList(key).get(0);\n  schemaStrogate.getBookKeeper().deleteLedger(schemaLedgerId);\n  admin.topics().unload(fqtnOne);\n  producer=pulsarClient.newProducer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).topic(fqtnOne).create();\n  assertNotEquals(schemaLedgerId,schemaStrogate.getSchemaLedgerList(key).get(0));\n  Schemas.PersonTwo personTwo=new Schemas.PersonTwo();\n  personTwo.setId(1);\n  personTwo.setName(\"Tom\");\n  Consumer<Schemas.PersonTwo> consumer=pulsarClient.newConsumer(Schema.AVRO(SchemaDefinition.<Schemas.PersonTwo>builder().withAlwaysAllowNull(false).withSupportSchemaVersioning(true).withPojo(Schemas.PersonTwo.class).build())).subscriptionName(\"test\").topic(fqtnOne).subscribe();\n  producer.send(personTwo);\n  Schemas.PersonTwo personConsume=consumer.receive().getValue();\n  assertEquals(\"Tom\",personConsume.getName());\n  assertEquals(1,personConsume.getId());\n  producer.close();\n  consumer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 117
      },
      "nodeContext" : "final String fqtnOne=TopicName.get(TopicDomain.persistent.value(),tenant,namespace,topicOne).toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 133,
    "startColumnNumber" : 45,
    "endLineNumber" : 133,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}