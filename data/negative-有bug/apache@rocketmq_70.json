{
  "id" : 70,
  "expression" : "topicConfig.getPerm()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "topicConfig.getPerm()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 136,
      "startColumnNumber" : 33,
      "endLineNumber" : 136,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 136,
        "startColumnNumber" : 13,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "PermName.isReadable(topicConfig.getPerm())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "!PermName.isReadable(topicConfig.getPerm())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!PermName.isReadable(topicConfig.getPerm())) {\n  response.setCode(ResponseCode.NO_PERMISSION);\n  response.setRemark(\"the topic[\" + requestHeader.getTopic() + \"] pulling message is forbidden\");\n  return response;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 21776,
        "startLineNumber" : 92,
        "startColumnNumber" : 40,
        "endLineNumber" : 472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RemotingCommand response=RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n  final PullMessageResponseHeader responseHeader=(PullMessageResponseHeader)response.readCustomHeader();\n  final PullMessageRequestHeader requestHeader=(PullMessageRequestHeader)request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n  response.setOpaque(request.getOpaque());\n  log.debug(\"receive PullMessage request command, {}\",request);\n  if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(String.format(\"the broker[%s] pulling message is forbidden\",this.brokerController.getBrokerConfig().getBrokerIP1()));\n    return response;\n  }\n  SubscriptionGroupConfig subscriptionGroupConfig=this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n  if (null == subscriptionGroupConfig) {\n    response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n    response.setRemark(String.format(\"subscription group [%s] does not exist, %s\",requestHeader.getConsumerGroup(),FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeEnable()) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"subscription group no permission, \" + requestHeader.getConsumerGroup());\n    return response;\n  }\n  final boolean hasSuspendFlag=PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());\n  final boolean hasCommitOffsetFlag=PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());\n  final boolean hasSubscriptionFlag=PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n  final long suspendTimeoutMillisLong=hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : 0;\n  TopicConfig topicConfig=this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n  if (null == topicConfig) {\n    log.error(\"the topic {} not exist, consumer: {}\",requestHeader.getTopic(),RemotingHelper.parseChannelRemoteAddr(channel));\n    response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n    response.setRemark(String.format(\"topic[%s] not exist, apply first please! %s\",requestHeader.getTopic(),FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));\n    return response;\n  }\n  if (!PermName.isReadable(topicConfig.getPerm())) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"the topic[\" + requestHeader.getTopic() + \"] pulling message is forbidden\");\n    return response;\n  }\n  if (requestHeader.getQueueId() < 0 || requestHeader.getQueueId() >= topicConfig.getReadQueueNums()) {\n    String errorInfo=String.format(\"queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]\",requestHeader.getQueueId(),requestHeader.getTopic(),topicConfig.getReadQueueNums(),channel.remoteAddress());\n    log.warn(errorInfo);\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(errorInfo);\n    return response;\n  }\n  SubscriptionData subscriptionData=null;\n  ConsumerFilterData consumerFilterData=null;\n  if (hasSubscriptionFlag) {\n    try {\n      subscriptionData=FilterAPI.build(requestHeader.getTopic(),requestHeader.getSubscription(),requestHeader.getExpressionType());\n      if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n        consumerFilterData=ConsumerFilterManager.build(requestHeader.getTopic(),requestHeader.getConsumerGroup(),requestHeader.getSubscription(),requestHeader.getExpressionType(),requestHeader.getSubVersion());\n        assert consumerFilterData != null;\n      }\n    }\n catch (    Exception e) {\n      log.warn(\"Parse the consumer's subscription[{}] failed, group: {}\",requestHeader.getSubscription(),requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);\n      response.setRemark(\"parse the consumer's subscription failed\");\n      return response;\n    }\n  }\n else {\n    ConsumerGroupInfo consumerGroupInfo=this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());\n    if (null == consumerGroupInfo) {\n      log.warn(\"the consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"the consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) {\n      response.setCode(ResponseCode.NO_PERMISSION);\n      response.setRemark(\"the consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n      return response;\n    }\n    subscriptionData=consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());\n    if (null == subscriptionData) {\n      log.warn(\"the consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"the consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n      log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n      response.setRemark(\"the consumer's subscription not latest\");\n      return response;\n    }\n    if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n      consumerFilterData=this.brokerController.getConsumerFilterManager().get(requestHeader.getTopic(),requestHeader.getConsumerGroup());\n      if (consumerFilterData == null) {\n        response.setCode(ResponseCode.FILTER_DATA_NOT_EXIST);\n        response.setRemark(\"The broker's consumer filter data is not exist!Your expression may be wrong!\");\n        return response;\n      }\n      if (consumerFilterData.getClientVersion() < requestHeader.getSubVersion()) {\n        log.warn(\"The broker's consumer filter data is not latest, group: {}, topic: {}, serverV: {}, clientV: {}\",requestHeader.getConsumerGroup(),requestHeader.getTopic(),consumerFilterData.getClientVersion(),requestHeader.getSubVersion());\n        response.setCode(ResponseCode.FILTER_DATA_NOT_LATEST);\n        response.setRemark(\"the consumer's consumer filter data not latest\");\n        return response;\n      }\n    }\n  }\n  if (!ExpressionType.isTagType(subscriptionData.getExpressionType()) && !this.brokerController.getBrokerConfig().isEnablePropertyFilter()) {\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(\"The broker does not support consumer to filter message by \" + subscriptionData.getExpressionType());\n    return response;\n  }\n  MessageFilter messageFilter;\n  if (this.brokerController.getBrokerConfig().isFilterSupportRetry()) {\n    messageFilter=new ExpressionForRetryMessageFilter(subscriptionData,consumerFilterData,this.brokerController.getConsumerFilterManager());\n  }\n else {\n    messageFilter=new ExpressionMessageFilter(subscriptionData,consumerFilterData,this.brokerController.getConsumerFilterManager());\n  }\n  final GetMessageResult getMessageResult=this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getQueueOffset(),requestHeader.getMaxMsgNums(),messageFilter);\n  if (getMessageResult != null) {\n    response.setRemark(getMessageResult.getStatus().name());\n    responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());\n    responseHeader.setMinOffset(getMessageResult.getMinOffset());\n    responseHeader.setMaxOffset(getMessageResult.getMaxOffset());\n    if (getMessageResult.isSuggestPullingFromSlave()) {\n      responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n    }\n else {\n      responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n    }\nswitch (this.brokerController.getMessageStoreConfig().getBrokerRole()) {\ncase ASYNC_MASTER:case SYNC_MASTER:      break;\ncase SLAVE:    if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n      response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n      responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n    }\n  break;\n}\nif (this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\nif (getMessageResult.isSuggestPullingFromSlave()) {\n  responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n}\n else {\n  responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n}\n}\n else {\nresponseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n}\nswitch (getMessageResult.getStatus()) {\ncase FOUND:response.setCode(ResponseCode.SUCCESS);\nbreak;\ncase MESSAGE_WAS_REMOVING:response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nbreak;\ncase NO_MATCHED_LOGIC_QUEUE:case NO_MESSAGE_IN_QUEUE:if (0 != requestHeader.getQueueOffset()) {\nresponse.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the broker store no queue data, fix the request offset {} to {}, Topic: {} QueueId: {} Consumer Group: {}\",requestHeader.getQueueOffset(),getMessageResult.getNextBeginOffset(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getConsumerGroup());\n}\n else {\nresponse.setCode(ResponseCode.PULL_NOT_FOUND);\n}\nbreak;\ncase NO_MATCHED_MESSAGE:response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nbreak;\ncase OFFSET_FOUND_NULL:response.setCode(ResponseCode.PULL_NOT_FOUND);\nbreak;\ncase OFFSET_OVERFLOW_BADLY:response.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the request offset: {} over flow badly, broker max offset: {}, consumer: {}\",requestHeader.getQueueOffset(),getMessageResult.getMaxOffset(),channel.remoteAddress());\nbreak;\ncase OFFSET_OVERFLOW_ONE:response.setCode(ResponseCode.PULL_NOT_FOUND);\nbreak;\ncase OFFSET_TOO_SMALL:response.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}\",requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueOffset(),getMessageResult.getMinOffset(),channel.remoteAddress());\nbreak;\ndefault:assert false;\nbreak;\n}\nif (this.hasConsumeMessageHook()) {\nConsumeMessageContext context=new ConsumeMessageContext();\ncontext.setConsumerGroup(requestHeader.getConsumerGroup());\ncontext.setTopic(requestHeader.getTopic());\ncontext.setQueueId(requestHeader.getQueueId());\nString owner=request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\nint incValue=getMessageResult.getMsgCount4Commercial() * commercialBaseCount;\ncontext.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);\ncontext.setCommercialRcvTimes(incValue);\ncontext.setCommercialRcvSize(getMessageResult.getBufferTotalSize());\ncontext.setCommercialOwner(owner);\nbreak;\ncase ResponseCode.PULL_NOT_FOUND:if (!brokerAllowSuspend) {\ncontext.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\ncontext.setCommercialRcvTimes(1);\ncontext.setCommercialOwner(owner);\n}\nbreak;\ncase ResponseCode.PULL_RETRY_IMMEDIATELY:case ResponseCode.PULL_OFFSET_MOVED:context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\ncontext.setCommercialRcvTimes(1);\ncontext.setCommercialOwner(owner);\nbreak;\ndefault:assert false;\nbreak;\n}\nthis.executeConsumeMessageHookBefore(context);\n}\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(),requestHeader.getTopic(),getMessageResult.getMessageCount());\nthis.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(),requestHeader.getTopic(),getMessageResult.getBufferTotalSize());\nthis.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());\nif (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {\nfinal long beginTimeMills=this.brokerController.getMessageStore().now();\nfinal byte[] r=this.readGetMessageResult(getMessageResult,requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId());\nthis.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),(int)(this.brokerController.getMessageStore().now() - beginTimeMills));\nresponse.setBody(r);\n}\n else {\ntry {\nFileRegion fileRegion=new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()),getMessageResult);\nchannel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener(){\n@Override public void operationComplete(ChannelFuture future) throws Exception {\ngetMessageResult.release();\nif (!future.isSuccess()) {\nlog.error(\"transfer many message by pagecache failed, {}\",channel.remoteAddress(),future.cause());\n}\n}\n}\n);\n}\n catch (Throwable e) {\nlog.error(\"transfer many message by pagecache exception\",e);\ngetMessageResult.release();\n}\nresponse=null;\n}\nbreak;\ncase ResponseCode.PULL_NOT_FOUND:if (brokerAllowSuspend && hasSuspendFlag) {\nlong pollingTimeMills=suspendTimeoutMillisLong;\nif (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\npollingTimeMills=this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n}\nString topic=requestHeader.getTopic();\nlong offset=requestHeader.getQueueOffset();\nint queueId=requestHeader.getQueueId();\nPullRequest pullRequest=new PullRequest(request,channel,pollingTimeMills,this.brokerController.getMessageStore().now(),offset,subscriptionData,messageFilter);\nthis.brokerController.getPullRequestHoldService().suspendPullRequest(topic,queueId,pullRequest);\nresponse=null;\nbreak;\n}\ncase ResponseCode.PULL_RETRY_IMMEDIATELY:break;\ncase ResponseCode.PULL_OFFSET_MOVED:if (this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE || this.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) {\nMessageQueue mq=new MessageQueue();\nmq.setTopic(requestHeader.getTopic());\nmq.setQueueId(requestHeader.getQueueId());\nmq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\nOffsetMovedEvent event=new OffsetMovedEvent();\nevent.setConsumerGroup(requestHeader.getConsumerGroup());\nevent.setMessageQueue(mq);\nevent.setOffsetRequest(requestHeader.getQueueOffset());\nevent.setOffsetNew(getMessageResult.getNextBeginOffset());\nthis.generateOffsetMovedEvent(event);\nlog.warn(\"PULL_OFFSET_MOVED:correction offset. topic={}, groupId={}, requestOffset={}, newOffset={}, suggestBrokerId={}\",requestHeader.getTopic(),requestHeader.getConsumerGroup(),event.getOffsetRequest(),event.getOffsetNew(),responseHeader.getSuggestWhichBrokerId());\n}\n else {\nresponseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\nresponse.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nlog.warn(\"PULL_OFFSET_MOVED:none correction. topic={}, groupId={}, requestOffset={}, suggestBrokerId={}\",requestHeader.getTopic(),requestHeader.getConsumerGroup(),requestHeader.getQueueOffset(),responseHeader.getSuggestWhichBrokerId());\n}\nbreak;\ndefault:assert false;\n}\n}\n else {\nresponse.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"store getMessage return null\");\n}\nboolean storeOffsetEnable=brokerAllowSuspend;\nstoreOffsetEnable=storeOffsetEnable && hasCommitOffsetFlag;\nstoreOffsetEnable=storeOffsetEnable && this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;\nif (storeOffsetEnable) {\nthis.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getCommitOffset());\n}\nreturn response;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1782,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 21931,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private RemotingCommand processRequest(final Channel channel,RemotingCommand request,boolean brokerAllowSuspend) throws RemotingCommandException {\n  RemotingCommand response=RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n  final PullMessageResponseHeader responseHeader=(PullMessageResponseHeader)response.readCustomHeader();\n  final PullMessageRequestHeader requestHeader=(PullMessageRequestHeader)request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n  response.setOpaque(request.getOpaque());\n  log.debug(\"receive PullMessage request command, {}\",request);\n  if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(String.format(\"the broker[%s] pulling message is forbidden\",this.brokerController.getBrokerConfig().getBrokerIP1()));\n    return response;\n  }\n  SubscriptionGroupConfig subscriptionGroupConfig=this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n  if (null == subscriptionGroupConfig) {\n    response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n    response.setRemark(String.format(\"subscription group [%s] does not exist, %s\",requestHeader.getConsumerGroup(),FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n    return response;\n  }\n  if (!subscriptionGroupConfig.isConsumeEnable()) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"subscription group no permission, \" + requestHeader.getConsumerGroup());\n    return response;\n  }\n  final boolean hasSuspendFlag=PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());\n  final boolean hasCommitOffsetFlag=PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());\n  final boolean hasSubscriptionFlag=PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n  final long suspendTimeoutMillisLong=hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : 0;\n  TopicConfig topicConfig=this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n  if (null == topicConfig) {\n    log.error(\"the topic {} not exist, consumer: {}\",requestHeader.getTopic(),RemotingHelper.parseChannelRemoteAddr(channel));\n    response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n    response.setRemark(String.format(\"topic[%s] not exist, apply first please! %s\",requestHeader.getTopic(),FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));\n    return response;\n  }\n  if (!PermName.isReadable(topicConfig.getPerm())) {\n    response.setCode(ResponseCode.NO_PERMISSION);\n    response.setRemark(\"the topic[\" + requestHeader.getTopic() + \"] pulling message is forbidden\");\n    return response;\n  }\n  if (requestHeader.getQueueId() < 0 || requestHeader.getQueueId() >= topicConfig.getReadQueueNums()) {\n    String errorInfo=String.format(\"queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]\",requestHeader.getQueueId(),requestHeader.getTopic(),topicConfig.getReadQueueNums(),channel.remoteAddress());\n    log.warn(errorInfo);\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(errorInfo);\n    return response;\n  }\n  SubscriptionData subscriptionData=null;\n  ConsumerFilterData consumerFilterData=null;\n  if (hasSubscriptionFlag) {\n    try {\n      subscriptionData=FilterAPI.build(requestHeader.getTopic(),requestHeader.getSubscription(),requestHeader.getExpressionType());\n      if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n        consumerFilterData=ConsumerFilterManager.build(requestHeader.getTopic(),requestHeader.getConsumerGroup(),requestHeader.getSubscription(),requestHeader.getExpressionType(),requestHeader.getSubVersion());\n        assert consumerFilterData != null;\n      }\n    }\n catch (    Exception e) {\n      log.warn(\"Parse the consumer's subscription[{}] failed, group: {}\",requestHeader.getSubscription(),requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);\n      response.setRemark(\"parse the consumer's subscription failed\");\n      return response;\n    }\n  }\n else {\n    ConsumerGroupInfo consumerGroupInfo=this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());\n    if (null == consumerGroupInfo) {\n      log.warn(\"the consumer's group info not exist, group: {}\",requestHeader.getConsumerGroup());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"the consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (!subscriptionGroupConfig.isConsumeBroadcastEnable() && consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) {\n      response.setCode(ResponseCode.NO_PERMISSION);\n      response.setRemark(\"the consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n      return response;\n    }\n    subscriptionData=consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());\n    if (null == subscriptionData) {\n      log.warn(\"the consumer's subscription not exist, group: {}, topic:{}\",requestHeader.getConsumerGroup(),requestHeader.getTopic());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n      response.setRemark(\"the consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n      return response;\n    }\n    if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n      log.warn(\"The broker's subscription is not latest, group: {} {}\",requestHeader.getConsumerGroup(),subscriptionData.getSubString());\n      response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n      response.setRemark(\"the consumer's subscription not latest\");\n      return response;\n    }\n    if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n      consumerFilterData=this.brokerController.getConsumerFilterManager().get(requestHeader.getTopic(),requestHeader.getConsumerGroup());\n      if (consumerFilterData == null) {\n        response.setCode(ResponseCode.FILTER_DATA_NOT_EXIST);\n        response.setRemark(\"The broker's consumer filter data is not exist!Your expression may be wrong!\");\n        return response;\n      }\n      if (consumerFilterData.getClientVersion() < requestHeader.getSubVersion()) {\n        log.warn(\"The broker's consumer filter data is not latest, group: {}, topic: {}, serverV: {}, clientV: {}\",requestHeader.getConsumerGroup(),requestHeader.getTopic(),consumerFilterData.getClientVersion(),requestHeader.getSubVersion());\n        response.setCode(ResponseCode.FILTER_DATA_NOT_LATEST);\n        response.setRemark(\"the consumer's consumer filter data not latest\");\n        return response;\n      }\n    }\n  }\n  if (!ExpressionType.isTagType(subscriptionData.getExpressionType()) && !this.brokerController.getBrokerConfig().isEnablePropertyFilter()) {\n    response.setCode(ResponseCode.SYSTEM_ERROR);\n    response.setRemark(\"The broker does not support consumer to filter message by \" + subscriptionData.getExpressionType());\n    return response;\n  }\n  MessageFilter messageFilter;\n  if (this.brokerController.getBrokerConfig().isFilterSupportRetry()) {\n    messageFilter=new ExpressionForRetryMessageFilter(subscriptionData,consumerFilterData,this.brokerController.getConsumerFilterManager());\n  }\n else {\n    messageFilter=new ExpressionMessageFilter(subscriptionData,consumerFilterData,this.brokerController.getConsumerFilterManager());\n  }\n  final GetMessageResult getMessageResult=this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getQueueOffset(),requestHeader.getMaxMsgNums(),messageFilter);\n  if (getMessageResult != null) {\n    response.setRemark(getMessageResult.getStatus().name());\n    responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());\n    responseHeader.setMinOffset(getMessageResult.getMinOffset());\n    responseHeader.setMaxOffset(getMessageResult.getMaxOffset());\n    if (getMessageResult.isSuggestPullingFromSlave()) {\n      responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n    }\n else {\n      responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n    }\nswitch (this.brokerController.getMessageStoreConfig().getBrokerRole()) {\ncase ASYNC_MASTER:case SYNC_MASTER:      break;\ncase SLAVE:    if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n      response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n      responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n    }\n  break;\n}\nif (this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\nif (getMessageResult.isSuggestPullingFromSlave()) {\n  responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n}\n else {\n  responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n}\n}\n else {\nresponseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n}\nswitch (getMessageResult.getStatus()) {\ncase FOUND:response.setCode(ResponseCode.SUCCESS);\nbreak;\ncase MESSAGE_WAS_REMOVING:response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nbreak;\ncase NO_MATCHED_LOGIC_QUEUE:case NO_MESSAGE_IN_QUEUE:if (0 != requestHeader.getQueueOffset()) {\nresponse.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the broker store no queue data, fix the request offset {} to {}, Topic: {} QueueId: {} Consumer Group: {}\",requestHeader.getQueueOffset(),getMessageResult.getNextBeginOffset(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getConsumerGroup());\n}\n else {\nresponse.setCode(ResponseCode.PULL_NOT_FOUND);\n}\nbreak;\ncase NO_MATCHED_MESSAGE:response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nbreak;\ncase OFFSET_FOUND_NULL:response.setCode(ResponseCode.PULL_NOT_FOUND);\nbreak;\ncase OFFSET_OVERFLOW_BADLY:response.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the request offset: {} over flow badly, broker max offset: {}, consumer: {}\",requestHeader.getQueueOffset(),getMessageResult.getMaxOffset(),channel.remoteAddress());\nbreak;\ncase OFFSET_OVERFLOW_ONE:response.setCode(ResponseCode.PULL_NOT_FOUND);\nbreak;\ncase OFFSET_TOO_SMALL:response.setCode(ResponseCode.PULL_OFFSET_MOVED);\nlog.info(\"the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}\",requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueOffset(),getMessageResult.getMinOffset(),channel.remoteAddress());\nbreak;\ndefault:assert false;\nbreak;\n}\nif (this.hasConsumeMessageHook()) {\nConsumeMessageContext context=new ConsumeMessageContext();\ncontext.setConsumerGroup(requestHeader.getConsumerGroup());\ncontext.setTopic(requestHeader.getTopic());\ncontext.setQueueId(requestHeader.getQueueId());\nString owner=request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:int commercialBaseCount=brokerController.getBrokerConfig().getCommercialBaseCount();\nint incValue=getMessageResult.getMsgCount4Commercial() * commercialBaseCount;\ncontext.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);\ncontext.setCommercialRcvTimes(incValue);\ncontext.setCommercialRcvSize(getMessageResult.getBufferTotalSize());\ncontext.setCommercialOwner(owner);\nbreak;\ncase ResponseCode.PULL_NOT_FOUND:if (!brokerAllowSuspend) {\ncontext.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\ncontext.setCommercialRcvTimes(1);\ncontext.setCommercialOwner(owner);\n}\nbreak;\ncase ResponseCode.PULL_RETRY_IMMEDIATELY:case ResponseCode.PULL_OFFSET_MOVED:context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\ncontext.setCommercialRcvTimes(1);\ncontext.setCommercialOwner(owner);\nbreak;\ndefault:assert false;\nbreak;\n}\nthis.executeConsumeMessageHookBefore(context);\n}\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(),requestHeader.getTopic(),getMessageResult.getMessageCount());\nthis.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(),requestHeader.getTopic(),getMessageResult.getBufferTotalSize());\nthis.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());\nif (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {\nfinal long beginTimeMills=this.brokerController.getMessageStore().now();\nfinal byte[] r=this.readGetMessageResult(getMessageResult,requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId());\nthis.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),(int)(this.brokerController.getMessageStore().now() - beginTimeMills));\nresponse.setBody(r);\n}\n else {\ntry {\nFileRegion fileRegion=new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()),getMessageResult);\nchannel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener(){\n@Override public void operationComplete(ChannelFuture future) throws Exception {\ngetMessageResult.release();\nif (!future.isSuccess()) {\nlog.error(\"transfer many message by pagecache failed, {}\",channel.remoteAddress(),future.cause());\n}\n}\n}\n);\n}\n catch (Throwable e) {\nlog.error(\"transfer many message by pagecache exception\",e);\ngetMessageResult.release();\n}\nresponse=null;\n}\nbreak;\ncase ResponseCode.PULL_NOT_FOUND:if (brokerAllowSuspend && hasSuspendFlag) {\nlong pollingTimeMills=suspendTimeoutMillisLong;\nif (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\npollingTimeMills=this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n}\nString topic=requestHeader.getTopic();\nlong offset=requestHeader.getQueueOffset();\nint queueId=requestHeader.getQueueId();\nPullRequest pullRequest=new PullRequest(request,channel,pollingTimeMills,this.brokerController.getMessageStore().now(),offset,subscriptionData,messageFilter);\nthis.brokerController.getPullRequestHoldService().suspendPullRequest(topic,queueId,pullRequest);\nresponse=null;\nbreak;\n}\ncase ResponseCode.PULL_RETRY_IMMEDIATELY:break;\ncase ResponseCode.PULL_OFFSET_MOVED:if (this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE || this.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) {\nMessageQueue mq=new MessageQueue();\nmq.setTopic(requestHeader.getTopic());\nmq.setQueueId(requestHeader.getQueueId());\nmq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\nOffsetMovedEvent event=new OffsetMovedEvent();\nevent.setConsumerGroup(requestHeader.getConsumerGroup());\nevent.setMessageQueue(mq);\nevent.setOffsetRequest(requestHeader.getQueueOffset());\nevent.setOffsetNew(getMessageResult.getNextBeginOffset());\nthis.generateOffsetMovedEvent(event);\nlog.warn(\"PULL_OFFSET_MOVED:correction offset. topic={}, groupId={}, requestOffset={}, newOffset={}, suggestBrokerId={}\",requestHeader.getTopic(),requestHeader.getConsumerGroup(),event.getOffsetRequest(),event.getOffsetNew(),responseHeader.getSuggestWhichBrokerId());\n}\n else {\nresponseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\nresponse.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\nlog.warn(\"PULL_OFFSET_MOVED:none correction. topic={}, groupId={}, requestOffset={}, suggestBrokerId={}\",requestHeader.getTopic(),requestHeader.getConsumerGroup(),requestHeader.getQueueOffset(),responseHeader.getSuggestWhichBrokerId());\n}\nbreak;\ndefault:assert false;\n}\n}\n else {\nresponse.setCode(ResponseCode.SYSTEM_ERROR);\nresponse.setRemark(\"store getMessage return null\");\n}\nboolean storeOffsetEnable=brokerAllowSuspend;\nstoreOffsetEnable=storeOffsetEnable && hasCommitOffsetFlag;\nstoreOffsetEnable=storeOffsetEnable && this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;\nif (storeOffsetEnable) {\nthis.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),requestHeader.getConsumerGroup(),requestHeader.getTopic(),requestHeader.getQueueId(),requestHeader.getCommitOffset());\n}\nreturn response;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1801,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "!PermName.isReadable(topicConfig.getPerm())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 136,
    "startColumnNumber" : 33,
    "endLineNumber" : 136,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}