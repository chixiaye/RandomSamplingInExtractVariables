{
  "id" : 13,
  "expression" : "wideDisplayCharacterStartingAt(columnToSet - 1)",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/terminal/TerminalRow.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "wideDisplayCharacterStartingAt(columnToSet - 1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 128,
      "startColumnNumber" : 62,
      "endLineNumber" : 128,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 128,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 109
      },
      "nodeContext" : "(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 109
      },
      "nodeContext" : "wasExtraColForWideChar=(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 110
      },
      "nodeContext" : "boolean wasExtraColForWideChar=(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5673,
        "startLineNumber" : 122,
        "startColumnNumber" : 68,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mStyle[columnToSet]=style;\n  final int newCodePointDisplayWidth=WcWidth.width(codePoint);\n  final boolean newIsCombining=newCodePointDisplayWidth <= 0;\n  boolean wasExtraColForWideChar=(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1);\n  if (newIsCombining) {\n    if (wasExtraColForWideChar)     columnToSet--;\n  }\n else {\n    if (wasExtraColForWideChar)     setChar(columnToSet - 1,' ',style);\n    boolean overwritingWideCharInNextColumn=newCodePointDisplayWidth == 2 && wideDisplayCharacterStartingAt(columnToSet + 1);\n    if (overwritingWideCharInNextColumn)     setChar(columnToSet + 1,' ',style);\n  }\n  char[] text=mText;\n  final int oldStartOfColumnIndex=findStartOfColumn(columnToSet);\n  final int oldCodePointDisplayWidth=WcWidth.width(text,oldStartOfColumnIndex);\n  int oldCharactersUsedForColumn;\n  if (columnToSet + oldCodePointDisplayWidth < mColumns) {\n    oldCharactersUsedForColumn=findStartOfColumn(columnToSet + oldCodePointDisplayWidth) - oldStartOfColumnIndex;\n  }\n else {\n    oldCharactersUsedForColumn=mSpaceUsed - oldStartOfColumnIndex;\n  }\n  int newCharactersUsedForColumn=Character.charCount(codePoint);\n  if (newIsCombining) {\n    newCharactersUsedForColumn+=oldCharactersUsedForColumn;\n  }\n  int oldNextColumnIndex=oldStartOfColumnIndex + oldCharactersUsedForColumn;\n  int newNextColumnIndex=oldStartOfColumnIndex + newCharactersUsedForColumn;\n  final int javaCharDifference=newCharactersUsedForColumn - oldCharactersUsedForColumn;\n  if (javaCharDifference > 0) {\n    int oldCharactersAfterColumn=mSpaceUsed - oldNextColumnIndex;\n    if (mSpaceUsed + javaCharDifference > text.length) {\n      char[] newText=new char[text.length + mColumns];\n      System.arraycopy(text,0,newText,0,oldStartOfColumnIndex + oldCharactersUsedForColumn);\n      System.arraycopy(text,oldNextColumnIndex,newText,newNextColumnIndex,oldCharactersAfterColumn);\n      mText=text=newText;\n    }\n else {\n      System.arraycopy(text,oldNextColumnIndex,text,newNextColumnIndex,oldCharactersAfterColumn);\n    }\n  }\n else   if (javaCharDifference < 0) {\n    System.arraycopy(text,oldNextColumnIndex,text,newNextColumnIndex,mSpaceUsed - oldNextColumnIndex);\n  }\n  mSpaceUsed+=javaCharDifference;\n  Character.toChars(codePoint,text,oldStartOfColumnIndex + (newIsCombining ? oldCharactersUsedForColumn : 0));\n  if (oldCodePointDisplayWidth == 2 && newCodePointDisplayWidth == 1) {\n    if (mSpaceUsed + 1 > text.length) {\n      char[] newText=new char[text.length + mColumns];\n      System.arraycopy(text,0,newText,0,newNextColumnIndex);\n      System.arraycopy(text,newNextColumnIndex,newText,newNextColumnIndex + 1,mSpaceUsed - newNextColumnIndex);\n      mText=text=newText;\n    }\n else {\n      System.arraycopy(text,newNextColumnIndex,text,newNextColumnIndex + 1,mSpaceUsed - newNextColumnIndex);\n    }\n    text[newNextColumnIndex]=' ';\n    ++mSpaceUsed;\n  }\n else   if (oldCodePointDisplayWidth == 1 && newCodePointDisplayWidth == 2) {\n    if (columnToSet == mColumns - 1) {\n      throw new IllegalArgumentException(\"Cannot put wide character in last column\");\n    }\n else     if (columnToSet == mColumns - 2) {\n      mSpaceUsed=(short)newNextColumnIndex;\n    }\n else {\n      int newNextNextColumnIndex=newNextColumnIndex + (Character.isHighSurrogate(mText[newNextColumnIndex]) ? 2 : 1);\n      int nextLen=newNextNextColumnIndex - newNextColumnIndex;\n      System.arraycopy(text,newNextNextColumnIndex,text,newNextColumnIndex,mSpaceUsed - newNextNextColumnIndex);\n      mSpaceUsed-=nextLen;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 432,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5737,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void setChar(int columnToSet,int codePoint,long style){\n  mStyle[columnToSet]=style;\n  final int newCodePointDisplayWidth=WcWidth.width(codePoint);\n  final boolean newIsCombining=newCodePointDisplayWidth <= 0;\n  boolean wasExtraColForWideChar=(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1);\n  if (newIsCombining) {\n    if (wasExtraColForWideChar)     columnToSet--;\n  }\n else {\n    if (wasExtraColForWideChar)     setChar(columnToSet - 1,' ',style);\n    boolean overwritingWideCharInNextColumn=newCodePointDisplayWidth == 2 && wideDisplayCharacterStartingAt(columnToSet + 1);\n    if (overwritingWideCharInNextColumn)     setChar(columnToSet + 1,' ',style);\n  }\n  char[] text=mText;\n  final int oldStartOfColumnIndex=findStartOfColumn(columnToSet);\n  final int oldCodePointDisplayWidth=WcWidth.width(text,oldStartOfColumnIndex);\n  int oldCharactersUsedForColumn;\n  if (columnToSet + oldCodePointDisplayWidth < mColumns) {\n    oldCharactersUsedForColumn=findStartOfColumn(columnToSet + oldCodePointDisplayWidth) - oldStartOfColumnIndex;\n  }\n else {\n    oldCharactersUsedForColumn=mSpaceUsed - oldStartOfColumnIndex;\n  }\n  int newCharactersUsedForColumn=Character.charCount(codePoint);\n  if (newIsCombining) {\n    newCharactersUsedForColumn+=oldCharactersUsedForColumn;\n  }\n  int oldNextColumnIndex=oldStartOfColumnIndex + oldCharactersUsedForColumn;\n  int newNextColumnIndex=oldStartOfColumnIndex + newCharactersUsedForColumn;\n  final int javaCharDifference=newCharactersUsedForColumn - oldCharactersUsedForColumn;\n  if (javaCharDifference > 0) {\n    int oldCharactersAfterColumn=mSpaceUsed - oldNextColumnIndex;\n    if (mSpaceUsed + javaCharDifference > text.length) {\n      char[] newText=new char[text.length + mColumns];\n      System.arraycopy(text,0,newText,0,oldStartOfColumnIndex + oldCharactersUsedForColumn);\n      System.arraycopy(text,oldNextColumnIndex,newText,newNextColumnIndex,oldCharactersAfterColumn);\n      mText=text=newText;\n    }\n else {\n      System.arraycopy(text,oldNextColumnIndex,text,newNextColumnIndex,oldCharactersAfterColumn);\n    }\n  }\n else   if (javaCharDifference < 0) {\n    System.arraycopy(text,oldNextColumnIndex,text,newNextColumnIndex,mSpaceUsed - oldNextColumnIndex);\n  }\n  mSpaceUsed+=javaCharDifference;\n  Character.toChars(codePoint,text,oldStartOfColumnIndex + (newIsCombining ? oldCharactersUsedForColumn : 0));\n  if (oldCodePointDisplayWidth == 2 && newCodePointDisplayWidth == 1) {\n    if (mSpaceUsed + 1 > text.length) {\n      char[] newText=new char[text.length + mColumns];\n      System.arraycopy(text,0,newText,0,newNextColumnIndex);\n      System.arraycopy(text,newNextColumnIndex,newText,newNextColumnIndex + 1,mSpaceUsed - newNextColumnIndex);\n      mText=text=newText;\n    }\n else {\n      System.arraycopy(text,newNextColumnIndex,text,newNextColumnIndex + 1,mSpaceUsed - newNextColumnIndex);\n    }\n    text[newNextColumnIndex]=' ';\n    ++mSpaceUsed;\n  }\n else   if (oldCodePointDisplayWidth == 1 && newCodePointDisplayWidth == 2) {\n    if (columnToSet == mColumns - 1) {\n      throw new IllegalArgumentException(\"Cannot put wide character in last column\");\n    }\n else     if (columnToSet == mColumns - 2) {\n      mSpaceUsed=(short)newNextColumnIndex;\n    }\n else {\n      int newNextNextColumnIndex=newNextColumnIndex + (Character.isHighSurrogate(mText[newNextColumnIndex]) ? 2 : 1);\n      int nextLen=newNextNextColumnIndex - newNextColumnIndex;\n      System.arraycopy(text,newNextNextColumnIndex,text,newNextColumnIndex,mSpaceUsed - newNextNextColumnIndex);\n      mSpaceUsed-=nextLen;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 445,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 110
      },
      "nodeContext" : "boolean wasExtraColForWideChar=(columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 128,
    "startColumnNumber" : 62,
    "endLineNumber" : 128,
    "endColumnNumber" : 109
  } ],
  "layoutRelationDataList" : [ ]
}