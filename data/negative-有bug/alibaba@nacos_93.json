{
  "id" : 93,
  "expression" : "Integer.parseInt(ipAndPort[1])",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/address/src/main/java/com/alibaba/nacos/address/component/AddressServerGeneratorManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer.parseInt(ipAndPort[1])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 76,
      "startColumnNumber" : 29,
      "endLineNumber" : 76,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 60
      },
      "nodeContext" : "instance.setPort(Integer.parseInt(ipAndPort[1]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 61
      },
      "nodeContext" : "instance.setPort(Integer.parseInt(ipAndPort[1]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 72,
        "startColumnNumber" : 34,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String[] ipAndPort=generateIpAndPort(ip);\n  Instance instance=new Instance();\n  instance.setIp(ipAndPort[0]);\n  instance.setPort(Integer.parseInt(ipAndPort[1]));\n  instance.setClusterName(clusterName);\n  instance.setServiceName(serviceName);\n  instance.setTenant(Constants.DEFAULT_NAMESPACE_ID);\n  instance.setApp(rawProductName);\n  instance.setEphemeral(false);\n  instanceList.add(instance);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String ip : ipArray) {\n  String[] ipAndPort=generateIpAndPort(ip);\n  Instance instance=new Instance();\n  instance.setIp(ipAndPort[0]);\n  instance.setPort(Integer.parseInt(ipAndPort[1]));\n  instance.setClusterName(clusterName);\n  instance.setServiceName(serviceName);\n  instance.setTenant(Constants.DEFAULT_NAMESPACE_ID);\n  instance.setApp(rawProductName);\n  instance.setEphemeral(false);\n  instanceList.add(instance);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 65,
        "startColumnNumber" : 30,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null || ipArray.length == 0) {\n    return Collections.emptyList();\n  }\n  List<Instance> instanceList=new ArrayList<>(ipArray.length);\n  for (  String ip : ipArray) {\n    String[] ipAndPort=generateIpAndPort(ip);\n    Instance instance=new Instance();\n    instance.setIp(ipAndPort[0]);\n    instance.setPort(Integer.parseInt(ipAndPort[1]));\n    instance.setClusterName(clusterName);\n    instance.setServiceName(serviceName);\n    instance.setTenant(Constants.DEFAULT_NAMESPACE_ID);\n    instance.setApp(rawProductName);\n    instance.setEphemeral(false);\n    instanceList.add(instance);\n  }\n  return instanceList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1250,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Note: if the parameter inputted is empty then will return the empty list.\n * @param serviceName service name\n * @param clusterName cluster name\n * @param ipArray array of ips\n * @return instance list\n */\npublic List<Instance> generateInstancesByIps(String serviceName,String rawProductName,String clusterName,String[] ipArray){\n  if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null || ipArray.length == 0) {\n    return Collections.emptyList();\n  }\n  List<Instance> instanceList=new ArrayList<>(ipArray.length);\n  for (  String ip : ipArray) {\n    String[] ipAndPort=generateIpAndPort(ip);\n    Instance instance=new Instance();\n    instance.setIp(ipAndPort[0]);\n    instance.setPort(Integer.parseInt(ipAndPort[1]));\n    instance.setClusterName(clusterName);\n    instance.setServiceName(serviceName);\n    instance.setTenant(Constants.DEFAULT_NAMESPACE_ID);\n    instance.setApp(rawProductName);\n    instance.setEphemeral(false);\n    instanceList.add(instance);\n  }\n  return instanceList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 61
      },
      "nodeContext" : "instance.setPort(Integer.parseInt(ipAndPort[1]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 76,
    "startColumnNumber" : 29,
    "endLineNumber" : 76,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}