{
  "id" : 349,
  "expression" : "notificationIt",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-integration/src/main/java/com/netflix/eureka2/integration/EurekaClientIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "notificationIt",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 64,
      "startColumnNumber" : 19,
      "endLineNumber" : 64,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 64,
        "startColumnNumber" : 19,
        "endLineNumber" : 64,
        "endColumnNumber" : 40
      },
      "nodeContext" : "notificationIt.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(notificationIt.next(),is(addChangeNotificationOf(info)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertThat(notificationIt.next(),is(addChangeNotificationOf(info)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 856,
        "startLineNumber" : 48,
        "startColumnNumber" : 66,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EmbeddedWriteCluster writeCluster=deployment.getWriteCluster();\n  String readClusterVip=deployment.getReadCluster().getVip();\n  EurekaClient eurekaClient=Eureka.newClientBuilder(ServerResolvers.fromWriteServer(writeCluster.discoveryResolver(),readClusterVip),writeCluster.registrationResolver()).build();\n  InstanceInfo info=SampleInstanceInfo.ZuulServer.build();\n  eurekaClient.register(info).toBlocking().singleOrDefault(null);\n  Iterator<ChangeNotification<InstanceInfo>> notificationIt=RxBlocking.iteratorFrom(5,TimeUnit.HOURS,eurekaClient.forVips(info.getVipAddress()));\n  assertThat(notificationIt.next(),is(addChangeNotificationOf(info)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test verifies Eureka client bootstrap process where the read cluster server list is first read from the write cluster, and given this information, the client connects the interest channel to one of the provided read servers.\n */\n@Test(timeout=60000) public void testReadServerClusterIsResolvedFromWriteCluster(){\n  EmbeddedWriteCluster writeCluster=deployment.getWriteCluster();\n  String readClusterVip=deployment.getReadCluster().getVip();\n  EurekaClient eurekaClient=Eureka.newClientBuilder(ServerResolvers.fromWriteServer(writeCluster.discoveryResolver(),readClusterVip),writeCluster.registrationResolver()).build();\n  InstanceInfo info=SampleInstanceInfo.ZuulServer.build();\n  eurekaClient.register(info).toBlocking().singleOrDefault(null);\n  Iterator<ChangeNotification<InstanceInfo>> notificationIt=RxBlocking.iteratorFrom(5,TimeUnit.HOURS,eurekaClient.forVips(info.getVipAddress()));\n  assertThat(notificationIt.next(),is(addChangeNotificationOf(info)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertThat(notificationIt.next(),is(addChangeNotificationOf(info)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Iterator<com.netflix.eureka2.interests.ChangeNotification<com.netflix.eureka2.registry.instance.InstanceInfo>>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 64,
    "startColumnNumber" : 19,
    "endLineNumber" : 64,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}