{
  "id" : 61,
  "expression" : "BEFORE_EXECUTE",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/ExecuteEventListener.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BEFORE_EXECUTE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 61,
      "startColumnNumber" : 17,
      "endLineNumber" : 61,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 32
      },
      "nodeContext" : "case BEFORE_EXECUTE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (event.getEventExecutionType()) {\ncase BEFORE_EXECUTE:  AbstractSpan span=ContextManager.createExitSpan(\"/SJDBC/BRANCH/\" + operation,event.getDataSource());\nif (ExecutorDataMap.getDataMap().containsKey(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY)) {\n  ContextManager.continued((ContextSnapshot)ExecutorDataMap.getDataMap().get(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY));\n}\nTags.DB_TYPE.set(span,\"sql\");\nTags.DB_INSTANCE.set(span,event.getDataSource());\nTags.DB_STATEMENT.set(span,event.getSql());\nif (!event.getParameters().isEmpty()) {\nString variables=event.getParameters().stream().map(String::valueOf).collect(Collectors.joining(\",\"));\nTags.DB_BIND_VARIABLES.set(span,variables);\n}\nspan.setComponent(ComponentsDefine.SHARDING_JDBC);\nSpanLayer.asDB(span);\nbreak;\ncase EXECUTE_FAILURE:span=ContextManager.activeSpan();\nspan.errorOccurred();\nif (event.getException().isPresent()) {\nspan.log(event.getException().get());\n}\ncase EXECUTE_SUCCESS:ContextManager.stopSpan();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1517,
        "startLineNumber" : 59,
        "startColumnNumber" : 72,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (event.getEventExecutionType()) {\ncase BEFORE_EXECUTE:    AbstractSpan span=ContextManager.createExitSpan(\"/SJDBC/BRANCH/\" + operation,event.getDataSource());\n  if (ExecutorDataMap.getDataMap().containsKey(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY)) {\n    ContextManager.continued((ContextSnapshot)ExecutorDataMap.getDataMap().get(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY));\n  }\nTags.DB_TYPE.set(span,\"sql\");\nTags.DB_INSTANCE.set(span,event.getDataSource());\nTags.DB_STATEMENT.set(span,event.getSql());\nif (!event.getParameters().isEmpty()) {\nString variables=event.getParameters().stream().map(String::valueOf).collect(Collectors.joining(\",\"));\nTags.DB_BIND_VARIABLES.set(span,variables);\n}\nspan.setComponent(ComponentsDefine.SHARDING_JDBC);\nSpanLayer.asDB(span);\nbreak;\ncase EXECUTE_FAILURE:span=ContextManager.activeSpan();\nspan.errorOccurred();\nif (event.getException().isPresent()) {\nspan.log(event.getException().get());\n}\ncase EXECUTE_SUCCESS:ContextManager.stopSpan();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1585,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(AbstractExecutionEvent event,String operation){\nswitch (event.getEventExecutionType()) {\ncase BEFORE_EXECUTE:    AbstractSpan span=ContextManager.createExitSpan(\"/SJDBC/BRANCH/\" + operation,event.getDataSource());\n  if (ExecutorDataMap.getDataMap().containsKey(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY)) {\n    ContextManager.continued((ContextSnapshot)ExecutorDataMap.getDataMap().get(AsyncExecuteInterceptor.SNAPSHOT_DATA_KEY));\n  }\nTags.DB_TYPE.set(span,\"sql\");\nTags.DB_INSTANCE.set(span,event.getDataSource());\nTags.DB_STATEMENT.set(span,event.getSql());\nif (!event.getParameters().isEmpty()) {\nString variables=event.getParameters().stream().map(String::valueOf).collect(Collectors.joining(\",\"));\nTags.DB_BIND_VARIABLES.set(span,variables);\n}\nspan.setComponent(ComponentsDefine.SHARDING_JDBC);\nSpanLayer.asDB(span);\nbreak;\ncase EXECUTE_FAILURE:span=ContextManager.activeSpan();\nspan.errorOccurred();\nif (event.getException().isPresent()) {\nspan.log(event.getException().get());\n}\ncase EXECUTE_SUCCESS:ContextManager.stopSpan();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 32
      },
      "nodeContext" : "case BEFORE_EXECUTE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 61,
    "startColumnNumber" : 17,
    "endLineNumber" : 61,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}