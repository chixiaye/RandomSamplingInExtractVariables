{
  "id" : 496,
  "expression" : "BigDecimal.valueOf(Long.MIN_VALUE)",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-kernel/shardingsphere-sql-federation/shardingsphere-sql-federation-optimizer/src/main/java/org/apache/shardingsphere/sqlfederation/optimizer/metadata/translatable/ParseRexNodeVisitorImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BigDecimal.valueOf(Long.MIN_VALUE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 200,
      "startColumnNumber" : 36,
      "endLineNumber" : 200,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 200,
        "startColumnNumber" : 23,
        "endLineNumber" : 200,
        "endColumnNumber" : 70
      },
      "nodeContext" : "lowerValue=BigDecimal.valueOf(Long.MIN_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 71
      },
      "nodeContext" : "BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1360,
        "startLineNumber" : 199,
        "startColumnNumber" : 52,
        "endLineNumber" : 223,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n  BigDecimal upperValue=BigDecimal.valueOf(Long.MAX_VALUE);\n  if ((null != each.NEGETIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n    String upper=each.INTEGER_(0).getText();\n    upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n  }\n  if ((null != each.POSITIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n    String lower=each.INTEGER_(0).getText();\n    lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n  }\n  if ((null == each.NEGETIVE_INFINITY_()) && (null == each.POSITIVE_INFINITY_())) {\n    String lower=each.INTEGER_(0).getText();\n    String upper=each.INTEGER_(1).getText();\n    lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n    upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n  }\n  if (null != each.LP_()) {\n    Range<BigDecimal> range=Range.range(lowerValue,BoundType.OPEN,upperValue,BoundType.OPEN);\n    rangeList.add(range);\n  }\n else {\n    Range<BigDecimal> range=Range.range(lowerValue,BoundType.CLOSED,upperValue,BoundType.CLOSED);\n    rangeList.add(range);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1404,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 223,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (ArgRangeContext each : ctx.argRange()) {\n  BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n  BigDecimal upperValue=BigDecimal.valueOf(Long.MAX_VALUE);\n  if ((null != each.NEGETIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n    String upper=each.INTEGER_(0).getText();\n    upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n  }\n  if ((null != each.POSITIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n    String lower=each.INTEGER_(0).getText();\n    lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n  }\n  if ((null == each.NEGETIVE_INFINITY_()) && (null == each.POSITIVE_INFINITY_())) {\n    String lower=each.INTEGER_(0).getText();\n    String upper=each.INTEGER_(1).getText();\n    lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n    upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n  }\n  if (null != each.LP_()) {\n    Range<BigDecimal> range=Range.range(lowerValue,BoundType.OPEN,upperValue,BoundType.OPEN);\n    rangeList.add(range);\n  }\n else {\n    Range<BigDecimal> range=Range.range(lowerValue,BoundType.CLOSED,upperValue,BoundType.CLOSED);\n    rangeList.add(range);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 197,
        "startColumnNumber" : 76,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Range<BigDecimal>> rangeList=new LinkedList<>();\n  for (  ArgRangeContext each : ctx.argRange()) {\n    BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n    BigDecimal upperValue=BigDecimal.valueOf(Long.MAX_VALUE);\n    if ((null != each.NEGETIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n      String upper=each.INTEGER_(0).getText();\n      upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n    }\n    if ((null != each.POSITIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n      String lower=each.INTEGER_(0).getText();\n      lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n    }\n    if ((null == each.NEGETIVE_INFINITY_()) && (null == each.POSITIVE_INFINITY_())) {\n      String lower=each.INTEGER_(0).getText();\n      String upper=each.INTEGER_(1).getText();\n      lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n      upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n    }\n    if (null != each.LP_()) {\n      Range<BigDecimal> range=Range.range(lowerValue,BoundType.OPEN,upperValue,BoundType.OPEN);\n      rangeList.add(range);\n    }\n else {\n      Range<BigDecimal> range=Range.range(lowerValue,BoundType.CLOSED,upperValue,BoundType.CLOSED);\n      rangeList.add(range);\n    }\n  }\n  return Sarg.of(RexUnknownAs.UNKNOWN,ImmutableRangeSet.copyOf(rangeList));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Sarg<BigDecimal> getArgRangeList(final ArgRangeListContext ctx){\n  List<Range<BigDecimal>> rangeList=new LinkedList<>();\n  for (  ArgRangeContext each : ctx.argRange()) {\n    BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n    BigDecimal upperValue=BigDecimal.valueOf(Long.MAX_VALUE);\n    if ((null != each.NEGETIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n      String upper=each.INTEGER_(0).getText();\n      upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n    }\n    if ((null != each.POSITIVE_INFINITY_()) && (null != each.INTEGER_(0))) {\n      String lower=each.INTEGER_(0).getText();\n      lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n    }\n    if ((null == each.NEGETIVE_INFINITY_()) && (null == each.POSITIVE_INFINITY_())) {\n      String lower=each.INTEGER_(0).getText();\n      String upper=each.INTEGER_(1).getText();\n      lowerValue=BigDecimal.valueOf(Long.parseLong(lower));\n      upperValue=BigDecimal.valueOf(Long.parseLong(upper));\n    }\n    if (null != each.LP_()) {\n      Range<BigDecimal> range=Range.range(lowerValue,BoundType.OPEN,upperValue,BoundType.OPEN);\n      rangeList.add(range);\n    }\n else {\n      Range<BigDecimal> range=Range.range(lowerValue,BoundType.CLOSED,upperValue,BoundType.CLOSED);\n      rangeList.add(range);\n    }\n  }\n  return Sarg.of(RexUnknownAs.UNKNOWN,ImmutableRangeSet.copyOf(rangeList));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 71
      },
      "nodeContext" : "BigDecimal lowerValue=BigDecimal.valueOf(Long.MIN_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.math.BigDecimal"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 200,
    "startColumnNumber" : 36,
    "endLineNumber" : 200,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}