{
  "id" : 401,
  "expression" : "logger",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-dashboard/src/main/java/com/netflix/eureka2/EurekaDashboardServer.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 42,
      "startColumnNumber" : 8,
      "endLineNumber" : 42,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 50
      },
      "nodeContext" : "logger.info(\"Eureka 2.0 Dashboard Server\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.info(\"Eureka 2.0 Dashboard Server\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 41,
        "startColumnNumber" : 43,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args){\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 51
      },
      "nodeContext" : "logger.info(\"Eureka 2.0 Dashboard Server\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.Logger"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 46,
      "startColumnNumber" : 12,
      "endLineNumber" : 46,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 122
      },
      "nodeContext" : "logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 123
      },
      "nodeContext" : "logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 45,
        "startColumnNumber" : 30,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 0) {\n  logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n}\n else {\n  DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n  try {\n    config=commandLineParser.process();\n  }\n catch (  Exception e) {\n    System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n    System.exit(-1);\n  }\n  if (commandLineParser.hasHelpOption()) {\n    commandLineParser.printHelp();\n    System.exit(0);\n  }\n  logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 41,
        "startColumnNumber" : 43,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args){\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 123
      },
      "nodeContext" : "logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.Logger"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 61,
      "startColumnNumber" : 12,
      "endLineNumber" : 61,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 102
      },
      "nodeContext" : "logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 103
      },
      "nodeContext" : "logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n  try {\n    config=commandLineParser.process();\n  }\n catch (  Exception e) {\n    System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n    System.exit(-1);\n  }\n  if (commandLineParser.hasHelpOption()) {\n    commandLineParser.printHelp();\n    System.exit(0);\n  }\n  logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (args.length == 0) {\n  logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n}\n else {\n  DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n  try {\n    config=commandLineParser.process();\n  }\n catch (  Exception e) {\n    System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n    System.exit(-1);\n  }\n  if (commandLineParser.hasHelpOption()) {\n    commandLineParser.printHelp();\n    System.exit(0);\n  }\n  logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 41,
        "startColumnNumber" : 43,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args){\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 103
      },
      "nodeContext" : "logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.Logger"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 76
      },
      "nodeContext" : "logger.error(\"Error while starting Eureka Dashboard server.\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "logger.error(\"Error while starting Eureka Dashboard server.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 68,
        "startColumnNumber" : 30,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.error(\"Error while starting Eureka Dashboard server.\",e);\n  if (server != null) {\n    server.shutdown();\n  }\n  System.exit(-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  logger.error(\"Error while starting Eureka Dashboard server.\",e);\n  if (server != null) {\n    server.shutdown();\n  }\n  System.exit(-1);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n  server.start();\n}\n catch (Exception e) {\n  logger.error(\"Error while starting Eureka Dashboard server.\",e);\n  if (server != null) {\n    server.shutdown();\n  }\n  System.exit(-1);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 41,
        "startColumnNumber" : 43,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args){\n  logger.info(\"Eureka 2.0 Dashboard Server\");\n  EurekaDashboardConfig config=null;\n  if (args.length == 0) {\n    logger.info(\"No command line parameters provided; enabling archaius property loader for server bootstrapping\");\n  }\n else {\n    DashboardCommandLineParser commandLineParser=new DashboardCommandLineParser(args);\n    try {\n      config=commandLineParser.process();\n    }\n catch (    Exception e) {\n      System.err.println(\"ERROR: invalid configuration parameters; \" + e.getMessage());\n      System.exit(-1);\n    }\n    if (commandLineParser.hasHelpOption()) {\n      commandLineParser.printHelp();\n      System.exit(0);\n    }\n    logger.info(\"Server bootstrapping from command line parameters {}\",Arrays.toString(args));\n  }\n  EurekaDashboardServer server=null;\n  try {\n    server=config != null ? new EurekaDashboardServer(config) : new EurekaDashboardServer(\"eureka-dashboard-server\");\n    server.start();\n  }\n catch (  Exception e) {\n    logger.error(\"Error while starting Eureka Dashboard server.\",e);\n    if (server != null) {\n      server.shutdown();\n    }\n    System.exit(-1);\n  }\n  server.waitTillShutdown();\n  System.exit(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "logger.error(\"Error while starting Eureka Dashboard server.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.Logger"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 42,
    "startColumnNumber" : 8,
    "endLineNumber" : 42,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 46,
    "startColumnNumber" : 12,
    "endLineNumber" : 46,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 61,
    "startColumnNumber" : 12,
    "endLineNumber" : 61,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}