{
  "id" : 145,
  "expression" : "javaClass",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass20.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "javaClass",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 33,
      "startColumnNumber" : 13,
      "endLineNumber" : 33,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 33,
        "startColumnNumber" : 13,
        "endLineNumber" : 33,
        "endColumnNumber" : 42
      },
      "nodeContext" : "javaClass.getTopParentClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 28,
        "startColumnNumber" : 20,
        "endLineNumber" : 38,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ClassNode cls=getClassNode(Test$Cls.class);\n  assertThat(cls.get(AType.ANONYMOUS_CLASS)).isNull();\n  JavaClass javaClass=JadxInternalAccess.convertClassNode(jadxDecompiler,cls);\n  assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n  assertThat(cls).code().containsOne(\"new TestAnonymousClass20$Test$Cls();\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 27,
        "startColumnNumber" : 1,
        "endLineNumber" : 38,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void test(){\n  ClassNode cls=getClassNode(Test$Cls.class);\n  assertThat(cls.get(AType.ANONYMOUS_CLASS)).isNull();\n  JavaClass javaClass=JadxInternalAccess.convertClassNode(jadxDecompiler,cls);\n  assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n  assertThat(cls).code().containsOne(\"new TestAnonymousClass20$Test$Cls();\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 56,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.api.JavaClass"
  }, {
    "nodeContext" : "javaClass",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 33,
      "startColumnNumber" : 54,
      "endLineNumber" : 33,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 28,
        "startColumnNumber" : 20,
        "endLineNumber" : 38,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ClassNode cls=getClassNode(Test$Cls.class);\n  assertThat(cls.get(AType.ANONYMOUS_CLASS)).isNull();\n  JavaClass javaClass=JadxInternalAccess.convertClassNode(jadxDecompiler,cls);\n  assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n  assertThat(cls).code().containsOne(\"new TestAnonymousClass20$Test$Cls();\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 27,
        "startColumnNumber" : 1,
        "endLineNumber" : 38,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void test(){\n  ClassNode cls=getClassNode(Test$Cls.class);\n  assertThat(cls.get(AType.ANONYMOUS_CLASS)).isNull();\n  JavaClass javaClass=JadxInternalAccess.convertClassNode(jadxDecompiler,cls);\n  assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n  assertThat(cls).code().containsOne(\"new TestAnonymousClass20$Test$Cls();\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 56,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(javaClass.getTopParentClass()).isEqualTo(javaClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jadx.api.JavaClass"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 33,
    "startColumnNumber" : 13,
    "endLineNumber" : 33,
    "endColumnNumber" : 22
  }, {
    "charLength" : 9,
    "startLineNumber" : 33,
    "startColumnNumber" : 54,
    "endLineNumber" : 33,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  } ]
}