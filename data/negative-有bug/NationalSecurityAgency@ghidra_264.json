{
  "id" : 264,
  "expression" : "segments[i].isPure()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/NeLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "segments[i].isPure()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 290,
      "startColumnNumber" : 6,
      "endLineNumber" : 290,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 290,
        "startColumnNumber" : 6,
        "endLineNumber" : 290,
        "endColumnNumber" : 74
      },
      "nodeContext" : "segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 290,
        "startColumnNumber" : 5,
        "endLineNumber" : 290,
        "endColumnNumber" : 75
      },
      "nodeContext" : "(segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 289,
        "startColumnNumber" : 16,
        "endLineNumber" : 290,
        "endColumnNumber" : 82
      },
      "nodeContext" : "TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 289,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 83
      },
      "nodeContext" : "buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 289,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 84
      },
      "nodeContext" : "buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2613,
        "startLineNumber" : 240,
        "startColumnNumber" : 45,
        "endLineNumber" : 295,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n  byte[] bytes=segments[i].getBytes();\n  Address addr=space.getAddress(segments[i].getSegmentID(),0);\n  boolean r=true;\n  boolean w=segments[i].isData() && !segments[i].isReadOnly();\n  boolean x=segments[i].isCode();\n  if (bytes.length > 0) {\n    MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n  }\n else {\n    MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n  }\n  if (segments[i].is32bit()) {\n    Address end=addr.add(bytes.length - 1);\n    Register opsizeRegister=context.getRegister(\"opsize\");\n    Register addrsizeRegister=context.getRegister(\"addrsize\");\n    try {\n      context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n      context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n    }\n catch (    ContextChangeException e) {\n    }\n  }\n  StringBuffer buff=new StringBuffer();\n  buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n  buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n  buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n  buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n  buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n  buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n  buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n  buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n  buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n  buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n  buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n  buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n  CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n  cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 240,
        "startColumnNumber" : 3,
        "endLineNumber" : 295,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < segments.length; ++i) {\n  String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n  byte[] bytes=segments[i].getBytes();\n  Address addr=space.getAddress(segments[i].getSegmentID(),0);\n  boolean r=true;\n  boolean w=segments[i].isData() && !segments[i].isReadOnly();\n  boolean x=segments[i].isCode();\n  if (bytes.length > 0) {\n    MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n  }\n else {\n    MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n  }\n  if (segments[i].is32bit()) {\n    Address end=addr.add(bytes.length - 1);\n    Register opsizeRegister=context.getRegister(\"opsize\");\n    Register addrsizeRegister=context.getRegister(\"addrsize\");\n    try {\n      context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n      context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n    }\n catch (    ContextChangeException e) {\n    }\n  }\n  StringBuffer buff=new StringBuffer();\n  buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n  buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n  buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n  buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n  buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n  buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n  buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n  buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n  buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n  buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n  buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n  buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n  buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n  CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n  cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 463,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2997,
        "startLineNumber" : 238,
        "startColumnNumber" : 6,
        "endLineNumber" : 305,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Segment[] segments=st.getSegments();\n  for (int i=0; i < segments.length; ++i) {\n    String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n    byte[] bytes=segments[i].getBytes();\n    Address addr=space.getAddress(segments[i].getSegmentID(),0);\n    boolean r=true;\n    boolean w=segments[i].isData() && !segments[i].isReadOnly();\n    boolean x=segments[i].isCode();\n    if (bytes.length > 0) {\n      MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n    }\n else {\n      MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n    }\n    if (segments[i].is32bit()) {\n      Address end=addr.add(bytes.length - 1);\n      Register opsizeRegister=context.getRegister(\"opsize\");\n      Register addrsizeRegister=context.getRegister(\"addrsize\");\n      try {\n        context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n        context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n      }\n catch (      ContextChangeException e) {\n      }\n    }\n    StringBuffer buff=new StringBuffer();\n    buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n    buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n    buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n    buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n    buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n    buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n    buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n    buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n    buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n    buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n    buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n    buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n    CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n    cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n  }\n  for (  Segment segment : segments) {\n    if (!segment.isCode()) {\n      continue;\n    }\n    Address addr=space.getAddress(segment.getSegmentID(),0);\n    MemoryBlock mb=program.getMemory().getBlock(addr);\n    setRegisterDS(ib,st,context,mb.getStart(),mb.getEnd());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 523,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3081,
        "startLineNumber" : 238,
        "startColumnNumber" : 2,
        "endLineNumber" : 308,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  Segment[] segments=st.getSegments();\n  for (int i=0; i < segments.length; ++i) {\n    String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n    byte[] bytes=segments[i].getBytes();\n    Address addr=space.getAddress(segments[i].getSegmentID(),0);\n    boolean r=true;\n    boolean w=segments[i].isData() && !segments[i].isReadOnly();\n    boolean x=segments[i].isCode();\n    if (bytes.length > 0) {\n      MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n    }\n else {\n      MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n    }\n    if (segments[i].is32bit()) {\n      Address end=addr.add(bytes.length - 1);\n      Register opsizeRegister=context.getRegister(\"opsize\");\n      Register addrsizeRegister=context.getRegister(\"addrsize\");\n      try {\n        context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n        context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n      }\n catch (      ContextChangeException e) {\n      }\n    }\n    StringBuffer buff=new StringBuffer();\n    buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n    buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n    buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n    buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n    buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n    buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n    buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n    buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n    buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n    buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n    buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n    buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n    buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n    CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n    cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n  }\n  for (  Segment segment : segments) {\n    if (!segment.isCode()) {\n      continue;\n    }\n    Address addr=space.getAddress(segment.getSegmentID(),0);\n    MemoryBlock mb=program.getMemory().getBlock(addr);\n    setRegisterDS(ib,st,context,mb.getStart(),mb.getEnd());\n  }\n}\n catch (AddressOverflowException e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 535,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3090,
        "startLineNumber" : 237,
        "startColumnNumber" : 43,
        "endLineNumber" : 309,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    Segment[] segments=st.getSegments();\n    for (int i=0; i < segments.length; ++i) {\n      String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n      byte[] bytes=segments[i].getBytes();\n      Address addr=space.getAddress(segments[i].getSegmentID(),0);\n      boolean r=true;\n      boolean w=segments[i].isData() && !segments[i].isReadOnly();\n      boolean x=segments[i].isCode();\n      if (bytes.length > 0) {\n        MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n      }\n else {\n        MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n      }\n      if (segments[i].is32bit()) {\n        Address end=addr.add(bytes.length - 1);\n        Register opsizeRegister=context.getRegister(\"opsize\");\n        Register addrsizeRegister=context.getRegister(\"addrsize\");\n        try {\n          context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n          context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n        }\n catch (        ContextChangeException e) {\n        }\n      }\n      StringBuffer buff=new StringBuffer();\n      buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n      buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n      buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n      buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n      buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n      buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n      buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n      buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n      buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n      buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n      buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n      buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n      CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n      cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n    }\n    for (    Segment segment : segments) {\n      if (!segment.isCode()) {\n        continue;\n      }\n      Address addr=space.getAddress(segment.getSegmentID(),0);\n      MemoryBlock mb=program.getMemory().getBlock(addr);\n      setRegisterDS(ib,st,context,mb.getStart(),mb.getEnd());\n    }\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 536,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3295,
        "startLineNumber" : 235,
        "startColumnNumber" : 1,
        "endLineNumber" : 309,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void processSegmentTable(MessageLog log,InformationBlock ib,SegmentTable st,SegmentedAddressSpace space,Program program,ProgramContext context,TaskMonitor monitor) throws IOException {\n  try {\n    Segment[] segments=st.getSegments();\n    for (int i=0; i < segments.length; ++i) {\n      String name=(segments[i].isCode() ? \"Code\" : \"Data\") + (i + 1);\n      byte[] bytes=segments[i].getBytes();\n      Address addr=space.getAddress(segments[i].getSegmentID(),0);\n      boolean r=true;\n      boolean w=segments[i].isData() && !segments[i].isReadOnly();\n      boolean x=segments[i].isCode();\n      if (bytes.length > 0) {\n        MemoryBlockUtils.createInitializedBlock(program,false,name,addr,new ByteArrayInputStream(bytes),bytes.length,\"\",\"\",r,w,x,log,monitor);\n      }\n else {\n        MemoryBlockUtils.createUninitializedBlock(program,false,name,addr,bytes.length,\"\",\"\",r,w,x,log);\n      }\n      if (segments[i].is32bit()) {\n        Address end=addr.add(bytes.length - 1);\n        Register opsizeRegister=context.getRegister(\"opsize\");\n        Register addrsizeRegister=context.getRegister(\"addrsize\");\n        try {\n          context.setValue(opsizeRegister,addr,end,BigInteger.valueOf(1));\n          context.setValue(addrsizeRegister,addr,end,BigInteger.valueOf(1));\n        }\n catch (        ContextChangeException e) {\n        }\n      }\n      StringBuffer buff=new StringBuffer();\n      buff.append(\"Segment:    \" + (i + 1) + \"\\n\");\n      buff.append(\"Offset:     \" + Conv.toHexString(segments[i].getOffsetShiftAligned()) + \"\\n\");\n      buff.append(\"Length:     \" + Conv.toHexString(segments[i].getLength()) + \"\\n\");\n      buff.append(\"Min Alloc:  \" + Conv.toHexString(segments[i].getMinAllocSize()) + \"\\n\");\n      buff.append(\"Flags:      \" + Conv.toHexString(segments[i].getFlagword()) + \"\\n\");\n      buff.append(TAB + (segments[i].isCode() ? \"Code\" : \"Data\") + \"\\n\");\n      buff.append((segments[i].isDiscardable() ? TAB + \"Discardable\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isExecuteOnly() ? TAB + \"Execute Only\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isLoaded() ? TAB + \"Loaded\" + \"\\n\" : \"\"));\n      buff.append((segments[i].isLoaderAllocated() ? TAB + \"LoaderAllocated\" + \"\\n\" : \"\"));\n      buff.append(TAB + (segments[i].isMoveable() ? \"Moveable\" : \"Fixed\") + \"\\n\");\n      buff.append(TAB + (segments[i].isPreload() ? \"Preload\" : \"LoadOnCall\") + \"\\n\");\n      buff.append(TAB + (segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\") + \"\\n\");\n      buff.append((segments[i].isReadOnly() ? TAB + \"Read Only\" + \"\\n\" : \"\"));\n      buff.append((segments[i].is32bit() ? TAB + \"Use 32 Bit\" + \"\\n\" : \"\"));\n      CodeUnit cu=program.getListing().getCodeUnitAt(addr);\n      cu.setComment(CodeUnit.PRE_COMMENT,buff.toString());\n    }\n    for (    Segment segment : segments) {\n      if (!segment.isCode()) {\n        continue;\n      }\n      Address addr=space.getAddress(segment.getSegmentID(),0);\n      MemoryBlock mb=program.getMemory().getBlock(addr);\n      setRegisterDS(ib,st,context,mb.getStart(),mb.getEnd());\n    }\n  }\n catch (  AddressOverflowException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 570,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 290,
        "startColumnNumber" : 5,
        "endLineNumber" : 290,
        "endColumnNumber" : 75
      },
      "nodeContext" : "(segments[i].isPure() ? \"Pure (Shareable)\" : \"Impure (Non-shareable)\")",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 290,
    "startColumnNumber" : 6,
    "endLineNumber" : 290,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}