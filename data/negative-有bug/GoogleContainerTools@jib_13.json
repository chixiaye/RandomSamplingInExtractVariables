{
  "id" : 13,
  "expression" : "\"Port number '\" + input + \"' is out of usual range (1-65535).\"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/frontend/ExposedPortsParserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Port number '\" + input + \"' is out of usual range (1-65535).\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 91,
      "startColumnNumber" : 12,
      "endLineNumber" : 91,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 89,
        "startColumnNumber" : 41,
        "endLineNumber" : 92,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (NumberFormatException ex) {\n  Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  ExposedPortsParser.parse(Collections.singletonList(input));\n  Assert.fail();\n}\n catch (NumberFormatException ex) {\n  Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 85,
        "startColumnNumber" : 35,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ExposedPortsParser.parse(Collections.singletonList(input));\n    Assert.fail();\n  }\n catch (  NumberFormatException ex) {\n    Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String input : badInputs) {\n  try {\n    ExposedPortsParser.parse(Collections.singletonList(input));\n    Assert.fail();\n  }\n catch (  NumberFormatException ex) {\n    Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2180,
        "startLineNumber" : 39,
        "startColumnNumber" : 26,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> goodInputs=Arrays.asList(\"1000\",\"2000-2003\",\"3000-3000\",\"4000/tcp\",\"5000/udp\",\"6000-6002/udp\");\n  ImmutableList<Port> expected=new ImmutableList.Builder<Port>().add(new Port(1000,Protocol.TCP),new Port(2000,Protocol.TCP),new Port(2001,Protocol.TCP),new Port(2002,Protocol.TCP),new Port(2003,Protocol.TCP),new Port(3000,Protocol.TCP),new Port(4000,Protocol.TCP),new Port(5000,Protocol.UDP),new Port(6000,Protocol.UDP),new Port(6001,Protocol.UDP),new Port(6002,Protocol.UDP)).build();\n  ImmutableList<Port> result=ExposedPortsParser.parse(goodInputs);\n  Assert.assertEquals(expected,result);\n  List<String> badInputs=Arrays.asList(\"abc\",\"/udp\",\"1000/abc\",\"a100/tcp\",\"20/udpabc\");\n  for (  String input : badInputs) {\n    try {\n      ExposedPortsParser.parse(Collections.singletonList(input));\n      Assert.fail();\n    }\n catch (    NumberFormatException ex) {\n      Assert.assertEquals(\"Invalid port configuration: '\" + input + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\",ex.getMessage());\n    }\n  }\n  try {\n    ExposedPortsParser.parse(Collections.singletonList(\"4002-4000\"));\n    Assert.fail();\n  }\n catch (  NumberFormatException ex) {\n    Assert.assertEquals(\"Invalid port range '4002-4000'; smaller number must come first.\",ex.getMessage());\n  }\n  badInputs=Arrays.asList(\"0\",\"70000\",\"0-400\",\"1-70000\");\n  for (  String input : badInputs) {\n    try {\n      ExposedPortsParser.parse(Collections.singletonList(input));\n      Assert.fail();\n    }\n catch (    NumberFormatException ex) {\n      Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2212,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testParse(){\n  List<String> goodInputs=Arrays.asList(\"1000\",\"2000-2003\",\"3000-3000\",\"4000/tcp\",\"5000/udp\",\"6000-6002/udp\");\n  ImmutableList<Port> expected=new ImmutableList.Builder<Port>().add(new Port(1000,Protocol.TCP),new Port(2000,Protocol.TCP),new Port(2001,Protocol.TCP),new Port(2002,Protocol.TCP),new Port(2003,Protocol.TCP),new Port(3000,Protocol.TCP),new Port(4000,Protocol.TCP),new Port(5000,Protocol.UDP),new Port(6000,Protocol.UDP),new Port(6001,Protocol.UDP),new Port(6002,Protocol.UDP)).build();\n  ImmutableList<Port> result=ExposedPortsParser.parse(goodInputs);\n  Assert.assertEquals(expected,result);\n  List<String> badInputs=Arrays.asList(\"abc\",\"/udp\",\"1000/abc\",\"a100/tcp\",\"20/udpabc\");\n  for (  String input : badInputs) {\n    try {\n      ExposedPortsParser.parse(Collections.singletonList(input));\n      Assert.fail();\n    }\n catch (    NumberFormatException ex) {\n      Assert.assertEquals(\"Invalid port configuration: '\" + input + \"'. Make sure the port is a single number or a range of two numbers separated \"+ \"with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or \"+ \"'<portNum>/udp').\",ex.getMessage());\n    }\n  }\n  try {\n    ExposedPortsParser.parse(Collections.singletonList(\"4002-4000\"));\n    Assert.fail();\n  }\n catch (  NumberFormatException ex) {\n    Assert.assertEquals(\"Invalid port range '4002-4000'; smaller number must come first.\",ex.getMessage());\n  }\n  badInputs=Arrays.asList(\"0\",\"70000\",\"0-400\",\"1-70000\");\n  for (  String input : badInputs) {\n    try {\n      ExposedPortsParser.parse(Collections.singletonList(input));\n      Assert.fail();\n    }\n catch (    NumberFormatException ex) {\n      Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 271,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertEquals(\"Port number '\" + input + \"' is out of usual range (1-65535).\",ex.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 11,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 91,
    "startColumnNumber" : 12,
    "endLineNumber" : 91,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}