{
  "id" : 295,
  "expression" : "\"_\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/mod/ContentParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"_\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 620,
      "startColumnNumber" : 74,
      "endLineNumber" : 620,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 620,
        "startColumnNumber" : 48,
        "endLineNumber" : 620,
        "endColumnNumber" : 78
      },
      "nodeContext" : "child.name().replace(\" \",\"_\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 620,
        "startColumnNumber" : 37,
        "endLineNumber" : 620,
        "endColumnNumber" : 79
      },
      "nodeContext" : "fields.get(child.name().replace(\" \",\"_\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 620,
        "startColumnNumber" : 26,
        "endLineNumber" : 620,
        "endColumnNumber" : 79
      },
      "nodeContext" : "metadata=fields.get(child.name().replace(\" \",\"_\"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 620,
        "startColumnNumber" : 12,
        "endLineNumber" : 620,
        "endColumnNumber" : 80
      },
      "nodeContext" : "FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 619,
        "startColumnNumber" : 79,
        "endLineNumber" : 645,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n  if (metadata == null) {\n    if (ignoreUnknownFields) {\n      Log.warn(\"@: Ignoring unknown field: \" + child.name + \" (\"+ type.getName()+ \")\",object);\n      continue;\n    }\n else {\n      SerializationException ex=new SerializationException(\"Field not found: \" + child.name + \" (\"+ type.getName()+ \")\");\n      ex.addTrace(child.trace());\n      throw ex;\n    }\n  }\n  Field field=metadata.field;\n  try {\n    field.set(object,parser.readValue(field.getType(),metadata.elementType,child,metadata.keyType));\n  }\n catch (  IllegalAccessException ex) {\n    throw new SerializationException(\"Error accessing field: \" + field.getName() + \" (\"+ type.getName()+ \")\",ex);\n  }\ncatch (  SerializationException ex) {\n    ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n    throw ex;\n  }\ncatch (  RuntimeException runtimeEx) {\n    SerializationException ex=new SerializationException(runtimeEx);\n    ex.addTrace(child.trace());\n    ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n    throw ex;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1445,
        "startLineNumber" : 619,
        "startColumnNumber" : 8,
        "endLineNumber" : 645,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (JsonValue child=jsonMap.child; child != null; child=child.next) {\n  FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n  if (metadata == null) {\n    if (ignoreUnknownFields) {\n      Log.warn(\"@: Ignoring unknown field: \" + child.name + \" (\"+ type.getName()+ \")\",object);\n      continue;\n    }\n else {\n      SerializationException ex=new SerializationException(\"Field not found: \" + child.name + \" (\"+ type.getName()+ \")\");\n      ex.addTrace(child.trace());\n      throw ex;\n    }\n  }\n  Field field=metadata.field;\n  try {\n    field.set(object,parser.readValue(field.getType(),metadata.elementType,child,metadata.keyType));\n  }\n catch (  IllegalAccessException ex) {\n    throw new SerializationException(\"Error accessing field: \" + field.getName() + \" (\"+ type.getName()+ \")\",ex);\n  }\ncatch (  SerializationException ex) {\n    ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n    throw ex;\n  }\ncatch (  RuntimeException runtimeEx) {\n    SerializationException ex=new SerializationException(runtimeEx);\n    ex.addTrace(child.trace());\n    ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n    throw ex;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3612,
        "startLineNumber" : 613,
        "startColumnNumber" : 53,
        "endLineNumber" : 696,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonValue research=jsonMap.remove(\"research\");\n  toBeParsed.remove(object);\n  var type=object.getClass();\n  var fields=parser.getFields(type);\n  for (JsonValue child=jsonMap.child; child != null; child=child.next) {\n    FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n    if (metadata == null) {\n      if (ignoreUnknownFields) {\n        Log.warn(\"@: Ignoring unknown field: \" + child.name + \" (\"+ type.getName()+ \")\",object);\n        continue;\n      }\n else {\n        SerializationException ex=new SerializationException(\"Field not found: \" + child.name + \" (\"+ type.getName()+ \")\");\n        ex.addTrace(child.trace());\n        throw ex;\n      }\n    }\n    Field field=metadata.field;\n    try {\n      field.set(object,parser.readValue(field.getType(),metadata.elementType,child,metadata.keyType));\n    }\n catch (    IllegalAccessException ex) {\n      throw new SerializationException(\"Error accessing field: \" + field.getName() + \" (\"+ type.getName()+ \")\",ex);\n    }\ncatch (    SerializationException ex) {\n      ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n      throw ex;\n    }\ncatch (    RuntimeException runtimeEx) {\n      SerializationException ex=new SerializationException(runtimeEx);\n      ex.addTrace(child.trace());\n      ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n      throw ex;\n    }\n  }\n  if (object instanceof   UnlockableContent unlock && research != null) {\n    String researchName;\n    ItemStack[] customRequirements;\n    if (research.isString()) {\n      researchName=research.asString();\n      customRequirements=null;\n    }\n else {\n      researchName=research.getString(\"parent\");\n      customRequirements=research.has(\"requirements\") ? parser.readValue(ItemStack[].class,research.get(\"requirements\")) : null;\n    }\n    TechNode lastNode=TechTree.all.find(t -> t.content == unlock);\n    if (lastNode != null) {\n      lastNode.remove();\n    }\n    TechNode node=new TechNode(null,unlock,customRequirements == null ? unlock.researchRequirements() : customRequirements);\n    LoadedMod cur=currentMod;\n    postreads.add(() -> {\n      currentContent=unlock;\n      currentMod=cur;\n      if (node.parent != null) {\n        node.parent.children.remove(node);\n      }\n      TechNode parent=TechTree.all.find(t -> t.content.name.equals(researchName) || t.content.name.equals(currentMod.name + \"-\" + researchName));\n      if (parent == null) {\n        throw new IllegalArgumentException(\"Content '\" + researchName + \"' isn't in the tech tree, but '\"+ unlock.name+ \"' requires it to be researched.\");\n      }\n      if (!parent.children.contains(node)) {\n        parent.children.add(node);\n      }\n      node.parent=parent;\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 447,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3661,
        "startLineNumber" : 613,
        "startColumnNumber" : 4,
        "endLineNumber" : 696,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void readFields(Object object,JsonValue jsonMap){\n  JsonValue research=jsonMap.remove(\"research\");\n  toBeParsed.remove(object);\n  var type=object.getClass();\n  var fields=parser.getFields(type);\n  for (JsonValue child=jsonMap.child; child != null; child=child.next) {\n    FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n    if (metadata == null) {\n      if (ignoreUnknownFields) {\n        Log.warn(\"@: Ignoring unknown field: \" + child.name + \" (\"+ type.getName()+ \")\",object);\n        continue;\n      }\n else {\n        SerializationException ex=new SerializationException(\"Field not found: \" + child.name + \" (\"+ type.getName()+ \")\");\n        ex.addTrace(child.trace());\n        throw ex;\n      }\n    }\n    Field field=metadata.field;\n    try {\n      field.set(object,parser.readValue(field.getType(),metadata.elementType,child,metadata.keyType));\n    }\n catch (    IllegalAccessException ex) {\n      throw new SerializationException(\"Error accessing field: \" + field.getName() + \" (\"+ type.getName()+ \")\",ex);\n    }\ncatch (    SerializationException ex) {\n      ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n      throw ex;\n    }\ncatch (    RuntimeException runtimeEx) {\n      SerializationException ex=new SerializationException(runtimeEx);\n      ex.addTrace(child.trace());\n      ex.addTrace(field.getName() + \" (\" + type.getName()+ \")\");\n      throw ex;\n    }\n  }\n  if (object instanceof   UnlockableContent unlock && research != null) {\n    String researchName;\n    ItemStack[] customRequirements;\n    if (research.isString()) {\n      researchName=research.asString();\n      customRequirements=null;\n    }\n else {\n      researchName=research.getString(\"parent\");\n      customRequirements=research.has(\"requirements\") ? parser.readValue(ItemStack[].class,research.get(\"requirements\")) : null;\n    }\n    TechNode lastNode=TechTree.all.find(t -> t.content == unlock);\n    if (lastNode != null) {\n      lastNode.remove();\n    }\n    TechNode node=new TechNode(null,unlock,customRequirements == null ? unlock.researchRequirements() : customRequirements);\n    LoadedMod cur=currentMod;\n    postreads.add(() -> {\n      currentContent=unlock;\n      currentMod=cur;\n      if (node.parent != null) {\n        node.parent.children.remove(node);\n      }\n      TechNode parent=TechTree.all.find(t -> t.content.name.equals(researchName) || t.content.name.equals(currentMod.name + \"-\" + researchName));\n      if (parent == null) {\n        throw new IllegalArgumentException(\"Content '\" + researchName + \"' isn't in the tech tree, but '\"+ unlock.name+ \"' requires it to be researched.\");\n      }\n      if (!parent.children.contains(node)) {\n        parent.children.add(node);\n      }\n      node.parent=parent;\n    }\n);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 458,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 620,
        "startColumnNumber" : 12,
        "endLineNumber" : 620,
        "endColumnNumber" : 80
      },
      "nodeContext" : "FieldMetadata metadata=fields.get(child.name().replace(\" \",\"_\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 620,
    "startColumnNumber" : 74,
    "endLineNumber" : 620,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}