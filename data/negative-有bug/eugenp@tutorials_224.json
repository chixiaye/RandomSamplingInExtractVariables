{
  "id" : 224,
  "expression" : "Integer.MIN_VALUE",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer.MIN_VALUE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 76,
      "startColumnNumber" : 38,
      "endLineNumber" : 76,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 56
      },
      "nodeContext" : "intHandle.set(memoryAddress1,Integer.MIN_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 57
      },
      "nodeContext" : "intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 64,
        "startColumnNumber" : 77,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MemoryAddress memoryAddress=MemorySegment.allocateNative(12).baseAddress();\n  MemoryAddress memoryAddress1=memoryAddress.segment().asSlice(0,4).baseAddress();\n  MemoryAddress memoryAddress2=memoryAddress.segment().asSlice(4,4).baseAddress();\n  MemoryAddress memoryAddress3=memoryAddress.segment().asSlice(8,4).baseAddress();\n  VarHandle intHandle=MemoryHandles.varHandle(int.class,ByteOrder.nativeOrder());\n  intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n  intHandle.set(memoryAddress2,0);\n  intHandle.set(memoryAddress3,Integer.MAX_VALUE);\n  assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n  assertThat(intHandle.get(memoryAddress2),is(0));\n  assertThat(intHandle.get(memoryAddress3),is(Integer.MAX_VALUE));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void whenSlicingMemorySegment_thenTheyCanBeAccessedIndividually(){\n  MemoryAddress memoryAddress=MemorySegment.allocateNative(12).baseAddress();\n  MemoryAddress memoryAddress1=memoryAddress.segment().asSlice(0,4).baseAddress();\n  MemoryAddress memoryAddress2=memoryAddress.segment().asSlice(4,4).baseAddress();\n  MemoryAddress memoryAddress3=memoryAddress.segment().asSlice(8,4).baseAddress();\n  VarHandle intHandle=MemoryHandles.varHandle(int.class,ByteOrder.nativeOrder());\n  intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n  intHandle.set(memoryAddress2,0);\n  intHandle.set(memoryAddress3,Integer.MAX_VALUE);\n  assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n  assertThat(intHandle.get(memoryAddress2),is(0));\n  assertThat(intHandle.get(memoryAddress3),is(Integer.MAX_VALUE));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 57
      },
      "nodeContext" : "intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "Integer.MIN_VALUE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 80,
      "startColumnNumber" : 53,
      "endLineNumber" : 80,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 80,
        "startColumnNumber" : 50,
        "endLineNumber" : 80,
        "endColumnNumber" : 71
      },
      "nodeContext" : "is(Integer.MIN_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 873,
        "startLineNumber" : 64,
        "startColumnNumber" : 77,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MemoryAddress memoryAddress=MemorySegment.allocateNative(12).baseAddress();\n  MemoryAddress memoryAddress1=memoryAddress.segment().asSlice(0,4).baseAddress();\n  MemoryAddress memoryAddress2=memoryAddress.segment().asSlice(4,4).baseAddress();\n  MemoryAddress memoryAddress3=memoryAddress.segment().asSlice(8,4).baseAddress();\n  VarHandle intHandle=MemoryHandles.varHandle(int.class,ByteOrder.nativeOrder());\n  intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n  intHandle.set(memoryAddress2,0);\n  intHandle.set(memoryAddress3,Integer.MAX_VALUE);\n  assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n  assertThat(intHandle.get(memoryAddress2),is(0));\n  assertThat(intHandle.get(memoryAddress3),is(Integer.MAX_VALUE));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void whenSlicingMemorySegment_thenTheyCanBeAccessedIndividually(){\n  MemoryAddress memoryAddress=MemorySegment.allocateNative(12).baseAddress();\n  MemoryAddress memoryAddress1=memoryAddress.segment().asSlice(0,4).baseAddress();\n  MemoryAddress memoryAddress2=memoryAddress.segment().asSlice(4,4).baseAddress();\n  MemoryAddress memoryAddress3=memoryAddress.segment().asSlice(8,4).baseAddress();\n  VarHandle intHandle=MemoryHandles.varHandle(int.class,ByteOrder.nativeOrder());\n  intHandle.set(memoryAddress1,Integer.MIN_VALUE);\n  intHandle.set(memoryAddress2,0);\n  intHandle.set(memoryAddress3,Integer.MAX_VALUE);\n  assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n  assertThat(intHandle.get(memoryAddress2),is(0));\n  assertThat(intHandle.get(memoryAddress3),is(Integer.MAX_VALUE));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(intHandle.get(memoryAddress1),is(Integer.MIN_VALUE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 76,
    "startColumnNumber" : 38,
    "endLineNumber" : 76,
    "endColumnNumber" : 55
  }, {
    "charLength" : 17,
    "startLineNumber" : 80,
    "startColumnNumber" : 53,
    "endLineNumber" : 80,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}