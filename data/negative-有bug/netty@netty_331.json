{
  "id" : 331,
  "expression" : "1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDomainDatagramChannel.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 187,
      "startColumnNumber" : 43,
      "endLineNumber" : 187,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 187,
        "startColumnNumber" : 19,
        "endLineNumber" : 187,
        "endColumnNumber" : 44
      },
      "nodeContext" : "data.nioBufferCount() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 187,
        "startColumnNumber" : 15,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.nioBufferCount() > 1) {\n  IovArray array=registration().cleanIovArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1538,
        "startLineNumber" : 179,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (data.hasMemoryAddress()) {\n  long memoryAddress=data.memoryAddress();\n  if (remoteAddress == null) {\n    writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n  }\n else {\n    writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else if (data.nioBufferCount() > 1) {\n  IovArray array=registration().cleanIovArray();\n  array.add(data,data.readerIndex(),data.readableBytes());\n  int cnt=array.count();\n  assert cnt != 0;\n  if (remoteAddress == null) {\n    writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n  }\n else {\n    writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n else {\n  ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n  if (remoteAddress == null) {\n    writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n  }\n else {\n    writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 181,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2276,
        "startLineNumber" : 159,
        "startColumnNumber" : 64,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=((ByteBufConvertible)msg).asByteBuf();\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=registration().cleanIovArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2336,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean doWriteMessage(Object msg) throws Exception {\n  final ByteBuf data;\n  DomainSocketAddress remoteAddress;\n  if (msg instanceof AddressedEnvelope) {\n    @SuppressWarnings(\"unchecked\") AddressedEnvelope<ByteBuf,DomainSocketAddress> envelope=(AddressedEnvelope<ByteBuf,DomainSocketAddress>)msg;\n    data=envelope.content();\n    remoteAddress=envelope.recipient();\n  }\n else {\n    data=((ByteBufConvertible)msg).asByteBuf();\n    remoteAddress=null;\n  }\n  final int dataLen=data.readableBytes();\n  if (dataLen == 0) {\n    return true;\n  }\n  final long writtenBytes;\n  if (data.hasMemoryAddress()) {\n    long memoryAddress=data.memoryAddress();\n    if (remoteAddress == null) {\n      writtenBytes=socket.writeAddress(memoryAddress,data.readerIndex(),data.writerIndex());\n    }\n else {\n      writtenBytes=socket.sendToAddressDomainSocket(memoryAddress,data.readerIndex(),data.writerIndex(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else   if (data.nioBufferCount() > 1) {\n    IovArray array=registration().cleanIovArray();\n    array.add(data,data.readerIndex(),data.readableBytes());\n    int cnt=array.count();\n    assert cnt != 0;\n    if (remoteAddress == null) {\n      writtenBytes=socket.writevAddresses(array.memoryAddress(0),cnt);\n    }\n else {\n      writtenBytes=socket.sendToAddressesDomainSocket(array.memoryAddress(0),cnt,remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n else {\n    ByteBuffer nioData=data.internalNioBuffer(data.readerIndex(),data.readableBytes());\n    if (remoteAddress == null) {\n      writtenBytes=socket.write(nioData,nioData.position(),nioData.limit());\n    }\n else {\n      writtenBytes=socket.sendToDomainSocket(nioData,nioData.position(),nioData.limit(),remoteAddress.path().getBytes(CharsetUtil.UTF_8));\n    }\n  }\n  return writtenBytes > 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 187,
        "startColumnNumber" : 19,
        "endLineNumber" : 187,
        "endColumnNumber" : 44
      },
      "nodeContext" : "data.nioBufferCount() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 187,
    "startColumnNumber" : 43,
    "endLineNumber" : 187,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}