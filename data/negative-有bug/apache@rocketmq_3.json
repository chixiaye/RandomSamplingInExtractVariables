{
  "id" : 3,
  "expression" : "request.getOpaque()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "request.getOpaque()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 84,
      "startColumnNumber" : 27,
      "endLineNumber" : 84,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 47
      },
      "nodeContext" : "response.setOpaque(request.getOpaque())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 48
      },
      "nodeContext" : "response.setOpaque(request.getOpaque());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 75,
        "startColumnNumber" : 40,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final RemotingCommand response=RemotingCommand.createResponseCommand(QueryMessageResponseHeader.class);\n  final QueryMessageResponseHeader responseHeader=(QueryMessageResponseHeader)response.readCustomHeader();\n  final QueryMessageRequestHeader requestHeader=(QueryMessageRequestHeader)request.decodeCommandCustomHeader(QueryMessageRequestHeader.class);\n  response.setOpaque(request.getOpaque());\n  String isUniqueKey=request.getExtFields().get(MixAll.UNIQUE_MSG_QUERY_FLAG);\n  if (isUniqueKey != null && isUniqueKey.equals(\"true\")) {\n    requestHeader.setMaxNum(this.brokerController.getMessageStoreConfig().getDefaultQueryMaxNum());\n  }\n  final QueryMessageResult queryMessageResult=this.brokerController.getMessageStore().queryMessage(requestHeader.getTopic(),requestHeader.getKey(),requestHeader.getMaxNum(),requestHeader.getBeginTimestamp(),requestHeader.getEndTimestamp());\n  assert queryMessageResult != null;\n  responseHeader.setIndexLastUpdatePhyoffset(queryMessageResult.getIndexLastUpdatePhyoffset());\n  responseHeader.setIndexLastUpdateTimestamp(queryMessageResult.getIndexLastUpdateTimestamp());\n  if (queryMessageResult.getBufferTotalSize() > 0) {\n    response.setCode(ResponseCode.SUCCESS);\n    response.setRemark(null);\n    try {\n      FileRegion fileRegion=new QueryMessageTransfer(response.encodeHeader(queryMessageResult.getBufferTotalSize()),queryMessageResult);\n      ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          queryMessageResult.release();\n          if (!future.isSuccess()) {\n            log.error(\"transfer query message by page cache failed, \",future.cause());\n          }\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      log.error(\"\",e);\n      queryMessageResult.release();\n    }\n    return null;\n  }\n  response.setCode(ResponseCode.QUERY_NOT_FOUND);\n  response.setRemark(\"can not find message, maybe time range not correct\");\n  return response;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemotingCommand queryMessage(ChannelHandlerContext ctx,RemotingCommand request) throws RemotingCommandException {\n  final RemotingCommand response=RemotingCommand.createResponseCommand(QueryMessageResponseHeader.class);\n  final QueryMessageResponseHeader responseHeader=(QueryMessageResponseHeader)response.readCustomHeader();\n  final QueryMessageRequestHeader requestHeader=(QueryMessageRequestHeader)request.decodeCommandCustomHeader(QueryMessageRequestHeader.class);\n  response.setOpaque(request.getOpaque());\n  String isUniqueKey=request.getExtFields().get(MixAll.UNIQUE_MSG_QUERY_FLAG);\n  if (isUniqueKey != null && isUniqueKey.equals(\"true\")) {\n    requestHeader.setMaxNum(this.brokerController.getMessageStoreConfig().getDefaultQueryMaxNum());\n  }\n  final QueryMessageResult queryMessageResult=this.brokerController.getMessageStore().queryMessage(requestHeader.getTopic(),requestHeader.getKey(),requestHeader.getMaxNum(),requestHeader.getBeginTimestamp(),requestHeader.getEndTimestamp());\n  assert queryMessageResult != null;\n  responseHeader.setIndexLastUpdatePhyoffset(queryMessageResult.getIndexLastUpdatePhyoffset());\n  responseHeader.setIndexLastUpdateTimestamp(queryMessageResult.getIndexLastUpdateTimestamp());\n  if (queryMessageResult.getBufferTotalSize() > 0) {\n    response.setCode(ResponseCode.SUCCESS);\n    response.setRemark(null);\n    try {\n      FileRegion fileRegion=new QueryMessageTransfer(response.encodeHeader(queryMessageResult.getBufferTotalSize()),queryMessageResult);\n      ctx.channel().writeAndFlush(fileRegion).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          queryMessageResult.release();\n          if (!future.isSuccess()) {\n            log.error(\"transfer query message by page cache failed, \",future.cause());\n          }\n        }\n      }\n);\n    }\n catch (    Throwable e) {\n      log.error(\"\",e);\n      queryMessageResult.release();\n    }\n    return null;\n  }\n  response.setCode(ResponseCode.QUERY_NOT_FOUND);\n  response.setRemark(\"can not find message, maybe time range not correct\");\n  return response;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 84,
        "endColumnNumber" : 48
      },
      "nodeContext" : "response.setOpaque(request.getOpaque());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 84,
    "startColumnNumber" : 27,
    "endLineNumber" : 84,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}