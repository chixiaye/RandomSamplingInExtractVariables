{
  "id" : 410,
  "expression" : "i",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenterLongestPathImpl.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 32,
      "endLineNumber" : 81,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=furthestNode2; i != -1; i=prev[i]) {\n  path.add(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 55,
        "startColumnNumber" : 73,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> graph){\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 50,
      "endLineNumber" : 81,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 81,
        "startColumnNumber" : 45,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "prev[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,updaters]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 81,
        "startColumnNumber" : 41,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "i=prev[i]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=furthestNode2; i != -1; i=prev[i]) {\n  path.add(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 55,
        "startColumnNumber" : 73,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> graph){\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,updaters]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 81,
        "startColumnNumber" : 41,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "i=prev[i]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 82,
      "startColumnNumber" : 15,
      "endLineNumber" : 82,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 17
      },
      "nodeContext" : "path.add(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 18
      },
      "nodeContext" : "path.add(i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 81,
        "startColumnNumber" : 54,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  path.add(i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=furthestNode2; i != -1; i=prev[i]) {\n  path.add(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 55,
        "startColumnNumber" : 73,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> graph){\n  List<Integer> centers=new ArrayList<>();\n  if (graph == null)   return centers;\n  int n=graph.size();\n  boolean[] visited=new boolean[n];\n  int[] prev=new int[n];\n  DfsResult result=dfs(graph,visited,prev,0,-1);\n  int furthestNode1=result.index;\n  if (furthestNode1 == -1) {\n    centers.add(0);\n    return centers;\n  }\n  Arrays.fill(visited,false);\n  Arrays.fill(prev,0);\n  result=dfs(graph,visited,prev,furthestNode1,-1);\n  int furthestNode2=result.index;\n  List<Integer> path=new LinkedList<>();\n  for (int i=furthestNode2; i != -1; i=prev[i]) {\n    path.add(i);\n  }\n  if (path.size() % 2 == 0) {\n    centers.add(path.get(path.size() / 2 - 1));\n  }\n  centers.add(path.get(path.size() / 2));\n  return centers;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 18
      },
      "nodeContext" : "path.add(i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 32,
    "endLineNumber" : 81,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 50,
    "endLineNumber" : 81,
    "endColumnNumber" : 51
  }, {
    "charLength" : 1,
    "startLineNumber" : 82,
    "startColumnNumber" : 15,
    "endLineNumber" : 82,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}