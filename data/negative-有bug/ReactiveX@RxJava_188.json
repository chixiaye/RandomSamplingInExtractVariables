{
  "id" : 188,
  "expression" : "FlowableWindowWithSizeTest",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableWindowWithTimeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "FlowableWindowWithSizeTest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 187,
      "startColumnNumber" : 8,
      "endLineNumber" : 187,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 46
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 43
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 10
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n  @Override public void run(){\n    System.out.println(\"Main done!\");\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 836,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 208,
        "endColumnNumber" : 10
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n  @Override public void run(){\n    System.out.println(\"Main done!\");\n  }\n}\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n  @Override public Flowable<Integer> apply(  Flowable<Integer> w){\n    return w.startWith(indicator).doOnComplete(new Runnable(){\n      @Override public void run(){\n        System.out.println(\"inner done: \" + wip.incrementAndGet());\n      }\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 96,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 10
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n  @Override public void run(){\n    System.out.println(\"Main done!\");\n  }\n}\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n  @Override public Flowable<Integer> apply(  Flowable<Integer> w){\n    return w.startWith(indicator).doOnComplete(new Runnable(){\n      @Override public void run(){\n        System.out.println(\"inner done: \" + wip.incrementAndGet());\n      }\n    }\n);\n  }\n}\n).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer pv){\n    System.out.println(pv);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1042,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 22
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n  @Override public void run(){\n    System.out.println(\"Main done!\");\n  }\n}\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n  @Override public Flowable<Integer> apply(  Flowable<Integer> w){\n    return w.startWith(indicator).doOnComplete(new Runnable(){\n      @Override public void run(){\n        System.out.println(\"inner done: \" + wip.incrementAndGet());\n      }\n    }\n);\n  }\n}\n).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer pv){\n    System.out.println(pv);\n  }\n}\n).subscribe(ts)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 126,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 23
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n  @Override public void run(){\n    System.out.println(\"Main done!\");\n  }\n}\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n  @Override public Flowable<Integer> apply(  Flowable<Integer> w){\n    return w.startWith(indicator).doOnComplete(new Runnable(){\n      @Override public void run(){\n        System.out.println(\"inner done: \" + wip.incrementAndGet());\n      }\n    }\n);\n  }\n}\n).doOnNext(new Consumer<Integer>(){\n  @Override public void accept(  Integer pv){\n    System.out.println(pv);\n  }\n}\n).subscribe(ts);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 127,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1401,
        "startLineNumber" : 180,
        "startColumnNumber" : 43,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  final AtomicInteger wip=new AtomicInteger();\n  final int indicator=999999999;\n  FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n    @Override public void run(){\n      System.out.println(\"Main done!\");\n    }\n  }\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n    @Override public Flowable<Integer> apply(    Flowable<Integer> w){\n      return w.startWith(indicator).doOnComplete(new Runnable(){\n        @Override public void run(){\n          System.out.println(\"inner done: \" + wip.incrementAndGet());\n        }\n      }\n);\n    }\n  }\n).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer pv){\n      System.out.println(pv);\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent(5,TimeUnit.SECONDS);\n  ts.assertComplete();\n  Assert.assertTrue(ts.valueCount() != 0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1451,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTakeFlatMapCompletes(){\n  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();\n  final AtomicInteger wip=new AtomicInteger();\n  final int indicator=999999999;\n  FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Runnable(){\n    @Override public void run(){\n      System.out.println(\"Main done!\");\n    }\n  }\n).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){\n    @Override public Flowable<Integer> apply(    Flowable<Integer> w){\n      return w.startWith(indicator).doOnComplete(new Runnable(){\n        @Override public void run(){\n          System.out.println(\"inner done: \" + wip.incrementAndGet());\n        }\n      }\n);\n    }\n  }\n).doOnNext(new Consumer<Integer>(){\n    @Override public void accept(    Integer pv){\n      System.out.println(pv);\n    }\n  }\n).subscribe(ts);\n  ts.awaitTerminalEvent(5,TimeUnit.SECONDS);\n  ts.assertComplete();\n  Assert.assertTrue(ts.valueCount() != 0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 46
      },
      "nodeContext" : "FlowableWindowWithSizeTest.hotStream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.internal.operators.flowable.FlowableWindowWithSizeTest"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 187,
    "startColumnNumber" : 8,
    "endLineNumber" : 187,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}