{
  "id" : 39,
  "expression" : "0",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/security/BasicHeaderProcessor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 68,
      "startColumnNumber" : 23,
      "endLineNumber" : 68,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 24
      },
      "nodeContext" : "idx >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (idx >= 0) {\n  String username=uidpassword.substring(0,idx);\n  String password=uidpassword.substring(idx + 1);\n  if (!authenticationIsRequired(username)) {\n    chain.doFilter(request,response);\n    return;\n  }\n  for (  BasicHeaderAuthenticator a : all()) {\n    LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n    Authentication auth=a.authenticate2(req,rsp,username,password);\n    if (auth != null) {\n      LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n      success(req,rsp,chain,auth);\n      return;\n    }\n  }\n  fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n}\n else {\n  fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 64,
        "startColumnNumber" : 70,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String uidpassword=Scrambler.descramble(authorization.substring(6));\n  int idx=uidpassword.indexOf(':');\n  if (idx >= 0) {\n    String username=uidpassword.substring(0,idx);\n    String password=uidpassword.substring(idx + 1);\n    if (!authenticationIsRequired(username)) {\n      chain.doFilter(request,response);\n      return;\n    }\n    for (    BasicHeaderAuthenticator a : all()) {\n      LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n      Authentication auth=a.authenticate2(req,rsp,username,password);\n      if (auth != null) {\n        LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n        success(req,rsp,chain,auth);\n        return;\n      }\n    }\n    fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n  }\n else {\n    fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1440,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n  String uidpassword=Scrambler.descramble(authorization.substring(6));\n  int idx=uidpassword.indexOf(':');\n  if (idx >= 0) {\n    String username=uidpassword.substring(0,idx);\n    String password=uidpassword.substring(idx + 1);\n    if (!authenticationIsRequired(username)) {\n      chain.doFilter(request,response);\n      return;\n    }\n    for (    BasicHeaderAuthenticator a : all()) {\n      LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n      Authentication auth=a.authenticate2(req,rsp,username,password);\n      if (auth != null) {\n        LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n        success(req,rsp,chain,auth);\n        return;\n      }\n    }\n    fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n  }\n else {\n    fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n  }\n}\n else {\n  chain.doFilter(request,response);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1655,
        "startLineNumber" : 59,
        "startColumnNumber" : 131,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse rsp=(HttpServletResponse)response;\n  String authorization=req.getHeader(\"Authorization\");\n  if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n    String uidpassword=Scrambler.descramble(authorization.substring(6));\n    int idx=uidpassword.indexOf(':');\n    if (idx >= 0) {\n      String username=uidpassword.substring(0,idx);\n      String password=uidpassword.substring(idx + 1);\n      if (!authenticationIsRequired(username)) {\n        chain.doFilter(request,response);\n        return;\n      }\n      for (      BasicHeaderAuthenticator a : all()) {\n        LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n        Authentication auth=a.authenticate2(req,rsp,username,password);\n        if (auth != null) {\n          LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n          success(req,rsp,chain,auth);\n          return;\n        }\n      }\n      fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n    }\n else {\n      fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n    }\n  }\n else {\n    chain.doFilter(request,response);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1782,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse rsp=(HttpServletResponse)response;\n  String authorization=req.getHeader(\"Authorization\");\n  if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n    String uidpassword=Scrambler.descramble(authorization.substring(6));\n    int idx=uidpassword.indexOf(':');\n    if (idx >= 0) {\n      String username=uidpassword.substring(0,idx);\n      String password=uidpassword.substring(idx + 1);\n      if (!authenticationIsRequired(username)) {\n        chain.doFilter(request,response);\n        return;\n      }\n      for (      BasicHeaderAuthenticator a : all()) {\n        LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n        Authentication auth=a.authenticate2(req,rsp,username,password);\n        if (auth != null) {\n          LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n          success(req,rsp,chain,auth);\n          return;\n        }\n      }\n      fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n    }\n else {\n      fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n    }\n  }\n else {\n    chain.doFilter(request,response);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 24
      },
      "nodeContext" : "idx >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 69,
      "startColumnNumber" : 56,
      "endLineNumber" : 69,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 69,
        "startColumnNumber" : 34,
        "endLineNumber" : 69,
        "endColumnNumber" : 63
      },
      "nodeContext" : "uidpassword.substring(0,idx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 69,
        "startColumnNumber" : 23,
        "endLineNumber" : 69,
        "endColumnNumber" : 63
      },
      "nodeContext" : "username=uidpassword.substring(0,idx)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String username=uidpassword.substring(0,idx);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 934,
        "startLineNumber" : 68,
        "startColumnNumber" : 26,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String username=uidpassword.substring(0,idx);\n  String password=uidpassword.substring(idx + 1);\n  if (!authenticationIsRequired(username)) {\n    chain.doFilter(request,response);\n    return;\n  }\n  for (  BasicHeaderAuthenticator a : all()) {\n    LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n    Authentication auth=a.authenticate2(req,rsp,username,password);\n    if (auth != null) {\n      LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n      success(req,rsp,chain,auth);\n      return;\n    }\n  }\n  fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (idx >= 0) {\n  String username=uidpassword.substring(0,idx);\n  String password=uidpassword.substring(idx + 1);\n  if (!authenticationIsRequired(username)) {\n    chain.doFilter(request,response);\n    return;\n  }\n  for (  BasicHeaderAuthenticator a : all()) {\n    LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n    Authentication auth=a.authenticate2(req,rsp,username,password);\n    if (auth != null) {\n      LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n      success(req,rsp,chain,auth);\n      return;\n    }\n  }\n  fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n}\n else {\n  fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 64,
        "startColumnNumber" : 70,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String uidpassword=Scrambler.descramble(authorization.substring(6));\n  int idx=uidpassword.indexOf(':');\n  if (idx >= 0) {\n    String username=uidpassword.substring(0,idx);\n    String password=uidpassword.substring(idx + 1);\n    if (!authenticationIsRequired(username)) {\n      chain.doFilter(request,response);\n      return;\n    }\n    for (    BasicHeaderAuthenticator a : all()) {\n      LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n      Authentication auth=a.authenticate2(req,rsp,username,password);\n      if (auth != null) {\n        LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n        success(req,rsp,chain,auth);\n        return;\n      }\n    }\n    fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n  }\n else {\n    fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1440,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n  String uidpassword=Scrambler.descramble(authorization.substring(6));\n  int idx=uidpassword.indexOf(':');\n  if (idx >= 0) {\n    String username=uidpassword.substring(0,idx);\n    String password=uidpassword.substring(idx + 1);\n    if (!authenticationIsRequired(username)) {\n      chain.doFilter(request,response);\n      return;\n    }\n    for (    BasicHeaderAuthenticator a : all()) {\n      LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n      Authentication auth=a.authenticate2(req,rsp,username,password);\n      if (auth != null) {\n        LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n        success(req,rsp,chain,auth);\n        return;\n      }\n    }\n    fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n  }\n else {\n    fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n  }\n}\n else {\n  chain.doFilter(request,response);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1655,
        "startLineNumber" : 59,
        "startColumnNumber" : 131,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse rsp=(HttpServletResponse)response;\n  String authorization=req.getHeader(\"Authorization\");\n  if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n    String uidpassword=Scrambler.descramble(authorization.substring(6));\n    int idx=uidpassword.indexOf(':');\n    if (idx >= 0) {\n      String username=uidpassword.substring(0,idx);\n      String password=uidpassword.substring(idx + 1);\n      if (!authenticationIsRequired(username)) {\n        chain.doFilter(request,response);\n        return;\n      }\n      for (      BasicHeaderAuthenticator a : all()) {\n        LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n        Authentication auth=a.authenticate2(req,rsp,username,password);\n        if (auth != null) {\n          LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n          success(req,rsp,chain,auth);\n          return;\n        }\n      }\n      fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n    }\n else {\n      fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n    }\n  }\n else {\n    chain.doFilter(request,response);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1782,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {\n  HttpServletRequest req=(HttpServletRequest)request;\n  HttpServletResponse rsp=(HttpServletResponse)response;\n  String authorization=req.getHeader(\"Authorization\");\n  if (StringUtils.startsWithIgnoreCase(authorization,\"Basic \")) {\n    String uidpassword=Scrambler.descramble(authorization.substring(6));\n    int idx=uidpassword.indexOf(':');\n    if (idx >= 0) {\n      String username=uidpassword.substring(0,idx);\n      String password=uidpassword.substring(idx + 1);\n      if (!authenticationIsRequired(username)) {\n        chain.doFilter(request,response);\n        return;\n      }\n      for (      BasicHeaderAuthenticator a : all()) {\n        LOGGER.log(FINER,\"Attempting to authenticate with {0}\",a);\n        Authentication auth=a.authenticate2(req,rsp,username,password);\n        if (auth != null) {\n          LOGGER.log(FINE,\"Request authenticated as {0} by {1}\",new Object[]{auth,a});\n          success(req,rsp,chain,auth);\n          return;\n        }\n      }\n      fail(req,rsp,new BadCredentialsException(\"Invalid password/token for user: \" + username));\n    }\n else {\n      fail(req,rsp,new BadCredentialsException(\"Malformed HTTP basic Authorization header\"));\n    }\n  }\n else {\n    chain.doFilter(request,response);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String username=uidpassword.substring(0,idx);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 68,
    "startColumnNumber" : 23,
    "endLineNumber" : 68,
    "endColumnNumber" : 24
  }, {
    "charLength" : 1,
    "startLineNumber" : 69,
    "startColumnNumber" : 56,
    "endLineNumber" : 69,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}