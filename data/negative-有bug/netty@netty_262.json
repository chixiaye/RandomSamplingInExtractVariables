{
  "id" : 262,
  "expression" : "new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch){\n    ch.pipeline().addFirst(new HttpProxyHandler(addr));\n    ch.pipeline().addLast(new ChannelHandler(){\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){\n        exception.set(cause);\n      }\n    }\n);\n  }\n}\n).connect(new InetSocketAddress(\"localhost\",1234))",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler-proxy/src/test/java/io/netty/handler/proxy/HttpProxyHandlerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch){\n    ch.pipeline().addFirst(new HttpProxyHandler(addr));\n    ch.pipeline().addLast(new ChannelHandler(){\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){\n        exception.set(cause);\n      }\n    }\n);\n  }\n}\n).connect(new InetSocketAddress(\"localhost\",1234))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 741,
      "startLineNumber" : 211,
      "startColumnNumber" : 33,
      "endLineNumber" : 224,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 78,
    "astHeight" : 15,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 746,
        "startLineNumber" : 211,
        "startColumnNumber" : 28,
        "endLineNumber" : 224,
        "endColumnNumber" : 68
      },
      "nodeContext" : "cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch){\n    ch.pipeline().addFirst(new HttpProxyHandler(addr));\n    ch.pipeline().addLast(new ChannelHandler(){\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){\n        exception.set(cause);\n      }\n    }\n);\n  }\n}\n).connect(new InetSocketAddress(\"localhost\",1234))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 80,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 763,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch){\n    ch.pipeline().addFirst(new HttpProxyHandler(addr));\n    ch.pipeline().addLast(new ChannelHandler(){\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){\n        exception.set(cause);\n      }\n    }\n);\n  }\n}\n).connect(new InetSocketAddress(\"localhost\",1234));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 86,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2631,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 232,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  group=new MultithreadEventLoopGroup(1,LocalHandler.newFactory());\n  final LocalAddress addr=new LocalAddress(\"a\");\n  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();\n  Future<Channel> sf=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addFirst(new HttpResponseEncoder());\n      ch.pipeline().addFirst(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx){\n          DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.BAD_GATEWAY);\n          response.headers().add(\"name\",\"value\");\n          response.headers().add(HttpHeaderNames.CONTENT_LENGTH,\"0\");\n          ctx.writeAndFlush(response);\n        }\n      }\n);\n    }\n  }\n).bind(addr);\n  serverChannel=sf.get();\n  Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addFirst(new HttpProxyHandler(addr));\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          exception.set(cause);\n        }\n      }\n);\n    }\n  }\n).connect(new InetSocketAddress(\"localhost\",1234));\n  clientChannel=cf.get();\n  clientChannel.close().sync();\n  assertTrue(exception.get() instanceof HttpProxyConnectException);\n  HttpProxyConnectException actual=(HttpProxyConnectException)exception.get();\n  assertNotNull(actual.headers());\n  assertEquals(\"value\",actual.headers().get(\"name\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 285,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2944,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  group=new MultithreadEventLoopGroup(1,LocalHandler.newFactory());\n  final LocalAddress addr=new LocalAddress(\"a\");\n  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();\n  Future<Channel> sf=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addFirst(new HttpResponseEncoder());\n      ch.pipeline().addFirst(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx){\n          DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.BAD_GATEWAY);\n          response.headers().add(\"name\",\"value\");\n          response.headers().add(HttpHeaderNames.CONTENT_LENGTH,\"0\");\n          ctx.writeAndFlush(response);\n        }\n      }\n);\n    }\n  }\n).bind(addr);\n  serverChannel=sf.get();\n  Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addFirst(new HttpProxyHandler(addr));\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          exception.set(cause);\n        }\n      }\n);\n    }\n  }\n).connect(new InetSocketAddress(\"localhost\",1234));\n  clientChannel=cf.get();\n  clientChannel.close().sync();\n  assertTrue(exception.get() instanceof HttpProxyConnectException);\n  HttpProxyConnectException actual=(HttpProxyConnectException)exception.get();\n  assertNotNull(actual.headers());\n  assertEquals(\"value\",actual.headers().get(\"name\"));\n}\n  finally {\n  if (clientChannel != null) {\n    clientChannel.close();\n  }\n  if (serverChannel != null) {\n    serverChannel.close();\n  }\n  if (group != null) {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 314,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3078,
        "startLineNumber" : 182,
        "startColumnNumber" : 62,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup group=null;\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  try {\n    group=new MultithreadEventLoopGroup(1,LocalHandler.newFactory());\n    final LocalAddress addr=new LocalAddress(\"a\");\n    final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();\n    Future<Channel> sf=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addFirst(new HttpResponseEncoder());\n        ch.pipeline().addFirst(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx){\n            DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.BAD_GATEWAY);\n            response.headers().add(\"name\",\"value\");\n            response.headers().add(HttpHeaderNames.CONTENT_LENGTH,\"0\");\n            ctx.writeAndFlush(response);\n          }\n        }\n);\n      }\n    }\n).bind(addr);\n    serverChannel=sf.get();\n    Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addFirst(new HttpProxyHandler(addr));\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            exception.set(cause);\n          }\n        }\n);\n      }\n    }\n).connect(new InetSocketAddress(\"localhost\",1234));\n    clientChannel=cf.get();\n    clientChannel.close().sync();\n    assertTrue(exception.get() instanceof HttpProxyConnectException);\n    HttpProxyConnectException actual=(HttpProxyConnectException)exception.get();\n    assertNotNull(actual.headers());\n    assertEquals(\"value\",actual.headers().get(\"name\"));\n  }\n  finally {\n    if (clientChannel != null) {\n      clientChannel.close();\n    }\n    if (serverChannel != null) {\n      serverChannel.close();\n    }\n    if (group != null) {\n      group.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 333,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3147,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 243,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testExceptionDuringConnect() throws Exception {\n  EventLoopGroup group=null;\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  try {\n    group=new MultithreadEventLoopGroup(1,LocalHandler.newFactory());\n    final LocalAddress addr=new LocalAddress(\"a\");\n    final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();\n    Future<Channel> sf=new ServerBootstrap().channel(LocalServerChannel.class).group(group).childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addFirst(new HttpResponseEncoder());\n        ch.pipeline().addFirst(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx){\n            DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.BAD_GATEWAY);\n            response.headers().add(\"name\",\"value\");\n            response.headers().add(HttpHeaderNames.CONTENT_LENGTH,\"0\");\n            ctx.writeAndFlush(response);\n          }\n        }\n);\n      }\n    }\n).bind(addr);\n    serverChannel=sf.get();\n    Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addFirst(new HttpProxyHandler(addr));\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            exception.set(cause);\n          }\n        }\n);\n      }\n    }\n).connect(new InetSocketAddress(\"localhost\",1234));\n    clientChannel=cf.get();\n    clientChannel.close().sync();\n    assertTrue(exception.get() instanceof HttpProxyConnectException);\n    HttpProxyConnectException actual=(HttpProxyConnectException)exception.get();\n    assertNotNull(actual.headers());\n    assertEquals(\"value\",actual.headers().get(\"name\"));\n  }\n  finally {\n    if (clientChannel != null) {\n      clientChannel.close();\n    }\n    if (serverChannel != null) {\n      serverChannel.close();\n    }\n    if (group != null) {\n      group.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 341,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 763,
        "startLineNumber" : 211,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Future<Channel> cf=new Bootstrap().channel(LocalChannel.class).group(group).handler(new ChannelInitializer<Channel>(){\n  @Override protected void initChannel(  Channel ch){\n    ch.pipeline().addFirst(new HttpProxyHandler(addr));\n    ch.pipeline().addLast(new ChannelHandler(){\n      @Override public void exceptionCaught(      ChannelHandlerContext ctx,      Throwable cause){\n        exception.set(cause);\n      }\n    }\n);\n  }\n}\n).connect(new InetSocketAddress(\"localhost\",1234));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 86,
      "astHeight" : 17
    },
    "tokenLength" : 33,
    "type" : "io.netty.util.concurrent.Future<io.netty.channel.Channel>"
  } ],
  "positionList" : [ {
    "charLength" : 741,
    "startLineNumber" : 211,
    "startColumnNumber" : 33,
    "endLineNumber" : 224,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}