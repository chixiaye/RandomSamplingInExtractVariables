{
  "id" : 224,
  "expression" : "i <= CompactHashing.DEFAULT_SIZE",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i <= CompactHashing.DEFAULT_SIZE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 105,
      "startColumnNumber" : 20,
      "endLineNumber" : 105,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i <= CompactHashing.DEFAULT_SIZE; i++) {\n  CompactHashMap<Integer,String> map=CompactHashMap.createWithExpectedSize(i);\n  assertThat(map.needsAllocArrays()).isTrue();\n  assertThat(map.entries).isNull();\n  assertThat(map.keys).isNull();\n  assertThat(map.values).isNull();\n  map.put(1,\"1\");\n  assertThat(map.needsAllocArrays()).isFalse();\n  int expectedSize=Math.max(1,i);\n  assertThat(map.entries).hasLength(expectedSize);\n  assertThat(map.keys).hasLength(expectedSize);\n  assertThat(map.values).hasLength(expectedSize);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 110,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 104,
        "startColumnNumber" : 44,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i <= CompactHashing.DEFAULT_SIZE; i++) {\n    CompactHashMap<Integer,String> map=CompactHashMap.createWithExpectedSize(i);\n    assertThat(map.needsAllocArrays()).isTrue();\n    assertThat(map.entries).isNull();\n    assertThat(map.keys).isNull();\n    assertThat(map.values).isNull();\n    map.put(1,\"1\");\n    assertThat(map.needsAllocArrays()).isFalse();\n    int expectedSize=Math.max(1,i);\n    assertThat(map.entries).hasLength(expectedSize);\n    assertThat(map.keys).hasLength(expectedSize);\n    assertThat(map.values).hasLength(expectedSize);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testAllocArraysExpectedSize(){\n  for (int i=0; i <= CompactHashing.DEFAULT_SIZE; i++) {\n    CompactHashMap<Integer,String> map=CompactHashMap.createWithExpectedSize(i);\n    assertThat(map.needsAllocArrays()).isTrue();\n    assertThat(map.entries).isNull();\n    assertThat(map.keys).isNull();\n    assertThat(map.values).isNull();\n    map.put(1,\"1\");\n    assertThat(map.needsAllocArrays()).isFalse();\n    int expectedSize=Math.max(1,i);\n    assertThat(map.entries).hasLength(expectedSize);\n    assertThat(map.keys).hasLength(expectedSize);\n    assertThat(map.values).hasLength(expectedSize);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 105,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i <= CompactHashing.DEFAULT_SIZE; i++) {\n  CompactHashMap<Integer,String> map=CompactHashMap.createWithExpectedSize(i);\n  assertThat(map.needsAllocArrays()).isTrue();\n  assertThat(map.entries).isNull();\n  assertThat(map.keys).isNull();\n  assertThat(map.values).isNull();\n  map.put(1,\"1\");\n  assertThat(map.needsAllocArrays()).isFalse();\n  int expectedSize=Math.max(1,i);\n  assertThat(map.entries).hasLength(expectedSize);\n  assertThat(map.keys).hasLength(expectedSize);\n  assertThat(map.values).hasLength(expectedSize);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 110,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 105,
    "startColumnNumber" : 20,
    "endLineNumber" : 105,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}