{
  "id" : 454,
  "expression" : "(ParameterizedType)returnType",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-adapters/rxjava3/src/main/java/retrofit2/adapter/rxjava3/RxJava3CallAdapterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(ParameterizedType)returnType",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 133,
      "startColumnNumber" : 52,
      "endLineNumber" : 133,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 133,
        "startColumnNumber" : 26,
        "endLineNumber" : 133,
        "endColumnNumber" : 83
      },
      "nodeContext" : "getParameterUpperBound(0,(ParameterizedType)returnType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 133,
        "startColumnNumber" : 9,
        "endLineNumber" : 133,
        "endColumnNumber" : 83
      },
      "nodeContext" : "observableType=getParameterUpperBound(0,(ParameterizedType)returnType)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Type observableType=getParameterUpperBound(0,(ParameterizedType)returnType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2170,
        "startLineNumber" : 100,
        "startColumnNumber" : 68,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> rawType=getRawType(returnType);\n  if (rawType == Completable.class) {\n    return new RxJava3CallAdapter(Void.class,scheduler,isAsync,false,true,false,false,false,true);\n  }\n  boolean isFlowable=rawType == Flowable.class;\n  boolean isSingle=rawType == Single.class;\n  boolean isMaybe=rawType == Maybe.class;\n  if (rawType != Observable.class && !isFlowable && !isSingle && !isMaybe) {\n    return null;\n  }\n  boolean isResult=false;\n  boolean isBody=false;\n  Type responseType;\n  if (!(returnType instanceof ParameterizedType)) {\n    String name=isFlowable ? \"Flowable\" : isSingle ? \"Single\" : isMaybe ? \"Maybe\" : \"Observable\";\n    throw new IllegalStateException(name + \" return type must be parameterized\" + \" as \"+ name+ \"<Foo> or \"+ name+ \"<? extends Foo>\");\n  }\n  Type observableType=getParameterUpperBound(0,(ParameterizedType)returnType);\n  Class<?> rawObservableType=getRawType(observableType);\n  if (rawObservableType == Response.class) {\n    if (!(observableType instanceof ParameterizedType)) {\n      throw new IllegalStateException(\"Response must be parameterized\" + \" as Response<Foo> or Response<? extends Foo>\");\n    }\n    responseType=getParameterUpperBound(0,(ParameterizedType)observableType);\n  }\n else   if (rawObservableType == Result.class) {\n    if (!(observableType instanceof ParameterizedType)) {\n      throw new IllegalStateException(\"Result must be parameterized\" + \" as Result<Foo> or Result<? extends Foo>\");\n    }\n    responseType=getParameterUpperBound(0,(ParameterizedType)observableType);\n    isResult=true;\n  }\n else {\n    responseType=observableType;\n    isBody=true;\n  }\n  return new RxJava3CallAdapter(responseType,scheduler,isAsync,isResult,isBody,isFlowable,isSingle,isMaybe,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2290,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public @Nullable CallAdapter<?,?> get(Type returnType,Annotation[] annotations,Retrofit retrofit){\n  Class<?> rawType=getRawType(returnType);\n  if (rawType == Completable.class) {\n    return new RxJava3CallAdapter(Void.class,scheduler,isAsync,false,true,false,false,false,true);\n  }\n  boolean isFlowable=rawType == Flowable.class;\n  boolean isSingle=rawType == Single.class;\n  boolean isMaybe=rawType == Maybe.class;\n  if (rawType != Observable.class && !isFlowable && !isSingle && !isMaybe) {\n    return null;\n  }\n  boolean isResult=false;\n  boolean isBody=false;\n  Type responseType;\n  if (!(returnType instanceof ParameterizedType)) {\n    String name=isFlowable ? \"Flowable\" : isSingle ? \"Single\" : isMaybe ? \"Maybe\" : \"Observable\";\n    throw new IllegalStateException(name + \" return type must be parameterized\" + \" as \"+ name+ \"<Foo> or \"+ name+ \"<? extends Foo>\");\n  }\n  Type observableType=getParameterUpperBound(0,(ParameterizedType)returnType);\n  Class<?> rawObservableType=getRawType(observableType);\n  if (rawObservableType == Response.class) {\n    if (!(observableType instanceof ParameterizedType)) {\n      throw new IllegalStateException(\"Response must be parameterized\" + \" as Response<Foo> or Response<? extends Foo>\");\n    }\n    responseType=getParameterUpperBound(0,(ParameterizedType)observableType);\n  }\n else   if (rawObservableType == Result.class) {\n    if (!(observableType instanceof ParameterizedType)) {\n      throw new IllegalStateException(\"Result must be parameterized\" + \" as Result<Foo> or Result<? extends Foo>\");\n    }\n    responseType=getParameterUpperBound(0,(ParameterizedType)observableType);\n    isResult=true;\n  }\n else {\n    responseType=observableType;\n    isBody=true;\n  }\n  return new RxJava3CallAdapter(responseType,scheduler,isAsync,isResult,isBody,isFlowable,isSingle,isMaybe,false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 266,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Type observableType=getParameterUpperBound(0,(ParameterizedType)returnType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.reflect.ParameterizedType"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 133,
    "startColumnNumber" : 52,
    "endLineNumber" : 133,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}