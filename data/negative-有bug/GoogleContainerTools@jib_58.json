{
  "id" : 58,
  "expression" : "expectedExtractionPath",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedExtractionPath",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 65,
      "startColumnNumber" : 24,
      "endLineNumber" : 65,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(expectedExtractionPath,header.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(expectedExtractionPath,header.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 63,
        "startColumnNumber" : 25,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(expectedExtractionPath,header.getName());\n  String expectedString=new String(Files.readAllBytes(expectedFile),StandardCharsets.UTF_8);\n  String extractedString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(expectedString,extractedString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1026,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Verifies the correctness of the next  {@link TarArchiveEntry} in the {@link TarArchiveInputStream}.\n * @param tarArchiveInputStream the {@link TarArchiveInputStream} to read from\n * @param expectedExtractionPath the expected extraction path of the next entry\n * @param expectedFile the file to match against the contents of the next entry\n * @throws IOException if an I/O exception occurs\n */\nprivate static void verifyNextTarArchiveEntry(TarArchiveInputStream tarArchiveInputStream,String expectedExtractionPath,Path expectedFile) throws IOException {\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(expectedExtractionPath,header.getName());\n  String expectedString=new String(Files.readAllBytes(expectedFile),StandardCharsets.UTF_8);\n  String extractedString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(expectedString,extractedString);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(expectedExtractionPath,header.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 65,
    "startColumnNumber" : 24,
    "endLineNumber" : 65,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}