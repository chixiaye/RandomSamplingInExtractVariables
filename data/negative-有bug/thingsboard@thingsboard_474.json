{
  "id" : 474,
  "expression" : "log",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/controller/RuleChainController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 517,
      "startColumnNumber" : 16,
      "endLineNumber" : 517,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 517,
        "startColumnNumber" : 16,
        "endLineNumber" : 517,
        "endColumnNumber" : 60
      },
      "nodeContext" : "log.error(\"Error evaluating JS function\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 517,
        "startColumnNumber" : 16,
        "endLineNumber" : 517,
        "endColumnNumber" : 61
      },
      "nodeContext" : "log.error(\"Error evaluating JS function\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 516,
        "startColumnNumber" : 34,
        "endLineNumber" : 519,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.error(\"Error evaluating JS function\",e);\n  errorText=e.getMessage();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 516,
        "startColumnNumber" : 14,
        "endLineNumber" : 519,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  log.error(\"Error evaluating JS function\",e);\n  errorText=e.getMessage();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1953,
        "startLineNumber" : 488,
        "startColumnNumber" : 12,
        "endLineNumber" : 523,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  engine=new RuleNodeJsScriptEngine(getTenantId(),jsInvokeService,getCurrentUser().getId(),script,argNames);\n  TbMsg inMsg=TbMsg.newMsg(msgType,null,new TbMsgMetaData(metadata),TbMsgDataType.JSON,data);\nswitch (scriptType) {\ncase \"update\":    output=msgToOutput(engine.executeUpdateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n  break;\ncase \"generate\":output=msgToOutput(engine.executeGenerateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\nbreak;\ncase \"filter\":boolean result=engine.executeFilterAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=Boolean.toString(result);\nbreak;\ncase \"switch\":Set<String> states=engine.executeSwitchAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(states);\nbreak;\ncase \"json\":JsonNode json=engine.executeJsonAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(json);\nbreak;\ncase \"string\":output=engine.executeToStringAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported script type: \" + scriptType);\n}\n}\n catch (Exception e) {\nlog.error(\"Error evaluating JS function\",e);\nerrorText=e.getMessage();\n}\n finally {\nif (engine != null) {\nengine.destroy();\n}\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 202,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2884,
        "startLineNumber" : 474,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String script=inputParams.get(\"script\").asText();\n  String scriptType=inputParams.get(\"scriptType\").asText();\n  JsonNode argNamesJson=inputParams.get(\"argNames\");\n  String[] argNames=objectMapper.treeToValue(argNamesJson,String[].class);\n  String data=inputParams.get(\"msg\").asText();\n  JsonNode metadataJson=inputParams.get(\"metadata\");\n  Map<String,String> metadata=objectMapper.convertValue(metadataJson,new TypeReference<Map<String,String>>(){\n  }\n);\n  String msgType=inputParams.get(\"msgType\").asText();\n  String output=\"\";\n  String errorText=\"\";\n  ScriptEngine engine=null;\n  try {\n    engine=new RuleNodeJsScriptEngine(getTenantId(),jsInvokeService,getCurrentUser().getId(),script,argNames);\n    TbMsg inMsg=TbMsg.newMsg(msgType,null,new TbMsgMetaData(metadata),TbMsgDataType.JSON,data);\nswitch (scriptType) {\ncase \"update\":      output=msgToOutput(engine.executeUpdateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n    break;\ncase \"generate\":  output=msgToOutput(engine.executeGenerateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\nbreak;\ncase \"filter\":boolean result=engine.executeFilterAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=Boolean.toString(result);\nbreak;\ncase \"switch\":Set<String> states=engine.executeSwitchAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(states);\nbreak;\ncase \"json\":JsonNode json=engine.executeJsonAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(json);\nbreak;\ncase \"string\":output=engine.executeToStringAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported script type: \" + scriptType);\n}\n}\n catch (Exception e) {\nlog.error(\"Error evaluating JS function\",e);\nerrorText=e.getMessage();\n}\n finally {\nif (engine != null) {\nengine.destroy();\n}\n}\nObjectNode result=objectMapper.createObjectNode();\nresult.put(\"output\",output);\nresult.put(\"error\",errorText);\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2958,
        "startLineNumber" : 474,
        "startColumnNumber" : 8,
        "endLineNumber" : 530,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String script=inputParams.get(\"script\").asText();\n  String scriptType=inputParams.get(\"scriptType\").asText();\n  JsonNode argNamesJson=inputParams.get(\"argNames\");\n  String[] argNames=objectMapper.treeToValue(argNamesJson,String[].class);\n  String data=inputParams.get(\"msg\").asText();\n  JsonNode metadataJson=inputParams.get(\"metadata\");\n  Map<String,String> metadata=objectMapper.convertValue(metadataJson,new TypeReference<Map<String,String>>(){\n  }\n);\n  String msgType=inputParams.get(\"msgType\").asText();\n  String output=\"\";\n  String errorText=\"\";\n  ScriptEngine engine=null;\n  try {\n    engine=new RuleNodeJsScriptEngine(getTenantId(),jsInvokeService,getCurrentUser().getId(),script,argNames);\n    TbMsg inMsg=TbMsg.newMsg(msgType,null,new TbMsgMetaData(metadata),TbMsgDataType.JSON,data);\nswitch (scriptType) {\ncase \"update\":      output=msgToOutput(engine.executeUpdateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n    break;\ncase \"generate\":  output=msgToOutput(engine.executeGenerateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\nbreak;\ncase \"filter\":boolean result=engine.executeFilterAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=Boolean.toString(result);\nbreak;\ncase \"switch\":Set<String> states=engine.executeSwitchAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(states);\nbreak;\ncase \"json\":JsonNode json=engine.executeJsonAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(json);\nbreak;\ncase \"string\":output=engine.executeToStringAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported script type: \" + scriptType);\n}\n}\n catch (Exception e) {\nlog.error(\"Error evaluating JS function\",e);\nerrorText=e.getMessage();\n}\n finally {\nif (engine != null) {\nengine.destroy();\n}\n}\nObjectNode result=objectMapper.createObjectNode();\nresult.put(\"output\",output);\nresult.put(\"error\",errorText);\nreturn result;\n}\n catch (Exception e) {\nthrow handleException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 358,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2974,
        "startLineNumber" : 473,
        "startColumnNumber" : 75,
        "endLineNumber" : 531,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    String script=inputParams.get(\"script\").asText();\n    String scriptType=inputParams.get(\"scriptType\").asText();\n    JsonNode argNamesJson=inputParams.get(\"argNames\");\n    String[] argNames=objectMapper.treeToValue(argNamesJson,String[].class);\n    String data=inputParams.get(\"msg\").asText();\n    JsonNode metadataJson=inputParams.get(\"metadata\");\n    Map<String,String> metadata=objectMapper.convertValue(metadataJson,new TypeReference<Map<String,String>>(){\n    }\n);\n    String msgType=inputParams.get(\"msgType\").asText();\n    String output=\"\";\n    String errorText=\"\";\n    ScriptEngine engine=null;\n    try {\n      engine=new RuleNodeJsScriptEngine(getTenantId(),jsInvokeService,getCurrentUser().getId(),script,argNames);\n      TbMsg inMsg=TbMsg.newMsg(msgType,null,new TbMsgMetaData(metadata),TbMsgDataType.JSON,data);\nswitch (scriptType) {\ncase \"update\":        output=msgToOutput(engine.executeUpdateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n      break;\ncase \"generate\":    output=msgToOutput(engine.executeGenerateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n  break;\ncase \"filter\":boolean result=engine.executeFilterAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=Boolean.toString(result);\nbreak;\ncase \"switch\":Set<String> states=engine.executeSwitchAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(states);\nbreak;\ncase \"json\":JsonNode json=engine.executeJsonAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(json);\nbreak;\ncase \"string\":output=engine.executeToStringAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported script type: \" + scriptType);\n}\n}\n catch (Exception e) {\nlog.error(\"Error evaluating JS function\",e);\nerrorText=e.getMessage();\n}\n finally {\nif (engine != null) {\nengine.destroy();\n}\n}\nObjectNode result=objectMapper.createObjectNode();\nresult.put(\"output\",output);\nresult.put(\"error\",errorText);\nreturn result;\n}\n catch (Exception e) {\nthrow handleException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3430,
        "startLineNumber" : 466,
        "startColumnNumber" : 4,
        "endLineNumber" : 531,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@ApiOperation(value=\"Test JavaScript function\",notes=TEST_JS_FUNCTION + TENANT_AUTHORITY_PARAGRAPH) @PreAuthorize(\"hasAuthority('TENANT_ADMIN')\") @RequestMapping(value=\"/ruleChain/testScript\",method=RequestMethod.POST) @ResponseBody public JsonNode testScript(@ApiParam(value=\"Test JS request. See API call description above.\") @RequestBody JsonNode inputParams) throws ThingsboardException {\n  try {\n    String script=inputParams.get(\"script\").asText();\n    String scriptType=inputParams.get(\"scriptType\").asText();\n    JsonNode argNamesJson=inputParams.get(\"argNames\");\n    String[] argNames=objectMapper.treeToValue(argNamesJson,String[].class);\n    String data=inputParams.get(\"msg\").asText();\n    JsonNode metadataJson=inputParams.get(\"metadata\");\n    Map<String,String> metadata=objectMapper.convertValue(metadataJson,new TypeReference<Map<String,String>>(){\n    }\n);\n    String msgType=inputParams.get(\"msgType\").asText();\n    String output=\"\";\n    String errorText=\"\";\n    ScriptEngine engine=null;\n    try {\n      engine=new RuleNodeJsScriptEngine(getTenantId(),jsInvokeService,getCurrentUser().getId(),script,argNames);\n      TbMsg inMsg=TbMsg.newMsg(msgType,null,new TbMsgMetaData(metadata),TbMsgDataType.JSON,data);\nswitch (scriptType) {\ncase \"update\":        output=msgToOutput(engine.executeUpdateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n      break;\ncase \"generate\":    output=msgToOutput(engine.executeGenerateAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS));\n  break;\ncase \"filter\":boolean result=engine.executeFilterAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=Boolean.toString(result);\nbreak;\ncase \"switch\":Set<String> states=engine.executeSwitchAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(states);\nbreak;\ncase \"json\":JsonNode json=engine.executeJsonAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\noutput=objectMapper.writeValueAsString(json);\nbreak;\ncase \"string\":output=engine.executeToStringAsync(inMsg).get(TIMEOUT,TimeUnit.SECONDS);\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported script type: \" + scriptType);\n}\n}\n catch (Exception e) {\nlog.error(\"Error evaluating JS function\",e);\nerrorText=e.getMessage();\n}\n finally {\nif (engine != null) {\nengine.destroy();\n}\n}\nObjectNode result=objectMapper.createObjectNode();\nresult.put(\"output\",output);\nresult.put(\"error\",errorText);\nreturn result;\n}\n catch (Exception e) {\nthrow handleException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 402,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 517,
        "startColumnNumber" : 16,
        "endLineNumber" : 517,
        "endColumnNumber" : 61
      },
      "nodeContext" : "log.error(\"Error evaluating JS function\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 517,
    "startColumnNumber" : 16,
    "endLineNumber" : 517,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}