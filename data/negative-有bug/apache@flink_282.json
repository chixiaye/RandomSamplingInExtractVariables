{
  "id" : 282,
  "expression" : "DataType.getFields(producedDataType).stream()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-files/src/main/java/org/apache/flink/connector/file/table/FileSystemTableSink.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DataType.getFields(producedDataType).stream()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 294,
      "startColumnNumber" : 16,
      "endLineNumber" : 294,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 294,
        "startColumnNumber" : 16,
        "endLineNumber" : 295,
        "endColumnNumber" : 82
      },
      "nodeContext" : "DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 294,
        "startColumnNumber" : 16,
        "endLineNumber" : 296,
        "endColumnNumber" : 99
      },
      "nodeContext" : "DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName())).collect(Collectors.collectingAndThen(Collectors.toList(),DataTypes::ROW))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 293,
        "startColumnNumber" : 23,
        "endLineNumber" : 296,
        "endColumnNumber" : 99
      },
      "nodeContext" : "physicalDataType=DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName())).collect(Collectors.collectingAndThen(Collectors.toList(),DataTypes::ROW))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 293,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 100
      },
      "nodeContext" : "final DataType physicalDataType=DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName())).collect(Collectors.collectingAndThen(Collectors.toList(),DataTypes::ROW));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1939,
        "startLineNumber" : 289,
        "startColumnNumber" : 97,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DataType producedDataType=physicalRowDataType;\n  final DataType physicalDataType=DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName())).collect(Collectors.collectingAndThen(Collectors.toList(),DataTypes::ROW));\n  if (bulkReaderFormat != null) {\n    final BulkFormat<RowData,FileSourceSplit> format=new FileInfoExtractorBulkFormat(bulkReaderFormat.createRuntimeDecoder(createSourceContext(context),physicalDataType),producedDataType,context.createTypeInformation(producedDataType),Collections.emptyMap(),partitionKeys,defaultPartName);\n    return Optional.of(CompactBulkReader.factory(format));\n  }\n else   if (deserializationFormat != null) {\n    final DeserializationSchema<RowData> decoder=deserializationFormat.createRuntimeDecoder(createSourceContext(context),physicalDataType);\n    final BulkFormat<RowData,FileSourceSplit> format=new FileInfoExtractorBulkFormat(new DeserializationSchemaAdapter(decoder),producedDataType,context.createTypeInformation(producedDataType),Collections.emptyMap(),partitionKeys,defaultPartName);\n    return Optional.of(CompactBulkReader.factory(format));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 289,
        "startColumnNumber" : 4,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Optional<CompactReader.Factory<RowData>> createCompactReaderFactory(Context context){\n  final DataType producedDataType=physicalRowDataType;\n  final DataType physicalDataType=DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName())).collect(Collectors.collectingAndThen(Collectors.toList(),DataTypes::ROW));\n  if (bulkReaderFormat != null) {\n    final BulkFormat<RowData,FileSourceSplit> format=new FileInfoExtractorBulkFormat(bulkReaderFormat.createRuntimeDecoder(createSourceContext(context),physicalDataType),producedDataType,context.createTypeInformation(producedDataType),Collections.emptyMap(),partitionKeys,defaultPartName);\n    return Optional.of(CompactBulkReader.factory(format));\n  }\n else   if (deserializationFormat != null) {\n    final DeserializationSchema<RowData> decoder=deserializationFormat.createRuntimeDecoder(createSourceContext(context),physicalDataType);\n    final BulkFormat<RowData,FileSourceSplit> format=new FileInfoExtractorBulkFormat(new DeserializationSchemaAdapter(decoder),producedDataType,context.createTypeInformation(producedDataType),Collections.emptyMap(),partitionKeys,defaultPartName);\n    return Optional.of(CompactBulkReader.factory(format));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 294,
        "startColumnNumber" : 16,
        "endLineNumber" : 295,
        "endColumnNumber" : 82
      },
      "nodeContext" : "DataType.getFields(producedDataType).stream().filter(field -> !partitionKeys.contains(field.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.util.stream.Stream<org.apache.flink.table.api.DataTypes.Field>"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 294,
    "startColumnNumber" : 16,
    "endLineNumber" : 294,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}