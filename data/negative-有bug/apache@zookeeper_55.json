{
  "id" : 55,
  "expression" : "ClientBase",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/OOMTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClientBase",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 47,
      "startColumnNumber" : 22,
      "endLineNumber" : 47,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 47,
        "startColumnNumber" : 22,
        "endLineNumber" : 47,
        "endColumnNumber" : 47
      },
      "nodeContext" : "ClientBase.createTmpDir()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 47,
        "startColumnNumber" : 13,
        "endLineNumber" : 47,
        "endColumnNumber" : 47
      },
      "nodeContext" : "tmpDir=ClientBase.createTmpDir()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 48
      },
      "nodeContext" : "File tmpDir=ClientBase.createTmpDir();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 43,
        "startColumnNumber" : 84,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2589,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testOOM() throws IOException, InterruptedException, KeeperException {\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 48
      },
      "nodeContext" : "File tmpDir=ClientBase.createTmpDir();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ClientBase"
  }, {
    "nodeContext" : "ClientBase",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 59,
      "startColumnNumber" : 8,
      "endLineNumber" : 59,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ClientBase.setupTestEnv()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ClientBase.setupTestEnv();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 43,
        "startColumnNumber" : 84,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2589,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testOOM() throws IOException, InterruptedException, KeeperException {\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ClientBase.setupTestEnv();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ClientBase"
  }, {
    "nodeContext" : "ClientBase",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 66,
      "startColumnNumber" : 19,
      "endLineNumber" : 66,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 66,
        "startColumnNumber" : 19,
        "endLineNumber" : 67,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 43,
        "startColumnNumber" : 84,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2589,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testOOM() throws IOException, InterruptedException, KeeperException {\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 66,
        "startColumnNumber" : 19,
        "endLineNumber" : 67,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ClientBase"
  }, {
    "nodeContext" : "ClientBase",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 102,
      "startColumnNumber" : 19,
      "endLineNumber" : 102,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 102,
        "startColumnNumber" : 19,
        "endLineNumber" : 103,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 43,
        "startColumnNumber" : 84,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2589,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testOOM() throws IOException, InterruptedException, KeeperException {\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 102,
        "startColumnNumber" : 19,
        "endLineNumber" : 103,
        "endColumnNumber" : 67
      },
      "nodeContext" : "ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ClientBase"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 47,
    "startColumnNumber" : 22,
    "endLineNumber" : 47,
    "endColumnNumber" : 32
  }, {
    "charLength" : 10,
    "startLineNumber" : 59,
    "startColumnNumber" : 8,
    "endLineNumber" : 59,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 66,
    "startColumnNumber" : 19,
    "endLineNumber" : 66,
    "endColumnNumber" : 29
  }, {
    "charLength" : 10,
    "startLineNumber" : 102,
    "startColumnNumber" : 19,
    "endLineNumber" : 102,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}