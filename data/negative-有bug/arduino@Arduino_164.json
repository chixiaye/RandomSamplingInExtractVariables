{
  "id" : 164,
  "expression" : "\"\"",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/helpers/FileUtils.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 134,
      "startColumnNumber" : 20,
      "endLineNumber" : 134,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 134,
        "startColumnNumber" : 11,
        "endLineNumber" : 134,
        "endColumnNumber" : 22
      },
      "nodeContext" : "prefix=\"\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 23
      },
      "nodeContext" : "String prefix=\"\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 112,
        "startColumnNumber" : 66,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String relativePath(String origin,String target){\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 23
      },
      "nodeContext" : "String prefix=\"\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 153,
      "startColumnNumber" : 15,
      "endLineNumber" : 153,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 153,
        "startColumnNumber" : 15,
        "endLineNumber" : 153,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"\" + originLetter + ':'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 38
      },
      "nodeContext" : "prefix=\"\" + originLetter + ':'",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 39
      },
      "nodeContext" : "prefix=\"\" + originLetter + ':';\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 137,
        "startColumnNumber" : 64,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n    return null;\n  }\n  char originLetter=origin.charAt(0);\n  char targetLetter=target.charAt(0);\n  if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n    if (originLetter != targetLetter) {\n      return null;\n    }\n  }\n  prefix=\"\" + originLetter + ':';\n  root=prefix + File.separator;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n  if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n    return null;\n  }\n  char originLetter=origin.charAt(0);\n  char targetLetter=target.charAt(0);\n  if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n    if (originLetter != targetLetter) {\n      return null;\n    }\n  }\n  prefix=\"\" + originLetter + ':';\n  root=prefix + File.separator;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 112,
        "startColumnNumber" : 66,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String relativePath(String origin,String target){\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 39
      },
      "nodeContext" : "prefix=\"\" + originLetter + ':';\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 157,
      "startColumnNumber" : 22,
      "endLineNumber" : 157,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 157,
        "startColumnNumber" : 11,
        "endLineNumber" : 157,
        "endColumnNumber" : 24
      },
      "nodeContext" : "relative=\"\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 25
      },
      "nodeContext" : "String relative=\"\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1502,
        "startLineNumber" : 112,
        "startColumnNumber" : 66,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String relativePath(String origin,String target){\n  try {\n    origin=(new File(origin)).getCanonicalPath();\n    File targetFile=new File(target);\n    if (targetFile.isAbsolute())     target=targetFile.getCanonicalPath();\n else     target=(new File(origin,target)).getCanonicalPath();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (origin.equals(target)) {\n    return \".\";\n  }\n  if (origin.equals(File.separator)) {\n    return \".\" + target;\n  }\n  String prefix=\"\";\n  String root=File.separator;\n  if (System.getProperty(\"os.name\").indexOf(\"Windows\") != -1) {\n    if (origin.startsWith(\"\\\\\\\\\") || target.startsWith(\"\\\\\\\\\")) {\n      return null;\n    }\n    char originLetter=origin.charAt(0);\n    char targetLetter=target.charAt(0);\n    if (Character.isLetter(originLetter) && Character.isLetter(targetLetter)) {\n      if (originLetter != targetLetter) {\n        return null;\n      }\n    }\n    prefix=\"\" + originLetter + ':';\n    root=prefix + File.separator;\n  }\n  String relative=\"\";\n  while (!target.startsWith(origin + File.separator)) {\n    origin=(new File(origin)).getParent();\n    if (origin.equals(root))     origin=prefix;\n    relative+=\"..\";\n    relative+=File.separator;\n  }\n  return relative + target.substring(origin.length() + 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 25
      },
      "nodeContext" : "String relative=\"\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 134,
    "startColumnNumber" : 20,
    "endLineNumber" : 134,
    "endColumnNumber" : 22
  }, {
    "charLength" : 2,
    "startLineNumber" : 153,
    "startColumnNumber" : 15,
    "endLineNumber" : 153,
    "endColumnNumber" : 17
  }, {
    "charLength" : 2,
    "startLineNumber" : 157,
    "startColumnNumber" : 22,
    "endLineNumber" : 157,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}