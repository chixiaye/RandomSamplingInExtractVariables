{
  "id" : 306,
  "expression" : "clazz.equals(Object.class)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clazz.equals(Object.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 985,
      "startColumnNumber" : 31,
      "endLineNumber" : 985,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 985,
        "startColumnNumber" : 30,
        "endLineNumber" : 985,
        "endColumnNumber" : 57
      },
      "nodeContext" : "!clazz.equals(Object.class)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 985,
        "startColumnNumber" : 13,
        "endLineNumber" : 985,
        "endColumnNumber" : 57
      },
      "nodeContext" : "clazz != null && !clazz.equals(Object.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 984,
        "startColumnNumber" : 8,
        "endLineNumber" : 993,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Class<?> clazz=obj.getClass(); clazz != null && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {\n  Class<?>[] interfaces=clazz.getInterfaces();\n  for (  Class<?> itf : interfaces) {\n    if (itf.getName().equals(interfaceClazzName)) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 983,
        "startColumnNumber" : 76,
        "endLineNumber" : 995,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (Class<?> clazz=obj.getClass(); clazz != null && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {\n    Class<?>[] interfaces=clazz.getInterfaces();\n    for (    Class<?> itf : interfaces) {\n      if (itf.getName().equals(interfaceClazzName)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 973,
        "startColumnNumber" : 4,
        "endLineNumber" : 995,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Check if one object is the implementation for a given interface. <p> This method will not trigger classloading for the given interface, therefore it will not lead to error when the given interface is not visible by the classloader\n * @param obj                Object to examine\n * @param interfaceClazzName The given interface\n * @return true if the object implements the given interface, otherwise return false\n */\npublic static boolean isInstance(Object obj,String interfaceClazzName){\n  for (Class<?> clazz=obj.getClass(); clazz != null && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {\n    Class<?>[] interfaces=clazz.getInterfaces();\n    for (    Class<?> itf : interfaces) {\n      if (itf.getName().equals(interfaceClazzName)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 76,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 985,
        "startColumnNumber" : 13,
        "endLineNumber" : 985,
        "endColumnNumber" : 57
      },
      "nodeContext" : "clazz != null && !clazz.equals(Object.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 985,
    "startColumnNumber" : 31,
    "endLineNumber" : 985,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}