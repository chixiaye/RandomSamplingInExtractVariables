{
  "id" : 257,
  "expression" : "batch.epoch()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/metadata/src/main/java/org/apache/kafka/controller/QuorumController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "batch.epoch()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 730,
      "startColumnNumber" : 36,
      "endLineNumber" : 730,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 730,
        "startColumnNumber" : 28,
        "endLineNumber" : 730,
        "endColumnNumber" : 49
      },
      "nodeContext" : "epoch=batch.epoch()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 730,
        "startColumnNumber" : 24,
        "endLineNumber" : 730,
        "endColumnNumber" : 50
      },
      "nodeContext" : "int epoch=batch.epoch();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2658,
        "startLineNumber" : 727,
        "startColumnNumber" : 45,
        "endLineNumber" : 770,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Batch<ApiMessageAndVersion> batch=reader.next();\n  long offset=batch.lastOffset();\n  int epoch=batch.epoch();\n  List<ApiMessageAndVersion> messages=batch.records();\n  if (isActiveController) {\n    log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n    purgatory.completeUpTo(offset);\n    snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n      }\n else {\n        log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n      }\n    }\n    for (    ApiMessageAndVersion messageAndVersion : messages) {\n      replay(messageAndVersion.message(),Optional.empty(),offset);\n    }\n  }\n  lastCommittedOffset=offset;\n  lastCommittedEpoch=epoch;\n  lastCommittedTimestamp=batch.appendTimestamp();\n  processedRecordsSize+=batch.sizeInBytes();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2683,
        "startLineNumber" : 727,
        "startColumnNumber" : 20,
        "endLineNumber" : 770,
        "endColumnNumber" : 21
      },
      "nodeContext" : "while (reader.hasNext()) {\n  Batch<ApiMessageAndVersion> batch=reader.next();\n  long offset=batch.lastOffset();\n  int epoch=batch.epoch();\n  List<ApiMessageAndVersion> messages=batch.records();\n  if (isActiveController) {\n    log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n    purgatory.completeUpTo(offset);\n    snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n      }\n else {\n        log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n      }\n    }\n    for (    ApiMessageAndVersion messageAndVersion : messages) {\n      replay(messageAndVersion.message(),Optional.empty(),offset);\n    }\n  }\n  lastCommittedOffset=offset;\n  lastCommittedEpoch=epoch;\n  lastCommittedTimestamp=batch.appendTimestamp();\n  processedRecordsSize+=batch.sizeInBytes();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 147,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2910,
        "startLineNumber" : 724,
        "startColumnNumber" : 20,
        "endLineNumber" : 773,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  boolean isActiveController=curClaimEpoch != -1;\n  long processedRecordsSize=0;\n  while (reader.hasNext()) {\n    Batch<ApiMessageAndVersion> batch=reader.next();\n    long offset=batch.lastOffset();\n    int epoch=batch.epoch();\n    List<ApiMessageAndVersion> messages=batch.records();\n    if (isActiveController) {\n      log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n      purgatory.completeUpTo(offset);\n      snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (log.isTraceEnabled()) {\n          log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n        }\n else {\n          log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n        }\n      }\n      for (      ApiMessageAndVersion messageAndVersion : messages) {\n        replay(messageAndVersion.message(),Optional.empty(),offset);\n      }\n    }\n    lastCommittedOffset=offset;\n    lastCommittedEpoch=epoch;\n    lastCommittedTimestamp=batch.appendTimestamp();\n    processedRecordsSize+=batch.sizeInBytes();\n  }\n  maybeGenerateSnapshot(processedRecordsSize);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2978,
        "startLineNumber" : 724,
        "startColumnNumber" : 16,
        "endLineNumber" : 775,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  boolean isActiveController=curClaimEpoch != -1;\n  long processedRecordsSize=0;\n  while (reader.hasNext()) {\n    Batch<ApiMessageAndVersion> batch=reader.next();\n    long offset=batch.lastOffset();\n    int epoch=batch.epoch();\n    List<ApiMessageAndVersion> messages=batch.records();\n    if (isActiveController) {\n      log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n      purgatory.completeUpTo(offset);\n      snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (log.isTraceEnabled()) {\n          log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n        }\n else {\n          log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n        }\n      }\n      for (      ApiMessageAndVersion messageAndVersion : messages) {\n        replay(messageAndVersion.message(),Optional.empty(),offset);\n      }\n    }\n    lastCommittedOffset=offset;\n    lastCommittedEpoch=epoch;\n    lastCommittedTimestamp=batch.appendTimestamp();\n    processedRecordsSize+=batch.sizeInBytes();\n  }\n  maybeGenerateSnapshot(processedRecordsSize);\n}\n  finally {\n  reader.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 171,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 3010,
        "startLineNumber" : 723,
        "startColumnNumber" : 90,
        "endLineNumber" : 776,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    boolean isActiveController=curClaimEpoch != -1;\n    long processedRecordsSize=0;\n    while (reader.hasNext()) {\n      Batch<ApiMessageAndVersion> batch=reader.next();\n      long offset=batch.lastOffset();\n      int epoch=batch.epoch();\n      List<ApiMessageAndVersion> messages=batch.records();\n      if (isActiveController) {\n        log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n        purgatory.completeUpTo(offset);\n        snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n      }\n else {\n        if (log.isDebugEnabled()) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n          }\n else {\n            log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n          }\n        }\n        for (        ApiMessageAndVersion messageAndVersion : messages) {\n          replay(messageAndVersion.message(),Optional.empty(),offset);\n        }\n      }\n      lastCommittedOffset=offset;\n      lastCommittedEpoch=epoch;\n      lastCommittedTimestamp=batch.appendTimestamp();\n      processedRecordsSize+=batch.sizeInBytes();\n    }\n    maybeGenerateSnapshot(processedRecordsSize);\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 3016,
        "startLineNumber" : 723,
        "startColumnNumber" : 84,
        "endLineNumber" : 776,
        "endColumnNumber" : 13
      },
      "nodeContext" : "() -> {\n  try {\n    boolean isActiveController=curClaimEpoch != -1;\n    long processedRecordsSize=0;\n    while (reader.hasNext()) {\n      Batch<ApiMessageAndVersion> batch=reader.next();\n      long offset=batch.lastOffset();\n      int epoch=batch.epoch();\n      List<ApiMessageAndVersion> messages=batch.records();\n      if (isActiveController) {\n        log.debug(\"Completing purgatory items up to offset {} and epoch {}.\",offset,epoch);\n        purgatory.completeUpTo(offset);\n        snapshotRegistry.deleteSnapshotsUpTo(snapshotGeneratorManager.snapshotLastOffsetFromLog().orElse(offset));\n      }\n else {\n        if (log.isDebugEnabled()) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}: {}.\",offset,epoch,messages.stream().map(ApiMessageAndVersion::toString).collect(Collectors.joining(\", \")));\n          }\n else {\n            log.debug(\"Replaying commits from the active node up to \" + \"offset {} and epoch {}.\",offset,epoch);\n          }\n        }\n        for (        ApiMessageAndVersion messageAndVersion : messages) {\n          replay(messageAndVersion.message(),Optional.empty(),offset);\n        }\n      }\n      lastCommittedOffset=offset;\n      lastCommittedEpoch=epoch;\n      lastCommittedTimestamp=batch.appendTimestamp();\n      processedRecordsSize+=batch.sizeInBytes();\n    }\n    maybeGenerateSnapshot(processedRecordsSize);\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 173,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 730,
        "startColumnNumber" : 24,
        "endLineNumber" : 730,
        "endColumnNumber" : 50
      },
      "nodeContext" : "int epoch=batch.epoch();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 730,
    "startColumnNumber" : 36,
    "endLineNumber" : 730,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}