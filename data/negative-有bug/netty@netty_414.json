{
  "id" : 414,
  "expression" : "boot2",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-udt/src/test/java/io/netty/test/udt/nio/NioUdtByteRendezvousChannelTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "boot2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 90,
      "startColumnNumber" : 8,
      "endLineNumber" : 90,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 27
      },
      "nodeContext" : "boot2.group(group1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 60
      },
      "nodeContext" : "boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 33
      },
      "nodeContext" : "boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 34
      },
      "nodeContext" : "boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 31
      },
      "nodeContext" : "boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 32
      },
      "nodeContext" : "boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 58,
        "startColumnNumber" : 45,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int messageSize=64 * 1024;\n  final int transferLimit=messageSize * 16;\n  final Meter rate1=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final Meter rate2=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final InetSocketAddress addr1=UnitHelp.localSocketAddress();\n  final InetSocketAddress addr2=UnitHelp.localSocketAddress();\n  final EchoByteHandler handler1=new EchoByteHandler(rate1,messageSize);\n  final EchoByteHandler handler2=new EchoByteHandler(rate2,messageSize);\n  final NioEventLoopGroup group1=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final NioEventLoopGroup group2=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final Bootstrap boot1=new Bootstrap();\n  boot1.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr1).remoteAddress(addr2).handler(handler1);\n  final Bootstrap boot2=new Bootstrap();\n  boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);\n  final ChannelFuture connectFuture1=boot1.connect();\n  final ChannelFuture connectFuture2=boot2.connect();\n  while (handler1.meter().count() < transferLimit && handler2.meter().count() < transferLimit) {\n    log.info(\"progress : {} {}\",handler1.meter().count(),handler2.meter().count());\n    Thread.sleep(1000);\n  }\n  connectFuture1.channel().close().sync();\n  connectFuture2.channel().close().sync();\n  log.info(\"handler1 : {}\",handler1.meter().count());\n  log.info(\"handler2 : {}\",handler2.meter().count());\n  assertTrue(handler1.meter().count() >= transferLimit);\n  assertTrue(handler2.meter().count() >= transferLimit);\n  assertEquals(handler1.meter().count(),handler2.meter().count());\n  group1.shutdownGracefully();\n  group2.shutdownGracefully();\n  group1.terminationFuture().sync();\n  group2.terminationFuture().sync();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2741,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * verify basic echo byte rendezvous\n */\n@Test @Timeout(value=10000,unit=TimeUnit.MILLISECONDS) public void basicEcho() throws Exception {\n  final int messageSize=64 * 1024;\n  final int transferLimit=messageSize * 16;\n  final Meter rate1=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final Meter rate2=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final InetSocketAddress addr1=UnitHelp.localSocketAddress();\n  final InetSocketAddress addr2=UnitHelp.localSocketAddress();\n  final EchoByteHandler handler1=new EchoByteHandler(rate1,messageSize);\n  final EchoByteHandler handler2=new EchoByteHandler(rate2,messageSize);\n  final NioEventLoopGroup group1=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final NioEventLoopGroup group2=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final Bootstrap boot1=new Bootstrap();\n  boot1.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr1).remoteAddress(addr2).handler(handler1);\n  final Bootstrap boot2=new Bootstrap();\n  boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);\n  final ChannelFuture connectFuture1=boot1.connect();\n  final ChannelFuture connectFuture2=boot2.connect();\n  while (handler1.meter().count() < transferLimit && handler2.meter().count() < transferLimit) {\n    log.info(\"progress : {} {}\",handler1.meter().count(),handler2.meter().count());\n    Thread.sleep(1000);\n  }\n  connectFuture1.channel().close().sync();\n  connectFuture2.channel().close().sync();\n  log.info(\"handler1 : {}\",handler1.meter().count());\n  log.info(\"handler2 : {}\",handler2.meter().count());\n  assertTrue(handler1.meter().count() >= transferLimit);\n  assertTrue(handler2.meter().count() >= transferLimit);\n  assertEquals(handler1.meter().count(),handler2.meter().count());\n  group1.shutdownGracefully();\n  group2.shutdownGracefully();\n  group1.terminationFuture().sync();\n  group2.terminationFuture().sync();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 342,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 27
      },
      "nodeContext" : "boot2.group(group1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.netty.bootstrap.Bootstrap"
  }, {
    "nodeContext" : "boot2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 97,
      "startColumnNumber" : 45,
      "endLineNumber" : 97,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 97,
        "startColumnNumber" : 45,
        "endLineNumber" : 97,
        "endColumnNumber" : 60
      },
      "nodeContext" : "boot2.connect()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 97,
        "startColumnNumber" : 28,
        "endLineNumber" : 97,
        "endColumnNumber" : 60
      },
      "nodeContext" : "connectFuture2=boot2.connect()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final ChannelFuture connectFuture2=boot2.connect();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 58,
        "startColumnNumber" : 45,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int messageSize=64 * 1024;\n  final int transferLimit=messageSize * 16;\n  final Meter rate1=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final Meter rate2=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final InetSocketAddress addr1=UnitHelp.localSocketAddress();\n  final InetSocketAddress addr2=UnitHelp.localSocketAddress();\n  final EchoByteHandler handler1=new EchoByteHandler(rate1,messageSize);\n  final EchoByteHandler handler2=new EchoByteHandler(rate2,messageSize);\n  final NioEventLoopGroup group1=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final NioEventLoopGroup group2=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final Bootstrap boot1=new Bootstrap();\n  boot1.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr1).remoteAddress(addr2).handler(handler1);\n  final Bootstrap boot2=new Bootstrap();\n  boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);\n  final ChannelFuture connectFuture1=boot1.connect();\n  final ChannelFuture connectFuture2=boot2.connect();\n  while (handler1.meter().count() < transferLimit && handler2.meter().count() < transferLimit) {\n    log.info(\"progress : {} {}\",handler1.meter().count(),handler2.meter().count());\n    Thread.sleep(1000);\n  }\n  connectFuture1.channel().close().sync();\n  connectFuture2.channel().close().sync();\n  log.info(\"handler1 : {}\",handler1.meter().count());\n  log.info(\"handler2 : {}\",handler2.meter().count());\n  assertTrue(handler1.meter().count() >= transferLimit);\n  assertTrue(handler2.meter().count() >= transferLimit);\n  assertEquals(handler1.meter().count(),handler2.meter().count());\n  group1.shutdownGracefully();\n  group2.shutdownGracefully();\n  group1.terminationFuture().sync();\n  group2.terminationFuture().sync();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2741,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * verify basic echo byte rendezvous\n */\n@Test @Timeout(value=10000,unit=TimeUnit.MILLISECONDS) public void basicEcho() throws Exception {\n  final int messageSize=64 * 1024;\n  final int transferLimit=messageSize * 16;\n  final Meter rate1=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final Meter rate2=Metrics.newMeter(NioUdtMessageRendezvousChannelTest.class,\"send rate\",\"bytes\",TimeUnit.SECONDS);\n  final InetSocketAddress addr1=UnitHelp.localSocketAddress();\n  final InetSocketAddress addr2=UnitHelp.localSocketAddress();\n  final EchoByteHandler handler1=new EchoByteHandler(rate1,messageSize);\n  final EchoByteHandler handler2=new EchoByteHandler(rate2,messageSize);\n  final NioEventLoopGroup group1=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final NioEventLoopGroup group2=new NioEventLoopGroup(1,Executors.defaultThreadFactory(),NioUdtProvider.BYTE_PROVIDER);\n  final Bootstrap boot1=new Bootstrap();\n  boot1.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr1).remoteAddress(addr2).handler(handler1);\n  final Bootstrap boot2=new Bootstrap();\n  boot2.group(group1).channelFactory(NioUdtProvider.BYTE_RENDEZVOUS).localAddress(addr2).remoteAddress(addr1).handler(handler2);\n  final ChannelFuture connectFuture1=boot1.connect();\n  final ChannelFuture connectFuture2=boot2.connect();\n  while (handler1.meter().count() < transferLimit && handler2.meter().count() < transferLimit) {\n    log.info(\"progress : {} {}\",handler1.meter().count(),handler2.meter().count());\n    Thread.sleep(1000);\n  }\n  connectFuture1.channel().close().sync();\n  connectFuture2.channel().close().sync();\n  log.info(\"handler1 : {}\",handler1.meter().count());\n  log.info(\"handler2 : {}\",handler2.meter().count());\n  assertTrue(handler1.meter().count() >= transferLimit);\n  assertTrue(handler2.meter().count() >= transferLimit);\n  assertEquals(handler1.meter().count(),handler2.meter().count());\n  group1.shutdownGracefully();\n  group2.shutdownGracefully();\n  group1.terminationFuture().sync();\n  group2.terminationFuture().sync();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 342,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final ChannelFuture connectFuture2=boot2.connect();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.bootstrap.Bootstrap"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 90,
    "startColumnNumber" : 8,
    "endLineNumber" : 90,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 97,
    "startColumnNumber" : 45,
    "endLineNumber" : 97,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}