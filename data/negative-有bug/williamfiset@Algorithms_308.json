{
  "id" : 308,
  "expression" : "nodeIndex",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyList.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nodeIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 84,
      "startColumnNumber" : 15,
      "endLineNumber" : 84,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 25
      },
      "nodeContext" : "dist[nodeIndex]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 33
      },
      "nodeContext" : "dist[nodeIndex] != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 94,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (dist[nodeIndex] != null) {\n  List<Edge> adjacentEdges=graph.get(nodeIndex);\n  if (adjacentEdges != null) {\n    for (    Edge edge : adjacentEdges) {\n      int newDist=dist[nodeIndex] + edge.weight;\n      if (dist[edge.to] == null)       dist[edge.to]=newDist;\n else       dist[edge.to]=Math.min(dist[edge.to],newDist);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numNodes; i++) {\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 75,
        "startColumnNumber" : 99,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Integer[] dagShortestPath(Map<Integer,List<Edge>> graph,int start,int numNodes){\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 33
      },
      "nodeContext" : "dist[nodeIndex] != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "nodeIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 85,
      "startColumnNumber" : 45,
      "endLineNumber" : 85,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 85,
        "startColumnNumber" : 35,
        "endLineNumber" : 85,
        "endColumnNumber" : 55
      },
      "nodeContext" : "graph.get(nodeIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 85,
        "startColumnNumber" : 19,
        "endLineNumber" : 85,
        "endColumnNumber" : 55
      },
      "nodeContext" : "adjacentEdges=graph.get(nodeIndex)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 56
      },
      "nodeContext" : "List<Edge> adjacentEdges=graph.get(nodeIndex);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 84,
        "startColumnNumber" : 35,
        "endLineNumber" : 94,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  List<Edge> adjacentEdges=graph.get(nodeIndex);\n  if (adjacentEdges != null) {\n    for (    Edge edge : adjacentEdges) {\n      int newDist=dist[nodeIndex] + edge.weight;\n      if (dist[edge.to] == null)       dist[edge.to]=newDist;\n else       dist[edge.to]=Math.min(dist[edge.to],newDist);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 94,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (dist[nodeIndex] != null) {\n  List<Edge> adjacentEdges=graph.get(nodeIndex);\n  if (adjacentEdges != null) {\n    for (    Edge edge : adjacentEdges) {\n      int newDist=dist[nodeIndex] + edge.weight;\n      if (dist[edge.to] == null)       dist[edge.to]=newDist;\n else       dist[edge.to]=Math.min(dist[edge.to],newDist);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numNodes; i++) {\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 75,
        "startColumnNumber" : 99,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Integer[] dagShortestPath(Map<Integer,List<Edge>> graph,int start,int numNodes){\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 56
      },
      "nodeContext" : "List<Edge> adjacentEdges=graph.get(nodeIndex);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "nodeIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 89,
      "startColumnNumber" : 31,
      "endLineNumber" : 89,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 89,
        "startColumnNumber" : 26,
        "endLineNumber" : 89,
        "endColumnNumber" : 41
      },
      "nodeContext" : "dist[nodeIndex]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 89,
        "startColumnNumber" : 26,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "dist[nodeIndex] + edge.weight",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 55
      },
      "nodeContext" : "newDist=dist[nodeIndex] + edge.weight",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int newDist=dist[nodeIndex] + edge.weight;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 87,
        "startColumnNumber" : 42,
        "endLineNumber" : 92,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  int newDist=dist[nodeIndex] + edge.weight;\n  if (dist[edge.to] == null)   dist[edge.to]=newDist;\n else   dist[edge.to]=Math.min(dist[edge.to],newDist);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 87,
        "startColumnNumber" : 10,
        "endLineNumber" : 92,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Edge edge : adjacentEdges) {\n  int newDist=dist[nodeIndex] + edge.weight;\n  if (dist[edge.to] == null)   dist[edge.to]=newDist;\n else   dist[edge.to]=Math.min(dist[edge.to],newDist);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 86,
        "startColumnNumber" : 35,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Edge edge : adjacentEdges) {\n    int newDist=dist[nodeIndex] + edge.weight;\n    if (dist[edge.to] == null)     dist[edge.to]=newDist;\n else     dist[edge.to]=Math.min(dist[edge.to],newDist);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (adjacentEdges != null) {\n  for (  Edge edge : adjacentEdges) {\n    int newDist=dist[nodeIndex] + edge.weight;\n    if (dist[edge.to] == null)     dist[edge.to]=newDist;\n else     dist[edge.to]=Math.min(dist[edge.to],newDist);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 84,
        "startColumnNumber" : 35,
        "endLineNumber" : 94,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  List<Edge> adjacentEdges=graph.get(nodeIndex);\n  if (adjacentEdges != null) {\n    for (    Edge edge : adjacentEdges) {\n      int newDist=dist[nodeIndex] + edge.weight;\n      if (dist[edge.to] == null)       dist[edge.to]=newDist;\n else       dist[edge.to]=Math.min(dist[edge.to],newDist);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 94,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (dist[nodeIndex] != null) {\n  List<Edge> adjacentEdges=graph.get(nodeIndex);\n  if (adjacentEdges != null) {\n    for (    Edge edge : adjacentEdges) {\n      int newDist=dist[nodeIndex] + edge.weight;\n      if (dist[edge.to] == null)       dist[edge.to]=newDist;\n else       dist[edge.to]=Math.min(dist[edge.to],newDist);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 81,
        "startColumnNumber" : 39,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numNodes; i++) {\n  int nodeIndex=topsort[i];\n  if (dist[nodeIndex] != null) {\n    List<Edge> adjacentEdges=graph.get(nodeIndex);\n    if (adjacentEdges != null) {\n      for (      Edge edge : adjacentEdges) {\n        int newDist=dist[nodeIndex] + edge.weight;\n        if (dist[edge.to] == null)         dist[edge.to]=newDist;\n else         dist[edge.to]=Math.min(dist[edge.to],newDist);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 93,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 75,
        "startColumnNumber" : 99,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Integer[] dagShortestPath(Map<Integer,List<Edge>> graph,int start,int numNodes){\n  int[] topsort=topologicalSort(graph,numNodes);\n  Integer[] dist=new Integer[numNodes];\n  dist[start]=0;\n  for (int i=0; i < numNodes; i++) {\n    int nodeIndex=topsort[i];\n    if (dist[nodeIndex] != null) {\n      List<Edge> adjacentEdges=graph.get(nodeIndex);\n      if (adjacentEdges != null) {\n        for (        Edge edge : adjacentEdges) {\n          int newDist=dist[nodeIndex] + edge.weight;\n          if (dist[edge.to] == null)           dist[edge.to]=newDist;\n else           dist[edge.to]=Math.min(dist[edge.to],newDist);\n        }\n      }\n    }\n  }\n  return dist;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int newDist=dist[nodeIndex] + edge.weight;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 84,
    "startColumnNumber" : 15,
    "endLineNumber" : 84,
    "endColumnNumber" : 24
  }, {
    "charLength" : 9,
    "startLineNumber" : 85,
    "startColumnNumber" : 45,
    "endLineNumber" : 85,
    "endColumnNumber" : 54
  }, {
    "charLength" : 9,
    "startLineNumber" : 89,
    "startColumnNumber" : 31,
    "endLineNumber" : 89,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  } ]
}