{
  "id" : 191,
  "expression" : "TypeFilter.class.getName()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TypeFilter.class.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 253,
      "startColumnNumber" : 39,
      "endLineNumber" : 253,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 253,
        "endColumnNumber" : 86
      },
      "nodeContext" : "\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 252,
        "startColumnNumber" : 10,
        "endLineNumber" : 253,
        "endColumnNumber" : 87
      },
      "nodeContext" : "new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 252,
        "startColumnNumber" : 4,
        "endLineNumber" : 253,
        "endColumnNumber" : 88
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 251,
        "startColumnNumber" : 56,
        "endLineNumber" : 254,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 251,
        "startColumnNumber" : 3,
        "endLineNumber" : 254,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n  throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 249,
        "startColumnNumber" : 40,
        "endLineNumber" : 256,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 249,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (\"custom\".equals(filterType)) {\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 246,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (\"regex\".equals(filterType)) {\n  return new RegexPatternTypeFilter(Pattern.compile(expression));\n}\n else if (\"custom\".equals(filterType)) {\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 243,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (\"aspectj\".equals(filterType)) {\n  return new AspectJTypeFilter(expression,classLoader);\n}\n else if (\"regex\".equals(filterType)) {\n  return new RegexPatternTypeFilter(Pattern.compile(expression));\n}\n else if (\"custom\".equals(filterType)) {\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 240,
        "startColumnNumber" : 7,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (\"assignable\".equals(filterType)) {\n  return new AssignableTypeFilter(ClassUtils.forName(expression,classLoader));\n}\n else if (\"aspectj\".equals(filterType)) {\n  return new AspectJTypeFilter(expression,classLoader);\n}\n else if (\"regex\".equals(filterType)) {\n  return new RegexPatternTypeFilter(Pattern.compile(expression));\n}\n else if (\"custom\".equals(filterType)) {\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 259,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (\"annotation\".equals(filterType)) {\n  return new AnnotationTypeFilter((Class<Annotation>)ClassUtils.forName(expression,classLoader));\n}\n else if (\"assignable\".equals(filterType)) {\n  return new AssignableTypeFilter(ClassUtils.forName(expression,classLoader));\n}\n else if (\"aspectj\".equals(filterType)) {\n  return new AspectJTypeFilter(expression,classLoader);\n}\n else if (\"regex\".equals(filterType)) {\n  return new RegexPatternTypeFilter(Pattern.compile(expression));\n}\n else if (\"custom\".equals(filterType)) {\n  Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n  if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n    throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n  }\n  return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1204,
        "startLineNumber" : 232,
        "startColumnNumber" : 62,
        "endLineNumber" : 260,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String filterType=element.getAttribute(FILTER_TYPE_ATTRIBUTE);\n  String expression=element.getAttribute(FILTER_EXPRESSION_ATTRIBUTE);\n  expression=parserContext.getReaderContext().getEnvironment().resolvePlaceholders(expression);\n  if (\"annotation\".equals(filterType)) {\n    return new AnnotationTypeFilter((Class<Annotation>)ClassUtils.forName(expression,classLoader));\n  }\n else   if (\"assignable\".equals(filterType)) {\n    return new AssignableTypeFilter(ClassUtils.forName(expression,classLoader));\n  }\n else   if (\"aspectj\".equals(filterType)) {\n    return new AspectJTypeFilter(expression,classLoader);\n  }\n else   if (\"regex\".equals(filterType)) {\n    return new RegexPatternTypeFilter(Pattern.compile(expression));\n  }\n else   if (\"custom\".equals(filterType)) {\n    Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n    if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n      throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n    }\n    return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1388,
        "startLineNumber" : 230,
        "startColumnNumber" : 1,
        "endLineNumber" : 260,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected TypeFilter createTypeFilter(Element element,@Nullable ClassLoader classLoader,ParserContext parserContext) throws ClassNotFoundException {\n  String filterType=element.getAttribute(FILTER_TYPE_ATTRIBUTE);\n  String expression=element.getAttribute(FILTER_EXPRESSION_ATTRIBUTE);\n  expression=parserContext.getReaderContext().getEnvironment().resolvePlaceholders(expression);\n  if (\"annotation\".equals(filterType)) {\n    return new AnnotationTypeFilter((Class<Annotation>)ClassUtils.forName(expression,classLoader));\n  }\n else   if (\"assignable\".equals(filterType)) {\n    return new AssignableTypeFilter(ClassUtils.forName(expression,classLoader));\n  }\n else   if (\"aspectj\".equals(filterType)) {\n    return new AspectJTypeFilter(expression,classLoader);\n  }\n else   if (\"regex\".equals(filterType)) {\n    return new RegexPatternTypeFilter(Pattern.compile(expression));\n  }\n else   if (\"custom\".equals(filterType)) {\n    Class<?> filterClass=ClassUtils.forName(expression,classLoader);\n    if (!TypeFilter.class.isAssignableFrom(filterClass)) {\n      throw new IllegalArgumentException(\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression);\n    }\n    return (TypeFilter)BeanUtils.instantiateClass(filterClass);\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported filter type: \" + filterType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 253,
        "endColumnNumber" : 86
      },
      "nodeContext" : "\"Class is not assignable to [\" + TypeFilter.class.getName() + \"]: \"+ expression",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 253,
    "startColumnNumber" : 39,
    "endLineNumber" : 253,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}