{
  "id" : 387,
  "expression" : "callMth.getArgumentsTypes()",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "callMth.getArgumentsTypes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 75,
      "startColumnNumber" : 26,
      "endLineNumber" : 75,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 53
      },
      "nodeContext" : "args=callMth.getArgumentsTypes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 75,
        "startColumnNumber" : 5,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "List<ArgType> args=callMth.getArgumentsTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 74,
        "startColumnNumber" : 47,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<ArgType> args=callMth.getArgumentsTypes();\n  int j=inv.getArgsCount() - 1;\n  for (int i=args.size() - 1; i >= 0; i--) {\n    ArgType argType=args.get(i);\n    InsnArg insnArg=inv.getArg(j--);\n    if (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\n      insnArg.setType(argType);\n      change=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 78,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (node != null && node.isArgsOverload()) {\n  List<ArgType> args=callMth.getArgumentsTypes();\n  int j=inv.getArgsCount() - 1;\n  for (int i=args.size() - 1; i >= 0; i--) {\n    ArgType argType=args.get(i);\n    InsnArg insnArg=inv.getArg(j--);\n    if (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\n      insnArg.setType(argType);\n      change=true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 609,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean change=false;\n  InvokeNode inv=(InvokeNode)insn;\n  MethodInfo callMth=inv.getCallMth();\n  MethodNode node=mth.dex().resolveMethod(callMth);\n  if (node != null && node.isArgsOverload()) {\n    List<ArgType> args=callMth.getArgumentsTypes();\n    int j=inv.getArgsCount() - 1;\n    for (int i=args.size() - 1; i >= 0; i--) {\n      ArgType argType=args.get(i);\n      InsnArg insnArg=inv.getArg(j--);\n      if (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\n        insnArg.setType(argType);\n        change=true;\n      }\n    }\n  }\n  return change;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2894,
        "startLineNumber" : 23,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (insn.getType()) {\ncase CONST:  RegisterArg res=insn.getResult();\nLiteralArg litArg=(LiteralArg)insn.getArg(0);\nif (res.getType().isObject()) {\nlong lit=litArg.getLiteral();\nif (lit != 0) {\n  ArgType type=lit == 1 ? ArgType.BOOLEAN : ArgType.INT;\n  litArg.setType(type);\n  res.getSVar().setType(type);\n  return true;\n}\n}\nreturn litArg.merge(dex,res);\ncase MOVE:{\nboolean change=false;\nif (insn.getResult().merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getResult())) {\nchange=true;\n}\nreturn change;\n}\ncase AGET:return fixArrayTypes(dex,insn.getArg(0),insn.getResult());\ncase APUT:return fixArrayTypes(dex,insn.getArg(0),insn.getArg(2));\ncase IF:{\nboolean change=false;\nif (insn.getArg(1).merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getArg(1))) {\nchange=true;\n}\nreturn change;\n}\ncase INVOKE:{\nboolean change=false;\nInvokeNode inv=(InvokeNode)insn;\nMethodInfo callMth=inv.getCallMth();\nMethodNode node=mth.dex().resolveMethod(callMth);\nif (node != null && node.isArgsOverload()) {\nList<ArgType> args=callMth.getArgumentsTypes();\nint j=inv.getArgsCount() - 1;\nfor (int i=args.size() - 1; i >= 0; i--) {\nArgType argType=args.get(i);\nInsnArg insnArg=inv.getArg(j--);\nif (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\ninsnArg.setType(argType);\nchange=true;\n}\n}\n}\nreturn change;\n}\ncase CHECK_CAST:{\nArgType castType=(ArgType)((IndexInsnNode)insn).getIndex();\nRegisterArg result=insn.getResult();\nArgType resultType=result.getType();\nboolean skip=castType.isObject() && resultType.isObject() && castType.getObject().equals(resultType.getObject());\nif (!skip) {\nresult.getSVar().setType(castType);\n}\nreturn true;\n}\ncase PHI:case MERGE:{\nArgType type=insn.getResult().getType();\nif (!type.isTypeKnown()) {\nfor (InsnArg arg : insn.getArguments()) {\nif (arg.getType().isTypeKnown()) {\ntype=arg.getType();\nbreak;\n}\n}\n}\nboolean changed=false;\nif (updateType(insn.getResult(),type)) {\nchanged=true;\n}\nfor (int i=0; i < insn.getArgsCount(); i++) {\nRegisterArg arg=(RegisterArg)insn.getArg(i);\nif (updateType(arg,type)) {\nchanged=true;\n}\n}\nreturn changed;\n}\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 484,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2944,
        "startLineNumber" : 21,
        "startColumnNumber" : 62,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DexNode dex=mth.dex();\nswitch (insn.getType()) {\ncase CONST:    RegisterArg res=insn.getResult();\n  LiteralArg litArg=(LiteralArg)insn.getArg(0);\nif (res.getType().isObject()) {\n  long lit=litArg.getLiteral();\n  if (lit != 0) {\n    ArgType type=lit == 1 ? ArgType.BOOLEAN : ArgType.INT;\n    litArg.setType(type);\n    res.getSVar().setType(type);\n    return true;\n  }\n}\nreturn litArg.merge(dex,res);\ncase MOVE:{\nboolean change=false;\nif (insn.getResult().merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getResult())) {\nchange=true;\n}\nreturn change;\n}\ncase AGET:return fixArrayTypes(dex,insn.getArg(0),insn.getResult());\ncase APUT:return fixArrayTypes(dex,insn.getArg(0),insn.getArg(2));\ncase IF:{\nboolean change=false;\nif (insn.getArg(1).merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getArg(1))) {\nchange=true;\n}\nreturn change;\n}\ncase INVOKE:{\nboolean change=false;\nInvokeNode inv=(InvokeNode)insn;\nMethodInfo callMth=inv.getCallMth();\nMethodNode node=mth.dex().resolveMethod(callMth);\nif (node != null && node.isArgsOverload()) {\nList<ArgType> args=callMth.getArgumentsTypes();\nint j=inv.getArgsCount() - 1;\nfor (int i=args.size() - 1; i >= 0; i--) {\nArgType argType=args.get(i);\nInsnArg insnArg=inv.getArg(j--);\nif (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\ninsnArg.setType(argType);\nchange=true;\n}\n}\n}\nreturn change;\n}\ncase CHECK_CAST:{\nArgType castType=(ArgType)((IndexInsnNode)insn).getIndex();\nRegisterArg result=insn.getResult();\nArgType resultType=result.getType();\nboolean skip=castType.isObject() && resultType.isObject() && castType.getObject().equals(resultType.getObject());\nif (!skip) {\nresult.getSVar().setType(castType);\n}\nreturn true;\n}\ncase PHI:case MERGE:{\nArgType type=insn.getResult().getType();\nif (!type.isTypeKnown()) {\nfor (InsnArg arg : insn.getArguments()) {\nif (arg.getType().isTypeKnown()) {\ntype=arg.getType();\nbreak;\n}\n}\n}\nboolean changed=false;\nif (updateType(insn.getResult(),type)) {\nchanged=true;\n}\nfor (int i=0; i < insn.getArgsCount(); i++) {\nRegisterArg arg=(RegisterArg)insn.getArg(i);\nif (updateType(arg,type)) {\nchanged=true;\n}\n}\nreturn changed;\n}\ndefault:break;\n}\nreturn false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3005,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static boolean process(MethodNode mth,InsnNode insn){\n  DexNode dex=mth.dex();\nswitch (insn.getType()) {\ncase CONST:    RegisterArg res=insn.getResult();\n  LiteralArg litArg=(LiteralArg)insn.getArg(0);\nif (res.getType().isObject()) {\n  long lit=litArg.getLiteral();\n  if (lit != 0) {\n    ArgType type=lit == 1 ? ArgType.BOOLEAN : ArgType.INT;\n    litArg.setType(type);\n    res.getSVar().setType(type);\n    return true;\n  }\n}\nreturn litArg.merge(dex,res);\ncase MOVE:{\nboolean change=false;\nif (insn.getResult().merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getResult())) {\nchange=true;\n}\nreturn change;\n}\ncase AGET:return fixArrayTypes(dex,insn.getArg(0),insn.getResult());\ncase APUT:return fixArrayTypes(dex,insn.getArg(0),insn.getArg(2));\ncase IF:{\nboolean change=false;\nif (insn.getArg(1).merge(dex,insn.getArg(0))) {\nchange=true;\n}\nif (insn.getArg(0).merge(dex,insn.getArg(1))) {\nchange=true;\n}\nreturn change;\n}\ncase INVOKE:{\nboolean change=false;\nInvokeNode inv=(InvokeNode)insn;\nMethodInfo callMth=inv.getCallMth();\nMethodNode node=mth.dex().resolveMethod(callMth);\nif (node != null && node.isArgsOverload()) {\nList<ArgType> args=callMth.getArgumentsTypes();\nint j=inv.getArgsCount() - 1;\nfor (int i=args.size() - 1; i >= 0; i--) {\nArgType argType=args.get(i);\nInsnArg insnArg=inv.getArg(j--);\nif (insnArg.isRegister() && !argType.equals(insnArg.getType())) {\ninsnArg.setType(argType);\nchange=true;\n}\n}\n}\nreturn change;\n}\ncase CHECK_CAST:{\nArgType castType=(ArgType)((IndexInsnNode)insn).getIndex();\nRegisterArg result=insn.getResult();\nArgType resultType=result.getType();\nboolean skip=castType.isObject() && resultType.isObject() && castType.getObject().equals(resultType.getObject());\nif (!skip) {\nresult.getSVar().setType(castType);\n}\nreturn true;\n}\ncase PHI:case MERGE:{\nArgType type=insn.getResult().getType();\nif (!type.isTypeKnown()) {\nfor (InsnArg arg : insn.getArguments()) {\nif (arg.getType().isTypeKnown()) {\ntype=arg.getType();\nbreak;\n}\n}\n}\nboolean changed=false;\nif (updateType(insn.getResult(),type)) {\nchanged=true;\n}\nfor (int i=0; i < insn.getArgsCount(); i++) {\nRegisterArg arg=(RegisterArg)insn.getArg(i);\nif (updateType(arg,type)) {\nchanged=true;\n}\n}\nreturn changed;\n}\ndefault:break;\n}\nreturn false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 508,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 75,
        "startColumnNumber" : 5,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "List<ArgType> args=callMth.getArgumentsTypes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<jadx.core.dex.instructions.args.ArgType>"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 75,
    "startColumnNumber" : 26,
    "endLineNumber" : 75,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}