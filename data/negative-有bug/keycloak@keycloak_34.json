{
  "id" : 34,
  "expression" : "policyStore",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/client/ClientPolicyProviderFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "policyStore",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 115,
      "startColumnNumber" : 20,
      "endLineNumber" : 115,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 115,
        "endColumnNumber" : 67
      },
      "nodeContext" : "policyStore.findByType(resourceServer,getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 22
      },
      "nodeContext" : "policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n  List<String> clients=new ArrayList<>();\n  for (  String clientId : getClients(policy)) {\n    if (!clientId.equals(removedClient.getId())) {\n      clients.add(clientId);\n    }\n  }\n  try {\n    if (clients.isEmpty()) {\n      policyStore.delete(policy.getId());\n    }\n else {\n      policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 88,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 952,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 23
      },
      "nodeContext" : "policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n  List<String> clients=new ArrayList<>();\n  for (  String clientId : getClients(policy)) {\n    if (!clientId.equals(removedClient.getId())) {\n      clients.add(clientId);\n    }\n  }\n  try {\n    if (clients.isEmpty()) {\n      policyStore.delete(policy.getId());\n    }\n else {\n      policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 114,
        "startColumnNumber" : 44,
        "endLineNumber" : 134,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n    List<String> clients=new ArrayList<>();\n    for (    String clientId : getClients(policy)) {\n      if (!clientId.equals(removedClient.getId())) {\n        clients.add(clientId);\n      }\n    }\n    try {\n      if (clients.isEmpty()) {\n        policyStore.delete(policy.getId());\n      }\n else {\n        policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n      }\n    }\n catch (    IOException e) {\n      throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1020,
        "startLineNumber" : 114,
        "startColumnNumber" : 16,
        "endLineNumber" : 134,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (resourceServer != null) {\n  policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n    List<String> clients=new ArrayList<>();\n    for (    String clientId : getClients(policy)) {\n      if (!clientId.equals(removedClient.getId())) {\n        clients.add(clientId);\n      }\n    }\n    try {\n      if (clients.isEmpty()) {\n        policyStore.delete(policy.getId());\n      }\n else {\n        policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n      }\n    }\n catch (    IOException e) {\n      throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 94,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1686,
        "startLineNumber" : 105,
        "startColumnNumber" : 53,
        "endLineNumber" : 135,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  KeycloakSession keycloakSession=((ClientRemovedEvent)event).getKeycloakSession();\n  AuthorizationProvider provider=keycloakSession.getProvider(AuthorizationProvider.class);\n  StoreFactory storeFactory=provider.getStoreFactory();\n  PolicyStore policyStore=storeFactory.getPolicyStore();\n  ClientModel removedClient=((ClientRemovedEvent)event).getClient();\n  ResourceServerStore resourceServerStore=storeFactory.getResourceServerStore();\n  ResourceServer resourceServer=resourceServerStore.findByClient(removedClient);\n  if (resourceServer != null) {\n    policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n      List<String> clients=new ArrayList<>();\n      for (      String clientId : getClients(policy)) {\n        if (!clientId.equals(removedClient.getId())) {\n          clients.add(clientId);\n        }\n      }\n      try {\n        if (clients.isEmpty()) {\n          policyStore.delete(policy.getId());\n        }\n else {\n          policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n        }\n      }\n catch (      IOException e) {\n        throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1727,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (event instanceof ClientRemovedEvent) {\n  KeycloakSession keycloakSession=((ClientRemovedEvent)event).getKeycloakSession();\n  AuthorizationProvider provider=keycloakSession.getProvider(AuthorizationProvider.class);\n  StoreFactory storeFactory=provider.getStoreFactory();\n  PolicyStore policyStore=storeFactory.getPolicyStore();\n  ClientModel removedClient=((ClientRemovedEvent)event).getClient();\n  ResourceServerStore resourceServerStore=storeFactory.getResourceServerStore();\n  ResourceServer resourceServer=resourceServerStore.findByClient(removedClient);\n  if (resourceServer != null) {\n    policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n      List<String> clients=new ArrayList<>();\n      for (      String clientId : getClients(policy)) {\n        if (!clientId.equals(removedClient.getId())) {\n          clients.add(clientId);\n        }\n      }\n      try {\n        if (clients.isEmpty()) {\n          policyStore.delete(policy.getId());\n        }\n else {\n          policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n        }\n      }\n catch (      IOException e) {\n        throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n      }\n    }\n);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 104,
        "startColumnNumber" : 34,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (event instanceof ClientRemovedEvent) {\n    KeycloakSession keycloakSession=((ClientRemovedEvent)event).getKeycloakSession();\n    AuthorizationProvider provider=keycloakSession.getProvider(AuthorizationProvider.class);\n    StoreFactory storeFactory=provider.getStoreFactory();\n    PolicyStore policyStore=storeFactory.getPolicyStore();\n    ClientModel removedClient=((ClientRemovedEvent)event).getClient();\n    ResourceServerStore resourceServerStore=storeFactory.getResourceServerStore();\n    ResourceServer resourceServer=resourceServerStore.findByClient(removedClient);\n    if (resourceServer != null) {\n      policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n        List<String> clients=new ArrayList<>();\n        for (        String clientId : getClients(policy)) {\n          if (!clientId.equals(removedClient.getId())) {\n            clients.add(clientId);\n          }\n        }\n        try {\n          if (clients.isEmpty()) {\n            policyStore.delete(policy.getId());\n          }\n else {\n            policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n          }\n        }\n catch (        IOException e) {\n          throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n        }\n      }\n);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1760,
        "startLineNumber" : 104,
        "startColumnNumber" : 25,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "event -> {\n  if (event instanceof ClientRemovedEvent) {\n    KeycloakSession keycloakSession=((ClientRemovedEvent)event).getKeycloakSession();\n    AuthorizationProvider provider=keycloakSession.getProvider(AuthorizationProvider.class);\n    StoreFactory storeFactory=provider.getStoreFactory();\n    PolicyStore policyStore=storeFactory.getPolicyStore();\n    ClientModel removedClient=((ClientRemovedEvent)event).getClient();\n    ResourceServerStore resourceServerStore=storeFactory.getResourceServerStore();\n    ResourceServer resourceServer=resourceServerStore.findByClient(removedClient);\n    if (resourceServer != null) {\n      policyStore.findByType(resourceServer,getId()).forEach(policy -> {\n        List<String> clients=new ArrayList<>();\n        for (        String clientId : getClients(policy)) {\n          if (!clientId.equals(removedClient.getId())) {\n            clients.add(clientId);\n          }\n        }\n        try {\n          if (clients.isEmpty()) {\n            policyStore.delete(policy.getId());\n          }\n else {\n            policy.putConfig(\"clients\",JsonSerialization.writeValueAsString(clients));\n          }\n        }\n catch (        IOException e) {\n          throw new RuntimeException(\"Error while synchronizing clients with policy [\" + policy.getName() + \"].\",e);\n        }\n      }\n);\n    }\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 172,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 115,
        "endColumnNumber" : 67
      },
      "nodeContext" : "policyStore.findByType(resourceServer,getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.authorization.store.PolicyStore"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 115,
    "startColumnNumber" : 20,
    "endLineNumber" : 115,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}