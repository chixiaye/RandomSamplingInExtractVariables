{
  "id" : 291,
  "expression" : "new int[width]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/javase/src/main/java/com/google/zxing/client/j2se/DecodeWorker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new int[width]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 213,
      "startColumnNumber" : 17,
      "endLineNumber" : 213,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 213,
        "startColumnNumber" : 10,
        "endLineNumber" : 213,
        "endColumnNumber" : 31
      },
      "nodeContext" : "argb=new int[width]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 32
      },
      "nodeContext" : "int[] argb=new int[width];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 206,
        "startColumnNumber" : 107,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=bitmap.getWidth();\n  int height=bitmap.getHeight();\n  int stride=width * 3;\n  int[] pixels=new int[stride * height];\n  int[] argb=new int[width];\n  for (int y=0; y < height; y++) {\n    image.getRGB(0,y,width,1,argb,0,width);\n    System.arraycopy(argb,0,pixels,y * stride,width);\n  }\n  BitArray row=new BitArray(width);\n  for (int y=0; y < height; y++) {\n    try {\n      row=bitmap.getBlackRow(y,row);\n    }\n catch (    NotFoundException nfe) {\n      int offset=y * stride + width;\n      Arrays.fill(pixels,offset,offset + width,RED);\n      continue;\n    }\n    int offset=y * stride + width;\n    for (int x=0; x < width; x++) {\n      pixels[offset + x]=row.get(x) ? BLACK : WHITE;\n    }\n  }\n  try {\n    for (int y=0; y < height; y++) {\n      BitMatrix matrix=bitmap.getBlackMatrix();\n      int offset=y * stride + width * 2;\n      for (int x=0; x < width; x++) {\n        pixels[offset + x]=matrix.get(x,y) ? BLACK : WHITE;\n      }\n    }\n  }\n catch (  NotFoundException ignored) {\n  }\n  writeResultImage(stride,height,pixels,uri,\".mono.png\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Writes out a single PNG which is three times the width of the input image, containing from left to right: the original image, the row sampling monochrome version, and the 2D sampling monochrome version.\n */\nprivate static void dumpBlackPoint(URI uri,BufferedImage image,BinaryBitmap bitmap) throws IOException {\n  int width=bitmap.getWidth();\n  int height=bitmap.getHeight();\n  int stride=width * 3;\n  int[] pixels=new int[stride * height];\n  int[] argb=new int[width];\n  for (int y=0; y < height; y++) {\n    image.getRGB(0,y,width,1,argb,0,width);\n    System.arraycopy(argb,0,pixels,y * stride,width);\n  }\n  BitArray row=new BitArray(width);\n  for (int y=0; y < height; y++) {\n    try {\n      row=bitmap.getBlackRow(y,row);\n    }\n catch (    NotFoundException nfe) {\n      int offset=y * stride + width;\n      Arrays.fill(pixels,offset,offset + width,RED);\n      continue;\n    }\n    int offset=y * stride + width;\n    for (int x=0; x < width; x++) {\n      pixels[offset + x]=row.get(x) ? BLACK : WHITE;\n    }\n  }\n  try {\n    for (int y=0; y < height; y++) {\n      BitMatrix matrix=bitmap.getBlackMatrix();\n      int offset=y * stride + width * 2;\n      for (int x=0; x < width; x++) {\n        pixels[offset + x]=matrix.get(x,y) ? BLACK : WHITE;\n      }\n    }\n  }\n catch (  NotFoundException ignored) {\n  }\n  writeResultImage(stride,height,pixels,uri,\".mono.png\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 266,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 32
      },
      "nodeContext" : "int[] argb=new int[width];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 213,
    "startColumnNumber" : 17,
    "endLineNumber" : 213,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}