{
  "id" : 316,
  "expression" : "memoryCacheKey",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/library/src/com/nostra13/universalimageloader/core/ImageLoader.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "memoryCacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 231,
      "startColumnNumber" : 43,
      "endLineNumber" : 231,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 58
      },
      "nodeContext" : "engine.prepareDisplayTaskFor(imageAware,memoryCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 59
      },
      "nodeContext" : "engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 205,
        "startColumnNumber" : 81,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4091,
        "startLineNumber" : 186,
        "startColumnNumber" : 1,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 231,
        "startColumnNumber" : 2,
        "endLineNumber" : 231,
        "endColumnNumber" : 59
      },
      "nodeContext" : "engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "memoryCacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 235,
      "startColumnNumber" : 45,
      "endLineNumber" : 235,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 235,
        "startColumnNumber" : 15,
        "endLineNumber" : 235,
        "endColumnNumber" : 60
      },
      "nodeContext" : "configuration.memoryCache.get(memoryCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 235,
        "startColumnNumber" : 9,
        "endLineNumber" : 235,
        "endColumnNumber" : 60
      },
      "nodeContext" : "bmp=configuration.memoryCache.get(memoryCacheKey)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 235,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 205,
        "startColumnNumber" : 81,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4091,
        "startLineNumber" : 186,
        "startColumnNumber" : 1,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 235,
        "startColumnNumber" : 2,
        "endLineNumber" : 235,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "memoryCacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 237,
      "startColumnNumber" : 70,
      "endLineNumber" : 237,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 237,
        "startColumnNumber" : 32,
        "endLineNumber" : 237,
        "endColumnNumber" : 85
      },
      "nodeContext" : "L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 237,
        "startColumnNumber" : 32,
        "endLineNumber" : 237,
        "endColumnNumber" : 86
      },
      "nodeContext" : "L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 237,
        "startColumnNumber" : 3,
        "endLineNumber" : 237,
        "endColumnNumber" : 86
      },
      "nodeContext" : "if (configuration.writeLogs) L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 723,
        "startLineNumber" : 236,
        "startColumnNumber" : 40,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (configuration.writeLogs)   L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n  if (options.shouldPostProcess()) {\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n else {\n    options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.writeLogs)   L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n  if (options.shouldPostProcess()) {\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n else {\n    options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n  }\n}\n else {\n  if (options.shouldShowImageOnLoading()) {\n    imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n  }\n else   if (options.isResetViewBeforeLoading()) {\n    imageAware.setImageDrawable(null);\n  }\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 167,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 205,
        "startColumnNumber" : 81,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4091,
        "startLineNumber" : 186,
        "startColumnNumber" : 1,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 237,
        "startColumnNumber" : 3,
        "endLineNumber" : 237,
        "endColumnNumber" : 86
      },
      "nodeContext" : "if (configuration.writeLogs) L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "memoryCacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 240,
      "startColumnNumber" : 90,
      "endLineNumber" : 240,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 240,
        "startColumnNumber" : 40,
        "endLineNumber" : 241,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 240,
        "startColumnNumber" : 21,
        "endLineNumber" : 241,
        "endColumnNumber" : 69
      },
      "nodeContext" : "imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 239,
        "startColumnNumber" : 36,
        "endLineNumber" : 249,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 626,
        "startLineNumber" : 239,
        "startColumnNumber" : 3,
        "endLineNumber" : 252,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (options.shouldPostProcess()) {\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n else {\n  options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n  listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 723,
        "startLineNumber" : 236,
        "startColumnNumber" : 40,
        "endLineNumber" : 253,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (configuration.writeLogs)   L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n  if (options.shouldPostProcess()) {\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n else {\n    options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.writeLogs)   L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n  if (options.shouldPostProcess()) {\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n else {\n    options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n  }\n}\n else {\n  if (options.shouldShowImageOnLoading()) {\n    imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n  }\n else   if (options.isResetViewBeforeLoading()) {\n    imageAware.setImageDrawable(null);\n  }\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 167,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 205,
        "startColumnNumber" : 81,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4091,
        "startLineNumber" : 186,
        "startColumnNumber" : 1,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 240,
        "startColumnNumber" : 40,
        "endLineNumber" : 241,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "memoryCacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 260,
      "startColumnNumber" : 89,
      "endLineNumber" : 260,
      "endColumnNumber" : 103
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 260,
        "startColumnNumber" : 39,
        "endLineNumber" : 261,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 260,
        "startColumnNumber" : 20,
        "endLineNumber" : 261,
        "endColumnNumber" : 68
      },
      "nodeContext" : "imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 260,
        "startColumnNumber" : 3,
        "endLineNumber" : 261,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 253,
        "startColumnNumber" : 9,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (options.shouldShowImageOnLoading()) {\n    imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n  }\n else   if (options.isResetViewBeforeLoading()) {\n    imageAware.setImageDrawable(null);\n  }\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (bmp != null && !bmp.isRecycled()) {\n  if (configuration.writeLogs)   L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n  if (options.shouldPostProcess()) {\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n else {\n    options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n  }\n}\n else {\n  if (options.shouldShowImageOnLoading()) {\n    imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n  }\n else   if (options.isResetViewBeforeLoading()) {\n    imageAware.setImageDrawable(null);\n  }\n  ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n  LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n  if (options.isSyncLoading()) {\n    displayTask.run();\n  }\n else {\n    engine.submit(displayTask);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 167,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 205,
        "startColumnNumber" : 81,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4091,
        "startLineNumber" : 186,
        "startColumnNumber" : 1,
        "endLineNumber" : 270,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=emptyListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  ImageSize targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    if (configuration.writeLogs)     L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 323,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 260,
        "startColumnNumber" : 39,
        "endLineNumber" : 261,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 231,
    "startColumnNumber" : 43,
    "endLineNumber" : 231,
    "endColumnNumber" : 57
  }, {
    "charLength" : 14,
    "startLineNumber" : 235,
    "startColumnNumber" : 45,
    "endLineNumber" : 235,
    "endColumnNumber" : 59
  }, {
    "charLength" : 14,
    "startLineNumber" : 237,
    "startColumnNumber" : 70,
    "endLineNumber" : 237,
    "endColumnNumber" : 84
  }, {
    "charLength" : 14,
    "startLineNumber" : 240,
    "startColumnNumber" : 90,
    "endLineNumber" : 240,
    "endColumnNumber" : 104
  }, {
    "charLength" : 14,
    "startLineNumber" : 260,
    "startColumnNumber" : 89,
    "endLineNumber" : 260,
    "endColumnNumber" : 103
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}