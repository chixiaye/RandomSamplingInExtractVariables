{
  "id" : 321,
  "expression" : "edges",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "edges",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 103,
      "startColumnNumber" : 12,
      "endLineNumber" : 103,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 25
      },
      "nodeContext" : "edges != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edges != null) {\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      visited[edge.to]=true;\n      queue.enqueue(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 497,
        "startLineNumber" : 98,
        "startColumnNumber" : 13,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  count++;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        queue.enqueue(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 90,
        "startColumnNumber" : 6,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (node == DEPTH_TOKEN) {\n  if (queue.isEmpty())   break;\n  queue.enqueue(DEPTH_TOKEN);\n}\n else {\n  count++;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        queue.enqueue(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 82,
        "startColumnNumber" : 17,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Integer node=queue.dequeue();\n  if (node == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.enqueue(DEPTH_TOKEN);\n  }\n else {\n    count++;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          visited[edge.to]=true;\n          queue.enqueue(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 976,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  Integer node=queue.dequeue();\n  if (node == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.enqueue(DEPTH_TOKEN);\n  }\n else {\n    count++;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          visited[edge.to]=true;\n          queue.enqueue(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 66,
        "startColumnNumber" : 67,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntQueue queue=new IntQueue(n + 1);\n  int DEPTH_TOKEN=-1;\n  queue.enqueue(start);\n  queue.enqueue(DEPTH_TOKEN);\n  visited[start]=true;\n  while (true) {\n    Integer node=queue.dequeue();\n    if (node == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.enqueue(DEPTH_TOKEN);\n    }\n else {\n      count++;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            visited[edge.to]=true;\n            queue.enqueue(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static int bfs(Map<Integer,List<Edge>> graph,int start,int n){\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntQueue queue=new IntQueue(n + 1);\n  int DEPTH_TOKEN=-1;\n  queue.enqueue(start);\n  queue.enqueue(DEPTH_TOKEN);\n  visited[start]=true;\n  while (true) {\n    Integer node=queue.dequeue();\n    if (node == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.enqueue(DEPTH_TOKEN);\n    }\n else {\n      count++;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            visited[edge.to]=true;\n            queue.enqueue(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 25
      },
      "nodeContext" : "edges != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterativeFastQueue.Edge>"
  }, {
    "nodeContext" : "edges",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 108,
      "startColumnNumber" : 27,
      "endLineNumber" : 108,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 113,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Edge edge : edges) {\n  if (!visited[edge.to]) {\n    visited[edge.to]=true;\n    queue.enqueue(edge.to);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 103,
        "startColumnNumber" : 27,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      visited[edge.to]=true;\n      queue.enqueue(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edges != null) {\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      visited[edge.to]=true;\n      queue.enqueue(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 497,
        "startLineNumber" : 98,
        "startColumnNumber" : 13,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  count++;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        queue.enqueue(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 90,
        "startColumnNumber" : 6,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (node == DEPTH_TOKEN) {\n  if (queue.isEmpty())   break;\n  queue.enqueue(DEPTH_TOKEN);\n}\n else {\n  count++;\n  List<Edge> edges=graph.get(node);\n  if (edges != null) {\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        queue.enqueue(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 82,
        "startColumnNumber" : 17,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Integer node=queue.dequeue();\n  if (node == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.enqueue(DEPTH_TOKEN);\n  }\n else {\n    count++;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          visited[edge.to]=true;\n          queue.enqueue(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 976,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  Integer node=queue.dequeue();\n  if (node == DEPTH_TOKEN) {\n    if (queue.isEmpty())     break;\n    queue.enqueue(DEPTH_TOKEN);\n  }\n else {\n    count++;\n    List<Edge> edges=graph.get(node);\n    if (edges != null) {\n      for (      Edge edge : edges) {\n        if (!visited[edge.to]) {\n          visited[edge.to]=true;\n          queue.enqueue(edge.to);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 77,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 66,
        "startColumnNumber" : 67,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntQueue queue=new IntQueue(n + 1);\n  int DEPTH_TOKEN=-1;\n  queue.enqueue(start);\n  queue.enqueue(DEPTH_TOKEN);\n  visited[start]=true;\n  while (true) {\n    Integer node=queue.dequeue();\n    if (node == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.enqueue(DEPTH_TOKEN);\n    }\n else {\n      count++;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            visited[edge.to]=true;\n            queue.enqueue(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1508,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static int bfs(Map<Integer,List<Edge>> graph,int start,int n){\n  int count=0;\n  boolean[] visited=new boolean[n];\n  IntQueue queue=new IntQueue(n + 1);\n  int DEPTH_TOKEN=-1;\n  queue.enqueue(start);\n  queue.enqueue(DEPTH_TOKEN);\n  visited[start]=true;\n  while (true) {\n    Integer node=queue.dequeue();\n    if (node == DEPTH_TOKEN) {\n      if (queue.isEmpty())       break;\n      queue.enqueue(DEPTH_TOKEN);\n    }\n else {\n      count++;\n      List<Edge> edges=graph.get(node);\n      if (edges != null) {\n        for (        Edge edge : edges) {\n          if (!visited[edge.to]) {\n            visited[edge.to]=true;\n            queue.enqueue(edge.to);\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 108,
        "startColumnNumber" : 10,
        "endLineNumber" : 113,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Edge edge : edges) {\n  if (!visited[edge.to]) {\n    visited[edge.to]=true;\n    queue.enqueue(edge.to);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterativeFastQueue.Edge>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 103,
    "startColumnNumber" : 12,
    "endLineNumber" : 103,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 108,
    "startColumnNumber" : 27,
    "endLineNumber" : 108,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}