{
  "id" : 426,
  "expression" : "archiveFile.getName()",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/cc/arduino/utils/ArchiveExtractor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "archiveFile.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 93,
      "startColumnNumber" : 10,
      "endLineNumber" : 93,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 93,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 51
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar.bz2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new BZip2CompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6621,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 771,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6693,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n  finally {\n  if (in != null) {\n    in.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 782,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7103,
        "startLineNumber" : 83,
        "startColumnNumber" : 132,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 824,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7233,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void extract(File archiveFile,File destFolder,int stripPath,boolean overwrite) throws IOException, InterruptedException {\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 846,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 93,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 51
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar.bz2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "archiveFile.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 97,
      "startColumnNumber" : 17,
      "endLineNumber" : 97,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 54
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"zip\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new BZip2CompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6621,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 771,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6693,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n  finally {\n  if (in != null) {\n    in.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 782,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7103,
        "startLineNumber" : 83,
        "startColumnNumber" : 132,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 824,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7233,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void extract(File archiveFile,File destFolder,int stripPath,boolean overwrite) throws IOException, InterruptedException {\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 846,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 54
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"zip\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "archiveFile.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 100,
      "startColumnNumber" : 17,
      "endLineNumber" : 100,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 100,
        "startColumnNumber" : 17,
        "endLineNumber" : 100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar.gz\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 100,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new BZip2CompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6621,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 771,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6693,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n  finally {\n  if (in != null) {\n    in.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 782,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7103,
        "startLineNumber" : 83,
        "startColumnNumber" : 132,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 824,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7233,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void extract(File archiveFile,File destFolder,int stripPath,boolean overwrite) throws IOException, InterruptedException {\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 846,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 100,
        "startColumnNumber" : 17,
        "endLineNumber" : 100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar.gz\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "archiveFile.getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 104,
      "startColumnNumber" : 17,
      "endLineNumber" : 104,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 104,
        "startColumnNumber" : 17,
        "endLineNumber" : 104,
        "endColumnNumber" : 54
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 104,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 100,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new BZip2CompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"zip\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new ZipArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar.gz\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  fin=new GzipCompressorInputStream(fin);\n  in=new TarArchiveInputStream(fin);\n}\n else if (archiveFile.getName().endsWith(\"tar\")) {\n  InputStream fin=new FileInputStream(archiveFile);\n  in=new TarArchiveInputStream(fin);\n}\n else {\n  throw new IOException(\"Archive format not supported.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6621,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 771,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6693,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new BZip2CompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"zip\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new ZipArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar.gz\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    fin=new GzipCompressorInputStream(fin);\n    in=new TarArchiveInputStream(fin);\n  }\n else   if (archiveFile.getName().endsWith(\"tar\")) {\n    InputStream fin=new FileInputStream(archiveFile);\n    in=new TarArchiveInputStream(fin);\n  }\n else {\n    throw new IOException(\"Archive format not supported.\");\n  }\n  String pathPrefix=\"\";\n  Map<File,File> hardLinks=new HashMap<File,File>();\n  Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n  Map<File,String> symLinks=new HashMap<File,String>();\n  Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n  while (true) {\n    ArchiveEntry entry=in.getNextEntry();\n    if (entry == null) {\n      break;\n    }\n    long size=entry.getSize();\n    String name=entry.getName();\n    boolean isDirectory=entry.isDirectory();\n    boolean isLink=false;\n    boolean isSymLink=false;\n    String linkName=null;\n    Integer mode=null;\n    long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n      int slash=name.lastIndexOf('/');\n      if (slash == -1) {\n        if (name.startsWith(\"._\")) {\n          continue;\n        }\n      }\n else {\n        if (name.substring(slash + 1).startsWith(\"._\")) {\n          continue;\n        }\n      }\n    }\n    if (name.contains(\"pax_global_header\")) {\n      continue;\n    }\n    if (entry instanceof TarArchiveEntry) {\n      TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n      mode=tarEntry.getMode();\n      isLink=tarEntry.isLink();\n      isSymLink=tarEntry.isSymbolicLink();\n      linkName=tarEntry.getLinkName();\n    }\n    if (stripPath > 0 && pathPrefix.isEmpty()) {\n      int slash=0;\n      while (stripPath > 0) {\n        slash=name.indexOf(\"/\",slash);\n        if (slash == -1) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder\");\n        }\n        slash++;\n        stripPath--;\n      }\n      pathPrefix=name.substring(0,slash);\n    }\n    if (!name.startsWith(pathPrefix)) {\n      throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n    }\n    name=name.substring(pathPrefix.length());\n    if (name.isEmpty()) {\n      continue;\n    }\n    File outputFile=new File(destFolder,name);\n    File outputLinkedFile=null;\n    if (isLink) {\n      if (!linkName.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n      }\n      linkName=linkName.substring(pathPrefix.length());\n      outputLinkedFile=new File(destFolder,linkName);\n    }\n    if (isSymLink) {\n      outputLinkedFile=new File(linkName);\n      if (outputLinkedFile.isAbsolute()) {\n        System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n        System.err.println();\n      }\n    }\n    if (isDirectory) {\n      if (outputFile.isFile() && !overwrite) {\n        throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n      }\n    }\n else {\n      if (outputFile.exists() && !overwrite) {\n        throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n      }\n    }\n    if (isDirectory) {\n      if (!outputFile.exists() && !outputFile.mkdirs()) {\n        throw new IOException(\"Could not create folder: \" + outputFile);\n      }\n      foldersTimestamps.put(outputFile,modifiedTime);\n    }\n else     if (isLink) {\n      hardLinks.put(outputFile,outputLinkedFile);\n      hardLinksMode.put(outputFile,mode);\n    }\n else     if (isSymLink) {\n      symLinks.put(outputFile,linkName);\n      symLinksModifiedTimes.put(outputFile,modifiedTime);\n    }\n else {\n      if (!outputFile.getParentFile().isDirectory()) {\n        outputFile.getParentFile().mkdirs();\n      }\n      copyStreamToFile(in,size,outputFile);\n      outputFile.setLastModified(modifiedTime);\n    }\n    if (mode != null && !isSymLink && outputFile.exists()) {\n      platform.chmod(outputFile,mode);\n    }\n  }\n  for (  Map.Entry<File,File> entry : hardLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.link(entry.getValue(),entry.getKey());\n    Integer mode=hardLinksMode.get(entry.getKey());\n    if (mode != null) {\n      platform.chmod(entry.getKey(),mode);\n    }\n  }\n  for (  Map.Entry<File,String> entry : symLinks.entrySet()) {\n    if (entry.getKey().exists() && overwrite) {\n      entry.getKey().delete();\n    }\n    platform.symlink(entry.getValue(),entry.getKey());\n    entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n  }\n}\n  finally {\n  if (in != null) {\n    in.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 782,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7103,
        "startLineNumber" : 83,
        "startColumnNumber" : 132,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 824,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7233,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 276,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void extract(File archiveFile,File destFolder,int stripPath,boolean overwrite) throws IOException, InterruptedException {\n  Map<File,Long> foldersTimestamps=new HashMap<File,Long>();\n  ArchiveInputStream in=null;\n  try {\n    if (archiveFile.getName().endsWith(\"tar.bz2\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new BZip2CompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"zip\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new ZipArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar.gz\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      fin=new GzipCompressorInputStream(fin);\n      in=new TarArchiveInputStream(fin);\n    }\n else     if (archiveFile.getName().endsWith(\"tar\")) {\n      InputStream fin=new FileInputStream(archiveFile);\n      in=new TarArchiveInputStream(fin);\n    }\n else {\n      throw new IOException(\"Archive format not supported.\");\n    }\n    String pathPrefix=\"\";\n    Map<File,File> hardLinks=new HashMap<File,File>();\n    Map<File,Integer> hardLinksMode=new HashMap<File,Integer>();\n    Map<File,String> symLinks=new HashMap<File,String>();\n    Map<File,Long> symLinksModifiedTimes=new HashMap<File,Long>();\n    while (true) {\n      ArchiveEntry entry=in.getNextEntry();\n      if (entry == null) {\n        break;\n      }\n      long size=entry.getSize();\n      String name=entry.getName();\n      boolean isDirectory=entry.isDirectory();\n      boolean isLink=false;\n      boolean isSymLink=false;\n      String linkName=null;\n      Integer mode=null;\n      long modifiedTime=entry.getLastModifiedDate().getTime();\n{\n        int slash=name.lastIndexOf('/');\n        if (slash == -1) {\n          if (name.startsWith(\"._\")) {\n            continue;\n          }\n        }\n else {\n          if (name.substring(slash + 1).startsWith(\"._\")) {\n            continue;\n          }\n        }\n      }\n      if (name.contains(\"pax_global_header\")) {\n        continue;\n      }\n      if (entry instanceof TarArchiveEntry) {\n        TarArchiveEntry tarEntry=(TarArchiveEntry)entry;\n        mode=tarEntry.getMode();\n        isLink=tarEntry.isLink();\n        isSymLink=tarEntry.isSymbolicLink();\n        linkName=tarEntry.getLinkName();\n      }\n      if (stripPath > 0 && pathPrefix.isEmpty()) {\n        int slash=0;\n        while (stripPath > 0) {\n          slash=name.indexOf(\"/\",slash);\n          if (slash == -1) {\n            throw new IOException(\"Invalid archive: it must contains a single root folder\");\n          }\n          slash++;\n          stripPath--;\n        }\n        pathPrefix=name.substring(0,slash);\n      }\n      if (!name.startsWith(pathPrefix)) {\n        throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + name + \" is outside \"+ pathPrefix);\n      }\n      name=name.substring(pathPrefix.length());\n      if (name.isEmpty()) {\n        continue;\n      }\n      File outputFile=new File(destFolder,name);\n      File outputLinkedFile=null;\n      if (isLink) {\n        if (!linkName.startsWith(pathPrefix)) {\n          throw new IOException(\"Invalid archive: it must contains a single root folder while file \" + linkName + \" is outside \"+ pathPrefix);\n        }\n        linkName=linkName.substring(pathPrefix.length());\n        outputLinkedFile=new File(destFolder,linkName);\n      }\n      if (isSymLink) {\n        outputLinkedFile=new File(linkName);\n        if (outputLinkedFile.isAbsolute()) {\n          System.err.println(I18n.format(_(\"Warning: file {0} links to an absolute path {1}\"),outputFile,outputLinkedFile));\n          System.err.println();\n        }\n      }\n      if (isDirectory) {\n        if (outputFile.isFile() && !overwrite) {\n          throw new IOException(\"Can't create folder \" + outputFile + \", a file with the same name exists!\");\n        }\n      }\n else {\n        if (outputFile.exists() && !overwrite) {\n          throw new IOException(\"Can't extract file \" + outputFile + \", file already exists!\");\n        }\n      }\n      if (isDirectory) {\n        if (!outputFile.exists() && !outputFile.mkdirs()) {\n          throw new IOException(\"Could not create folder: \" + outputFile);\n        }\n        foldersTimestamps.put(outputFile,modifiedTime);\n      }\n else       if (isLink) {\n        hardLinks.put(outputFile,outputLinkedFile);\n        hardLinksMode.put(outputFile,mode);\n      }\n else       if (isSymLink) {\n        symLinks.put(outputFile,linkName);\n        symLinksModifiedTimes.put(outputFile,modifiedTime);\n      }\n else {\n        if (!outputFile.getParentFile().isDirectory()) {\n          outputFile.getParentFile().mkdirs();\n        }\n        copyStreamToFile(in,size,outputFile);\n        outputFile.setLastModified(modifiedTime);\n      }\n      if (mode != null && !isSymLink && outputFile.exists()) {\n        platform.chmod(outputFile,mode);\n      }\n    }\n    for (    Map.Entry<File,File> entry : hardLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.link(entry.getValue(),entry.getKey());\n      Integer mode=hardLinksMode.get(entry.getKey());\n      if (mode != null) {\n        platform.chmod(entry.getKey(),mode);\n      }\n    }\n    for (    Map.Entry<File,String> entry : symLinks.entrySet()) {\n      if (entry.getKey().exists() && overwrite) {\n        entry.getKey().delete();\n      }\n      platform.symlink(entry.getValue(),entry.getKey());\n      entry.getKey().setLastModified(symLinksModifiedTimes.get(entry.getKey()));\n    }\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n  for (  File folder : foldersTimestamps.keySet()) {\n    folder.setLastModified(foldersTimestamps.get(folder));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 846,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 104,
        "startColumnNumber" : 17,
        "endLineNumber" : 104,
        "endColumnNumber" : 54
      },
      "nodeContext" : "archiveFile.getName().endsWith(\"tar\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 93,
    "startColumnNumber" : 10,
    "endLineNumber" : 93,
    "endColumnNumber" : 31
  }, {
    "charLength" : 21,
    "startLineNumber" : 97,
    "startColumnNumber" : 17,
    "endLineNumber" : 97,
    "endColumnNumber" : 38
  }, {
    "charLength" : 21,
    "startLineNumber" : 100,
    "startColumnNumber" : 17,
    "endLineNumber" : 100,
    "endColumnNumber" : 38
  }, {
    "charLength" : 21,
    "startLineNumber" : 104,
    "startColumnNumber" : 17,
    "endLineNumber" : 104,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}