{
  "id" : 266,
  "expression" : "OFFSET_BUFFER",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "OFFSET_BUFFER",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 83,
      "startColumnNumber" : 13,
      "endLineNumber" : 83,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 27
      },
      "nodeContext" : "case OFFSET_BUFFER:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 598,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (write.writeType) {\ncase BYTE:  byteArrayOutputStream.write(write.data[0]);\nbufferedOutputStream.write(write.data[0]);\nbreak;\ncase BUFFER:byteArrayOutputStream.write(write.data);\nbufferedOutputStream.write(write.data);\nbreak;\ncase OFFSET_BUFFER:byteArrayOutputStream.write(write.data,write.offset,write.length);\nbufferedOutputStream.write(write.data,write.offset,write.length);\nbreak;\ndefault:throw new IllegalArgumentException();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 76,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 73,
        "startColumnNumber" : 31,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (write.writeType) {\ncase BYTE:    byteArrayOutputStream.write(write.data[0]);\n  bufferedOutputStream.write(write.data[0]);\nbreak;\ncase BUFFER:byteArrayOutputStream.write(write.data);\nbufferedOutputStream.write(write.data);\nbreak;\ncase OFFSET_BUFFER:byteArrayOutputStream.write(write.data,write.offset,write.length);\nbufferedOutputStream.write(write.data,write.offset,write.length);\nbreak;\ndefault:throw new IllegalArgumentException();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Write write : writes) {\nswitch (write.writeType) {\ncase BYTE:    byteArrayOutputStream.write(write.data[0]);\n  bufferedOutputStream.write(write.data[0]);\nbreak;\ncase BUFFER:byteArrayOutputStream.write(write.data);\nbufferedOutputStream.write(write.data);\nbreak;\ncase OFFSET_BUFFER:byteArrayOutputStream.write(write.data,write.offset,write.length);\nbufferedOutputStream.write(write.data,write.offset,write.length);\nbreak;\ndefault:throw new IllegalArgumentException();\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1783,
        "startLineNumber" : 60,
        "startColumnNumber" : 57,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Write> writes=new ArrayList<>(WRITES_PER_TEST);\n  for (int i=0; i < WRITES_PER_TEST; i++) {\n    WriteType writeType=getType(random);\n    writes.add(getWrite(random,writeType));\n  }\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  ByteArrayOutputStream wrapped=new ByteArrayOutputStream();\n  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(wrapped,arrayPool,BUFFER_SIZE);\n  for (  Write write : writes) {\nswitch (write.writeType) {\ncase BYTE:      byteArrayOutputStream.write(write.data[0]);\n    bufferedOutputStream.write(write.data[0]);\n  break;\ncase BUFFER:byteArrayOutputStream.write(write.data);\nbufferedOutputStream.write(write.data);\nbreak;\ncase OFFSET_BUFFER:byteArrayOutputStream.write(write.data,write.offset,write.length);\nbufferedOutputStream.write(write.data,write.offset,write.length);\nbreak;\ndefault:throw new IllegalArgumentException();\n}\n}\nbyte[] fromByteArrayStream=byteArrayOutputStream.toByteArray();\nbufferedOutputStream.close();\nbyte[] fromWrappedStream=wrapped.toByteArray();\nif (!Arrays.equals(fromWrappedStream,fromByteArrayStream)) {\nStringBuilder writesBuilder=new StringBuilder();\nfor (Write write : writes) {\nwritesBuilder.append(write).append(\"\\n\");\n}\nfail(\"Expected: \" + Arrays.toString(fromByteArrayStream) + \"\\n\"+ \"but got: \"+ Arrays.toString(fromWrappedStream)+ \"\\n\"+ writesBuilder.toString());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1838,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void runTest(Random random) throws IOException {\n  List<Write> writes=new ArrayList<>(WRITES_PER_TEST);\n  for (int i=0; i < WRITES_PER_TEST; i++) {\n    WriteType writeType=getType(random);\n    writes.add(getWrite(random,writeType));\n  }\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  ByteArrayOutputStream wrapped=new ByteArrayOutputStream();\n  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(wrapped,arrayPool,BUFFER_SIZE);\n  for (  Write write : writes) {\nswitch (write.writeType) {\ncase BYTE:      byteArrayOutputStream.write(write.data[0]);\n    bufferedOutputStream.write(write.data[0]);\n  break;\ncase BUFFER:byteArrayOutputStream.write(write.data);\nbufferedOutputStream.write(write.data);\nbreak;\ncase OFFSET_BUFFER:byteArrayOutputStream.write(write.data,write.offset,write.length);\nbufferedOutputStream.write(write.data,write.offset,write.length);\nbreak;\ndefault:throw new IllegalArgumentException();\n}\n}\nbyte[] fromByteArrayStream=byteArrayOutputStream.toByteArray();\nbufferedOutputStream.close();\nbyte[] fromWrappedStream=wrapped.toByteArray();\nif (!Arrays.equals(fromWrappedStream,fromByteArrayStream)) {\nStringBuilder writesBuilder=new StringBuilder();\nfor (Write write : writes) {\nwritesBuilder.append(write).append(\"\\n\");\n}\nfail(\"Expected: \" + Arrays.toString(fromByteArrayStream) + \"\\n\"+ \"but got: \"+ Arrays.toString(fromWrappedStream)+ \"\\n\"+ writesBuilder.toString());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 234,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 27
      },
      "nodeContext" : "case OFFSET_BUFFER:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "com.bumptech.glide.load.data.BufferedOutputStreamFuzzTest.WriteType"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 83,
    "startColumnNumber" : 13,
    "endLineNumber" : 83,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}