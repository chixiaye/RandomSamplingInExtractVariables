{
  "id" : 172,
  "expression" : "Util",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/third_party/disklrucache/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Util",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 248,
      "startColumnNumber" : 85,
      "endLineNumber" : 248,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 248,
        "startColumnNumber" : 85,
        "endLineNumber" : 248,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Util.US_ASCII",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 248,
        "startColumnNumber" : 30,
        "endLineNumber" : 248,
        "endColumnNumber" : 99
      },
      "nodeContext" : "new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 248,
        "startColumnNumber" : 21,
        "endLineNumber" : 248,
        "endColumnNumber" : 99
      },
      "nodeContext" : "reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 100
      },
      "nodeContext" : "StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 247,
        "startColumnNumber" : 48,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void readJournal() throws IOException {\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 248,
        "endColumnNumber" : 100
      },
      "nodeContext" : "StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.disklrucache.Util"
  }, {
    "nodeContext" : "Util",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 280,
      "startColumnNumber" : 53,
      "endLineNumber" : 280,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 280,
        "startColumnNumber" : 53,
        "endLineNumber" : 280,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Util.US_ASCII",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 279,
        "startColumnNumber" : 43,
        "endLineNumber" : 280,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 279,
        "startColumnNumber" : 24,
        "endLineNumber" : 280,
        "endColumnNumber" : 68
      },
      "nodeContext" : "new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 279,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 68
      },
      "nodeContext" : "journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 279,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 69
      },
      "nodeContext" : "journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 278,
        "startColumnNumber" : 13,
        "endLineNumber" : 281,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 276,
        "startColumnNumber" : 6,
        "endLineNumber" : 281,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (reader.hasUnterminatedLine()) {\n  rebuildJournal();\n}\n else {\n  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1242,
        "startLineNumber" : 249,
        "startColumnNumber" : 8,
        "endLineNumber" : 282,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String magic=reader.readLine();\n  String version=reader.readLine();\n  String appVersionString=reader.readLine();\n  String valueCountString=reader.readLine();\n  String blank=reader.readLine();\n  if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n    throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n  }\n  int lineCount=0;\n  while (true) {\n    try {\n      readJournalLine(reader.readLine());\n      lineCount++;\n    }\n catch (    EOFException endOfJournal) {\n      break;\n    }\n  }\n  redundantOpCount=lineCount - lruEntries.size();\n  if (reader.hasUnterminatedLine()) {\n    rebuildJournal();\n  }\n else {\n    journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 249,
        "startColumnNumber" : 4,
        "endLineNumber" : 284,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String magic=reader.readLine();\n  String version=reader.readLine();\n  String appVersionString=reader.readLine();\n  String valueCountString=reader.readLine();\n  String blank=reader.readLine();\n  if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n    throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n  }\n  int lineCount=0;\n  while (true) {\n    try {\n      readJournalLine(reader.readLine());\n      lineCount++;\n    }\n catch (    EOFException endOfJournal) {\n      break;\n    }\n  }\n  redundantOpCount=lineCount - lruEntries.size();\n  if (reader.hasUnterminatedLine()) {\n    rebuildJournal();\n  }\n else {\n    journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n  }\n}\n  finally {\n  Util.closeQuietly(reader);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 247,
        "startColumnNumber" : 48,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void readJournal() throws IOException {\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 280,
        "startColumnNumber" : 53,
        "endLineNumber" : 280,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Util.US_ASCII",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.disklrucache.Util"
  }, {
    "nodeContext" : "Util",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 283,
      "startColumnNumber" : 6,
      "endLineNumber" : 283,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 283,
        "startColumnNumber" : 6,
        "endLineNumber" : 283,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Util.closeQuietly(reader)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 283,
        "startColumnNumber" : 6,
        "endLineNumber" : 283,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Util.closeQuietly(reader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 282,
        "startColumnNumber" : 14,
        "endLineNumber" : 284,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Util.closeQuietly(reader);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 249,
        "startColumnNumber" : 4,
        "endLineNumber" : 284,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String magic=reader.readLine();\n  String version=reader.readLine();\n  String appVersionString=reader.readLine();\n  String valueCountString=reader.readLine();\n  String blank=reader.readLine();\n  if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n    throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n  }\n  int lineCount=0;\n  while (true) {\n    try {\n      readJournalLine(reader.readLine());\n      lineCount++;\n    }\n catch (    EOFException endOfJournal) {\n      break;\n    }\n  }\n  redundantOpCount=lineCount - lruEntries.size();\n  if (reader.hasUnterminatedLine()) {\n    rebuildJournal();\n  }\n else {\n    journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n  }\n}\n  finally {\n  Util.closeQuietly(reader);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 247,
        "startColumnNumber" : 48,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1457,
        "startLineNumber" : 247,
        "startColumnNumber" : 2,
        "endLineNumber" : 285,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void readJournal() throws IOException {\n  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);\n  try {\n    String magic=reader.readLine();\n    String version=reader.readLine();\n    String appVersionString=reader.readLine();\n    String valueCountString=reader.readLine();\n    String blank=reader.readLine();\n    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !\"\".equals(blank)) {\n      throw new IOException(\"unexpected journal header: [\" + magic + \", \"+ version+ \", \"+ valueCountString+ \", \"+ blank+ \"]\");\n    }\n    int lineCount=0;\n    while (true) {\n      try {\n        readJournalLine(reader.readLine());\n        lineCount++;\n      }\n catch (      EOFException endOfJournal) {\n        break;\n      }\n    }\n    redundantOpCount=lineCount - lruEntries.size();\n    if (reader.hasUnterminatedLine()) {\n      rebuildJournal();\n    }\n else {\n      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n    }\n  }\n  finally {\n    Util.closeQuietly(reader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 283,
        "startColumnNumber" : 6,
        "endLineNumber" : 283,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Util.closeQuietly(reader);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.disklrucache.Util"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 248,
    "startColumnNumber" : 85,
    "endLineNumber" : 248,
    "endColumnNumber" : 89
  }, {
    "charLength" : 4,
    "startLineNumber" : 280,
    "startColumnNumber" : 53,
    "endLineNumber" : 280,
    "endColumnNumber" : 57
  }, {
    "charLength" : 4,
    "startLineNumber" : 283,
    "startColumnNumber" : 6,
    "endLineNumber" : 283,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}