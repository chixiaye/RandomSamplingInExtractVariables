{
  "id" : 332,
  "expression" : "closeFrameSent",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "closeFrameSent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 584,
      "startColumnNumber" : 19,
      "endLineNumber" : 584,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 584,
        "startColumnNumber" : 18,
        "endLineNumber" : 584,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!closeFrameSent",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 584,
        "startColumnNumber" : 14,
        "endLineNumber" : 589,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (!closeFrameSent) {\n  ch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\n  closeFrameSent=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1045,
        "startLineNumber" : 568,
        "startColumnNumber" : 10,
        "endLineNumber" : 593,
        "endColumnNumber" : 11
      },
      "nodeContext" : "switch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:  if (conn != null) {\n    conn.handleMessage(msg);\n  }\nbreak;\ncase PING:ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 71,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1168,
        "startLineNumber" : 565,
        "startColumnNumber" : 58,
        "endLineNumber" : 594,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:    if (conn != null) {\n      conn.handleMessage(msg);\n    }\n  break;\ncase PING:ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 565,
        "startColumnNumber" : 15,
        "endLineNumber" : 609,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof WebSocketFrameInternal) {\n  WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:    if (conn != null) {\n      conn.handleMessage(msg);\n    }\n  break;\ncase PING:ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3401,
        "startLineNumber" : 529,
        "startColumnNumber" : 8,
        "endLineNumber" : 609,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof HttpRequest) {\n  final HttpRequest request=(HttpRequest)msg;\n  if (log.isTraceEnabled())   log.trace(\"Server received request: \" + request.getUri());\n  if (request.headers().contains(io.vertx.core.http.HttpHeaders.UPGRADE,io.vertx.core.http.HttpHeaders.WEBSOCKET,true)) {\n    String connectionHeader=request.headers().get(io.vertx.core.http.HttpHeaders.CONNECTION);\n    if (connectionHeader == null || !connectionHeader.toLowerCase().contains(\"upgrade\")) {\n      sendError(\"\\\"Connection\\\" must be \\\"Upgrade\\\".\",BAD_REQUEST,ch);\n      return;\n    }\n    if (request.getMethod() != HttpMethod.GET) {\n      sendError(null,METHOD_NOT_ALLOWED,ch);\n      return;\n    }\n    if (wsRequest == null) {\n      if (request instanceof FullHttpRequest) {\n        handshake((FullHttpRequest)request,ch,ctx);\n      }\n else {\n        wsRequest=new DefaultFullHttpRequest(request.getProtocolVersion(),request.getMethod(),request.getUri());\n        wsRequest.headers().set(request.headers());\n      }\n    }\n  }\n else {\n    if (conn == null) {\n      createConnAndHandle(ctx,ch,msg,null);\n    }\n else {\n      conn.handleMessage(msg);\n    }\n  }\n}\n else if (msg instanceof WebSocketFrameInternal) {\n  WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:    if (conn != null) {\n      conn.handleMessage(msg);\n    }\n  break;\ncase PING:ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 331,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 527,
        "startColumnNumber" : 31,
        "endLineNumber" : 610,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (msg instanceof HttpRequest) {\n    final HttpRequest request=(HttpRequest)msg;\n    if (log.isTraceEnabled())     log.trace(\"Server received request: \" + request.getUri());\n    if (request.headers().contains(io.vertx.core.http.HttpHeaders.UPGRADE,io.vertx.core.http.HttpHeaders.WEBSOCKET,true)) {\n      String connectionHeader=request.headers().get(io.vertx.core.http.HttpHeaders.CONNECTION);\n      if (connectionHeader == null || !connectionHeader.toLowerCase().contains(\"upgrade\")) {\n        sendError(\"\\\"Connection\\\" must be \\\"Upgrade\\\".\",BAD_REQUEST,ch);\n        return;\n      }\n      if (request.getMethod() != HttpMethod.GET) {\n        sendError(null,METHOD_NOT_ALLOWED,ch);\n        return;\n      }\n      if (wsRequest == null) {\n        if (request instanceof FullHttpRequest) {\n          handshake((FullHttpRequest)request,ch,ctx);\n        }\n else {\n          wsRequest=new DefaultFullHttpRequest(request.getProtocolVersion(),request.getMethod(),request.getUri());\n          wsRequest.headers().set(request.headers());\n        }\n      }\n    }\n else {\n      if (conn == null) {\n        createConnAndHandle(ctx,ch,msg,null);\n      }\n else {\n        conn.handleMessage(msg);\n      }\n    }\n  }\n else   if (msg instanceof WebSocketFrameInternal) {\n    WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:      if (conn != null) {\n        conn.handleMessage(msg);\n      }\n    break;\ncase PING:  ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 332,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3604,
        "startLineNumber" : 527,
        "startColumnNumber" : 6,
        "endLineNumber" : 619,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!DISABLE_WEBSOCKETS) {\n  if (msg instanceof HttpRequest) {\n    final HttpRequest request=(HttpRequest)msg;\n    if (log.isTraceEnabled())     log.trace(\"Server received request: \" + request.getUri());\n    if (request.headers().contains(io.vertx.core.http.HttpHeaders.UPGRADE,io.vertx.core.http.HttpHeaders.WEBSOCKET,true)) {\n      String connectionHeader=request.headers().get(io.vertx.core.http.HttpHeaders.CONNECTION);\n      if (connectionHeader == null || !connectionHeader.toLowerCase().contains(\"upgrade\")) {\n        sendError(\"\\\"Connection\\\" must be \\\"Upgrade\\\".\",BAD_REQUEST,ch);\n        return;\n      }\n      if (request.getMethod() != HttpMethod.GET) {\n        sendError(null,METHOD_NOT_ALLOWED,ch);\n        return;\n      }\n      if (wsRequest == null) {\n        if (request instanceof FullHttpRequest) {\n          handshake((FullHttpRequest)request,ch,ctx);\n        }\n else {\n          wsRequest=new DefaultFullHttpRequest(request.getProtocolVersion(),request.getMethod(),request.getUri());\n          wsRequest.headers().set(request.headers());\n        }\n      }\n    }\n else {\n      if (conn == null) {\n        createConnAndHandle(ctx,ch,msg,null);\n      }\n else {\n        conn.handleMessage(msg);\n      }\n    }\n  }\n else   if (msg instanceof WebSocketFrameInternal) {\n    WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:      if (conn != null) {\n        conn.handleMessage(msg);\n      }\n    break;\ncase PING:  ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\nbreak;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n}\n else {\nif (conn == null) {\ncreateConnAndHandle(ctx,ch,msg,null);\n}\n else {\nconn.handleMessage(msg);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 354,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3810,
        "startLineNumber" : 521,
        "startColumnNumber" : 116,
        "endLineNumber" : 620,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel ch=ctx.channel();\n  if (!DISABLE_WEBSOCKETS) {\n    if (msg instanceof HttpRequest) {\n      final HttpRequest request=(HttpRequest)msg;\n      if (log.isTraceEnabled())       log.trace(\"Server received request: \" + request.getUri());\n      if (request.headers().contains(io.vertx.core.http.HttpHeaders.UPGRADE,io.vertx.core.http.HttpHeaders.WEBSOCKET,true)) {\n        String connectionHeader=request.headers().get(io.vertx.core.http.HttpHeaders.CONNECTION);\n        if (connectionHeader == null || !connectionHeader.toLowerCase().contains(\"upgrade\")) {\n          sendError(\"\\\"Connection\\\" must be \\\"Upgrade\\\".\",BAD_REQUEST,ch);\n          return;\n        }\n        if (request.getMethod() != HttpMethod.GET) {\n          sendError(null,METHOD_NOT_ALLOWED,ch);\n          return;\n        }\n        if (wsRequest == null) {\n          if (request instanceof FullHttpRequest) {\n            handshake((FullHttpRequest)request,ch,ctx);\n          }\n else {\n            wsRequest=new DefaultFullHttpRequest(request.getProtocolVersion(),request.getMethod(),request.getUri());\n            wsRequest.headers().set(request.headers());\n          }\n        }\n      }\n else {\n        if (conn == null) {\n          createConnAndHandle(ctx,ch,msg,null);\n        }\n else {\n          conn.handleMessage(msg);\n        }\n      }\n    }\n else     if (msg instanceof WebSocketFrameInternal) {\n      WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:        if (conn != null) {\n          conn.handleMessage(msg);\n        }\n      break;\ncase PING:    ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\n  break;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n}\n else {\nif (conn == null) {\ncreateConnAndHandle(ctx,ch,msg,null);\n}\n else {\nconn.handleMessage(msg);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3936,
        "startLineNumber" : 520,
        "startColumnNumber" : 4,
        "endLineNumber" : 620,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void doMessageReceived(ServerConnection conn,ChannelHandlerContext ctx,Object msg) throws Exception {\n  Channel ch=ctx.channel();\n  if (!DISABLE_WEBSOCKETS) {\n    if (msg instanceof HttpRequest) {\n      final HttpRequest request=(HttpRequest)msg;\n      if (log.isTraceEnabled())       log.trace(\"Server received request: \" + request.getUri());\n      if (request.headers().contains(io.vertx.core.http.HttpHeaders.UPGRADE,io.vertx.core.http.HttpHeaders.WEBSOCKET,true)) {\n        String connectionHeader=request.headers().get(io.vertx.core.http.HttpHeaders.CONNECTION);\n        if (connectionHeader == null || !connectionHeader.toLowerCase().contains(\"upgrade\")) {\n          sendError(\"\\\"Connection\\\" must be \\\"Upgrade\\\".\",BAD_REQUEST,ch);\n          return;\n        }\n        if (request.getMethod() != HttpMethod.GET) {\n          sendError(null,METHOD_NOT_ALLOWED,ch);\n          return;\n        }\n        if (wsRequest == null) {\n          if (request instanceof FullHttpRequest) {\n            handshake((FullHttpRequest)request,ch,ctx);\n          }\n else {\n            wsRequest=new DefaultFullHttpRequest(request.getProtocolVersion(),request.getMethod(),request.getUri());\n            wsRequest.headers().set(request.headers());\n          }\n        }\n      }\n else {\n        if (conn == null) {\n          createConnAndHandle(ctx,ch,msg,null);\n        }\n else {\n          conn.handleMessage(msg);\n        }\n      }\n    }\n else     if (msg instanceof WebSocketFrameInternal) {\n      WebSocketFrameInternal wsFrame=(WebSocketFrameInternal)msg;\nswitch (wsFrame.type()) {\ncase BINARY:case CONTINUATION:case TEXT:        if (conn != null) {\n          conn.handleMessage(msg);\n        }\n      break;\ncase PING:    ch.writeAndFlush(new WebSocketFrameImpl(FrameType.PONG,wsFrame.getBinaryData()));\n  break;\ncase PONG:break;\ncase CLOSE:if (!closeFrameSent) {\nch.writeAndFlush(wsFrame).addListener(ChannelFutureListener.CLOSE);\ncloseFrameSent=true;\n}\nbreak;\ndefault:throw new IllegalStateException(\"Invalid type: \" + wsFrame.type());\n}\n}\n else if (msg instanceof HttpContent) {\nif (wsRequest != null) {\nwsRequest.content().writeBytes(((HttpContent)msg).content());\nif (msg instanceof LastHttpContent) {\nFullHttpRequest req=wsRequest;\nwsRequest=null;\nhandshake(req,ch,ctx);\nreturn;\n}\n}\nif (conn != null) {\nconn.handleMessage(msg);\n}\n}\n else {\nthrow new IllegalStateException(\"Invalid message \" + msg);\n}\n}\n else {\nif (conn == null) {\ncreateConnAndHandle(ctx,ch,msg,null);\n}\n else {\nconn.handleMessage(msg);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 383,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 584,
        "startColumnNumber" : 18,
        "endLineNumber" : 584,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!closeFrameSent",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 584,
    "startColumnNumber" : 19,
    "endLineNumber" : 584,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}