{
  "id" : 295,
  "expression" : "schemaInfo == null ? 0 : schemaInfo.getNativePtr()",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "schemaInfo == null ? 0 : schemaInfo.getNativePtr()",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 267,
      "startColumnNumber" : 37,
      "endLineNumber" : 267,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 267,
        "startColumnNumber" : 19,
        "endLineNumber" : 267,
        "endColumnNumber" : 87
      },
      "nodeContext" : "nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 267,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 88
      },
      "nodeContext" : "final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7334,
        "startLineNumber" : 207,
        "startColumnNumber" : 97,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 727,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7742,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 353,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private OsRealmConfig(final RealmConfiguration config,String fifoFallbackDir,boolean autoUpdateNotification,@Nullable OsSchemaInfo schemaInfo,@Nullable OsSharedRealm.MigrationCallback migrationCallback,@Nullable OsSharedRealm.InitializationCallback initializationCallback){\n  this.realmConfiguration=config;\n  this.nativePtr=nativeCreate(config.getPath(),fifoFallbackDir,true,config.getMaxNumberOfActiveVersions());\n  NativeContext.dummyContext.addReference(this);\n  int j=0;\n  Object[] syncConfigurationOptions=ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);\n  String syncUserIdentifier=(String)syncConfigurationOptions[j++];\n  String syncRealmUrl=(String)syncConfigurationOptions[j++];\n  String syncRealmAuthUrl=(String)syncConfigurationOptions[j++];\n  String syncRefreshToken=(String)syncConfigurationOptions[j++];\n  String syncAccessToken=(String)syncConfigurationOptions[j++];\n  String deviceId=(String)syncConfigurationOptions[j++];\n  Byte sessionStopPolicy=(Byte)syncConfigurationOptions[j++];\n  String urlPrefix=(String)(syncConfigurationOptions[j++]);\n  String customAuthorizationHeaderName=(String)(syncConfigurationOptions[j++]);\n  Map<String,String> customHeadersMap=(Map<String,String>)(syncConfigurationOptions[j++]);\n  Byte clientResyncMode=(Byte)syncConfigurationOptions[j++];\n  String encodedPartitionValue=(String)syncConfigurationOptions[j++];\n  Object syncService=syncConfigurationOptions[j++];\n  Long appPtr=(Long)syncConfigurationOptions[j++];\n  String[] customHeaders=new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];\n  if (customHeadersMap != null) {\n    int i=0;\n    for (    Map.Entry<String,String> entry : customHeadersMap.entrySet()) {\n      customHeaders[i]=entry.getKey();\n      customHeaders[i + 1]=entry.getValue();\n      i=i + 2;\n    }\n  }\n  byte[] key=config.getEncryptionKey();\n  if (key != null) {\n    nativeSetEncryptionKey(nativePtr,key);\n  }\n  nativeSetInMemory(nativePtr,config.getDurability() == Durability.MEM_ONLY);\n  nativeEnableChangeNotification(nativePtr,autoUpdateNotification);\n  SchemaMode schemaMode=SchemaMode.SCHEMA_MODE_MANUAL;\n  if (config.isRecoveryConfiguration()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_IMMUTABLE;\n  }\n else   if (config.isReadOnly()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_READONLY;\n  }\n else   if (syncRealmUrl != null) {\n    schemaMode=SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;\n  }\n else   if (config.shouldDeleteRealmIfMigrationNeeded()) {\n    schemaMode=SchemaMode.SCHEMA_MODE_RESET_FILE;\n  }\n  final long schemaVersion=config.getSchemaVersion();\n  final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n  this.migrationCallback=migrationCallback;\n  nativeSetSchemaConfig(nativePtr,schemaMode.getNativeValue(),schemaVersion,nativeSchemaPtr,migrationCallback);\n  this.compactOnLaunchCallback=config.getCompactOnLaunchCallback();\n  if (compactOnLaunchCallback != null) {\n    nativeSetCompactOnLaunchCallback(nativePtr,compactOnLaunchCallback);\n  }\n  this.initializationCallback=initializationCallback;\n  if (initializationCallback != null) {\n    nativeSetInitializationCallback(nativePtr,initializationCallback);\n  }\n  URI resolvedRealmURI=null;\n  if (syncRealmUrl != null) {\n    String resolvedSyncRealmUrl=nativeCreateAndSetSyncConfig(appPtr,nativePtr,syncRealmUrl,syncRealmAuthUrl,syncUserIdentifier,syncRefreshToken,syncAccessToken,deviceId,sessionStopPolicy,urlPrefix,customAuthorizationHeaderName,customHeaders,clientResyncMode,encodedPartitionValue,syncService);\n    try {\n      resolvedSyncRealmUrl=syncRealmAuthUrl + urlPrefix.substring(1);\n      resolvedRealmURI=new URI(resolvedSyncRealmUrl);\n    }\n catch (    URISyntaxException e) {\n      RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n    }\n    ProxySelector proxySelector=ProxySelector.getDefault();\n    if (resolvedRealmURI != null && proxySelector != null) {\n      URI websocketUrl=null;\n      try {\n        websocketUrl=new URI(resolvedSyncRealmUrl.replaceFirst(\"ws\",\"http\"));\n      }\n catch (      URISyntaxException e) {\n        RealmLog.error(e,\"Cannot create a URI from the Realm URL address\");\n      }\n      List<java.net.Proxy> proxies=proxySelector.select(websocketUrl);\n      if (proxies != null && !proxies.isEmpty()) {\n        java.net.Proxy proxy=proxies.get(0);\n        if (proxy.type() != java.net.Proxy.Type.DIRECT) {\n          byte proxyType=-1;\nswitch (proxy.type()) {\ncase HTTP:            proxyType=PROXYCONFIG_TYPE_VALUE_HTTP;\n          break;\ndefault:      }\n      if (proxy.type() == java.net.Proxy.Type.HTTP) {\n        java.net.SocketAddress address=proxy.address();\n        if (address instanceof java.net.InetSocketAddress) {\n          java.net.InetSocketAddress inetAddress=(java.net.InetSocketAddress)address;\n          nativeSetSyncConfigProxySettings(nativePtr,proxyType,inetAddress.getHostString(),inetAddress.getPort());\n        }\n else {\n          RealmLog.error(\"Unsupported proxy socket address type: \" + address.getClass().getName());\n        }\n      }\n else {\n        RealmLog.error(\"SOCKS proxies are not supported.\");\n      }\n    }\n  }\n}\n}\nthis.resolvedRealmURI=resolvedRealmURI;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 764,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 267,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 88
      },
      "nodeContext" : "final long nativeSchemaPtr=schemaInfo == null ? 0 : schemaInfo.getNativePtr();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 267,
    "startColumnNumber" : 37,
    "endLineNumber" : 267,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}