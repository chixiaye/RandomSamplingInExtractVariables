{
  "id" : 160,
  "expression" : "optional",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 119,
      "startColumnNumber" : 22,
      "endLineNumber" : 119,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 31
      },
      "nodeContext" : "assertNotNull(optional)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assertNotNull(optional);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 113,
        "startColumnNumber" : 29,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verify_empty_Optional_is_returned(String streamFqcn,String optionalFqcn) throws Exception {\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 119,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assertNotNull(optional);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 120,
      "startColumnNumber" : 88,
      "endLineNumber" : 120,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 120,
        "startColumnNumber" : 30,
        "endLineNumber" : 120,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 120,
        "startColumnNumber" : 20,
        "endLineNumber" : 120,
        "endColumnNumber" : 97
      },
      "nodeContext" : "(Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 98
      },
      "nodeContext" : "assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 113,
        "startColumnNumber" : 29,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verify_empty_Optional_is_returned(String streamFqcn,String optionalFqcn) throws Exception {\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 128,
      "startColumnNumber" : 21,
      "endLineNumber" : 128,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(optional,result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(optional,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 113,
        "startColumnNumber" : 29,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verify_empty_Optional_is_returned(String streamFqcn,String optionalFqcn) throws Exception {\n  Class<?> streamType=getClassOrSkipTest(streamFqcn);\n  Object stream=mock(streamType);\n  Object optional=streamType.getMethod(\"findAny\").invoke(stream);\n  assertNotNull(optional);\n  assertFalse((Boolean)Class.forName(optionalFqcn).getMethod(\"isPresent\").invoke(optional));\n  Invocation findAny=this.getLastInvocation();\n  Object result=values.answer(findAny);\n  assertEquals(optional,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(optional,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 119,
    "startColumnNumber" : 22,
    "endLineNumber" : 119,
    "endColumnNumber" : 30
  }, {
    "charLength" : 8,
    "startLineNumber" : 120,
    "startColumnNumber" : 88,
    "endLineNumber" : 120,
    "endColumnNumber" : 96
  }, {
    "charLength" : 8,
    "startLineNumber" : 128,
    "startColumnNumber" : 21,
    "endLineNumber" : 128,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}