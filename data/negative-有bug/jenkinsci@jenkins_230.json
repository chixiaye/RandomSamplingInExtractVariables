{
  "id" : 230,
  "expression" : "legacyIdFormatter",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/model/RunIdMigrator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "legacyIdFormatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 240,
      "startColumnNumber" : 34,
      "endLineNumber" : 240,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 240,
        "startColumnNumber" : 20,
        "endLineNumber" : 242,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (legacyIdFormatter) {\n  timestamp=legacyIdFormatter.parse(name).getTime();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 239,
        "startColumnNumber" : 20,
        "endLineNumber" : 243,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\nsynchronized (legacyIdFormatter) {\n    timestamp=legacyIdFormatter.parse(name).getTime();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\nsynchronized (legacyIdFormatter) {\n    timestamp=legacyIdFormatter.parse(name).getTime();\n  }\n}\n catch (ParseException x) {\n  LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n  continue;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2026,
        "startLineNumber" : 225,
        "startColumnNumber" : 16,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=kid.getName();\n  try {\n    Integer.parseInt(name);\n    LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n    continue;\n  }\n catch (  NumberFormatException x) {\n  }\n  if (!kid.isDirectory()) {\n    LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n    continue;\n  }\n  long timestamp;\n  try {\nsynchronized (legacyIdFormatter) {\n      timestamp=legacyIdFormatter.parse(name).getTime();\n    }\n  }\n catch (  ParseException x) {\n    LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n    continue;\n  }\n  File buildXml=new File(kid,\"build.xml\");\n  if (!buildXml.isFile()) {\n    LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n    continue;\n  }\n  String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n  Matcher m=NUMBER_ELT.matcher(xml);\n  if (!m.find()) {\n    LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n    continue;\n  }\n  int number=Integer.parseInt(m.group(1));\n  String nl=m.group(2);\n  xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n  File newKid=new File(dir,Integer.toString(number));\n  move(kid,newKid);\n  FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n  LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n  idToNumber.put(name,number);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2136,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 268,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  String name=kid.getName();\n  try {\n    Integer.parseInt(name);\n    LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n    continue;\n  }\n catch (  NumberFormatException x) {\n  }\n  if (!kid.isDirectory()) {\n    LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n    continue;\n  }\n  long timestamp;\n  try {\nsynchronized (legacyIdFormatter) {\n      timestamp=legacyIdFormatter.parse(name).getTime();\n    }\n  }\n catch (  ParseException x) {\n    LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n    continue;\n  }\n  File buildXml=new File(kid,\"build.xml\");\n  if (!buildXml.isFile()) {\n    LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n    continue;\n  }\n  String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n  Matcher m=NUMBER_ELT.matcher(xml);\n  if (!m.find()) {\n    LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n    continue;\n  }\n  int number=Integer.parseInt(m.group(1));\n  String nl=m.group(2);\n  xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n  File newKid=new File(dir,Integer.toString(number));\n  move(kid,newKid);\n  FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n  LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n  idToNumber.put(name,number);\n}\n catch (Exception x) {\n  LOGGER.log(WARNING,\"failed to process \" + kid,x);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2197,
        "startLineNumber" : 223,
        "startColumnNumber" : 29,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File kid=it.next();\n  try {\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n      LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n      continue;\n    }\n catch (    NumberFormatException x) {\n    }\n    if (!kid.isDirectory()) {\n      LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n      continue;\n    }\n    long timestamp;\n    try {\nsynchronized (legacyIdFormatter) {\n        timestamp=legacyIdFormatter.parse(name).getTime();\n      }\n    }\n catch (    ParseException x) {\n      LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n      continue;\n    }\n    File buildXml=new File(kid,\"build.xml\");\n    if (!buildXml.isFile()) {\n      LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n      continue;\n    }\n    String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n    Matcher m=NUMBER_ELT.matcher(xml);\n    if (!m.find()) {\n      LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n      continue;\n    }\n    int number=Integer.parseInt(m.group(1));\n    String nl=m.group(2);\n    xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n    File newKid=new File(dir,Integer.toString(number));\n    move(kid,newKid);\n    FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n    LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n    idToNumber.put(name,number);\n  }\n catch (  Exception x) {\n    LOGGER.log(WARNING,\"failed to process \" + kid,x);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2218,
        "startLineNumber" : 223,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (it.hasNext()) {\n  File kid=it.next();\n  try {\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n      LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n      continue;\n    }\n catch (    NumberFormatException x) {\n    }\n    if (!kid.isDirectory()) {\n      LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n      continue;\n    }\n    long timestamp;\n    try {\nsynchronized (legacyIdFormatter) {\n        timestamp=legacyIdFormatter.parse(name).getTime();\n      }\n    }\n catch (    ParseException x) {\n      LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n      continue;\n    }\n    File buildXml=new File(kid,\"build.xml\");\n    if (!buildXml.isFile()) {\n      LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n      continue;\n    }\n    String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n    Matcher m=NUMBER_ELT.matcher(xml);\n    if (!m.find()) {\n      LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n      continue;\n    }\n    int number=Integer.parseInt(m.group(1));\n    String nl=m.group(2);\n    xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n    File newKid=new File(dir,Integer.toString(number));\n    move(kid,newKid);\n    FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n    LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n    idToNumber.put(name,number);\n  }\n catch (  Exception x) {\n    LOGGER.log(WARNING,\"failed to process \" + kid,x);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 250,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3558,
        "startLineNumber" : 192,
        "startColumnNumber" : 37,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  idToNumber=new TreeMap<>();\n  File[] kids=dir.listFiles();\n  List<File> kidsList=new ArrayList<>(Arrays.asList(kids));\n  Iterator<File> it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n    }\n catch (    NumberFormatException x) {\n      LOGGER.log(FINE,\"ignoring nonnumeric entry {0}\",name);\n      continue;\n    }\n    try {\n      if (Util.isSymlink(kid)) {\n        LOGGER.log(FINE,\"deleting build number symlink {0} → {1}\",new Object[]{name,Util.resolveSymlink(kid)});\n      }\n else       if (kid.isDirectory()) {\n        LOGGER.log(FINE,\"ignoring build directory {0}\",name);\n        continue;\n      }\n else {\n        LOGGER.log(WARNING,\"need to delete anomalous file entry {0}\",name);\n      }\n      Util.deleteFile(kid);\n      it.remove();\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n  it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    try {\n      String name=kid.getName();\n      try {\n        Integer.parseInt(name);\n        LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n        continue;\n      }\n catch (      NumberFormatException x) {\n      }\n      if (!kid.isDirectory()) {\n        LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n        continue;\n      }\n      long timestamp;\n      try {\nsynchronized (legacyIdFormatter) {\n          timestamp=legacyIdFormatter.parse(name).getTime();\n        }\n      }\n catch (      ParseException x) {\n        LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n        continue;\n      }\n      File buildXml=new File(kid,\"build.xml\");\n      if (!buildXml.isFile()) {\n        LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n        continue;\n      }\n      String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n      Matcher m=NUMBER_ELT.matcher(xml);\n      if (!m.find()) {\n        LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n        continue;\n      }\n      int number=Integer.parseInt(m.group(1));\n      String nl=m.group(2);\n      xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n      File newKid=new File(dir,Integer.toString(number));\n      move(kid,newKid);\n      FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n      LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n      idToNumber.put(name,number);\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 413,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3591,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void doMigrate(File dir){\n  idToNumber=new TreeMap<>();\n  File[] kids=dir.listFiles();\n  List<File> kidsList=new ArrayList<>(Arrays.asList(kids));\n  Iterator<File> it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n    }\n catch (    NumberFormatException x) {\n      LOGGER.log(FINE,\"ignoring nonnumeric entry {0}\",name);\n      continue;\n    }\n    try {\n      if (Util.isSymlink(kid)) {\n        LOGGER.log(FINE,\"deleting build number symlink {0} → {1}\",new Object[]{name,Util.resolveSymlink(kid)});\n      }\n else       if (kid.isDirectory()) {\n        LOGGER.log(FINE,\"ignoring build directory {0}\",name);\n        continue;\n      }\n else {\n        LOGGER.log(WARNING,\"need to delete anomalous file entry {0}\",name);\n      }\n      Util.deleteFile(kid);\n      it.remove();\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n  it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    try {\n      String name=kid.getName();\n      try {\n        Integer.parseInt(name);\n        LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n        continue;\n      }\n catch (      NumberFormatException x) {\n      }\n      if (!kid.isDirectory()) {\n        LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n        continue;\n      }\n      long timestamp;\n      try {\nsynchronized (legacyIdFormatter) {\n          timestamp=legacyIdFormatter.parse(name).getTime();\n        }\n      }\n catch (      ParseException x) {\n        LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n        continue;\n      }\n      File buildXml=new File(kid,\"build.xml\");\n      if (!buildXml.isFile()) {\n        LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n        continue;\n      }\n      String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n      Matcher m=NUMBER_ELT.matcher(xml);\n      if (!m.find()) {\n        LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n        continue;\n      }\n      int number=Integer.parseInt(m.group(1));\n      String nl=m.group(2);\n      xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n      File newKid=new File(dir,Integer.toString(number));\n      move(kid,newKid);\n      FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n      LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n      idToNumber.put(name,number);\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 421,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 240,
        "startColumnNumber" : 20,
        "endLineNumber" : 242,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (legacyIdFormatter) {\n  timestamp=legacyIdFormatter.parse(name).getTime();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.text.DateFormat"
  }, {
    "nodeContext" : "legacyIdFormatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 241,
      "startColumnNumber" : 36,
      "endLineNumber" : 241,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 241,
        "startColumnNumber" : 36,
        "endLineNumber" : 241,
        "endColumnNumber" : 65
      },
      "nodeContext" : "legacyIdFormatter.parse(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 241,
        "startColumnNumber" : 36,
        "endLineNumber" : 241,
        "endColumnNumber" : 75
      },
      "nodeContext" : "legacyIdFormatter.parse(name).getTime()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 241,
        "startColumnNumber" : 24,
        "endLineNumber" : 241,
        "endColumnNumber" : 75
      },
      "nodeContext" : "timestamp=legacyIdFormatter.parse(name).getTime()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 241,
        "startColumnNumber" : 24,
        "endLineNumber" : 241,
        "endColumnNumber" : 76
      },
      "nodeContext" : "timestamp=legacyIdFormatter.parse(name).getTime();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 240,
        "startColumnNumber" : 53,
        "endLineNumber" : 242,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  timestamp=legacyIdFormatter.parse(name).getTime();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 240,
        "startColumnNumber" : 20,
        "endLineNumber" : 242,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (legacyIdFormatter) {\n  timestamp=legacyIdFormatter.parse(name).getTime();\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 239,
        "startColumnNumber" : 20,
        "endLineNumber" : 243,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\nsynchronized (legacyIdFormatter) {\n    timestamp=legacyIdFormatter.parse(name).getTime();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 239,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\nsynchronized (legacyIdFormatter) {\n    timestamp=legacyIdFormatter.parse(name).getTime();\n  }\n}\n catch (ParseException x) {\n  LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n  continue;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2026,
        "startLineNumber" : 225,
        "startColumnNumber" : 16,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=kid.getName();\n  try {\n    Integer.parseInt(name);\n    LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n    continue;\n  }\n catch (  NumberFormatException x) {\n  }\n  if (!kid.isDirectory()) {\n    LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n    continue;\n  }\n  long timestamp;\n  try {\nsynchronized (legacyIdFormatter) {\n      timestamp=legacyIdFormatter.parse(name).getTime();\n    }\n  }\n catch (  ParseException x) {\n    LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n    continue;\n  }\n  File buildXml=new File(kid,\"build.xml\");\n  if (!buildXml.isFile()) {\n    LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n    continue;\n  }\n  String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n  Matcher m=NUMBER_ELT.matcher(xml);\n  if (!m.find()) {\n    LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n    continue;\n  }\n  int number=Integer.parseInt(m.group(1));\n  String nl=m.group(2);\n  xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n  File newKid=new File(dir,Integer.toString(number));\n  move(kid,newKid);\n  FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n  LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n  idToNumber.put(name,number);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2136,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 268,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  String name=kid.getName();\n  try {\n    Integer.parseInt(name);\n    LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n    continue;\n  }\n catch (  NumberFormatException x) {\n  }\n  if (!kid.isDirectory()) {\n    LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n    continue;\n  }\n  long timestamp;\n  try {\nsynchronized (legacyIdFormatter) {\n      timestamp=legacyIdFormatter.parse(name).getTime();\n    }\n  }\n catch (  ParseException x) {\n    LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n    continue;\n  }\n  File buildXml=new File(kid,\"build.xml\");\n  if (!buildXml.isFile()) {\n    LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n    continue;\n  }\n  String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n  Matcher m=NUMBER_ELT.matcher(xml);\n  if (!m.find()) {\n    LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n    continue;\n  }\n  int number=Integer.parseInt(m.group(1));\n  String nl=m.group(2);\n  xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n  File newKid=new File(dir,Integer.toString(number));\n  move(kid,newKid);\n  FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n  LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n  idToNumber.put(name,number);\n}\n catch (Exception x) {\n  LOGGER.log(WARNING,\"failed to process \" + kid,x);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 237,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2197,
        "startLineNumber" : 223,
        "startColumnNumber" : 29,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File kid=it.next();\n  try {\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n      LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n      continue;\n    }\n catch (    NumberFormatException x) {\n    }\n    if (!kid.isDirectory()) {\n      LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n      continue;\n    }\n    long timestamp;\n    try {\nsynchronized (legacyIdFormatter) {\n        timestamp=legacyIdFormatter.parse(name).getTime();\n      }\n    }\n catch (    ParseException x) {\n      LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n      continue;\n    }\n    File buildXml=new File(kid,\"build.xml\");\n    if (!buildXml.isFile()) {\n      LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n      continue;\n    }\n    String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n    Matcher m=NUMBER_ELT.matcher(xml);\n    if (!m.find()) {\n      LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n      continue;\n    }\n    int number=Integer.parseInt(m.group(1));\n    String nl=m.group(2);\n    xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n    File newKid=new File(dir,Integer.toString(number));\n    move(kid,newKid);\n    FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n    LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n    idToNumber.put(name,number);\n  }\n catch (  Exception x) {\n    LOGGER.log(WARNING,\"failed to process \" + kid,x);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2218,
        "startLineNumber" : 223,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (it.hasNext()) {\n  File kid=it.next();\n  try {\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n      LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n      continue;\n    }\n catch (    NumberFormatException x) {\n    }\n    if (!kid.isDirectory()) {\n      LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n      continue;\n    }\n    long timestamp;\n    try {\nsynchronized (legacyIdFormatter) {\n        timestamp=legacyIdFormatter.parse(name).getTime();\n      }\n    }\n catch (    ParseException x) {\n      LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n      continue;\n    }\n    File buildXml=new File(kid,\"build.xml\");\n    if (!buildXml.isFile()) {\n      LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n      continue;\n    }\n    String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n    Matcher m=NUMBER_ELT.matcher(xml);\n    if (!m.find()) {\n      LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n      continue;\n    }\n    int number=Integer.parseInt(m.group(1));\n    String nl=m.group(2);\n    xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n    File newKid=new File(dir,Integer.toString(number));\n    move(kid,newKid);\n    FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n    LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n    idToNumber.put(name,number);\n  }\n catch (  Exception x) {\n    LOGGER.log(WARNING,\"failed to process \" + kid,x);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 250,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3558,
        "startLineNumber" : 192,
        "startColumnNumber" : 37,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  idToNumber=new TreeMap<>();\n  File[] kids=dir.listFiles();\n  List<File> kidsList=new ArrayList<>(Arrays.asList(kids));\n  Iterator<File> it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n    }\n catch (    NumberFormatException x) {\n      LOGGER.log(FINE,\"ignoring nonnumeric entry {0}\",name);\n      continue;\n    }\n    try {\n      if (Util.isSymlink(kid)) {\n        LOGGER.log(FINE,\"deleting build number symlink {0} → {1}\",new Object[]{name,Util.resolveSymlink(kid)});\n      }\n else       if (kid.isDirectory()) {\n        LOGGER.log(FINE,\"ignoring build directory {0}\",name);\n        continue;\n      }\n else {\n        LOGGER.log(WARNING,\"need to delete anomalous file entry {0}\",name);\n      }\n      Util.deleteFile(kid);\n      it.remove();\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n  it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    try {\n      String name=kid.getName();\n      try {\n        Integer.parseInt(name);\n        LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n        continue;\n      }\n catch (      NumberFormatException x) {\n      }\n      if (!kid.isDirectory()) {\n        LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n        continue;\n      }\n      long timestamp;\n      try {\nsynchronized (legacyIdFormatter) {\n          timestamp=legacyIdFormatter.parse(name).getTime();\n        }\n      }\n catch (      ParseException x) {\n        LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n        continue;\n      }\n      File buildXml=new File(kid,\"build.xml\");\n      if (!buildXml.isFile()) {\n        LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n        continue;\n      }\n      String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n      Matcher m=NUMBER_ELT.matcher(xml);\n      if (!m.find()) {\n        LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n        continue;\n      }\n      int number=Integer.parseInt(m.group(1));\n      String nl=m.group(2);\n      xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n      File newKid=new File(dir,Integer.toString(number));\n      move(kid,newKid);\n      FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n      LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n      idToNumber.put(name,number);\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 413,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3591,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 270,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void doMigrate(File dir){\n  idToNumber=new TreeMap<>();\n  File[] kids=dir.listFiles();\n  List<File> kidsList=new ArrayList<>(Arrays.asList(kids));\n  Iterator<File> it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    String name=kid.getName();\n    try {\n      Integer.parseInt(name);\n    }\n catch (    NumberFormatException x) {\n      LOGGER.log(FINE,\"ignoring nonnumeric entry {0}\",name);\n      continue;\n    }\n    try {\n      if (Util.isSymlink(kid)) {\n        LOGGER.log(FINE,\"deleting build number symlink {0} → {1}\",new Object[]{name,Util.resolveSymlink(kid)});\n      }\n else       if (kid.isDirectory()) {\n        LOGGER.log(FINE,\"ignoring build directory {0}\",name);\n        continue;\n      }\n else {\n        LOGGER.log(WARNING,\"need to delete anomalous file entry {0}\",name);\n      }\n      Util.deleteFile(kid);\n      it.remove();\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n  it=kidsList.iterator();\n  while (it.hasNext()) {\n    File kid=it.next();\n    try {\n      String name=kid.getName();\n      try {\n        Integer.parseInt(name);\n        LOGGER.log(FINE,\"skipping new build dir {0}\",name);\n        continue;\n      }\n catch (      NumberFormatException x) {\n      }\n      if (!kid.isDirectory()) {\n        LOGGER.log(FINE,\"skipping non-directory {0}\",name);\n        continue;\n      }\n      long timestamp;\n      try {\nsynchronized (legacyIdFormatter) {\n          timestamp=legacyIdFormatter.parse(name).getTime();\n        }\n      }\n catch (      ParseException x) {\n        LOGGER.log(WARNING,\"found unexpected dir {0}\",name);\n        continue;\n      }\n      File buildXml=new File(kid,\"build.xml\");\n      if (!buildXml.isFile()) {\n        LOGGER.log(WARNING,\"found no build.xml in {0}\",name);\n        continue;\n      }\n      String xml=FileUtils.readFileToString(buildXml,StandardCharsets.UTF_8);\n      Matcher m=NUMBER_ELT.matcher(xml);\n      if (!m.find()) {\n        LOGGER.log(WARNING,\"could not find <number> in {0}/build.xml\",name);\n        continue;\n      }\n      int number=Integer.parseInt(m.group(1));\n      String nl=m.group(2);\n      xml=m.replaceFirst(\"  <id>\" + name + \"</id>\"+ nl+ \"  <timestamp>\"+ timestamp+ \"</timestamp>\"+ nl);\n      File newKid=new File(dir,Integer.toString(number));\n      move(kid,newKid);\n      FileUtils.writeStringToFile(new File(newKid,\"build.xml\"),xml,StandardCharsets.UTF_8);\n      LOGGER.log(FINE,\"fully processed {0} → {1}\",new Object[]{name,number});\n      idToNumber.put(name,number);\n    }\n catch (    Exception x) {\n      LOGGER.log(WARNING,\"failed to process \" + kid,x);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 421,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 241,
        "startColumnNumber" : 24,
        "endLineNumber" : 241,
        "endColumnNumber" : 76
      },
      "nodeContext" : "timestamp=legacyIdFormatter.parse(name).getTime();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.text.DateFormat"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 240,
    "startColumnNumber" : 34,
    "endLineNumber" : 240,
    "endColumnNumber" : 51
  }, {
    "charLength" : 17,
    "startLineNumber" : 241,
    "startColumnNumber" : 36,
    "endLineNumber" : 241,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}