{
  "id" : 22,
  "expression" : "CreateMode.PERSISTENT",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/server/CRCTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CreateMode.PERSISTENT",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 97,
      "startColumnNumber" : 41,
      "endLineNumber" : 97,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 63
      },
      "nodeContext" : "zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 64
      },
      "nodeContext" : "zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 95,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 2000; i++) {\n  zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 83,
        "startColumnNumber" : 48,
        "endLineNumber" : 143,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=150;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  for (int i=0; i < 2000; i++) {\n    zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  File versionDir=new File(tmpDir,\"version-2\");\n  File[] list=versionDir.listFiles();\n  File snapFile=null;\n  File logFile=null;\n  for (  File file : list) {\n    LOG.info(\"file is \" + file);\n    if (file.getName().startsWith(\"log\")) {\n      logFile=file;\n      corruptFile(logFile);\n    }\n  }\n  FileTxnLog flog=new FileTxnLog(versionDir);\n  TxnIterator itr=flog.read(1);\n  try {\n    while (itr.next()) {\n    }\n    assertTrue(false);\n  }\n catch (  IOException ie) {\n    LOG.info(\"crc corruption\",ie);\n  }\n  itr.close();\n  FileSnap snap=new FileSnap(versionDir);\n  snapFile=snap.findMostRecentSnapshot();\n  corruptFile(snapFile);\n  DataTree dt=new DataTree();\n  Map<Long,Integer> sessions=new ConcurrentHashMap<Long,Integer>();\n  try {\n    snap.deserialize(dt,sessions);\n    assertTrue(false);\n  }\n catch (  IOException ie) {\n    LOG.info(\"checksu failure in snapshot\",ie);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 4
      },
      "nodeContext" : "/** \n * test checksums for the logs and snapshots. the reader should fail on reading  a corrupt snapshot and a corrupt log file\n * @throws Exception\n */\npublic void testChecksums() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=150;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  for (int i=0; i < 2000; i++) {\n    zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n  File versionDir=new File(tmpDir,\"version-2\");\n  File[] list=versionDir.listFiles();\n  File snapFile=null;\n  File logFile=null;\n  for (  File file : list) {\n    LOG.info(\"file is \" + file);\n    if (file.getName().startsWith(\"log\")) {\n      logFile=file;\n      corruptFile(logFile);\n    }\n  }\n  FileTxnLog flog=new FileTxnLog(versionDir);\n  TxnIterator itr=flog.read(1);\n  try {\n    while (itr.next()) {\n    }\n    assertTrue(false);\n  }\n catch (  IOException ie) {\n    LOG.info(\"crc corruption\",ie);\n  }\n  itr.close();\n  FileSnap snap=new FileSnap(versionDir);\n  snapFile=snap.findMostRecentSnapshot();\n  corruptFile(snapFile);\n  DataTree dt=new DataTree();\n  Map<Long,Integer> sessions=new ConcurrentHashMap<Long,Integer>();\n  try {\n    snap.deserialize(dt,sessions);\n    assertTrue(false);\n  }\n catch (  IOException ie) {\n    LOG.info(\"checksu failure in snapshot\",ie);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 314,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 63
      },
      "nodeContext" : "zk.create(\"/crctest- \" + i,(\"/crctest- \" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.CreateMode"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 97,
    "startColumnNumber" : 41,
    "endLineNumber" : 97,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}