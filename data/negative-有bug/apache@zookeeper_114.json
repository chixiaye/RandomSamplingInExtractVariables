{
  "id" : 114,
  "expression" : "self.initLimit",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/quorum/Leader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "self.initLimit",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 272,
      "startColumnNumber" : 32,
      "endLineNumber" : 272,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 46
      },
      "nodeContext" : "self.tick > self.initLimit",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 272,
        "startColumnNumber" : 16,
        "endLineNumber" : 283,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (self.tick > self.initLimit) {\n  shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n  if (followers.size() >= self.quorumPeers.size() / 2) {\n    LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 271,
        "startColumnNumber" : 78,
        "endLineNumber" : 286,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (self.tick > self.initLimit) {\n    shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n    if (followers.size() >= self.quorumPeers.size() / 2) {\n      LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n    }\n    return;\n  }\n  Thread.sleep(self.tickTime);\n  self.tick++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 271,
        "startColumnNumber" : 12,
        "endLineNumber" : 286,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (newLeaderProposal.ackCount <= self.quorumPeers.size() / 2) {\n  if (self.tick > self.initLimit) {\n    shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n    if (followers.size() >= self.quorumPeers.size() / 2) {\n      LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n    }\n    return;\n  }\n  Thread.sleep(self.tickTime);\n  self.tick++;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 72,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3576,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  self.tick=0;\n  zk.loadData();\n  zk.startup();\n  long epoch=self.getLastLoggedZxid() >> 32L;\n  epoch++;\n  zk.setZxid(epoch << 32L);\n  zk.dataTree.lastProcessedZxid=zk.getZxid();\n  lastProposed=zk.getZxid();\n  newLeaderProposal.packet=new QuorumPacket(NEWLEADER,zk.getZxid(),null,null);\n  if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {\n    LOG.info(\"NEWLEADER proposal has Zxid of \" + Long.toHexString(newLeaderProposal.packet.getZxid()));\n  }\n  outstandingProposals.add(newLeaderProposal);\n  cnxAcceptor=new FollowerCnxAcceptor();\n  cnxAcceptor.start();\n  newLeaderProposal.ackCount++;\n  while (newLeaderProposal.ackCount <= self.quorumPeers.size() / 2) {\n    if (self.tick > self.initLimit) {\n      shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n      if (followers.size() >= self.quorumPeers.size() / 2) {\n        LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n      }\n      return;\n    }\n    Thread.sleep(self.tickTime);\n    self.tick++;\n  }\n  if (!System.getProperty(\"zookeeper.leaderServes\",\"yes\").equals(\"no\")) {\n    self.cnxnFactory.setZooKeeperServer(zk);\n  }\n  boolean tickSkip=true;\n  while (true) {\n    Thread.sleep(self.tickTime / 2);\n    if (!tickSkip) {\n      self.tick++;\n    }\n    int syncedCount=0;\nsynchronized (followers) {\n      for (      FollowerHandler f : followers) {\n        if (f.synced()) {\n          syncedCount++;\n        }\n        f.ping();\n      }\n    }\n    if (!tickSkip && syncedCount < self.quorumPeers.size() / 2) {\n      shutdown(\"Only \" + syncedCount + \" followers, need \"+ (self.quorumPeers.size() / 2));\n      return;\n    }\n    tickSkip=!tickSkip;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3636,
        "startLineNumber" : 245,
        "startColumnNumber" : 8,
        "endLineNumber" : 328,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  self.tick=0;\n  zk.loadData();\n  zk.startup();\n  long epoch=self.getLastLoggedZxid() >> 32L;\n  epoch++;\n  zk.setZxid(epoch << 32L);\n  zk.dataTree.lastProcessedZxid=zk.getZxid();\n  lastProposed=zk.getZxid();\n  newLeaderProposal.packet=new QuorumPacket(NEWLEADER,zk.getZxid(),null,null);\n  if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {\n    LOG.info(\"NEWLEADER proposal has Zxid of \" + Long.toHexString(newLeaderProposal.packet.getZxid()));\n  }\n  outstandingProposals.add(newLeaderProposal);\n  cnxAcceptor=new FollowerCnxAcceptor();\n  cnxAcceptor.start();\n  newLeaderProposal.ackCount++;\n  while (newLeaderProposal.ackCount <= self.quorumPeers.size() / 2) {\n    if (self.tick > self.initLimit) {\n      shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n      if (followers.size() >= self.quorumPeers.size() / 2) {\n        LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n      }\n      return;\n    }\n    Thread.sleep(self.tickTime);\n    self.tick++;\n  }\n  if (!System.getProperty(\"zookeeper.leaderServes\",\"yes\").equals(\"no\")) {\n    self.cnxnFactory.setZooKeeperServer(zk);\n  }\n  boolean tickSkip=true;\n  while (true) {\n    Thread.sleep(self.tickTime / 2);\n    if (!tickSkip) {\n      self.tick++;\n    }\n    int syncedCount=0;\nsynchronized (followers) {\n      for (      FollowerHandler f : followers) {\n        if (f.synced()) {\n          syncedCount++;\n        }\n        f.ping();\n      }\n    }\n    if (!tickSkip && syncedCount < self.quorumPeers.size() / 2) {\n      shutdown(\"Only \" + syncedCount + \" followers, need \"+ (self.quorumPeers.size() / 2));\n      return;\n    }\n    tickSkip=!tickSkip;\n  }\n}\n  finally {\n  zk.unregisterJMX(this);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 295,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3726,
        "startLineNumber" : 242,
        "startColumnNumber" : 57,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  zk.registerJMX(new LeaderBean(this,zk),self.jmxLocalPeerBean);\n  try {\n    self.tick=0;\n    zk.loadData();\n    zk.startup();\n    long epoch=self.getLastLoggedZxid() >> 32L;\n    epoch++;\n    zk.setZxid(epoch << 32L);\n    zk.dataTree.lastProcessedZxid=zk.getZxid();\n    lastProposed=zk.getZxid();\n    newLeaderProposal.packet=new QuorumPacket(NEWLEADER,zk.getZxid(),null,null);\n    if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {\n      LOG.info(\"NEWLEADER proposal has Zxid of \" + Long.toHexString(newLeaderProposal.packet.getZxid()));\n    }\n    outstandingProposals.add(newLeaderProposal);\n    cnxAcceptor=new FollowerCnxAcceptor();\n    cnxAcceptor.start();\n    newLeaderProposal.ackCount++;\n    while (newLeaderProposal.ackCount <= self.quorumPeers.size() / 2) {\n      if (self.tick > self.initLimit) {\n        shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n        if (followers.size() >= self.quorumPeers.size() / 2) {\n          LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n        }\n        return;\n      }\n      Thread.sleep(self.tickTime);\n      self.tick++;\n    }\n    if (!System.getProperty(\"zookeeper.leaderServes\",\"yes\").equals(\"no\")) {\n      self.cnxnFactory.setZooKeeperServer(zk);\n    }\n    boolean tickSkip=true;\n    while (true) {\n      Thread.sleep(self.tickTime / 2);\n      if (!tickSkip) {\n        self.tick++;\n      }\n      int syncedCount=0;\nsynchronized (followers) {\n        for (        FollowerHandler f : followers) {\n          if (f.synced()) {\n            syncedCount++;\n          }\n          f.ping();\n        }\n      }\n      if (!tickSkip && syncedCount < self.quorumPeers.size() / 2) {\n        shutdown(\"Only \" + syncedCount + \" followers, need \"+ (self.quorumPeers.size() / 2));\n        return;\n      }\n      tickSkip=!tickSkip;\n    }\n  }\n  finally {\n    zk.unregisterJMX(this);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 308,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3925,
        "startLineNumber" : 236,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method is main function that is called to lead\n * @throws IOException\n * @throws InterruptedException\n */\nvoid lead() throws IOException, InterruptedException {\n  zk.registerJMX(new LeaderBean(this,zk),self.jmxLocalPeerBean);\n  try {\n    self.tick=0;\n    zk.loadData();\n    zk.startup();\n    long epoch=self.getLastLoggedZxid() >> 32L;\n    epoch++;\n    zk.setZxid(epoch << 32L);\n    zk.dataTree.lastProcessedZxid=zk.getZxid();\n    lastProposed=zk.getZxid();\n    newLeaderProposal.packet=new QuorumPacket(NEWLEADER,zk.getZxid(),null,null);\n    if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {\n      LOG.info(\"NEWLEADER proposal has Zxid of \" + Long.toHexString(newLeaderProposal.packet.getZxid()));\n    }\n    outstandingProposals.add(newLeaderProposal);\n    cnxAcceptor=new FollowerCnxAcceptor();\n    cnxAcceptor.start();\n    newLeaderProposal.ackCount++;\n    while (newLeaderProposal.ackCount <= self.quorumPeers.size() / 2) {\n      if (self.tick > self.initLimit) {\n        shutdown(\"Waiting for \" + (self.quorumPeers.size() / 2) + \" followers, only synced with \"+ newLeaderProposal.ackCount);\n        if (followers.size() >= self.quorumPeers.size() / 2) {\n          LOG.warn(\"Enough followers present. \" + \"Perhaps the initTicks need to be increased.\");\n        }\n        return;\n      }\n      Thread.sleep(self.tickTime);\n      self.tick++;\n    }\n    if (!System.getProperty(\"zookeeper.leaderServes\",\"yes\").equals(\"no\")) {\n      self.cnxnFactory.setZooKeeperServer(zk);\n    }\n    boolean tickSkip=true;\n    while (true) {\n      Thread.sleep(self.tickTime / 2);\n      if (!tickSkip) {\n        self.tick++;\n      }\n      int syncedCount=0;\nsynchronized (followers) {\n        for (        FollowerHandler f : followers) {\n          if (f.synced()) {\n            syncedCount++;\n          }\n          f.ping();\n        }\n      }\n      if (!tickSkip && syncedCount < self.quorumPeers.size() / 2) {\n        shutdown(\"Only \" + syncedCount + \" followers, need \"+ (self.quorumPeers.size() / 2));\n        return;\n      }\n      tickSkip=!tickSkip;\n    }\n  }\n  finally {\n    zk.unregisterJMX(this);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 272,
        "startColumnNumber" : 20,
        "endLineNumber" : 272,
        "endColumnNumber" : 46
      },
      "nodeContext" : "self.tick > self.initLimit",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 272,
    "startColumnNumber" : 32,
    "endLineNumber" : 272,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}