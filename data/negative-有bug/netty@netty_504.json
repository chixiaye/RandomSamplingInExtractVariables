{
  "id" : 504,
  "expression" : "recvPeer1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-udt/src/test/java/io/netty/test/udt/bench/xfer/UdtNative.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "recvPeer1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 254,
      "startColumnNumber" : 24,
      "endLineNumber" : 254,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 34
      },
      "nodeContext" : "executor.submit(recvPeer1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 35
      },
      "nodeContext" : "executor.submit(recvPeer1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4232,
        "startLineNumber" : 122,
        "startColumnNumber" : 58,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int threadCount=4;\n  final CountDownLatch completion=new CountDownLatch(threadCount);\n  final AtomicBoolean isOn=new AtomicBoolean(true);\n  final Runnable sendPeer1=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      buffer.putLong(0,sequence++);\n      final int count=peer1.send(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      measure().rate().mark(count);\n    }\n  }\n;\n  final Runnable sendPeer2=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      buffer.putLong(0,sequence++);\n      final int count=peer2.send(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n    }\n  }\n;\n  final Runnable recvPeer1=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      final int count=peer1.receive(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      if (sequence++ != buffer.getLong(0)) {\n        throw new Exception(\"sequence\");\n      }\n    }\n  }\n;\n  final Runnable recvPeer2=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      final int count=peer2.receive(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      if (sequence++ != buffer.getLong(0)) {\n        throw new Exception(\"sequence\");\n      }\n    }\n  }\n;\n  final ExecutorService executor=Executors.newFixedThreadPool(threadCount);\n  executor.submit(recvPeer1);\n  executor.submit(recvPeer2);\n  executor.submit(sendPeer1);\n  executor.submit(sendPeer2);\n  markWait(duration);\n  isOn.set(false);\n  completion.await();\n  executor.shutdownNow();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 476,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4319,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 266,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * benchmark invocation \n */\npublic void timeMain(final int reps) throws Exception {\n  final int threadCount=4;\n  final CountDownLatch completion=new CountDownLatch(threadCount);\n  final AtomicBoolean isOn=new AtomicBoolean(true);\n  final Runnable sendPeer1=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      buffer.putLong(0,sequence++);\n      final int count=peer1.send(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      measure().rate().mark(count);\n    }\n  }\n;\n  final Runnable sendPeer2=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      buffer.putLong(0,sequence++);\n      final int count=peer2.send(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n    }\n  }\n;\n  final Runnable recvPeer1=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      final int count=peer1.receive(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      if (sequence++ != buffer.getLong(0)) {\n        throw new Exception(\"sequence\");\n      }\n    }\n  }\n;\n  final Runnable recvPeer2=new Runnable(){\n    @Override public void run(){\n      try {\n        while (isOn.get()) {\n          runCore();\n        }\n      }\n catch (      final Exception e) {\n        log.error(\"\",e);\n      }\n finally {\n        completion.countDown();\n      }\n    }\n    final ByteBuffer buffer=ByteBuffer.allocateDirect(message);\n    long sequence;\n    void runCore() throws Exception {\n      buffer.rewind();\n      final int count=peer2.receive(buffer);\n      if (count != message) {\n        throw new Exception(\"count\");\n      }\n      if (sequence++ != buffer.getLong(0)) {\n        throw new Exception(\"sequence\");\n      }\n    }\n  }\n;\n  final ExecutorService executor=Executors.newFixedThreadPool(threadCount);\n  executor.submit(recvPeer1);\n  executor.submit(recvPeer2);\n  executor.submit(sendPeer1);\n  executor.submit(sendPeer2);\n  markWait(duration);\n  isOn.set(false);\n  completion.await();\n  executor.shutdownNow();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 487,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 35
      },
      "nodeContext" : "executor.submit(recvPeer1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Runnable"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 254,
    "startColumnNumber" : 24,
    "endLineNumber" : 254,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}