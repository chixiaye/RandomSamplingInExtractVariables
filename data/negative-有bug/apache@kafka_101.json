{
  "id" : 101,
  "expression" : "\"earliest\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorDemo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"earliest\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 116,
      "startColumnNumber" : 67,
      "endLineNumber" : 116,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 78
      },
      "nodeContext" : "props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 79
      },
      "nodeContext" : "props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 98,
        "startColumnNumber" : 68,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Properties props=new Properties();\n  if (args != null && args.length > 0) {\n    try (final FileInputStream fis=new FileInputStream(args[0])){\n      props.load(fis);\n    }\n     if (args.length > 1) {\n      System.out.println(\"Warning: Some command line arguments were ignored. This demo only accepts an optional configuration file.\");\n    }\n  }\n  props.putIfAbsent(StreamsConfig.APPLICATION_ID_CONFIG,\"streams-wordcount-processor\");\n  props.putIfAbsent(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9092\");\n  props.putIfAbsent(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\n  props.putIfAbsent(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  props.putIfAbsent(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n  final Topology builder=new Topology();\n  builder.addSource(\"Source\",\"streams-plaintext-input\");\n  builder.addProcessor(\"Process\",WordCountProcessor::new,\"Source\");\n  builder.addStateStore(Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore(\"Counts\"),Serdes.String(),Serdes.Integer()),\"Process\");\n  builder.addSink(\"Sink\",\"streams-wordcount-processor-output\",\"Process\");\n  final KafkaStreams streams=new KafkaStreams(builder,props);\n  final CountDownLatch latch=new CountDownLatch(1);\n  Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\"){\n    @Override public void run(){\n      streams.close();\n      latch.countDown();\n    }\n  }\n);\n  try {\n    streams.start();\n    latch.await();\n  }\n catch (  final Throwable e) {\n    System.exit(1);\n  }\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 233,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2237,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(final String[] args) throws IOException {\n  final Properties props=new Properties();\n  if (args != null && args.length > 0) {\n    try (final FileInputStream fis=new FileInputStream(args[0])){\n      props.load(fis);\n    }\n     if (args.length > 1) {\n      System.out.println(\"Warning: Some command line arguments were ignored. This demo only accepts an optional configuration file.\");\n    }\n  }\n  props.putIfAbsent(StreamsConfig.APPLICATION_ID_CONFIG,\"streams-wordcount-processor\");\n  props.putIfAbsent(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9092\");\n  props.putIfAbsent(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);\n  props.putIfAbsent(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  props.putIfAbsent(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n  final Topology builder=new Topology();\n  builder.addSource(\"Source\",\"streams-plaintext-input\");\n  builder.addProcessor(\"Process\",WordCountProcessor::new,\"Source\");\n  builder.addStateStore(Stores.keyValueStoreBuilder(Stores.inMemoryKeyValueStore(\"Counts\"),Serdes.String(),Serdes.Integer()),\"Process\");\n  builder.addSink(\"Sink\",\"streams-wordcount-processor-output\",\"Process\");\n  final KafkaStreams streams=new KafkaStreams(builder,props);\n  final CountDownLatch latch=new CountDownLatch(1);\n  Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\"){\n    @Override public void run(){\n      streams.close();\n      latch.countDown();\n    }\n  }\n);\n  try {\n    streams.start();\n    latch.await();\n  }\n catch (  final Throwable e) {\n    System.exit(1);\n  }\n  System.exit(0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 247,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 79
      },
      "nodeContext" : "props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,\"earliest\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 116,
    "startColumnNumber" : 67,
    "endLineNumber" : 116,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}