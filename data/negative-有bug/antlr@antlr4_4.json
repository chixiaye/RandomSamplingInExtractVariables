{
  "id" : 4,
  "expression" : "(QuantifierAST)plusAST",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/automata/ParserATNFactory.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(QuantifierAST)plusAST",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 539,
      "startColumnNumber" : 21,
      "endLineNumber" : 539,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 539,
        "startColumnNumber" : 20,
        "endLineNumber" : 539,
        "endColumnNumber" : 44
      },
      "nodeContext" : "((QuantifierAST)plusAST)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 539,
        "startColumnNumber" : 20,
        "endLineNumber" : 539,
        "endColumnNumber" : 55
      },
      "nodeContext" : "((QuantifierAST)plusAST).isGreedy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 539,
        "startColumnNumber" : 19,
        "endLineNumber" : 539,
        "endColumnNumber" : 55
      },
      "nodeContext" : "!((QuantifierAST)plusAST).isGreedy()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 539,
        "startColumnNumber" : 2,
        "endLineNumber" : 539,
        "endColumnNumber" : 55
      },
      "nodeContext" : "loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 539,
        "startColumnNumber" : 2,
        "endLineNumber" : 539,
        "endColumnNumber" : 56
      },
      "nodeContext" : "loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1178,
        "startLineNumber" : 533,
        "startColumnNumber" : 52,
        "endLineNumber" : 564,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  PlusBlockStartState blkStart=(PlusBlockStartState)blk.left;\n  BlockEndState blkEnd=(BlockEndState)blk.right;\n  preventEpsilonClosureBlocks.add(new Triple<Rule,ATNState,ATNState>(currentRule,blkStart,blkEnd));\n  PlusLoopbackState loop=newState(PlusLoopbackState.class,plusAST);\n  loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n  atn.defineDecisionState(loop);\n  LoopEndState end=newState(LoopEndState.class,plusAST);\n  blkStart.loopBackState=loop;\n  end.loopBackState=loop;\n  plusAST.atnState=loop;\n  epsilon(blkEnd,loop);\n  BlockAST blkAST=(BlockAST)plusAST.getChild(0);\n  if (((QuantifierAST)plusAST).isGreedy()) {\n    if (expectNonGreedy(blkAST)) {\n      g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK,g.fileName,plusAST.getToken(),plusAST.getToken().getText());\n    }\n    epsilon(loop,blkStart);\n    epsilon(loop,end);\n  }\n else {\n    epsilon(loop,end);\n    epsilon(loop,blkStart);\n  }\n  return new Handle(blkStart,end);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 519,
        "startColumnNumber" : 1,
        "endLineNumber" : 564,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * From  {@code (blk)+} build<pre> |---------| v         | [o-blk-o]-&gt;o-&gt;o </pre> We add a decision for loop back node to the existing one at  {@code blk}start.\n */\n@Override public Handle plus(GrammarAST plusAST,Handle blk){\n  PlusBlockStartState blkStart=(PlusBlockStartState)blk.left;\n  BlockEndState blkEnd=(BlockEndState)blk.right;\n  preventEpsilonClosureBlocks.add(new Triple<Rule,ATNState,ATNState>(currentRule,blkStart,blkEnd));\n  PlusLoopbackState loop=newState(PlusLoopbackState.class,plusAST);\n  loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n  atn.defineDecisionState(loop);\n  LoopEndState end=newState(LoopEndState.class,plusAST);\n  blkStart.loopBackState=loop;\n  end.loopBackState=loop;\n  plusAST.atnState=loop;\n  epsilon(blkEnd,loop);\n  BlockAST blkAST=(BlockAST)plusAST.getChild(0);\n  if (((QuantifierAST)plusAST).isGreedy()) {\n    if (expectNonGreedy(blkAST)) {\n      g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK,g.fileName,plusAST.getToken(),plusAST.getToken().getText());\n    }\n    epsilon(loop,blkStart);\n    epsilon(loop,end);\n  }\n else {\n    epsilon(loop,end);\n    epsilon(loop,blkStart);\n  }\n  return new Handle(blkStart,end);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 539,
        "startColumnNumber" : 2,
        "endLineNumber" : 539,
        "endColumnNumber" : 56
      },
      "nodeContext" : "loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "org.antlr.v4.tool.ast.QuantifierAST"
  }, {
    "nodeContext" : "(QuantifierAST)plusAST",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 549,
      "startColumnNumber" : 8,
      "endLineNumber" : 549,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 549,
        "startColumnNumber" : 7,
        "endLineNumber" : 549,
        "endColumnNumber" : 31
      },
      "nodeContext" : "((QuantifierAST)plusAST)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 549,
        "startColumnNumber" : 7,
        "endLineNumber" : 549,
        "endColumnNumber" : 42
      },
      "nodeContext" : "((QuantifierAST)plusAST).isGreedy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 549,
        "startColumnNumber" : 2,
        "endLineNumber" : 561,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (((QuantifierAST)plusAST).isGreedy()) {\n  if (expectNonGreedy(blkAST)) {\n    g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK,g.fileName,plusAST.getToken(),plusAST.getToken().getText());\n  }\n  epsilon(loop,blkStart);\n  epsilon(loop,end);\n}\n else {\n  epsilon(loop,end);\n  epsilon(loop,blkStart);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1178,
        "startLineNumber" : 533,
        "startColumnNumber" : 52,
        "endLineNumber" : 564,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  PlusBlockStartState blkStart=(PlusBlockStartState)blk.left;\n  BlockEndState blkEnd=(BlockEndState)blk.right;\n  preventEpsilonClosureBlocks.add(new Triple<Rule,ATNState,ATNState>(currentRule,blkStart,blkEnd));\n  PlusLoopbackState loop=newState(PlusLoopbackState.class,plusAST);\n  loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n  atn.defineDecisionState(loop);\n  LoopEndState end=newState(LoopEndState.class,plusAST);\n  blkStart.loopBackState=loop;\n  end.loopBackState=loop;\n  plusAST.atnState=loop;\n  epsilon(blkEnd,loop);\n  BlockAST blkAST=(BlockAST)plusAST.getChild(0);\n  if (((QuantifierAST)plusAST).isGreedy()) {\n    if (expectNonGreedy(blkAST)) {\n      g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK,g.fileName,plusAST.getToken(),plusAST.getToken().getText());\n    }\n    epsilon(loop,blkStart);\n    epsilon(loop,end);\n  }\n else {\n    epsilon(loop,end);\n    epsilon(loop,blkStart);\n  }\n  return new Handle(blkStart,end);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 519,
        "startColumnNumber" : 1,
        "endLineNumber" : 564,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * From  {@code (blk)+} build<pre> |---------| v         | [o-blk-o]-&gt;o-&gt;o </pre> We add a decision for loop back node to the existing one at  {@code blk}start.\n */\n@Override public Handle plus(GrammarAST plusAST,Handle blk){\n  PlusBlockStartState blkStart=(PlusBlockStartState)blk.left;\n  BlockEndState blkEnd=(BlockEndState)blk.right;\n  preventEpsilonClosureBlocks.add(new Triple<Rule,ATNState,ATNState>(currentRule,blkStart,blkEnd));\n  PlusLoopbackState loop=newState(PlusLoopbackState.class,plusAST);\n  loop.nonGreedy=!((QuantifierAST)plusAST).isGreedy();\n  atn.defineDecisionState(loop);\n  LoopEndState end=newState(LoopEndState.class,plusAST);\n  blkStart.loopBackState=loop;\n  end.loopBackState=loop;\n  plusAST.atnState=loop;\n  epsilon(blkEnd,loop);\n  BlockAST blkAST=(BlockAST)plusAST.getChild(0);\n  if (((QuantifierAST)plusAST).isGreedy()) {\n    if (expectNonGreedy(blkAST)) {\n      g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK,g.fileName,plusAST.getToken(),plusAST.getToken().getText());\n    }\n    epsilon(loop,blkStart);\n    epsilon(loop,end);\n  }\n else {\n    epsilon(loop,end);\n    epsilon(loop,blkStart);\n  }\n  return new Handle(blkStart,end);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 549,
        "startColumnNumber" : 7,
        "endLineNumber" : 549,
        "endColumnNumber" : 42
      },
      "nodeContext" : "((QuantifierAST)plusAST).isGreedy()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.antlr.v4.tool.ast.QuantifierAST"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 539,
    "startColumnNumber" : 21,
    "endLineNumber" : 539,
    "endColumnNumber" : 43
  }, {
    "charLength" : 22,
    "startLineNumber" : 549,
    "startColumnNumber" : 8,
    "endLineNumber" : 549,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}