{
  "id" : 310,
  "expression" : "ApplicationDependencies.getJobManager()",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/groups/ui/migration/GroupsV1MigrationRepository.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ApplicationDependencies.getJobManager()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 81,
      "startColumnNumber" : 11,
      "endLineNumber" : 81,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 81,
        "startColumnNumber" : 11,
        "endLineNumber" : 81,
        "endColumnNumber" : 102
      },
      "nodeContext" : "ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 81,
        "startColumnNumber" : 11,
        "endLineNumber" : 81,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 83,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()) {\n  Log.w(TAG,\"Failed to refresh capabilities in time!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 80,
        "startColumnNumber" : 25,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()) {\n    Log.w(TAG,\"Failed to refresh capabilities in time!\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Job job : jobs) {\n  if (!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()) {\n    Log.w(TAG,\"Failed to refresh capabilities in time!\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2341,
        "startLineNumber" : 65,
        "startColumnNumber" : 82,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Recipient group=Recipient.resolved(groupRecipientId);\n  if (!group.isPushV1Group()) {\n    return new MigrationState(Collections.emptyList(),Collections.emptyList());\n  }\n  Set<RecipientId> needsRefresh=Stream.of(group.getParticipants()).filter(r -> r.getGroupsV2Capability() != Recipient.Capability.SUPPORTED || r.getGroupsV1MigrationCapability() != Recipient.Capability.SUPPORTED).map(Recipient::getId).collect(Collectors.toSet());\n  List<Job> jobs=RetrieveProfileJob.forRecipients(needsRefresh);\n  for (  Job job : jobs) {\n    if (!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()) {\n      Log.w(TAG,\"Failed to refresh capabilities in time!\");\n    }\n  }\n  try {\n    List<Recipient> registered=Stream.of(group.getParticipants()).filter(Recipient::isRegistered).toList();\n    RecipientUtil.ensureUuidsAreAvailable(ApplicationDependencies.getApplication(),registered);\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Failed to refresh UUIDs!\",e);\n  }\n  group=group.fresh();\n  List<Recipient> ineligible=Stream.of(group.getParticipants()).filter(r -> !r.hasUuid() || r.getGroupsV2Capability() != Recipient.Capability.SUPPORTED || r.getGroupsV1MigrationCapability() != Recipient.Capability.SUPPORTED || r.getRegistered() != RecipientDatabase.RegisteredState.REGISTERED).toList();\n  List<Recipient> invites=Stream.of(group.getParticipants()).filterNot(ineligible::contains).filterNot(Recipient::isSelf).filter(r -> r.getProfileKey() == null).toList();\n  return new MigrationState(invites,ineligible);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2437,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private MigrationState getMigrationState(@NonNull RecipientId groupRecipientId){\n  Recipient group=Recipient.resolved(groupRecipientId);\n  if (!group.isPushV1Group()) {\n    return new MigrationState(Collections.emptyList(),Collections.emptyList());\n  }\n  Set<RecipientId> needsRefresh=Stream.of(group.getParticipants()).filter(r -> r.getGroupsV2Capability() != Recipient.Capability.SUPPORTED || r.getGroupsV1MigrationCapability() != Recipient.Capability.SUPPORTED).map(Recipient::getId).collect(Collectors.toSet());\n  List<Job> jobs=RetrieveProfileJob.forRecipients(needsRefresh);\n  for (  Job job : jobs) {\n    if (!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()) {\n      Log.w(TAG,\"Failed to refresh capabilities in time!\");\n    }\n  }\n  try {\n    List<Recipient> registered=Stream.of(group.getParticipants()).filter(Recipient::isRegistered).toList();\n    RecipientUtil.ensureUuidsAreAvailable(ApplicationDependencies.getApplication(),registered);\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Failed to refresh UUIDs!\",e);\n  }\n  group=group.fresh();\n  List<Recipient> ineligible=Stream.of(group.getParticipants()).filter(r -> !r.hasUuid() || r.getGroupsV2Capability() != Recipient.Capability.SUPPORTED || r.getGroupsV1MigrationCapability() != Recipient.Capability.SUPPORTED || r.getRegistered() != RecipientDatabase.RegisteredState.REGISTERED).toList();\n  List<Recipient> invites=Stream.of(group.getParticipants()).filterNot(ineligible::contains).filterNot(Recipient::isSelf).filter(r -> r.getProfileKey() == null).toList();\n  return new MigrationState(invites,ineligible);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 276,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 114
      },
      "nodeContext" : "!ApplicationDependencies.getJobManager().runSynchronously(job,TimeUnit.SECONDS.toMillis(3)).isPresent()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.thoughtcrime.securesms.jobmanager.JobManager"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 81,
    "startColumnNumber" : 11,
    "endLineNumber" : 81,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}