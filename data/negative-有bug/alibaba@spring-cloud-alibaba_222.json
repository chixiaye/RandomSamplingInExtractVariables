{
  "id" : 222,
  "expression" : "consumer",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageSource.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "consumer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 106,
      "startColumnNumber" : 3,
      "endLineNumber" : 106,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 106,
        "startColumnNumber" : 3,
        "endLineNumber" : 107,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 106,
        "startColumnNumber" : 3,
        "endLineNumber" : 107,
        "endColumnNumber" : 60
      },
      "nodeContext" : "consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1705,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public synchronized void start(){\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 106,
        "startColumnNumber" : 3,
        "endLineNumber" : 107,
        "endColumnNumber" : 59
      },
      "nodeContext" : "consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.integration.DefaultMQPullConsumer"
  }, {
    "nodeContext" : "consumer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 108,
      "startColumnNumber" : 3,
      "endLineNumber" : 108,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 108,
        "startColumnNumber" : 3,
        "endLineNumber" : 109,
        "endColumnNumber" : 64
      },
      "nodeContext" : "consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 108,
        "startColumnNumber" : 3,
        "endLineNumber" : 109,
        "endColumnNumber" : 65
      },
      "nodeContext" : "consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1705,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public synchronized void start(){\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 108,
        "startColumnNumber" : 3,
        "endLineNumber" : 109,
        "endColumnNumber" : 64
      },
      "nodeContext" : "consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.integration.DefaultMQPullConsumer"
  }, {
    "nodeContext" : "consumer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 110,
      "startColumnNumber" : 3,
      "endLineNumber" : 110,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 52
      },
      "nodeContext" : "consumer.setMessageModel(MessageModel.CLUSTERING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer.setMessageModel(MessageModel.CLUSTERING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1705,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public synchronized void start(){\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 110,
        "startColumnNumber" : 3,
        "endLineNumber" : 110,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer.setMessageModel(MessageModel.CLUSTERING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.integration.DefaultMQPullConsumer"
  }, {
    "nodeContext" : "consumer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 125,
      "startColumnNumber" : 3,
      "endLineNumber" : 125,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 125,
        "startColumnNumber" : 3,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n  @Override public void messageQueueChanged(  String topic,  Set<MessageQueue> mqAll,  Set<MessageQueue> mqDivided){\n    log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:      RocketMQMessageSource.this.resetMessageQueues(mqAll);\n    break;\ncase CLUSTERING:  RocketMQMessageSource.this.resetMessageQueues(mqDivided);\nbreak;\ndefault:break;\n}\n}\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 603,
        "startLineNumber" : 125,
        "startColumnNumber" : 3,
        "endLineNumber" : 143,
        "endColumnNumber" : 6
      },
      "nodeContext" : "consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n  @Override public void messageQueueChanged(  String topic,  Set<MessageQueue> mqAll,  Set<MessageQueue> mqDivided){\n    log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:      RocketMQMessageSource.this.resetMessageQueues(mqAll);\n    break;\ncase CLUSTERING:  RocketMQMessageSource.this.resetMessageQueues(mqDivided);\nbreak;\ndefault:break;\n}\n}\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 66,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1705,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public synchronized void start(){\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 125,
        "startColumnNumber" : 3,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n  @Override public void messageQueueChanged(  String topic,  Set<MessageQueue> mqAll,  Set<MessageQueue> mqDivided){\n    log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:      RocketMQMessageSource.this.resetMessageQueues(mqAll);\n    break;\ncase CLUSTERING:  RocketMQMessageSource.this.resetMessageQueues(mqDivided);\nbreak;\ndefault:break;\n}\n}\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 65,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.integration.DefaultMQPullConsumer"
  }, {
    "nodeContext" : "consumer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 144,
      "startColumnNumber" : 3,
      "endLineNumber" : 144,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 144,
        "startColumnNumber" : 3,
        "endLineNumber" : 144,
        "endColumnNumber" : 19
      },
      "nodeContext" : "consumer.start()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 144,
        "startColumnNumber" : 3,
        "endLineNumber" : 144,
        "endColumnNumber" : 20
      },
      "nodeContext" : "consumer.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1389,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1504,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n  consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n  consumer.setMessageModel(MessageModel.CLUSTERING);\n  String tags=rocketMQConsumerProperties.getExtension().getTags();\n  String sql=rocketMQConsumerProperties.getExtension().getSql();\n  if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(tags)) {\n    messageSelector=MessageSelector.byTag(tags);\n  }\n else   if (!StringUtils.isEmpty(sql)) {\n    messageSelector=MessageSelector.bySql(sql);\n  }\n  consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n    @Override public void messageQueueChanged(    String topic,    Set<MessageQueue> mqAll,    Set<MessageQueue> mqDivided){\n      log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:        RocketMQMessageSource.this.resetMessageQueues(mqAll);\n      break;\ncase CLUSTERING:    RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n  break;\ndefault:break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 186,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1661,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1705,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public synchronized void start(){\n  if (this.isRunning()) {\n    throw new IllegalStateException(\"pull consumer already running. \" + this.toString());\n  }\n  try {\n    consumer=new DefaultMQPullConsumer(group);\n    consumer.setNamesrvAddr(rocketMQBinderConfigurationProperties.getNameServer());\n    consumer.setConsumerPullTimeoutMillis(rocketMQConsumerProperties.getExtension().getPullTimeout());\n    consumer.setMessageModel(MessageModel.CLUSTERING);\n    String tags=rocketMQConsumerProperties.getExtension().getTags();\n    String sql=rocketMQConsumerProperties.getExtension().getSql();\n    if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(tags)) {\n      messageSelector=MessageSelector.byTag(tags);\n    }\n else     if (!StringUtils.isEmpty(sql)) {\n      messageSelector=MessageSelector.bySql(sql);\n    }\n    consumer.registerMessageQueueListener(topic,new MessageQueueListener(){\n      @Override public void messageQueueChanged(      String topic,      Set<MessageQueue> mqAll,      Set<MessageQueue> mqDivided){\n        log.info(\"messageQueueChanged, topic='{}', mqAll=`{}`, mqDivided=`{}`\",topic,mqAll,mqDivided);\nswitch (consumer.getMessageModel()) {\ncase BROADCASTING:          RocketMQMessageSource.this.resetMessageQueues(mqAll);\n        break;\ncase CLUSTERING:      RocketMQMessageSource.this.resetMessageQueues(mqDivided);\n    break;\ndefault:  break;\n}\n}\n}\n);\nconsumer.start();\n}\n catch (MQClientException e) {\nlog.error(\"DefaultMQPullConsumer startup error: \" + e.getMessage(),e);\n}\nthis.setRunning(true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 144,
        "startColumnNumber" : 3,
        "endLineNumber" : 144,
        "endColumnNumber" : 20
      },
      "nodeContext" : "consumer.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.cloud.stream.binder.rocketmq.integration.DefaultMQPullConsumer"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 106,
    "startColumnNumber" : 3,
    "endLineNumber" : 106,
    "endColumnNumber" : 11
  }, {
    "charLength" : 8,
    "startLineNumber" : 108,
    "startColumnNumber" : 3,
    "endLineNumber" : 108,
    "endColumnNumber" : 11
  }, {
    "charLength" : 8,
    "startLineNumber" : 110,
    "startColumnNumber" : 3,
    "endLineNumber" : 110,
    "endColumnNumber" : 11
  }, {
    "charLength" : 8,
    "startLineNumber" : 125,
    "startColumnNumber" : 3,
    "endLineNumber" : 125,
    "endColumnNumber" : 11
  }, {
    "charLength" : 8,
    "startLineNumber" : 144,
    "startColumnNumber" : 3,
    "endLineNumber" : 144,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}