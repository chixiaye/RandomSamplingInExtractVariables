{
  "id" : 196,
  "expression" : "BigInteger.ZERO",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/opbehavior/OpBehaviorIntDivTest.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 81,
      "startColumnNumber" : 15,
      "endLineNumber" : 81,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 7
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 81,
      "startColumnNumber" : 73,
      "endLineNumber" : 81,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 89
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 7
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 89
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 87,
      "startColumnNumber" : 15,
      "endLineNumber" : 87,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 87,
      "startColumnNumber" : 57,
      "endLineNumber" : 87,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 87,
        "startColumnNumber" : 32,
        "endLineNumber" : 87,
        "endColumnNumber" : 89
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 6
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 7
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 87,
        "startColumnNumber" : 32,
        "endLineNumber" : 87,
        "endColumnNumber" : 89
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 89,
      "startColumnNumber" : 15,
      "endLineNumber" : 89,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 89,
      "startColumnNumber" : 57,
      "endLineNumber" : 89,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 32,
        "endLineNumber" : 89,
        "endColumnNumber" : 87
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 91,
      "startColumnNumber" : 15,
      "endLineNumber" : 91,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 93,
      "startColumnNumber" : 15,
      "endLineNumber" : 93,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 93,
      "startColumnNumber" : 57,
      "endLineNumber" : 93,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 93,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 87
      },
      "nodeContext" : "op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 95,
      "startColumnNumber" : 15,
      "endLineNumber" : 95,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  }, {
    "nodeContext" : "BigInteger.ZERO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 97,
      "startColumnNumber" : 15,
      "endLineNumber" : 97,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1749,
        "startLineNumber" : 72,
        "startColumnNumber" : 47,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1803,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorIntDiv op=new OpBehaviorIntDiv();\n  BigInteger NEGATIVE_ONE=Utils.convertToUnsignedValue(BigInteger.valueOf(-1),16);\n  BigInteger BIG_POSITIVE=new BigInteger(\"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",16);\n  BigInteger BIG_NEGATIVE=Utils.convertToUnsignedValue(new BigInteger(\"80000000000000000000000000000000\",16),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BigInteger.ZERO),16);\n  Assert.assertEquals(BigInteger.valueOf(0x3E0708EEL),op.evaluateBinary(8,8,BigInteger.valueOf(0x2512345678L),BigInteger.valueOf(0x99)));\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,NEGATIVE_ONE),16);\n  assertEquals(NEGATIVE_ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,NEGATIVE_ONE,NEGATIVE_ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ZERO,BIG_NEGATIVE),16);\n  assertEquals(BIG_NEGATIVE,op.evaluateBinary(1,16,BIG_NEGATIVE,BigInteger.ONE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BigInteger.ONE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_POSITIVE),16);\n  assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_NEGATIVE,BIG_NEGATIVE),16);\n  assertEquals(BigInteger.ONE,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_POSITIVE),16);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertEquals(BigInteger.ZERO,op.evaluateBinary(1,16,BIG_POSITIVE,BIG_NEGATIVE),16);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.math.BigInteger"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 81,
    "startColumnNumber" : 15,
    "endLineNumber" : 81,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 81,
    "startColumnNumber" : 73,
    "endLineNumber" : 81,
    "endColumnNumber" : 88
  }, {
    "charLength" : 15,
    "startLineNumber" : 87,
    "startColumnNumber" : 15,
    "endLineNumber" : 87,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 87,
    "startColumnNumber" : 57,
    "endLineNumber" : 87,
    "endColumnNumber" : 72
  }, {
    "charLength" : 15,
    "startLineNumber" : 89,
    "startColumnNumber" : 15,
    "endLineNumber" : 89,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 89,
    "startColumnNumber" : 57,
    "endLineNumber" : 89,
    "endColumnNumber" : 72
  }, {
    "charLength" : 15,
    "startLineNumber" : 91,
    "startColumnNumber" : 15,
    "endLineNumber" : 91,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 93,
    "startColumnNumber" : 15,
    "endLineNumber" : 93,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 93,
    "startColumnNumber" : 57,
    "endLineNumber" : 93,
    "endColumnNumber" : 72
  }, {
    "charLength" : 15,
    "startLineNumber" : 95,
    "startColumnNumber" : 15,
    "endLineNumber" : 95,
    "endColumnNumber" : 30
  }, {
    "charLength" : 15,
    "startLineNumber" : 97,
    "startColumnNumber" : 15,
    "endLineNumber" : 97,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 2
  } ]
}