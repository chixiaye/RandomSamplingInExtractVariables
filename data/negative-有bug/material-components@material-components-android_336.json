{
  "id" : 336,
  "expression" : "openAt != null",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/datepicker/CalendarConstraints.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "openAt != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 72,
      "startColumnNumber" : 8,
      "endLineNumber" : 72,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 53
      },
      "nodeContext" : "openAt != null && start.compareTo(openAt) > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (openAt != null && start.compareTo(openAt) > 0) {\n  throw new IllegalArgumentException(\"start Month cannot be after current Month\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 745,
        "startLineNumber" : 66,
        "startColumnNumber" : 26,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.start=start;\n  this.end=end;\n  this.openAt=openAt;\n  this.firstDayOfWeek=firstDayOfWeek;\n  this.validator=validator;\n  if (openAt != null && start.compareTo(openAt) > 0) {\n    throw new IllegalArgumentException(\"start Month cannot be after current Month\");\n  }\n  if (openAt != null && openAt.compareTo(end) > 0) {\n    throw new IllegalArgumentException(\"current Month cannot be after end Month\");\n  }\n  if (firstDayOfWeek < 0 || firstDayOfWeek > UtcDates.getUtcCalendar().getMaximum(Calendar.DAY_OF_WEEK)) {\n    throw new IllegalArgumentException(\"firstDayOfWeek is not valid\");\n  }\n  monthSpan=start.monthsUntil(end) + 1;\n  yearSpan=end.year - start.year + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private CalendarConstraints(@NonNull Month start,@NonNull Month end,@NonNull DateValidator validator,@Nullable Month openAt,int firstDayOfWeek){\n  this.start=start;\n  this.end=end;\n  this.openAt=openAt;\n  this.firstDayOfWeek=firstDayOfWeek;\n  this.validator=validator;\n  if (openAt != null && start.compareTo(openAt) > 0) {\n    throw new IllegalArgumentException(\"start Month cannot be after current Month\");\n  }\n  if (openAt != null && openAt.compareTo(end) > 0) {\n    throw new IllegalArgumentException(\"current Month cannot be after end Month\");\n  }\n  if (firstDayOfWeek < 0 || firstDayOfWeek > UtcDates.getUtcCalendar().getMaximum(Calendar.DAY_OF_WEEK)) {\n    throw new IllegalArgumentException(\"firstDayOfWeek is not valid\");\n  }\n  monthSpan=start.monthsUntil(end) + 1;\n  yearSpan=end.year - start.year + 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 53
      },
      "nodeContext" : "openAt != null && start.compareTo(openAt) > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "openAt != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 75,
      "startColumnNumber" : 8,
      "endLineNumber" : 75,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 51
      },
      "nodeContext" : "openAt != null && openAt.compareTo(end) > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (openAt != null && openAt.compareTo(end) > 0) {\n  throw new IllegalArgumentException(\"current Month cannot be after end Month\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 745,
        "startLineNumber" : 66,
        "startColumnNumber" : 26,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.start=start;\n  this.end=end;\n  this.openAt=openAt;\n  this.firstDayOfWeek=firstDayOfWeek;\n  this.validator=validator;\n  if (openAt != null && start.compareTo(openAt) > 0) {\n    throw new IllegalArgumentException(\"start Month cannot be after current Month\");\n  }\n  if (openAt != null && openAt.compareTo(end) > 0) {\n    throw new IllegalArgumentException(\"current Month cannot be after end Month\");\n  }\n  if (firstDayOfWeek < 0 || firstDayOfWeek > UtcDates.getUtcCalendar().getMaximum(Calendar.DAY_OF_WEEK)) {\n    throw new IllegalArgumentException(\"firstDayOfWeek is not valid\");\n  }\n  monthSpan=start.monthsUntil(end) + 1;\n  yearSpan=end.year - start.year + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private CalendarConstraints(@NonNull Month start,@NonNull Month end,@NonNull DateValidator validator,@Nullable Month openAt,int firstDayOfWeek){\n  this.start=start;\n  this.end=end;\n  this.openAt=openAt;\n  this.firstDayOfWeek=firstDayOfWeek;\n  this.validator=validator;\n  if (openAt != null && start.compareTo(openAt) > 0) {\n    throw new IllegalArgumentException(\"start Month cannot be after current Month\");\n  }\n  if (openAt != null && openAt.compareTo(end) > 0) {\n    throw new IllegalArgumentException(\"current Month cannot be after end Month\");\n  }\n  if (firstDayOfWeek < 0 || firstDayOfWeek > UtcDates.getUtcCalendar().getMaximum(Calendar.DAY_OF_WEEK)) {\n    throw new IllegalArgumentException(\"firstDayOfWeek is not valid\");\n  }\n  monthSpan=start.monthsUntil(end) + 1;\n  yearSpan=end.year - start.year + 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 51
      },
      "nodeContext" : "openAt != null && openAt.compareTo(end) > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 72,
    "startColumnNumber" : 8,
    "endLineNumber" : 72,
    "endColumnNumber" : 22
  }, {
    "charLength" : 14,
    "startLineNumber" : 75,
    "startColumnNumber" : 8,
    "endLineNumber" : 75,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}