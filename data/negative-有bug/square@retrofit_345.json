{
  "id" : 345,
  "expression" : "((Path)methodParameterAnnotation).value()",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RestMethodInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((Path)methodParameterAnnotation).value()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 330,
      "startColumnNumber" : 26,
      "endLineNumber" : 330,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 7,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 330,
        "startColumnNumber" : 19,
        "endLineNumber" : 330,
        "endColumnNumber" : 68
      },
      "nodeContext" : "name=((Path)methodParameterAnnotation).value()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 330,
        "startColumnNumber" : 12,
        "endLineNumber" : 330,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String name=((Path)methodParameterAnnotation).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 329,
        "startColumnNumber" : 50,
        "endLineNumber" : 332,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String name=((Path)methodParameterAnnotation).value();\n  validatePathName(i,name);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 329,
        "startColumnNumber" : 10,
        "endLineNumber" : 384,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (methodAnnotationType == Path.class) {\n  String name=((Path)methodParameterAnnotation).value();\n  validatePathName(i,name);\n}\n else if (methodAnnotationType == Query.class) {\n}\n else if (methodAnnotationType == QueryMap.class) {\n  if (!Map.class.isAssignableFrom(methodParameterType)) {\n    throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n  }\n}\n else if (methodAnnotationType == Header.class) {\n}\n else if (methodAnnotationType == Field.class) {\n  if (requestType != RequestType.FORM_URL_ENCODED) {\n    throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n  }\n  gotField=true;\n}\n else if (methodAnnotationType == FieldMap.class) {\n  if (requestType != RequestType.FORM_URL_ENCODED) {\n    throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n  }\n  if (!Map.class.isAssignableFrom(methodParameterType)) {\n    throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n  }\n  gotField=true;\n}\n else if (methodAnnotationType == Part.class) {\n  if (requestType != RequestType.MULTIPART) {\n    throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n  }\n  gotPart=true;\n}\n else if (methodAnnotationType == PartMap.class) {\n  if (requestType != RequestType.MULTIPART) {\n    throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n  }\n  if (!Map.class.isAssignableFrom(methodParameterType)) {\n    throw parameterError(i,\"@PartMap parameter type must be Map.\");\n  }\n  gotPart=true;\n}\n else if (methodAnnotationType == Body.class) {\n  if (requestType != RequestType.SIMPLE) {\n    throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n  }\n  if (gotBody) {\n    throw methodError(\"Multiple @Body method annotations found.\");\n  }\n  gotBody=true;\n}\n else {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 211,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3004,
        "startLineNumber" : 325,
        "startColumnNumber" : 80,
        "endLineNumber" : 393,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n  if (methodAnnotationType == Path.class) {\n    String name=((Path)methodParameterAnnotation).value();\n    validatePathName(i,name);\n  }\n else   if (methodAnnotationType == Query.class) {\n  }\n else   if (methodAnnotationType == QueryMap.class) {\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n    }\n  }\n else   if (methodAnnotationType == Header.class) {\n  }\n else   if (methodAnnotationType == Field.class) {\n    if (requestType != RequestType.FORM_URL_ENCODED) {\n      throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n    }\n    gotField=true;\n  }\n else   if (methodAnnotationType == FieldMap.class) {\n    if (requestType != RequestType.FORM_URL_ENCODED) {\n      throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n    }\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n    }\n    gotField=true;\n  }\n else   if (methodAnnotationType == Part.class) {\n    if (requestType != RequestType.MULTIPART) {\n      throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n    }\n    gotPart=true;\n  }\n else   if (methodAnnotationType == PartMap.class) {\n    if (requestType != RequestType.MULTIPART) {\n      throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n    }\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@PartMap parameter type must be Map.\");\n    }\n    gotPart=true;\n  }\n else   if (methodAnnotationType == Body.class) {\n    if (requestType != RequestType.SIMPLE) {\n      throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n    }\n    if (gotBody) {\n      throw methodError(\"Multiple @Body method annotations found.\");\n    }\n    gotBody=true;\n  }\n else {\n    continue;\n  }\n  if (requestParamAnnotations[i] != null) {\n    throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n  }\n  requestParamAnnotations[i]=methodParameterAnnotation;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 325,
        "startColumnNumber" : 8,
        "endLineNumber" : 393,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Annotation methodParameterAnnotation : methodParameterAnnotations) {\n  Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n  if (methodAnnotationType == Path.class) {\n    String name=((Path)methodParameterAnnotation).value();\n    validatePathName(i,name);\n  }\n else   if (methodAnnotationType == Query.class) {\n  }\n else   if (methodAnnotationType == QueryMap.class) {\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n    }\n  }\n else   if (methodAnnotationType == Header.class) {\n  }\n else   if (methodAnnotationType == Field.class) {\n    if (requestType != RequestType.FORM_URL_ENCODED) {\n      throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n    }\n    gotField=true;\n  }\n else   if (methodAnnotationType == FieldMap.class) {\n    if (requestType != RequestType.FORM_URL_ENCODED) {\n      throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n    }\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n    }\n    gotField=true;\n  }\n else   if (methodAnnotationType == Part.class) {\n    if (requestType != RequestType.MULTIPART) {\n      throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n    }\n    gotPart=true;\n  }\n else   if (methodAnnotationType == PartMap.class) {\n    if (requestType != RequestType.MULTIPART) {\n      throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n    }\n    if (!Map.class.isAssignableFrom(methodParameterType)) {\n      throw parameterError(i,\"@PartMap parameter type must be Map.\");\n    }\n    gotPart=true;\n  }\n else   if (methodAnnotationType == Body.class) {\n    if (requestType != RequestType.SIMPLE) {\n      throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n    }\n    if (gotBody) {\n      throw methodError(\"Multiple @Body method annotations found.\");\n    }\n    gotBody=true;\n  }\n else {\n    continue;\n  }\n  if (requestParamAnnotations[i] != null) {\n    throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n  }\n  requestParamAnnotations[i]=methodParameterAnnotation;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 258,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3094,
        "startLineNumber" : 324,
        "startColumnNumber" : 46,
        "endLineNumber" : 394,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  Annotation methodParameterAnnotation : methodParameterAnnotations) {\n    Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n    if (methodAnnotationType == Path.class) {\n      String name=((Path)methodParameterAnnotation).value();\n      validatePathName(i,name);\n    }\n else     if (methodAnnotationType == Query.class) {\n    }\n else     if (methodAnnotationType == QueryMap.class) {\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n      }\n    }\n else     if (methodAnnotationType == Header.class) {\n    }\n else     if (methodAnnotationType == Field.class) {\n      if (requestType != RequestType.FORM_URL_ENCODED) {\n        throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n      }\n      gotField=true;\n    }\n else     if (methodAnnotationType == FieldMap.class) {\n      if (requestType != RequestType.FORM_URL_ENCODED) {\n        throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n      }\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n      }\n      gotField=true;\n    }\n else     if (methodAnnotationType == Part.class) {\n      if (requestType != RequestType.MULTIPART) {\n        throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n      }\n      gotPart=true;\n    }\n else     if (methodAnnotationType == PartMap.class) {\n      if (requestType != RequestType.MULTIPART) {\n        throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n      }\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@PartMap parameter type must be Map.\");\n      }\n      gotPart=true;\n    }\n else     if (methodAnnotationType == Body.class) {\n      if (requestType != RequestType.SIMPLE) {\n        throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n      }\n      if (gotBody) {\n        throw methodError(\"Multiple @Body method annotations found.\");\n      }\n      gotBody=true;\n    }\n else {\n      continue;\n    }\n    if (requestParamAnnotations[i] != null) {\n      throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n    }\n    requestParamAnnotations[i]=methodParameterAnnotation;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3134,
        "startLineNumber" : 324,
        "startColumnNumber" : 6,
        "endLineNumber" : 394,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (methodParameterAnnotations != null) {\n  for (  Annotation methodParameterAnnotation : methodParameterAnnotations) {\n    Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n    if (methodAnnotationType == Path.class) {\n      String name=((Path)methodParameterAnnotation).value();\n      validatePathName(i,name);\n    }\n else     if (methodAnnotationType == Query.class) {\n    }\n else     if (methodAnnotationType == QueryMap.class) {\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n      }\n    }\n else     if (methodAnnotationType == Header.class) {\n    }\n else     if (methodAnnotationType == Field.class) {\n      if (requestType != RequestType.FORM_URL_ENCODED) {\n        throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n      }\n      gotField=true;\n    }\n else     if (methodAnnotationType == FieldMap.class) {\n      if (requestType != RequestType.FORM_URL_ENCODED) {\n        throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n      }\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n      }\n      gotField=true;\n    }\n else     if (methodAnnotationType == Part.class) {\n      if (requestType != RequestType.MULTIPART) {\n        throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n      }\n      gotPart=true;\n    }\n else     if (methodAnnotationType == PartMap.class) {\n      if (requestType != RequestType.MULTIPART) {\n        throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n      }\n      if (!Map.class.isAssignableFrom(methodParameterType)) {\n        throw parameterError(i,\"@PartMap parameter type must be Map.\");\n      }\n      gotPart=true;\n    }\n else     if (methodAnnotationType == Body.class) {\n      if (requestType != RequestType.SIMPLE) {\n        throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n      }\n      if (gotBody) {\n        throw methodError(\"Multiple @Body method annotations found.\");\n      }\n      gotBody=true;\n    }\n else {\n      continue;\n    }\n    if (requestParamAnnotations[i] != null) {\n      throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n    }\n    requestParamAnnotations[i]=methodParameterAnnotation;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 263,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3417,
        "startLineNumber" : 321,
        "startColumnNumber" : 36,
        "endLineNumber" : 399,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> methodParameterType=methodParameterTypes[i];\n  Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n  if (methodParameterAnnotations != null) {\n    for (    Annotation methodParameterAnnotation : methodParameterAnnotations) {\n      Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n      if (methodAnnotationType == Path.class) {\n        String name=((Path)methodParameterAnnotation).value();\n        validatePathName(i,name);\n      }\n else       if (methodAnnotationType == Query.class) {\n      }\n else       if (methodAnnotationType == QueryMap.class) {\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n        }\n      }\n else       if (methodAnnotationType == Header.class) {\n      }\n else       if (methodAnnotationType == Field.class) {\n        if (requestType != RequestType.FORM_URL_ENCODED) {\n          throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n        }\n        gotField=true;\n      }\n else       if (methodAnnotationType == FieldMap.class) {\n        if (requestType != RequestType.FORM_URL_ENCODED) {\n          throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n        }\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n        }\n        gotField=true;\n      }\n else       if (methodAnnotationType == Part.class) {\n        if (requestType != RequestType.MULTIPART) {\n          throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n        }\n        gotPart=true;\n      }\n else       if (methodAnnotationType == PartMap.class) {\n        if (requestType != RequestType.MULTIPART) {\n          throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n        }\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@PartMap parameter type must be Map.\");\n        }\n        gotPart=true;\n      }\n else       if (methodAnnotationType == Body.class) {\n        if (requestType != RequestType.SIMPLE) {\n          throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n        }\n        if (gotBody) {\n          throw methodError(\"Multiple @Body method annotations found.\");\n        }\n        gotBody=true;\n      }\n else {\n        continue;\n      }\n      if (requestParamAnnotations[i] != null) {\n        throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n      }\n      requestParamAnnotations[i]=methodParameterAnnotation;\n    }\n  }\n  if (requestParamAnnotations[i] == null) {\n    throw parameterError(i,\"No Retrofit annotation found.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3449,
        "startLineNumber" : 321,
        "startColumnNumber" : 4,
        "endLineNumber" : 399,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  Class<?> methodParameterType=methodParameterTypes[i];\n  Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n  if (methodParameterAnnotations != null) {\n    for (    Annotation methodParameterAnnotation : methodParameterAnnotations) {\n      Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n      if (methodAnnotationType == Path.class) {\n        String name=((Path)methodParameterAnnotation).value();\n        validatePathName(i,name);\n      }\n else       if (methodAnnotationType == Query.class) {\n      }\n else       if (methodAnnotationType == QueryMap.class) {\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n        }\n      }\n else       if (methodAnnotationType == Header.class) {\n      }\n else       if (methodAnnotationType == Field.class) {\n        if (requestType != RequestType.FORM_URL_ENCODED) {\n          throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n        }\n        gotField=true;\n      }\n else       if (methodAnnotationType == FieldMap.class) {\n        if (requestType != RequestType.FORM_URL_ENCODED) {\n          throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n        }\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n        }\n        gotField=true;\n      }\n else       if (methodAnnotationType == Part.class) {\n        if (requestType != RequestType.MULTIPART) {\n          throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n        }\n        gotPart=true;\n      }\n else       if (methodAnnotationType == PartMap.class) {\n        if (requestType != RequestType.MULTIPART) {\n          throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n        }\n        if (!Map.class.isAssignableFrom(methodParameterType)) {\n          throw parameterError(i,\"@PartMap parameter type must be Map.\");\n        }\n        gotPart=true;\n      }\n else       if (methodAnnotationType == Body.class) {\n        if (requestType != RequestType.SIMPLE) {\n          throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n        }\n        if (gotBody) {\n          throw methodError(\"Multiple @Body method annotations found.\");\n        }\n        gotBody=true;\n      }\n else {\n        continue;\n      }\n      if (requestParamAnnotations[i] != null) {\n        throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n      }\n      requestParamAnnotations[i]=methodParameterAnnotation;\n    }\n  }\n  if (requestParamAnnotations[i] == null) {\n    throw parameterError(i,\"No Retrofit annotation found.\");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 307,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4483,
        "startLineNumber" : 306,
        "startColumnNumber" : 33,
        "endLineNumber" : 412,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Class<?>[] methodParameterTypes=method.getParameterTypes();\n  Annotation[][] methodParameterAnnotationArrays=method.getParameterAnnotations();\n  int count=methodParameterAnnotationArrays.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  Annotation[] requestParamAnnotations=new Annotation[count];\n  boolean gotField=false;\n  boolean gotPart=false;\n  boolean gotBody=false;\n  for (int i=0; i < count; i++) {\n    Class<?> methodParameterType=methodParameterTypes[i];\n    Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n    if (methodParameterAnnotations != null) {\n      for (      Annotation methodParameterAnnotation : methodParameterAnnotations) {\n        Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n        if (methodAnnotationType == Path.class) {\n          String name=((Path)methodParameterAnnotation).value();\n          validatePathName(i,name);\n        }\n else         if (methodAnnotationType == Query.class) {\n        }\n else         if (methodAnnotationType == QueryMap.class) {\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n          }\n        }\n else         if (methodAnnotationType == Header.class) {\n        }\n else         if (methodAnnotationType == Field.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == FieldMap.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == Part.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == PartMap.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@PartMap parameter type must be Map.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == Body.class) {\n          if (requestType != RequestType.SIMPLE) {\n            throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n          }\n          if (gotBody) {\n            throw methodError(\"Multiple @Body method annotations found.\");\n          }\n          gotBody=true;\n        }\n else {\n          continue;\n        }\n        if (requestParamAnnotations[i] != null) {\n          throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n        }\n        requestParamAnnotations[i]=methodParameterAnnotation;\n      }\n    }\n    if (requestParamAnnotations[i] == null) {\n      throw parameterError(i,\"No Retrofit annotation found.\");\n    }\n  }\n  if (requestType == RequestType.SIMPLE && !requestHasBody && gotBody) {\n    throw methodError(\"Non-body HTTP method cannot contain @Body or @TypedOutput.\");\n  }\n  if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {\n    throw methodError(\"Form-encoded method must contain at least one @Field.\");\n  }\n  if (requestType == RequestType.MULTIPART && !gotPart) {\n    throw methodError(\"Multipart method must contain at least one @Part.\");\n  }\n  this.requestParamAnnotations=requestParamAnnotations;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4627,
        "startLineNumber" : 303,
        "startColumnNumber" : 2,
        "endLineNumber" : 412,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Loads  {@link #requestParamAnnotations}. Must be called after  {@link #parseMethodAnnotations()}.\n */\nprivate void parseParameters(){\n  Class<?>[] methodParameterTypes=method.getParameterTypes();\n  Annotation[][] methodParameterAnnotationArrays=method.getParameterAnnotations();\n  int count=methodParameterAnnotationArrays.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  Annotation[] requestParamAnnotations=new Annotation[count];\n  boolean gotField=false;\n  boolean gotPart=false;\n  boolean gotBody=false;\n  for (int i=0; i < count; i++) {\n    Class<?> methodParameterType=methodParameterTypes[i];\n    Annotation[] methodParameterAnnotations=methodParameterAnnotationArrays[i];\n    if (methodParameterAnnotations != null) {\n      for (      Annotation methodParameterAnnotation : methodParameterAnnotations) {\n        Class<? extends Annotation> methodAnnotationType=methodParameterAnnotation.annotationType();\n        if (methodAnnotationType == Path.class) {\n          String name=((Path)methodParameterAnnotation).value();\n          validatePathName(i,name);\n        }\n else         if (methodAnnotationType == Query.class) {\n        }\n else         if (methodAnnotationType == QueryMap.class) {\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@QueryMap parameter type must be Map.\");\n          }\n        }\n else         if (methodAnnotationType == Header.class) {\n        }\n else         if (methodAnnotationType == Field.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@Field parameters can only be used with form encoding.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == FieldMap.class) {\n          if (requestType != RequestType.FORM_URL_ENCODED) {\n            throw parameterError(i,\"@FieldMap parameters can only be used with form encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@FieldMap parameter type must be Map.\");\n          }\n          gotField=true;\n        }\n else         if (methodAnnotationType == Part.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@Part parameters can only be used with multipart encoding.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == PartMap.class) {\n          if (requestType != RequestType.MULTIPART) {\n            throw parameterError(i,\"@PartMap parameters can only be used with multipart encoding.\");\n          }\n          if (!Map.class.isAssignableFrom(methodParameterType)) {\n            throw parameterError(i,\"@PartMap parameter type must be Map.\");\n          }\n          gotPart=true;\n        }\n else         if (methodAnnotationType == Body.class) {\n          if (requestType != RequestType.SIMPLE) {\n            throw parameterError(i,\"@Body parameters cannot be used with form or multi-part encoding.\");\n          }\n          if (gotBody) {\n            throw methodError(\"Multiple @Body method annotations found.\");\n          }\n          gotBody=true;\n        }\n else {\n          continue;\n        }\n        if (requestParamAnnotations[i] != null) {\n          throw parameterError(i,\"Multiple Retrofit annotations found, only one allowed: @%s, @%s.\",requestParamAnnotations[i].annotationType().getSimpleName(),methodAnnotationType.getSimpleName());\n        }\n        requestParamAnnotations[i]=methodParameterAnnotation;\n      }\n    }\n    if (requestParamAnnotations[i] == null) {\n      throw parameterError(i,\"No Retrofit annotation found.\");\n    }\n  }\n  if (requestType == RequestType.SIMPLE && !requestHasBody && gotBody) {\n    throw methodError(\"Non-body HTTP method cannot contain @Body or @TypedOutput.\");\n  }\n  if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {\n    throw methodError(\"Form-encoded method must contain at least one @Field.\");\n  }\n  if (requestType == RequestType.MULTIPART && !gotPart) {\n    throw methodError(\"Multipart method must contain at least one @Part.\");\n  }\n  this.requestParamAnnotations=requestParamAnnotations;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 432,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 330,
        "startColumnNumber" : 12,
        "endLineNumber" : 330,
        "endColumnNumber" : 69
      },
      "nodeContext" : "String name=((Path)methodParameterAnnotation).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 330,
    "startColumnNumber" : 26,
    "endLineNumber" : 330,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}