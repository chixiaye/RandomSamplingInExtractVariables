{
  "id" : 448,
  "expression" : "Math",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTourTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 79,
      "startColumnNumber" : 23,
      "endLineNumber" : 79,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 79,
        "startColumnNumber" : 23,
        "endLineNumber" : 79,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Math.random()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 79,
        "startColumnNumber" : 23,
        "endLineNumber" : 79,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Math.random() * n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 79,
        "startColumnNumber" : 22,
        "endLineNumber" : 79,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(Math.random() * n)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 79,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(int)(Math.random() * n)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 41
      },
      "nodeContext" : "l=(int)(Math.random() * n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int l=(int)(Math.random() * n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 78,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 68,
        "startColumnNumber" : 35,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=1; n < 1000; n++) {\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 67,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedLcaQueriesVsOtherImpl(){\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int l=(int)(Math.random() * n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 80,
      "startColumnNumber" : 23,
      "endLineNumber" : 80,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 80,
        "startColumnNumber" : 23,
        "endLineNumber" : 80,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Math.random()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 80,
        "startColumnNumber" : 23,
        "endLineNumber" : 80,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Math.random() * n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 80,
        "startColumnNumber" : 22,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(Math.random() * n)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 80,
        "startColumnNumber" : 16,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "(int)(Math.random() * n)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "r=(int)(Math.random() * n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int r=(int)(Math.random() * n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 78,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 68,
        "startColumnNumber" : 35,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=1; n < 1000; n++) {\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 67,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedLcaQueriesVsOtherImpl(){\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int r=(int)(Math.random() * n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 81,
      "startColumnNumber" : 16,
      "endLineNumber" : 81,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 81,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Math.min(l,r)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 30
      },
      "nodeContext" : "L=Math.min(l,r)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int L=Math.min(l,r);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 78,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 68,
        "startColumnNumber" : 35,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=1; n < 1000; n++) {\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 67,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedLcaQueriesVsOtherImpl(){\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int L=Math.min(l,r);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 82,
      "startColumnNumber" : 16,
      "endLineNumber" : 82,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Math.max(l,r)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 30
      },
      "nodeContext" : "R=Math.max(l,r)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int R=Math.max(l,r);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 78,
        "startColumnNumber" : 36,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  int l=(int)(Math.random() * n);\n  int r=(int)(Math.random() * n);\n  int L=Math.min(l,r);\n  int R=Math.max(l,r);\n  LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n  LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n  assertThat(lca1).isNotNull();\n  assertThat(lca2).isNotNull();\n  assertThat(lca1.id()).isEqualTo(lca2.index());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 68,
        "startColumnNumber" : 35,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 938,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=1; n < 1000; n++) {\n  List<List<Integer>> g=generateRandomTree(n);\n  LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n  LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n  LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n  LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n  for (int i=0; i < 100; i++) {\n    int l=(int)(Math.random() * n);\n    int r=(int)(Math.random() * n);\n    int L=Math.min(l,r);\n    int R=Math.max(l,r);\n    LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n    LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n    assertThat(lca1).isNotNull();\n    assertThat(lca2).isNotNull();\n    assertThat(lca1.id()).isEqualTo(lca2.index());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 67,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedLcaQueriesVsOtherImpl(){\n  for (int n=1; n < 1000; n++) {\n    List<List<Integer>> g=generateRandomTree(n);\n    LowestCommonAncestor.TreeNode root1=LowestCommonAncestor.TreeNode.rootTree(g,0);\n    LowestCommonAncestorEulerTour.TreeNode root2=LowestCommonAncestorEulerTour.TreeNode.rootTree(g,0);\n    LowestCommonAncestor slowSolver=new LowestCommonAncestor(root1);\n    LowestCommonAncestorEulerTour fastSolver=new LowestCommonAncestorEulerTour(root2);\n    for (int i=0; i < 100; i++) {\n      int l=(int)(Math.random() * n);\n      int r=(int)(Math.random() * n);\n      int L=Math.min(l,r);\n      int R=Math.max(l,r);\n      LowestCommonAncestor.TreeNode lca1=slowSolver.lca(L,R);\n      LowestCommonAncestorEulerTour.TreeNode lca2=fastSolver.lca(L,R);\n      assertThat(lca1).isNotNull();\n      assertThat(lca2).isNotNull();\n      assertThat(lca1.id()).isEqualTo(lca2.index());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 31
      },
      "nodeContext" : "int R=Math.max(l,r);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 79,
    "startColumnNumber" : 23,
    "endLineNumber" : 79,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 80,
    "startColumnNumber" : 23,
    "endLineNumber" : 80,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 81,
    "startColumnNumber" : 16,
    "endLineNumber" : 81,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 82,
    "startColumnNumber" : 16,
    "endLineNumber" : 82,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}