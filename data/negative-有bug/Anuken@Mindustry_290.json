{
  "id" : 290,
  "expression" : "health / (enemyDps - rps)",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/maps/SectorDamage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "health / (enemyDps - rps)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 86,
      "startColumnNumber" : 40,
      "endLineNumber" : 86,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 22,
        "endLineNumber" : 86,
        "endColumnNumber" : 65
      },
      "nodeContext" : "timeDestroyBase=health / (enemyDps - rps)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float timeDestroyBase=health / (enemyDps - rps);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 62,
        "startColumnNumber" : 53,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  float efficiency=health / info.sumHealth;\n  float dps=info.sumDps * efficiency;\n  float rps=info.sumRps * efficiency;\n  float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n  float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n  if (info.bossWave == i) {\n    enemyDps+=info.bossDps;\n    enemyHealth+=info.bossHealth;\n  }\n  if (i == waveBegin) {\n    enemyDps+=info.curEnemyDps;\n    enemyHealth+=info.curEnemyHealth;\n  }\n  if (enemyHealth < 0 || enemyDps < 0)   continue;\n  float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n  float timeDestroyBase=health / (enemyDps - rps);\n  if (timeDestroyBase < 0)   continue;\n  if (timeDestroyEnemy > timeDestroyBase) {\n    health=0f;\n    if (retWave)     return i - waveBegin;\n    break;\n  }\n  float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n  health-=damageTaken;\n  health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1916,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=waveBegin; i <= waveEnd; i++) {\n  float efficiency=health / info.sumHealth;\n  float dps=info.sumDps * efficiency;\n  float rps=info.sumRps * efficiency;\n  float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n  float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n  if (info.bossWave == i) {\n    enemyDps+=info.bossDps;\n    enemyHealth+=info.bossHealth;\n  }\n  if (i == waveBegin) {\n    enemyDps+=info.curEnemyDps;\n    enemyHealth+=info.curEnemyHealth;\n  }\n  if (enemyHealth < 0 || enemyDps < 0)   continue;\n  float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n  float timeDestroyBase=health / (enemyDps - rps);\n  if (timeDestroyBase < 0)   continue;\n  if (timeDestroyEnemy > timeDestroyBase) {\n    health=0f;\n    if (retWave)     return i - waveBegin;\n    break;\n  }\n  float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n  health-=damageTaken;\n  health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 187,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2222,
        "startLineNumber" : 53,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int waveBegin=wave;\n  int waveEnd=wave + wavesPassed;\n  if (wavesPassed > maxWavesSimulated && !retWave) {\n    waveBegin=waveEnd - maxWavesSimulated;\n  }\n  for (int i=waveBegin; i <= waveEnd; i++) {\n    float efficiency=health / info.sumHealth;\n    float dps=info.sumDps * efficiency;\n    float rps=info.sumRps * efficiency;\n    float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n    float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n    if (info.bossWave == i) {\n      enemyDps+=info.bossDps;\n      enemyHealth+=info.bossHealth;\n    }\n    if (i == waveBegin) {\n      enemyDps+=info.curEnemyDps;\n      enemyHealth+=info.curEnemyHealth;\n    }\n    if (enemyHealth < 0 || enemyDps < 0)     continue;\n    float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n    float timeDestroyBase=health / (enemyDps - rps);\n    if (timeDestroyBase < 0)     continue;\n    if (timeDestroyEnemy > timeDestroyBase) {\n      health=0f;\n      if (retWave)       return i - waveBegin;\n      break;\n    }\n    float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n    health-=damageTaken;\n    health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2241,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (wavesPassed > 0) {\n  int waveBegin=wave;\n  int waveEnd=wave + wavesPassed;\n  if (wavesPassed > maxWavesSimulated && !retWave) {\n    waveBegin=waveEnd - maxWavesSimulated;\n  }\n  for (int i=waveBegin; i <= waveEnd; i++) {\n    float efficiency=health / info.sumHealth;\n    float dps=info.sumDps * efficiency;\n    float rps=info.sumRps * efficiency;\n    float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n    float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n    if (info.bossWave == i) {\n      enemyDps+=info.bossDps;\n      enemyHealth+=info.bossHealth;\n    }\n    if (i == waveBegin) {\n      enemyDps+=info.curEnemyDps;\n      enemyHealth+=info.curEnemyHealth;\n    }\n    if (enemyHealth < 0 || enemyDps < 0)     continue;\n    float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n    float timeDestroyBase=health / (enemyDps - rps);\n    if (timeDestroyBase < 0)     continue;\n    if (timeDestroyEnemy > timeDestroyBase) {\n      health=0f;\n      if (retWave)       return i - waveBegin;\n      break;\n    }\n    float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n    health-=damageTaken;\n    health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2678,
        "startLineNumber" : 46,
        "startColumnNumber" : 84,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float health=info.sumHealth;\n  int wave=info.wave;\n  float waveSpace=info.waveSpacing;\n  if (wavesPassed > 0) {\n    int waveBegin=wave;\n    int waveEnd=wave + wavesPassed;\n    if (wavesPassed > maxWavesSimulated && !retWave) {\n      waveBegin=waveEnd - maxWavesSimulated;\n    }\n    for (int i=waveBegin; i <= waveEnd; i++) {\n      float efficiency=health / info.sumHealth;\n      float dps=info.sumDps * efficiency;\n      float rps=info.sumRps * efficiency;\n      float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n      float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n      if (info.bossWave == i) {\n        enemyDps+=info.bossDps;\n        enemyHealth+=info.bossHealth;\n      }\n      if (i == waveBegin) {\n        enemyDps+=info.curEnemyDps;\n        enemyHealth+=info.curEnemyHealth;\n      }\n      if (enemyHealth < 0 || enemyDps < 0)       continue;\n      float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n      float timeDestroyBase=health / (enemyDps - rps);\n      if (timeDestroyBase < 0)       continue;\n      if (timeDestroyEnemy > timeDestroyBase) {\n        health=0f;\n        if (retWave)         return i - waveBegin;\n        break;\n      }\n      float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n      health-=damageTaken;\n      health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n    }\n  }\n  if (retWave) {\n    return maxRetWave;\n  }\n  return 1f - Mathf.clamp(health / info.sumHealth);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2948,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @return calculated capture progress of the enemy if retWave if false, otherwise return the maximum waves survived as int.if it survives all the waves, returns maxRetWave. \n */\npublic static float getDamage(SectorInfo info,int wavesPassed,boolean retWave){\n  float health=info.sumHealth;\n  int wave=info.wave;\n  float waveSpace=info.waveSpacing;\n  if (wavesPassed > 0) {\n    int waveBegin=wave;\n    int waveEnd=wave + wavesPassed;\n    if (wavesPassed > maxWavesSimulated && !retWave) {\n      waveBegin=waveEnd - maxWavesSimulated;\n    }\n    for (int i=waveBegin; i <= waveEnd; i++) {\n      float efficiency=health / info.sumHealth;\n      float dps=info.sumDps * efficiency;\n      float rps=info.sumRps * efficiency;\n      float enemyDps=info.waveDpsBase + info.waveDpsSlope * (i);\n      float enemyHealth=info.waveHealthBase + info.waveHealthSlope * (i);\n      if (info.bossWave == i) {\n        enemyDps+=info.bossDps;\n        enemyHealth+=info.bossHealth;\n      }\n      if (i == waveBegin) {\n        enemyDps+=info.curEnemyDps;\n        enemyHealth+=info.curEnemyHealth;\n      }\n      if (enemyHealth < 0 || enemyDps < 0)       continue;\n      float timeDestroyEnemy=dps <= 0.0001f ? Float.POSITIVE_INFINITY : enemyHealth / dps;\n      float timeDestroyBase=health / (enemyDps - rps);\n      if (timeDestroyBase < 0)       continue;\n      if (timeDestroyEnemy > timeDestroyBase) {\n        health=0f;\n        if (retWave)         return i - waveBegin;\n        break;\n      }\n      float damageTaken=timeDestroyEnemy * (enemyDps - rps);\n      health-=damageTaken;\n      health=Math.min(health + rps / 60f * waveSpace,info.sumHealth);\n    }\n  }\n  if (retWave) {\n    return maxRetWave;\n  }\n  return 1f - Mathf.clamp(health / info.sumHealth);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 86,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float timeDestroyBase=health / (enemyDps - rps);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 86,
    "startColumnNumber" : 40,
    "endLineNumber" : 86,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}