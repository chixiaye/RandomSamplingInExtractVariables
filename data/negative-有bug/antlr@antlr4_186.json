{
  "id" : 186,
  "expression" : "Thread.currentThread().getName()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/ToolTestUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Thread.currentThread().getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 104,
      "startColumnNumber" : 45,
      "endLineNumber" : 104,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 104,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 112
      },
      "nodeContext" : "\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 104,
        "startColumnNumber" : 10,
        "endLineNumber" : 104,
        "endColumnNumber" : 112
      },
      "nodeContext" : "tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 104,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 113
      },
      "nodeContext" : "String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 915,
        "startLineNumber" : 97,
        "startColumnNumber" : 44,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String grammarStr=pairs[i];\n  String expect=pairs[i + 1];\n  String[] lines=grammarStr.split(\"\\n\");\n  String fileName=getFilenameFromFirstLineOfGrammar(lines[0]);\n  String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n  String tempTestDir=Paths.get(TempDirectory,tempDirName).toString();\n  try {\n    ErrorQueue equeue=antlrOnString(tempTestDir,null,fileName,grammarStr,false);\n    String actual=equeue.toString(true);\n    actual=actual.replace(tempTestDir + File.separator,\"\");\n    String msg=grammarStr;\n    msg=msg.replace(\"\\n\",\"\\\\n\");\n    msg=msg.replace(\"\\r\",\"\\\\r\");\n    msg=msg.replace(\"\\t\",\"\\\\t\");\n    assertEquals(expect,actual,\"error in: \" + msg);\n  }\n  finally {\n    try {\n      deleteDirectory(new File(tempTestDir));\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < pairs.length; i+=2) {\n  String grammarStr=pairs[i];\n  String expect=pairs[i + 1];\n  String[] lines=grammarStr.split(\"\\n\");\n  String fileName=getFilenameFromFirstLineOfGrammar(lines[0]);\n  String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n  String tempTestDir=Paths.get(TempDirectory,tempDirName).toString();\n  try {\n    ErrorQueue equeue=antlrOnString(tempTestDir,null,fileName,grammarStr,false);\n    String actual=equeue.toString(true);\n    actual=actual.replace(tempTestDir + File.separator,\"\");\n    String msg=grammarStr;\n    msg=msg.replace(\"\\n\",\"\\\\n\");\n    msg=msg.replace(\"\\r\",\"\\\\r\");\n    msg=msg.replace(\"\\t\",\"\\\\t\");\n    assertEquals(expect,actual,\"error in: \" + msg);\n  }\n  finally {\n    try {\n      deleteDirectory(new File(tempTestDir));\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 171,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 96,
        "startColumnNumber" : 66,
        "endLineNumber" : 126,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  for (int i=0; i < pairs.length; i+=2) {\n    String grammarStr=pairs[i];\n    String expect=pairs[i + 1];\n    String[] lines=grammarStr.split(\"\\n\");\n    String fileName=getFilenameFromFirstLineOfGrammar(lines[0]);\n    String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n    String tempTestDir=Paths.get(TempDirectory,tempDirName).toString();\n    try {\n      ErrorQueue equeue=antlrOnString(tempTestDir,null,fileName,grammarStr,false);\n      String actual=equeue.toString(true);\n      actual=actual.replace(tempTestDir + File.separator,\"\");\n      String msg=grammarStr;\n      msg=msg.replace(\"\\n\",\"\\\\n\");\n      msg=msg.replace(\"\\r\",\"\\\\r\");\n      msg=msg.replace(\"\\t\",\"\\\\t\");\n      assertEquals(expect,actual,\"error in: \" + msg);\n    }\n  finally {\n      try {\n        deleteDirectory(new File(tempTestDir));\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 96,
        "startColumnNumber" : 1,
        "endLineNumber" : 126,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static void testErrors(String[] pairs,boolean printTree){\n  for (int i=0; i < pairs.length; i+=2) {\n    String grammarStr=pairs[i];\n    String expect=pairs[i + 1];\n    String[] lines=grammarStr.split(\"\\n\");\n    String fileName=getFilenameFromFirstLineOfGrammar(lines[0]);\n    String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n    String tempTestDir=Paths.get(TempDirectory,tempDirName).toString();\n    try {\n      ErrorQueue equeue=antlrOnString(tempTestDir,null,fileName,grammarStr,false);\n      String actual=equeue.toString(true);\n      actual=actual.replace(tempTestDir + File.separator,\"\");\n      String msg=grammarStr;\n      msg=msg.replace(\"\\n\",\"\\\\n\");\n      msg=msg.replace(\"\\r\",\"\\\\r\");\n      msg=msg.replace(\"\\t\",\"\\\\t\");\n      assertEquals(expect,actual,\"error in: \" + msg);\n    }\n  finally {\n      try {\n        deleteDirectory(new File(tempTestDir));\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 104,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 113
      },
      "nodeContext" : "String tempDirName=\"AntlrTestErrors-\" + Thread.currentThread().getName() + \"-\"+ System.currentTimeMillis();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 104,
    "startColumnNumber" : 45,
    "endLineNumber" : 104,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}