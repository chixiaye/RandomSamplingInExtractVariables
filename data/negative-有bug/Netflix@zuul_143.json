{
  "id" : 143,
  "expression" : "\"Content-Encoding\"",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-core/src/test/java/com/netflix/zuul/filters/common/GZipResponseFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Content-Encoding\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 77,
      "startColumnNumber" : 58,
      "endLineNumber" : 77,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 77,
        "startColumnNumber" : 29,
        "endLineNumber" : 77,
        "endColumnNumber" : 77
      },
      "nodeContext" : "result.getHeaders().getFirst(\"Content-Encoding\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(\"gzip\",result.getHeaders().getFirst(\"Content-Encoding\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertEquals(\"gzip\",result.getHeaders().getFirst(\"Content-Encoding\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1514,
        "startLineNumber" : 55,
        "startColumnNumber" : 69,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  originalRequestHeaders.set(\"Accept-Encoding\",\"gzip\");\n  byte[] originBody=\"blah\".getBytes();\n  response.getHeaders().set(\"Content-Length\",Integer.toString(originBody.length));\n  Mockito.when(filter.isRightSizeForGzip(response)).thenReturn(true);\n  response.setHasBody(true);\n  assertTrue(filter.shouldFilter(response));\n  final HttpResponseMessage result=filter.apply(response);\n  final HttpContent hc1=filter.processContentChunk(response,new DefaultHttpContent(Unpooled.wrappedBuffer(originBody)).retain());\n  final HttpContent hc2=filter.processContentChunk(response,new DefaultLastHttpContent());\n  final byte[] body=new byte[hc1.content().readableBytes() + hc2.content().readableBytes()];\n  final int hc1Len=hc1.content().readableBytes();\n  final int hc2Len=hc2.content().readableBytes();\n  hc1.content().readBytes(body,0,hc1Len);\n  hc2.content().readBytes(body,hc1Len,hc2Len);\n  byte[] unzippedBytes=IOUtils.toByteArray(new GZIPInputStream(new ByteArrayInputStream(body)));\n  String bodyStr=new String(unzippedBytes,\"UTF-8\");\n  assertEquals(\"blah\",bodyStr);\n  assertEquals(\"gzip\",result.getHeaders().getFirst(\"Content-Encoding\"));\n  assertEquals(0,result.getHeaders().get(\"Content-Length\").size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1589,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void prepareResponseBody_NeedsGZipping() throws Exception {\n  originalRequestHeaders.set(\"Accept-Encoding\",\"gzip\");\n  byte[] originBody=\"blah\".getBytes();\n  response.getHeaders().set(\"Content-Length\",Integer.toString(originBody.length));\n  Mockito.when(filter.isRightSizeForGzip(response)).thenReturn(true);\n  response.setHasBody(true);\n  assertTrue(filter.shouldFilter(response));\n  final HttpResponseMessage result=filter.apply(response);\n  final HttpContent hc1=filter.processContentChunk(response,new DefaultHttpContent(Unpooled.wrappedBuffer(originBody)).retain());\n  final HttpContent hc2=filter.processContentChunk(response,new DefaultLastHttpContent());\n  final byte[] body=new byte[hc1.content().readableBytes() + hc2.content().readableBytes()];\n  final int hc1Len=hc1.content().readableBytes();\n  final int hc2Len=hc2.content().readableBytes();\n  hc1.content().readBytes(body,0,hc1Len);\n  hc2.content().readBytes(body,hc1Len,hc2Len);\n  byte[] unzippedBytes=IOUtils.toByteArray(new GZIPInputStream(new ByteArrayInputStream(body)));\n  String bodyStr=new String(unzippedBytes,\"UTF-8\");\n  assertEquals(\"blah\",bodyStr);\n  assertEquals(\"gzip\",result.getHeaders().getFirst(\"Content-Encoding\"));\n  assertEquals(0,result.getHeaders().get(\"Content-Length\").size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertEquals(\"gzip\",result.getHeaders().getFirst(\"Content-Encoding\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 77,
    "startColumnNumber" : 58,
    "endLineNumber" : 77,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}