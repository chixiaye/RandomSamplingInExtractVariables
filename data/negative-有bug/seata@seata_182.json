{
  "id" : 182,
  "expression" : "new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME)",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/server/src/main/java/io/seata/server/session/SessionHolder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 96,
      "startColumnNumber" : 48,
      "endLineNumber" : 96,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 113
      },
      "nodeContext" : "RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 114
      },
      "nodeContext" : "RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 87,
        "startColumnNumber" : 53,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String sessionStorePath=CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n  if (sessionStorePath == null) {\n    throw new StoreException(\"the {store.file.dir} is empty.\");\n  }\n  ROOT_SESSION_MANAGER=new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME,sessionStorePath);\n  ASYNC_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StoreMode.FILE.equals(storeMode)) {\n  String sessionStorePath=CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n  if (sessionStorePath == null) {\n    throw new StoreException(\"the {store.file.dir} is empty.\");\n  }\n  ROOT_SESSION_MANAGER=new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME,sessionStorePath);\n  ASYNC_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n}\n else {\n  throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 84,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StoreMode.DB.equals(storeMode)) {\n}\n else if (StoreMode.FILE.equals(storeMode)) {\n  String sessionStorePath=CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n  if (sessionStorePath == null) {\n    throw new StoreException(\"the {store.file.dir} is empty.\");\n  }\n  ROOT_SESSION_MANAGER=new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME,sessionStorePath);\n  ASYNC_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);\n  RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n}\n else {\n  throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5123,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isBlank(mode)) {\n    mode=CONFIG.getConfig(ConfigurationKeys.STORE_MODE);\n  }\n  StoreMode storeMode=StoreMode.valueof(mode);\n  if (StoreMode.DB.equals(storeMode)) {\n  }\n else   if (StoreMode.FILE.equals(storeMode)) {\n    String sessionStorePath=CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n    if (sessionStorePath == null) {\n      throw new StoreException(\"the {store.file.dir} is empty.\");\n    }\n    ROOT_SESSION_MANAGER=new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME,sessionStorePath);\n    ASYNC_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);\n    RETRY_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);\n    RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n  }\n else {\n    throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n  }\n  if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n    ((Reloadable)ROOT_SESSION_MANAGER).reload();\n    Collection<GlobalSession> reloadedSessions=ROOT_SESSION_MANAGER.allSessions();\n    if (reloadedSessions != null && !reloadedSessions.isEmpty()) {\n      reloadedSessions.forEach(globalSession -> {\n        GlobalStatus globalStatus=globalSession.getStatus();\nswitch (globalStatus) {\ncase UnKnown:case Committed:case CommitFailed:case Rollbacked:case RollbackFailed:case TimeoutRollbacked:case TimeoutRollbackFailed:case Finished:          throw new ShouldNeverHappenException(\"Reloaded Session should NOT be \" + globalStatus);\ncase AsyncCommitting:        try {\n          globalSession.addSessionLifecycleListener(getAsyncCommittingSessionManager());\n          getAsyncCommittingSessionManager().addGlobalSession(globalSession);\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      break;\ndefault:{\n      ArrayList<BranchSession> branchSessions=globalSession.getSortedBranches();\n      branchSessions.forEach(branchSession -> {\n        try {\n          branchSession.lock();\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      }\n);\nswitch (globalStatus) {\ncase Committing:case CommitRetrying:        try {\n          globalSession.addSessionLifecycleListener(getRetryCommittingSessionManager());\n          getRetryCommittingSessionManager().addGlobalSession(globalSession);\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      break;\ncase Rollbacking:case RollbackRetrying:case TimeoutRollbacking:case TimeoutRollbackRetrying:    try {\n      globalSession.addSessionLifecycleListener(getRetryRollbackingSessionManager());\n      getRetryRollbackingSessionManager().addGlobalSession(globalSession);\n    }\n catch (    TransactionException e) {\n      throw new ShouldNeverHappenException(e);\n    }\n  break;\ncase Begin:globalSession.setActive(true);\nbreak;\ndefault:throw new ShouldNeverHappenException(\"NOT properly handled \" + globalStatus);\n}\nbreak;\n}\n}\n}\n);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5302,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Init.\n * @param mode the store mode: file„ÄÅdb\n * @throws IOException the io exception\n */\npublic static void init(String mode) throws IOException {\n  if (StringUtils.isBlank(mode)) {\n    mode=CONFIG.getConfig(ConfigurationKeys.STORE_MODE);\n  }\n  StoreMode storeMode=StoreMode.valueof(mode);\n  if (StoreMode.DB.equals(storeMode)) {\n  }\n else   if (StoreMode.FILE.equals(storeMode)) {\n    String sessionStorePath=CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n    if (sessionStorePath == null) {\n      throw new StoreException(\"the {store.file.dir} is empty.\");\n    }\n    ROOT_SESSION_MANAGER=new FileBasedSessionManager(ROOT_SESSION_MANAGER_NAME,sessionStorePath);\n    ASYNC_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(ASYNC_COMMITTING_SESSION_MANAGER_NAME);\n    RETRY_COMMITTING_SESSION_MANAGER=new DefaultSessionManager(RETRY_COMMITTING_SESSION_MANAGER_NAME);\n    RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n  }\n else {\n    throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n  }\n  if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n    ((Reloadable)ROOT_SESSION_MANAGER).reload();\n    Collection<GlobalSession> reloadedSessions=ROOT_SESSION_MANAGER.allSessions();\n    if (reloadedSessions != null && !reloadedSessions.isEmpty()) {\n      reloadedSessions.forEach(globalSession -> {\n        GlobalStatus globalStatus=globalSession.getStatus();\nswitch (globalStatus) {\ncase UnKnown:case Committed:case CommitFailed:case Rollbacked:case RollbackFailed:case TimeoutRollbacked:case TimeoutRollbackFailed:case Finished:          throw new ShouldNeverHappenException(\"Reloaded Session should NOT be \" + globalStatus);\ncase AsyncCommitting:        try {\n          globalSession.addSessionLifecycleListener(getAsyncCommittingSessionManager());\n          getAsyncCommittingSessionManager().addGlobalSession(globalSession);\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      break;\ndefault:{\n      ArrayList<BranchSession> branchSessions=globalSession.getSortedBranches();\n      branchSessions.forEach(branchSession -> {\n        try {\n          branchSession.lock();\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      }\n);\nswitch (globalStatus) {\ncase Committing:case CommitRetrying:        try {\n          globalSession.addSessionLifecycleListener(getRetryCommittingSessionManager());\n          getRetryCommittingSessionManager().addGlobalSession(globalSession);\n        }\n catch (        TransactionException e) {\n          throw new ShouldNeverHappenException(e);\n        }\n      break;\ncase Rollbacking:case RollbackRetrying:case TimeoutRollbacking:case TimeoutRollbackRetrying:    try {\n      globalSession.addSessionLifecycleListener(getRetryRollbackingSessionManager());\n      getRetryRollbackingSessionManager().addGlobalSession(globalSession);\n    }\n catch (    TransactionException e) {\n      throw new ShouldNeverHappenException(e);\n    }\n  break;\ncase Begin:globalSession.setActive(true);\nbreak;\ndefault:throw new ShouldNeverHappenException(\"NOT properly handled \" + globalStatus);\n}\nbreak;\n}\n}\n}\n);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 114
      },
      "nodeContext" : "RETRY_ROLLBACKING_SESSION_MANAGER=new DefaultSessionManager(RETRY_ROLLBACKING_SESSION_MANAGER_NAME);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "io.seata.server.session.DefaultSessionManager"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 96,
    "startColumnNumber" : 48,
    "endLineNumber" : 96,
    "endColumnNumber" : 113
  } ],
  "layoutRelationDataList" : [ ]
}