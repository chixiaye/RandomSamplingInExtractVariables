{
  "id" : 167,
  "expression" : "output.peek()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/operator/CEPRescalingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "output.peek()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 372,
      "startColumnNumber" : 61,
      "endLineNumber" : 372,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 372,
        "startColumnNumber" : 43,
        "endLineNumber" : 372,
        "endColumnNumber" : 74
      },
      "nodeContext" : "(StreamRecord<?>)output.peek()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 372,
        "startColumnNumber" : 28,
        "endLineNumber" : 372,
        "endColumnNumber" : 74
      },
      "nodeContext" : "resultRecord=(StreamRecord<?>)output.peek()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 372,
        "startColumnNumber" : 12,
        "endLineNumber" : 372,
        "endColumnNumber" : 75
      },
      "nodeContext" : "StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5302,
        "startLineNumber" : 284,
        "startColumnNumber" : 12,
        "endLineNumber" : 389,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  harness1.processWatermark(Long.MIN_VALUE);\n  harness2.processWatermark(Long.MIN_VALUE);\n  harness3.processWatermark(Long.MIN_VALUE);\n  harness1.processElement(new StreamRecord<>(startEvent1,1));\n  harness1.processElement(new StreamRecord<>(new Event(7,\"foobar\",1.0),2));\n  harness1.processElement(new StreamRecord<Event>(middleEvent1,3));\n  harness1.processElement(new StreamRecord<>(endEvent1,5));\n  harness1.processElement(new StreamRecord<>(startEvent3,10));\n  harness1.processElement(new StreamRecord<>(startEvent1,10));\n  harness2.processElement(new StreamRecord<>(startEvent2,7));\n  harness2.processElement(new StreamRecord<Event>(middleEvent2,8));\n  harness3.processElement(new StreamRecord<>(startEvent4,15));\n  harness3.processElement(new StreamRecord<Event>(middleEvent4,16));\n  harness3.processElement(new StreamRecord<>(endEvent4,17));\n  assertEquals(1,harness1.getOutput().size());\n  verifyWatermark(harness1.getOutput().poll(),Long.MIN_VALUE);\n  assertEquals(1,harness2.getOutput().size());\n  verifyWatermark(harness2.getOutput().poll(),Long.MIN_VALUE);\n  assertEquals(1,harness3.getOutput().size());\n  verifyWatermark(harness3.getOutput().poll(),Long.MIN_VALUE);\n  OperatorSubtaskState snapshot=AbstractStreamOperatorTestHarness.repackageState(harness2.snapshot(0,0),harness1.snapshot(0,0),harness3.snapshot(0,0));\n  OperatorSubtaskState initState1=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,0);\n  OperatorSubtaskState initState2=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,1);\n  harness4=getTestHarness(maxParallelism,2,0);\n  harness4.setup();\n  harness4.initializeState(initState1);\n  harness4.open();\n  harness5=getTestHarness(maxParallelism,2,1);\n  harness5.setup();\n  harness5.initializeState(initState2);\n  harness5.open();\n  harness5.processElement(new StreamRecord<>(endEvent2,11));\n  harness5.processWatermark(new Watermark(12));\n  verifyPattern(harness5.getOutput().poll(),startEvent2,middleEvent2,endEvent2);\n  verifyWatermark(harness5.getOutput().poll(),12);\n  harness4.processWatermark(new Watermark(12));\n  assertEquals(2,harness4.getOutput().size());\n  verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n  verifyWatermark(harness4.getOutput().poll(),12);\n  harness4.processElement(new StreamRecord<Event>(middleEvent3,15));\n  harness4.processElement(new StreamRecord<>(endEvent3,16));\n  harness4.processElement(new StreamRecord<Event>(middleEvent1,15));\n  harness4.processElement(new StreamRecord<>(endEvent1,16));\n  harness4.processWatermark(new Watermark(Long.MAX_VALUE));\n  harness5.processWatermark(new Watermark(Long.MAX_VALUE));\n  assertEquals(3,harness4.getOutput().size());\n  Queue<Object> output=harness4.getOutput();\n  StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n  assertTrue(resultRecord.getValue() instanceof Map);\n  @SuppressWarnings(\"unchecked\") Map<String,List<Event>> patternMap=(Map<String,List<Event>>)resultRecord.getValue();\n  if (patternMap.get(\"start\").get(0).getId() == 7) {\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n  }\n else {\n    verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n  }\n  assertEquals(2,harness5.getOutput().size());\n  verifyPattern(harness5.getOutput().poll(),startEvent4,middleEvent4,endEvent4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 585,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5511,
        "startLineNumber" : 284,
        "startColumnNumber" : 8,
        "endLineNumber" : 395,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  harness1.processWatermark(Long.MIN_VALUE);\n  harness2.processWatermark(Long.MIN_VALUE);\n  harness3.processWatermark(Long.MIN_VALUE);\n  harness1.processElement(new StreamRecord<>(startEvent1,1));\n  harness1.processElement(new StreamRecord<>(new Event(7,\"foobar\",1.0),2));\n  harness1.processElement(new StreamRecord<Event>(middleEvent1,3));\n  harness1.processElement(new StreamRecord<>(endEvent1,5));\n  harness1.processElement(new StreamRecord<>(startEvent3,10));\n  harness1.processElement(new StreamRecord<>(startEvent1,10));\n  harness2.processElement(new StreamRecord<>(startEvent2,7));\n  harness2.processElement(new StreamRecord<Event>(middleEvent2,8));\n  harness3.processElement(new StreamRecord<>(startEvent4,15));\n  harness3.processElement(new StreamRecord<Event>(middleEvent4,16));\n  harness3.processElement(new StreamRecord<>(endEvent4,17));\n  assertEquals(1,harness1.getOutput().size());\n  verifyWatermark(harness1.getOutput().poll(),Long.MIN_VALUE);\n  assertEquals(1,harness2.getOutput().size());\n  verifyWatermark(harness2.getOutput().poll(),Long.MIN_VALUE);\n  assertEquals(1,harness3.getOutput().size());\n  verifyWatermark(harness3.getOutput().poll(),Long.MIN_VALUE);\n  OperatorSubtaskState snapshot=AbstractStreamOperatorTestHarness.repackageState(harness2.snapshot(0,0),harness1.snapshot(0,0),harness3.snapshot(0,0));\n  OperatorSubtaskState initState1=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,0);\n  OperatorSubtaskState initState2=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,1);\n  harness4=getTestHarness(maxParallelism,2,0);\n  harness4.setup();\n  harness4.initializeState(initState1);\n  harness4.open();\n  harness5=getTestHarness(maxParallelism,2,1);\n  harness5.setup();\n  harness5.initializeState(initState2);\n  harness5.open();\n  harness5.processElement(new StreamRecord<>(endEvent2,11));\n  harness5.processWatermark(new Watermark(12));\n  verifyPattern(harness5.getOutput().poll(),startEvent2,middleEvent2,endEvent2);\n  verifyWatermark(harness5.getOutput().poll(),12);\n  harness4.processWatermark(new Watermark(12));\n  assertEquals(2,harness4.getOutput().size());\n  verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n  verifyWatermark(harness4.getOutput().poll(),12);\n  harness4.processElement(new StreamRecord<Event>(middleEvent3,15));\n  harness4.processElement(new StreamRecord<>(endEvent3,16));\n  harness4.processElement(new StreamRecord<Event>(middleEvent1,15));\n  harness4.processElement(new StreamRecord<>(endEvent1,16));\n  harness4.processWatermark(new Watermark(Long.MAX_VALUE));\n  harness5.processWatermark(new Watermark(Long.MAX_VALUE));\n  assertEquals(3,harness4.getOutput().size());\n  Queue<Object> output=harness4.getOutput();\n  StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n  assertTrue(resultRecord.getValue() instanceof Map);\n  @SuppressWarnings(\"unchecked\") Map<String,List<Event>> patternMap=(Map<String,List<Event>>)resultRecord.getValue();\n  if (patternMap.get(\"start\").get(0).getId() == 7) {\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n  }\n else {\n    verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n  }\n  assertEquals(2,harness5.getOutput().size());\n  verifyPattern(harness5.getOutput().poll(),startEvent4,middleEvent4,endEvent4);\n}\n  finally {\n  closeSilently(harness1);\n  closeSilently(harness2);\n  closeSilently(harness3);\n  closeSilently(harness4);\n  closeSilently(harness5);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 607,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9788,
        "startLineNumber" : 183,
        "startColumnNumber" : 62,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int maxParallelism=10;\n  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){\n    private static final long serialVersionUID=-4873366487571254798L;\n    @Override public Integer getKey(    Event value) throws Exception {\n      return value.getId();\n    }\n  }\n;\n  Event startEvent1=new Event(7,\"start\",1.0);\n  SubEvent middleEvent1=new SubEvent(7,\"foo\",1.0,10.0);\n  Event endEvent1=new Event(7,\"end\",1.0);\n  int keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent1),maxParallelism);\n  assertEquals(1,keygroup);\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent2=new Event(45,\"start\",1.0);\n  SubEvent middleEvent2=new SubEvent(45,\"foo\",1.0,10.0);\n  Event endEvent2=new Event(45,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent2),maxParallelism);\n  assertEquals(6,keygroup);\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent3=new Event(90,\"start\",1.0);\n  SubEvent middleEvent3=new SubEvent(90,\"foo\",1.0,10.0);\n  Event endEvent3=new Event(90,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent3),maxParallelism);\n  assertEquals(2,keygroup);\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent4=new Event(10,\"start\",1.0);\n  SubEvent middleEvent4=new SubEvent(10,\"foo\",1.0,10.0);\n  Event endEvent4=new Event(10,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent4),maxParallelism);\n  assertEquals(9,keygroup);\n  assertEquals(2,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness1=getTestHarness(maxParallelism,3,0);\n  harness1.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness2=getTestHarness(maxParallelism,3,1);\n  harness2.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness3=getTestHarness(maxParallelism,3,2);\n  harness3.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness4=null;\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness5=null;\n  try {\n    harness1.processWatermark(Long.MIN_VALUE);\n    harness2.processWatermark(Long.MIN_VALUE);\n    harness3.processWatermark(Long.MIN_VALUE);\n    harness1.processElement(new StreamRecord<>(startEvent1,1));\n    harness1.processElement(new StreamRecord<>(new Event(7,\"foobar\",1.0),2));\n    harness1.processElement(new StreamRecord<Event>(middleEvent1,3));\n    harness1.processElement(new StreamRecord<>(endEvent1,5));\n    harness1.processElement(new StreamRecord<>(startEvent3,10));\n    harness1.processElement(new StreamRecord<>(startEvent1,10));\n    harness2.processElement(new StreamRecord<>(startEvent2,7));\n    harness2.processElement(new StreamRecord<Event>(middleEvent2,8));\n    harness3.processElement(new StreamRecord<>(startEvent4,15));\n    harness3.processElement(new StreamRecord<Event>(middleEvent4,16));\n    harness3.processElement(new StreamRecord<>(endEvent4,17));\n    assertEquals(1,harness1.getOutput().size());\n    verifyWatermark(harness1.getOutput().poll(),Long.MIN_VALUE);\n    assertEquals(1,harness2.getOutput().size());\n    verifyWatermark(harness2.getOutput().poll(),Long.MIN_VALUE);\n    assertEquals(1,harness3.getOutput().size());\n    verifyWatermark(harness3.getOutput().poll(),Long.MIN_VALUE);\n    OperatorSubtaskState snapshot=AbstractStreamOperatorTestHarness.repackageState(harness2.snapshot(0,0),harness1.snapshot(0,0),harness3.snapshot(0,0));\n    OperatorSubtaskState initState1=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,0);\n    OperatorSubtaskState initState2=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,1);\n    harness4=getTestHarness(maxParallelism,2,0);\n    harness4.setup();\n    harness4.initializeState(initState1);\n    harness4.open();\n    harness5=getTestHarness(maxParallelism,2,1);\n    harness5.setup();\n    harness5.initializeState(initState2);\n    harness5.open();\n    harness5.processElement(new StreamRecord<>(endEvent2,11));\n    harness5.processWatermark(new Watermark(12));\n    verifyPattern(harness5.getOutput().poll(),startEvent2,middleEvent2,endEvent2);\n    verifyWatermark(harness5.getOutput().poll(),12);\n    harness4.processWatermark(new Watermark(12));\n    assertEquals(2,harness4.getOutput().size());\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    verifyWatermark(harness4.getOutput().poll(),12);\n    harness4.processElement(new StreamRecord<Event>(middleEvent3,15));\n    harness4.processElement(new StreamRecord<>(endEvent3,16));\n    harness4.processElement(new StreamRecord<Event>(middleEvent1,15));\n    harness4.processElement(new StreamRecord<>(endEvent1,16));\n    harness4.processWatermark(new Watermark(Long.MAX_VALUE));\n    harness5.processWatermark(new Watermark(Long.MAX_VALUE));\n    assertEquals(3,harness4.getOutput().size());\n    Queue<Object> output=harness4.getOutput();\n    StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n    assertTrue(resultRecord.getValue() instanceof Map);\n    @SuppressWarnings(\"unchecked\") Map<String,List<Event>> patternMap=(Map<String,List<Event>>)resultRecord.getValue();\n    if (patternMap.get(\"start\").get(0).getId() == 7) {\n      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n    }\n else {\n      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    }\n    assertEquals(2,harness5.getOutput().size());\n    verifyPattern(harness5.getOutput().poll(),startEvent4,middleEvent4,endEvent4);\n  }\n  finally {\n    closeSilently(harness1);\n    closeSilently(harness2);\n    closeSilently(harness3);\n    closeSilently(harness4);\n    closeSilently(harness5);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1059,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9856,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCEPFunctionScalingDown() throws Exception {\n  int maxParallelism=10;\n  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){\n    private static final long serialVersionUID=-4873366487571254798L;\n    @Override public Integer getKey(    Event value) throws Exception {\n      return value.getId();\n    }\n  }\n;\n  Event startEvent1=new Event(7,\"start\",1.0);\n  SubEvent middleEvent1=new SubEvent(7,\"foo\",1.0,10.0);\n  Event endEvent1=new Event(7,\"end\",1.0);\n  int keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent1),maxParallelism);\n  assertEquals(1,keygroup);\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent2=new Event(45,\"start\",1.0);\n  SubEvent middleEvent2=new SubEvent(45,\"foo\",1.0,10.0);\n  Event endEvent2=new Event(45,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent2),maxParallelism);\n  assertEquals(6,keygroup);\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent3=new Event(90,\"start\",1.0);\n  SubEvent middleEvent3=new SubEvent(90,\"foo\",1.0,10.0);\n  Event endEvent3=new Event(90,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent3),maxParallelism);\n  assertEquals(2,keygroup);\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  Event startEvent4=new Event(10,\"start\",1.0);\n  SubEvent middleEvent4=new SubEvent(10,\"foo\",1.0,10.0);\n  Event endEvent4=new Event(10,\"end\",1.0);\n  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent4),maxParallelism);\n  assertEquals(9,keygroup);\n  assertEquals(2,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));\n  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness1=getTestHarness(maxParallelism,3,0);\n  harness1.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness2=getTestHarness(maxParallelism,3,1);\n  harness2.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness3=getTestHarness(maxParallelism,3,2);\n  harness3.open();\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness4=null;\n  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness5=null;\n  try {\n    harness1.processWatermark(Long.MIN_VALUE);\n    harness2.processWatermark(Long.MIN_VALUE);\n    harness3.processWatermark(Long.MIN_VALUE);\n    harness1.processElement(new StreamRecord<>(startEvent1,1));\n    harness1.processElement(new StreamRecord<>(new Event(7,\"foobar\",1.0),2));\n    harness1.processElement(new StreamRecord<Event>(middleEvent1,3));\n    harness1.processElement(new StreamRecord<>(endEvent1,5));\n    harness1.processElement(new StreamRecord<>(startEvent3,10));\n    harness1.processElement(new StreamRecord<>(startEvent1,10));\n    harness2.processElement(new StreamRecord<>(startEvent2,7));\n    harness2.processElement(new StreamRecord<Event>(middleEvent2,8));\n    harness3.processElement(new StreamRecord<>(startEvent4,15));\n    harness3.processElement(new StreamRecord<Event>(middleEvent4,16));\n    harness3.processElement(new StreamRecord<>(endEvent4,17));\n    assertEquals(1,harness1.getOutput().size());\n    verifyWatermark(harness1.getOutput().poll(),Long.MIN_VALUE);\n    assertEquals(1,harness2.getOutput().size());\n    verifyWatermark(harness2.getOutput().poll(),Long.MIN_VALUE);\n    assertEquals(1,harness3.getOutput().size());\n    verifyWatermark(harness3.getOutput().poll(),Long.MIN_VALUE);\n    OperatorSubtaskState snapshot=AbstractStreamOperatorTestHarness.repackageState(harness2.snapshot(0,0),harness1.snapshot(0,0),harness3.snapshot(0,0));\n    OperatorSubtaskState initState1=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,0);\n    OperatorSubtaskState initState2=AbstractStreamOperatorTestHarness.repartitionOperatorState(snapshot,maxParallelism,3,2,1);\n    harness4=getTestHarness(maxParallelism,2,0);\n    harness4.setup();\n    harness4.initializeState(initState1);\n    harness4.open();\n    harness5=getTestHarness(maxParallelism,2,1);\n    harness5.setup();\n    harness5.initializeState(initState2);\n    harness5.open();\n    harness5.processElement(new StreamRecord<>(endEvent2,11));\n    harness5.processWatermark(new Watermark(12));\n    verifyPattern(harness5.getOutput().poll(),startEvent2,middleEvent2,endEvent2);\n    verifyWatermark(harness5.getOutput().poll(),12);\n    harness4.processWatermark(new Watermark(12));\n    assertEquals(2,harness4.getOutput().size());\n    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    verifyWatermark(harness4.getOutput().poll(),12);\n    harness4.processElement(new StreamRecord<Event>(middleEvent3,15));\n    harness4.processElement(new StreamRecord<>(endEvent3,16));\n    harness4.processElement(new StreamRecord<Event>(middleEvent1,15));\n    harness4.processElement(new StreamRecord<>(endEvent1,16));\n    harness4.processWatermark(new Watermark(Long.MAX_VALUE));\n    harness5.processWatermark(new Watermark(Long.MAX_VALUE));\n    assertEquals(3,harness4.getOutput().size());\n    Queue<Object> output=harness4.getOutput();\n    StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n    assertTrue(resultRecord.getValue() instanceof Map);\n    @SuppressWarnings(\"unchecked\") Map<String,List<Event>> patternMap=(Map<String,List<Event>>)resultRecord.getValue();\n    if (patternMap.get(\"start\").get(0).getId() == 7) {\n      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n    }\n else {\n      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);\n      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);\n    }\n    assertEquals(2,harness5.getOutput().size());\n    verifyPattern(harness5.getOutput().poll(),startEvent4,middleEvent4,endEvent4);\n  }\n  finally {\n    closeSilently(harness1);\n    closeSilently(harness2);\n    closeSilently(harness3);\n    closeSilently(harness4);\n    closeSilently(harness5);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1067,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 372,
        "startColumnNumber" : 12,
        "endLineNumber" : 372,
        "endColumnNumber" : 75
      },
      "nodeContext" : "StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 372,
    "startColumnNumber" : 61,
    "endLineNumber" : 372,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}