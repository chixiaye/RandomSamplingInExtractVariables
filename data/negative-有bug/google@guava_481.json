{
  "id" : 481,
  "expression" : "multimap.asMap().entrySet().iterator()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-testlib/src/com/google/common/collect/testing/google/UnmodifiableCollectionTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "multimap.asMap().entrySet().iterator()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 292,
      "startColumnNumber" : 29,
      "endLineNumber" : 292,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 292,
        "startColumnNumber" : 29,
        "endLineNumber" : 292,
        "endColumnNumber" : 74
      },
      "nodeContext" : "multimap.asMap().entrySet().iterator().next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 292,
        "startColumnNumber" : 29,
        "endLineNumber" : 292,
        "endColumnNumber" : 85
      },
      "nodeContext" : "multimap.asMap().entrySet().iterator().next().getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 292,
        "startColumnNumber" : 20,
        "endLineNumber" : 292,
        "endColumnNumber" : 85
      },
      "nodeContext" : "values=multimap.asMap().entrySet().iterator().next().getValue()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 292,
        "startColumnNumber" : 6,
        "endLineNumber" : 292,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 291,
        "startColumnNumber" : 29,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n  assertCollectionIsUnmodifiable(values,sampleValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 291,
        "startColumnNumber" : 4,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!multimap.isEmpty()) {\n  Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n  assertCollectionIsUnmodifiable(values,sampleValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5030,
        "startLineNumber" : 267,
        "startColumnNumber" : 59,
        "endLineNumber" : 404,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Entry<K,V>> originalEntries=Collections.unmodifiableList(Lists.newArrayList(multimap.entries()));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  Collection<V> sampleValueAsCollection=Collections.singleton(sampleValue);\n  try {\n    multimap.clear();\n    fail(\"clear succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertSetIsUnmodifiable(multimap.asMap().entrySet(),Maps.immutableEntry(sampleKey,sampleValueAsCollection));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n    assertCollectionIsUnmodifiable(values,sampleValue);\n  }\n  assertCollectionIsUnmodifiable(multimap.entries(),Maps.immutableEntry(sampleKey,sampleValue));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  for (  Entry<K,V> entry : multimap.entries()) {\n    assertMapEntryIsUnmodifiable(entry);\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertMultisetIsUnmodifiable(multimap.keys(),sampleKey);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertSetIsUnmodifiable(multimap.keySet(),sampleKey);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    K key=multimap.keySet().iterator().next();\n    assertCollectionIsUnmodifiable(multimap.get(key),sampleValue);\n    assertMultimapRemainsUnmodified(multimap,originalEntries);\n  }\n  try {\n    multimap.put(sampleKey,sampleValue);\n    fail(\"put succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.putAll(sampleKey,sampleValueAsCollection);\n    fail(\"putAll(K, Iterable) succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  Multimap<K,V> multimap2=ArrayListMultimap.create();\n  multimap2.put(sampleKey,sampleValue);\n  try {\n    multimap.putAll(multimap2);\n    fail(\"putAll(Multimap<K, V>) succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.remove(sampleKey,sampleValue);\n    fail(\"remove succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.removeAll(sampleKey);\n    fail(\"removeAll succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.replaceValues(sampleKey,sampleValueAsCollection);\n    fail(\"replaceValues succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.asMap().remove(sampleKey);\n    fail(\"asMap().remove() succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    K presentKey=multimap.keySet().iterator().next();\n    try {\n      multimap.asMap().get(presentKey).remove(sampleValue);\n      fail(\"asMap().get().remove() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n    assertMultimapRemainsUnmodified(multimap,originalEntries);\n    try {\n      multimap.asMap().values().iterator().next().remove(sampleValue);\n      fail(\"asMap().values().iterator().next().remove() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n    try {\n      ((Collection<?>)multimap.asMap().values().toArray()[0]).clear();\n      fail(\"asMap().values().toArray()[0].clear() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n  }\n  assertCollectionIsUnmodifiable(multimap.values(),sampleValue);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 494,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5957,
        "startLineNumber" : 248,
        "startColumnNumber" : 2,
        "endLineNumber" : 404,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Verifies that a multimap is immutable. <p>A multimap is considered immutable if: <ol> <li>All its mutation methods result in UnsupportedOperationException, and do not change the underlying contents. <li>All methods that return objects that can indirectly mutate the multimap throw UnsupportedOperationException when those mutators </ol>\n * @param multimap the presumed-immutable multimap\n * @param sampleKey a key of the same type as that contained by {@code multimap}.  {@code multimap}may or may not have  {@code sampleKey} as a key.\n * @param sampleValue a key of the same type as that contained by {@code multimap}.  {@code multimap} may or may not have {@code sampleValue} as a key.\n */\npublic static <K,V>void assertMultimapIsUnmodifiable(Multimap<K,V> multimap,K sampleKey,V sampleValue){\n  List<Entry<K,V>> originalEntries=Collections.unmodifiableList(Lists.newArrayList(multimap.entries()));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  Collection<V> sampleValueAsCollection=Collections.singleton(sampleValue);\n  try {\n    multimap.clear();\n    fail(\"clear succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertSetIsUnmodifiable(multimap.asMap().entrySet(),Maps.immutableEntry(sampleKey,sampleValueAsCollection));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n    assertCollectionIsUnmodifiable(values,sampleValue);\n  }\n  assertCollectionIsUnmodifiable(multimap.entries(),Maps.immutableEntry(sampleKey,sampleValue));\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  for (  Entry<K,V> entry : multimap.entries()) {\n    assertMapEntryIsUnmodifiable(entry);\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertMultisetIsUnmodifiable(multimap.keys(),sampleKey);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  assertSetIsUnmodifiable(multimap.keySet(),sampleKey);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    K key=multimap.keySet().iterator().next();\n    assertCollectionIsUnmodifiable(multimap.get(key),sampleValue);\n    assertMultimapRemainsUnmodified(multimap,originalEntries);\n  }\n  try {\n    multimap.put(sampleKey,sampleValue);\n    fail(\"put succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.putAll(sampleKey,sampleValueAsCollection);\n    fail(\"putAll(K, Iterable) succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  Multimap<K,V> multimap2=ArrayListMultimap.create();\n  multimap2.put(sampleKey,sampleValue);\n  try {\n    multimap.putAll(multimap2);\n    fail(\"putAll(Multimap<K, V>) succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.remove(sampleKey,sampleValue);\n    fail(\"remove succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.removeAll(sampleKey);\n    fail(\"removeAll succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.replaceValues(sampleKey,sampleValueAsCollection);\n    fail(\"replaceValues succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  try {\n    multimap.asMap().remove(sampleKey);\n    fail(\"asMap().remove() succeeded on unmodifiable multimap\");\n  }\n catch (  UnsupportedOperationException expected) {\n  }\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n  if (!multimap.isEmpty()) {\n    K presentKey=multimap.keySet().iterator().next();\n    try {\n      multimap.asMap().get(presentKey).remove(sampleValue);\n      fail(\"asMap().get().remove() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n    assertMultimapRemainsUnmodified(multimap,originalEntries);\n    try {\n      multimap.asMap().values().iterator().next().remove(sampleValue);\n      fail(\"asMap().values().iterator().next().remove() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n    try {\n      ((Collection<?>)multimap.asMap().values().toArray()[0]).clear();\n      fail(\"asMap().values().toArray()[0].clear() succeeded on unmodifiable multimap\");\n    }\n catch (    UnsupportedOperationException expected) {\n    }\n  }\n  assertCollectionIsUnmodifiable(multimap.values(),sampleValue);\n  assertMultimapRemainsUnmodified(multimap,originalEntries);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 521,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 292,
        "startColumnNumber" : 6,
        "endLineNumber" : 292,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Collection<V> values=multimap.asMap().entrySet().iterator().next().getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "java.util.Iterator<java.util.Map.Entry<K,java.util.Collection<V>>>"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 292,
    "startColumnNumber" : 29,
    "endLineNumber" : 292,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}