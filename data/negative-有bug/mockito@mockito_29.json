{
  "id" : 29,
  "expression" : "mock.simpleMethod()",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 22,
      "startColumnNumber" : 13,
      "endLineNumber" : 22,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 33
      },
      "nodeContext" : "when(mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 51
      },
      "nodeContext" : "when(mock.simpleMethod()).thenReturn(\"one\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 69
      },
      "nodeContext" : "when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 89
      },
      "nodeContext" : "when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 90
      },
      "nodeContext" : "when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 22,
        "startColumnNumber" : 8,
        "endLineNumber" : 22,
        "endColumnNumber" : 90
      },
      "nodeContext" : "when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 24,
      "startColumnNumber" : 28,
      "endLineNumber" : 24,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(\"one\",mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"one\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"one\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 25,
      "startColumnNumber" : 28,
      "endLineNumber" : 25,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(\"two\",mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"two\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(\"two\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 26,
      "startColumnNumber" : 30,
      "endLineNumber" : 26,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 27,
      "startColumnNumber" : 30,
      "endLineNumber" : 27,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "mock.simpleMethod()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 28,
      "startColumnNumber" : 30,
      "endLineNumber" : 28,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 21,
        "startColumnNumber" : 68,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_return_consecutive_values() throws Exception {\n  when(mock.simpleMethod()).thenReturn(\"one\").thenReturn(\"two\").thenReturn(\"three\");\n  assertEquals(\"one\",mock.simpleMethod());\n  assertEquals(\"two\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n  assertEquals(\"three\",mock.simpleMethod());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertEquals(\"three\",mock.simpleMethod());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 22,
    "startColumnNumber" : 13,
    "endLineNumber" : 22,
    "endColumnNumber" : 32
  }, {
    "charLength" : 19,
    "startLineNumber" : 24,
    "startColumnNumber" : 28,
    "endLineNumber" : 24,
    "endColumnNumber" : 47
  }, {
    "charLength" : 19,
    "startLineNumber" : 25,
    "startColumnNumber" : 28,
    "endLineNumber" : 25,
    "endColumnNumber" : 47
  }, {
    "charLength" : 19,
    "startLineNumber" : 26,
    "startColumnNumber" : 30,
    "endLineNumber" : 26,
    "endColumnNumber" : 49
  }, {
    "charLength" : 19,
    "startLineNumber" : 27,
    "startColumnNumber" : 30,
    "endLineNumber" : 27,
    "endColumnNumber" : 49
  }, {
    "charLength" : 19,
    "startLineNumber" : 28,
    "startColumnNumber" : 30,
    "endLineNumber" : 28,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}