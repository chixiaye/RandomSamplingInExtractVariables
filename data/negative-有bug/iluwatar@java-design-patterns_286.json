{
  "id" : 286,
  "expression" : "j < columns",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/master-worker-pattern/src/test/java/com/iluwatar/masterworker/ArrayInputTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j < columns",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 44,
      "startColumnNumber" : 22,
      "endLineNumber" : 44,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < columns; j++) {\n  inputMatrix[i][j]=rand.nextInt(10);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 43,
        "startColumnNumber" : 35,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int j=0; j < columns; j++) {\n    inputMatrix[i][j]=rand.nextInt(10);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < rows; i++) {\n  for (int j=0; j < columns; j++) {\n    inputMatrix[i][j]=rand.nextInt(10);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 38,
        "startColumnNumber" : 24,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int rows=10;\n  int columns=10;\n  int[][] inputMatrix=new int[rows][columns];\n  Random rand=new Random();\n  for (int i=0; i < rows; i++) {\n    for (int j=0; j < columns; j++) {\n      inputMatrix[i][j]=rand.nextInt(10);\n    }\n  }\n  ArrayInput i=new ArrayInput(inputMatrix);\n  ArrayList<Input> table=i.divideData(4);\n  int[][] division1=new int[][]{inputMatrix[0],inputMatrix[1],inputMatrix[2]};\n  int[][] division2=new int[][]{inputMatrix[3],inputMatrix[4],inputMatrix[5]};\n  int[][] division3=new int[][]{inputMatrix[6],inputMatrix[7]};\n  int[][] division4=new int[][]{inputMatrix[8],inputMatrix[9]};\n  assertTrue(ArrayUtilityMethods.matricesSame((int[][])table.get(0).data,division1) && ArrayUtilityMethods.matricesSame((int[][])table.get(1).data,division2) && ArrayUtilityMethods.matricesSame((int[][])table.get(2).data,division3)&& ArrayUtilityMethods.matricesSame((int[][])table.get(3).data,division4));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 235,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test void divideDataTest(){\n  int rows=10;\n  int columns=10;\n  int[][] inputMatrix=new int[rows][columns];\n  Random rand=new Random();\n  for (int i=0; i < rows; i++) {\n    for (int j=0; j < columns; j++) {\n      inputMatrix[i][j]=rand.nextInt(10);\n    }\n  }\n  ArrayInput i=new ArrayInput(inputMatrix);\n  ArrayList<Input> table=i.divideData(4);\n  int[][] division1=new int[][]{inputMatrix[0],inputMatrix[1],inputMatrix[2]};\n  int[][] division2=new int[][]{inputMatrix[3],inputMatrix[4],inputMatrix[5]};\n  int[][] division3=new int[][]{inputMatrix[6],inputMatrix[7]};\n  int[][] division4=new int[][]{inputMatrix[8],inputMatrix[9]};\n  assertTrue(ArrayUtilityMethods.matricesSame((int[][])table.get(0).data,division1) && ArrayUtilityMethods.matricesSame((int[][])table.get(1).data,division2) && ArrayUtilityMethods.matricesSame((int[][])table.get(2).data,division3)&& ArrayUtilityMethods.matricesSame((int[][])table.get(3).data,division4));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 46,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < columns; j++) {\n  inputMatrix[i][j]=rand.nextInt(10);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 44,
    "startColumnNumber" : 22,
    "endLineNumber" : 44,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}