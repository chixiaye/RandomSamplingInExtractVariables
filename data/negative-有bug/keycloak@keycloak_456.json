{
  "id" : 456,
  "expression" : "(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout)",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/adapters/saml/core/src/main/java/org/keycloak/adapters/cloned/HttpClientBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 304,
      "startColumnNumber" : 66,
      "endLineNumber" : 304,
      "endColumnNumber" : 140
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 141
      },
      "nodeContext" : "HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 142
      },
      "nodeContext" : "HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 303,
        "startColumnNumber" : 49,
        "endLineNumber" : 305,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 305,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (establishConnectionTimeout > -1) {\n  HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3561,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SSLSocketFactory sslsf=null;\n  SSLContext theContext=sslContext;\n  if (disableTrustManager) {\n    theContext=SSLContext.getInstance(\"SSL\");\n    theContext.init(null,new TrustManager[]{new PassthroughTrustManager()},new SecureRandom());\n    verifier=new AllowAllHostnameVerifier();\n    sslsf=new SniSSLSocketFactory(theContext,verifier);\n  }\n else   if (theContext != null) {\n    sslsf=new SniSSLSocketFactory(theContext,verifier);\n  }\n else   if (clientKeyStore != null || truststore != null) {\n    sslsf=new SniSSLSocketFactory(SSLSocketFactory.TLS,clientKeyStore,clientPrivateKeyPassword,truststore,null,verifier);\n  }\n else {\n    final SSLContext tlsContext=SSLContext.getInstance(SSLSocketFactory.TLS);\n    tlsContext.init(null,null,null);\n    sslsf=new SniSSLSocketFactory(tlsContext,verifier);\n  }\n  SchemeRegistry registry=new SchemeRegistry();\n  registry.register(new Scheme(\"http\",80,PlainSocketFactory.getSocketFactory()));\n  Scheme httpsScheme=new Scheme(\"https\",443,sslsf);\n  registry.register(httpsScheme);\n  ClientConnectionManager cm=null;\n  if (connectionPoolSize > 0) {\n    ThreadSafeClientConnManager tcm=new ThreadSafeClientConnManager(registry,connectionTTL,connectionTTLUnit);\n    tcm.setMaxTotal(connectionPoolSize);\n    if (maxPooledPerRoute == 0)     maxPooledPerRoute=connectionPoolSize;\n    tcm.setDefaultMaxPerRoute(maxPooledPerRoute);\n    cm=tcm;\n  }\n else {\n    cm=new SingleClientConnManager(registry);\n  }\n  BasicHttpParams params=new BasicHttpParams();\n  params.setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);\n  if (proxyHost != null) {\n    params.setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHost);\n  }\n  if (socketTimeout > -1) {\n    HttpConnectionParams.setSoTimeout(params,(int)socketTimeoutUnits.toMillis(socketTimeout));\n  }\n  if (establishConnectionTimeout > -1) {\n    HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n  }\n  DefaultHttpClient client=new DefaultHttpClient(cm,params);\n  if (disableCookieCache) {\n    client.setCookieStore(new CookieStore(){\n      @Override public void addCookie(      Cookie cookie){\n      }\n      @Override public List<Cookie> getCookies(){\n        return Collections.emptyList();\n      }\n      @Override public boolean clearExpired(      Date date){\n        return false;\n      }\n      @Override public void clear(){\n      }\n    }\n);\n  }\n  return client;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 340,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3640,
        "startLineNumber" : 258,
        "startColumnNumber" : 8,
        "endLineNumber" : 335,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  SSLSocketFactory sslsf=null;\n  SSLContext theContext=sslContext;\n  if (disableTrustManager) {\n    theContext=SSLContext.getInstance(\"SSL\");\n    theContext.init(null,new TrustManager[]{new PassthroughTrustManager()},new SecureRandom());\n    verifier=new AllowAllHostnameVerifier();\n    sslsf=new SniSSLSocketFactory(theContext,verifier);\n  }\n else   if (theContext != null) {\n    sslsf=new SniSSLSocketFactory(theContext,verifier);\n  }\n else   if (clientKeyStore != null || truststore != null) {\n    sslsf=new SniSSLSocketFactory(SSLSocketFactory.TLS,clientKeyStore,clientPrivateKeyPassword,truststore,null,verifier);\n  }\n else {\n    final SSLContext tlsContext=SSLContext.getInstance(SSLSocketFactory.TLS);\n    tlsContext.init(null,null,null);\n    sslsf=new SniSSLSocketFactory(tlsContext,verifier);\n  }\n  SchemeRegistry registry=new SchemeRegistry();\n  registry.register(new Scheme(\"http\",80,PlainSocketFactory.getSocketFactory()));\n  Scheme httpsScheme=new Scheme(\"https\",443,sslsf);\n  registry.register(httpsScheme);\n  ClientConnectionManager cm=null;\n  if (connectionPoolSize > 0) {\n    ThreadSafeClientConnManager tcm=new ThreadSafeClientConnManager(registry,connectionTTL,connectionTTLUnit);\n    tcm.setMaxTotal(connectionPoolSize);\n    if (maxPooledPerRoute == 0)     maxPooledPerRoute=connectionPoolSize;\n    tcm.setDefaultMaxPerRoute(maxPooledPerRoute);\n    cm=tcm;\n  }\n else {\n    cm=new SingleClientConnManager(registry);\n  }\n  BasicHttpParams params=new BasicHttpParams();\n  params.setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);\n  if (proxyHost != null) {\n    params.setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHost);\n  }\n  if (socketTimeout > -1) {\n    HttpConnectionParams.setSoTimeout(params,(int)socketTimeoutUnits.toMillis(socketTimeout));\n  }\n  if (establishConnectionTimeout > -1) {\n    HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n  }\n  DefaultHttpClient client=new DefaultHttpClient(cm,params);\n  if (disableCookieCache) {\n    client.setCookieStore(new CookieStore(){\n      @Override public void addCookie(      Cookie cookie){\n      }\n      @Override public List<Cookie> getCookies(){\n        return Collections.emptyList();\n      }\n      @Override public boolean clearExpired(      Date date){\n        return false;\n      }\n      @Override public void clear(){\n      }\n    }\n);\n  }\n  return client;\n}\n catch (Exception e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 352,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4212,
        "startLineNumber" : 242,
        "startColumnNumber" : 30,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509HostnameVerifier verifier=null;\n  if (this.verifier != null)   verifier=new VerifierWrapper(this.verifier);\n else {\nswitch (policy) {\ncase ANY:      verifier=new AllowAllHostnameVerifier();\n    break;\ncase WILDCARD:  verifier=new BrowserCompatHostnameVerifier();\nbreak;\ncase STRICT:verifier=new StrictHostnameVerifier();\nbreak;\n}\n}\ntry {\nSSLSocketFactory sslsf=null;\nSSLContext theContext=sslContext;\nif (disableTrustManager) {\ntheContext=SSLContext.getInstance(\"SSL\");\ntheContext.init(null,new TrustManager[]{new PassthroughTrustManager()},new SecureRandom());\nverifier=new AllowAllHostnameVerifier();\nsslsf=new SniSSLSocketFactory(theContext,verifier);\n}\n else if (theContext != null) {\nsslsf=new SniSSLSocketFactory(theContext,verifier);\n}\n else if (clientKeyStore != null || truststore != null) {\nsslsf=new SniSSLSocketFactory(SSLSocketFactory.TLS,clientKeyStore,clientPrivateKeyPassword,truststore,null,verifier);\n}\n else {\nfinal SSLContext tlsContext=SSLContext.getInstance(SSLSocketFactory.TLS);\ntlsContext.init(null,null,null);\nsslsf=new SniSSLSocketFactory(tlsContext,verifier);\n}\nSchemeRegistry registry=new SchemeRegistry();\nregistry.register(new Scheme(\"http\",80,PlainSocketFactory.getSocketFactory()));\nScheme httpsScheme=new Scheme(\"https\",443,sslsf);\nregistry.register(httpsScheme);\nClientConnectionManager cm=null;\nif (connectionPoolSize > 0) {\nThreadSafeClientConnManager tcm=new ThreadSafeClientConnManager(registry,connectionTTL,connectionTTLUnit);\ntcm.setMaxTotal(connectionPoolSize);\nif (maxPooledPerRoute == 0) maxPooledPerRoute=connectionPoolSize;\ntcm.setDefaultMaxPerRoute(maxPooledPerRoute);\ncm=tcm;\n}\n else {\ncm=new SingleClientConnManager(registry);\n}\nBasicHttpParams params=new BasicHttpParams();\nparams.setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);\nif (proxyHost != null) {\nparams.setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHost);\n}\nif (socketTimeout > -1) {\nHttpConnectionParams.setSoTimeout(params,(int)socketTimeoutUnits.toMillis(socketTimeout));\n}\nif (establishConnectionTimeout > -1) {\nHttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n}\nDefaultHttpClient client=new DefaultHttpClient(cm,params);\nif (disableCookieCache) {\nclient.setCookieStore(new CookieStore(){\n@Override public void addCookie(Cookie cookie){\n}\n@Override public List<Cookie> getCookies(){\nreturn Collections.emptyList();\n}\n@Override public boolean clearExpired(Date date){\nreturn false;\n}\n@Override public void clear(){\n}\n}\n);\n}\nreturn client;\n}\n catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 404,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4238,
        "startLineNumber" : 242,
        "startColumnNumber" : 4,
        "endLineNumber" : 336,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public HttpClient build(){\n  X509HostnameVerifier verifier=null;\n  if (this.verifier != null)   verifier=new VerifierWrapper(this.verifier);\n else {\nswitch (policy) {\ncase ANY:      verifier=new AllowAllHostnameVerifier();\n    break;\ncase WILDCARD:  verifier=new BrowserCompatHostnameVerifier();\nbreak;\ncase STRICT:verifier=new StrictHostnameVerifier();\nbreak;\n}\n}\ntry {\nSSLSocketFactory sslsf=null;\nSSLContext theContext=sslContext;\nif (disableTrustManager) {\ntheContext=SSLContext.getInstance(\"SSL\");\ntheContext.init(null,new TrustManager[]{new PassthroughTrustManager()},new SecureRandom());\nverifier=new AllowAllHostnameVerifier();\nsslsf=new SniSSLSocketFactory(theContext,verifier);\n}\n else if (theContext != null) {\nsslsf=new SniSSLSocketFactory(theContext,verifier);\n}\n else if (clientKeyStore != null || truststore != null) {\nsslsf=new SniSSLSocketFactory(SSLSocketFactory.TLS,clientKeyStore,clientPrivateKeyPassword,truststore,null,verifier);\n}\n else {\nfinal SSLContext tlsContext=SSLContext.getInstance(SSLSocketFactory.TLS);\ntlsContext.init(null,null,null);\nsslsf=new SniSSLSocketFactory(tlsContext,verifier);\n}\nSchemeRegistry registry=new SchemeRegistry();\nregistry.register(new Scheme(\"http\",80,PlainSocketFactory.getSocketFactory()));\nScheme httpsScheme=new Scheme(\"https\",443,sslsf);\nregistry.register(httpsScheme);\nClientConnectionManager cm=null;\nif (connectionPoolSize > 0) {\nThreadSafeClientConnManager tcm=new ThreadSafeClientConnManager(registry,connectionTTL,connectionTTLUnit);\ntcm.setMaxTotal(connectionPoolSize);\nif (maxPooledPerRoute == 0) maxPooledPerRoute=connectionPoolSize;\ntcm.setDefaultMaxPerRoute(maxPooledPerRoute);\ncm=tcm;\n}\n else {\ncm=new SingleClientConnManager(registry);\n}\nBasicHttpParams params=new BasicHttpParams();\nparams.setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);\nif (proxyHost != null) {\nparams.setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHost);\n}\nif (socketTimeout > -1) {\nHttpConnectionParams.setSoTimeout(params,(int)socketTimeoutUnits.toMillis(socketTimeout));\n}\nif (establishConnectionTimeout > -1) {\nHttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n}\nDefaultHttpClient client=new DefaultHttpClient(cm,params);\nif (disableCookieCache) {\nclient.setCookieStore(new CookieStore(){\n@Override public void addCookie(Cookie cookie){\n}\n@Override public List<Cookie> getCookies(){\nreturn Collections.emptyList();\n}\n@Override public boolean clearExpired(Date date){\nreturn false;\n}\n@Override public void clear(){\n}\n}\n);\n}\nreturn client;\n}\n catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 409,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 304,
        "startColumnNumber" : 16,
        "endLineNumber" : 304,
        "endColumnNumber" : 142
      },
      "nodeContext" : "HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 304,
    "startColumnNumber" : 66,
    "endLineNumber" : 304,
    "endColumnNumber" : 140
  } ],
  "layoutRelationDataList" : [ ]
}