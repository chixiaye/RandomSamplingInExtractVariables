{
  "id" : 347,
  "expression" : "lookup(w_else) == 1",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/tools/AutoFormat.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lookup(w_else) == 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 510,
      "startColumnNumber" : 13,
      "endLineNumber" : 510,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 510,
        "startColumnNumber" : 10,
        "endLineNumber" : 517,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8664,
        "startLineNumber" : 498,
        "startColumnNumber" : 8,
        "endLineNumber" : 876,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (c) {\ndefault:  string[j++]=c;\nif (c != ',') {\n  l_char=c;\n}\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1174,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8884,
        "startLineNumber" : 496,
        "startColumnNumber" : 6,
        "endLineNumber" : 882,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  c=getchr();\nswitch (c) {\ndefault:    string[j++]=c;\n  if (c != ',') {\n    l_char=c;\n  }\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1180,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8907,
        "startLineNumber" : 495,
        "startColumnNumber" : 6,
        "endLineNumber" : 882,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (EOF == 0) {\n  c=getchr();\nswitch (c) {\ndefault:    string[j++]=c;\n  if (c != ',') {\n    l_char=c;\n  }\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 1184,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 11218,
        "startLineNumber" : 477,
        "startColumnNumber" : 8,
        "endLineNumber" : 946,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reader=new CharArrayReader(originalText.toCharArray());\n  for (int ib=0; ib < BLOCK_MAXLEN; ib++)   chars[ib]='\\0';\n  lineLength=readCount=0;\n  readCount=reader.read(chars);\n  strBlock=new String(chars);\n  lineLength=readCount;\n  lineNumber=1;\n  indexBlock=-1;\n  j=0;\n  while (EOF == 0) {\n    c=getchr();\nswitch (c) {\ndefault:      string[j++]=c;\n    if (c != ',') {\n      l_char=c;\n    }\n  break;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1373,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11279,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 948,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  reader=new CharArrayReader(originalText.toCharArray());\n  for (int ib=0; ib < BLOCK_MAXLEN; ib++)   chars[ib]='\\0';\n  lineLength=readCount=0;\n  readCount=reader.read(chars);\n  strBlock=new String(chars);\n  lineLength=readCount;\n  lineNumber=1;\n  indexBlock=-1;\n  j=0;\n  while (EOF == 0) {\n    c=getchr();\nswitch (c) {\ndefault:      string[j++]=c;\n    if (c != ',') {\n      l_char=c;\n    }\n  break;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1385,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12419,
        "startLineNumber" : 437,
        "startColumnNumber" : 20,
        "endLineNumber" : 949,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuffer onechar;\n  String originalText=editor.getText() + \"\\n\";\n  strOut=new StringBuffer();\n  indentValue=Preferences.getInteger(\"editor.tabs.size\");\n  indentChar=new String(\" \");\n  lineNumber=0;\n  c_level=if_lev=level=e_flg=paren=0;\n  a_flg=q_flg=j=tabs=0;\n  if_flg=peek=-1;\n  peekc='`';\n  s_flg=1;\n  jdoc=0;\n  s_level=new int[10];\n  sp_flg=new int[20][10];\n  s_ind=new int[20][10];\n  s_if_lev=new int[10];\n  s_if_flg=new int[10];\n  ind=new int[10];\n  p_flg=new int[10];\n  s_tabs=new int[20][10];\n  w_else=new String(\"else\");\n  w_if_=new String(\"if\");\n  w_for=new String(\"for\");\n  w_ds=new String(\"default\");\n  w_case=new String(\"case\");\n  w_cpp_comment=new String(\"//\");\n  w_jdoc=new String(\"/**\");\n  line_feed=new String(\"\\n\");\n  EOF=0;\n  chars=new char[BLOCK_MAXLEN];\n  string=new char[BLOCK_MAXLEN];\n  try {\n    reader=new CharArrayReader(originalText.toCharArray());\n    for (int ib=0; ib < BLOCK_MAXLEN; ib++)     chars[ib]='\\0';\n    lineLength=readCount=0;\n    readCount=reader.read(chars);\n    strBlock=new String(chars);\n    lineLength=readCount;\n    lineNumber=1;\n    indexBlock=-1;\n    j=0;\n    while (EOF == 0) {\n      c=getchr();\nswitch (c) {\ndefault:        string[j++]=c;\n      if (c != ',') {\n        l_char=c;\n      }\n    break;\ncase ' ':case '\\t':  if (lookup(w_else) == 1) {\n    gotelse();\n    if (s_flg == 0 || j > 0)     string[j++]=c;\n    indent_puts();\n    s_flg=0;\n    break;\n  }\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1612,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12437,
        "startLineNumber" : 437,
        "startColumnNumber" : 2,
        "endLineNumber" : 949,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void run(){\n  StringBuffer onechar;\n  String originalText=editor.getText() + \"\\n\";\n  strOut=new StringBuffer();\n  indentValue=Preferences.getInteger(\"editor.tabs.size\");\n  indentChar=new String(\" \");\n  lineNumber=0;\n  c_level=if_lev=level=e_flg=paren=0;\n  a_flg=q_flg=j=tabs=0;\n  if_flg=peek=-1;\n  peekc='`';\n  s_flg=1;\n  jdoc=0;\n  s_level=new int[10];\n  sp_flg=new int[20][10];\n  s_ind=new int[20][10];\n  s_if_lev=new int[10];\n  s_if_flg=new int[10];\n  ind=new int[10];\n  p_flg=new int[10];\n  s_tabs=new int[20][10];\n  w_else=new String(\"else\");\n  w_if_=new String(\"if\");\n  w_for=new String(\"for\");\n  w_ds=new String(\"default\");\n  w_case=new String(\"case\");\n  w_cpp_comment=new String(\"//\");\n  w_jdoc=new String(\"/**\");\n  line_feed=new String(\"\\n\");\n  EOF=0;\n  chars=new char[BLOCK_MAXLEN];\n  string=new char[BLOCK_MAXLEN];\n  try {\n    reader=new CharArrayReader(originalText.toCharArray());\n    for (int ib=0; ib < BLOCK_MAXLEN; ib++)     chars[ib]='\\0';\n    lineLength=readCount=0;\n    readCount=reader.read(chars);\n    strBlock=new String(chars);\n    lineLength=readCount;\n    lineNumber=1;\n    indexBlock=-1;\n    j=0;\n    while (EOF == 0) {\n      c=getchr();\nswitch (c) {\ndefault:        string[j++]=c;\n      if (c != ',') {\n        l_char=c;\n      }\n    break;\ncase ' ':case '\\t':  if (lookup(w_else) == 1) {\n    gotelse();\n    if (s_flg == 0 || j > 0)     string[j++]=c;\n    indent_puts();\n    s_flg=0;\n    break;\n  }\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1616,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 510,
        "startColumnNumber" : 10,
        "endLineNumber" : 517,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "boolean"
  }, {
    "nodeContext" : "lookup(w_else) == 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 558,
      "startColumnNumber" : 13,
      "endLineNumber" : 558,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 558,
        "startColumnNumber" : 10,
        "endLineNumber" : 558,
        "endColumnNumber" : 43
      },
      "nodeContext" : "if (lookup(w_else) == 1) gotelse();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8664,
        "startLineNumber" : 498,
        "startColumnNumber" : 8,
        "endLineNumber" : 876,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (c) {\ndefault:  string[j++]=c;\nif (c != ',') {\n  l_char=c;\n}\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1174,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 8884,
        "startLineNumber" : 496,
        "startColumnNumber" : 6,
        "endLineNumber" : 882,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  c=getchr();\nswitch (c) {\ndefault:    string[j++]=c;\n  if (c != ',') {\n    l_char=c;\n  }\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1180,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8907,
        "startLineNumber" : 495,
        "startColumnNumber" : 6,
        "endLineNumber" : 882,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (EOF == 0) {\n  c=getchr();\nswitch (c) {\ndefault:    string[j++]=c;\n  if (c != ',') {\n    l_char=c;\n  }\nbreak;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\ngotelse();\nif (s_flg == 0 || j > 0) string[j++]=c;\nindent_puts();\ns_flg=0;\nbreak;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 1184,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 11218,
        "startLineNumber" : 477,
        "startColumnNumber" : 8,
        "endLineNumber" : 946,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reader=new CharArrayReader(originalText.toCharArray());\n  for (int ib=0; ib < BLOCK_MAXLEN; ib++)   chars[ib]='\\0';\n  lineLength=readCount=0;\n  readCount=reader.read(chars);\n  strBlock=new String(chars);\n  lineLength=readCount;\n  lineNumber=1;\n  indexBlock=-1;\n  j=0;\n  while (EOF == 0) {\n    c=getchr();\nswitch (c) {\ndefault:      string[j++]=c;\n    if (c != ',') {\n      l_char=c;\n    }\n  break;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1373,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11279,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 948,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  reader=new CharArrayReader(originalText.toCharArray());\n  for (int ib=0; ib < BLOCK_MAXLEN; ib++)   chars[ib]='\\0';\n  lineLength=readCount=0;\n  readCount=reader.read(chars);\n  strBlock=new String(chars);\n  lineLength=readCount;\n  lineNumber=1;\n  indexBlock=-1;\n  j=0;\n  while (EOF == 0) {\n    c=getchr();\nswitch (c) {\ndefault:      string[j++]=c;\n    if (c != ',') {\n      l_char=c;\n    }\n  break;\ncase ' ':case '\\t':if (lookup(w_else) == 1) {\n  gotelse();\n  if (s_flg == 0 || j > 0)   string[j++]=c;\n  indent_puts();\n  s_flg=0;\n  break;\n}\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1385,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12419,
        "startLineNumber" : 437,
        "startColumnNumber" : 20,
        "endLineNumber" : 949,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuffer onechar;\n  String originalText=editor.getText() + \"\\n\";\n  strOut=new StringBuffer();\n  indentValue=Preferences.getInteger(\"editor.tabs.size\");\n  indentChar=new String(\" \");\n  lineNumber=0;\n  c_level=if_lev=level=e_flg=paren=0;\n  a_flg=q_flg=j=tabs=0;\n  if_flg=peek=-1;\n  peekc='`';\n  s_flg=1;\n  jdoc=0;\n  s_level=new int[10];\n  sp_flg=new int[20][10];\n  s_ind=new int[20][10];\n  s_if_lev=new int[10];\n  s_if_flg=new int[10];\n  ind=new int[10];\n  p_flg=new int[10];\n  s_tabs=new int[20][10];\n  w_else=new String(\"else\");\n  w_if_=new String(\"if\");\n  w_for=new String(\"for\");\n  w_ds=new String(\"default\");\n  w_case=new String(\"case\");\n  w_cpp_comment=new String(\"//\");\n  w_jdoc=new String(\"/**\");\n  line_feed=new String(\"\\n\");\n  EOF=0;\n  chars=new char[BLOCK_MAXLEN];\n  string=new char[BLOCK_MAXLEN];\n  try {\n    reader=new CharArrayReader(originalText.toCharArray());\n    for (int ib=0; ib < BLOCK_MAXLEN; ib++)     chars[ib]='\\0';\n    lineLength=readCount=0;\n    readCount=reader.read(chars);\n    strBlock=new String(chars);\n    lineLength=readCount;\n    lineNumber=1;\n    indexBlock=-1;\n    j=0;\n    while (EOF == 0) {\n      c=getchr();\nswitch (c) {\ndefault:        string[j++]=c;\n      if (c != ',') {\n        l_char=c;\n      }\n    break;\ncase ' ':case '\\t':  if (lookup(w_else) == 1) {\n    gotelse();\n    if (s_flg == 0 || j > 0)     string[j++]=c;\n    indent_puts();\n    s_flg=0;\n    break;\n  }\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1612,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12437,
        "startLineNumber" : 437,
        "startColumnNumber" : 2,
        "endLineNumber" : 949,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void run(){\n  StringBuffer onechar;\n  String originalText=editor.getText() + \"\\n\";\n  strOut=new StringBuffer();\n  indentValue=Preferences.getInteger(\"editor.tabs.size\");\n  indentChar=new String(\" \");\n  lineNumber=0;\n  c_level=if_lev=level=e_flg=paren=0;\n  a_flg=q_flg=j=tabs=0;\n  if_flg=peek=-1;\n  peekc='`';\n  s_flg=1;\n  jdoc=0;\n  s_level=new int[10];\n  sp_flg=new int[20][10];\n  s_ind=new int[20][10];\n  s_if_lev=new int[10];\n  s_if_flg=new int[10];\n  ind=new int[10];\n  p_flg=new int[10];\n  s_tabs=new int[20][10];\n  w_else=new String(\"else\");\n  w_if_=new String(\"if\");\n  w_for=new String(\"for\");\n  w_ds=new String(\"default\");\n  w_case=new String(\"case\");\n  w_cpp_comment=new String(\"//\");\n  w_jdoc=new String(\"/**\");\n  line_feed=new String(\"\\n\");\n  EOF=0;\n  chars=new char[BLOCK_MAXLEN];\n  string=new char[BLOCK_MAXLEN];\n  try {\n    reader=new CharArrayReader(originalText.toCharArray());\n    for (int ib=0; ib < BLOCK_MAXLEN; ib++)     chars[ib]='\\0';\n    lineLength=readCount=0;\n    readCount=reader.read(chars);\n    strBlock=new String(chars);\n    lineLength=readCount;\n    lineNumber=1;\n    indexBlock=-1;\n    j=0;\n    while (EOF == 0) {\n      c=getchr();\nswitch (c) {\ndefault:        string[j++]=c;\n      if (c != ',') {\n        l_char=c;\n      }\n    break;\ncase ' ':case '\\t':  if (lookup(w_else) == 1) {\n    gotelse();\n    if (s_flg == 0 || j > 0)     string[j++]=c;\n    indent_puts();\n    s_flg=0;\n    break;\n  }\nif (s_flg == 0 || j > 0) string[j++]=c;\nbreak;\ncase '\\r':case '\\n':lineNumber++;\nif (EOF == 1) {\nbreak;\n}\ne_flg=lookup(w_else);\nif (e_flg == 1) gotelse();\nif (lookup_com(w_cpp_comment) == 1) {\nif (string[j] == '\\n') {\nstring[j]='\\0';\nj--;\n}\n}\nindent_puts();\nfprintf(line_feed);\ns_flg=1;\nif (e_flg == 1) {\np_flg[level]++;\ntabs++;\n}\n else if (p_char == l_char) {\na_flg=1;\n}\nbreak;\ncase '{':if (lookup(w_else) == 1) gotelse();\nif (s_if_lev.length == c_level) {\ns_if_lev=PApplet.expand(s_if_lev);\ns_if_flg=PApplet.expand(s_if_flg);\n}\ns_if_lev[c_level]=if_lev;\ns_if_flg[c_level]=if_flg;\nif_lev=if_flg=0;\nc_level++;\nif (s_flg == 1 && p_flg[level] != 0) {\np_flg[level]--;\ntabs--;\n}\nstring[j++]=c;\nindent_puts();\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ntabs++;\ns_flg=1;\nif (p_flg[level] > 0) {\nind[level]=1;\nlevel++;\ns_level[level]=c_level;\n}\nbreak;\ncase '}':c_level--;\nif (c_level < 0) {\nEOF=1;\nstring[j++]=c;\nindent_puts();\nbreak;\n}\nif ((if_lev=s_if_lev[c_level] - 1) < 0) if_lev=0;\nif_flg=s_if_flg[c_level];\nindent_puts();\ntabs--;\np_tabs();\npeekc=getchr();\nif (peekc == ';') {\nonechar=new StringBuffer();\nonechar.append(c);\nonechar.append(';');\nfprintf(onechar.toString());\npeek=-1;\npeekc='`';\n}\n else {\nonechar=new StringBuffer();\nonechar.append(c);\nfprintf(onechar.toString());\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (c_level < s_level[level]) if (level > 0) level--;\nif (ind[level] != 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\nind[level]=0;\n}\nbreak;\ncase '\"':case '\\'':string[j++]=c;\ncc=getchr();\nwhile (cc != c && EOF == 0) {\nstring[j++]=cc;\nif (cc == '\\\\') {\ncc=string[j++]=getchr();\n}\nif (cc == '\\n') {\nlineNumber++;\nindent_puts();\ns_flg=1;\n}\ncc=getchr();\n}\nstring[j++]=cc;\nif (getnl() == 1) {\nl_char=cc;\npeek=1;\npeekc='\\n';\n}\nbreak;\ncase ';':string[j++]=c;\nindent_puts();\nif (p_flg[level] > 0 && ind[level] == 0) {\ntabs-=p_flg[level];\np_flg[level]=0;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nif (if_lev > 0) if (if_flg == 1) {\nif_lev--;\nif_flg=0;\n}\n else if_lev=0;\nbreak;\ncase '\\\\':string[j++]=c;\nstring[j++]=getchr();\nbreak;\ncase '?':q_flg=1;\nstring[j++]=c;\nbreak;\ncase ':':string[j++]=c;\npeekc=getchr();\nif (peekc == ':') {\nindent_puts();\nfprintf(\":\");\npeek=-1;\npeekc='`';\nbreak;\n}\n else {\npeek=1;\n}\nif (q_flg == 1) {\nq_flg=0;\nbreak;\n}\nif (lookup(w_ds) == 0 && lookup(w_case) == 0) {\ns_flg=0;\nindent_puts();\n}\n else {\ntabs--;\nindent_puts();\ntabs++;\n}\npeekc=getchr();\nif (peekc == ';') {\nfprintf(\";\");\npeek=-1;\npeekc='`';\n}\n else {\npeek=1;\n}\ngetnl();\nindent_puts();\nfprintf(\"\\n\");\ns_flg=1;\nbreak;\ncase '/':string[j++]=c;\npeekc=getchr();\nif (peekc == '/') {\nstring[j++]=peekc;\npeekc='`';\npeek=-1;\ncpp_comment();\nfprintf(\"\\n\");\nbreak;\n}\n else {\npeek=1;\n}\nif (peekc != '*') {\nbreak;\n}\n else {\nif (j > 0) string[j--]='\\0';\nif (j > 0) indent_puts();\nstring[j++]='/';\nstring[j++]='*';\npeek=-1;\npeekc='`';\ncomment();\nbreak;\n}\ncase '#':string[j++]=c;\ncc=getchr();\nwhile (cc != '\\n' && EOF == 0) {\nstring[j++]=cc;\ncc=getchr();\n}\nstring[j++]=cc;\ns_flg=0;\nindent_puts();\ns_flg=1;\nbreak;\ncase ')':paren--;\nif (paren < 0) {\nEOF=1;\n}\nstring[j++]=c;\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\nif (paren != 0) {\na_flg=1;\n}\n else if (tabs > 0) {\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\n}\nbreak;\ncase '(':string[j++]=c;\nparen++;\nif ((lookup(w_for) == 1)) {\nc=get_string();\nwhile (c != ';' && EOF == 0) c=get_string();\nct=0;\nint for_done=0;\nwhile (for_done == 0 && EOF == 0) {\nc=get_string();\nwhile (c != ')' && EOF == 0) {\nif (c == '(') ct++;\nc=get_string();\n}\nif (ct != 0) {\nct--;\n}\n else for_done=1;\n}\nparen--;\nif (paren < 0) {\nEOF=1;\n}\nindent_puts();\nif (getnl() == 1) {\npeekc='\\n';\npeek=1;\np_flg[level]++;\ntabs++;\nind[level]=0;\n}\nbreak;\n}\nif (lookup(w_if_) == 1) {\nindent_puts();\ns_tabs[c_level][if_lev]=tabs;\nsp_flg[c_level][if_lev]=p_flg[level];\ns_ind[c_level][if_lev]=ind[level];\nif_lev++;\nif_flg=1;\n}\n}\n}\nint selectionEnd=editor.getSelectionStop();\nif (strOut.length() < selectionEnd - 1) {\nselectionEnd=strOut.length() - 1;\n}\nreader.close();\nString formattedText=strOut.toString();\nif (formattedText.equals(originalText)) {\neditor.statusNotice(_(\"No changes necessary for Auto Format.\"));\n}\n else if (paren != 0) {\nif (paren < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right parentheses.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left parentheses.\"));\n}\n}\n else if (c_level != 0) {\nif (c_level < 0) {\neditor.statusError(_(\"Auto Format Canceled: Too many right curly braces.\"));\n}\n else {\neditor.statusError(_(\"Auto Format Canceled: Too many left curly braces.\"));\n}\n}\n else {\neditor.setText(formattedText);\neditor.setSelection(selectionEnd,selectionEnd);\neditor.getSketch().setModified(true);\neditor.statusNotice(_(\"Auto Format finished.\"));\n}\n}\n catch (Exception e) {\neditor.statusError(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1616,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 558,
        "startColumnNumber" : 10,
        "endLineNumber" : 558,
        "endColumnNumber" : 43
      },
      "nodeContext" : "if (lookup(w_else) == 1) gotelse();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 510,
    "startColumnNumber" : 13,
    "endLineNumber" : 510,
    "endColumnNumber" : 32
  }, {
    "charLength" : 19,
    "startLineNumber" : 558,
    "startColumnNumber" : 13,
    "endLineNumber" : 558,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}