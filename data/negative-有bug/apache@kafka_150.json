{
  "id" : 150,
  "expression" : "\"key\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/Plugins.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"key\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 281,
      "startColumnNumber" : 35,
      "endLineNumber" : 281,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 281,
        "startColumnNumber" : 18,
        "endLineNumber" : 281,
        "endColumnNumber" : 50
      },
      "nodeContext" : "isKeyConverter ? \"key\" : \"value\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 281,
        "endColumnNumber" : 101
      },
      "nodeContext" : "log.debug(\"Configuring the {} converter with configuration keys:{}{}\",isKeyConverter ? \"key\" : \"value\",System.lineSeparator(),converterConfig.keySet())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 280,
        "startColumnNumber" : 8,
        "endLineNumber" : 281,
        "endColumnNumber" : 102
      },
      "nodeContext" : "log.debug(\"Configuring the {} converter with configuration keys:{}{}\",isKeyConverter ? \"key\" : \"value\",System.lineSeparator(),converterConfig.keySet());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2738,
        "startLineNumber" : 242,
        "startColumnNumber" : 118,
        "endLineNumber" : 292,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!config.originals().containsKey(classPropertyName)) {\n    return null;\n  }\n  Class<? extends Converter> klass=null;\nswitch (classLoaderUsage) {\ncase CURRENT_CLASSLOADER:    klass=pluginClassFromConfig(config,classPropertyName,Converter.class,delegatingLoader.converters());\n  break;\ncase PLUGINS:String converterClassOrAlias=config.getClass(classPropertyName).getName();\ntry {\nklass=pluginClass(delegatingLoader,converterClassOrAlias,Converter.class);\n}\n catch (ClassNotFoundException e) {\nthrow new ConnectException(\"Failed to find any class that implements Converter and which name matches \" + converterClassOrAlias + \", available converters are: \"+ pluginNames(delegatingLoader.converters()));\n}\nbreak;\n}\nif (klass == null) {\nthrow new ConnectException(\"Unable to initialize the Converter specified in '\" + classPropertyName + \"'\");\n}\nfinal boolean isKeyConverter=WorkerConfig.KEY_CONVERTER_CLASS_CONFIG.equals(classPropertyName);\nString configPrefix=classPropertyName + \".\";\nMap<String,Object> converterConfig=config.originalsWithPrefix(configPrefix);\nlog.debug(\"Configuring the {} converter with configuration keys:{}{}\",isKeyConverter ? \"key\" : \"value\",System.lineSeparator(),converterConfig.keySet());\nConverter plugin;\nClassLoader savedLoader=compareAndSwapLoaders(klass.getClassLoader());\ntry {\nplugin=newPlugin(klass);\nplugin.configure(converterConfig,isKeyConverter);\n}\n  finally {\ncompareAndSwapLoaders(savedLoader);\n}\nreturn plugin;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3550,
        "startLineNumber" : 233,
        "startColumnNumber" : 4,
        "endLineNumber" : 292,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If the given configuration defines a  {@link Converter} using the named configuration property, return a new configured instance.\n * @param config             the configuration containing the {@link Converter}'s configuration; may not be null\n * @param classPropertyName  the name of the property that contains the name of the {@link Converter} class; may not be null\n * @param classLoaderUsage   which classloader should be used\n * @return the instantiated and configured {@link Converter}; null if the configuration did not define the specified property\n * @throws ConnectException if the {@link Converter} implementation class could not be found\n */\npublic Converter newConverter(AbstractConfig config,String classPropertyName,ClassLoaderUsage classLoaderUsage){\n  if (!config.originals().containsKey(classPropertyName)) {\n    return null;\n  }\n  Class<? extends Converter> klass=null;\nswitch (classLoaderUsage) {\ncase CURRENT_CLASSLOADER:    klass=pluginClassFromConfig(config,classPropertyName,Converter.class,delegatingLoader.converters());\n  break;\ncase PLUGINS:String converterClassOrAlias=config.getClass(classPropertyName).getName();\ntry {\nklass=pluginClass(delegatingLoader,converterClassOrAlias,Converter.class);\n}\n catch (ClassNotFoundException e) {\nthrow new ConnectException(\"Failed to find any class that implements Converter and which name matches \" + converterClassOrAlias + \", available converters are: \"+ pluginNames(delegatingLoader.converters()));\n}\nbreak;\n}\nif (klass == null) {\nthrow new ConnectException(\"Unable to initialize the Converter specified in '\" + classPropertyName + \"'\");\n}\nfinal boolean isKeyConverter=WorkerConfig.KEY_CONVERTER_CLASS_CONFIG.equals(classPropertyName);\nString configPrefix=classPropertyName + \".\";\nMap<String,Object> converterConfig=config.originalsWithPrefix(configPrefix);\nlog.debug(\"Configuring the {} converter with configuration keys:{}{}\",isKeyConverter ? \"key\" : \"value\",System.lineSeparator(),converterConfig.keySet());\nConverter plugin;\nClassLoader savedLoader=compareAndSwapLoaders(klass.getClassLoader());\ntry {\nplugin=newPlugin(klass);\nplugin.configure(converterConfig,isKeyConverter);\n}\n  finally {\ncompareAndSwapLoaders(savedLoader);\n}\nreturn plugin;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 281,
        "startColumnNumber" : 18,
        "endLineNumber" : 281,
        "endColumnNumber" : 50
      },
      "nodeContext" : "isKeyConverter ? \"key\" : \"value\"",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 281,
    "startColumnNumber" : 35,
    "endLineNumber" : 281,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}