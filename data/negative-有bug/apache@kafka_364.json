{
  "id" : 364,
  "expression" : "new ConnectorState(\"RUNNING\",workerId,null)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RestExtensionIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ConnectorState(\"RUNNING\",workerId,null)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 123,
      "startLineNumber" : 112,
      "startColumnNumber" : 16,
      "endLineNumber" : 116,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 110,
        "startColumnNumber" : 45,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 26,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 110,
        "startColumnNumber" : 28,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 14
      },
      "nodeContext" : "ConnectorHealth expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2029,
        "startLineNumber" : 94,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorHandle.taskHandle(connectorHandle.name() + \"-0\");\n  StartAndStopLatch connectorStartLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(connectorHandle.name(),connectorProps);\n  connect.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connectorHandle.name(),1,\"Connector tasks did not start in time.\");\n  connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,TimeUnit.MILLISECONDS);\n  String workerId=String.format(\"%s:%d\",worker.url().getHost(),worker.url().getPort());\n  ConnectorHealth expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK);\n  connectorProps.put(NAME_CONFIG,connectorHandle.name());\n  waitForCondition(() -> verifyConnectorHealthAndConfig(connectorHandle.name(),expectedHealth,connectorProps),CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,\"Connector health and/or config was never accessible by the REST extension\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2127,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Map<String,String> connectorProps=new HashMap<>();\n  connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n  connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n  connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n  connectorHandle.taskHandle(connectorHandle.name() + \"-0\");\n  StartAndStopLatch connectorStartLatch=connectorHandle.expectedStarts(1);\n  connect.configureConnector(connectorHandle.name(),connectorProps);\n  connect.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connectorHandle.name(),1,\"Connector tasks did not start in time.\");\n  connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,TimeUnit.MILLISECONDS);\n  String workerId=String.format(\"%s:%d\",worker.url().getHost(),worker.url().getPort());\n  ConnectorHealth expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK);\n  connectorProps.put(NAME_CONFIG,connectorHandle.name());\n  waitForCondition(() -> verifyConnectorHealthAndConfig(connectorHandle.name(),expectedHealth,connectorProps),CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,\"Connector health and/or config was never accessible by the REST extension\");\n}\n  finally {\n  RuntimeHandles.get().deleteConnector(connectorHandle.name());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 167,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3278,
        "startLineNumber" : 64,
        "startColumnNumber" : 67,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> workerProps=new HashMap<>();\n  workerProps.put(REST_EXTENSION_CLASSES_CONFIG,IntegrationTestRestExtension.class.getName());\n  connect=new EmbeddedConnectCluster.Builder().name(\"connect-cluster\").numWorkers(NUM_WORKERS).numBrokers(1).workerProps(workerProps).build();\n  connect.start();\n  connect.assertions().assertAtLeastNumWorkersAreUp(NUM_WORKERS,\"Initial group of workers did not start in time.\");\n  WorkerHandle worker=connect.workers().stream().findFirst().orElseThrow(() -> new AssertionError(\"At least one worker handle should be available\"));\n  waitForCondition(this::extensionIsRegistered,REST_EXTENSION_REGISTRATION_TIMEOUT_MS,\"REST extension was never registered\");\n  ConnectorHandle connectorHandle=RuntimeHandles.get().connectorHandle(\"test-conn\");\n  try {\n    Map<String,String> connectorProps=new HashMap<>();\n    connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n    connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n    connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n    connectorHandle.taskHandle(connectorHandle.name() + \"-0\");\n    StartAndStopLatch connectorStartLatch=connectorHandle.expectedStarts(1);\n    connect.configureConnector(connectorHandle.name(),connectorProps);\n    connect.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connectorHandle.name(),1,\"Connector tasks did not start in time.\");\n    connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,TimeUnit.MILLISECONDS);\n    String workerId=String.format(\"%s:%d\",worker.url().getHost(),worker.url().getPort());\n    ConnectorHealth expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK);\n    connectorProps.put(NAME_CONFIG,connectorHandle.name());\n    waitForCondition(() -> verifyConnectorHealthAndConfig(connectorHandle.name(),expectedHealth,connectorProps),CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,\"Connector health and/or config was never accessible by the REST extension\");\n  }\n  finally {\n    RuntimeHandles.get().deleteConnector(connectorHandle.name());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3351,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRestExtensionApi() throws InterruptedException {\n  Map<String,String> workerProps=new HashMap<>();\n  workerProps.put(REST_EXTENSION_CLASSES_CONFIG,IntegrationTestRestExtension.class.getName());\n  connect=new EmbeddedConnectCluster.Builder().name(\"connect-cluster\").numWorkers(NUM_WORKERS).numBrokers(1).workerProps(workerProps).build();\n  connect.start();\n  connect.assertions().assertAtLeastNumWorkersAreUp(NUM_WORKERS,\"Initial group of workers did not start in time.\");\n  WorkerHandle worker=connect.workers().stream().findFirst().orElseThrow(() -> new AssertionError(\"At least one worker handle should be available\"));\n  waitForCondition(this::extensionIsRegistered,REST_EXTENSION_REGISTRATION_TIMEOUT_MS,\"REST extension was never registered\");\n  ConnectorHandle connectorHandle=RuntimeHandles.get().connectorHandle(\"test-conn\");\n  try {\n    Map<String,String> connectorProps=new HashMap<>();\n    connectorProps.put(CONNECTOR_CLASS_CONFIG,MonitorableSinkConnector.class.getSimpleName());\n    connectorProps.put(TASKS_MAX_CONFIG,String.valueOf(1));\n    connectorProps.put(TOPICS_CONFIG,\"test-topic\");\n    connectorHandle.taskHandle(connectorHandle.name() + \"-0\");\n    StartAndStopLatch connectorStartLatch=connectorHandle.expectedStarts(1);\n    connect.configureConnector(connectorHandle.name(),connectorProps);\n    connect.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connectorHandle.name(),1,\"Connector tasks did not start in time.\");\n    connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,TimeUnit.MILLISECONDS);\n    String workerId=String.format(\"%s:%d\",worker.url().getHost(),worker.url().getPort());\n    ConnectorHealth expectedHealth=new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK);\n    connectorProps.put(NAME_CONFIG,connectorHandle.name());\n    waitForCondition(() -> verifyConnectorHealthAndConfig(connectorHandle.name(),expectedHealth,connectorProps),CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,\"Connector health and/or config was never accessible by the REST extension\");\n  }\n  finally {\n    RuntimeHandles.get().deleteConnector(connectorHandle.name());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 110,
        "startColumnNumber" : 45,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "new ConnectorHealth(connectorHandle.name(),new ConnectorState(\"RUNNING\",workerId,null),Collections.singletonMap(0,new TaskState(0,\"RUNNING\",workerId,null)),ConnectorType.SINK)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 26,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "org.apache.kafka.connect.health.ConnectorState"
  } ],
  "positionList" : [ {
    "charLength" : 123,
    "startLineNumber" : 112,
    "startColumnNumber" : 16,
    "endLineNumber" : 116,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}