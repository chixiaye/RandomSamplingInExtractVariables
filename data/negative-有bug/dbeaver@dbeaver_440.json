{
  "id" : 440,
  "expression" : "Pattern.CASE_INSENSITIVE",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.editors.base/src/org/jkiss/dbeaver/ui/controls/StyledTextFindReplaceTarget.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Pattern.CASE_INSENSITIVE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 140,
      "startColumnNumber" : 78,
      "endLineNumber" : 140,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 140,
        "startColumnNumber" : 58,
        "endLineNumber" : 140,
        "endColumnNumber" : 102
      },
      "nodeContext" : "caseSensitive ? 0 : Pattern.CASE_INSENSITIVE",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 140,
        "startColumnNumber" : 30,
        "endLineNumber" : 140,
        "endColumnNumber" : 103
      },
      "nodeContext" : "Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 103
      },
      "nodeContext" : "findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 139,
        "startColumnNumber" : 16,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 139,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n}\n catch (PatternSyntaxException e) {\n  log.warn(\"Bad regex pattern: \" + findString);\n  return -1;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 138,
        "startColumnNumber" : 25,
        "endLineNumber" : 145,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n catch (  PatternSyntaxException e) {\n    log.warn(\"Bad regex pattern: \" + findString);\n    return -1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (regExSearch) {\n  try {\n    findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n catch (  PatternSyntaxException e) {\n    log.warn(\"Bad regex pattern: \" + findString);\n    return -1;\n  }\n}\n else {\n  findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  searchPattern=null;\n  Pattern findPattern;\n  if (regExSearch) {\n    try {\n      findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n    }\n catch (    PatternSyntaxException e) {\n      log.warn(\"Bad regex pattern: \" + findString);\n      return -1;\n    }\n  }\n else {\n    findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n  if (offset == -1) {\n    offset=0;\n  }\n  int textLength=text.getCharCount();\n  if (textLength <= 0 || offset >= textLength) {\n    return -1;\n  }\n  String searchIn=text.getText();\n  Matcher matcher=findPattern.matcher(searchIn);\n  if (matcher.find(searchForward ? offset : 0)) {\n    text.setSelection(matcher.start(),matcher.end());\n    return matcher.start();\n  }\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1151,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int findAndSelect(int offset,String findString,boolean searchForward,boolean caseSensitive,boolean wholeWord,boolean regExSearch){\n  searchPattern=null;\n  Pattern findPattern;\n  if (regExSearch) {\n    try {\n      findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n    }\n catch (    PatternSyntaxException e) {\n      log.warn(\"Bad regex pattern: \" + findString);\n      return -1;\n    }\n  }\n else {\n    findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n  if (offset == -1) {\n    offset=0;\n  }\n  int textLength=text.getCharCount();\n  if (textLength <= 0 || offset >= textLength) {\n    return -1;\n  }\n  String searchIn=text.getText();\n  Matcher matcher=findPattern.matcher(searchIn);\n  if (matcher.find(searchForward ? offset : 0)) {\n    text.setSelection(matcher.start(),matcher.end());\n    return matcher.start();\n  }\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 104
      },
      "nodeContext" : "findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "Pattern.CASE_INSENSITIVE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 146,
      "startColumnNumber" : 89,
      "endLineNumber" : 146,
      "endColumnNumber" : 113
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 146,
        "startColumnNumber" : 69,
        "endLineNumber" : 146,
        "endColumnNumber" : 113
      },
      "nodeContext" : "caseSensitive ? 0 : Pattern.CASE_INSENSITIVE",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 146,
        "startColumnNumber" : 26,
        "endLineNumber" : 146,
        "endColumnNumber" : 114
      },
      "nodeContext" : "Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 114
      },
      "nodeContext" : "findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 115
      },
      "nodeContext" : "findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 145,
        "startColumnNumber" : 15,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (regExSearch) {\n  try {\n    findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n catch (  PatternSyntaxException e) {\n    log.warn(\"Bad regex pattern: \" + findString);\n    return -1;\n  }\n}\n else {\n  findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 991,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  searchPattern=null;\n  Pattern findPattern;\n  if (regExSearch) {\n    try {\n      findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n    }\n catch (    PatternSyntaxException e) {\n      log.warn(\"Bad regex pattern: \" + findString);\n      return -1;\n    }\n  }\n else {\n    findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n  if (offset == -1) {\n    offset=0;\n  }\n  int textLength=text.getCharCount();\n  if (textLength <= 0 || offset >= textLength) {\n    return -1;\n  }\n  String searchIn=text.getText();\n  Matcher matcher=findPattern.matcher(searchIn);\n  if (matcher.find(searchForward ? offset : 0)) {\n    text.setSelection(matcher.start(),matcher.end());\n    return matcher.start();\n  }\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1151,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int findAndSelect(int offset,String findString,boolean searchForward,boolean caseSensitive,boolean wholeWord,boolean regExSearch){\n  searchPattern=null;\n  Pattern findPattern;\n  if (regExSearch) {\n    try {\n      findPattern=Pattern.compile(findString,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n    }\n catch (    PatternSyntaxException e) {\n      log.warn(\"Bad regex pattern: \" + findString);\n      return -1;\n    }\n  }\n else {\n    findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n  }\n  if (offset == -1) {\n    offset=0;\n  }\n  int textLength=text.getCharCount();\n  if (textLength <= 0 || offset >= textLength) {\n    return -1;\n  }\n  String searchIn=text.getText();\n  Matcher matcher=findPattern.matcher(searchIn);\n  if (matcher.find(searchForward ? offset : 0)) {\n    text.setSelection(matcher.start(),matcher.end());\n    return matcher.start();\n  }\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 115
      },
      "nodeContext" : "findPattern=Pattern.compile(Pattern.quote(findString),caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 140,
    "startColumnNumber" : 78,
    "endLineNumber" : 140,
    "endColumnNumber" : 102
  }, {
    "charLength" : 24,
    "startLineNumber" : 146,
    "startColumnNumber" : 89,
    "endLineNumber" : 146,
    "endColumnNumber" : 113
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}