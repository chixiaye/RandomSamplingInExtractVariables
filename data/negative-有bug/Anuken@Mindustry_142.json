{
  "id" : 142,
  "expression" : "\"01\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tests/src/test/java/power/ConsumeGeneratorTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"01\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 124,
      "startColumnNumber" : 34,
      "endLineNumber" : 124,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 124,
        "startColumnNumber" : 22,
        "endLineNumber" : 124,
        "endColumnNumber" : 117
      },
      "nodeContext" : "dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 118
      },
      "nodeContext" : "tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 119
      },
      "nodeContext" : "tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 123,
        "startColumnNumber" : 55,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n  tests.add(dynamicTest(\"02\",() -> simulateItemConsumption(inputType,Items.coal,1,\"Sufficient coal provided\")));\n  tests.add(dynamicTest(\"03\",() -> simulateItemConsumption(inputType,Items.coal,10,\"Excess coal provided\")));\n  tests.add(dynamicTest(\"04\",() -> simulateItemConsumption(inputType,Items.blastCompound,1,\"Blast compound provided\")));\n  tests.add(dynamicTest(\"05\",() -> simulateItemConsumption(inputType,Items.sporePod,1,\"Biomatter provided\")));\n  tests.add(dynamicTest(\"06\",() -> simulateItemConsumption(inputType,Items.pyratite,1,\"Pyratite provided\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (InputType inputType : inputTypesToBeTested) {\n  tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n  tests.add(dynamicTest(\"02\",() -> simulateItemConsumption(inputType,Items.coal,1,\"Sufficient coal provided\")));\n  tests.add(dynamicTest(\"03\",() -> simulateItemConsumption(inputType,Items.coal,10,\"Excess coal provided\")));\n  tests.add(dynamicTest(\"04\",() -> simulateItemConsumption(inputType,Items.blastCompound,1,\"Blast compound provided\")));\n  tests.add(dynamicTest(\"05\",() -> simulateItemConsumption(inputType,Items.sporePod,1,\"Biomatter provided\")));\n  tests.add(dynamicTest(\"06\",() -> simulateItemConsumption(inputType,Items.pyratite,1,\"Pyratite provided\")));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 114,
        "startColumnNumber" : 55,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InputType[] inputTypesToBeTested=new InputType[]{InputType.items};\n  Seq<DynamicTest> tests=new Seq<>();\n  for (  InputType inputType : inputTypesToBeTested) {\n    tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n    tests.add(dynamicTest(\"02\",() -> simulateItemConsumption(inputType,Items.coal,1,\"Sufficient coal provided\")));\n    tests.add(dynamicTest(\"03\",() -> simulateItemConsumption(inputType,Items.coal,10,\"Excess coal provided\")));\n    tests.add(dynamicTest(\"04\",() -> simulateItemConsumption(inputType,Items.blastCompound,1,\"Blast compound provided\")));\n    tests.add(dynamicTest(\"05\",() -> simulateItemConsumption(inputType,Items.sporePod,1,\"Biomatter provided\")));\n    tests.add(dynamicTest(\"06\",() -> simulateItemConsumption(inputType,Items.pyratite,1,\"Pyratite provided\")));\n  }\n  return tests.toArray(DynamicTest.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests the consumption and efficiency when being supplied with items. \n */\n@TestFactory DynamicTest[] generatorWorksProperlyWithItemInput(){\n  InputType[] inputTypesToBeTested=new InputType[]{InputType.items};\n  Seq<DynamicTest> tests=new Seq<>();\n  for (  InputType inputType : inputTypesToBeTested) {\n    tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n    tests.add(dynamicTest(\"02\",() -> simulateItemConsumption(inputType,Items.coal,1,\"Sufficient coal provided\")));\n    tests.add(dynamicTest(\"03\",() -> simulateItemConsumption(inputType,Items.coal,10,\"Excess coal provided\")));\n    tests.add(dynamicTest(\"04\",() -> simulateItemConsumption(inputType,Items.blastCompound,1,\"Blast compound provided\")));\n    tests.add(dynamicTest(\"05\",() -> simulateItemConsumption(inputType,Items.sporePod,1,\"Biomatter provided\")));\n    tests.add(dynamicTest(\"06\",() -> simulateItemConsumption(inputType,Items.pyratite,1,\"Pyratite provided\")));\n  }\n  return tests.toArray(DynamicTest.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 119
      },
      "nodeContext" : "tests.add(dynamicTest(\"01\",() -> simulateItemConsumption(inputType,Items.coal,0,\"No items provided\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 124,
    "startColumnNumber" : 34,
    "endLineNumber" : 124,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}