{
  "id" : 280,
  "expression" : "topicSchema.entrySet().iterator().next()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "topicSchema.entrySet().iterator().next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 655,
      "startColumnNumber" : 58,
      "endLineNumber" : 655,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 655,
        "startColumnNumber" : 50,
        "endLineNumber" : 655,
        "endColumnNumber" : 98
      },
      "nodeContext" : "entry=topicSchema.entrySet().iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 655,
        "startColumnNumber" : 16,
        "endLineNumber" : 655,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 653,
        "startColumnNumber" : 41,
        "endLineNumber" : 659,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n  Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n  singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n  singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n  pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 789,
        "startLineNumber" : 653,
        "startColumnNumber" : 12,
        "endLineNumber" : 663,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (topicSchema.size() == 1) {\n  SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n  Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n  singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n  singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n  pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n}\n else {\n  MultiConsumerPulsarSourceConfig multiConsumerPulsarSourceConfig=new MultiConsumerPulsarSourceConfig();\n  multiConsumerPulsarSourceConfig.setTopicSchema(topicSchema);\n  pulsarSourceConfig=multiConsumerPulsarSourceConfig;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5114,
        "startLineNumber" : 618,
        "startColumnNumber" : 49,
        "endLineNumber" : 705,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,ConsumerConfig> topicSchema=new TreeMap<>();\n  sourceSpec.getInputSpecsMap().forEach((topic,conf) -> {\n    ConsumerConfig consumerConfig=ConsumerConfig.builder().isRegexPattern(conf.getIsRegexPattern()).build();\n    if (conf.getSchemaType() != null && !conf.getSchemaType().isEmpty()) {\n      consumerConfig.setSchemaType(conf.getSchemaType());\n    }\n else     if (conf.getSerdeClassName() != null && !conf.getSerdeClassName().isEmpty()) {\n      consumerConfig.setSerdeClassName(conf.getSerdeClassName());\n    }\n    consumerConfig.setSchemaProperties(conf.getSchemaPropertiesMap());\n    consumerConfig.setConsumerProperties(conf.getConsumerPropertiesMap());\n    if (conf.hasReceiverQueueSize()) {\n      consumerConfig.setReceiverQueueSize(conf.getReceiverQueueSize().getValue());\n    }\n    if (conf.hasCryptoSpec()) {\n      consumerConfig.setCryptoConfig(CryptoUtils.convertFromSpec(conf.getCryptoSpec()));\n    }\n    topicSchema.put(topic,consumerConfig);\n  }\n);\n  sourceSpec.getTopicsToSerDeClassNameMap().forEach((topic,serde) -> {\n    topicSchema.put(topic,ConsumerConfig.builder().serdeClassName(serde).isRegexPattern(false).build());\n  }\n);\n  if (!StringUtils.isEmpty(sourceSpec.getTopicsPattern())) {\n    topicSchema.get(sourceSpec.getTopicsPattern()).setRegexPattern(true);\n  }\n  PulsarSourceConfig pulsarSourceConfig;\n  if (topicSchema.size() == 1) {\n    SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n    Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n    singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n    singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n    pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n  }\n else {\n    MultiConsumerPulsarSourceConfig multiConsumerPulsarSourceConfig=new MultiConsumerPulsarSourceConfig();\n    multiConsumerPulsarSourceConfig.setTopicSchema(topicSchema);\n    pulsarSourceConfig=multiConsumerPulsarSourceConfig;\n  }\n  pulsarSourceConfig.setSubscriptionName(StringUtils.isNotBlank(sourceSpec.getSubscriptionName()) ? sourceSpec.getSubscriptionName() : InstanceUtils.getDefaultSubscriptionName(instanceConfig.getFunctionDetails()));\n  pulsarSourceConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.valueOf(this.instanceConfig.getFunctionDetails().getProcessingGuarantees().name()));\nswitch (sourceSpec.getSubscriptionPosition()) {\ncase EARLIEST:    pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Earliest);\n  break;\ndefault:pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Latest);\nbreak;\n}\nPreconditions.checkNotNull(contextImpl.getSubscriptionType());\npulsarSourceConfig.setSubscriptionType(contextImpl.getSubscriptionType());\npulsarSourceConfig.setTypeClassName(sourceSpec.getTypeClassName());\nif (sourceSpec.getTimeoutMs() > 0) {\npulsarSourceConfig.setTimeoutMs(sourceSpec.getTimeoutMs());\n}\nif (sourceSpec.getNegativeAckRedeliveryDelayMs() > 0) {\npulsarSourceConfig.setNegativeAckRedeliveryDelayMs(sourceSpec.getNegativeAckRedeliveryDelayMs());\n}\nif (this.instanceConfig.getFunctionDetails().hasRetryDetails()) {\npulsarSourceConfig.setMaxMessageRetries(this.instanceConfig.getFunctionDetails().getRetryDetails().getMaxMessageRetries());\npulsarSourceConfig.setDeadLetterTopic(this.instanceConfig.getFunctionDetails().getRetryDetails().getDeadLetterTopic());\n}\nif (pulsarSourceConfig instanceof SingleConsumerPulsarSourceConfig) {\nobject=new SingleConsumerPulsarSource(this.client,(SingleConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n else {\nobject=new MultiConsumerPulsarSource(this.client,(MultiConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5632,
        "startLineNumber" : 618,
        "startColumnNumber" : 8,
        "endLineNumber" : 717,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sourceSpec.getClassName().isEmpty()) {\n  Map<String,ConsumerConfig> topicSchema=new TreeMap<>();\n  sourceSpec.getInputSpecsMap().forEach((topic,conf) -> {\n    ConsumerConfig consumerConfig=ConsumerConfig.builder().isRegexPattern(conf.getIsRegexPattern()).build();\n    if (conf.getSchemaType() != null && !conf.getSchemaType().isEmpty()) {\n      consumerConfig.setSchemaType(conf.getSchemaType());\n    }\n else     if (conf.getSerdeClassName() != null && !conf.getSerdeClassName().isEmpty()) {\n      consumerConfig.setSerdeClassName(conf.getSerdeClassName());\n    }\n    consumerConfig.setSchemaProperties(conf.getSchemaPropertiesMap());\n    consumerConfig.setConsumerProperties(conf.getConsumerPropertiesMap());\n    if (conf.hasReceiverQueueSize()) {\n      consumerConfig.setReceiverQueueSize(conf.getReceiverQueueSize().getValue());\n    }\n    if (conf.hasCryptoSpec()) {\n      consumerConfig.setCryptoConfig(CryptoUtils.convertFromSpec(conf.getCryptoSpec()));\n    }\n    topicSchema.put(topic,consumerConfig);\n  }\n);\n  sourceSpec.getTopicsToSerDeClassNameMap().forEach((topic,serde) -> {\n    topicSchema.put(topic,ConsumerConfig.builder().serdeClassName(serde).isRegexPattern(false).build());\n  }\n);\n  if (!StringUtils.isEmpty(sourceSpec.getTopicsPattern())) {\n    topicSchema.get(sourceSpec.getTopicsPattern()).setRegexPattern(true);\n  }\n  PulsarSourceConfig pulsarSourceConfig;\n  if (topicSchema.size() == 1) {\n    SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n    Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n    singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n    singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n    pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n  }\n else {\n    MultiConsumerPulsarSourceConfig multiConsumerPulsarSourceConfig=new MultiConsumerPulsarSourceConfig();\n    multiConsumerPulsarSourceConfig.setTopicSchema(topicSchema);\n    pulsarSourceConfig=multiConsumerPulsarSourceConfig;\n  }\n  pulsarSourceConfig.setSubscriptionName(StringUtils.isNotBlank(sourceSpec.getSubscriptionName()) ? sourceSpec.getSubscriptionName() : InstanceUtils.getDefaultSubscriptionName(instanceConfig.getFunctionDetails()));\n  pulsarSourceConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.valueOf(this.instanceConfig.getFunctionDetails().getProcessingGuarantees().name()));\nswitch (sourceSpec.getSubscriptionPosition()) {\ncase EARLIEST:    pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Earliest);\n  break;\ndefault:pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Latest);\nbreak;\n}\nPreconditions.checkNotNull(contextImpl.getSubscriptionType());\npulsarSourceConfig.setSubscriptionType(contextImpl.getSubscriptionType());\npulsarSourceConfig.setTypeClassName(sourceSpec.getTypeClassName());\nif (sourceSpec.getTimeoutMs() > 0) {\npulsarSourceConfig.setTimeoutMs(sourceSpec.getTimeoutMs());\n}\nif (sourceSpec.getNegativeAckRedeliveryDelayMs() > 0) {\npulsarSourceConfig.setNegativeAckRedeliveryDelayMs(sourceSpec.getNegativeAckRedeliveryDelayMs());\n}\nif (this.instanceConfig.getFunctionDetails().hasRetryDetails()) {\npulsarSourceConfig.setMaxMessageRetries(this.instanceConfig.getFunctionDetails().getRetryDetails().getMaxMessageRetries());\npulsarSourceConfig.setDeadLetterTopic(this.instanceConfig.getFunctionDetails().getRetryDetails().getDeadLetterTopic());\n}\nif (pulsarSourceConfig instanceof SingleConsumerPulsarSourceConfig) {\nobject=new SingleConsumerPulsarSource(this.client,(SingleConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n else {\nobject=new MultiConsumerPulsarSource(this.client,(MultiConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n}\n else {\nif (sourceSpec.getClassName().equals(BatchSourceExecutor.class.getName())) {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.instanceClassLoader);\n}\n else {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.functionClassLoader);\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 489,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7148,
        "startLineNumber" : 613,
        "startColumnNumber" : 70,
        "endLineNumber" : 747,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SourceSpec sourceSpec=this.instanceConfig.getFunctionDetails().getSource();\n  Object object;\n  if (sourceSpec.getClassName().isEmpty()) {\n    Map<String,ConsumerConfig> topicSchema=new TreeMap<>();\n    sourceSpec.getInputSpecsMap().forEach((topic,conf) -> {\n      ConsumerConfig consumerConfig=ConsumerConfig.builder().isRegexPattern(conf.getIsRegexPattern()).build();\n      if (conf.getSchemaType() != null && !conf.getSchemaType().isEmpty()) {\n        consumerConfig.setSchemaType(conf.getSchemaType());\n      }\n else       if (conf.getSerdeClassName() != null && !conf.getSerdeClassName().isEmpty()) {\n        consumerConfig.setSerdeClassName(conf.getSerdeClassName());\n      }\n      consumerConfig.setSchemaProperties(conf.getSchemaPropertiesMap());\n      consumerConfig.setConsumerProperties(conf.getConsumerPropertiesMap());\n      if (conf.hasReceiverQueueSize()) {\n        consumerConfig.setReceiverQueueSize(conf.getReceiverQueueSize().getValue());\n      }\n      if (conf.hasCryptoSpec()) {\n        consumerConfig.setCryptoConfig(CryptoUtils.convertFromSpec(conf.getCryptoSpec()));\n      }\n      topicSchema.put(topic,consumerConfig);\n    }\n);\n    sourceSpec.getTopicsToSerDeClassNameMap().forEach((topic,serde) -> {\n      topicSchema.put(topic,ConsumerConfig.builder().serdeClassName(serde).isRegexPattern(false).build());\n    }\n);\n    if (!StringUtils.isEmpty(sourceSpec.getTopicsPattern())) {\n      topicSchema.get(sourceSpec.getTopicsPattern()).setRegexPattern(true);\n    }\n    PulsarSourceConfig pulsarSourceConfig;\n    if (topicSchema.size() == 1) {\n      SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n      Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n      singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n      singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n      pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n    }\n else {\n      MultiConsumerPulsarSourceConfig multiConsumerPulsarSourceConfig=new MultiConsumerPulsarSourceConfig();\n      multiConsumerPulsarSourceConfig.setTopicSchema(topicSchema);\n      pulsarSourceConfig=multiConsumerPulsarSourceConfig;\n    }\n    pulsarSourceConfig.setSubscriptionName(StringUtils.isNotBlank(sourceSpec.getSubscriptionName()) ? sourceSpec.getSubscriptionName() : InstanceUtils.getDefaultSubscriptionName(instanceConfig.getFunctionDetails()));\n    pulsarSourceConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.valueOf(this.instanceConfig.getFunctionDetails().getProcessingGuarantees().name()));\nswitch (sourceSpec.getSubscriptionPosition()) {\ncase EARLIEST:      pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Earliest);\n    break;\ndefault:  pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Latest);\nbreak;\n}\nPreconditions.checkNotNull(contextImpl.getSubscriptionType());\npulsarSourceConfig.setSubscriptionType(contextImpl.getSubscriptionType());\npulsarSourceConfig.setTypeClassName(sourceSpec.getTypeClassName());\nif (sourceSpec.getTimeoutMs() > 0) {\npulsarSourceConfig.setTimeoutMs(sourceSpec.getTimeoutMs());\n}\nif (sourceSpec.getNegativeAckRedeliveryDelayMs() > 0) {\npulsarSourceConfig.setNegativeAckRedeliveryDelayMs(sourceSpec.getNegativeAckRedeliveryDelayMs());\n}\nif (this.instanceConfig.getFunctionDetails().hasRetryDetails()) {\npulsarSourceConfig.setMaxMessageRetries(this.instanceConfig.getFunctionDetails().getRetryDetails().getMaxMessageRetries());\npulsarSourceConfig.setDeadLetterTopic(this.instanceConfig.getFunctionDetails().getRetryDetails().getDeadLetterTopic());\n}\nif (pulsarSourceConfig instanceof SingleConsumerPulsarSourceConfig) {\nobject=new SingleConsumerPulsarSource(this.client,(SingleConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n else {\nobject=new MultiConsumerPulsarSource(this.client,(MultiConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n}\n else {\nif (sourceSpec.getClassName().equals(BatchSourceExecutor.class.getName())) {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.instanceClassLoader);\n}\n else {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.functionClassLoader);\n}\n}\nClass<?>[] typeArgs;\nif (object instanceof Source) {\ntypeArgs=TypeResolver.resolveRawArguments(Source.class,object.getClass());\nassert typeArgs.length > 0;\n}\n else {\nthrow new RuntimeException(\"Source does not implement correct interface\");\n}\nthis.source=(Source<?>)object;\nif (componentType == org.apache.pulsar.functions.proto.Function.FunctionDetails.ComponentType.SOURCE) {\nThread.currentThread().setContextClassLoader(this.functionClassLoader);\n}\ntry {\nif (sourceSpec.getConfigs().isEmpty()) {\nthis.source.open(new HashMap<>(),contextImpl);\n}\n else {\nthis.source.open(ObjectMapperFactory.getThreadLocal().readValue(sourceSpec.getConfigs(),new TypeReference<Map<String,Object>>(){\n}\n),contextImpl);\n}\nif (this.source instanceof PulsarSource) {\ncontextImpl.setInputConsumers(((PulsarSource)this.source).getInputConsumers());\n}\n}\n catch (Exception e) {\nlog.error(\"Source open produced uncaught exception: \",e);\nthrow e;\n}\n finally {\nThread.currentThread().setContextClassLoader(this.instanceClassLoader);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 680,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7214,
        "startLineNumber" : 613,
        "startColumnNumber" : 4,
        "endLineNumber" : 747,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void setupInput(ContextImpl contextImpl) throws Exception {\n  SourceSpec sourceSpec=this.instanceConfig.getFunctionDetails().getSource();\n  Object object;\n  if (sourceSpec.getClassName().isEmpty()) {\n    Map<String,ConsumerConfig> topicSchema=new TreeMap<>();\n    sourceSpec.getInputSpecsMap().forEach((topic,conf) -> {\n      ConsumerConfig consumerConfig=ConsumerConfig.builder().isRegexPattern(conf.getIsRegexPattern()).build();\n      if (conf.getSchemaType() != null && !conf.getSchemaType().isEmpty()) {\n        consumerConfig.setSchemaType(conf.getSchemaType());\n      }\n else       if (conf.getSerdeClassName() != null && !conf.getSerdeClassName().isEmpty()) {\n        consumerConfig.setSerdeClassName(conf.getSerdeClassName());\n      }\n      consumerConfig.setSchemaProperties(conf.getSchemaPropertiesMap());\n      consumerConfig.setConsumerProperties(conf.getConsumerPropertiesMap());\n      if (conf.hasReceiverQueueSize()) {\n        consumerConfig.setReceiverQueueSize(conf.getReceiverQueueSize().getValue());\n      }\n      if (conf.hasCryptoSpec()) {\n        consumerConfig.setCryptoConfig(CryptoUtils.convertFromSpec(conf.getCryptoSpec()));\n      }\n      topicSchema.put(topic,consumerConfig);\n    }\n);\n    sourceSpec.getTopicsToSerDeClassNameMap().forEach((topic,serde) -> {\n      topicSchema.put(topic,ConsumerConfig.builder().serdeClassName(serde).isRegexPattern(false).build());\n    }\n);\n    if (!StringUtils.isEmpty(sourceSpec.getTopicsPattern())) {\n      topicSchema.get(sourceSpec.getTopicsPattern()).setRegexPattern(true);\n    }\n    PulsarSourceConfig pulsarSourceConfig;\n    if (topicSchema.size() == 1) {\n      SingleConsumerPulsarSourceConfig singleConsumerPulsarSourceConfig=new SingleConsumerPulsarSourceConfig();\n      Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n      singleConsumerPulsarSourceConfig.setTopic(entry.getKey());\n      singleConsumerPulsarSourceConfig.setConsumerConfig(entry.getValue());\n      pulsarSourceConfig=singleConsumerPulsarSourceConfig;\n    }\n else {\n      MultiConsumerPulsarSourceConfig multiConsumerPulsarSourceConfig=new MultiConsumerPulsarSourceConfig();\n      multiConsumerPulsarSourceConfig.setTopicSchema(topicSchema);\n      pulsarSourceConfig=multiConsumerPulsarSourceConfig;\n    }\n    pulsarSourceConfig.setSubscriptionName(StringUtils.isNotBlank(sourceSpec.getSubscriptionName()) ? sourceSpec.getSubscriptionName() : InstanceUtils.getDefaultSubscriptionName(instanceConfig.getFunctionDetails()));\n    pulsarSourceConfig.setProcessingGuarantees(FunctionConfig.ProcessingGuarantees.valueOf(this.instanceConfig.getFunctionDetails().getProcessingGuarantees().name()));\nswitch (sourceSpec.getSubscriptionPosition()) {\ncase EARLIEST:      pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Earliest);\n    break;\ndefault:  pulsarSourceConfig.setSubscriptionPosition(SubscriptionInitialPosition.Latest);\nbreak;\n}\nPreconditions.checkNotNull(contextImpl.getSubscriptionType());\npulsarSourceConfig.setSubscriptionType(contextImpl.getSubscriptionType());\npulsarSourceConfig.setTypeClassName(sourceSpec.getTypeClassName());\nif (sourceSpec.getTimeoutMs() > 0) {\npulsarSourceConfig.setTimeoutMs(sourceSpec.getTimeoutMs());\n}\nif (sourceSpec.getNegativeAckRedeliveryDelayMs() > 0) {\npulsarSourceConfig.setNegativeAckRedeliveryDelayMs(sourceSpec.getNegativeAckRedeliveryDelayMs());\n}\nif (this.instanceConfig.getFunctionDetails().hasRetryDetails()) {\npulsarSourceConfig.setMaxMessageRetries(this.instanceConfig.getFunctionDetails().getRetryDetails().getMaxMessageRetries());\npulsarSourceConfig.setDeadLetterTopic(this.instanceConfig.getFunctionDetails().getRetryDetails().getDeadLetterTopic());\n}\nif (pulsarSourceConfig instanceof SingleConsumerPulsarSourceConfig) {\nobject=new SingleConsumerPulsarSource(this.client,(SingleConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n else {\nobject=new MultiConsumerPulsarSource(this.client,(MultiConsumerPulsarSourceConfig)pulsarSourceConfig,this.properties,this.functionClassLoader);\n}\n}\n else {\nif (sourceSpec.getClassName().equals(BatchSourceExecutor.class.getName())) {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.instanceClassLoader);\n}\n else {\nobject=Reflections.createInstance(sourceSpec.getClassName(),this.functionClassLoader);\n}\n}\nClass<?>[] typeArgs;\nif (object instanceof Source) {\ntypeArgs=TypeResolver.resolveRawArguments(Source.class,object.getClass());\nassert typeArgs.length > 0;\n}\n else {\nthrow new RuntimeException(\"Source does not implement correct interface\");\n}\nthis.source=(Source<?>)object;\nif (componentType == org.apache.pulsar.functions.proto.Function.FunctionDetails.ComponentType.SOURCE) {\nThread.currentThread().setContextClassLoader(this.functionClassLoader);\n}\ntry {\nif (sourceSpec.getConfigs().isEmpty()) {\nthis.source.open(new HashMap<>(),contextImpl);\n}\n else {\nthis.source.open(ObjectMapperFactory.getThreadLocal().readValue(sourceSpec.getConfigs(),new TypeReference<Map<String,Object>>(){\n}\n),contextImpl);\n}\nif (this.source instanceof PulsarSource) {\ncontextImpl.setInputConsumers(((PulsarSource)this.source).getInputConsumers());\n}\n}\n catch (Exception e) {\nlog.error(\"Source open produced uncaught exception: \",e);\nthrow e;\n}\n finally {\nThread.currentThread().setContextClassLoader(this.instanceClassLoader);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 690,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 655,
        "startColumnNumber" : 16,
        "endLineNumber" : 655,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Map.Entry<String,ConsumerConfig> entry=topicSchema.entrySet().iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.util.Map.Entry<java.lang.String,org.apache.pulsar.common.functions.ConsumerConfig>"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 655,
    "startColumnNumber" : 58,
    "endLineNumber" : 655,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ ]
}