{
  "id" : 71,
  "expression" : "'='",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'='",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 82,
      "startColumnNumber" : 41,
      "endLineNumber" : 82,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 45
      },
      "nodeContext" : "result.append(tag.getKey()).append('=')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 68
      },
      "nodeContext" : "result.append(tag.getKey()).append('=').append(tag.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 86
      },
      "nodeContext" : "result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 87
      },
      "nodeContext" : "result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (tag.getValue().length() > SHORT_STRING_LENGTH)   continue;\n  result.append(tag.getKey()).append(delimiter);\n  result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 312,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,String> tag : span.tags().entrySet()) {\n  if (tag.getValue().length() > SHORT_STRING_LENGTH)   continue;\n  result.append(tag.getKey()).append(delimiter);\n  result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 67,
        "startColumnNumber" : 53,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (span.annotations().isEmpty() && span.tags().isEmpty())   return null;\n  char delimiter='░';\n  StringBuilder result=new StringBuilder().append(delimiter);\n  for (  Annotation a : span.annotations()) {\n    if (a.value().length() > SHORT_STRING_LENGTH)     continue;\n    result.append(a.value()).append(delimiter);\n  }\n  for (  Map.Entry<String,String> tag : span.tags().entrySet()) {\n    if (tag.getValue().length() > SHORT_STRING_LENGTH)     continue;\n    result.append(tag.getKey()).append(delimiter);\n    result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n  }\n  return result.length() == 1 ? null : result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1337,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a set of annotation getValues and tags joined on equals, delimited by ░ <p>Values over  {@link RecyclableBuffers#SHORT_STRING_LENGTH} are not considered. Zipkin's{@link QueryRequest#annotationQuery()} are equals match. Not all values are lookup values. Forexample,  {@code sql.query} isn't something that is likely to be looked up by value and indexingthat could add a potentially kilobyte partition key on  {@link Schema#TABLE_SPAN}\n * @see QueryRequest#annotationQuery()\n */\n@Nullable static String annotationQuery(Span span){\n  if (span.annotations().isEmpty() && span.tags().isEmpty())   return null;\n  char delimiter='░';\n  StringBuilder result=new StringBuilder().append(delimiter);\n  for (  Annotation a : span.annotations()) {\n    if (a.value().length() > SHORT_STRING_LENGTH)     continue;\n    result.append(a.value()).append(delimiter);\n  }\n  for (  Map.Entry<String,String> tag : span.tags().entrySet()) {\n    if (tag.getValue().length() > SHORT_STRING_LENGTH)     continue;\n    result.append(tag.getKey()).append(delimiter);\n    result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n  }\n  return result.length() == 1 ? null : result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 6,
        "endLineNumber" : 82,
        "endColumnNumber" : 87
      },
      "nodeContext" : "result.append(tag.getKey()).append('=').append(tag.getValue()).append(delimiter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 82,
    "startColumnNumber" : 41,
    "endLineNumber" : 82,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}