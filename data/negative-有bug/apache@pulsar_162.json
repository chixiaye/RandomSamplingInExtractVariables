{
  "id" : 162,
  "expression" : "pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/api/NonPersistentTopicTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 118,
      "startLineNumber" : 839,
      "startColumnNumber" : 40,
      "endLineNumber" : 840,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 839,
        "startColumnNumber" : 40,
        "endLineNumber" : 840,
        "endColumnNumber" : 53
      },
      "nodeContext" : "pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 839,
        "startColumnNumber" : 29,
        "endLineNumber" : 840,
        "endColumnNumber" : 53
      },
      "nodeContext" : "consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 839,
        "startColumnNumber" : 12,
        "endLineNumber" : 840,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2331,
        "startLineNumber" : 833,
        "startColumnNumber" : 12,
        "endLineNumber" : 877,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String topicName=\"non-persistent://my-property/my-ns/stats-topic\";\n  conf.setMaxConcurrentNonPersistentMessagePerConnection(1);\n  stopBroker();\n  startBroker();\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n  Consumer<byte[]> consumer2=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-2\").receiverQueueSize(1).subscriptionType(SubscriptionType.Shared).subscribe();\n  ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newFixedThreadPool(5);\n  byte[] msgData=\"testData\".getBytes();\n  final int totalProduceMessages=200;\n  CountDownLatch latch=new CountDownLatch(totalProduceMessages);\n  for (int i=0; i < totalProduceMessages; i++) {\n    executor.submit(() -> {\n      producer.sendAsync(msgData).handle((msg,e) -> {\n        latch.countDown();\n        return null;\n      }\n);\n    }\n);\n  }\n  latch.await();\n  NonPersistentTopic topic=(NonPersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  pulsar.getBrokerService().updateRates();\n  NonPersistentTopicStats stats=topic.getStats(false,false);\n  NonPersistentPublisherStats npStats=stats.getPublishers().get(0);\n  NonPersistentSubscriptionStats sub1Stats=stats.getSubscriptions().get(\"subscriber-1\");\n  NonPersistentSubscriptionStats sub2Stats=stats.getSubscriptions().get(\"subscriber-2\");\n  assertTrue(npStats.getMsgDropRate() > 0);\n  assertTrue(sub1Stats.getMsgDropRate() > 0);\n  assertTrue(sub2Stats.getMsgDropRate() > 0);\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 280,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2456,
        "startLineNumber" : 833,
        "startColumnNumber" : 8,
        "endLineNumber" : 879,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final String topicName=\"non-persistent://my-property/my-ns/stats-topic\";\n  conf.setMaxConcurrentNonPersistentMessagePerConnection(1);\n  stopBroker();\n  startBroker();\n  Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n  Consumer<byte[]> consumer2=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-2\").receiverQueueSize(1).subscriptionType(SubscriptionType.Shared).subscribe();\n  ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n  @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newFixedThreadPool(5);\n  byte[] msgData=\"testData\".getBytes();\n  final int totalProduceMessages=200;\n  CountDownLatch latch=new CountDownLatch(totalProduceMessages);\n  for (int i=0; i < totalProduceMessages; i++) {\n    executor.submit(() -> {\n      producer.sendAsync(msgData).handle((msg,e) -> {\n        latch.countDown();\n        return null;\n      }\n);\n    }\n);\n  }\n  latch.await();\n  NonPersistentTopic topic=(NonPersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n  pulsar.getBrokerService().updateRates();\n  NonPersistentTopicStats stats=topic.getStats(false,false);\n  NonPersistentPublisherStats npStats=stats.getPublishers().get(0);\n  NonPersistentSubscriptionStats sub1Stats=stats.getSubscriptions().get(\"subscriber-1\");\n  NonPersistentSubscriptionStats sub2Stats=stats.getSubscriptions().get(\"subscriber-2\");\n  assertTrue(npStats.getMsgDropRate() > 0);\n  assertTrue(sub1Stats.getMsgDropRate() > 0);\n  assertTrue(sub2Stats.getMsgDropRate() > 0);\n  producer.close();\n  consumer.close();\n  consumer2.close();\n}\n  finally {\n  conf.setMaxConcurrentNonPersistentMessagePerConnection(defaultNonPersistentMessageRate);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 287,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2577,
        "startLineNumber" : 830,
        "startColumnNumber" : 51,
        "endLineNumber" : 880,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int defaultNonPersistentMessageRate=conf.getMaxConcurrentNonPersistentMessagePerConnection();\n  try {\n    final String topicName=\"non-persistent://my-property/my-ns/stats-topic\";\n    conf.setMaxConcurrentNonPersistentMessagePerConnection(1);\n    stopBroker();\n    startBroker();\n    Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n    Consumer<byte[]> consumer2=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-2\").receiverQueueSize(1).subscriptionType(SubscriptionType.Shared).subscribe();\n    ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n    @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newFixedThreadPool(5);\n    byte[] msgData=\"testData\".getBytes();\n    final int totalProduceMessages=200;\n    CountDownLatch latch=new CountDownLatch(totalProduceMessages);\n    for (int i=0; i < totalProduceMessages; i++) {\n      executor.submit(() -> {\n        producer.sendAsync(msgData).handle((msg,e) -> {\n          latch.countDown();\n          return null;\n        }\n);\n      }\n);\n    }\n    latch.await();\n    NonPersistentTopic topic=(NonPersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n    pulsar.getBrokerService().updateRates();\n    NonPersistentTopicStats stats=topic.getStats(false,false);\n    NonPersistentPublisherStats npStats=stats.getPublishers().get(0);\n    NonPersistentSubscriptionStats sub1Stats=stats.getSubscriptions().get(\"subscriber-1\");\n    NonPersistentSubscriptionStats sub2Stats=stats.getSubscriptions().get(\"subscriber-2\");\n    assertTrue(npStats.getMsgDropRate() > 0);\n    assertTrue(sub1Stats.getMsgDropRate() > 0);\n    assertTrue(sub2Stats.getMsgDropRate() > 0);\n    producer.close();\n    consumer.close();\n    consumer2.close();\n  }\n  finally {\n    conf.setMaxConcurrentNonPersistentMessagePerConnection(defaultNonPersistentMessageRate);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2713,
        "startLineNumber" : 824,
        "startColumnNumber" : 4,
        "endLineNumber" : 880,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies msg-drop stats\n * @throws Exception\n */\n@Test public void testMsgDropStat() throws Exception {\n  int defaultNonPersistentMessageRate=conf.getMaxConcurrentNonPersistentMessagePerConnection();\n  try {\n    final String topicName=\"non-persistent://my-property/my-ns/stats-topic\";\n    conf.setMaxConcurrentNonPersistentMessagePerConnection(1);\n    stopBroker();\n    startBroker();\n    Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n    Consumer<byte[]> consumer2=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-2\").receiverQueueSize(1).subscriptionType(SubscriptionType.Shared).subscribe();\n    ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)pulsarClient.newProducer().topic(topicName).enableBatching(false).messageRoutingMode(MessageRoutingMode.SinglePartition).create();\n    @Cleanup(\"shutdownNow\") ExecutorService executor=Executors.newFixedThreadPool(5);\n    byte[] msgData=\"testData\".getBytes();\n    final int totalProduceMessages=200;\n    CountDownLatch latch=new CountDownLatch(totalProduceMessages);\n    for (int i=0; i < totalProduceMessages; i++) {\n      executor.submit(() -> {\n        producer.sendAsync(msgData).handle((msg,e) -> {\n          latch.countDown();\n          return null;\n        }\n);\n      }\n);\n    }\n    latch.await();\n    NonPersistentTopic topic=(NonPersistentTopic)pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n    pulsar.getBrokerService().updateRates();\n    NonPersistentTopicStats stats=topic.getStats(false,false);\n    NonPersistentPublisherStats npStats=stats.getPublishers().get(0);\n    NonPersistentSubscriptionStats sub1Stats=stats.getSubscriptions().get(\"subscriber-1\");\n    NonPersistentSubscriptionStats sub2Stats=stats.getSubscriptions().get(\"subscriber-2\");\n    assertTrue(npStats.getMsgDropRate() > 0);\n    assertTrue(sub1Stats.getMsgDropRate() > 0);\n    assertTrue(sub2Stats.getMsgDropRate() > 0);\n    producer.close();\n    consumer.close();\n    consumer2.close();\n  }\n  finally {\n    conf.setMaxConcurrentNonPersistentMessagePerConnection(defaultNonPersistentMessageRate);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 839,
        "startColumnNumber" : 12,
        "endLineNumber" : 840,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Consumer<byte[]> consumer=pulsarClient.newConsumer().topic(topicName).subscriptionName(\"subscriber-1\").receiverQueueSize(1).subscribe();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    },
    "tokenLength" : 8,
    "type" : "org.apache.pulsar.client.api.ConsumerBuilder<byte[]>"
  } ],
  "positionList" : [ {
    "charLength" : 118,
    "startLineNumber" : 839,
    "startColumnNumber" : 40,
    "endLineNumber" : 840,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}