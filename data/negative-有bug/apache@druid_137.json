{
  "id" : 137,
  "expression" : "mySsl",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/test/java/org/apache/druid/java/util/http/client/FriendlyServersTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mySsl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 206,
      "startColumnNumber" : 88,
      "endLineNumber" : 206,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 206,
        "startColumnNumber" : 46,
        "endLineNumber" : 206,
        "endColumnNumber" : 94
      },
      "nodeContext" : "HttpClientConfig.builder().withSslContext(mySsl)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 206,
        "startColumnNumber" : 46,
        "endLineNumber" : 206,
        "endColumnNumber" : 102
      },
      "nodeContext" : "HttpClientConfig.builder().withSslContext(mySsl).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 206,
        "startColumnNumber" : 29,
        "endLineNumber" : 206,
        "endColumnNumber" : 102
      },
      "nodeContext" : "trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 206,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 103
      },
      "nodeContext" : "final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2666,
        "startLineNumber" : 204,
        "startColumnNumber" : 8,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SSLContext mySsl=HttpClientInit.sslContextWithTrustedKeyStore(keyStorePath,\"abc123\");\n  final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n  final HttpClient trustingClient=HttpClientInit.createClient(trustingConfig,lifecycle);\n  final HttpClientConfig skepticalConfig=HttpClientConfig.builder().withSslContext(SSLContext.getDefault()).build();\n  final HttpClient skepticalClient=HttpClientInit.createClient(skepticalConfig,lifecycle);\n{\n    final HttpResponseStatus status=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance()).get().getStatus();\n    Assert.assertEquals(404,status.getCode());\n  }\n{\n    final ListenableFuture<StatusResponseHolder> response1=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://127.0.0.1:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n    Throwable ea=null;\n    try {\n      response1.get();\n    }\n catch (    ExecutionException e) {\n      ea=e.getCause();\n    }\n    Assert.assertTrue(\"ChannelException thrown by 'get'\",ea instanceof ChannelException);\n    Assert.assertTrue(\"Expected error message\",ea.getCause().getMessage().contains(\"Failed to handshake\"));\n  }\n{\n    final ListenableFuture<StatusResponseHolder> response2=skepticalClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n    Throwable eb=null;\n    try {\n      response2.get();\n    }\n catch (    ExecutionException e) {\n      eb=e.getCause();\n    }\n    Assert.assertNotNull(\"ChannelException thrown by 'get'\",eb);\n    Assert.assertTrue(\"Root cause is SSLHandshakeException\",eb.getCause().getCause() instanceof SSLHandshakeException);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 278,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  final SSLContext mySsl=HttpClientInit.sslContextWithTrustedKeyStore(keyStorePath,\"abc123\");\n  final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n  final HttpClient trustingClient=HttpClientInit.createClient(trustingConfig,lifecycle);\n  final HttpClientConfig skepticalConfig=HttpClientConfig.builder().withSslContext(SSLContext.getDefault()).build();\n  final HttpClient skepticalClient=HttpClientInit.createClient(skepticalConfig,lifecycle);\n{\n    final HttpResponseStatus status=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance()).get().getStatus();\n    Assert.assertEquals(404,status.getCode());\n  }\n{\n    final ListenableFuture<StatusResponseHolder> response1=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://127.0.0.1:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n    Throwable ea=null;\n    try {\n      response1.get();\n    }\n catch (    ExecutionException e) {\n      ea=e.getCause();\n    }\n    Assert.assertTrue(\"ChannelException thrown by 'get'\",ea instanceof ChannelException);\n    Assert.assertTrue(\"Expected error message\",ea.getCause().getMessage().contains(\"Failed to handshake\"));\n  }\n{\n    final ListenableFuture<StatusResponseHolder> response2=skepticalClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n    Throwable eb=null;\n    try {\n      response2.get();\n    }\n catch (    ExecutionException e) {\n      eb=e.getCause();\n    }\n    Assert.assertNotNull(\"ChannelException thrown by 'get'\",eb);\n    Assert.assertTrue(\"Root cause is SSLHandshakeException\",eb.getCause().getCause() instanceof SSLHandshakeException);\n  }\n}\n  finally {\n  lifecycle.stop();\n  server.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 268,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3576,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Lifecycle lifecycle=new Lifecycle();\n  final String keyStorePath=getClass().getClassLoader().getResource(\"keystore.jks\").getFile();\n  Server server=new Server();\n  HttpConfiguration https=new HttpConfiguration();\n  https.addCustomizer(new SecureRequestCustomizer());\n  SslContextFactory.Server sslContextFactory=new SslContextFactory.Server();\n  sslContextFactory.setKeyStorePath(keyStorePath);\n  sslContextFactory.setKeyStorePassword(\"abc123\");\n  sslContextFactory.setKeyManagerPassword(\"abc123\");\n  ServerConnector sslConnector=new ServerConnector(server,new SslConnectionFactory(sslContextFactory,\"http/1.1\"),new HttpConnectionFactory(https));\n  sslConnector.setPort(0);\n  server.setConnectors(new Connector[]{sslConnector});\n  server.start();\n  try {\n    final SSLContext mySsl=HttpClientInit.sslContextWithTrustedKeyStore(keyStorePath,\"abc123\");\n    final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n    final HttpClient trustingClient=HttpClientInit.createClient(trustingConfig,lifecycle);\n    final HttpClientConfig skepticalConfig=HttpClientConfig.builder().withSslContext(SSLContext.getDefault()).build();\n    final HttpClient skepticalClient=HttpClientInit.createClient(skepticalConfig,lifecycle);\n{\n      final HttpResponseStatus status=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance()).get().getStatus();\n      Assert.assertEquals(404,status.getCode());\n    }\n{\n      final ListenableFuture<StatusResponseHolder> response1=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://127.0.0.1:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n      Throwable ea=null;\n      try {\n        response1.get();\n      }\n catch (      ExecutionException e) {\n        ea=e.getCause();\n      }\n      Assert.assertTrue(\"ChannelException thrown by 'get'\",ea instanceof ChannelException);\n      Assert.assertTrue(\"Expected error message\",ea.getCause().getMessage().contains(\"Failed to handshake\"));\n    }\n{\n      final ListenableFuture<StatusResponseHolder> response2=skepticalClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n      Throwable eb=null;\n      try {\n        response2.get();\n      }\n catch (      ExecutionException e) {\n        eb=e.getCause();\n      }\n      Assert.assertNotNull(\"ChannelException thrown by 'get'\",eb);\n      Assert.assertTrue(\"Root cause is SSLHandshakeException\",eb.getCause().getCause() instanceof SSLHandshakeException);\n    }\n  }\n  finally {\n    lifecycle.stop();\n    server.stop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFriendlySelfSignedHttpsServer() throws Exception {\n  final Lifecycle lifecycle=new Lifecycle();\n  final String keyStorePath=getClass().getClassLoader().getResource(\"keystore.jks\").getFile();\n  Server server=new Server();\n  HttpConfiguration https=new HttpConfiguration();\n  https.addCustomizer(new SecureRequestCustomizer());\n  SslContextFactory.Server sslContextFactory=new SslContextFactory.Server();\n  sslContextFactory.setKeyStorePath(keyStorePath);\n  sslContextFactory.setKeyStorePassword(\"abc123\");\n  sslContextFactory.setKeyManagerPassword(\"abc123\");\n  ServerConnector sslConnector=new ServerConnector(server,new SslConnectionFactory(sslContextFactory,\"http/1.1\"),new HttpConnectionFactory(https));\n  sslConnector.setPort(0);\n  server.setConnectors(new Connector[]{sslConnector});\n  server.start();\n  try {\n    final SSLContext mySsl=HttpClientInit.sslContextWithTrustedKeyStore(keyStorePath,\"abc123\");\n    final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n    final HttpClient trustingClient=HttpClientInit.createClient(trustingConfig,lifecycle);\n    final HttpClientConfig skepticalConfig=HttpClientConfig.builder().withSslContext(SSLContext.getDefault()).build();\n    final HttpClient skepticalClient=HttpClientInit.createClient(skepticalConfig,lifecycle);\n{\n      final HttpResponseStatus status=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance()).get().getStatus();\n      Assert.assertEquals(404,status.getCode());\n    }\n{\n      final ListenableFuture<StatusResponseHolder> response1=trustingClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://127.0.0.1:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n      Throwable ea=null;\n      try {\n        response1.get();\n      }\n catch (      ExecutionException e) {\n        ea=e.getCause();\n      }\n      Assert.assertTrue(\"ChannelException thrown by 'get'\",ea instanceof ChannelException);\n      Assert.assertTrue(\"Expected error message\",ea.getCause().getMessage().contains(\"Failed to handshake\"));\n    }\n{\n      final ListenableFuture<StatusResponseHolder> response2=skepticalClient.go(new Request(HttpMethod.GET,new URL(StringUtils.format(\"https://localhost:%d/\",sslConnector.getLocalPort()))),StatusResponseHandler.getInstance());\n      Throwable eb=null;\n      try {\n        response2.get();\n      }\n catch (      ExecutionException e) {\n        eb=e.getCause();\n      }\n      Assert.assertNotNull(\"ChannelException thrown by 'get'\",eb);\n      Assert.assertTrue(\"Root cause is SSLHandshakeException\",eb.getCause().getCause() instanceof SSLHandshakeException);\n    }\n  }\n  finally {\n    lifecycle.stop();\n    server.stop();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 206,
        "startColumnNumber" : 6,
        "endLineNumber" : 206,
        "endColumnNumber" : 103
      },
      "nodeContext" : "final HttpClientConfig trustingConfig=HttpClientConfig.builder().withSslContext(mySsl).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "javax.net.ssl.SSLContext"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 206,
    "startColumnNumber" : 88,
    "endLineNumber" : 206,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}