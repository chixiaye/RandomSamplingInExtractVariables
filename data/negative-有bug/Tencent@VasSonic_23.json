{
  "id" : 23,
  "expression" : "\"load sub resource(\" + resourceUrl + \") from cache.\"",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/download/SonicDownloadEngine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"load sub resource(\" + resourceUrl + \") from cache.\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 184,
      "startColumnNumber" : 42,
      "endLineNumber" : 184,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 95
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 96
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 180,
        "startColumnNumber" : 35,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  task.mInputStream=new ByteArrayInputStream(resourceBytes);\n  task.mRspHeaders=mCache.getResourceCacheHeader(resourceUrl);\n  task.mState.set(DownloadTask.STATE_LOAD_FROM_CACHE);\n  SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n  return task;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 379,
        "startLineNumber" : 180,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (resourceBytes != null) {\n  task.mInputStream=new ByteArrayInputStream(resourceBytes);\n  task.mRspHeaders=mCache.getResourceCacheHeader(resourceUrl);\n  task.mState.set(DownloadTask.STATE_LOAD_FROM_CACHE);\n  SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n  return task;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1730,
        "startLineNumber" : 155,
        "startColumnNumber" : 118,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (TextUtils.isEmpty(resourceUrl)) {\n    return null;\n  }\nsynchronized (mQueue) {\n    if (mQueue.containsKey(resourceUrl)) {\n      SonicUtils.log(TAG,Log.INFO,\"sub resource download task has been in queue (\" + resourceUrl + \").\");\n      return mQueue.get(resourceUrl);\n    }\n  }\n  final DownloadTask task=new DownloadTask();\n  task.mResourceUrl=resourceUrl;\n  task.mCallbacks.add(callback);\n  task.mCallbacks.add(new SonicDownloadCallback.SimpleDownloadCallback(){\n    @Override public void onFinish(){\n      task.mState.set(DownloadTask.STATE_DOWNLOADED);\n      mHandler.sendEmptyMessage(MSG_DEQUEUE);\n    }\n  }\n);\n  byte[] resourceBytes=mCache.getResourceCache(resourceUrl);\n  if (resourceBytes != null) {\n    task.mInputStream=new ByteArrayInputStream(resourceBytes);\n    task.mRspHeaders=mCache.getResourceCacheHeader(resourceUrl);\n    task.mState.set(DownloadTask.STATE_LOAD_FROM_CACHE);\n    SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n    return task;\n  }\n  task.mIpAddress=ipAddress;\n  task.mCookie=cookie;\n  if (mNumOfDownloadingTask.get() < SonicEngine.getInstance().getConfig().SONIC_MAX_NUM_OF_DOWNLOADING_TASK) {\n    startDownload(task);\n  }\n else {\n    Message enqueueMsg=mHandler.obtainMessage(MSG_ENQUEUE,task);\n    mHandler.sendMessage(enqueueMsg);\n  }\n  return task;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2477,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * start downloading one resource. if the responding cache exists and isn't expire, will use the cache directly and won't launch a http request; if the number of downloading tasks is bigger than config, the task will be delayed before downloading pool is free.\n * @param resourceUrl the resource's url\n * @param ipAddress if dns prefetch the ip address, will use the ip instead of host\n * @param cookie set the cookie for the download http request\n * @param callback a callback used for notify the download progress and result\n * @return the download task info\n */\npublic DownloadTask download(String resourceUrl,String ipAddress,String cookie,SonicDownloadCallback callback){\n  if (TextUtils.isEmpty(resourceUrl)) {\n    return null;\n  }\nsynchronized (mQueue) {\n    if (mQueue.containsKey(resourceUrl)) {\n      SonicUtils.log(TAG,Log.INFO,\"sub resource download task has been in queue (\" + resourceUrl + \").\");\n      return mQueue.get(resourceUrl);\n    }\n  }\n  final DownloadTask task=new DownloadTask();\n  task.mResourceUrl=resourceUrl;\n  task.mCallbacks.add(callback);\n  task.mCallbacks.add(new SonicDownloadCallback.SimpleDownloadCallback(){\n    @Override public void onFinish(){\n      task.mState.set(DownloadTask.STATE_DOWNLOADED);\n      mHandler.sendEmptyMessage(MSG_DEQUEUE);\n    }\n  }\n);\n  byte[] resourceBytes=mCache.getResourceCache(resourceUrl);\n  if (resourceBytes != null) {\n    task.mInputStream=new ByteArrayInputStream(resourceBytes);\n    task.mRspHeaders=mCache.getResourceCacheHeader(resourceUrl);\n    task.mState.set(DownloadTask.STATE_LOAD_FROM_CACHE);\n    SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n    return task;\n  }\n  task.mIpAddress=ipAddress;\n  task.mCookie=cookie;\n  if (mNumOfDownloadingTask.get() < SonicEngine.getInstance().getConfig().SONIC_MAX_NUM_OF_DOWNLOADING_TASK) {\n    startDownload(task);\n  }\n else {\n    Message enqueueMsg=mHandler.obtainMessage(MSG_ENQUEUE,task);\n    mHandler.sendMessage(enqueueMsg);\n  }\n  return task;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 96
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"load sub resource(\" + resourceUrl + \") from cache.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 184,
    "startColumnNumber" : 42,
    "endLineNumber" : 184,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}