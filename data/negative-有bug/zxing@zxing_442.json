{
  "id" : 442,
  "expression" : "resultTrailer.length()",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/datamatrix/decoder/DecodedBitStreamParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "resultTrailer.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 129,
      "startColumnNumber" : 8,
      "endLineNumber" : 129,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 34
      },
      "nodeContext" : "resultTrailer.length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultTrailer.length() > 0) {\n  result.appendCharacters(resultTrailer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2679,
        "startLineNumber" : 89,
        "startColumnNumber" : 67,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BitSource bits=new BitSource(bytes);\n  ECIStringBuilder result=new ECIStringBuilder(100);\n  StringBuilder resultTrailer=new StringBuilder(0);\n  List<byte[]> byteSegments=new ArrayList<>(1);\n  Mode mode=Mode.ASCII_ENCODE;\n  Set<Integer> fnc1Positions=new HashSet<>();\n  int symbologyModifier;\n  boolean isECIencoded=false;\n  do {\n    if (mode == Mode.ASCII_ENCODE) {\n      mode=decodeAsciiSegment(bits,result,resultTrailer,fnc1Positions);\n    }\n else {\nswitch (mode) {\ncase C40_ENCODE:        decodeC40Segment(bits,result,fnc1Positions);\n      break;\ncase TEXT_ENCODE:    decodeTextSegment(bits,result,fnc1Positions);\n  break;\ncase ANSIX12_ENCODE:decodeAnsiX12Segment(bits,result);\nbreak;\ncase EDIFACT_ENCODE:decodeEdifactSegment(bits,result);\nbreak;\ncase BASE256_ENCODE:decodeBase256Segment(bits,result,byteSegments);\nbreak;\ncase ECI_ENCODE:decodeECISegment(bits,result);\nisECIencoded=true;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nmode=Mode.ASCII_ENCODE;\n}\n}\n while (mode != Mode.PAD_ENCODE && bits.available() > 0);\nif (resultTrailer.length() > 0) {\nresult.appendCharacters(resultTrailer);\n}\nif (isECIencoded) {\nif (fnc1Positions.contains(0) || fnc1Positions.contains(4)) {\nsymbologyModifier=5;\n}\n else if (fnc1Positions.contains(1) || fnc1Positions.contains(5)) {\nsymbologyModifier=6;\n}\n else {\nsymbologyModifier=4;\n}\n}\n else {\nif (fnc1Positions.contains(0) || fnc1Positions.contains(4)) {\nsymbologyModifier=2;\n}\n else if (fnc1Positions.contains(1) || fnc1Positions.contains(5)) {\nsymbologyModifier=3;\n}\n else {\nsymbologyModifier=1;\n}\n}\nreturn new DecoderResult(bytes,result.toString(),byteSegments.isEmpty() ? null : byteSegments,null,symbologyModifier);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2744,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 157,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static DecoderResult decode(byte[] bytes) throws FormatException {\n  BitSource bits=new BitSource(bytes);\n  ECIStringBuilder result=new ECIStringBuilder(100);\n  StringBuilder resultTrailer=new StringBuilder(0);\n  List<byte[]> byteSegments=new ArrayList<>(1);\n  Mode mode=Mode.ASCII_ENCODE;\n  Set<Integer> fnc1Positions=new HashSet<>();\n  int symbologyModifier;\n  boolean isECIencoded=false;\n  do {\n    if (mode == Mode.ASCII_ENCODE) {\n      mode=decodeAsciiSegment(bits,result,resultTrailer,fnc1Positions);\n    }\n else {\nswitch (mode) {\ncase C40_ENCODE:        decodeC40Segment(bits,result,fnc1Positions);\n      break;\ncase TEXT_ENCODE:    decodeTextSegment(bits,result,fnc1Positions);\n  break;\ncase ANSIX12_ENCODE:decodeAnsiX12Segment(bits,result);\nbreak;\ncase EDIFACT_ENCODE:decodeEdifactSegment(bits,result);\nbreak;\ncase BASE256_ENCODE:decodeBase256Segment(bits,result,byteSegments);\nbreak;\ncase ECI_ENCODE:decodeECISegment(bits,result);\nisECIencoded=true;\nbreak;\ndefault:throw FormatException.getFormatInstance();\n}\nmode=Mode.ASCII_ENCODE;\n}\n}\n while (mode != Mode.PAD_ENCODE && bits.available() > 0);\nif (resultTrailer.length() > 0) {\nresult.appendCharacters(resultTrailer);\n}\nif (isECIencoded) {\nif (fnc1Positions.contains(0) || fnc1Positions.contains(4)) {\nsymbologyModifier=5;\n}\n else if (fnc1Positions.contains(1) || fnc1Positions.contains(5)) {\nsymbologyModifier=6;\n}\n else {\nsymbologyModifier=4;\n}\n}\n else {\nif (fnc1Positions.contains(0) || fnc1Positions.contains(4)) {\nsymbologyModifier=2;\n}\n else if (fnc1Positions.contains(1) || fnc1Positions.contains(5)) {\nsymbologyModifier=3;\n}\n else {\nsymbologyModifier=1;\n}\n}\nreturn new DecoderResult(bytes,result.toString(),byteSegments.isEmpty() ? null : byteSegments,null,symbologyModifier);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 34
      },
      "nodeContext" : "resultTrailer.length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 129,
    "startColumnNumber" : 8,
    "endLineNumber" : 129,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}