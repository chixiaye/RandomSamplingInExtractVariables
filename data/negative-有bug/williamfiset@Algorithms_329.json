{
  "id" : 329,
  "expression" : "2",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/ChineseRemainderTheorem.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 98,
      "startColumnNumber" : 28,
      "endLineNumber" : 98,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 98,
        "startColumnNumber" : 19,
        "endLineNumber" : 98,
        "endColumnNumber" : 43
      },
      "nodeContext" : "new long[2][aNew.size()]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 98,
        "startColumnNumber" : 13,
        "endLineNumber" : 98,
        "endColumnNumber" : 43
      },
      "nodeContext" : "res=new long[2][aNew.size()]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 44
      },
      "nodeContext" : "long[][] res=new long[2][aNew.size()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 47,
        "startColumnNumber" : 52,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Long> aNew=new ArrayList<Long>();\n  List<Long> mNew=new ArrayList<Long>();\n  for (int i=0; i < a.length; i++) {\n    List<Long> factors=primeFactorization(m[i]);\n    Collections.sort(factors);\n    ListIterator<Long> iterator=factors.listIterator();\n    while (iterator.hasNext()) {\n      long val=iterator.next();\n      long total=val;\n      while (iterator.hasNext()) {\n        long nextVal=iterator.next();\n        if (nextVal == val) {\n          total*=val;\n        }\n else {\n          iterator.previous();\n          break;\n        }\n      }\n      aNew.add(a[i] % total);\n      mNew.add(total);\n    }\n  }\n  for (int i=0; i < aNew.size(); i++) {\n    for (int j=i + 1; j < aNew.size(); j++) {\n      if (mNew.get(i) % mNew.get(j) == 0 || mNew.get(j) % mNew.get(i) == 0) {\n        if (mNew.get(i) > mNew.get(j)) {\n          if ((aNew.get(i) % mNew.get(j)) == aNew.get(j)) {\n            aNew.remove(j);\n            mNew.remove(j);\n            j--;\n            continue;\n          }\n else           return null;\n        }\n else {\n          if ((aNew.get(j) % mNew.get(i)) == aNew.get(i)) {\n            aNew.remove(i);\n            mNew.remove(i);\n            i--;\n            break;\n          }\n else           return null;\n        }\n      }\n    }\n  }\n  long[][] res=new long[2][aNew.size()];\n  for (int i=0; i < aNew.size(); i++) {\n    res[0][i]=aNew.get(i);\n    res[1][i]=mNew.get(i);\n  }\n  return res;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 317,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1714,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static long[][] reduce(long[] a,long[] m){\n  List<Long> aNew=new ArrayList<Long>();\n  List<Long> mNew=new ArrayList<Long>();\n  for (int i=0; i < a.length; i++) {\n    List<Long> factors=primeFactorization(m[i]);\n    Collections.sort(factors);\n    ListIterator<Long> iterator=factors.listIterator();\n    while (iterator.hasNext()) {\n      long val=iterator.next();\n      long total=val;\n      while (iterator.hasNext()) {\n        long nextVal=iterator.next();\n        if (nextVal == val) {\n          total*=val;\n        }\n else {\n          iterator.previous();\n          break;\n        }\n      }\n      aNew.add(a[i] % total);\n      mNew.add(total);\n    }\n  }\n  for (int i=0; i < aNew.size(); i++) {\n    for (int j=i + 1; j < aNew.size(); j++) {\n      if (mNew.get(i) % mNew.get(j) == 0 || mNew.get(j) % mNew.get(i) == 0) {\n        if (mNew.get(i) > mNew.get(j)) {\n          if ((aNew.get(i) % mNew.get(j)) == aNew.get(j)) {\n            aNew.remove(j);\n            mNew.remove(j);\n            j--;\n            continue;\n          }\n else           return null;\n        }\n else {\n          if ((aNew.get(j) % mNew.get(i)) == aNew.get(i)) {\n            aNew.remove(i);\n            mNew.remove(i);\n            i--;\n            break;\n          }\n else           return null;\n        }\n      }\n    }\n  }\n  long[][] res=new long[2][aNew.size()];\n  for (int i=0; i < aNew.size(); i++) {\n    res[0][i]=aNew.get(i);\n    res[1][i]=mNew.get(i);\n  }\n  return res;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 44
      },
      "nodeContext" : "long[][] res=new long[2][aNew.size()];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 98,
    "startColumnNumber" : 28,
    "endLineNumber" : 98,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}