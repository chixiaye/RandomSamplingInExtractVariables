{
  "id" : 283,
  "expression" : "f.getModifiers()",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "f.getModifiers()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 299,
      "startColumnNumber" : 63,
      "endLineNumber" : 299,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 299,
        "startColumnNumber" : 42,
        "endLineNumber" : 299,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Modifier.isTransient(f.getModifiers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 299,
        "startColumnNumber" : 41,
        "endLineNumber" : 299,
        "endColumnNumber" : 80
      },
      "nodeContext" : "!Modifier.isTransient(f.getModifiers())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 299,
        "startColumnNumber" : 24,
        "endLineNumber" : 299,
        "endColumnNumber" : 80
      },
      "nodeContext" : "useTransients || !Modifier.isTransient(f.getModifiers())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 299,
        "startColumnNumber" : 23,
        "endLineNumber" : 299,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(useTransients || !Modifier.isTransient(f.getModifiers()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 297,
        "startColumnNumber" : 16,
        "endLineNumber" : 300,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 297,
        "startColumnNumber" : 12,
        "endLineNumber" : 311,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n  try {\n    builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n  }\n catch (  RuntimeException|IllegalAccessException ignored) {\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 295,
        "startColumnNumber" : 68,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Field f=fields[i];\n  if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n    try {\n      builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n    }\n catch (    RuntimeException|IllegalAccessException ignored) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < fields.length && builder.isEquals; i++) {\n  Field f=fields[i];\n  if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n    try {\n      builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n    }\n catch (    RuntimeException|IllegalAccessException ignored) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1361,
        "startLineNumber" : 288,
        "startColumnNumber" : 36,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Field[] fields=clazz.getDeclaredFields();\n  List<String> excludedFieldList=excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  for (int i=0; i < fields.length && builder.isEquals; i++) {\n    Field f=fields[i];\n    if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n      try {\n        builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n      }\n catch (      RuntimeException|IllegalAccessException ignored) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2040,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p>Appends the fields and values defined by the given object of the given Class.</p>\n * @param lhs  the left hand object\n * @param rhs  the right hand object\n * @param clazz  the class to append details of\n * @param builder  the builder to append to\n * @param useTransients  whether to test transient fields\n * @param excludeFields  array of field names to exclude from testing\n */\nprivate static boolean reflectionAppend(Object lhs,Object rhs,Class<?> clazz,EqualsBuilder builder,boolean useTransients,String[] excludeFields){\n  Field[] fields=clazz.getDeclaredFields();\n  List<String> excludedFieldList=excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  for (int i=0; i < fields.length && builder.isEquals; i++) {\n    Field f=fields[i];\n    if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n      try {\n        builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n      }\n catch (      RuntimeException|IllegalAccessException ignored) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 299,
        "startColumnNumber" : 23,
        "endLineNumber" : 299,
        "endColumnNumber" : 81
      },
      "nodeContext" : "(useTransients || !Modifier.isTransient(f.getModifiers()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "f.getModifiers()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 300,
      "startColumnNumber" : 43,
      "endLineNumber" : 300,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 300,
        "startColumnNumber" : 25,
        "endLineNumber" : 300,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Modifier.isStatic(f.getModifiers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 300,
        "startColumnNumber" : 24,
        "endLineNumber" : 300,
        "endColumnNumber" : 60
      },
      "nodeContext" : "!Modifier.isStatic(f.getModifiers())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 300,
        "startColumnNumber" : 23,
        "endLineNumber" : 300,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(!Modifier.isStatic(f.getModifiers()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 297,
        "startColumnNumber" : 16,
        "endLineNumber" : 300,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 297,
        "startColumnNumber" : 12,
        "endLineNumber" : 311,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n  try {\n    builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n  }\n catch (  RuntimeException|IllegalAccessException ignored) {\n    return true;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 295,
        "startColumnNumber" : 68,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Field f=fields[i];\n  if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n    try {\n      builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n    }\n catch (    RuntimeException|IllegalAccessException ignored) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 295,
        "startColumnNumber" : 8,
        "endLineNumber" : 312,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < fields.length && builder.isEquals; i++) {\n  Field f=fields[i];\n  if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n    try {\n      builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n    }\n catch (    RuntimeException|IllegalAccessException ignored) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1361,
        "startLineNumber" : 288,
        "startColumnNumber" : 36,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Field[] fields=clazz.getDeclaredFields();\n  List<String> excludedFieldList=excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  for (int i=0; i < fields.length && builder.isEquals; i++) {\n    Field f=fields[i];\n    if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n      try {\n        builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n      }\n catch (      RuntimeException|IllegalAccessException ignored) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2040,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p>Appends the fields and values defined by the given object of the given Class.</p>\n * @param lhs  the left hand object\n * @param rhs  the right hand object\n * @param clazz  the class to append details of\n * @param builder  the builder to append to\n * @param useTransients  whether to test transient fields\n * @param excludeFields  array of field names to exclude from testing\n */\nprivate static boolean reflectionAppend(Object lhs,Object rhs,Class<?> clazz,EqualsBuilder builder,boolean useTransients,String[] excludeFields){\n  Field[] fields=clazz.getDeclaredFields();\n  List<String> excludedFieldList=excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n  MemberAccessor accessor=Plugins.getMemberAccessor();\n  for (int i=0; i < fields.length && builder.isEquals; i++) {\n    Field f=fields[i];\n    if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {\n      try {\n        builder.append(accessor.get(f,lhs),accessor.get(f,rhs));\n      }\n catch (      RuntimeException|IllegalAccessException ignored) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 300,
        "startColumnNumber" : 23,
        "endLineNumber" : 300,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(!Modifier.isStatic(f.getModifiers()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 299,
    "startColumnNumber" : 63,
    "endLineNumber" : 299,
    "endColumnNumber" : 79
  }, {
    "charLength" : 16,
    "startLineNumber" : 300,
    "startColumnNumber" : 43,
    "endLineNumber" : 300,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}