{
  "id" : 73,
  "expression" : "types.length",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/lib/src/main/java/mirror/RefMethod.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "types.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 16,
      "startColumnNumber" : 32,
      "endLineNumber" : 16,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 16,
        "startColumnNumber" : 28,
        "endLineNumber" : 16,
        "endColumnNumber" : 44
      },
      "nodeContext" : "i < types.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 16,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < types.length; i++) {\n  Class<?> clazz=types[i];\n  if (clazz.getClassLoader() == getClass().getClassLoader()) {\n    try {\n      Class.forName(clazz.getName());\n      Class<?> realClass=(Class<?>)clazz.getField(\"TYPE\").get(null);\n      types[i]=realClass;\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 753,
        "startLineNumber" : 14,
        "startColumnNumber" : 59,
        "endLineNumber" : 30,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n  for (int i=0; i < types.length; i++) {\n    Class<?> clazz=types[i];\n    if (clazz.getClassLoader() == getClass().getClassLoader()) {\n      try {\n        Class.forName(clazz.getName());\n        Class<?> realClass=(Class<?>)clazz.getField(\"TYPE\").get(null);\n        types[i]=realClass;\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n  this.method=cls.getDeclaredMethod(field.getName(),types);\n  this.method.setAccessible(true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1881,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (field.isAnnotationPresent(MethodParams.class)) {\n  Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n  for (int i=0; i < types.length; i++) {\n    Class<?> clazz=types[i];\n    if (clazz.getClassLoader() == getClass().getClassLoader()) {\n      try {\n        Class.forName(clazz.getName());\n        Class<?> realClass=(Class<?>)clazz.getField(\"TYPE\").get(null);\n        types[i]=realClass;\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n  this.method=cls.getDeclaredMethod(field.getName(),types);\n  this.method.setAccessible(true);\n}\n else if (field.isAnnotationPresent(MethodReflectParams.class)) {\n  String[] typeNames=field.getAnnotation(MethodReflectParams.class).value();\n  Class<?>[] types=new Class<?>[typeNames.length];\n  for (int i=0; i < typeNames.length; i++) {\n    Class<?> type=getProtoType(typeNames[i]);\n    if (type == null) {\n      try {\n        type=Class.forName(typeNames[i]);\n      }\n catch (      ClassNotFoundException e) {\n        e.printStackTrace();\n      }\n    }\n    types[i]=type;\n  }\n  this.method=cls.getDeclaredMethod(field.getName(),types);\n  this.method.setAccessible(true);\n}\n else {\n  for (  Method method : cls.getDeclaredMethods()) {\n    if (method.getName().equals(field.getName())) {\n      this.method=method;\n      this.method.setAccessible(true);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 276,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2004,
        "startLineNumber" : 13,
        "startColumnNumber" : 77,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (field.isAnnotationPresent(MethodParams.class)) {\n    Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n    for (int i=0; i < types.length; i++) {\n      Class<?> clazz=types[i];\n      if (clazz.getClassLoader() == getClass().getClassLoader()) {\n        try {\n          Class.forName(clazz.getName());\n          Class<?> realClass=(Class<?>)clazz.getField(\"TYPE\").get(null);\n          types[i]=realClass;\n        }\n catch (        Throwable e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    this.method=cls.getDeclaredMethod(field.getName(),types);\n    this.method.setAccessible(true);\n  }\n else   if (field.isAnnotationPresent(MethodReflectParams.class)) {\n    String[] typeNames=field.getAnnotation(MethodReflectParams.class).value();\n    Class<?>[] types=new Class<?>[typeNames.length];\n    for (int i=0; i < typeNames.length; i++) {\n      Class<?> type=getProtoType(typeNames[i]);\n      if (type == null) {\n        try {\n          type=Class.forName(typeNames[i]);\n        }\n catch (        ClassNotFoundException e) {\n          e.printStackTrace();\n        }\n      }\n      types[i]=type;\n    }\n    this.method=cls.getDeclaredMethod(field.getName(),types);\n    this.method.setAccessible(true);\n  }\n else {\n    for (    Method method : cls.getDeclaredMethods()) {\n      if (method.getName().equals(field.getName())) {\n        this.method=method;\n        this.method.setAccessible(true);\n        break;\n      }\n    }\n  }\n  if (this.method == null) {\n    throw new NoSuchMethodException(field.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2077,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RefMethod(Class<?> cls,Field field) throws NoSuchMethodException {\n  if (field.isAnnotationPresent(MethodParams.class)) {\n    Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n    for (int i=0; i < types.length; i++) {\n      Class<?> clazz=types[i];\n      if (clazz.getClassLoader() == getClass().getClassLoader()) {\n        try {\n          Class.forName(clazz.getName());\n          Class<?> realClass=(Class<?>)clazz.getField(\"TYPE\").get(null);\n          types[i]=realClass;\n        }\n catch (        Throwable e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    this.method=cls.getDeclaredMethod(field.getName(),types);\n    this.method.setAccessible(true);\n  }\n else   if (field.isAnnotationPresent(MethodReflectParams.class)) {\n    String[] typeNames=field.getAnnotation(MethodReflectParams.class).value();\n    Class<?>[] types=new Class<?>[typeNames.length];\n    for (int i=0; i < typeNames.length; i++) {\n      Class<?> type=getProtoType(typeNames[i]);\n      if (type == null) {\n        try {\n          type=Class.forName(typeNames[i]);\n        }\n catch (        ClassNotFoundException e) {\n          e.printStackTrace();\n        }\n      }\n      types[i]=type;\n    }\n    this.method=cls.getDeclaredMethod(field.getName(),types);\n    this.method.setAccessible(true);\n  }\n else {\n    for (    Method method : cls.getDeclaredMethods()) {\n      if (method.getName().equals(field.getName())) {\n        this.method=method;\n        this.method.setAccessible(true);\n        break;\n      }\n    }\n  }\n  if (this.method == null) {\n    throw new NoSuchMethodException(field.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 16,
        "startColumnNumber" : 28,
        "endLineNumber" : 16,
        "endColumnNumber" : 44
      },
      "nodeContext" : "i < types.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 16,
    "startColumnNumber" : 32,
    "endLineNumber" : 16,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}