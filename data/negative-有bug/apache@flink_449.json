{
  "id" : 449,
  "expression" : "inputFieldTypes[keyFields[i]]",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/plan/utils/KeySelectorUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inputFieldTypes[keyFields[i]]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 51,
      "startColumnNumber" : 35,
      "endLineNumber" : 51,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 64
      },
      "nodeContext" : "keyFieldTypes[i]=inputFieldTypes[keyFields[i]]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 65
      },
      "nodeContext" : "keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 50,
        "startColumnNumber" : 55,
        "endLineNumber" : 52,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < keyFields.length; ++i) {\n  keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 47,
        "startColumnNumber" : 34,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LogicalType[] inputFieldTypes=rowType.toRowFieldTypes();\n  LogicalType[] keyFieldTypes=new LogicalType[keyFields.length];\n  for (int i=0; i < keyFields.length; ++i) {\n    keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n  }\n  RowType returnType=RowType.of(keyFieldTypes);\n  RowType inputType=rowType.toRowType();\n  GeneratedProjection generatedProjection=ProjectionCodeGenerator.generateProjection(CodeGeneratorContext.apply(new Configuration()),\"KeyProjection\",inputType,returnType,keyFields);\n  InternalTypeInfo<RowData> keyRowType=InternalTypeInfo.of(returnType);\n  return new BinaryRowDataKeySelector(keyRowType,generatedProjection);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1186,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (keyFields.length > 0) {\n  LogicalType[] inputFieldTypes=rowType.toRowFieldTypes();\n  LogicalType[] keyFieldTypes=new LogicalType[keyFields.length];\n  for (int i=0; i < keyFields.length; ++i) {\n    keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n  }\n  RowType returnType=RowType.of(keyFieldTypes);\n  RowType inputType=rowType.toRowType();\n  GeneratedProjection generatedProjection=ProjectionCodeGenerator.generateProjection(CodeGeneratorContext.apply(new Configuration()),\"KeyProjection\",inputType,returnType,keyFields);\n  InternalTypeInfo<RowData> keyRowType=InternalTypeInfo.of(returnType);\n  return new BinaryRowDataKeySelector(keyRowType,generatedProjection);\n}\n else {\n  return EmptyRowDataKeySelector.INSTANCE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1202,
        "startLineNumber" : 46,
        "startColumnNumber" : 64,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (keyFields.length > 0) {\n    LogicalType[] inputFieldTypes=rowType.toRowFieldTypes();\n    LogicalType[] keyFieldTypes=new LogicalType[keyFields.length];\n    for (int i=0; i < keyFields.length; ++i) {\n      keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n    }\n    RowType returnType=RowType.of(keyFieldTypes);\n    RowType inputType=rowType.toRowType();\n    GeneratedProjection generatedProjection=ProjectionCodeGenerator.generateProjection(CodeGeneratorContext.apply(new Configuration()),\"KeyProjection\",inputType,returnType,keyFields);\n    InternalTypeInfo<RowData> keyRowType=InternalTypeInfo.of(returnType);\n    return new BinaryRowDataKeySelector(keyRowType,generatedProjection);\n  }\n else {\n    return EmptyRowDataKeySelector.INSTANCE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create a RowDataKeySelector to extract keys from DataStream which type is  {@link InternalTypeInfo} of {@link RowData}.\n * @param keyFields key fields\n * @param rowType type of DataStream to extract keys\n * @return the RowDataKeySelector to extract keys from DataStream which type is {@link InternalTypeInfo} of {@link RowData}.\n */\npublic static RowDataKeySelector getRowDataSelector(int[] keyFields,InternalTypeInfo<RowData> rowType){\n  if (keyFields.length > 0) {\n    LogicalType[] inputFieldTypes=rowType.toRowFieldTypes();\n    LogicalType[] keyFieldTypes=new LogicalType[keyFields.length];\n    for (int i=0; i < keyFields.length; ++i) {\n      keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n    }\n    RowType returnType=RowType.of(keyFieldTypes);\n    RowType inputType=rowType.toRowType();\n    GeneratedProjection generatedProjection=ProjectionCodeGenerator.generateProjection(CodeGeneratorContext.apply(new Configuration()),\"KeyProjection\",inputType,returnType,keyFields);\n    InternalTypeInfo<RowData> keyRowType=InternalTypeInfo.of(returnType);\n    return new BinaryRowDataKeySelector(keyRowType,generatedProjection);\n  }\n else {\n    return EmptyRowDataKeySelector.INSTANCE;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 51,
        "endColumnNumber" : 65
      },
      "nodeContext" : "keyFieldTypes[i]=inputFieldTypes[keyFields[i]];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.flink.table.types.logical.LogicalType"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 51,
    "startColumnNumber" : 35,
    "endLineNumber" : 51,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}