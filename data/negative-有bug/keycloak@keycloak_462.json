{
  "id" : 462,
  "expression" : "Details.USERNAME",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/UserInfoTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Details.USERNAME",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 268,
      "startColumnNumber" : 28,
      "endLineNumber" : 268,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 268,
        "endColumnNumber" : 68
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 269,
        "endColumnNumber" : 63
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 270,
        "endColumnNumber" : 84
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 34
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 35
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 47,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1868,
        "startLineNumber" : 260,
        "startColumnNumber" : 12,
        "endLineNumber" : 295,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  AccessTokenResponse accessTokenResponse=executeGrantAccessTokenRequest(client);\n  Response response=UserInfoClientUtil.executeUserInfoRequest_getMethod(client,accessTokenResponse.getToken());\n  events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent();\n  PublicKey publicKey=PemUtils.decodePublicKey(ApiUtil.findActiveSigningKey(adminClient.realm(\"test\")).getPublicKey());\n  Assert.assertEquals(200,response.getStatus());\n  Assert.assertEquals(response.getHeaderString(HttpHeaders.CONTENT_TYPE),MediaType.APPLICATION_JWT);\n  String signedResponse=response.readEntity(String.class);\n  response.close();\n  JWSInput jwsInput=new JWSInput(signedResponse);\n  Assert.assertTrue(RSAProvider.verify(jwsInput,publicKey));\n  UserInfo userInfo=JsonSerialization.readValue(jwsInput.getContent(),UserInfo.class);\n  Assert.assertNotNull(userInfo);\n  Assert.assertNotNull(userInfo.getSubject());\n  Assert.assertEquals(\"test-user@localhost\",userInfo.getEmail());\n  Assert.assertEquals(\"test-user@localhost\",userInfo.getPreferredUsername());\n  Assert.assertTrue(userInfo.hasAudience(\"test-app\"));\n  String expectedIssuer=Urls.realmIssuer(new URI(AUTH_SERVER_ROOT),\"test\");\n  Assert.assertEquals(expectedIssuer,userInfo.getIssuer());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1920,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 297,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  AccessTokenResponse accessTokenResponse=executeGrantAccessTokenRequest(client);\n  Response response=UserInfoClientUtil.executeUserInfoRequest_getMethod(client,accessTokenResponse.getToken());\n  events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent();\n  PublicKey publicKey=PemUtils.decodePublicKey(ApiUtil.findActiveSigningKey(adminClient.realm(\"test\")).getPublicKey());\n  Assert.assertEquals(200,response.getStatus());\n  Assert.assertEquals(response.getHeaderString(HttpHeaders.CONTENT_TYPE),MediaType.APPLICATION_JWT);\n  String signedResponse=response.readEntity(String.class);\n  response.close();\n  JWSInput jwsInput=new JWSInput(signedResponse);\n  Assert.assertTrue(RSAProvider.verify(jwsInput,publicKey));\n  UserInfo userInfo=JsonSerialization.readValue(jwsInput.getContent(),UserInfo.class);\n  Assert.assertNotNull(userInfo);\n  Assert.assertNotNull(userInfo.getSubject());\n  Assert.assertEquals(\"test-user@localhost\",userInfo.getEmail());\n  Assert.assertEquals(\"test-user@localhost\",userInfo.getPreferredUsername());\n  Assert.assertTrue(userInfo.hasAudience(\"test-app\"));\n  String expectedIssuer=Urls.realmIssuer(new URI(AUTH_SERVER_ROOT),\"test\");\n  Assert.assertEquals(expectedIssuer,userInfo.getIssuer());\n}\n  finally {\n  client.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 216,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2612,
        "startLineNumber" : 250,
        "startColumnNumber" : 61,
        "endLineNumber" : 302,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUserInfoSignedResponseAlg(Algorithm.RS256);\n  clientResource.update(clientRep);\n  Client client=AdminClientUtil.createResteasyClient();\n  try {\n    AccessTokenResponse accessTokenResponse=executeGrantAccessTokenRequest(client);\n    Response response=UserInfoClientUtil.executeUserInfoRequest_getMethod(client,accessTokenResponse.getToken());\n    events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent();\n    PublicKey publicKey=PemUtils.decodePublicKey(ApiUtil.findActiveSigningKey(adminClient.realm(\"test\")).getPublicKey());\n    Assert.assertEquals(200,response.getStatus());\n    Assert.assertEquals(response.getHeaderString(HttpHeaders.CONTENT_TYPE),MediaType.APPLICATION_JWT);\n    String signedResponse=response.readEntity(String.class);\n    response.close();\n    JWSInput jwsInput=new JWSInput(signedResponse);\n    Assert.assertTrue(RSAProvider.verify(jwsInput,publicKey));\n    UserInfo userInfo=JsonSerialization.readValue(jwsInput.getContent(),UserInfo.class);\n    Assert.assertNotNull(userInfo);\n    Assert.assertNotNull(userInfo.getSubject());\n    Assert.assertEquals(\"test-user@localhost\",userInfo.getEmail());\n    Assert.assertEquals(\"test-user@localhost\",userInfo.getPreferredUsername());\n    Assert.assertTrue(userInfo.hasAudience(\"test-app\"));\n    String expectedIssuer=Urls.realmIssuer(new URI(AUTH_SERVER_ROOT),\"test\");\n    Assert.assertEquals(expectedIssuer,userInfo.getIssuer());\n  }\n  finally {\n    client.close();\n  }\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUserInfoSignedResponseAlg(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2679,
        "startLineNumber" : 249,
        "startColumnNumber" : 4,
        "endLineNumber" : 302,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSuccessSignedResponse() throws Exception {\n  ClientResource clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  ClientRepresentation clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUserInfoSignedResponseAlg(Algorithm.RS256);\n  clientResource.update(clientRep);\n  Client client=AdminClientUtil.createResteasyClient();\n  try {\n    AccessTokenResponse accessTokenResponse=executeGrantAccessTokenRequest(client);\n    Response response=UserInfoClientUtil.executeUserInfoRequest_getMethod(client,accessTokenResponse.getToken());\n    events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\").detail(Details.SIGNATURE_REQUIRED,\"true\").detail(Details.SIGNATURE_ALGORITHM,Algorithm.RS256.toString()).assertEvent();\n    PublicKey publicKey=PemUtils.decodePublicKey(ApiUtil.findActiveSigningKey(adminClient.realm(\"test\")).getPublicKey());\n    Assert.assertEquals(200,response.getStatus());\n    Assert.assertEquals(response.getHeaderString(HttpHeaders.CONTENT_TYPE),MediaType.APPLICATION_JWT);\n    String signedResponse=response.readEntity(String.class);\n    response.close();\n    JWSInput jwsInput=new JWSInput(signedResponse);\n    Assert.assertTrue(RSAProvider.verify(jwsInput,publicKey));\n    UserInfo userInfo=JsonSerialization.readValue(jwsInput.getContent(),UserInfo.class);\n    Assert.assertNotNull(userInfo);\n    Assert.assertNotNull(userInfo.getSubject());\n    Assert.assertEquals(\"test-user@localhost\",userInfo.getEmail());\n    Assert.assertEquals(\"test-user@localhost\",userInfo.getPreferredUsername());\n    Assert.assertTrue(userInfo.hasAudience(\"test-app\"));\n    String expectedIssuer=Urls.realmIssuer(new URI(AUTH_SERVER_ROOT),\"test\");\n    Assert.assertEquals(expectedIssuer,userInfo.getIssuer());\n  }\n  finally {\n    client.close();\n  }\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUserInfoSignedResponseAlg(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 265,
        "startColumnNumber" : 12,
        "endLineNumber" : 268,
        "endColumnNumber" : 68
      },
      "nodeContext" : "events.expect(EventType.USER_INFO_REQUEST).session(Matchers.notNullValue(String.class)).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN).detail(Details.USERNAME,\"test-user@localhost\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 268,
    "startColumnNumber" : 28,
    "endLineNumber" : 268,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}