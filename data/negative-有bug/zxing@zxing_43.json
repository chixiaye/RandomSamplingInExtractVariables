{
  "id" : 43,
  "expression" : "patternLength",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/Code39Reader.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "patternLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 186,
      "startColumnNumber" : 31,
      "endLineNumber" : 186,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 186,
        "startColumnNumber" : 31,
        "endLineNumber" : 186,
        "endColumnNumber" : 48
      },
      "nodeContext" : "patternLength - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 48
      },
      "nodeContext" : "counterPosition == patternLength - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (counterPosition == patternLength - 1) {\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n else {\n  counterPosition++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 185,
        "startColumnNumber" : 13,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (row.get(i) ^ isWhite) {\n  counters[counterPosition]++;\n}\n else {\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 182,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=rowOffset; i < width; i++) {\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 173,
        "startColumnNumber" : 98,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findAsteriskPattern(BitArray row,int[] counters) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 186,
        "startColumnNumber" : 12,
        "endLineNumber" : 186,
        "endColumnNumber" : 48
      },
      "nodeContext" : "counterPosition == patternLength - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "patternLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 194,
      "startColumnNumber" : 53,
      "endLineNumber" : 194,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 194,
        "startColumnNumber" : 53,
        "endLineNumber" : 194,
        "endColumnNumber" : 70
      },
      "nodeContext" : "patternLength - 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 194,
        "endColumnNumber" : 71
      },
      "nodeContext" : "System.arraycopy(counters,2,counters,0,patternLength - 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 194,
        "endColumnNumber" : 72
      },
      "nodeContext" : "System.arraycopy(counters,2,counters,0,patternLength - 2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 186,
        "startColumnNumber" : 50,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (counterPosition == patternLength - 1) {\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n else {\n  counterPosition++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 185,
        "startColumnNumber" : 13,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (row.get(i) ^ isWhite) {\n  counters[counterPosition]++;\n}\n else {\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 182,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=rowOffset; i < width; i++) {\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 173,
        "startColumnNumber" : 98,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findAsteriskPattern(BitArray row,int[] counters) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 194,
        "startColumnNumber" : 10,
        "endLineNumber" : 194,
        "endColumnNumber" : 72
      },
      "nodeContext" : "System.arraycopy(counters,2,counters,0,patternLength - 2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "patternLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 195,
      "startColumnNumber" : 19,
      "endLineNumber" : 195,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 195,
        "startColumnNumber" : 19,
        "endLineNumber" : 195,
        "endColumnNumber" : 36
      },
      "nodeContext" : "patternLength - 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 195,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 37
      },
      "nodeContext" : "counters[patternLength - 2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 195,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 41
      },
      "nodeContext" : "counters[patternLength - 2]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 195,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 42
      },
      "nodeContext" : "counters[patternLength - 2]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 186,
        "startColumnNumber" : 50,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (counterPosition == patternLength - 1) {\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n else {\n  counterPosition++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 185,
        "startColumnNumber" : 13,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (row.get(i) ^ isWhite) {\n  counters[counterPosition]++;\n}\n else {\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 182,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=rowOffset; i < width; i++) {\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 173,
        "startColumnNumber" : 98,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findAsteriskPattern(BitArray row,int[] counters) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 195,
        "startColumnNumber" : 10,
        "endLineNumber" : 195,
        "endColumnNumber" : 42
      },
      "nodeContext" : "counters[patternLength - 2]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "patternLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 196,
      "startColumnNumber" : 19,
      "endLineNumber" : 196,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 196,
        "startColumnNumber" : 19,
        "endLineNumber" : 196,
        "endColumnNumber" : 36
      },
      "nodeContext" : "patternLength - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 37
      },
      "nodeContext" : "counters[patternLength - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 41
      },
      "nodeContext" : "counters[patternLength - 1]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 42
      },
      "nodeContext" : "counters[patternLength - 1]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 186,
        "startColumnNumber" : 50,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (counterPosition == patternLength - 1) {\n  if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n    if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n      return new int[]{patternStart,i};\n    }\n  }\n  patternStart+=counters[0] + counters[1];\n  System.arraycopy(counters,2,counters,0,patternLength - 2);\n  counters[patternLength - 2]=0;\n  counters[patternLength - 1]=0;\n  counterPosition--;\n}\n else {\n  counterPosition++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 185,
        "startColumnNumber" : 13,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (row.get(i) ^ isWhite) {\n  counters[counterPosition]++;\n}\n else {\n  if (counterPosition == patternLength - 1) {\n    if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n      if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n        return new int[]{patternStart,i};\n      }\n    }\n    patternStart+=counters[0] + counters[1];\n    System.arraycopy(counters,2,counters,0,patternLength - 2);\n    counters[patternLength - 2]=0;\n    counters[patternLength - 1]=0;\n    counterPosition--;\n  }\n else {\n    counterPosition++;\n  }\n  counters[counterPosition]=1;\n  isWhite=!isWhite;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 111,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 182,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=rowOffset; i < width; i++) {\n  if (row.get(i) ^ isWhite) {\n    counters[counterPosition]++;\n  }\n else {\n    if (counterPosition == patternLength - 1) {\n      if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n        if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n          return new int[]{patternStart,i};\n        }\n      }\n      patternStart+=counters[0] + counters[1];\n      System.arraycopy(counters,2,counters,0,patternLength - 2);\n      counters[patternLength - 2]=0;\n      counters[patternLength - 1]=0;\n      counterPosition--;\n    }\n else {\n      counterPosition++;\n    }\n    counters[counterPosition]=1;\n    isWhite=!isWhite;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 173,
        "startColumnNumber" : 98,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 173,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] findAsteriskPattern(BitArray row,int[] counters) throws NotFoundException {\n  int width=row.getSize();\n  int rowOffset=row.getNextSet(0);\n  int counterPosition=0;\n  int patternStart=rowOffset;\n  boolean isWhite=false;\n  int patternLength=counters.length;\n  for (int i=rowOffset; i < width; i++) {\n    if (row.get(i) ^ isWhite) {\n      counters[counterPosition]++;\n    }\n else {\n      if (counterPosition == patternLength - 1) {\n        if (toNarrowWidePattern(counters) == ASTERISK_ENCODING) {\n          if (row.isRange(Math.max(0,patternStart - ((i - patternStart) >> 1)),patternStart,false)) {\n            return new int[]{patternStart,i};\n          }\n        }\n        patternStart+=counters[0] + counters[1];\n        System.arraycopy(counters,2,counters,0,patternLength - 2);\n        counters[patternLength - 2]=0;\n        counters[patternLength - 1]=0;\n        counterPosition--;\n      }\n else {\n        counterPosition++;\n      }\n      counters[counterPosition]=1;\n      isWhite=!isWhite;\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 196,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 42
      },
      "nodeContext" : "counters[patternLength - 1]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 186,
    "startColumnNumber" : 31,
    "endLineNumber" : 186,
    "endColumnNumber" : 44
  }, {
    "charLength" : 13,
    "startLineNumber" : 194,
    "startColumnNumber" : 53,
    "endLineNumber" : 194,
    "endColumnNumber" : 66
  }, {
    "charLength" : 13,
    "startLineNumber" : 195,
    "startColumnNumber" : 19,
    "endLineNumber" : 195,
    "endColumnNumber" : 32
  }, {
    "charLength" : 13,
    "startLineNumber" : 196,
    "startColumnNumber" : 19,
    "endLineNumber" : 196,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}