{
  "id" : 342,
  "expression" : "\" \"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/delombok/lombok/delombok/DelombokApp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 75,
      "startColumnNumber" : 21,
      "endLineNumber" : 75,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 25
      },
      "nodeContext" : "arg.contains(\" \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (arg.contains(\" \")) {\n  sb.append('\"').append(arg).append('\"');\n}\n else {\n  sb.append(arg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 73,
        "startColumnNumber" : 27,
        "endLineNumber" : 80,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (sb.length() > 0)   sb.append(' ');\n  if (arg.contains(\" \")) {\n    sb.append('\"').append(arg).append('\"');\n  }\n else {\n    sb.append(arg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 73,
        "startColumnNumber" : 3,
        "endLineNumber" : 80,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (String arg : args) {\n  if (sb.length() > 0)   sb.append(' ');\n  if (arg.contains(\" \")) {\n    sb.append('\"').append(arg).append('\"');\n  }\n else {\n    sb.append(arg);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String examplePath=\"/path/to/tools.jar\";\n  if (File.separator.equals(\"\\\\\"))   examplePath=\"C:\\\\path\\\\to\\\\tools.jar\";\n  StringBuilder sb=new StringBuilder();\n  for (  String arg : args) {\n    if (sb.length() > 0)     sb.append(' ');\n    if (arg.contains(\" \")) {\n      sb.append('\"').append(arg).append('\"');\n    }\n else {\n      sb.append(arg);\n    }\n  }\n  System.err.printf(\"Can't find tools.jar. Rerun delombok as: java -cp lombok.jar%1$s%2$s lombok.core.Main delombok %3$s\\n\",File.pathSeparator,examplePath,sb.toString());\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 582,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (toolsJar == null) {\n  String examplePath=\"/path/to/tools.jar\";\n  if (File.separator.equals(\"\\\\\"))   examplePath=\"C:\\\\path\\\\to\\\\tools.jar\";\n  StringBuilder sb=new StringBuilder();\n  for (  String arg : args) {\n    if (sb.length() > 0)     sb.append(' ');\n    if (arg.contains(\" \")) {\n      sb.append('\"').append(arg).append('\"');\n    }\n else {\n      sb.append(arg);\n    }\n  }\n  System.err.printf(\"Can't find tools.jar. Rerun delombok as: java -cp lombok.jar%1$s%2$s lombok.core.Main delombok %3$s\\n\",File.pathSeparator,examplePath,sb.toString());\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3297,
        "startLineNumber" : 66,
        "startColumnNumber" : 73,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final File toolsJar=findToolsJar();\n  if (toolsJar == null) {\n    String examplePath=\"/path/to/tools.jar\";\n    if (File.separator.equals(\"\\\\\"))     examplePath=\"C:\\\\path\\\\to\\\\tools.jar\";\n    StringBuilder sb=new StringBuilder();\n    for (    String arg : args) {\n      if (sb.length() > 0)       sb.append(' ');\n      if (arg.contains(\" \")) {\n        sb.append('\"').append(arg).append('\"');\n      }\n else {\n        sb.append(arg);\n      }\n    }\n    System.err.printf(\"Can't find tools.jar. Rerun delombok as: java -cp lombok.jar%1$s%2$s lombok.core.Main delombok %3$s\\n\",File.pathSeparator,examplePath,sb.toString());\n    return null;\n  }\n  final JarFile toolsJarFile=new JarFile(toolsJar);\n  ClassLoader loader=new ClassLoader(){\n    private Class<?> loadStreamAsClass(    String name,    boolean resolve,    InputStream in) throws ClassNotFoundException {\n      try {\n        try {\n          byte[] b=new byte[65536];\n          ByteArrayOutputStream out=new ByteArrayOutputStream();\n          while (true) {\n            int r=in.read(b);\n            if (r == -1)             break;\n            out.write(b,0,r);\n          }\n          in.close();\n          byte[] data=out.toByteArray();\n          Class<?> c=defineClass(name,data,0,data.length);\n          if (resolve)           resolveClass(c);\n          return c;\n        }\n  finally {\n          in.close();\n        }\n      }\n catch (      IOException e2) {\n        throw new ClassNotFoundException(name,e2);\n      }\n    }\n    @Override protected synchronized Class<?> loadClass(    String name,    boolean resolve) throws ClassNotFoundException {\n      String rawName=name.replace(\".\",\"/\") + \".class\";\n      JarEntry entry=toolsJarFile.getJarEntry(rawName);\n      if (entry == null) {\n        if (name.startsWith(\"lombok.\"))         return loadStreamAsClass(name,resolve,super.getResourceAsStream(rawName));\n        return super.loadClass(name,resolve);\n      }\n      try {\n        return loadStreamAsClass(name,resolve,toolsJarFile.getInputStream(entry));\n      }\n catch (      IOException e2) {\n        throw new ClassNotFoundException(name,e2);\n      }\n    }\n    @Override public URL getResource(    String name){\n      JarEntry entry=toolsJarFile.getJarEntry(name);\n      if (entry == null)       return super.getResource(name);\n      try {\n        return new URL(\"jar:file:\" + toolsJar.getAbsolutePath() + \"!\"+ name);\n      }\n catch (      MalformedURLException ignore) {\n        return null;\n      }\n    }\n    @Override public Enumeration<URL> getResources(    final String name) throws IOException {\n      JarEntry entry=toolsJarFile.getJarEntry(name);\n      final Enumeration<URL> parent=super.getResources(name);\n      if (entry == null)       return super.getResources(name);\n      return new Enumeration<URL>(){\n        private boolean first=false;\n        @Override public boolean hasMoreElements(){\n          return !first || parent.hasMoreElements();\n        }\n        @Override public URL nextElement(){\n          if (!first) {\n            first=true;\n            try {\n              return new URL(\"jar:file:\" + toolsJar.getAbsolutePath() + \"!\"+ name);\n            }\n catch (            MalformedURLException ignore) {\n              return parent.nextElement();\n            }\n          }\n          return parent.nextElement();\n        }\n      }\n;\n    }\n  }\n;\n  return loader.loadClass(\"lombok.delombok.Delombok\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 496,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3369,
        "startLineNumber" : 66,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static Class<?> loadDelombok(List<String> args) throws Exception {\n  final File toolsJar=findToolsJar();\n  if (toolsJar == null) {\n    String examplePath=\"/path/to/tools.jar\";\n    if (File.separator.equals(\"\\\\\"))     examplePath=\"C:\\\\path\\\\to\\\\tools.jar\";\n    StringBuilder sb=new StringBuilder();\n    for (    String arg : args) {\n      if (sb.length() > 0)       sb.append(' ');\n      if (arg.contains(\" \")) {\n        sb.append('\"').append(arg).append('\"');\n      }\n else {\n        sb.append(arg);\n      }\n    }\n    System.err.printf(\"Can't find tools.jar. Rerun delombok as: java -cp lombok.jar%1$s%2$s lombok.core.Main delombok %3$s\\n\",File.pathSeparator,examplePath,sb.toString());\n    return null;\n  }\n  final JarFile toolsJarFile=new JarFile(toolsJar);\n  ClassLoader loader=new ClassLoader(){\n    private Class<?> loadStreamAsClass(    String name,    boolean resolve,    InputStream in) throws ClassNotFoundException {\n      try {\n        try {\n          byte[] b=new byte[65536];\n          ByteArrayOutputStream out=new ByteArrayOutputStream();\n          while (true) {\n            int r=in.read(b);\n            if (r == -1)             break;\n            out.write(b,0,r);\n          }\n          in.close();\n          byte[] data=out.toByteArray();\n          Class<?> c=defineClass(name,data,0,data.length);\n          if (resolve)           resolveClass(c);\n          return c;\n        }\n  finally {\n          in.close();\n        }\n      }\n catch (      IOException e2) {\n        throw new ClassNotFoundException(name,e2);\n      }\n    }\n    @Override protected synchronized Class<?> loadClass(    String name,    boolean resolve) throws ClassNotFoundException {\n      String rawName=name.replace(\".\",\"/\") + \".class\";\n      JarEntry entry=toolsJarFile.getJarEntry(rawName);\n      if (entry == null) {\n        if (name.startsWith(\"lombok.\"))         return loadStreamAsClass(name,resolve,super.getResourceAsStream(rawName));\n        return super.loadClass(name,resolve);\n      }\n      try {\n        return loadStreamAsClass(name,resolve,toolsJarFile.getInputStream(entry));\n      }\n catch (      IOException e2) {\n        throw new ClassNotFoundException(name,e2);\n      }\n    }\n    @Override public URL getResource(    String name){\n      JarEntry entry=toolsJarFile.getJarEntry(name);\n      if (entry == null)       return super.getResource(name);\n      try {\n        return new URL(\"jar:file:\" + toolsJar.getAbsolutePath() + \"!\"+ name);\n      }\n catch (      MalformedURLException ignore) {\n        return null;\n      }\n    }\n    @Override public Enumeration<URL> getResources(    final String name) throws IOException {\n      JarEntry entry=toolsJarFile.getJarEntry(name);\n      final Enumeration<URL> parent=super.getResources(name);\n      if (entry == null)       return super.getResources(name);\n      return new Enumeration<URL>(){\n        private boolean first=false;\n        @Override public boolean hasMoreElements(){\n          return !first || parent.hasMoreElements();\n        }\n        @Override public URL nextElement(){\n          if (!first) {\n            first=true;\n            try {\n              return new URL(\"jar:file:\" + toolsJar.getAbsolutePath() + \"!\"+ name);\n            }\n catch (            MalformedURLException ignore) {\n              return parent.nextElement();\n            }\n          }\n          return parent.nextElement();\n        }\n      }\n;\n    }\n  }\n;\n  return loader.loadClass(\"lombok.delombok.Delombok\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 513,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 25
      },
      "nodeContext" : "arg.contains(\" \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 75,
    "startColumnNumber" : 21,
    "endLineNumber" : 75,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}