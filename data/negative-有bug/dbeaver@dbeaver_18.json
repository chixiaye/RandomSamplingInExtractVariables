{
  "id" : 18,
  "expression" : "possibleChars.indexOf(ch) == -1",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/contentassist/StringContentProposalProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "possibleChars.indexOf(ch) == -1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 37,
      "startColumnNumber" : 50,
      "endLineNumber" : 37,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 81
      },
      "nodeContext" : "!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 40,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1) {\n  startPos=i + 1;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 35,
        "startColumnNumber" : 48,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char ch=Character.toUpperCase(contents.charAt(i));\n  if (!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1) {\n    startPos=i + 1;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=position - 1; i >= 0; i--) {\n  char ch=Character.toUpperCase(contents.charAt(i));\n  if (!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1) {\n    startPos=i + 1;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1332,
        "startLineNumber" : 29,
        "startColumnNumber" : 74,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (stopPropose && position < 2) {\n    stopPropose=false;\n  }\n  List<ContentProposal> list=new ArrayList<>();\n  int startPos=0;\n  for (int i=position - 1; i >= 0; i--) {\n    char ch=Character.toUpperCase(contents.charAt(i));\n    if (!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1) {\n      startPos=i + 1;\n      break;\n    }\n  }\n  Character lastChar=null;\n  if (contents.length() > 0) {\n    lastChar=contents.charAt(contents.length() - 1);\n  }\n  if (lastChar != null && !Character.isLetterOrDigit(lastChar) && lastChar != '_' && lastChar != ' ' && constrainProposalList) {\n    stopPropose=true;\n    return new IContentProposal[0];\n  }\n  if (stopPropose && position > 1) {\n    return new IContentProposal[0];\n  }\n  String word=contents.substring(startPos,position);\n  for (  String proposal : proposals) {\n    if (proposal.length() >= word.length() && proposal.substring(0,word.length()).equalsIgnoreCase(word)) {\n      list.add(new ContentProposal(proposal));\n    }\n  }\n  return list.toArray(new IContentProposal[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public IContentProposal[] getProposals(String contents,int position){\n  if (stopPropose && position < 2) {\n    stopPropose=false;\n  }\n  List<ContentProposal> list=new ArrayList<>();\n  int startPos=0;\n  for (int i=position - 1; i >= 0; i--) {\n    char ch=Character.toUpperCase(contents.charAt(i));\n    if (!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1) {\n      startPos=i + 1;\n      break;\n    }\n  }\n  Character lastChar=null;\n  if (contents.length() > 0) {\n    lastChar=contents.charAt(contents.length() - 1);\n  }\n  if (lastChar != null && !Character.isLetterOrDigit(lastChar) && lastChar != '_' && lastChar != ' ' && constrainProposalList) {\n    stopPropose=true;\n    return new IContentProposal[0];\n  }\n  if (stopPropose && position > 1) {\n    return new IContentProposal[0];\n  }\n  String word=contents.substring(startPos,position);\n  for (  String proposal : proposals) {\n    if (proposal.length() >= word.length() && proposal.substring(0,word.length()).equalsIgnoreCase(word)) {\n      list.add(new ContentProposal(proposal));\n    }\n  }\n  return list.toArray(new IContentProposal[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 37,
        "endColumnNumber" : 81
      },
      "nodeContext" : "!Character.isLetterOrDigit(ch) && possibleChars.indexOf(ch) == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 37,
    "startColumnNumber" : 50,
    "endLineNumber" : 37,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}