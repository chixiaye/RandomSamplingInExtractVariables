{
  "id" : 100,
  "expression" : "Schedulers",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/observable/ObservableErrorHandlingTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Schedulers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 94,
      "startColumnNumber" : 20,
      "endLineNumber" : 94,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Schedulers.newThread()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 43
      },
      "nodeContext" : "o.observeOn(Schedulers.newThread())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 32
      },
      "nodeContext" : "o.observeOn(Schedulers.newThread()).safeSubscribe(observer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "o.observeOn(Schedulers.newThread()).safeSubscribe(observer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 70,
        "startColumnNumber" : 74,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicReference<Throwable> caughtError=new AtomicReference<Throwable>();\n  Observable<Long> o=Observable.interval(50,TimeUnit.MILLISECONDS);\n  Observer<Long> observer=new DefaultObserver<Long>(){\n    @Override public void onComplete(){\n      System.out.println(\"completed\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(\"error: \" + e);\n      caughtError.set(e);\n      latch.countDown();\n    }\n    @Override public void onNext(    Long args){\n      throw new RuntimeException(\"forced failure\");\n    }\n  }\n;\n  o.observeOn(Schedulers.newThread()).safeSubscribe(observer);\n  latch.await(2000,TimeUnit.MILLISECONDS);\n  assertNotNull(caughtError.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that an error from a user provided Observer.onNext is handled and emitted to the onError even when done across thread boundaries with observeOn\n * @throws InterruptedException if the test is interrupted\n */\n@Test public void testOnNextErrorAcrossThread() throws InterruptedException {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicReference<Throwable> caughtError=new AtomicReference<Throwable>();\n  Observable<Long> o=Observable.interval(50,TimeUnit.MILLISECONDS);\n  Observer<Long> observer=new DefaultObserver<Long>(){\n    @Override public void onComplete(){\n      System.out.println(\"completed\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      System.out.println(\"error: \" + e);\n      caughtError.set(e);\n      latch.countDown();\n    }\n    @Override public void onNext(    Long args){\n      throw new RuntimeException(\"forced failure\");\n    }\n  }\n;\n  o.observeOn(Schedulers.newThread()).safeSubscribe(observer);\n  latch.await(2000,TimeUnit.MILLISECONDS);\n  assertNotNull(caughtError.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 43
      },
      "nodeContext" : "o.observeOn(Schedulers.newThread())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.schedulers.Schedulers"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 94,
    "startColumnNumber" : 20,
    "endLineNumber" : 94,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}