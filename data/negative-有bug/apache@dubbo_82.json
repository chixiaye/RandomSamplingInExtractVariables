{
  "id" : 82,
  "expression" : "ServiceBean.class",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceClassPostProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServiceBean.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 394,
      "startColumnNumber" : 59,
      "endLineNumber" : 394,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 394,
        "startColumnNumber" : 40,
        "endLineNumber" : 394,
        "endColumnNumber" : 77
      },
      "nodeContext" : "rootBeanDefinition(ServiceBean.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 394,
        "startColumnNumber" : 30,
        "endLineNumber" : 394,
        "endColumnNumber" : 77
      },
      "nodeContext" : "builder=rootBeanDefinition(ServiceBean.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 78
      },
      "nodeContext" : "BeanDefinitionBuilder builder=rootBeanDefinition(ServiceBean.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3667,
        "startLineNumber" : 392,
        "startColumnNumber" : 95,
        "endLineNumber" : 476,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BeanDefinitionBuilder builder=rootBeanDefinition(ServiceBean.class);\n  AbstractBeanDefinition beanDefinition=builder.getBeanDefinition();\n  MutablePropertyValues propertyValues=beanDefinition.getPropertyValues();\n  String[] ignoreAttributeNames=of(\"provider\",\"monitor\",\"application\",\"module\",\"registry\",\"protocol\",\"interface\",\"interfaceName\",\"parameters\");\n  propertyValues.addPropertyValues(new AnnotationPropertyValuesAdapter(serviceAnnotation,environment,ignoreAttributeNames));\n  builder.addPropertyValue(\"id\",beanName);\n  addPropertyReference(builder,\"ref\",annotatedServiceBeanName);\n  builder.addPropertyValue(\"interface\",interfaceClass.getName());\n  builder.addPropertyValue(\"parameters\",convertParameters(serviceAnnotationAttributes.getStringArray(\"parameters\")));\n  List<MethodConfig> methodConfigs=convertMethodConfigs(serviceAnnotationAttributes.get(\"methods\"));\n  if (!methodConfigs.isEmpty()) {\n    builder.addPropertyValue(\"methods\",methodConfigs);\n  }\n  String providerConfigBeanName=serviceAnnotationAttributes.getString(\"provider\");\n  if (StringUtils.hasText(providerConfigBeanName)) {\n    addPropertyReference(builder,\"provider\",providerConfigBeanName);\n  }\n  String monitorConfigBeanName=serviceAnnotationAttributes.getString(\"monitor\");\n  if (StringUtils.hasText(monitorConfigBeanName)) {\n    addPropertyReference(builder,\"monitor\",monitorConfigBeanName);\n  }\n  String applicationConfigBeanName=serviceAnnotationAttributes.getString(\"application\");\n  if (StringUtils.hasText(applicationConfigBeanName)) {\n    addPropertyReference(builder,\"application\",applicationConfigBeanName);\n  }\n  String moduleConfigBeanName=serviceAnnotationAttributes.getString(\"module\");\n  if (StringUtils.hasText(moduleConfigBeanName)) {\n    addPropertyReference(builder,\"module\",moduleConfigBeanName);\n  }\n  String[] registryConfigBeanNames=serviceAnnotationAttributes.getStringArray(\"registry\");\n  List<RuntimeBeanReference> registryRuntimeBeanReferences=toRuntimeBeanReferences(registryConfigBeanNames);\n  if (!registryRuntimeBeanReferences.isEmpty()) {\n    builder.addPropertyValue(\"registries\",registryRuntimeBeanReferences);\n  }\n  String[] protocolConfigBeanNames=serviceAnnotationAttributes.getStringArray(\"protocol\");\n  List<RuntimeBeanReference> protocolRuntimeBeanReferences=toRuntimeBeanReferences(protocolConfigBeanNames);\n  if (!protocolRuntimeBeanReferences.isEmpty()) {\n    builder.addPropertyValue(\"protocols\",protocolRuntimeBeanReferences);\n  }\n  return builder.getBeanDefinition();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4360,
        "startLineNumber" : 377,
        "startColumnNumber" : 4,
        "endLineNumber" : 476,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Build the  {@link AbstractBeanDefinition Bean Definition}\n * @param beanName\n * @param serviceAnnotation\n * @param serviceAnnotationAttributes\n * @param interfaceClass\n * @param annotatedServiceBeanName\n * @return\n * @since 2.7.3\n */\nprivate AbstractBeanDefinition buildServiceBeanDefinition(String beanName,Annotation serviceAnnotation,AnnotationAttributes serviceAnnotationAttributes,Class<?> interfaceClass,String annotatedServiceBeanName){\n  BeanDefinitionBuilder builder=rootBeanDefinition(ServiceBean.class);\n  AbstractBeanDefinition beanDefinition=builder.getBeanDefinition();\n  MutablePropertyValues propertyValues=beanDefinition.getPropertyValues();\n  String[] ignoreAttributeNames=of(\"provider\",\"monitor\",\"application\",\"module\",\"registry\",\"protocol\",\"interface\",\"interfaceName\",\"parameters\");\n  propertyValues.addPropertyValues(new AnnotationPropertyValuesAdapter(serviceAnnotation,environment,ignoreAttributeNames));\n  builder.addPropertyValue(\"id\",beanName);\n  addPropertyReference(builder,\"ref\",annotatedServiceBeanName);\n  builder.addPropertyValue(\"interface\",interfaceClass.getName());\n  builder.addPropertyValue(\"parameters\",convertParameters(serviceAnnotationAttributes.getStringArray(\"parameters\")));\n  List<MethodConfig> methodConfigs=convertMethodConfigs(serviceAnnotationAttributes.get(\"methods\"));\n  if (!methodConfigs.isEmpty()) {\n    builder.addPropertyValue(\"methods\",methodConfigs);\n  }\n  String providerConfigBeanName=serviceAnnotationAttributes.getString(\"provider\");\n  if (StringUtils.hasText(providerConfigBeanName)) {\n    addPropertyReference(builder,\"provider\",providerConfigBeanName);\n  }\n  String monitorConfigBeanName=serviceAnnotationAttributes.getString(\"monitor\");\n  if (StringUtils.hasText(monitorConfigBeanName)) {\n    addPropertyReference(builder,\"monitor\",monitorConfigBeanName);\n  }\n  String applicationConfigBeanName=serviceAnnotationAttributes.getString(\"application\");\n  if (StringUtils.hasText(applicationConfigBeanName)) {\n    addPropertyReference(builder,\"application\",applicationConfigBeanName);\n  }\n  String moduleConfigBeanName=serviceAnnotationAttributes.getString(\"module\");\n  if (StringUtils.hasText(moduleConfigBeanName)) {\n    addPropertyReference(builder,\"module\",moduleConfigBeanName);\n  }\n  String[] registryConfigBeanNames=serviceAnnotationAttributes.getStringArray(\"registry\");\n  List<RuntimeBeanReference> registryRuntimeBeanReferences=toRuntimeBeanReferences(registryConfigBeanNames);\n  if (!registryRuntimeBeanReferences.isEmpty()) {\n    builder.addPropertyValue(\"registries\",registryRuntimeBeanReferences);\n  }\n  String[] protocolConfigBeanNames=serviceAnnotationAttributes.getStringArray(\"protocol\");\n  List<RuntimeBeanReference> protocolRuntimeBeanReferences=toRuntimeBeanReferences(protocolConfigBeanNames);\n  if (!protocolRuntimeBeanReferences.isEmpty()) {\n    builder.addPropertyValue(\"protocols\",protocolRuntimeBeanReferences);\n  }\n  return builder.getBeanDefinition();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 394,
        "endColumnNumber" : 78
      },
      "nodeContext" : "BeanDefinitionBuilder builder=rootBeanDefinition(ServiceBean.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.dubbo.config.spring.ServiceBean>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 394,
    "startColumnNumber" : 59,
    "endLineNumber" : 394,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}