{
  "id" : 282,
  "expression" : "matched",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-core/src/test/java/com/netflix/eureka2/interests/IndexConcurrencyTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 63,
      "startColumnNumber" : 20,
      "endLineNumber" : 63,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 63,
      "startColumnNumber" : 32,
      "endLineNumber" : 63,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 63,
        "startColumnNumber" : 32,
        "endLineNumber" : 63,
        "endColumnNumber" : 46
      },
      "nodeContext" : "matched.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Arrays.fill(matched,0,matched.length,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 66,
      "startColumnNumber" : 12,
      "endLineNumber" : 66,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 26
      },
      "nodeContext" : "matched[value]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 28
      },
      "nodeContext" : "matched[value]++",
      "nodeType" : "PostfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 29
      },
      "nodeContext" : "matched[value]++;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 64,
        "startColumnNumber" : 37,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int value=idxId;\n  matched[value]++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Integer idxId : idxIds) {\n  int value=idxId;\n  matched[value]++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 29
      },
      "nodeContext" : "matched[value]++;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 69,
      "startColumnNumber" : 28,
      "endLineNumber" : 69,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 42
      },
      "nodeContext" : "matched.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < matched.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < matched.length; i++) {\n  if (matched[i] != 1) {\n    if (matched[i] == 0) {\n      missed++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 69,
        "startColumnNumber" : 24,
        "endLineNumber" : 69,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < matched.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 70,
      "startColumnNumber" : 16,
      "endLineNumber" : 70,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 26
      },
      "nodeContext" : "matched[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 31
      },
      "nodeContext" : "matched[i] != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (matched[i] != 1) {\n  if (matched[i] == 0) {\n    missed++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 69,
        "startColumnNumber" : 49,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (matched[i] != 1) {\n    if (matched[i] == 0) {\n      missed++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < matched.length; i++) {\n  if (matched[i] != 1) {\n    if (matched[i] == 0) {\n      missed++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 31
      },
      "nodeContext" : "matched[i] != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "matched",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 71,
      "startColumnNumber" : 20,
      "endLineNumber" : 71,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 71,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 30
      },
      "nodeContext" : "matched[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 71,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 35
      },
      "nodeContext" : "matched[i] == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 71,
        "startColumnNumber" : 16,
        "endLineNumber" : 73,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (matched[i] == 0) {\n  missed++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 70,
        "startColumnNumber" : 33,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (matched[i] == 0) {\n    missed++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (matched[i] != 1) {\n  if (matched[i] == 0) {\n    missed++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 69,
        "startColumnNumber" : 49,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (matched[i] != 1) {\n    if (matched[i] == 0) {\n      missed++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < matched.length; i++) {\n  if (matched[i] != 1) {\n    if (matched[i] == 0) {\n      missed++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 33,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2032,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRaceConditionsDoNotHappen() throws Exception {\n  PublishSubject<ChangeNotification<InstanceInfo>> dataSource=PublishSubject.create();\n  InstanceInfoInitStateHolder initStateHolder=new InstanceInfoInitStateHolder(Collections.<ChangeNotification<InstanceInfo>>emptyIterator());\n  Index<InstanceInfo> index=Index.forInterest(Interests.forFullRegistry(),dataSource,initStateHolder);\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(i)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n  }\n  IndexSubscriber indexSubscriber=new IndexSubscriber(index);\n  indexSubscriber.start();\n  int id=NOTIFICATIONS / 2;\n  for (int i=0; i < NOTIFICATIONS / 2; i++) {\n    InstanceInfo data=SampleInstanceInfo.DiscoveryServer.builder().withId(Integer.toString(id)).build();\n    dataSource.onNext(new ChangeNotification<InstanceInfo>(Kind.Add,data));\n    id++;\n  }\n  indexSubscriber.join();\n  List<Integer> idxIds=indexSubscriber.getIds();\n  int[] matched=new int[NOTIFICATIONS];\n  Arrays.fill(matched,0,matched.length,0);\n  for (  Integer idxId : idxIds) {\n    int value=idxId;\n    matched[value]++;\n  }\n  int missed=0;\n  for (int i=0; i < matched.length; i++) {\n    if (matched[i] != 1) {\n      if (matched[i] == 0) {\n        missed++;\n      }\n    }\n  }\n  assertThat(missed,is(equalTo(0)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 71,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 35
      },
      "nodeContext" : "matched[i] == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 63,
    "startColumnNumber" : 20,
    "endLineNumber" : 63,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 63,
    "startColumnNumber" : 32,
    "endLineNumber" : 63,
    "endColumnNumber" : 39
  }, {
    "charLength" : 7,
    "startLineNumber" : 66,
    "startColumnNumber" : 12,
    "endLineNumber" : 66,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 69,
    "startColumnNumber" : 28,
    "endLineNumber" : 69,
    "endColumnNumber" : 35
  }, {
    "charLength" : 7,
    "startLineNumber" : 70,
    "startColumnNumber" : 16,
    "endLineNumber" : 70,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 71,
    "startColumnNumber" : 20,
    "endLineNumber" : 71,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}