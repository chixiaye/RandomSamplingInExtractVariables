{
  "id" : 35,
  "expression" : "green * 2 / 3",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/view/TerminalRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "green * 2 / 3",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 215,
      "startColumnNumber" : 24,
      "endLineNumber" : 215,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 215,
        "endColumnNumber" : 37
      },
      "nodeContext" : "green=green * 2 / 3",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 215,
        "endColumnNumber" : 38
      },
      "nodeContext" : "green=green * 2 / 3;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 208,
        "startColumnNumber" : 21,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int red=(0xFF & (foreColor >> 16));\n  int green=(0xFF & (foreColor >> 8));\n  int blue=(0xFF & foreColor);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 549,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (dim) {\n  int red=(0xFF & (foreColor >> 16));\n  int green=(0xFF & (foreColor >> 8));\n  int blue=(0xFF & foreColor);\n  red=red * 2 / 3;\n  green=green * 2 / 3;\n  blue=blue * 2 / 3;\n  foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1736,
        "startLineNumber" : 197,
        "startColumnNumber" : 69,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  if (bold && foreColorIndex >= 0 && foreColorIndex < 8)   foreColor=palette[foreColorIndex + 8];\n  if (dim) {\n    int red=(0xFF & (foreColor >> 16));\n    int green=(0xFF & (foreColor >> 8));\n    int blue=(0xFF & foreColor);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColor);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 228,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n  final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n  final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n  final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n  final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n  final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n  if (bold && foreColorIndex >= 0 && foreColorIndex < 8)   foreColor=palette[foreColorIndex + 8];\n  if (dim) {\n    int red=(0xFF & (foreColor >> 16));\n    int green=(0xFF & (foreColor >> 8));\n    int blue=(0xFF & foreColor);\n    red=red * 2 / 3;\n    green=green * 2 / 3;\n    blue=blue * 2 / 3;\n    foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n  }\n  mTextPaint.setFakeBoldText(bold);\n  mTextPaint.setUnderlineText(underline);\n  mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n  mTextPaint.setStrikeThruText(strikeThrough);\n  mTextPaint.setColor(foreColor);\n  canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 210,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3441,
        "startLineNumber" : 157,
        "startColumnNumber" : 94,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  int foreColorIndex=-1;\n  if ((foreColor & 0xff000000) != 0xff000000) {\n    foreColorIndex=foreColor;\n    foreColor=palette[foreColor];\n  }\n  if ((backColor & 0xff000000) != 0xff000000)   backColor=palette[backColor];\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != palette[TextStyle.COLOR_INDEX_BACKGROUND]) {\n    mTextPaint.setColor(backColor);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    if (bold && foreColorIndex >= 0 && foreColorIndex < 8)     foreColor=palette[foreColorIndex + 8];\n    if (dim) {\n      int red=(0xFF & (foreColor >> 16));\n      int green=(0xFF & (foreColor >> 8));\n      int blue=(0xFF & foreColor);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColor);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 404,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4637,
        "startLineNumber" : 143,
        "startColumnNumber" : 4,
        "endLineNumber" : 231,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param canvas          the canvas to render on\n * @param palette         the color palette to look up colors from textStyle\n * @param y               height offset into the canvas where to render the line: line * {@link #mFontLineSpacing}\n * @param startColumn     the run offset in columns\n * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n * @param text            the java char array to render text from\n * @param startCharIndex  index into the text array where to start\n * @param runWidthChars   number of java characters from the text array to render\n * @param cursor          true if rendering a cursor or selection\n * @param textStyle       the background, foreground and effect encoded using {@link TextStyle}\n * @param reverseVideo    if the screen is rendered with the global reverse video flag set\n */\nprivate void drawTextRun(Canvas canvas,char[] text,int[] palette,float y,int startColumn,int runWidthColumns,int startCharIndex,int runWidthChars,float mes,boolean cursor,long textStyle,boolean reverseVideo){\n  int foreColor=TextStyle.decodeForeColor(textStyle);\n  int backColor=TextStyle.decodeBackColor(textStyle);\n  int foreColorIndex=-1;\n  if ((foreColor & 0xff000000) != 0xff000000) {\n    foreColorIndex=foreColor;\n    foreColor=palette[foreColor];\n  }\n  if ((backColor & 0xff000000) != 0xff000000)   backColor=palette[backColor];\n  final int effect=TextStyle.decodeEffect(textStyle);\n  float left=startColumn * mFontWidth;\n  float right=left + runWidthColumns * mFontWidth;\n  mes=mes / mFontWidth;\n  boolean savedMatrix=false;\n  if (Math.abs(mes - runWidthColumns) > 0.01) {\n    canvas.save();\n    canvas.scale(runWidthColumns / mes,1.f);\n    left*=mes / runWidthColumns;\n    right*=mes / runWidthColumns;\n    savedMatrix=true;\n  }\n  boolean reverseVideoHere=reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n  if (reverseVideoHere ^ cursor) {\n    int tmp=foreColor;\n    foreColor=backColor;\n    backColor=tmp;\n  }\n  if (backColor != palette[TextStyle.COLOR_INDEX_BACKGROUND]) {\n    mTextPaint.setColor(backColor);\n    canvas.drawRect(left,y - mFontLineSpacingAndAscent + mFontAscent,right,y,mTextPaint);\n  }\n  if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n    final boolean bold=(effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n    final boolean underline=(effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n    final boolean italic=(effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n    final boolean strikeThrough=(effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n    final boolean dim=(effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n    if (bold && foreColorIndex >= 0 && foreColorIndex < 8)     foreColor=palette[foreColorIndex + 8];\n    if (dim) {\n      int red=(0xFF & (foreColor >> 16));\n      int green=(0xFF & (foreColor >> 8));\n      int blue=(0xFF & foreColor);\n      red=red * 2 / 3;\n      green=green * 2 / 3;\n      blue=blue * 2 / 3;\n      foreColor=0xFF000000 + (red << 16) + (green << 8)+ blue;\n    }\n    mTextPaint.setFakeBoldText(bold);\n    mTextPaint.setUnderlineText(underline);\n    mTextPaint.setTextSkewX(italic ? -0.35f : 0.f);\n    mTextPaint.setStrikeThruText(strikeThrough);\n    mTextPaint.setColor(foreColor);\n    canvas.drawText(text,startCharIndex,runWidthChars,left,y - mFontLineSpacingAndAscent,mTextPaint);\n  }\n  if (savedMatrix)   canvas.restore();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 450,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 215,
        "endColumnNumber" : 38
      },
      "nodeContext" : "green=green * 2 / 3;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 215,
    "startColumnNumber" : 24,
    "endLineNumber" : 215,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}