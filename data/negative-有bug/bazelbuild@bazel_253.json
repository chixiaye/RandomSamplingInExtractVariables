{
  "id" : 253,
  "expression" : "annotation",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec/AutoCodecUtil.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotation",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 99,
      "startColumnNumber" : 8,
      "endLineNumber" : 99,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 48
      },
      "nodeContext" : "annotation.checkClassExplicitlyAllowed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (annotation.checkClassExplicitlyAllowed()) {\n  builder.addStatement(\"context.checkClassExplicitlyAllowed(getEncodedClass(), input)\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 84,
        "startColumnNumber" : 80,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(\"serialize\").addModifiers(Modifier.PUBLIC).returns(void.class).addAnnotation(Override.class).addAnnotation(AnnotationSpec.builder(ClassName.get(SuppressWarnings.class)).addMember(\"value\",\"$S\",\"unchecked\").build()).addException(SerializationException.class).addException(IOException.class).addParameter(SerializationContext.class,\"context\").addParameter(TypeName.get(env.getTypeUtils().erasure(encodedType.asType())),\"input\").addParameter(CodedOutputStream.class,\"codedOut\");\n  if (annotation.checkClassExplicitlyAllowed()) {\n    builder.addStatement(\"context.checkClassExplicitlyAllowed(getEncodedClass(), input)\");\n  }\n  List<? extends TypeMirror> explicitlyAllowedClasses;\n  try {\n    explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n  }\n catch (  MirroredTypesException e) {\n    explicitlyAllowedClasses=e.getTypeMirrors();\n  }\n  for (  TypeMirror explicitlyAllowedClass : explicitlyAllowedClasses) {\n    builder.addStatement(\"context.addExplicitlyAllowedClass($T.class)\",explicitlyAllowedClass);\n  }\n  return builder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Initializes the deserialize method.\n * @param encodedType type being serialized\n */\nstatic MethodSpec.Builder initializeSerializeMethodBuilder(TypeElement encodedType,AutoCodec annotation,ProcessingEnvironment env){\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(\"serialize\").addModifiers(Modifier.PUBLIC).returns(void.class).addAnnotation(Override.class).addAnnotation(AnnotationSpec.builder(ClassName.get(SuppressWarnings.class)).addMember(\"value\",\"$S\",\"unchecked\").build()).addException(SerializationException.class).addException(IOException.class).addParameter(SerializationContext.class,\"context\").addParameter(TypeName.get(env.getTypeUtils().erasure(encodedType.asType())),\"input\").addParameter(CodedOutputStream.class,\"codedOut\");\n  if (annotation.checkClassExplicitlyAllowed()) {\n    builder.addStatement(\"context.checkClassExplicitlyAllowed(getEncodedClass(), input)\");\n  }\n  List<? extends TypeMirror> explicitlyAllowedClasses;\n  try {\n    explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n  }\n catch (  MirroredTypesException e) {\n    explicitlyAllowedClasses=e.getTypeMirrors();\n  }\n  for (  TypeMirror explicitlyAllowedClass : explicitlyAllowedClasses) {\n    builder.addStatement(\"context.addExplicitlyAllowedClass($T.class)\",explicitlyAllowedClass);\n  }\n  return builder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 48
      },
      "nodeContext" : "annotation.checkClassExplicitlyAllowed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec"
  }, {
    "nodeContext" : "annotation",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 105,
      "startColumnNumber" : 24,
      "endLineNumber" : 105,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 105,
        "startColumnNumber" : 24,
        "endLineNumber" : 105,
        "endColumnNumber" : 57
      },
      "nodeContext" : "annotation.explicitlyAllowClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 105,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Arrays.stream(annotation.explicitlyAllowClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 107,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 43
      },
      "nodeContext" : "explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 44
      },
      "nodeContext" : "explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n}\n catch (MirroredTypesException e) {\n  explicitlyAllowedClasses=e.getTypeMirrors();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1431,
        "startLineNumber" : 84,
        "startColumnNumber" : 80,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(\"serialize\").addModifiers(Modifier.PUBLIC).returns(void.class).addAnnotation(Override.class).addAnnotation(AnnotationSpec.builder(ClassName.get(SuppressWarnings.class)).addMember(\"value\",\"$S\",\"unchecked\").build()).addException(SerializationException.class).addException(IOException.class).addParameter(SerializationContext.class,\"context\").addParameter(TypeName.get(env.getTypeUtils().erasure(encodedType.asType())),\"input\").addParameter(CodedOutputStream.class,\"codedOut\");\n  if (annotation.checkClassExplicitlyAllowed()) {\n    builder.addStatement(\"context.checkClassExplicitlyAllowed(getEncodedClass(), input)\");\n  }\n  List<? extends TypeMirror> explicitlyAllowedClasses;\n  try {\n    explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n  }\n catch (  MirroredTypesException e) {\n    explicitlyAllowedClasses=e.getTypeMirrors();\n  }\n  for (  TypeMirror explicitlyAllowedClass : explicitlyAllowedClasses) {\n    builder.addStatement(\"context.addExplicitlyAllowedClass($T.class)\",explicitlyAllowedClass);\n  }\n  return builder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Initializes the deserialize method.\n * @param encodedType type being serialized\n */\nstatic MethodSpec.Builder initializeSerializeMethodBuilder(TypeElement encodedType,AutoCodec annotation,ProcessingEnvironment env){\n  MethodSpec.Builder builder=MethodSpec.methodBuilder(\"serialize\").addModifiers(Modifier.PUBLIC).returns(void.class).addAnnotation(Override.class).addAnnotation(AnnotationSpec.builder(ClassName.get(SuppressWarnings.class)).addMember(\"value\",\"$S\",\"unchecked\").build()).addException(SerializationException.class).addException(IOException.class).addParameter(SerializationContext.class,\"context\").addParameter(TypeName.get(env.getTypeUtils().erasure(encodedType.asType())),\"input\").addParameter(CodedOutputStream.class,\"codedOut\");\n  if (annotation.checkClassExplicitlyAllowed()) {\n    builder.addStatement(\"context.checkClassExplicitlyAllowed(getEncodedClass(), input)\");\n  }\n  List<? extends TypeMirror> explicitlyAllowedClasses;\n  try {\n    explicitlyAllowedClasses=Arrays.stream(annotation.explicitlyAllowClass()).map((clazz) -> getType(clazz,env)).collect(Collectors.toList());\n  }\n catch (  MirroredTypesException e) {\n    explicitlyAllowedClasses=e.getTypeMirrors();\n  }\n  for (  TypeMirror explicitlyAllowedClass : explicitlyAllowedClasses) {\n    builder.addStatement(\"context.addExplicitlyAllowedClass($T.class)\",explicitlyAllowedClass);\n  }\n  return builder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 105,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Arrays.stream(annotation.explicitlyAllowClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 99,
    "startColumnNumber" : 8,
    "endLineNumber" : 99,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 105,
    "startColumnNumber" : 24,
    "endLineNumber" : 105,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}