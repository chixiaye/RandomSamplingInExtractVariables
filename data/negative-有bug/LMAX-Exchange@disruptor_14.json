{
  "id" : 14,
  "expression" : "4L",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/perftest/java/com/lmax/disruptor/support/FunctionQueueProcessor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "4L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 92,
      "startColumnNumber" : 41,
      "endLineNumber" : 92,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 92,
        "startColumnNumber" : 29,
        "endLineNumber" : 92,
        "endColumnNumber" : 43
      },
      "nodeContext" : "testValue & 4L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(testValue & 4L)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(testValue & 4L) == 4L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 92,
        "startColumnNumber" : 24,
        "endLineNumber" : 95,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if ((testValue & 4L) == 4L) {\n  ++stepThreeCounter;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (functionStep) {\ncase ONE:{\n    long[] values=stepOneQueue.take();\n    stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n    break;\n  }\ncase TWO:{\n  Long value=stepTwoQueue.take();\n  stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n  break;\n}\ncase THREE:{\nLong value=stepThreeQueue.take();\nlong testValue=value.longValue();\nif ((testValue & 4L) == 4L) {\n  ++stepThreeCounter;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (functionStep) {\ncase ONE:{\n      long[] values=stepOneQueue.take();\n      stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n      break;\n    }\ncase TWO:{\n    Long value=stepTwoQueue.take();\n    stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n    break;\n  }\ncase THREE:{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\nswitch (functionStep) {\ncase ONE:{\n      long[] values=stepOneQueue.take();\n      stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n      break;\n    }\ncase TWO:{\n    Long value=stepTwoQueue.take();\n    stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n    break;\n  }\ncase THREE:{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1298,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\nswitch (functionStep) {\ncase ONE:{\n        long[] values=stepOneQueue.take();\n        stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n        break;\n      }\ncase TWO:{\n      Long value=stepTwoQueue.take();\n      stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n      break;\n    }\ncase THREE:{\n    Long value=stepThreeQueue.take();\n    long testValue=value.longValue();\n    if ((testValue & 4L) == 4L) {\n      ++stepThreeCounter;\n    }\n    break;\n  }\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\nswitch (functionStep) {\ncase ONE:{\n        long[] values=stepOneQueue.take();\n        stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n        break;\n      }\ncase TWO:{\n      Long value=stepTwoQueue.take();\n      stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n      break;\n    }\ncase THREE:{\n    Long value=stepThreeQueue.take();\n    long testValue=value.longValue();\n    if ((testValue & 4L) == 4L) {\n      ++stepThreeCounter;\n    }\n    break;\n  }\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  running=true;\n  while (true) {\n    try {\nswitch (functionStep) {\ncase ONE:{\n          long[] values=stepOneQueue.take();\n          stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n          break;\n        }\ncase TWO:{\n        Long value=stepTwoQueue.take();\n        stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n        break;\n      }\ncase THREE:{\n      Long value=stepThreeQueue.take();\n      long testValue=value.longValue();\n      if ((testValue & 4L) == 4L) {\n        ++stepThreeCounter;\n      }\n      break;\n    }\n}\nif (null != latch && sequence++ == count) {\n  latch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  running=true;\n  while (true) {\n    try {\nswitch (functionStep) {\ncase ONE:{\n          long[] values=stepOneQueue.take();\n          stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n          break;\n        }\ncase TWO:{\n        Long value=stepTwoQueue.take();\n        stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n        break;\n      }\ncase THREE:{\n      Long value=stepThreeQueue.take();\n      long testValue=value.longValue();\n      if ((testValue & 4L) == 4L) {\n        ++stepThreeCounter;\n      }\n      break;\n    }\n}\nif (null != latch && sequence++ == count) {\n  latch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(testValue & 4L) == 4L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "4L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 92,
      "startColumnNumber" : 48,
      "endLineNumber" : 92,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(testValue & 4L) == 4L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 92,
        "startColumnNumber" : 24,
        "endLineNumber" : 95,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if ((testValue & 4L) == 4L) {\n  ++stepThreeCounter;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (functionStep) {\ncase ONE:{\n    long[] values=stepOneQueue.take();\n    stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n    break;\n  }\ncase TWO:{\n  Long value=stepTwoQueue.take();\n  stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n  break;\n}\ncase THREE:{\nLong value=stepThreeQueue.take();\nlong testValue=value.longValue();\nif ((testValue & 4L) == 4L) {\n  ++stepThreeCounter;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (functionStep) {\ncase ONE:{\n      long[] values=stepOneQueue.take();\n      stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n      break;\n    }\ncase TWO:{\n    Long value=stepTwoQueue.take();\n    stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n    break;\n  }\ncase THREE:{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\nswitch (functionStep) {\ncase ONE:{\n      long[] values=stepOneQueue.take();\n      stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n      break;\n    }\ncase TWO:{\n    Long value=stepTwoQueue.take();\n    stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n    break;\n  }\ncase THREE:{\n  Long value=stepThreeQueue.take();\n  long testValue=value.longValue();\n  if ((testValue & 4L) == 4L) {\n    ++stepThreeCounter;\n  }\n  break;\n}\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1298,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\nswitch (functionStep) {\ncase ONE:{\n        long[] values=stepOneQueue.take();\n        stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n        break;\n      }\ncase TWO:{\n      Long value=stepTwoQueue.take();\n      stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n      break;\n    }\ncase THREE:{\n    Long value=stepThreeQueue.take();\n    long testValue=value.longValue();\n    if ((testValue & 4L) == 4L) {\n      ++stepThreeCounter;\n    }\n    break;\n  }\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\nswitch (functionStep) {\ncase ONE:{\n        long[] values=stepOneQueue.take();\n        stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n        break;\n      }\ncase TWO:{\n      Long value=stepTwoQueue.take();\n      stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n      break;\n    }\ncase THREE:{\n    Long value=stepThreeQueue.take();\n    long testValue=value.longValue();\n    if ((testValue & 4L) == 4L) {\n      ++stepThreeCounter;\n    }\n    break;\n  }\n}\nif (null != latch && sequence++ == count) {\nlatch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\nbreak;\n}\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  running=true;\n  while (true) {\n    try {\nswitch (functionStep) {\ncase ONE:{\n          long[] values=stepOneQueue.take();\n          stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n          break;\n        }\ncase TWO:{\n        Long value=stepTwoQueue.take();\n        stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n        break;\n      }\ncase THREE:{\n      Long value=stepThreeQueue.take();\n      long testValue=value.longValue();\n      if ((testValue & 4L) == 4L) {\n        ++stepThreeCounter;\n      }\n      break;\n    }\n}\nif (null != latch && sequence++ == count) {\n  latch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  running=true;\n  while (true) {\n    try {\nswitch (functionStep) {\ncase ONE:{\n          long[] values=stepOneQueue.take();\n          stepTwoQueue.put(Long.valueOf(values[0] + values[1]));\n          break;\n        }\ncase TWO:{\n        Long value=stepTwoQueue.take();\n        stepThreeQueue.put(Long.valueOf(value.longValue() + 3));\n        break;\n      }\ncase THREE:{\n      Long value=stepThreeQueue.take();\n      long testValue=value.longValue();\n      if ((testValue & 4L) == 4L) {\n        ++stepThreeCounter;\n      }\n      break;\n    }\n}\nif (null != latch && sequence++ == count) {\n  latch.countDown();\n}\n}\n catch (InterruptedException ex) {\nif (!running) {\n  break;\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 92,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(testValue & 4L) == 4L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 92,
    "startColumnNumber" : 41,
    "endLineNumber" : 92,
    "endColumnNumber" : 43
  }, {
    "charLength" : 2,
    "startLineNumber" : 92,
    "startColumnNumber" : 48,
    "endLineNumber" : 92,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  } ]
}