{
  "id" : 289,
  "expression" : "AdaptiveSupport",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AdaptiveSupport",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 403,
      "startColumnNumber" : 5,
      "endLineNumber" : 403,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 403,
        "startColumnNumber" : 4,
        "endLineNumber" : 403,
        "endColumnNumber" : 20
      },
      "nodeContext" : "@AdaptiveSupport",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 403,
        "startColumnNumber" : 4,
        "endLineNumber" : 407,
        "endColumnNumber" : 36
      },
      "nodeContext" : "@AdaptiveSupport int adaptiveSupport=isFormatSupported && decoderInfo.isSeamlessAdaptationSupported(format) ? ADAPTIVE_SEAMLESS : ADAPTIVE_NOT_SEAMLESS;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2114,
        "startLineNumber" : 369,
        "startColumnNumber" : 35,
        "endLineNumber" : 411,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String mimeType=format.sampleMimeType;\n  if (!MimeTypes.isAudio(mimeType)) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_TYPE);\n  }\n  @TunnelingSupport int tunnelingSupport=Util.SDK_INT >= 21 ? TUNNELING_SUPPORTED : TUNNELING_NOT_SUPPORTED;\n  boolean supportsFormatDrm=format.drmInitData == null || FrameworkMediaCrypto.class.equals(format.exoMediaCryptoType) || (format.exoMediaCryptoType == null && supportsFormatDrm(drmSessionManager,format.drmInitData));\n  if (supportsFormatDrm && allowPassthrough(format.channelCount,mimeType) && mediaCodecSelector.getPassthroughDecoderInfo() != null) {\n    return RendererCapabilities.create(FORMAT_HANDLED,ADAPTIVE_NOT_SEAMLESS,tunnelingSupport);\n  }\n  if ((MimeTypes.AUDIO_RAW.equals(mimeType) && !audioSink.supportsOutput(format.channelCount,format.pcmEncoding)) || !audioSink.supportsOutput(format.channelCount,C.ENCODING_PCM_16BIT)) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_SUBTYPE);\n  }\n  List<MediaCodecInfo> decoderInfos=getDecoderInfos(mediaCodecSelector,format,false);\n  if (decoderInfos.isEmpty()) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_SUBTYPE);\n  }\n  if (!supportsFormatDrm) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_DRM);\n  }\n  MediaCodecInfo decoderInfo=decoderInfos.get(0);\n  boolean isFormatSupported=decoderInfo.isFormatSupported(format);\n  @AdaptiveSupport int adaptiveSupport=isFormatSupported && decoderInfo.isSeamlessAdaptationSupported(format) ? ADAPTIVE_SEAMLESS : ADAPTIVE_NOT_SEAMLESS;\n  @FormatSupport int formatSupport=isFormatSupported ? FORMAT_HANDLED : FORMAT_EXCEEDS_CAPABILITIES;\n  return RendererCapabilities.create(formatSupport,adaptiveSupport,tunnelingSupport);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2348,
        "startLineNumber" : 363,
        "startColumnNumber" : 2,
        "endLineNumber" : 411,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override @Capabilities protected int supportsFormat(MediaCodecSelector mediaCodecSelector,@Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,Format format) throws DecoderQueryException {\n  String mimeType=format.sampleMimeType;\n  if (!MimeTypes.isAudio(mimeType)) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_TYPE);\n  }\n  @TunnelingSupport int tunnelingSupport=Util.SDK_INT >= 21 ? TUNNELING_SUPPORTED : TUNNELING_NOT_SUPPORTED;\n  boolean supportsFormatDrm=format.drmInitData == null || FrameworkMediaCrypto.class.equals(format.exoMediaCryptoType) || (format.exoMediaCryptoType == null && supportsFormatDrm(drmSessionManager,format.drmInitData));\n  if (supportsFormatDrm && allowPassthrough(format.channelCount,mimeType) && mediaCodecSelector.getPassthroughDecoderInfo() != null) {\n    return RendererCapabilities.create(FORMAT_HANDLED,ADAPTIVE_NOT_SEAMLESS,tunnelingSupport);\n  }\n  if ((MimeTypes.AUDIO_RAW.equals(mimeType) && !audioSink.supportsOutput(format.channelCount,format.pcmEncoding)) || !audioSink.supportsOutput(format.channelCount,C.ENCODING_PCM_16BIT)) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_SUBTYPE);\n  }\n  List<MediaCodecInfo> decoderInfos=getDecoderInfos(mediaCodecSelector,format,false);\n  if (decoderInfos.isEmpty()) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_SUBTYPE);\n  }\n  if (!supportsFormatDrm) {\n    return RendererCapabilities.create(FORMAT_UNSUPPORTED_DRM);\n  }\n  MediaCodecInfo decoderInfo=decoderInfos.get(0);\n  boolean isFormatSupported=decoderInfo.isFormatSupported(format);\n  @AdaptiveSupport int adaptiveSupport=isFormatSupported && decoderInfo.isSeamlessAdaptationSupported(format) ? ADAPTIVE_SEAMLESS : ADAPTIVE_NOT_SEAMLESS;\n  @FormatSupport int formatSupport=isFormatSupported ? FORMAT_HANDLED : FORMAT_EXCEEDS_CAPABILITIES;\n  return RendererCapabilities.create(formatSupport,adaptiveSupport,tunnelingSupport);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,modifiers]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 403,
        "startColumnNumber" : 4,
        "endLineNumber" : 403,
        "endColumnNumber" : 20
      },
      "nodeContext" : "@AdaptiveSupport",
      "nodeType" : "MarkerAnnotation",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.RendererCapabilities.AdaptiveSupport"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 403,
    "startColumnNumber" : 5,
    "endLineNumber" : 403,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}