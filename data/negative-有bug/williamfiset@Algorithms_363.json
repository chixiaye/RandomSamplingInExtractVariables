{
  "id" : 363,
  "expression" : "matrix[i]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyMatrix.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "matrix[i]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 35,
      "startColumnNumber" : 49,
      "endLineNumber" : 35,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 35,
        "startColumnNumber" : 49,
        "endLineNumber" : 35,
        "endColumnNumber" : 66
      },
      "nodeContext" : "matrix[i].clone()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 35,
        "startColumnNumber" : 32,
        "endLineNumber" : 35,
        "endColumnNumber" : 66
      },
      "nodeContext" : "this.matrix[i]=matrix[i].clone()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 35,
        "startColumnNumber" : 32,
        "endLineNumber" : 35,
        "endColumnNumber" : 67
      },
      "nodeContext" : "this.matrix[i]=matrix[i].clone();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (int i=0; i < n; i++) this.matrix[i]=matrix[i].clone();\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 29,
        "startColumnNumber" : 66,
        "endLineNumber" : 36,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.n=matrix.length;\n  this.start=start;\n  this.matrix=new double[n][n];\n  for (int i=0; i < n; i++)   this.matrix[i]=matrix[i].clone();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 730,
        "startLineNumber" : 20,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * An implementation of the Bellman-Ford algorithm. The algorithm finds the shortest path between a starting node and all other nodes in the graph. The algorithm also detects negative cycles. If a node is part of a negative cycle then the minimum cost for that node is set to Double.NEGATIVE_INFINITY.\n * @param graph - An adjacency matrix containing directed edges forming the graph\n * @param start - The id of the starting node\n */\npublic BellmanFordAdjacencyMatrix(int start,double[][] matrix){\n  this.n=matrix.length;\n  this.start=start;\n  this.matrix=new double[n][n];\n  for (int i=0; i < n; i++)   this.matrix[i]=matrix[i].clone();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 67
      },
      "nodeContext" : "for (int i=0; i < n; i++) this.matrix[i]=matrix[i].clone();\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "double[]"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 35,
    "startColumnNumber" : 49,
    "endLineNumber" : 35,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}