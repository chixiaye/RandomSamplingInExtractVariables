{
  "id" : 212,
  "expression" : "recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems())",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/model/ListView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems())",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 85,
      "startLineNumber" : 255,
      "startColumnNumber" : 44,
      "endLineNumber" : 255,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 15,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 255,
        "startColumnNumber" : 31,
        "endLineNumber" : 255,
        "endColumnNumber" : 129
      },
      "nodeContext" : "candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 130
      },
      "nodeContext" : "List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 254,
        "startColumnNumber" : 35,
        "endLineNumber" : 260,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n  for (  ViewJobFilter jobFilter : jobFilters) {\n    items=jobFilter.filter(items,candidates,this);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!jobFilters.isEmpty()) {\n  List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n  for (  ViewJobFilter jobFilter : jobFilters) {\n    items=jobFilter.filter(items,candidates,this);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 211,
        "startColumnNumber" : 57,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SortedSet<String> names;\n  List<TopLevelItem> items=new ArrayList<>();\nsynchronized (this) {\n    names=new TreeSet<>(jobNames);\n  }\n  ItemGroup<? extends TopLevelItem> parent=getOwner().getItemGroup();\n  if (recurse) {\n    if (!names.isEmpty() || includePattern != null) {\n      items.addAll(parent.getAllItems(TopLevelItem.class,item -> {\n        String itemName=item.getRelativeNameFrom(parent);\n        if (names.contains(itemName)) {\n          return true;\n        }\n        if (includePattern != null) {\n          return includePattern.matcher(itemName).matches();\n        }\n        return false;\n      }\n));\n    }\n  }\n else {\n    for (    String name : names) {\n      try {\n        TopLevelItem i=parent.getItem(name);\n        if (i != null) {\n          items.add(i);\n        }\n      }\n catch (      AccessDeniedException e) {\n      }\n    }\n    if (includePattern != null) {\n      items.addAll(parent.getItems(item -> {\n        String itemName=item.getRelativeNameFrom(parent);\n        return includePattern.matcher(itemName).matches();\n      }\n));\n    }\n  }\n  Collection<ViewJobFilter> jobFilters=getJobFilters();\n  if (!jobFilters.isEmpty()) {\n    List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n    for (    ViewJobFilter jobFilter : jobFilters) {\n      items=jobFilter.filter(items,candidates,this);\n    }\n  }\n  items=new ArrayList<>(new LinkedHashSet<>(items));\n  return items;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a read-only view of all  {@link Job}s in this view. <p> This method returns a separate copy each time to avoid concurrent modification issue.\n * @param recurse {@code false} not to recurse in ItemGroupstrue to recurse in ItemGroups\n */\nprivate List<TopLevelItem> getItems(boolean recurse){\n  SortedSet<String> names;\n  List<TopLevelItem> items=new ArrayList<>();\nsynchronized (this) {\n    names=new TreeSet<>(jobNames);\n  }\n  ItemGroup<? extends TopLevelItem> parent=getOwner().getItemGroup();\n  if (recurse) {\n    if (!names.isEmpty() || includePattern != null) {\n      items.addAll(parent.getAllItems(TopLevelItem.class,item -> {\n        String itemName=item.getRelativeNameFrom(parent);\n        if (names.contains(itemName)) {\n          return true;\n        }\n        if (includePattern != null) {\n          return includePattern.matcher(itemName).matches();\n        }\n        return false;\n      }\n));\n    }\n  }\n else {\n    for (    String name : names) {\n      try {\n        TopLevelItem i=parent.getItem(name);\n        if (i != null) {\n          items.add(i);\n        }\n      }\n catch (      AccessDeniedException e) {\n      }\n    }\n    if (includePattern != null) {\n      items.addAll(parent.getItems(item -> {\n        String itemName=item.getRelativeNameFrom(parent);\n        return includePattern.matcher(itemName).matches();\n      }\n));\n    }\n  }\n  Collection<ViewJobFilter> jobFilters=getJobFilters();\n  if (!jobFilters.isEmpty()) {\n    List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n    for (    ViewJobFilter jobFilter : jobFilters) {\n      items=jobFilter.filter(items,candidates,this);\n    }\n  }\n  items=new ArrayList<>(new LinkedHashSet<>(items));\n  return items;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 130
      },
      "nodeContext" : "List<TopLevelItem> candidates=recurse ? parent.getAllItems(TopLevelItem.class) : new ArrayList<>(parent.getItems());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "java.util.List<hudson.model.TopLevelItem>"
  } ],
  "positionList" : [ {
    "charLength" : 85,
    "startLineNumber" : 255,
    "startColumnNumber" : 44,
    "endLineNumber" : 255,
    "endColumnNumber" : 129
  } ],
  "layoutRelationDataList" : [ ]
}