{
  "id" : 211,
  "expression" : "insertColumns",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoDeleteExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "insertColumns",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 82,
      "startColumnNumber" : 29,
      "endLineNumber" : 82,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 82,
        "endColumnNumber" : 57
      },
      "nodeContext" : "String.format(INSERT_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),insertColumns,insertValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 58
      },
      "nodeContext" : "return String.format(INSERT_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),insertColumns,insertValues);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 62,
        "startColumnNumber" : 36,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KeywordChecker keywordChecker=KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n  TableRecords beforeImage=sqlUndoLog.getBeforeImage();\n  List<Row> beforeImageRows=beforeImage.getRows();\n  if (beforeImageRows == null || beforeImageRows.size() == 0) {\n    throw new ShouldNeverHappenException(\"Invalid UNDO LOG\");\n  }\n  Row row=beforeImageRows.get(0);\n  List<Field> fields=new ArrayList<>(row.nonPrimaryKeys());\n  Field pkField=row.primaryKeys().get(0);\n  fields.add(pkField);\n  String insertColumns=fields.stream().map(field -> keywordChecker.checkAndReplace(field.getName())).collect(Collectors.joining(\", \"));\n  String insertValues=fields.stream().map(field -> \"?\").collect(Collectors.joining(\", \"));\n  return String.format(INSERT_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),insertColumns,insertValues);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1247,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Undo delete. Notice: PK is at last one.\n * @see AbstractUndoExecutor#undoPrepare\n * @return sql\n */\n@Override protected String buildUndoSQL(){\n  KeywordChecker keywordChecker=KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n  TableRecords beforeImage=sqlUndoLog.getBeforeImage();\n  List<Row> beforeImageRows=beforeImage.getRows();\n  if (beforeImageRows == null || beforeImageRows.size() == 0) {\n    throw new ShouldNeverHappenException(\"Invalid UNDO LOG\");\n  }\n  Row row=beforeImageRows.get(0);\n  List<Field> fields=new ArrayList<>(row.nonPrimaryKeys());\n  Field pkField=row.primaryKeys().get(0);\n  fields.add(pkField);\n  String insertColumns=fields.stream().map(field -> keywordChecker.checkAndReplace(field.getName())).collect(Collectors.joining(\", \"));\n  String insertValues=fields.stream().map(field -> \"?\").collect(Collectors.joining(\", \"));\n  return String.format(INSERT_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),insertColumns,insertValues);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 82,
        "endColumnNumber" : 57
      },
      "nodeContext" : "String.format(INSERT_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),insertColumns,insertValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 82,
    "startColumnNumber" : 29,
    "endLineNumber" : 82,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}