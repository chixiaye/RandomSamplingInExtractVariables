{
  "id" : 469,
  "expression" : "JSON.getBytes()",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "JSON.getBytes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 26,
      "startColumnNumber" : 53,
      "endLineNumber" : 26,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 26,
        "startColumnNumber" : 23,
        "endLineNumber" : 26,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new TypedByteArray(MIME_TYPE,JSON.getBytes())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 26,
        "startColumnNumber" : 15,
        "endLineNumber" : 26,
        "endColumnNumber" : 69
      },
      "nodeContext" : "input=new TypedByteArray(MIME_TYPE,JSON.getBytes())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 70
      },
      "nodeContext" : "TypedInput input=new TypedByteArray(MIME_TYPE,JSON.getBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 25,
        "startColumnNumber" : 51,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypedInput input=new TypedByteArray(MIME_TYPE,JSON.getBytes());\n  MyObject result=(MyObject)converter.fromBody(input,MyObject.class);\n  assertThat(result).isEqualTo(OBJECT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 25,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void deserialize() throws Exception {\n  TypedInput input=new TypedByteArray(MIME_TYPE,JSON.getBytes());\n  MyObject result=(MyObject)converter.fromBody(input,MyObject.class);\n  assertThat(result).isEqualTo(OBJECT);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 43,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 70
      },
      "nodeContext" : "TypedInput input=new TypedByteArray(MIME_TYPE,JSON.getBytes());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 26,
    "startColumnNumber" : 53,
    "endLineNumber" : 26,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}