{
  "id" : 35,
  "expression" : "isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 87,
      "startLineNumber" : 88,
      "startColumnNumber" : 14,
      "endLineNumber" : 90,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 88,
        "startColumnNumber" : 10,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n  mth.add(AFlag.DONT_GENERATE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 84,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (mi.isConstructor() && !isSynthetic) {\n  if (shortId.equals(enumConstructor)) {\n    mth.add(AFlag.DONT_GENERATE);\n  }\n}\n else if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n  mth.add(AFlag.DONT_GENERATE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 77,
        "startColumnNumber" : 42,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MethodInfo mi=mth.getMethodInfo();\n  if (mi.isClassInit()) {\n    continue;\n  }\n  String shortId=mi.getShortId();\n  boolean isSynthetic=mth.getAccessFlags().isSynthetic();\n  if (mi.isConstructor() && !isSynthetic) {\n    if (shortId.equals(enumConstructor)) {\n      mth.add(AFlag.DONT_GENERATE);\n    }\n  }\n else   if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n    mth.add(AFlag.DONT_GENERATE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (MethodNode mth : cls.getMethods()) {\n  MethodInfo mi=mth.getMethodInfo();\n  if (mi.isClassInit()) {\n    continue;\n  }\n  String shortId=mi.getShortId();\n  boolean isSynthetic=mth.getAccessFlags().isSynthetic();\n  if (mi.isConstructor() && !isSynthetic) {\n    if (shortId.equals(enumConstructor)) {\n      mth.add(AFlag.DONT_GENERATE);\n    }\n  }\n else   if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n    mth.add(AFlag.DONT_GENERATE);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3652,
        "startLineNumber" : 41,
        "startColumnNumber" : 58,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!cls.isEnum()) {\n    return true;\n  }\n  MethodNode staticMethod=null;\n  for (  MethodNode mth : cls.getMethods()) {\n    MethodInfo mi=mth.getMethodInfo();\n    if (mi.isClassInit()) {\n      staticMethod=mth;\n      break;\n    }\n  }\n  if (staticMethod == null) {\n    ErrorsCounter.classWarn(cls,\"Enum class init method not found\");\n    return true;\n  }\n  ArgType clsType=cls.getClassInfo().getType();\n  String enumConstructor=\"<init>(Ljava/lang/String;I)V\";\n  String valuesOfMethod=\"valueOf(Ljava/lang/String;)\" + TypeGen.signature(clsType);\n  String valuesMethod=\"values()\" + TypeGen.signature(ArgType.array(clsType));\n  List<FieldNode> enumFields=new ArrayList<>();\n  for (  FieldNode f : cls.getFields()) {\n    if (f.getAccessFlags().isEnum()) {\n      enumFields.add(f);\n      f.add(AFlag.DONT_GENERATE);\n    }\n else     if (f.getAccessFlags().isSynthetic()) {\n      f.add(AFlag.DONT_GENERATE);\n    }\n  }\n  for (  MethodNode mth : cls.getMethods()) {\n    MethodInfo mi=mth.getMethodInfo();\n    if (mi.isClassInit()) {\n      continue;\n    }\n    String shortId=mi.getShortId();\n    boolean isSynthetic=mth.getAccessFlags().isSynthetic();\n    if (mi.isConstructor() && !isSynthetic) {\n      if (shortId.equals(enumConstructor)) {\n        mth.add(AFlag.DONT_GENERATE);\n      }\n    }\n else     if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n      mth.add(AFlag.DONT_GENERATE);\n    }\n  }\n  EnumClassAttr attr=new EnumClassAttr(enumFields.size());\n  cls.addAttr(attr);\n  attr.setStaticMethod(staticMethod);\n  ClassInfo classInfo=cls.getClassInfo();\n  BlockNode staticBlock=staticMethod.getBasicBlocks().get(0);\n  List<InsnNode> enumPutInsns=new ArrayList<>();\n  List<InsnNode> list=staticBlock.getInstructions();\n  int size=list.size();\n  for (int i=0; i < size; i++) {\n    InsnNode insn=list.get(i);\n    if (insn.getType() != InsnType.SPUT) {\n      continue;\n    }\n    FieldInfo f=(FieldInfo)((IndexInsnNode)insn).getIndex();\n    if (!f.getDeclClass().equals(classInfo)) {\n      continue;\n    }\n    FieldNode fieldNode=cls.searchField(f);\n    if (fieldNode != null && isEnumArrayField(classInfo,fieldNode)) {\n      if (i == size - 1) {\n        staticMethod.add(AFlag.DONT_GENERATE);\n      }\n else {\n        list.subList(0,i + 1).clear();\n      }\n      break;\n    }\n else {\n      enumPutInsns.add(insn);\n    }\n  }\n  for (  InsnNode putInsn : enumPutInsns) {\n    ConstructorInsn co=getConstructorInsn(putInsn);\n    if (co == null || co.getArgsCount() < 2) {\n      continue;\n    }\n    ClassInfo clsInfo=co.getClassType();\n    ClassNode constrCls=cls.dex().resolveClass(clsInfo);\n    if (constrCls == null) {\n      continue;\n    }\n    if (!clsInfo.equals(classInfo) && !constrCls.getAccessFlags().isEnum()) {\n      continue;\n    }\n    FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)putInsn).getIndex();\n    String name=getConstString(cls.dex(),co.getArg(0));\n    if (name != null && !fieldInfo.getAlias().equals(name) && NameMapper.isValidIdentifier(name)) {\n      fieldInfo.setAlias(name);\n    }\n    EnumField field=new EnumField(fieldInfo,co,2);\n    attr.getFields().add(field);\n    if (!co.getClassType().equals(classInfo)) {\n      for (      ClassNode innerCls : cls.getInnerClasses()) {\n        processEnumInnerCls(co,field,innerCls);\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 570,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3720,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 161,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public boolean visit(ClassNode cls) throws JadxException {\n  if (!cls.isEnum()) {\n    return true;\n  }\n  MethodNode staticMethod=null;\n  for (  MethodNode mth : cls.getMethods()) {\n    MethodInfo mi=mth.getMethodInfo();\n    if (mi.isClassInit()) {\n      staticMethod=mth;\n      break;\n    }\n  }\n  if (staticMethod == null) {\n    ErrorsCounter.classWarn(cls,\"Enum class init method not found\");\n    return true;\n  }\n  ArgType clsType=cls.getClassInfo().getType();\n  String enumConstructor=\"<init>(Ljava/lang/String;I)V\";\n  String valuesOfMethod=\"valueOf(Ljava/lang/String;)\" + TypeGen.signature(clsType);\n  String valuesMethod=\"values()\" + TypeGen.signature(ArgType.array(clsType));\n  List<FieldNode> enumFields=new ArrayList<>();\n  for (  FieldNode f : cls.getFields()) {\n    if (f.getAccessFlags().isEnum()) {\n      enumFields.add(f);\n      f.add(AFlag.DONT_GENERATE);\n    }\n else     if (f.getAccessFlags().isSynthetic()) {\n      f.add(AFlag.DONT_GENERATE);\n    }\n  }\n  for (  MethodNode mth : cls.getMethods()) {\n    MethodInfo mi=mth.getMethodInfo();\n    if (mi.isClassInit()) {\n      continue;\n    }\n    String shortId=mi.getShortId();\n    boolean isSynthetic=mth.getAccessFlags().isSynthetic();\n    if (mi.isConstructor() && !isSynthetic) {\n      if (shortId.equals(enumConstructor)) {\n        mth.add(AFlag.DONT_GENERATE);\n      }\n    }\n else     if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n      mth.add(AFlag.DONT_GENERATE);\n    }\n  }\n  EnumClassAttr attr=new EnumClassAttr(enumFields.size());\n  cls.addAttr(attr);\n  attr.setStaticMethod(staticMethod);\n  ClassInfo classInfo=cls.getClassInfo();\n  BlockNode staticBlock=staticMethod.getBasicBlocks().get(0);\n  List<InsnNode> enumPutInsns=new ArrayList<>();\n  List<InsnNode> list=staticBlock.getInstructions();\n  int size=list.size();\n  for (int i=0; i < size; i++) {\n    InsnNode insn=list.get(i);\n    if (insn.getType() != InsnType.SPUT) {\n      continue;\n    }\n    FieldInfo f=(FieldInfo)((IndexInsnNode)insn).getIndex();\n    if (!f.getDeclClass().equals(classInfo)) {\n      continue;\n    }\n    FieldNode fieldNode=cls.searchField(f);\n    if (fieldNode != null && isEnumArrayField(classInfo,fieldNode)) {\n      if (i == size - 1) {\n        staticMethod.add(AFlag.DONT_GENERATE);\n      }\n else {\n        list.subList(0,i + 1).clear();\n      }\n      break;\n    }\n else {\n      enumPutInsns.add(insn);\n    }\n  }\n  for (  InsnNode putInsn : enumPutInsns) {\n    ConstructorInsn co=getConstructorInsn(putInsn);\n    if (co == null || co.getArgsCount() < 2) {\n      continue;\n    }\n    ClassInfo clsInfo=co.getClassType();\n    ClassNode constrCls=cls.dex().resolveClass(clsInfo);\n    if (constrCls == null) {\n      continue;\n    }\n    if (!clsInfo.equals(classInfo) && !constrCls.getAccessFlags().isEnum()) {\n      continue;\n    }\n    FieldInfo fieldInfo=(FieldInfo)((IndexInsnNode)putInsn).getIndex();\n    String name=getConstString(cls.dex(),co.getArg(0));\n    if (name != null && !fieldInfo.getAlias().equals(name) && NameMapper.isValidIdentifier(name)) {\n      fieldInfo.setAlias(name);\n    }\n    EnumField field=new EnumField(fieldInfo,co,2);\n    attr.getFields().add(field);\n    if (!co.getClassType().equals(classInfo)) {\n      for (      ClassNode innerCls : cls.getInnerClasses()) {\n        processEnumInnerCls(co,field,innerCls);\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 582,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 88,
        "startColumnNumber" : 10,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (isSynthetic || shortId.equals(valuesMethod) || shortId.equals(valuesOfMethod)) {\n  mth.add(AFlag.DONT_GENERATE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 87,
    "startLineNumber" : 88,
    "startColumnNumber" : 14,
    "endLineNumber" : 90,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}