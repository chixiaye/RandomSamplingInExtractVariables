{
  "id" : 167,
  "expression" : "otherForkJoinPool",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/concurrent/ForkJoinQuiescingExecutorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "otherForkJoinPool",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 73,
      "startColumnNumber" : 65,
      "endLineNumber" : 73,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 73,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 83
      },
      "nodeContext" : "ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 73,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 72,
        "startColumnNumber" : 32,
        "endLineNumber" : 73,
        "endColumnNumber" : 91
      },
      "nodeContext" : "otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 92
      },
      "nodeContext" : "ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n  ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n  AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n  Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n  AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n  originalExecutor.execute(() -> {\n    taskRanIn.set(ForkJoinTask.getPool());\n    otherExecutor.execute(subTask);\n  }\n);\n  originalExecutor.awaitQuiescence(false);\n  otherExecutor.awaitQuiescence(false);\n  assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n  assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n  ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n  AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n  Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n  AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n  originalExecutor.execute(() -> {\n    taskRanIn.set(ForkJoinTask.getPool());\n    otherExecutor.execute(subTask);\n  }\n);\n  originalExecutor.awaitQuiescence(false);\n  otherExecutor.awaitQuiescence(false);\n  assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n  assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n}\n  finally {\n  forkJoinPool.shutdownNow();\n  otherForkJoinPool.shutdownNow();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 66,
        "startColumnNumber" : 83,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Confirm our fork-new-work-if-in-forkjoinpool logic works as expected. \n */\n@Test public void testExecuteFromTaskInDifferentPoolRunsInRightPool() throws Exception {\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 73,
        "startColumnNumber" : 10,
        "endLineNumber" : 73,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ForkJoinPool"
  }, {
    "nodeContext" : "otherForkJoinPool",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 89,
      "startColumnNumber" : 54,
      "endLineNumber" : 89,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n  ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n  AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n  Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n  AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n  originalExecutor.execute(() -> {\n    taskRanIn.set(ForkJoinTask.getPool());\n    otherExecutor.execute(subTask);\n  }\n);\n  originalExecutor.awaitQuiescence(false);\n  otherExecutor.awaitQuiescence(false);\n  assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n  assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n  ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n  AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n  Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n  AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n  originalExecutor.execute(() -> {\n    taskRanIn.set(ForkJoinTask.getPool());\n    otherExecutor.execute(subTask);\n  }\n);\n  originalExecutor.awaitQuiescence(false);\n  otherExecutor.awaitQuiescence(false);\n  assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n  assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n}\n  finally {\n  forkJoinPool.shutdownNow();\n  otherForkJoinPool.shutdownNow();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 66,
        "startColumnNumber" : 83,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Confirm our fork-new-work-if-in-forkjoinpool logic works as expected. \n */\n@Test public void testExecuteFromTaskInDifferentPoolRunsInRightPool() throws Exception {\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ForkJoinPool"
  }, {
    "nodeContext" : "otherForkJoinPool",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 93,
      "startColumnNumber" : 6,
      "endLineNumber" : 93,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "otherForkJoinPool.shutdownNow()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 38
      },
      "nodeContext" : "otherForkJoinPool.shutdownNow();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 90,
        "startColumnNumber" : 14,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  forkJoinPool.shutdownNow();\n  otherForkJoinPool.shutdownNow();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n  ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n  AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n  Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n  AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n  originalExecutor.execute(() -> {\n    taskRanIn.set(ForkJoinTask.getPool());\n    otherExecutor.execute(subTask);\n  }\n);\n  originalExecutor.awaitQuiescence(false);\n  otherExecutor.awaitQuiescence(false);\n  assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n  assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n}\n  finally {\n  forkJoinPool.shutdownNow();\n  otherForkJoinPool.shutdownNow();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 66,
        "startColumnNumber" : 83,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Confirm our fork-new-work-if-in-forkjoinpool logic works as expected. \n */\n@Test public void testExecuteFromTaskInDifferentPoolRunsInRightPool() throws Exception {\n  ForkJoinPool forkJoinPool=new ForkJoinPool();\n  ForkJoinPool otherForkJoinPool=new ForkJoinPool();\n  try {\n    ForkJoinQuiescingExecutor originalExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(forkJoinPool).build();\n    ForkJoinQuiescingExecutor otherExecutor=ForkJoinQuiescingExecutor.newBuilder().withOwnershipOf(otherForkJoinPool).build();\n    AtomicReference<ForkJoinPool> subtaskRanIn=new AtomicReference<>();\n    Runnable subTask=() -> subtaskRanIn.set(ForkJoinTask.getPool());\n    AtomicReference<ForkJoinPool> taskRanIn=new AtomicReference<>();\n    originalExecutor.execute(() -> {\n      taskRanIn.set(ForkJoinTask.getPool());\n      otherExecutor.execute(subTask);\n    }\n);\n    originalExecutor.awaitQuiescence(false);\n    otherExecutor.awaitQuiescence(false);\n    assertThat(taskRanIn.get()).isSameInstanceAs(forkJoinPool);\n    assertThat(subtaskRanIn.get()).isSameInstanceAs(otherForkJoinPool);\n  }\n  finally {\n    forkJoinPool.shutdownNow();\n    otherForkJoinPool.shutdownNow();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 38
      },
      "nodeContext" : "otherForkJoinPool.shutdownNow();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ForkJoinPool"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 73,
    "startColumnNumber" : 65,
    "endLineNumber" : 73,
    "endColumnNumber" : 82
  }, {
    "charLength" : 17,
    "startLineNumber" : 89,
    "startColumnNumber" : 54,
    "endLineNumber" : 89,
    "endColumnNumber" : 71
  }, {
    "charLength" : 17,
    "startLineNumber" : 93,
    "startColumnNumber" : 6,
    "endLineNumber" : 93,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}