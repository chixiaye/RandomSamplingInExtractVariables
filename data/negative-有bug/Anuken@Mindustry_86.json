{
  "id" : 86,
  "expression" : "params.rotation - 90",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/entities/part/RegionPart.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "params.rotation - 90",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 87,
      "startColumnNumber" : 90,
      "endLineNumber" : 87,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 89,
        "endLineNumber" : 87,
        "endColumnNumber" : 111
      },
      "nodeContext" : "(params.rotation - 90)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 87,
        "startColumnNumber" : 89,
        "endLineNumber" : 87,
        "endColumnNumber" : 126
      },
      "nodeContext" : "(params.rotation - 90) * Mathf.degRad",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 127
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 128
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int i=params.sideOverride == -1 ? s : params.sideOverride;\n  var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n  float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n  Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n  float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n  Draw.xscl*=sign;\n  if (outline && drawRegion) {\n    Draw.z(prevZ + outlineLayerOffset);\n    Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n    Draw.z(prevZ);\n  }\n  if (drawRegion && region.found()) {\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    if (mixColor != null && mixColorTo != null) {\n      Draw.mixcol(mixColor,mixColorTo,prog);\n    }\n else     if (mixColor != null) {\n      Draw.mixcol(mixColor,mixColor.a);\n    }\n    Draw.blend(blending);\n    Draw.rect(region,rx,ry,rot);\n    Draw.blend();\n    if (color != null)     Draw.color();\n  }\n  if (heat.found()) {\n    Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n  }\n  Draw.xscl*=sign;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1858,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int s=0; s < len; s++) {\n  int i=params.sideOverride == -1 ? s : params.sideOverride;\n  var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n  float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n  Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n  float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n  Draw.xscl*=sign;\n  if (outline && drawRegion) {\n    Draw.z(prevZ + outlineLayerOffset);\n    Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n    Draw.z(prevZ);\n  }\n  if (drawRegion && region.found()) {\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    if (mixColor != null && mixColorTo != null) {\n      Draw.mixcol(mixColor,mixColorTo,prog);\n    }\n else     if (mixColor != null) {\n      Draw.mixcol(mixColor,mixColor.a);\n    }\n    Draw.blend(blending);\n    Draw.rect(region,rx,ry,rot);\n    Draw.blend();\n    if (color != null)     Draw.color();\n  }\n  if (heat.found()) {\n    Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n  }\n  Draw.xscl*=sign;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 303,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3669,
        "startLineNumber" : 57,
        "startColumnNumber" : 39,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prevZ=Draw.z();\n  float prog=progress.getClamp(params);\n  float mx=moveX * prog, my=moveY * prog, mr=moveRot * prog + rotation;\n  if (moves.size > 0) {\n    for (int i=0; i < moves.size; i++) {\n      var move=moves.get(i);\n      float p=move.progress.getClamp(params);\n      mx+=move.x * p;\n      my+=move.y * p;\n      mr+=move.rot * p;\n    }\n  }\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n    Draw.xscl*=sign;\n    if (outline && drawRegion) {\n      Draw.z(prevZ + outlineLayerOffset);\n      Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n      Draw.z(prevZ);\n    }\n    if (drawRegion && region.found()) {\n      if (color != null && colorTo != null) {\n        Draw.color(color,colorTo,prog);\n      }\n else       if (color != null) {\n        Draw.color(color);\n      }\n      if (mixColor != null && mixColorTo != null) {\n        Draw.mixcol(mixColor,mixColorTo,prog);\n      }\n else       if (mixColor != null) {\n        Draw.mixcol(mixColor,mixColor.a);\n      }\n      Draw.blend(blending);\n      Draw.rect(region,rx,ry,rot);\n      Draw.blend();\n      if (color != null)       Draw.color();\n    }\n    if (heat.found()) {\n      Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n    }\n    Draw.xscl*=sign;\n  }\n  Draw.color();\n  Draw.mixcol();\n  Draw.z(z);\n  if (children.size > 0) {\n    for (int s=0; s < len; s++) {\n      int i=(params.sideOverride == -1 ? s : params.sideOverride);\n      float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n      Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n      childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n      childParam.sideMultiplier=params.sideMultiplier;\n      childParam.life=params.life;\n      childParam.sideOverride=i;\n      for (      var child : children) {\n        child.draw(childParam);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 629,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3719,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(PartParams params){\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prevZ=Draw.z();\n  float prog=progress.getClamp(params);\n  float mx=moveX * prog, my=moveY * prog, mr=moveRot * prog + rotation;\n  if (moves.size > 0) {\n    for (int i=0; i < moves.size; i++) {\n      var move=moves.get(i);\n      float p=move.progress.getClamp(params);\n      mx+=move.x * p;\n      my+=move.y * p;\n      mr+=move.rot * p;\n    }\n  }\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n    Draw.xscl*=sign;\n    if (outline && drawRegion) {\n      Draw.z(prevZ + outlineLayerOffset);\n      Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n      Draw.z(prevZ);\n    }\n    if (drawRegion && region.found()) {\n      if (color != null && colorTo != null) {\n        Draw.color(color,colorTo,prog);\n      }\n else       if (color != null) {\n        Draw.color(color);\n      }\n      if (mixColor != null && mixColorTo != null) {\n        Draw.mixcol(mixColor,mixColorTo,prog);\n      }\n else       if (mixColor != null) {\n        Draw.mixcol(mixColor,mixColor.a);\n      }\n      Draw.blend(blending);\n      Draw.rect(region,rx,ry,rot);\n      Draw.blend();\n      if (color != null)       Draw.color();\n    }\n    if (heat.found()) {\n      Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n    }\n    Draw.xscl*=sign;\n  }\n  Draw.color();\n  Draw.mixcol();\n  Draw.z(z);\n  if (children.size > 0) {\n    for (int s=0; s < len; s++) {\n      int i=(params.sideOverride == -1 ? s : params.sideOverride);\n      float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n      Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n      childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n      childParam.sideMultiplier=params.sideMultiplier;\n      childParam.life=params.life;\n      childParam.sideOverride=i;\n      for (      var child : children) {\n        child.draw(childParam);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 639,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 128
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "float"
  }, {
    "nodeContext" : "params.rotation - 90",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 139,
      "startColumnNumber" : 68,
      "endLineNumber" : 139,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 139,
        "startColumnNumber" : 67,
        "endLineNumber" : 139,
        "endColumnNumber" : 89
      },
      "nodeContext" : "(params.rotation - 90)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 139,
        "startColumnNumber" : 67,
        "endLineNumber" : 139,
        "endColumnNumber" : 104
      },
      "nodeContext" : "(params.rotation - 90) * Mathf.degRad",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 139,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 105
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 139,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 136,
        "startColumnNumber" : 40,
        "endLineNumber" : 148,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int i=(params.sideOverride == -1 ? s : params.sideOverride);\n  float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n  Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n  childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n  childParam.sideMultiplier=params.sideMultiplier;\n  childParam.life=params.life;\n  childParam.sideOverride=i;\n  for (  var child : children) {\n    child.draw(childParam);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 148,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int s=0; s < len; s++) {\n  int i=(params.sideOverride == -1 ? s : params.sideOverride);\n  float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n  Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n  childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n  childParam.sideMultiplier=params.sideMultiplier;\n  childParam.life=params.life;\n  childParam.sideOverride=i;\n  for (  var child : children) {\n    child.draw(childParam);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 135,
        "startColumnNumber" : 29,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int s=0; s < len; s++) {\n    int i=(params.sideOverride == -1 ? s : params.sideOverride);\n    float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n    childParam.sideMultiplier=params.sideMultiplier;\n    childParam.life=params.life;\n    childParam.sideOverride=i;\n    for (    var child : children) {\n      child.draw(childParam);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 833,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (children.size > 0) {\n  for (int s=0; s < len; s++) {\n    int i=(params.sideOverride == -1 ? s : params.sideOverride);\n    float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n    childParam.sideMultiplier=params.sideMultiplier;\n    childParam.life=params.life;\n    childParam.sideOverride=i;\n    for (    var child : children) {\n      child.draw(childParam);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3669,
        "startLineNumber" : 57,
        "startColumnNumber" : 39,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prevZ=Draw.z();\n  float prog=progress.getClamp(params);\n  float mx=moveX * prog, my=moveY * prog, mr=moveRot * prog + rotation;\n  if (moves.size > 0) {\n    for (int i=0; i < moves.size; i++) {\n      var move=moves.get(i);\n      float p=move.progress.getClamp(params);\n      mx+=move.x * p;\n      my+=move.y * p;\n      mr+=move.rot * p;\n    }\n  }\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n    Draw.xscl*=sign;\n    if (outline && drawRegion) {\n      Draw.z(prevZ + outlineLayerOffset);\n      Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n      Draw.z(prevZ);\n    }\n    if (drawRegion && region.found()) {\n      if (color != null && colorTo != null) {\n        Draw.color(color,colorTo,prog);\n      }\n else       if (color != null) {\n        Draw.color(color);\n      }\n      if (mixColor != null && mixColorTo != null) {\n        Draw.mixcol(mixColor,mixColorTo,prog);\n      }\n else       if (mixColor != null) {\n        Draw.mixcol(mixColor,mixColor.a);\n      }\n      Draw.blend(blending);\n      Draw.rect(region,rx,ry,rot);\n      Draw.blend();\n      if (color != null)       Draw.color();\n    }\n    if (heat.found()) {\n      Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n    }\n    Draw.xscl*=sign;\n  }\n  Draw.color();\n  Draw.mixcol();\n  Draw.z(z);\n  if (children.size > 0) {\n    for (int s=0; s < len; s++) {\n      int i=(params.sideOverride == -1 ? s : params.sideOverride);\n      float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n      Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n      childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n      childParam.sideMultiplier=params.sideMultiplier;\n      childParam.life=params.life;\n      childParam.sideOverride=i;\n      for (      var child : children) {\n        child.draw(childParam);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 629,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3719,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(PartParams params){\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prevZ=Draw.z();\n  float prog=progress.getClamp(params);\n  float mx=moveX * prog, my=moveY * prog, mr=moveRot * prog + rotation;\n  if (moves.size > 0) {\n    for (int i=0; i < moves.size; i++) {\n      var move=moves.get(i);\n      float p=move.progress.getClamp(params);\n      mx+=move.x * p;\n      my+=move.y * p;\n      mr+=move.rot * p;\n    }\n  }\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    var region=drawRegion ? regions[Math.min(i,regions.length - 1)] : null;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + mx) * sign * Draw.xscl,(y + my) * Draw.yscl).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y, rot=mr * sign + params.rotation - 90;\n    Draw.xscl*=sign;\n    if (outline && drawRegion) {\n      Draw.z(prevZ + outlineLayerOffset);\n      Draw.rect(outlines[Math.min(i,regions.length - 1)],rx,ry,rot);\n      Draw.z(prevZ);\n    }\n    if (drawRegion && region.found()) {\n      if (color != null && colorTo != null) {\n        Draw.color(color,colorTo,prog);\n      }\n else       if (color != null) {\n        Draw.color(color);\n      }\n      if (mixColor != null && mixColorTo != null) {\n        Draw.mixcol(mixColor,mixColorTo,prog);\n      }\n else       if (mixColor != null) {\n        Draw.mixcol(mixColor,mixColor.a);\n      }\n      Draw.blend(blending);\n      Draw.rect(region,rx,ry,rot);\n      Draw.blend();\n      if (color != null)       Draw.color();\n    }\n    if (heat.found()) {\n      Drawf.additive(heat,heatColor.write(Tmp.c1).a(heatProgress.getClamp(params) * heatColor.a),rx,ry,rot,turretShading ? turretHeatLayer : Draw.z() + heatLayerOffset);\n    }\n    Draw.xscl*=sign;\n  }\n  Draw.color();\n  Draw.mixcol();\n  Draw.z(z);\n  if (children.size > 0) {\n    for (int s=0; s < len; s++) {\n      int i=(params.sideOverride == -1 ? s : params.sideOverride);\n      float sign=(i == 1 ? -1 : 1) * params.sideMultiplier;\n      Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n      childParam.set(params.warmup,params.reload,params.smoothReload,params.heat,params.recoil,params.charge,params.x + Tmp.v1.x,params.y + Tmp.v1.y,i * sign + mr * sign + params.rotation);\n      childParam.sideMultiplier=params.sideMultiplier;\n      childParam.life=params.life;\n      childParam.sideOverride=i;\n      for (      var child : children) {\n        child.draw(childParam);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 639,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 139,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Tmp.v1.set((x + mx) * sign,y + my).rotateRadExact((params.rotation - 90) * Mathf.degRad);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 87,
    "startColumnNumber" : 90,
    "endLineNumber" : 87,
    "endColumnNumber" : 110
  }, {
    "charLength" : 20,
    "startLineNumber" : 139,
    "startColumnNumber" : 68,
    "endLineNumber" : 139,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}