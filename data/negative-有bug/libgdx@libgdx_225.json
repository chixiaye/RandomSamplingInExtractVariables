{
  "id" : 225,
  "expression" : "nRemaining != 0",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/utils/ComparableTimSort.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nRemaining != 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 113,
      "startColumnNumber" : 11,
      "endLineNumber" : 113,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 28
      },
      "nodeContext" : "do {\n  int runLen=countRunAndMakeAscending(a,lo,hi);\n  if (runLen < minRun) {\n    int force=nRemaining <= minRun ? nRemaining : minRun;\n    binarySort(a,lo,lo + force,lo + runLen);\n    runLen=force;\n  }\n  pushRun(lo,runLen);\n  mergeCollapse();\n  lo+=runLen;\n  nRemaining-=runLen;\n}\n while (nRemaining != 0);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 76,
        "startColumnNumber" : 49,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  stackSize=0;\n  rangeCheck(a.length,lo,hi);\n  int nRemaining=hi - lo;\n  if (nRemaining < 2)   return;\n  if (nRemaining < MIN_MERGE) {\n    int initRunLen=countRunAndMakeAscending(a,lo,hi);\n    binarySort(a,lo,hi,lo + initRunLen);\n    return;\n  }\n  this.a=a;\n  tmpCount=0;\n  int minRun=minRunLength(nRemaining);\n  do {\n    int runLen=countRunAndMakeAscending(a,lo,hi);\n    if (runLen < minRun) {\n      int force=nRemaining <= minRun ? nRemaining : minRun;\n      binarySort(a,lo,lo + force,lo + runLen);\n      runLen=force;\n    }\n    pushRun(lo,runLen);\n    mergeCollapse();\n    lo+=runLen;\n    nRemaining-=runLen;\n  }\n while (nRemaining != 0);\n  if (DEBUG)   assert lo == hi;\n  mergeForceCollapse();\n  if (DEBUG)   assert stackSize == 1;\n  this.a=null;\n  Object[] tmp=this.tmp;\n  for (int i=0, n=tmpCount; i < n; i++)   tmp[i]=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1453,
        "startLineNumber" : 76,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void doSort(Object[] a,int lo,int hi){\n  stackSize=0;\n  rangeCheck(a.length,lo,hi);\n  int nRemaining=hi - lo;\n  if (nRemaining < 2)   return;\n  if (nRemaining < MIN_MERGE) {\n    int initRunLen=countRunAndMakeAscending(a,lo,hi);\n    binarySort(a,lo,hi,lo + initRunLen);\n    return;\n  }\n  this.a=a;\n  tmpCount=0;\n  int minRun=minRunLength(nRemaining);\n  do {\n    int runLen=countRunAndMakeAscending(a,lo,hi);\n    if (runLen < minRun) {\n      int force=nRemaining <= minRun ? nRemaining : minRun;\n      binarySort(a,lo,lo + force,lo + runLen);\n      runLen=force;\n    }\n    pushRun(lo,runLen);\n    mergeCollapse();\n    lo+=runLen;\n    nRemaining-=runLen;\n  }\n while (nRemaining != 0);\n  if (DEBUG)   assert lo == hi;\n  mergeForceCollapse();\n  if (DEBUG)   assert stackSize == 1;\n  this.a=null;\n  Object[] tmp=this.tmp;\n  for (int i=0, n=tmpCount; i < n; i++)   tmp[i]=null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 28
      },
      "nodeContext" : "do {\n  int runLen=countRunAndMakeAscending(a,lo,hi);\n  if (runLen < minRun) {\n    int force=nRemaining <= minRun ? nRemaining : minRun;\n    binarySort(a,lo,lo + force,lo + runLen);\n    runLen=force;\n  }\n  pushRun(lo,runLen);\n  mergeCollapse();\n  lo+=runLen;\n  nRemaining-=runLen;\n}\n while (nRemaining != 0);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 113,
    "startColumnNumber" : 11,
    "endLineNumber" : 113,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}