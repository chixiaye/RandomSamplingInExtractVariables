{
  "id" : 304,
  "expression" : "\"rowKey_value\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/hbase/src/test/java/org/apache/pulsar/io/hbase/sink/HbaseGenericRecordSinkTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"rowKey_value\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 109,
      "startColumnNumber" : 22,
      "endLineNumber" : 109,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 37
      },
      "nodeContext" : "obj.setRowKey(\"rowKey_value\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 38
      },
      "nodeContext" : "obj.setRowKey(\"rowKey_value\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3953,
        "startLineNumber" : 85,
        "startColumnNumber" : 56,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  message=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Map<String,Object> map=new HashMap<>();\n  map.put(\"zookeeperQuorum\",\"localhost\");\n  map.put(\"zookeeperClientPort\",\"2181\");\n  map.put(\"zookeeperZnodeParent\",\"/hbase\");\n  map.put(\"tableName\",\"default:pulsar_hbase\");\n  map.put(\"rowKeyName\",rowKeyName);\n  map.put(\"familyName\",familyName);\n  List<String> qualifierNames=new ArrayList<>();\n  qualifierNames.add(name);\n  qualifierNames.add(address);\n  qualifierNames.add(age);\n  qualifierNames.add(flag);\n  map.put(\"qualifierNames\",qualifierNames);\n  mockSinkContext=mock(SinkContext.class);\n  HbaseGenericRecordSink sink=new HbaseGenericRecordSink();\n  Foo obj=new Foo();\n  obj.setRowKey(\"rowKey_value\");\n  obj.setName(\"name_value\");\n  obj.setAddress(\"address_value\");\n  obj.setAge(30);\n  obj.setFlag(true);\n  AvroSchema<Foo> schema=AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).build());\n  byte[] bytes=schema.encode(obj);\n  AutoConsumeSchema autoConsumeSchema=new AutoConsumeSchema();\n  autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n  PulsarSourceConfig pulsarSourceConfig=mock(PulsarSourceConfig.class);\n  Consumer consumer=mock(Consumer.class);\n  Record<GenericRecord> record=PulsarRecord.<GenericRecord>builder().message(message).topicName(\"fake_topic_name\").ackFunction(() -> {\n    if (pulsarSourceConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n      consumer.acknowledgeCumulativeAsync(message);\n    }\n else {\n      consumer.acknowledgeAsync(message);\n    }\n  }\n).failFunction(() -> {\n    if (pulsarSourceConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n      throw new RuntimeException(\"Failed to process message: \" + message.getMessageId());\n    }\n  }\n).build();\n  genericAvroSchema=new GenericAvroSchema(schema.getSchemaInfo());\n  when(message.getValue()).thenReturn(genericAvroSchema.decode(bytes));\n  log.info(\"foo:{}, Message.getValue: {}, record.getValue: {}\",obj.toString(),message.getValue().toString(),record.getValue().toString());\n  map.put(\"batchTimeMs\",1);\n  map.put(\"batchSize\",1);\n  sink.open(map,mockSinkContext);\n  sink.write(record);\n  log.info(\"executed write\");\n  Thread.sleep(500);\n  Table table=TableUtils.getTable(map);\n  Get scan=new Get(Bytes.toBytes(obj.getRowKey()));\n  Result result=table.get(scan);\n  byte[] byteName=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(name));\n  byte[] byteAddress=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(address));\n  byte[] byteAge=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(age));\n  byte[] byteFlag=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(flag));\n  Assert.assertEquals(obj.getName(),Bytes.toString(byteName));\n  Assert.assertEquals(obj.getAddress(),Bytes.toString(byteAddress));\n  Assert.assertEquals(obj.getAge(),Bytes.toInt(byteAge));\n  Assert.assertEquals(obj.isFlag(),Bytes.toBoolean(byteFlag));\n  table.close();\n  sink.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 520,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4032,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 177,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(enabled=false) public void TestOpenAndWriteSink() throws Exception {\n  message=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Map<String,Object> map=new HashMap<>();\n  map.put(\"zookeeperQuorum\",\"localhost\");\n  map.put(\"zookeeperClientPort\",\"2181\");\n  map.put(\"zookeeperZnodeParent\",\"/hbase\");\n  map.put(\"tableName\",\"default:pulsar_hbase\");\n  map.put(\"rowKeyName\",rowKeyName);\n  map.put(\"familyName\",familyName);\n  List<String> qualifierNames=new ArrayList<>();\n  qualifierNames.add(name);\n  qualifierNames.add(address);\n  qualifierNames.add(age);\n  qualifierNames.add(flag);\n  map.put(\"qualifierNames\",qualifierNames);\n  mockSinkContext=mock(SinkContext.class);\n  HbaseGenericRecordSink sink=new HbaseGenericRecordSink();\n  Foo obj=new Foo();\n  obj.setRowKey(\"rowKey_value\");\n  obj.setName(\"name_value\");\n  obj.setAddress(\"address_value\");\n  obj.setAge(30);\n  obj.setFlag(true);\n  AvroSchema<Foo> schema=AvroSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).build());\n  byte[] bytes=schema.encode(obj);\n  AutoConsumeSchema autoConsumeSchema=new AutoConsumeSchema();\n  autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n  PulsarSourceConfig pulsarSourceConfig=mock(PulsarSourceConfig.class);\n  Consumer consumer=mock(Consumer.class);\n  Record<GenericRecord> record=PulsarRecord.<GenericRecord>builder().message(message).topicName(\"fake_topic_name\").ackFunction(() -> {\n    if (pulsarSourceConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n      consumer.acknowledgeCumulativeAsync(message);\n    }\n else {\n      consumer.acknowledgeAsync(message);\n    }\n  }\n).failFunction(() -> {\n    if (pulsarSourceConfig.getProcessingGuarantees() == FunctionConfig.ProcessingGuarantees.EFFECTIVELY_ONCE) {\n      throw new RuntimeException(\"Failed to process message: \" + message.getMessageId());\n    }\n  }\n).build();\n  genericAvroSchema=new GenericAvroSchema(schema.getSchemaInfo());\n  when(message.getValue()).thenReturn(genericAvroSchema.decode(bytes));\n  log.info(\"foo:{}, Message.getValue: {}, record.getValue: {}\",obj.toString(),message.getValue().toString(),record.getValue().toString());\n  map.put(\"batchTimeMs\",1);\n  map.put(\"batchSize\",1);\n  sink.open(map,mockSinkContext);\n  sink.write(record);\n  log.info(\"executed write\");\n  Thread.sleep(500);\n  Table table=TableUtils.getTable(map);\n  Get scan=new Get(Bytes.toBytes(obj.getRowKey()));\n  Result result=table.get(scan);\n  byte[] byteName=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(name));\n  byte[] byteAddress=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(address));\n  byte[] byteAge=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(age));\n  byte[] byteFlag=result.getValue(Bytes.toBytes(familyName),Bytes.toBytes(flag));\n  Assert.assertEquals(obj.getName(),Bytes.toString(byteName));\n  Assert.assertEquals(obj.getAddress(),Bytes.toString(byteAddress));\n  Assert.assertEquals(obj.getAge(),Bytes.toInt(byteAge));\n  Assert.assertEquals(obj.isFlag(),Bytes.toBoolean(byteFlag));\n  table.close();\n  sink.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 531,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 38
      },
      "nodeContext" : "obj.setRowKey(\"rowKey_value\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 109,
    "startColumnNumber" : 22,
    "endLineNumber" : 109,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}