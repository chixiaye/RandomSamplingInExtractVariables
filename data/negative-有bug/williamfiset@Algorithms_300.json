{
  "id" : 300,
  "expression" : "fwSolver",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolverTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fwSolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 167,
      "startColumnNumber" : 8,
      "endLineNumber" : 167,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 24
      },
      "nodeContext" : "fwSolver.solve()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 25
      },
      "nodeContext" : "fwSolver.solve();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 861,
        "startLineNumber" : 161,
        "startColumnNumber" : 52,
        "endLineNumber" : 182,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double[][] m=createMatrix(n);\n  int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n  addRandomEdges(m,numRandomEdges,true);\n  FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n  fwSolver.solve();\n  for (int s=0; s < n; s++) {\n    BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n    for (int e=0; e < n; e++) {\n      List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n      List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n      if ((fwp == null) ^ (bfp == null)) {\n        org.junit.Assert.fail(\"Mismatch.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int trail=1; trail <= TRAILS; trail++) {\n  double[][] m=createMatrix(n);\n  int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n  addRandomEdges(m,numRandomEdges,true);\n  FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n  fwSolver.solve();\n  for (int s=0; s < n; s++) {\n    BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n    for (int e=0; e < n; e++) {\n      List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n      List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n      if ((fwp == null) ^ (bfp == null)) {\n        org.junit.Assert.fail(\"Mismatch.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 160,
        "startColumnNumber" : 34,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int trail=1; trail <= TRAILS; trail++) {\n    double[][] m=createMatrix(n);\n    int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n    addRandomEdges(m,numRandomEdges,true);\n    FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n    fwSolver.solve();\n    for (int s=0; s < n; s++) {\n      BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n      for (int e=0; e < n; e++) {\n        List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n        List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n        if ((fwp == null) ^ (bfp == null)) {\n          org.junit.Assert.fail(\"Mismatch.\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=2; n <= 25; n++) {\n  for (int trail=1; trail <= TRAILS; trail++) {\n    double[][] m=createMatrix(n);\n    int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n    addRandomEdges(m,numRandomEdges,true);\n    FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n    fwSolver.solve();\n    for (int s=0; s < n; s++) {\n      BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n      for (int e=0; e < n; e++) {\n        List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n        List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n        if ((fwp == null) ^ (bfp == null)) {\n          org.junit.Assert.fail(\"Mismatch.\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 149,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 158,
        "startColumnNumber" : 73,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TRAILS=50;\n  for (int n=2; n <= 25; n++) {\n    for (int trail=1; trail <= TRAILS; trail++) {\n      double[][] m=createMatrix(n);\n      int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n      addRandomEdges(m,numRandomEdges,true);\n      FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n      fwSolver.solve();\n      for (int s=0; s < n; s++) {\n        BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n        for (int e=0; e < n; e++) {\n          List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n          List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n          if ((fwp == null) ^ (bfp == null)) {\n            org.junit.Assert.fail(\"Mismatch.\");\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPathReconstructionBellmanFord_nonNegativeEdgeWeights(){\n  final int TRAILS=50;\n  for (int n=2; n <= 25; n++) {\n    for (int trail=1; trail <= TRAILS; trail++) {\n      double[][] m=createMatrix(n);\n      int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n      addRandomEdges(m,numRandomEdges,true);\n      FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n      fwSolver.solve();\n      for (int s=0; s < n; s++) {\n        BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n        for (int e=0; e < n; e++) {\n          List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n          List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n          if ((fwp == null) ^ (bfp == null)) {\n            org.junit.Assert.fail(\"Mismatch.\");\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 25
      },
      "nodeContext" : "fwSolver.solve();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.graphtheory.FloydWarshallSolver"
  }, {
    "nodeContext" : "fwSolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 175,
      "startColumnNumber" : 32,
      "endLineNumber" : 175,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 175,
        "startColumnNumber" : 32,
        "endLineNumber" : 175,
        "endColumnNumber" : 70
      },
      "nodeContext" : "fwSolver.reconstructShortestPath(s,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 175,
        "startColumnNumber" : 26,
        "endLineNumber" : 175,
        "endColumnNumber" : 70
      },
      "nodeContext" : "fwp=fwSolver.reconstructShortestPath(s,e)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 175,
        "startColumnNumber" : 12,
        "endLineNumber" : 175,
        "endColumnNumber" : 71
      },
      "nodeContext" : "List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 171,
        "startColumnNumber" : 38,
        "endLineNumber" : 180,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n  List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n  if ((fwp == null) ^ (bfp == null)) {\n    org.junit.Assert.fail(\"Mismatch.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 450,
        "startLineNumber" : 171,
        "startColumnNumber" : 10,
        "endLineNumber" : 180,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (int e=0; e < n; e++) {\n  List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n  List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n  if ((fwp == null) ^ (bfp == null)) {\n    org.junit.Assert.fail(\"Mismatch.\");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 169,
        "startColumnNumber" : 36,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n  for (int e=0; e < n; e++) {\n    List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n    List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n    if ((fwp == null) ^ (bfp == null)) {\n      org.junit.Assert.fail(\"Mismatch.\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 169,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int s=0; s < n; s++) {\n  BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n  for (int e=0; e < n; e++) {\n    List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n    List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n    if ((fwp == null) ^ (bfp == null)) {\n      org.junit.Assert.fail(\"Mismatch.\");\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 861,
        "startLineNumber" : 161,
        "startColumnNumber" : 52,
        "endLineNumber" : 182,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double[][] m=createMatrix(n);\n  int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n  addRandomEdges(m,numRandomEdges,true);\n  FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n  fwSolver.solve();\n  for (int s=0; s < n; s++) {\n    BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n    for (int e=0; e < n; e++) {\n      List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n      List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n      if ((fwp == null) ^ (bfp == null)) {\n        org.junit.Assert.fail(\"Mismatch.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 907,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int trail=1; trail <= TRAILS; trail++) {\n  double[][] m=createMatrix(n);\n  int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n  addRandomEdges(m,numRandomEdges,true);\n  FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n  fwSolver.solve();\n  for (int s=0; s < n; s++) {\n    BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n    for (int e=0; e < n; e++) {\n      List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n      List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n      if ((fwp == null) ^ (bfp == null)) {\n        org.junit.Assert.fail(\"Mismatch.\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 137,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 160,
        "startColumnNumber" : 34,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int trail=1; trail <= TRAILS; trail++) {\n    double[][] m=createMatrix(n);\n    int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n    addRandomEdges(m,numRandomEdges,true);\n    FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n    fwSolver.solve();\n    for (int s=0; s < n; s++) {\n      BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n      for (int e=0; e < n; e++) {\n        List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n        List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n        if ((fwp == null) ^ (bfp == null)) {\n          org.junit.Assert.fail(\"Mismatch.\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=2; n <= 25; n++) {\n  for (int trail=1; trail <= TRAILS; trail++) {\n    double[][] m=createMatrix(n);\n    int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n    addRandomEdges(m,numRandomEdges,true);\n    FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n    fwSolver.solve();\n    for (int s=0; s < n; s++) {\n      BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n      for (int e=0; e < n; e++) {\n        List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n        List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n        if ((fwp == null) ^ (bfp == null)) {\n          org.junit.Assert.fail(\"Mismatch.\");\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 149,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 158,
        "startColumnNumber" : 73,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int TRAILS=50;\n  for (int n=2; n <= 25; n++) {\n    for (int trail=1; trail <= TRAILS; trail++) {\n      double[][] m=createMatrix(n);\n      int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n      addRandomEdges(m,numRandomEdges,true);\n      FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n      fwSolver.solve();\n      for (int s=0; s < n; s++) {\n        BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n        for (int e=0; e < n; e++) {\n          List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n          List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n          if ((fwp == null) ^ (bfp == null)) {\n            org.junit.Assert.fail(\"Mismatch.\");\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPathReconstructionBellmanFord_nonNegativeEdgeWeights(){\n  final int TRAILS=50;\n  for (int n=2; n <= 25; n++) {\n    for (int trail=1; trail <= TRAILS; trail++) {\n      double[][] m=createMatrix(n);\n      int numRandomEdges=Math.max(1,(int)(Math.random() * n * n));\n      addRandomEdges(m,numRandomEdges,true);\n      FloydWarshallSolver fwSolver=new FloydWarshallSolver(m);\n      fwSolver.solve();\n      for (int s=0; s < n; s++) {\n        BellmanFordAdjacencyMatrix bfSolver=new BellmanFordAdjacencyMatrix(s,m);\n        for (int e=0; e < n; e++) {\n          List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n          List<Integer> bfp=bfSolver.reconstructShortestPath(e);\n          if ((fwp == null) ^ (bfp == null)) {\n            org.junit.Assert.fail(\"Mismatch.\");\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 175,
        "startColumnNumber" : 12,
        "endLineNumber" : 175,
        "endColumnNumber" : 71
      },
      "nodeContext" : "List<Integer> fwp=fwSolver.reconstructShortestPath(s,e);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.graphtheory.FloydWarshallSolver"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 167,
    "startColumnNumber" : 8,
    "endLineNumber" : 167,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 175,
    "startColumnNumber" : 32,
    "endLineNumber" : 175,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}