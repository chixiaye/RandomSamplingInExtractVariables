{
  "id" : 60,
  "expression" : "new StringSet(sz)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/bloomfilter/BloomFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new StringSet(sz)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 80,
      "startColumnNumber" : 24,
      "endLineNumber" : 80,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 80,
        "startColumnNumber" : 18,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "set=new StringSet(sz)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "StringSet set=new StringSet(sz);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 708,
        "startLineNumber" : 78,
        "startColumnNumber" : 51,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  StringSet set=new StringSet(sz);\n  Set<String> javaset=new HashSet<>();\n  for (int l=0; l < loops; l++) {\n    String randStr=randomString(sz);\n    javaset.add(randStr);\n    set.add(randStr);\n  }\n  for (  String s : javaset)   assertTrue(set.contains(s));\n  for (int l=0; l < 100; l++) {\n    String randStr=randomString(sz);\n    if (!randStr.contains(randStr)) {\n      assertFalse(set.contains(randStr));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 753,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int loops=5; loops <= 50; loops+=5) {\n  StringSet set=new StringSet(sz);\n  Set<String> javaset=new HashSet<>();\n  for (int l=0; l < loops; l++) {\n    String randStr=randomString(sz);\n    javaset.add(randStr);\n    set.add(randStr);\n  }\n  for (  String s : javaset)   assertTrue(set.contains(s));\n  for (int l=0; l < 100; l++) {\n    String randStr=randomString(sz);\n    if (!randStr.contains(randStr)) {\n      assertFalse(set.contains(randStr));\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 768,
        "startLineNumber" : 76,
        "startColumnNumber" : 37,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int loops=5; loops <= 50; loops+=5) {\n    StringSet set=new StringSet(sz);\n    Set<String> javaset=new HashSet<>();\n    for (int l=0; l < loops; l++) {\n      String randStr=randomString(sz);\n      javaset.add(randStr);\n      set.add(randStr);\n    }\n    for (    String s : javaset)     assertTrue(set.contains(s));\n    for (int l=0; l < 100; l++) {\n      String randStr=randomString(sz);\n      if (!randStr.contains(randStr)) {\n        assertFalse(set.contains(randStr));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int sz=1; sz <= 10; sz++) {\n  for (int loops=5; loops <= 50; loops+=5) {\n    StringSet set=new StringSet(sz);\n    Set<String> javaset=new HashSet<>();\n    for (int l=0; l < loops; l++) {\n      String randStr=randomString(sz);\n      javaset.add(randStr);\n      set.add(randStr);\n    }\n    for (    String s : javaset)     assertTrue(set.contains(s));\n    for (int l=0; l < 100; l++) {\n      String randStr=randomString(sz);\n      if (!randStr.contains(randStr)) {\n        assertFalse(set.contains(randStr));\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 74,
        "startColumnNumber" : 30,
        "endLineNumber" : 102,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int sz=1; sz <= 10; sz++) {\n    for (int loops=5; loops <= 50; loops+=5) {\n      StringSet set=new StringSet(sz);\n      Set<String> javaset=new HashSet<>();\n      for (int l=0; l < loops; l++) {\n        String randStr=randomString(sz);\n        javaset.add(randStr);\n        set.add(randStr);\n      }\n      for (      String s : javaset)       assertTrue(set.contains(s));\n      for (int l=0; l < 100; l++) {\n        String randStr=randomString(sz);\n        if (!randStr.contains(randStr)) {\n          assertFalse(set.contains(randStr));\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void containsTests(){\n  for (int sz=1; sz <= 10; sz++) {\n    for (int loops=5; loops <= 50; loops+=5) {\n      StringSet set=new StringSet(sz);\n      Set<String> javaset=new HashSet<>();\n      for (int l=0; l < loops; l++) {\n        String randStr=randomString(sz);\n        javaset.add(randStr);\n        set.add(randStr);\n      }\n      for (      String s : javaset)       assertTrue(set.contains(s));\n      for (int l=0; l < 100; l++) {\n        String randStr=randomString(sz);\n        if (!randStr.contains(randStr)) {\n          assertFalse(set.contains(randStr));\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "StringSet set=new StringSet(sz);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.williamfiset.algorithms.datastructures.bloomfilter.StringSet"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 80,
    "startColumnNumber" : 24,
    "endLineNumber" : 80,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}