{
  "id" : 229,
  "expression" : "converted",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/internal/WebElementToJsonConverter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "converted",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 79,
      "startColumnNumber" : 8,
      "endLineNumber" : 79,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 60
      },
      "nodeContext" : "converted.put((String)key,apply(entry.getValue()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 61
      },
      "nodeContext" : "converted.put((String)key,apply(entry.getValue()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 73,
        "startColumnNumber" : 52,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Object key=entry.getKey();\n  if (!(key instanceof String)) {\n    throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n  }\n  converted.put((String)key,apply(entry.getValue()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Map.Entry<?,?> entry : args.entrySet()) {\n  Object key=entry.getKey();\n  if (!(key instanceof String)) {\n    throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n  }\n  converted.put((String)key,apply(entry.getValue()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 70,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<?,?> args=(Map<?,?>)arg;\n  Map<String,Object> converted=new HashMap<>(args.size());\n  for (  Map.Entry<?,?> entry : args.entrySet()) {\n    Object key=entry.getKey();\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n    }\n    converted.put((String)key,apply(entry.getValue()));\n  }\n  return converted;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (arg instanceof Map<?,?>) {\n  Map<?,?> args=(Map<?,?>)arg;\n  Map<String,Object> converted=new HashMap<>(args.size());\n  for (  Map.Entry<?,?> entry : args.entrySet()) {\n    Object key=entry.getKey();\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n    }\n    converted.put((String)key,apply(entry.getValue()));\n  }\n  return converted;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 45,
        "startColumnNumber" : 34,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (arg == null || arg instanceof String || arg instanceof Boolean || arg instanceof Number) {\n    return arg;\n  }\n  while (arg instanceof WrapsElement) {\n    arg=((WrapsElement)arg).getWrappedElement();\n  }\n  if (arg instanceof RemoteWebElement) {\n    return ImmutableMap.of(Dialect.OSS.getEncodedElementKey(),((RemoteWebElement)arg).getId(),Dialect.W3C.getEncodedElementKey(),((RemoteWebElement)arg).getId());\n  }\n  if (arg.getClass().isArray()) {\n    arg=Arrays.asList((Object[])arg);\n  }\n  if (arg instanceof Collection<?>) {\n    Collection<?> args=(Collection<?>)arg;\n    return args.stream().map(this).collect(toList());\n  }\n  if (arg instanceof Map<?,?>) {\n    Map<?,?> args=(Map<?,?>)arg;\n    Map<String,Object> converted=new HashMap<>(args.size());\n    for (    Map.Entry<?,?> entry : args.entrySet()) {\n      Object key=entry.getKey();\n      if (!(key instanceof String)) {\n        throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n      }\n      converted.put((String)key,apply(entry.getValue()));\n    }\n    return converted;\n  }\n  throw new IllegalArgumentException(\"Argument is of an illegal type: \" + arg.getClass().getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Object apply(Object arg){\n  if (arg == null || arg instanceof String || arg instanceof Boolean || arg instanceof Number) {\n    return arg;\n  }\n  while (arg instanceof WrapsElement) {\n    arg=((WrapsElement)arg).getWrappedElement();\n  }\n  if (arg instanceof RemoteWebElement) {\n    return ImmutableMap.of(Dialect.OSS.getEncodedElementKey(),((RemoteWebElement)arg).getId(),Dialect.W3C.getEncodedElementKey(),((RemoteWebElement)arg).getId());\n  }\n  if (arg.getClass().isArray()) {\n    arg=Arrays.asList((Object[])arg);\n  }\n  if (arg instanceof Collection<?>) {\n    Collection<?> args=(Collection<?>)arg;\n    return args.stream().map(this).collect(toList());\n  }\n  if (arg instanceof Map<?,?>) {\n    Map<?,?> args=(Map<?,?>)arg;\n    Map<String,Object> converted=new HashMap<>(args.size());\n    for (    Map.Entry<?,?> entry : args.entrySet()) {\n      Object key=entry.getKey();\n      if (!(key instanceof String)) {\n        throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n      }\n      converted.put((String)key,apply(entry.getValue()));\n    }\n    return converted;\n  }\n  throw new IllegalArgumentException(\"Argument is of an illegal type: \" + arg.getClass().getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 61
      },
      "nodeContext" : "converted.put((String)key,apply(entry.getValue()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Object>"
  }, {
    "nodeContext" : "converted",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 81,
      "startColumnNumber" : 13,
      "endLineNumber" : 81,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return converted;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 70,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<?,?> args=(Map<?,?>)arg;\n  Map<String,Object> converted=new HashMap<>(args.size());\n  for (  Map.Entry<?,?> entry : args.entrySet()) {\n    Object key=entry.getKey();\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n    }\n    converted.put((String)key,apply(entry.getValue()));\n  }\n  return converted;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (arg instanceof Map<?,?>) {\n  Map<?,?> args=(Map<?,?>)arg;\n  Map<String,Object> converted=new HashMap<>(args.size());\n  for (  Map.Entry<?,?> entry : args.entrySet()) {\n    Object key=entry.getKey();\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n    }\n    converted.put((String)key,apply(entry.getValue()));\n  }\n  return converted;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 45,
        "startColumnNumber" : 34,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (arg == null || arg instanceof String || arg instanceof Boolean || arg instanceof Number) {\n    return arg;\n  }\n  while (arg instanceof WrapsElement) {\n    arg=((WrapsElement)arg).getWrappedElement();\n  }\n  if (arg instanceof RemoteWebElement) {\n    return ImmutableMap.of(Dialect.OSS.getEncodedElementKey(),((RemoteWebElement)arg).getId(),Dialect.W3C.getEncodedElementKey(),((RemoteWebElement)arg).getId());\n  }\n  if (arg.getClass().isArray()) {\n    arg=Arrays.asList((Object[])arg);\n  }\n  if (arg instanceof Collection<?>) {\n    Collection<?> args=(Collection<?>)arg;\n    return args.stream().map(this).collect(toList());\n  }\n  if (arg instanceof Map<?,?>) {\n    Map<?,?> args=(Map<?,?>)arg;\n    Map<String,Object> converted=new HashMap<>(args.size());\n    for (    Map.Entry<?,?> entry : args.entrySet()) {\n      Object key=entry.getKey();\n      if (!(key instanceof String)) {\n        throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n      }\n      converted.put((String)key,apply(entry.getValue()));\n    }\n    return converted;\n  }\n  throw new IllegalArgumentException(\"Argument is of an illegal type: \" + arg.getClass().getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Object apply(Object arg){\n  if (arg == null || arg instanceof String || arg instanceof Boolean || arg instanceof Number) {\n    return arg;\n  }\n  while (arg instanceof WrapsElement) {\n    arg=((WrapsElement)arg).getWrappedElement();\n  }\n  if (arg instanceof RemoteWebElement) {\n    return ImmutableMap.of(Dialect.OSS.getEncodedElementKey(),((RemoteWebElement)arg).getId(),Dialect.W3C.getEncodedElementKey(),((RemoteWebElement)arg).getId());\n  }\n  if (arg.getClass().isArray()) {\n    arg=Arrays.asList((Object[])arg);\n  }\n  if (arg instanceof Collection<?>) {\n    Collection<?> args=(Collection<?>)arg;\n    return args.stream().map(this).collect(toList());\n  }\n  if (arg instanceof Map<?,?>) {\n    Map<?,?> args=(Map<?,?>)arg;\n    Map<String,Object> converted=new HashMap<>(args.size());\n    for (    Map.Entry<?,?> entry : args.entrySet()) {\n      Object key=entry.getKey();\n      if (!(key instanceof String)) {\n        throw new IllegalArgumentException(\"All keys in Map script arguments must be strings: \" + key.getClass().getName());\n      }\n      converted.put((String)key,apply(entry.getValue()));\n    }\n    return converted;\n  }\n  throw new IllegalArgumentException(\"Argument is of an illegal type: \" + arg.getClass().getName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 81,
        "startColumnNumber" : 6,
        "endLineNumber" : 81,
        "endColumnNumber" : 23
      },
      "nodeContext" : "return converted;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 79,
    "startColumnNumber" : 8,
    "endLineNumber" : 79,
    "endColumnNumber" : 17
  }, {
    "charLength" : 9,
    "startLineNumber" : 81,
    "startColumnNumber" : 13,
    "endLineNumber" : 81,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}