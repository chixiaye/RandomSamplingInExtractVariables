{
  "id" : 336,
  "expression" : "attr",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/traffic/GlobalChannelTrafficShapingHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "attr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 560,
      "startColumnNumber" : 42,
      "endLineNumber" : 560,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 560,
        "startColumnNumber" : 42,
        "endLineNumber" : 560,
        "endColumnNumber" : 52
      },
      "nodeContext" : "attr.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 560,
        "startColumnNumber" : 29,
        "endLineNumber" : 560,
        "endColumnNumber" : 52
      },
      "nodeContext" : "reopenTask=attr.get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 560,
        "startColumnNumber" : 20,
        "endLineNumber" : 560,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Runnable reopenTask=attr.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 554,
        "startColumnNumber" : 65,
        "endLineNumber" : 570,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  config.setAutoRead(false);\n  channel.attr(READ_SUSPENDED).set(true);\n  Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n  Runnable reopenTask=attr.get();\n  if (reopenTask == null) {\n    reopenTask=new ReopenReadTimerTask(ctx);\n    attr.set(reopenTask);\n  }\n  ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1008,
        "startLineNumber" : 554,
        "startColumnNumber" : 16,
        "endLineNumber" : 570,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (config.isAutoRead() && isHandlerActive(ctx)) {\n  config.setAutoRead(false);\n  channel.attr(READ_SUSPENDED).set(true);\n  Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n  Runnable reopenTask=attr.get();\n  if (reopenTask == null) {\n    reopenTask=new ReopenReadTimerTask(ctx);\n    attr.set(reopenTask);\n  }\n  ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1536,
        "startLineNumber" : 545,
        "startColumnNumber" : 38,
        "endLineNumber" : 571,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Channel channel=ctx.channel();\n  ChannelConfig config=channel.config();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n  }\n  if (config.isAutoRead() && isHandlerActive(ctx)) {\n    config.setAutoRead(false);\n    channel.attr(READ_SUSPENDED).set(true);\n    Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n    Runnable reopenTask=attr.get();\n    if (reopenTask == null) {\n      reopenTask=new ReopenReadTimerTask(ctx);\n      attr.set(reopenTask);\n    }\n    ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1562,
        "startLineNumber" : 545,
        "startColumnNumber" : 12,
        "endLineNumber" : 571,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (wait >= MINIMAL_WAIT) {\n  Channel channel=ctx.channel();\n  ChannelConfig config=channel.config();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n  }\n  if (config.isAutoRead() && isHandlerActive(ctx)) {\n    config.setAutoRead(false);\n    channel.attr(READ_SUSPENDED).set(true);\n    Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n    Runnable reopenTask=attr.get();\n    if (reopenTask == null) {\n      reopenTask=new ReopenReadTimerTask(ctx);\n      attr.set(reopenTask);\n    }\n    ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2874,
        "startLineNumber" : 519,
        "startColumnNumber" : 22,
        "endLineNumber" : 572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n  Integer key=ctx.channel().hashCode();\n  PerChannel perChannel=channelQueues.get(key);\n  long wait=0;\n  if (perChannel != null) {\n    wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n    if (readDeviationActive) {\n      long maxLocalRead;\n      maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n      long maxGlobalRead=cumulativeReadBytes.get();\n      if (maxLocalRead <= 0) {\n        maxLocalRead=0;\n      }\n      if (maxGlobalRead < maxLocalRead) {\n        maxGlobalRead=maxLocalRead;\n      }\n      wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n    }\n  }\n  if (wait < waitGlobal) {\n    wait=waitGlobal;\n  }\n  wait=checkWaitReadTime(ctx,wait,now);\n  if (wait >= MINIMAL_WAIT) {\n    Channel channel=ctx.channel();\n    ChannelConfig config=channel.config();\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n    }\n    if (config.isAutoRead() && isHandlerActive(ctx)) {\n      config.setAutoRead(false);\n      channel.attr(READ_SUSPENDED).set(true);\n      Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n      Runnable reopenTask=attr.get();\n      if (reopenTask == null) {\n        reopenTask=new ReopenReadTimerTask(ctx);\n        attr.set(reopenTask);\n      }\n      ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 519,
        "startColumnNumber" : 8,
        "endLineNumber" : 572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (size > 0) {\n  long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n  Integer key=ctx.channel().hashCode();\n  PerChannel perChannel=channelQueues.get(key);\n  long wait=0;\n  if (perChannel != null) {\n    wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n    if (readDeviationActive) {\n      long maxLocalRead;\n      maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n      long maxGlobalRead=cumulativeReadBytes.get();\n      if (maxLocalRead <= 0) {\n        maxLocalRead=0;\n      }\n      if (maxGlobalRead < maxLocalRead) {\n        maxGlobalRead=maxLocalRead;\n      }\n      wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n    }\n  }\n  if (wait < waitGlobal) {\n    wait=waitGlobal;\n  }\n  wait=checkWaitReadTime(ctx,wait,now);\n  if (wait >= MINIMAL_WAIT) {\n    Channel channel=ctx.channel();\n    ChannelConfig config=channel.config();\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n    }\n    if (config.isAutoRead() && isHandlerActive(ctx)) {\n      config.setAutoRead(false);\n      channel.attr(READ_SUSPENDED).set(true);\n      Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n      Runnable reopenTask=attr.get();\n      if (reopenTask == null) {\n        reopenTask=new ReopenReadTimerTask(ctx);\n        attr.set(reopenTask);\n      }\n      ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3080,
        "startLineNumber" : 516,
        "startColumnNumber" : 96,
        "endLineNumber" : 575,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long size=calculateSize(msg);\n  long now=TrafficCounter.milliSecondFromNano();\n  if (size > 0) {\n    long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n    Integer key=ctx.channel().hashCode();\n    PerChannel perChannel=channelQueues.get(key);\n    long wait=0;\n    if (perChannel != null) {\n      wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n      if (readDeviationActive) {\n        long maxLocalRead;\n        maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n        long maxGlobalRead=cumulativeReadBytes.get();\n        if (maxLocalRead <= 0) {\n          maxLocalRead=0;\n        }\n        if (maxGlobalRead < maxLocalRead) {\n          maxGlobalRead=maxLocalRead;\n        }\n        wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n      }\n    }\n    if (wait < waitGlobal) {\n      wait=waitGlobal;\n    }\n    wait=checkWaitReadTime(ctx,wait,now);\n    if (wait >= MINIMAL_WAIT) {\n      Channel channel=ctx.channel();\n      ChannelConfig config=channel.config();\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n      }\n      if (config.isAutoRead() && isHandlerActive(ctx)) {\n        config.setAutoRead(false);\n        channel.attr(READ_SUSPENDED).set(true);\n        Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n        Runnable reopenTask=attr.get();\n        if (reopenTask == null) {\n          reopenTask=new ReopenReadTimerTask(ctx);\n          attr.set(reopenTask);\n        }\n        ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n        }\n      }\n    }\n  }\n  informReadOperation(ctx,now);\n  ctx.fireChannelRead(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 515,
        "startColumnNumber" : 4,
        "endLineNumber" : 575,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(final ChannelHandlerContext ctx,final Object msg) throws Exception {\n  long size=calculateSize(msg);\n  long now=TrafficCounter.milliSecondFromNano();\n  if (size > 0) {\n    long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n    Integer key=ctx.channel().hashCode();\n    PerChannel perChannel=channelQueues.get(key);\n    long wait=0;\n    if (perChannel != null) {\n      wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n      if (readDeviationActive) {\n        long maxLocalRead;\n        maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n        long maxGlobalRead=cumulativeReadBytes.get();\n        if (maxLocalRead <= 0) {\n          maxLocalRead=0;\n        }\n        if (maxGlobalRead < maxLocalRead) {\n          maxGlobalRead=maxLocalRead;\n        }\n        wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n      }\n    }\n    if (wait < waitGlobal) {\n      wait=waitGlobal;\n    }\n    wait=checkWaitReadTime(ctx,wait,now);\n    if (wait >= MINIMAL_WAIT) {\n      Channel channel=ctx.channel();\n      ChannelConfig config=channel.config();\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n      }\n      if (config.isAutoRead() && isHandlerActive(ctx)) {\n        config.setAutoRead(false);\n        channel.attr(READ_SUSPENDED).set(true);\n        Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n        Runnable reopenTask=attr.get();\n        if (reopenTask == null) {\n          reopenTask=new ReopenReadTimerTask(ctx);\n          attr.set(reopenTask);\n        }\n        ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n        }\n      }\n    }\n  }\n  informReadOperation(ctx,now);\n  ctx.fireChannelRead(msg);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 560,
        "startColumnNumber" : 20,
        "endLineNumber" : 560,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Runnable reopenTask=attr.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.util.Attribute<java.lang.Runnable>"
  }, {
    "nodeContext" : "attr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 563,
      "startColumnNumber" : 24,
      "endLineNumber" : 563,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 563,
        "startColumnNumber" : 24,
        "endLineNumber" : 563,
        "endColumnNumber" : 44
      },
      "nodeContext" : "attr.set(reopenTask)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 563,
        "startColumnNumber" : 24,
        "endLineNumber" : 563,
        "endColumnNumber" : 45
      },
      "nodeContext" : "attr.set(reopenTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 561,
        "startColumnNumber" : 44,
        "endLineNumber" : 564,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  reopenTask=new ReopenReadTimerTask(ctx);\n  attr.set(reopenTask);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 561,
        "startColumnNumber" : 20,
        "endLineNumber" : 564,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (reopenTask == null) {\n  reopenTask=new ReopenReadTimerTask(ctx);\n  attr.set(reopenTask);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 554,
        "startColumnNumber" : 65,
        "endLineNumber" : 570,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  config.setAutoRead(false);\n  channel.attr(READ_SUSPENDED).set(true);\n  Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n  Runnable reopenTask=attr.get();\n  if (reopenTask == null) {\n    reopenTask=new ReopenReadTimerTask(ctx);\n    attr.set(reopenTask);\n  }\n  ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1008,
        "startLineNumber" : 554,
        "startColumnNumber" : 16,
        "endLineNumber" : 570,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (config.isAutoRead() && isHandlerActive(ctx)) {\n  config.setAutoRead(false);\n  channel.attr(READ_SUSPENDED).set(true);\n  Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n  Runnable reopenTask=attr.get();\n  if (reopenTask == null) {\n    reopenTask=new ReopenReadTimerTask(ctx);\n    attr.set(reopenTask);\n  }\n  ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1536,
        "startLineNumber" : 545,
        "startColumnNumber" : 38,
        "endLineNumber" : 571,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Channel channel=ctx.channel();\n  ChannelConfig config=channel.config();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n  }\n  if (config.isAutoRead() && isHandlerActive(ctx)) {\n    config.setAutoRead(false);\n    channel.attr(READ_SUSPENDED).set(true);\n    Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n    Runnable reopenTask=attr.get();\n    if (reopenTask == null) {\n      reopenTask=new ReopenReadTimerTask(ctx);\n      attr.set(reopenTask);\n    }\n    ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1562,
        "startLineNumber" : 545,
        "startColumnNumber" : 12,
        "endLineNumber" : 571,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (wait >= MINIMAL_WAIT) {\n  Channel channel=ctx.channel();\n  ChannelConfig config=channel.config();\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n  }\n  if (config.isAutoRead() && isHandlerActive(ctx)) {\n    config.setAutoRead(false);\n    channel.attr(READ_SUSPENDED).set(true);\n    Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n    Runnable reopenTask=attr.get();\n    if (reopenTask == null) {\n      reopenTask=new ReopenReadTimerTask(ctx);\n      attr.set(reopenTask);\n    }\n    ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2874,
        "startLineNumber" : 519,
        "startColumnNumber" : 22,
        "endLineNumber" : 572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n  Integer key=ctx.channel().hashCode();\n  PerChannel perChannel=channelQueues.get(key);\n  long wait=0;\n  if (perChannel != null) {\n    wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n    if (readDeviationActive) {\n      long maxLocalRead;\n      maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n      long maxGlobalRead=cumulativeReadBytes.get();\n      if (maxLocalRead <= 0) {\n        maxLocalRead=0;\n      }\n      if (maxGlobalRead < maxLocalRead) {\n        maxGlobalRead=maxLocalRead;\n      }\n      wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n    }\n  }\n  if (wait < waitGlobal) {\n    wait=waitGlobal;\n  }\n  wait=checkWaitReadTime(ctx,wait,now);\n  if (wait >= MINIMAL_WAIT) {\n    Channel channel=ctx.channel();\n    ChannelConfig config=channel.config();\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n    }\n    if (config.isAutoRead() && isHandlerActive(ctx)) {\n      config.setAutoRead(false);\n      channel.attr(READ_SUSPENDED).set(true);\n      Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n      Runnable reopenTask=attr.get();\n      if (reopenTask == null) {\n        reopenTask=new ReopenReadTimerTask(ctx);\n        attr.set(reopenTask);\n      }\n      ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 519,
        "startColumnNumber" : 8,
        "endLineNumber" : 572,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (size > 0) {\n  long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n  Integer key=ctx.channel().hashCode();\n  PerChannel perChannel=channelQueues.get(key);\n  long wait=0;\n  if (perChannel != null) {\n    wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n    if (readDeviationActive) {\n      long maxLocalRead;\n      maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n      long maxGlobalRead=cumulativeReadBytes.get();\n      if (maxLocalRead <= 0) {\n        maxLocalRead=0;\n      }\n      if (maxGlobalRead < maxLocalRead) {\n        maxGlobalRead=maxLocalRead;\n      }\n      wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n    }\n  }\n  if (wait < waitGlobal) {\n    wait=waitGlobal;\n  }\n  wait=checkWaitReadTime(ctx,wait,now);\n  if (wait >= MINIMAL_WAIT) {\n    Channel channel=ctx.channel();\n    ChannelConfig config=channel.config();\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n    }\n    if (config.isAutoRead() && isHandlerActive(ctx)) {\n      config.setAutoRead(false);\n      channel.attr(READ_SUSPENDED).set(true);\n      Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n      Runnable reopenTask=attr.get();\n      if (reopenTask == null) {\n        reopenTask=new ReopenReadTimerTask(ctx);\n        attr.set(reopenTask);\n      }\n      ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3080,
        "startLineNumber" : 516,
        "startColumnNumber" : 96,
        "endLineNumber" : 575,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long size=calculateSize(msg);\n  long now=TrafficCounter.milliSecondFromNano();\n  if (size > 0) {\n    long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n    Integer key=ctx.channel().hashCode();\n    PerChannel perChannel=channelQueues.get(key);\n    long wait=0;\n    if (perChannel != null) {\n      wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n      if (readDeviationActive) {\n        long maxLocalRead;\n        maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n        long maxGlobalRead=cumulativeReadBytes.get();\n        if (maxLocalRead <= 0) {\n          maxLocalRead=0;\n        }\n        if (maxGlobalRead < maxLocalRead) {\n          maxGlobalRead=maxLocalRead;\n        }\n        wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n      }\n    }\n    if (wait < waitGlobal) {\n      wait=waitGlobal;\n    }\n    wait=checkWaitReadTime(ctx,wait,now);\n    if (wait >= MINIMAL_WAIT) {\n      Channel channel=ctx.channel();\n      ChannelConfig config=channel.config();\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n      }\n      if (config.isAutoRead() && isHandlerActive(ctx)) {\n        config.setAutoRead(false);\n        channel.attr(READ_SUSPENDED).set(true);\n        Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n        Runnable reopenTask=attr.get();\n        if (reopenTask == null) {\n          reopenTask=new ReopenReadTimerTask(ctx);\n          attr.set(reopenTask);\n        }\n        ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n        }\n      }\n    }\n  }\n  informReadOperation(ctx,now);\n  ctx.fireChannelRead(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 515,
        "startColumnNumber" : 4,
        "endLineNumber" : 575,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(final ChannelHandlerContext ctx,final Object msg) throws Exception {\n  long size=calculateSize(msg);\n  long now=TrafficCounter.milliSecondFromNano();\n  if (size > 0) {\n    long waitGlobal=trafficCounter.readTimeToWait(size,getReadLimit(),maxTime,now);\n    Integer key=ctx.channel().hashCode();\n    PerChannel perChannel=channelQueues.get(key);\n    long wait=0;\n    if (perChannel != null) {\n      wait=perChannel.channelTrafficCounter.readTimeToWait(size,readChannelLimit,maxTime,now);\n      if (readDeviationActive) {\n        long maxLocalRead;\n        maxLocalRead=perChannel.channelTrafficCounter.cumulativeReadBytes();\n        long maxGlobalRead=cumulativeReadBytes.get();\n        if (maxLocalRead <= 0) {\n          maxLocalRead=0;\n        }\n        if (maxGlobalRead < maxLocalRead) {\n          maxGlobalRead=maxLocalRead;\n        }\n        wait=computeBalancedWait(maxLocalRead,maxGlobalRead,wait);\n      }\n    }\n    if (wait < waitGlobal) {\n      wait=waitGlobal;\n    }\n    wait=checkWaitReadTime(ctx,wait,now);\n    if (wait >= MINIMAL_WAIT) {\n      Channel channel=ctx.channel();\n      ChannelConfig config=channel.config();\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Read Suspend: \" + wait + ':'+ config.isAutoRead()+ ':'+ isHandlerActive(ctx));\n      }\n      if (config.isAutoRead() && isHandlerActive(ctx)) {\n        config.setAutoRead(false);\n        channel.attr(READ_SUSPENDED).set(true);\n        Attribute<Runnable> attr=channel.attr(REOPEN_TASK);\n        Runnable reopenTask=attr.get();\n        if (reopenTask == null) {\n          reopenTask=new ReopenReadTimerTask(ctx);\n          attr.set(reopenTask);\n        }\n        ctx.executor().schedule(reopenTask,wait,TimeUnit.MILLISECONDS);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Suspend final status => \" + config.isAutoRead() + ':'+ isHandlerActive(ctx)+ \" will reopened at: \"+ wait);\n        }\n      }\n    }\n  }\n  informReadOperation(ctx,now);\n  ctx.fireChannelRead(msg);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 563,
        "startColumnNumber" : 24,
        "endLineNumber" : 563,
        "endColumnNumber" : 45
      },
      "nodeContext" : "attr.set(reopenTask);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.util.Attribute<java.lang.Runnable>"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 560,
    "startColumnNumber" : 42,
    "endLineNumber" : 560,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 563,
    "startColumnNumber" : 24,
    "endLineNumber" : 563,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}