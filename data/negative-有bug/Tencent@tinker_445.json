{
  "id" : 445,
  "expression" : "\"otherwise, it will crash at some time\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"otherwise, it will crash at some time\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 90,
      "startColumnNumber" : 30,
      "endLineNumber" : 90,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 90,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 90,
        "endColumnNumber" : 71
      },
      "nodeContext" : "sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 85,
        "startColumnNumber" : 36,
        "endLineNumber" : 92,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final StringBuilder sb=new StringBuilder();\n  sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n  announceWarningOrException(sb.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 92,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (config.mDexRaw) {\n  final StringBuilder sb=new StringBuilder();\n  sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n  announceWarningOrException(sb.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 84,
        "startColumnNumber" : 65,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (config.mDexRaw) {\n    final StringBuilder sb=new StringBuilder();\n    sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n    announceWarningOrException(sb.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (minSdkVersion < TypedValue.ANDROID_40_API_LEVEL) {\n  if (config.mDexRaw) {\n    final StringBuilder sb=new StringBuilder();\n    sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n    announceWarningOrException(sb.toString());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6186,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  AndroidParser oldAndroidManifest=AndroidParser.getAndroidManifest(oldFile);\n  AndroidParser newAndroidManifest=AndroidParser.getAndroidManifest(newFile);\n  int minSdkVersion=Integer.parseInt(oldAndroidManifest.apkMeta.getMinSdkVersion());\n  if (minSdkVersion < TypedValue.ANDROID_40_API_LEVEL) {\n    if (config.mDexRaw) {\n      final StringBuilder sb=new StringBuilder();\n      sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n      announceWarningOrException(sb.toString());\n    }\n  }\n  final String oldXml=oldAndroidManifest.xml.trim();\n  final String newXml=newAndroidManifest.xml.trim();\n  final boolean isManifestChanged=!oldXml.equals(newXml);\n  if (!isManifestChanged) {\n    Logger.d(\"\\nManifest has no changes, skip rest decode works.\");\n    return false;\n  }\n  ensureApkMetaUnchanged(oldAndroidManifest.apkMeta,newAndroidManifest.apkMeta);\n  final Set<String> incActivities=getIncrementActivities(oldAndroidManifest.activities,newAndroidManifest.activities);\n  final Set<String> incServices=getIncrementServices(oldAndroidManifest.services,newAndroidManifest.services);\n  final Set<String> incReceivers=getIncrementReceivers(oldAndroidManifest.receivers,newAndroidManifest.receivers);\n  final Set<String> incProviders=getIncrementProviders(oldAndroidManifest.providers,newAndroidManifest.providers);\n  final boolean hasIncComponent=(!incActivities.isEmpty() || !incServices.isEmpty() || !incProviders.isEmpty()|| !incReceivers.isEmpty());\n  if (!config.mSupportHotplugComponent && hasIncComponent) {\n    announceWarningOrException(\"manifest was changed, while hot plug component support mode is disabled. \" + \"Such changes will not take effect, related components: \\n\" + \" activity: \" + incActivities + \"\\n\"+ \" service: \"+ incServices+ \"\\n\"+ \" receiver: \"+ incReceivers+ \"\\n\"+ \" provider: \"+ incProviders+ \"\\n\");\n  }\n  if (hasIncComponent) {\n    final Document newXmlDoc=DocumentHelper.parseText(newAndroidManifest.xml);\n    final Document incXmlDoc=DocumentHelper.createDocument();\n    final Element newRootNode=newXmlDoc.getRootElement();\n    final String packageName=newRootNode.attributeValue(XML_NODEATTR_PACKAGE);\n    if (Utils.isNullOrNil(packageName)) {\n      throw new TinkerPatchException(\"Unable to find package name from manifest: \" + newFile.getAbsolutePath());\n    }\n    final Element newAppNode=newRootNode.element(XML_NODENAME_APPLICATION);\n    final Element incAppNode=incXmlDoc.addElement(newAppNode.getQName());\n    copyAttributes(newAppNode,incAppNode);\n    if (!incActivities.isEmpty()) {\n      final List<Element> newActivityNodes=newAppNode.elements(XML_NODENAME_ACTIVITY);\n      final List<Element> incActivityNodes=getIncrementActivityNodes(packageName,newActivityNodes,incActivities);\n      for (      Element node : incActivityNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incServices.isEmpty()) {\n      final List<Element> newServiceNodes=newAppNode.elements(XML_NODENAME_SERVICE);\n      final List<Element> incServiceNodes=getIncrementServiceNodes(packageName,newServiceNodes,incServices);\n      for (      Element node : incServiceNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incReceivers.isEmpty()) {\n      final List<Element> newReceiverNodes=newAppNode.elements(XML_NODENAME_RECEIVER);\n      final List<Element> incReceiverNodes=getIncrementReceiverNodes(packageName,newReceiverNodes,incReceivers);\n      for (      Element node : incReceiverNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incProviders.isEmpty()) {\n      final List<Element> newProviderNodes=newAppNode.elements(XML_NODENAME_PROVIDER);\n      final List<Element> incProviderNodes=getIncrementProviderNodes(packageName,newProviderNodes,incProviders);\n      for (      Element node : incProviderNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    final File incXmlOutput=new File(config.mTempResultDir,TypedValue.INCCOMPONENT_META_FILE);\n    if (!incXmlOutput.exists()) {\n      incXmlOutput.getParentFile().mkdirs();\n    }\n    OutputStream os=null;\n    try {\n      os=new BufferedOutputStream(new FileOutputStream(incXmlOutput));\n      final XMLWriter docWriter=new XMLWriter(os);\n      docWriter.write(incXmlDoc);\n      docWriter.close();\n    }\n  finally {\n      Utils.closeQuietly(os);\n    }\n  }\n  if (isManifestChanged && !hasIncComponent) {\n    Logger.d(\"\\nManifest was changed, while there's no any new components added.\" + \" Make sure if such changes were all you expected.\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 598,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6652,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 203,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  AndroidParser oldAndroidManifest=AndroidParser.getAndroidManifest(oldFile);\n  AndroidParser newAndroidManifest=AndroidParser.getAndroidManifest(newFile);\n  int minSdkVersion=Integer.parseInt(oldAndroidManifest.apkMeta.getMinSdkVersion());\n  if (minSdkVersion < TypedValue.ANDROID_40_API_LEVEL) {\n    if (config.mDexRaw) {\n      final StringBuilder sb=new StringBuilder();\n      sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n      announceWarningOrException(sb.toString());\n    }\n  }\n  final String oldXml=oldAndroidManifest.xml.trim();\n  final String newXml=newAndroidManifest.xml.trim();\n  final boolean isManifestChanged=!oldXml.equals(newXml);\n  if (!isManifestChanged) {\n    Logger.d(\"\\nManifest has no changes, skip rest decode works.\");\n    return false;\n  }\n  ensureApkMetaUnchanged(oldAndroidManifest.apkMeta,newAndroidManifest.apkMeta);\n  final Set<String> incActivities=getIncrementActivities(oldAndroidManifest.activities,newAndroidManifest.activities);\n  final Set<String> incServices=getIncrementServices(oldAndroidManifest.services,newAndroidManifest.services);\n  final Set<String> incReceivers=getIncrementReceivers(oldAndroidManifest.receivers,newAndroidManifest.receivers);\n  final Set<String> incProviders=getIncrementProviders(oldAndroidManifest.providers,newAndroidManifest.providers);\n  final boolean hasIncComponent=(!incActivities.isEmpty() || !incServices.isEmpty() || !incProviders.isEmpty()|| !incReceivers.isEmpty());\n  if (!config.mSupportHotplugComponent && hasIncComponent) {\n    announceWarningOrException(\"manifest was changed, while hot plug component support mode is disabled. \" + \"Such changes will not take effect, related components: \\n\" + \" activity: \" + incActivities + \"\\n\"+ \" service: \"+ incServices+ \"\\n\"+ \" receiver: \"+ incReceivers+ \"\\n\"+ \" provider: \"+ incProviders+ \"\\n\");\n  }\n  if (hasIncComponent) {\n    final Document newXmlDoc=DocumentHelper.parseText(newAndroidManifest.xml);\n    final Document incXmlDoc=DocumentHelper.createDocument();\n    final Element newRootNode=newXmlDoc.getRootElement();\n    final String packageName=newRootNode.attributeValue(XML_NODEATTR_PACKAGE);\n    if (Utils.isNullOrNil(packageName)) {\n      throw new TinkerPatchException(\"Unable to find package name from manifest: \" + newFile.getAbsolutePath());\n    }\n    final Element newAppNode=newRootNode.element(XML_NODENAME_APPLICATION);\n    final Element incAppNode=incXmlDoc.addElement(newAppNode.getQName());\n    copyAttributes(newAppNode,incAppNode);\n    if (!incActivities.isEmpty()) {\n      final List<Element> newActivityNodes=newAppNode.elements(XML_NODENAME_ACTIVITY);\n      final List<Element> incActivityNodes=getIncrementActivityNodes(packageName,newActivityNodes,incActivities);\n      for (      Element node : incActivityNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incServices.isEmpty()) {\n      final List<Element> newServiceNodes=newAppNode.elements(XML_NODENAME_SERVICE);\n      final List<Element> incServiceNodes=getIncrementServiceNodes(packageName,newServiceNodes,incServices);\n      for (      Element node : incServiceNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incReceivers.isEmpty()) {\n      final List<Element> newReceiverNodes=newAppNode.elements(XML_NODENAME_RECEIVER);\n      final List<Element> incReceiverNodes=getIncrementReceiverNodes(packageName,newReceiverNodes,incReceivers);\n      for (      Element node : incReceiverNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    if (!incProviders.isEmpty()) {\n      final List<Element> newProviderNodes=newAppNode.elements(XML_NODENAME_PROVIDER);\n      final List<Element> incProviderNodes=getIncrementProviderNodes(packageName,newProviderNodes,incProviders);\n      for (      Element node : incProviderNodes) {\n        incAppNode.add(node.detach());\n      }\n    }\n    final File incXmlOutput=new File(config.mTempResultDir,TypedValue.INCCOMPONENT_META_FILE);\n    if (!incXmlOutput.exists()) {\n      incXmlOutput.getParentFile().mkdirs();\n    }\n    OutputStream os=null;\n    try {\n      os=new BufferedOutputStream(new FileOutputStream(incXmlOutput));\n      final XMLWriter docWriter=new XMLWriter(os);\n      docWriter.write(incXmlDoc);\n      docWriter.close();\n    }\n  finally {\n      Utils.closeQuietly(os);\n    }\n  }\n  if (isManifestChanged && !hasIncComponent) {\n    Logger.d(\"\\nManifest was changed, while there's no any new components added.\" + \" Make sure if such changes were all you expected.\\n\");\n  }\n}\n catch (ParseException e) {\n  e.printStackTrace();\n  throw new TinkerPatchException(\"Parse android manifest error!\");\n}\ncatch (DocumentException e) {\n  e.printStackTrace();\n  throw new TinkerPatchException(\"Parse android manifest by dom4j error!\");\n}\ncatch (IOException e) {\n  e.printStackTrace();\n  throw new TinkerPatchException(\"Failed to generate increment manifest.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 645,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6691,
        "startLineNumber" : 76,
        "startColumnNumber" : 94,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    AndroidParser oldAndroidManifest=AndroidParser.getAndroidManifest(oldFile);\n    AndroidParser newAndroidManifest=AndroidParser.getAndroidManifest(newFile);\n    int minSdkVersion=Integer.parseInt(oldAndroidManifest.apkMeta.getMinSdkVersion());\n    if (minSdkVersion < TypedValue.ANDROID_40_API_LEVEL) {\n      if (config.mDexRaw) {\n        final StringBuilder sb=new StringBuilder();\n        sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n        announceWarningOrException(sb.toString());\n      }\n    }\n    final String oldXml=oldAndroidManifest.xml.trim();\n    final String newXml=newAndroidManifest.xml.trim();\n    final boolean isManifestChanged=!oldXml.equals(newXml);\n    if (!isManifestChanged) {\n      Logger.d(\"\\nManifest has no changes, skip rest decode works.\");\n      return false;\n    }\n    ensureApkMetaUnchanged(oldAndroidManifest.apkMeta,newAndroidManifest.apkMeta);\n    final Set<String> incActivities=getIncrementActivities(oldAndroidManifest.activities,newAndroidManifest.activities);\n    final Set<String> incServices=getIncrementServices(oldAndroidManifest.services,newAndroidManifest.services);\n    final Set<String> incReceivers=getIncrementReceivers(oldAndroidManifest.receivers,newAndroidManifest.receivers);\n    final Set<String> incProviders=getIncrementProviders(oldAndroidManifest.providers,newAndroidManifest.providers);\n    final boolean hasIncComponent=(!incActivities.isEmpty() || !incServices.isEmpty() || !incProviders.isEmpty()|| !incReceivers.isEmpty());\n    if (!config.mSupportHotplugComponent && hasIncComponent) {\n      announceWarningOrException(\"manifest was changed, while hot plug component support mode is disabled. \" + \"Such changes will not take effect, related components: \\n\" + \" activity: \" + incActivities + \"\\n\"+ \" service: \"+ incServices+ \"\\n\"+ \" receiver: \"+ incReceivers+ \"\\n\"+ \" provider: \"+ incProviders+ \"\\n\");\n    }\n    if (hasIncComponent) {\n      final Document newXmlDoc=DocumentHelper.parseText(newAndroidManifest.xml);\n      final Document incXmlDoc=DocumentHelper.createDocument();\n      final Element newRootNode=newXmlDoc.getRootElement();\n      final String packageName=newRootNode.attributeValue(XML_NODEATTR_PACKAGE);\n      if (Utils.isNullOrNil(packageName)) {\n        throw new TinkerPatchException(\"Unable to find package name from manifest: \" + newFile.getAbsolutePath());\n      }\n      final Element newAppNode=newRootNode.element(XML_NODENAME_APPLICATION);\n      final Element incAppNode=incXmlDoc.addElement(newAppNode.getQName());\n      copyAttributes(newAppNode,incAppNode);\n      if (!incActivities.isEmpty()) {\n        final List<Element> newActivityNodes=newAppNode.elements(XML_NODENAME_ACTIVITY);\n        final List<Element> incActivityNodes=getIncrementActivityNodes(packageName,newActivityNodes,incActivities);\n        for (        Element node : incActivityNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incServices.isEmpty()) {\n        final List<Element> newServiceNodes=newAppNode.elements(XML_NODENAME_SERVICE);\n        final List<Element> incServiceNodes=getIncrementServiceNodes(packageName,newServiceNodes,incServices);\n        for (        Element node : incServiceNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incReceivers.isEmpty()) {\n        final List<Element> newReceiverNodes=newAppNode.elements(XML_NODENAME_RECEIVER);\n        final List<Element> incReceiverNodes=getIncrementReceiverNodes(packageName,newReceiverNodes,incReceivers);\n        for (        Element node : incReceiverNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incProviders.isEmpty()) {\n        final List<Element> newProviderNodes=newAppNode.elements(XML_NODENAME_PROVIDER);\n        final List<Element> incProviderNodes=getIncrementProviderNodes(packageName,newProviderNodes,incProviders);\n        for (        Element node : incProviderNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      final File incXmlOutput=new File(config.mTempResultDir,TypedValue.INCCOMPONENT_META_FILE);\n      if (!incXmlOutput.exists()) {\n        incXmlOutput.getParentFile().mkdirs();\n      }\n      OutputStream os=null;\n      try {\n        os=new BufferedOutputStream(new FileOutputStream(incXmlOutput));\n        final XMLWriter docWriter=new XMLWriter(os);\n        docWriter.write(incXmlDoc);\n        docWriter.close();\n      }\n  finally {\n        Utils.closeQuietly(os);\n      }\n    }\n    if (isManifestChanged && !hasIncComponent) {\n      Logger.d(\"\\nManifest was changed, while there's no any new components added.\" + \" Make sure if such changes were all you expected.\\n\");\n    }\n  }\n catch (  ParseException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Parse android manifest error!\");\n  }\ncatch (  DocumentException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Parse android manifest by dom4j error!\");\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Failed to generate increment manifest.\",e);\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 648,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6795,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean patch(File oldFile,File newFile) throws IOException, TinkerPatchException {\n  try {\n    AndroidParser oldAndroidManifest=AndroidParser.getAndroidManifest(oldFile);\n    AndroidParser newAndroidManifest=AndroidParser.getAndroidManifest(newFile);\n    int minSdkVersion=Integer.parseInt(oldAndroidManifest.apkMeta.getMinSdkVersion());\n    if (minSdkVersion < TypedValue.ANDROID_40_API_LEVEL) {\n      if (config.mDexRaw) {\n        final StringBuilder sb=new StringBuilder();\n        sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\");\n        announceWarningOrException(sb.toString());\n      }\n    }\n    final String oldXml=oldAndroidManifest.xml.trim();\n    final String newXml=newAndroidManifest.xml.trim();\n    final boolean isManifestChanged=!oldXml.equals(newXml);\n    if (!isManifestChanged) {\n      Logger.d(\"\\nManifest has no changes, skip rest decode works.\");\n      return false;\n    }\n    ensureApkMetaUnchanged(oldAndroidManifest.apkMeta,newAndroidManifest.apkMeta);\n    final Set<String> incActivities=getIncrementActivities(oldAndroidManifest.activities,newAndroidManifest.activities);\n    final Set<String> incServices=getIncrementServices(oldAndroidManifest.services,newAndroidManifest.services);\n    final Set<String> incReceivers=getIncrementReceivers(oldAndroidManifest.receivers,newAndroidManifest.receivers);\n    final Set<String> incProviders=getIncrementProviders(oldAndroidManifest.providers,newAndroidManifest.providers);\n    final boolean hasIncComponent=(!incActivities.isEmpty() || !incServices.isEmpty() || !incProviders.isEmpty()|| !incReceivers.isEmpty());\n    if (!config.mSupportHotplugComponent && hasIncComponent) {\n      announceWarningOrException(\"manifest was changed, while hot plug component support mode is disabled. \" + \"Such changes will not take effect, related components: \\n\" + \" activity: \" + incActivities + \"\\n\"+ \" service: \"+ incServices+ \"\\n\"+ \" receiver: \"+ incReceivers+ \"\\n\"+ \" provider: \"+ incProviders+ \"\\n\");\n    }\n    if (hasIncComponent) {\n      final Document newXmlDoc=DocumentHelper.parseText(newAndroidManifest.xml);\n      final Document incXmlDoc=DocumentHelper.createDocument();\n      final Element newRootNode=newXmlDoc.getRootElement();\n      final String packageName=newRootNode.attributeValue(XML_NODEATTR_PACKAGE);\n      if (Utils.isNullOrNil(packageName)) {\n        throw new TinkerPatchException(\"Unable to find package name from manifest: \" + newFile.getAbsolutePath());\n      }\n      final Element newAppNode=newRootNode.element(XML_NODENAME_APPLICATION);\n      final Element incAppNode=incXmlDoc.addElement(newAppNode.getQName());\n      copyAttributes(newAppNode,incAppNode);\n      if (!incActivities.isEmpty()) {\n        final List<Element> newActivityNodes=newAppNode.elements(XML_NODENAME_ACTIVITY);\n        final List<Element> incActivityNodes=getIncrementActivityNodes(packageName,newActivityNodes,incActivities);\n        for (        Element node : incActivityNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incServices.isEmpty()) {\n        final List<Element> newServiceNodes=newAppNode.elements(XML_NODENAME_SERVICE);\n        final List<Element> incServiceNodes=getIncrementServiceNodes(packageName,newServiceNodes,incServices);\n        for (        Element node : incServiceNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incReceivers.isEmpty()) {\n        final List<Element> newReceiverNodes=newAppNode.elements(XML_NODENAME_RECEIVER);\n        final List<Element> incReceiverNodes=getIncrementReceiverNodes(packageName,newReceiverNodes,incReceivers);\n        for (        Element node : incReceiverNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      if (!incProviders.isEmpty()) {\n        final List<Element> newProviderNodes=newAppNode.elements(XML_NODENAME_PROVIDER);\n        final List<Element> incProviderNodes=getIncrementProviderNodes(packageName,newProviderNodes,incProviders);\n        for (        Element node : incProviderNodes) {\n          incAppNode.add(node.detach());\n        }\n      }\n      final File incXmlOutput=new File(config.mTempResultDir,TypedValue.INCCOMPONENT_META_FILE);\n      if (!incXmlOutput.exists()) {\n        incXmlOutput.getParentFile().mkdirs();\n      }\n      OutputStream os=null;\n      try {\n        os=new BufferedOutputStream(new FileOutputStream(incXmlOutput));\n        final XMLWriter docWriter=new XMLWriter(os);\n        docWriter.write(incXmlDoc);\n        docWriter.close();\n      }\n  finally {\n        Utils.closeQuietly(os);\n      }\n    }\n    if (isManifestChanged && !hasIncComponent) {\n      Logger.d(\"\\nManifest was changed, while there's no any new components added.\" + \" Make sure if such changes were all you expected.\\n\");\n    }\n  }\n catch (  ParseException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Parse android manifest error!\");\n  }\ncatch (  DocumentException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Parse android manifest by dom4j error!\");\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    throw new TinkerPatchException(\"Failed to generate increment manifest.\",e);\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 666,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 90,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sb.append(\"your old apk's minSdkVersion \").append(minSdkVersion).append(\" is below 14, you should set the dexMode to 'jar', \").append(\"otherwise, it will crash at some time\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 90,
    "startColumnNumber" : 30,
    "endLineNumber" : 90,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}