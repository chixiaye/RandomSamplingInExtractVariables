{
  "id" : 92,
  "expression" : "InstructionCodec.unit0(literalInt)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/aosp-dexutils/src/main/java/com/tencent/tinker/android/dx/instruction/InstructionWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "InstructionCodec.unit0(literalInt)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 223,
      "startColumnNumber" : 24,
      "endLineNumber" : 223,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 225,
        "endColumnNumber" : 18
      },
      "nodeContext" : "codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 219,
        "startColumnNumber" : 40,
        "endLineNumber" : 227,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int literalInt=InstructionCodec.getLiteralInt(literal);\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt));\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6817,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 292,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (opcode) {\ncase Opcodes.CONST_4:{\n    short opcodeUnit=(short)opcode;\n    codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,InstructionCodec.getLiteralNibble(literal))));\n    break;\n  }\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:case Opcodes.MOVE_EXCEPTION:case Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:case Opcodes.MONITOR_ENTER:case Opcodes.MONITOR_EXIT:case Opcodes.THROW:{\n  codeOut.write(InstructionCodec.codeUnit(opcode,a));\n  break;\n}\ncase Opcodes.IF_EQZ:case Opcodes.IF_NEZ:case Opcodes.IF_LTZ:case Opcodes.IF_GEZ:case Opcodes.IF_GTZ:case Opcodes.IF_LEZ:{\nshort relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),relativeTarget);\nbreak;\n}\ncase Opcodes.CONST_16:case Opcodes.CONST_WIDE_16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.CONST_HIGH16:case Opcodes.CONST_WIDE_HIGH16:{\nint shift=(opcode == Opcodes.CONST_HIGH16) ? 16 : 48;\nshort literalShifted=(short)(literal >> shift);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),literalShifted);\nbreak;\n}\ncase Opcodes.CONST_STRING:{\nif (this.hasPromoter) {\nif (index > 0xFFFF) {\ncodeOut.write(InstructionCodec.codeUnit(Opcodes.CONST_STRING_JUMBO,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\n}\n else {\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\n}\n else {\nif (index > 0xFFFF) {\nthrow new DexException(\"string index out of bound: \" + Hex.u4(index) + \", perhaps you need to enable force jumbo mode.\");\n}\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\nbreak;\n}\ncase Opcodes.CONST_CLASS:case Opcodes.CHECK_CAST:case Opcodes.NEW_INSTANCE:case Opcodes.SGET:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SPUT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\nbreak;\n}\ncase Opcodes.CONST:case Opcodes.CONST_WIDE_32:{\nint literalInt=InstructionCodec.getLiteralInt(literal);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt));\nbreak;\n}\ncase Opcodes.FILL_ARRAY_DATA:case Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\nswitch (opcode) {\ncase Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\ncodeOut.setBaseAddress(target,codeOut.cursor());\nbreak;\n}\ndefault:{\nbreak;\n}\n}\nint relativeTarget=InstructionCodec.getTarget(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(relativeTarget),InstructionCodec.unit1(relativeTarget));\nbreak;\n}\ncase Opcodes.CONST_STRING_JUMBO:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\nbreak;\n}\ncase Opcodes.CONST_WIDE:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literal),InstructionCodec.unit1(literal),InstructionCodec.unit2(literal),InstructionCodec.unit3(literal));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,1)),indexUnit,InstructionCodec.codeUnit(a,0,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 589,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6943,
        "startLineNumber" : 121,
        "startColumnNumber" : 128,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this.hasPromoter) {\n    target=this.insnPromoter.getPromotedAddress(target);\n  }\nswitch (opcode) {\ncase Opcodes.CONST_4:{\n      short opcodeUnit=(short)opcode;\n      codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,InstructionCodec.getLiteralNibble(literal))));\n      break;\n    }\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:case Opcodes.MOVE_EXCEPTION:case Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:case Opcodes.MONITOR_ENTER:case Opcodes.MONITOR_EXIT:case Opcodes.THROW:{\n    codeOut.write(InstructionCodec.codeUnit(opcode,a));\n    break;\n  }\ncase Opcodes.IF_EQZ:case Opcodes.IF_NEZ:case Opcodes.IF_LTZ:case Opcodes.IF_GEZ:case Opcodes.IF_GTZ:case Opcodes.IF_LEZ:{\n  short relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),relativeTarget);\n  break;\n}\ncase Opcodes.CONST_16:case Opcodes.CONST_WIDE_16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.CONST_HIGH16:case Opcodes.CONST_WIDE_HIGH16:{\nint shift=(opcode == Opcodes.CONST_HIGH16) ? 16 : 48;\nshort literalShifted=(short)(literal >> shift);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),literalShifted);\nbreak;\n}\ncase Opcodes.CONST_STRING:{\nif (this.hasPromoter) {\nif (index > 0xFFFF) {\ncodeOut.write(InstructionCodec.codeUnit(Opcodes.CONST_STRING_JUMBO,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\n}\n else {\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\n}\n else {\nif (index > 0xFFFF) {\nthrow new DexException(\"string index out of bound: \" + Hex.u4(index) + \", perhaps you need to enable force jumbo mode.\");\n}\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\nbreak;\n}\ncase Opcodes.CONST_CLASS:case Opcodes.CHECK_CAST:case Opcodes.NEW_INSTANCE:case Opcodes.SGET:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SPUT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\nbreak;\n}\ncase Opcodes.CONST:case Opcodes.CONST_WIDE_32:{\nint literalInt=InstructionCodec.getLiteralInt(literal);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt));\nbreak;\n}\ncase Opcodes.FILL_ARRAY_DATA:case Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\nswitch (opcode) {\ncase Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\ncodeOut.setBaseAddress(target,codeOut.cursor());\nbreak;\n}\ndefault:{\nbreak;\n}\n}\nint relativeTarget=InstructionCodec.getTarget(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(relativeTarget),InstructionCodec.unit1(relativeTarget));\nbreak;\n}\ncase Opcodes.CONST_STRING_JUMBO:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\nbreak;\n}\ncase Opcodes.CONST_WIDE:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literal),InstructionCodec.unit1(literal),InstructionCodec.unit2(literal),InstructionCodec.unit3(literal));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,1)),indexUnit,InstructionCodec.codeUnit(a,0,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 604,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7067,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void visitOneRegisterInsn(int currentAddress,int opcode,int index,int indexType,int target,long literal,int a){\n  if (this.hasPromoter) {\n    target=this.insnPromoter.getPromotedAddress(target);\n  }\nswitch (opcode) {\ncase Opcodes.CONST_4:{\n      short opcodeUnit=(short)opcode;\n      codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,InstructionCodec.getLiteralNibble(literal))));\n      break;\n    }\ncase Opcodes.MOVE_RESULT:case Opcodes.MOVE_RESULT_WIDE:case Opcodes.MOVE_RESULT_OBJECT:case Opcodes.MOVE_EXCEPTION:case Opcodes.RETURN:case Opcodes.RETURN_WIDE:case Opcodes.RETURN_OBJECT:case Opcodes.MONITOR_ENTER:case Opcodes.MONITOR_EXIT:case Opcodes.THROW:{\n    codeOut.write(InstructionCodec.codeUnit(opcode,a));\n    break;\n  }\ncase Opcodes.IF_EQZ:case Opcodes.IF_NEZ:case Opcodes.IF_LTZ:case Opcodes.IF_GEZ:case Opcodes.IF_GTZ:case Opcodes.IF_LEZ:{\n  short relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),relativeTarget);\n  break;\n}\ncase Opcodes.CONST_16:case Opcodes.CONST_WIDE_16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.CONST_HIGH16:case Opcodes.CONST_WIDE_HIGH16:{\nint shift=(opcode == Opcodes.CONST_HIGH16) ? 16 : 48;\nshort literalShifted=(short)(literal >> shift);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),literalShifted);\nbreak;\n}\ncase Opcodes.CONST_STRING:{\nif (this.hasPromoter) {\nif (index > 0xFFFF) {\ncodeOut.write(InstructionCodec.codeUnit(Opcodes.CONST_STRING_JUMBO,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\n}\n else {\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\n}\n else {\nif (index > 0xFFFF) {\nthrow new DexException(\"string index out of bound: \" + Hex.u4(index) + \", perhaps you need to enable force jumbo mode.\");\n}\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\n}\nbreak;\n}\ncase Opcodes.CONST_CLASS:case Opcodes.CHECK_CAST:case Opcodes.NEW_INSTANCE:case Opcodes.SGET:case Opcodes.SGET_WIDE:case Opcodes.SGET_OBJECT:case Opcodes.SGET_BOOLEAN:case Opcodes.SGET_BYTE:case Opcodes.SGET_CHAR:case Opcodes.SGET_SHORT:case Opcodes.SPUT:case Opcodes.SPUT_WIDE:case Opcodes.SPUT_OBJECT:case Opcodes.SPUT_BOOLEAN:case Opcodes.SPUT_BYTE:case Opcodes.SPUT_CHAR:case Opcodes.SPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),indexUnit);\nbreak;\n}\ncase Opcodes.CONST:case Opcodes.CONST_WIDE_32:{\nint literalInt=InstructionCodec.getLiteralInt(literal);\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt));\nbreak;\n}\ncase Opcodes.FILL_ARRAY_DATA:case Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\nswitch (opcode) {\ncase Opcodes.PACKED_SWITCH:case Opcodes.SPARSE_SWITCH:{\ncodeOut.setBaseAddress(target,codeOut.cursor());\nbreak;\n}\ndefault:{\nbreak;\n}\n}\nint relativeTarget=InstructionCodec.getTarget(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(relativeTarget),InstructionCodec.unit1(relativeTarget));\nbreak;\n}\ncase Opcodes.CONST_STRING_JUMBO:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(index),InstructionCodec.unit1(index));\nbreak;\n}\ncase Opcodes.CONST_WIDE:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literal),InstructionCodec.unit1(literal),InstructionCodec.unit2(literal),InstructionCodec.unit3(literal));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,1)),indexUnit,InstructionCodec.codeUnit(a,0,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 629,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 225,
        "endColumnNumber" : 17
      },
      "nodeContext" : "codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.unit0(literalInt),InstructionCodec.unit1(literalInt))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 223,
    "startColumnNumber" : 24,
    "endLineNumber" : 223,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}