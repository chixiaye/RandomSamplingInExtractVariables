{
  "id" : 22,
  "expression" : "dotMark == (i - 1)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/segment/nested/NestedPathFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dotMark == (i - 1)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 96,
      "startColumnNumber" : 12,
      "endLineNumber" : 96,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "dotMark == (i - 1) && dotMark != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dotMark == (i - 1) && dotMark != 0) {\n  badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 95,
        "startColumnNumber" : 67,
        "endLineNumber" : 105,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (dotMark == (i - 1) && dotMark != 0) {\n    badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n  }\n  if (dotMark >= 0 && i > 1) {\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    dotMark=-1;\n  }\n  arrayMark=i;\n  partMark=i + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 95,
        "startColumnNumber" : 13,
        "endLineNumber" : 142,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n  if (dotMark == (i - 1) && dotMark != 0) {\n    badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n  }\n  if (dotMark >= 0 && i > 1) {\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    dotMark=-1;\n  }\n  arrayMark=i;\n  partMark=i + 1;\n}\n else if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n  String maybeNumber=getPathSubstring(path,partMark,i);\n  try {\n    int index=Integer.parseInt(maybeNumber);\n    parts.add(new NestedPathArrayElement(index));\n    dotMark=-1;\n    arrayMark=-1;\n    partMark=i + 1;\n  }\n catch (  NumberFormatException ignored) {\n    badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n  }\n}\n else if (dotMark == -1 && arrayMark == -1) {\n  badFormatJsonPath(path,\"path parts must be separated with '.'\");\n}\n else if (current == '\\'' && quoteMark < 0) {\n  if (arrayMark != i - 1) {\n    badFormatJsonPath(path,\"' must be immediately after '['\");\n  }\n  quoteMark=i;\n  partMark=i + 1;\n}\n else if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n  if (path.charAt(i + 1) != ']') {\n    if (arrayMark >= 0) {\n      continue;\n    }\n    badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n  }\n  parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n  dotMark=-1;\n  quoteMark=-1;\n  if (++i == path.length()) {\n    break;\n  }\n  partMark=i + 1;\n  arrayMark=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2200,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 142,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (current == '.' && arrayMark < 0 && quoteMark < 0) {\n  if (dotMark >= 0) {\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n  }\n  dotMark=i;\n  partMark=i + 1;\n}\n else if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n  if (dotMark == (i - 1) && dotMark != 0) {\n    badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n  }\n  if (dotMark >= 0 && i > 1) {\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    dotMark=-1;\n  }\n  arrayMark=i;\n  partMark=i + 1;\n}\n else if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n  String maybeNumber=getPathSubstring(path,partMark,i);\n  try {\n    int index=Integer.parseInt(maybeNumber);\n    parts.add(new NestedPathArrayElement(index));\n    dotMark=-1;\n    arrayMark=-1;\n    partMark=i + 1;\n  }\n catch (  NumberFormatException ignored) {\n    badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n  }\n}\n else if (dotMark == -1 && arrayMark == -1) {\n  badFormatJsonPath(path,\"path parts must be separated with '.'\");\n}\n else if (current == '\\'' && quoteMark < 0) {\n  if (arrayMark != i - 1) {\n    badFormatJsonPath(path,\"' must be immediately after '['\");\n  }\n  quoteMark=i;\n  partMark=i + 1;\n}\n else if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n  if (path.charAt(i + 1) != ']') {\n    if (arrayMark >= 0) {\n      continue;\n    }\n    badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n  }\n  parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n  dotMark=-1;\n  quoteMark=-1;\n  if (++i == path.length()) {\n    break;\n  }\n  partMark=i + 1;\n  arrayMark=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 308,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2260,
        "startLineNumber" : 87,
        "startColumnNumber" : 44,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final char current=path.charAt(i);\n  if (current == '.' && arrayMark < 0 && quoteMark < 0) {\n    if (dotMark >= 0) {\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    }\n    dotMark=i;\n    partMark=i + 1;\n  }\n else   if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n    if (dotMark == (i - 1) && dotMark != 0) {\n      badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n    }\n    if (dotMark >= 0 && i > 1) {\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      dotMark=-1;\n    }\n    arrayMark=i;\n    partMark=i + 1;\n  }\n else   if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n    String maybeNumber=getPathSubstring(path,partMark,i);\n    try {\n      int index=Integer.parseInt(maybeNumber);\n      parts.add(new NestedPathArrayElement(index));\n      dotMark=-1;\n      arrayMark=-1;\n      partMark=i + 1;\n    }\n catch (    NumberFormatException ignored) {\n      badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n    }\n  }\n else   if (dotMark == -1 && arrayMark == -1) {\n    badFormatJsonPath(path,\"path parts must be separated with '.'\");\n  }\n else   if (current == '\\'' && quoteMark < 0) {\n    if (arrayMark != i - 1) {\n      badFormatJsonPath(path,\"' must be immediately after '['\");\n    }\n    quoteMark=i;\n    partMark=i + 1;\n  }\n else   if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n    if (path.charAt(i + 1) != ']') {\n      if (arrayMark >= 0) {\n        continue;\n      }\n      badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n    }\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    dotMark=-1;\n    quoteMark=-1;\n    if (++i == path.length()) {\n      break;\n    }\n    partMark=i + 1;\n    arrayMark=-1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2300,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i < path.length(); i++) {\n  final char current=path.charAt(i);\n  if (current == '.' && arrayMark < 0 && quoteMark < 0) {\n    if (dotMark >= 0) {\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    }\n    dotMark=i;\n    partMark=i + 1;\n  }\n else   if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n    if (dotMark == (i - 1) && dotMark != 0) {\n      badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n    }\n    if (dotMark >= 0 && i > 1) {\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      dotMark=-1;\n    }\n    arrayMark=i;\n    partMark=i + 1;\n  }\n else   if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n    String maybeNumber=getPathSubstring(path,partMark,i);\n    try {\n      int index=Integer.parseInt(maybeNumber);\n      parts.add(new NestedPathArrayElement(index));\n      dotMark=-1;\n      arrayMark=-1;\n      partMark=i + 1;\n    }\n catch (    NumberFormatException ignored) {\n      badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n    }\n  }\n else   if (dotMark == -1 && arrayMark == -1) {\n    badFormatJsonPath(path,\"path parts must be separated with '.'\");\n  }\n else   if (current == '\\'' && quoteMark < 0) {\n    if (arrayMark != i - 1) {\n      badFormatJsonPath(path,\"' must be immediately after '['\");\n    }\n    quoteMark=i;\n    partMark=i + 1;\n  }\n else   if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n    if (path.charAt(i + 1) != ']') {\n      if (arrayMark >= 0) {\n        continue;\n      }\n      badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n    }\n    parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n    dotMark=-1;\n    quoteMark=-1;\n    if (++i == path.length()) {\n      break;\n    }\n    partMark=i + 1;\n    arrayMark=-1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 331,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (path == null || path.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<NestedPathPart> parts=new ArrayList<>();\n  if (!path.startsWith(\"$\")) {\n    badFormatJsonPath(path,\"must start with '$'\");\n  }\n  if (path.length() == 1) {\n    return Collections.emptyList();\n  }\n  int partMark=-1;\n  int dotMark=-1;\n  int arrayMark=-1;\n  int quoteMark=-1;\n  for (int i=1; i < path.length(); i++) {\n    final char current=path.charAt(i);\n    if (current == '.' && arrayMark < 0 && quoteMark < 0) {\n      if (dotMark >= 0) {\n        parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      }\n      dotMark=i;\n      partMark=i + 1;\n    }\n else     if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n      if (dotMark == (i - 1) && dotMark != 0) {\n        badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n      }\n      if (dotMark >= 0 && i > 1) {\n        parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n        dotMark=-1;\n      }\n      arrayMark=i;\n      partMark=i + 1;\n    }\n else     if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n      String maybeNumber=getPathSubstring(path,partMark,i);\n      try {\n        int index=Integer.parseInt(maybeNumber);\n        parts.add(new NestedPathArrayElement(index));\n        dotMark=-1;\n        arrayMark=-1;\n        partMark=i + 1;\n      }\n catch (      NumberFormatException ignored) {\n        badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n      }\n    }\n else     if (dotMark == -1 && arrayMark == -1) {\n      badFormatJsonPath(path,\"path parts must be separated with '.'\");\n    }\n else     if (current == '\\'' && quoteMark < 0) {\n      if (arrayMark != i - 1) {\n        badFormatJsonPath(path,\"' must be immediately after '['\");\n      }\n      quoteMark=i;\n      partMark=i + 1;\n    }\n else     if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n      if (path.charAt(i + 1) != ']') {\n        if (arrayMark >= 0) {\n          continue;\n        }\n        badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n      }\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      dotMark=-1;\n      quoteMark=-1;\n      if (++i == path.length()) {\n        break;\n      }\n      partMark=i + 1;\n      arrayMark=-1;\n    }\n  }\n  if (partMark < path.length()) {\n    if (quoteMark != -1) {\n      badFormatJsonPath(path,\"unterminated '\");\n    }\n    if (arrayMark != -1) {\n      badFormatJsonPath(path,\"unterminated '['\");\n    }\n    parts.add(new NestedPathField(path.substring(partMark)));\n  }\n  return parts;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3660,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * split a JSONPath path into a series of extractors to find things in stuff\n */\npublic static List<NestedPathPart> parseJsonPath(@Nullable String path){\n  if (path == null || path.isEmpty()) {\n    return Collections.emptyList();\n  }\n  List<NestedPathPart> parts=new ArrayList<>();\n  if (!path.startsWith(\"$\")) {\n    badFormatJsonPath(path,\"must start with '$'\");\n  }\n  if (path.length() == 1) {\n    return Collections.emptyList();\n  }\n  int partMark=-1;\n  int dotMark=-1;\n  int arrayMark=-1;\n  int quoteMark=-1;\n  for (int i=1; i < path.length(); i++) {\n    final char current=path.charAt(i);\n    if (current == '.' && arrayMark < 0 && quoteMark < 0) {\n      if (dotMark >= 0) {\n        parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      }\n      dotMark=i;\n      partMark=i + 1;\n    }\n else     if (current == '[' && arrayMark < 0 && quoteMark < 0) {\n      if (dotMark == (i - 1) && dotMark != 0) {\n        badFormatJsonPath(path,\"invalid position \" + i + \" for '[', must not follow '.' or must be contained with '\");\n      }\n      if (dotMark >= 0 && i > 1) {\n        parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n        dotMark=-1;\n      }\n      arrayMark=i;\n      partMark=i + 1;\n    }\n else     if (current == ']' && arrayMark >= 0 && quoteMark < 0) {\n      String maybeNumber=getPathSubstring(path,partMark,i);\n      try {\n        int index=Integer.parseInt(maybeNumber);\n        parts.add(new NestedPathArrayElement(index));\n        dotMark=-1;\n        arrayMark=-1;\n        partMark=i + 1;\n      }\n catch (      NumberFormatException ignored) {\n        badFormatJsonPath(path,\"expected number for array specifier got \" + maybeNumber + \" instead. Use ' if this value was meant to be a field name\");\n      }\n    }\n else     if (dotMark == -1 && arrayMark == -1) {\n      badFormatJsonPath(path,\"path parts must be separated with '.'\");\n    }\n else     if (current == '\\'' && quoteMark < 0) {\n      if (arrayMark != i - 1) {\n        badFormatJsonPath(path,\"' must be immediately after '['\");\n      }\n      quoteMark=i;\n      partMark=i + 1;\n    }\n else     if (current == '\\'' && quoteMark >= 0 && path.charAt(i - 1) != '\\\\') {\n      if (path.charAt(i + 1) != ']') {\n        if (arrayMark >= 0) {\n          continue;\n        }\n        badFormatJsonPath(path,\"closing ' must immediately precede ']'\");\n      }\n      parts.add(new NestedPathField(getPathSubstring(path,partMark,i)));\n      dotMark=-1;\n      quoteMark=-1;\n      if (++i == path.length()) {\n        break;\n      }\n      partMark=i + 1;\n      arrayMark=-1;\n    }\n  }\n  if (partMark < path.length()) {\n    if (quoteMark != -1) {\n      badFormatJsonPath(path,\"unterminated '\");\n    }\n    if (arrayMark != -1) {\n      badFormatJsonPath(path,\"unterminated '['\");\n    }\n    parts.add(new NestedPathField(path.substring(partMark)));\n  }\n  return parts;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 462,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 46
      },
      "nodeContext" : "dotMark == (i - 1) && dotMark != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 96,
    "startColumnNumber" : 12,
    "endLineNumber" : 96,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}