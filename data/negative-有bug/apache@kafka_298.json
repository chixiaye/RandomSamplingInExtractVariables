{
  "id" : 298,
  "expression" : "\"[1, 2, \"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/api/src/test/java/org/apache/kafka/connect/data/ValuesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"[1, 2, \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 358,
      "startColumnNumber" : 66,
      "endLineNumber" : 358,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 358,
        "startColumnNumber" : 66,
        "endLineNumber" : 358,
        "endColumnNumber" : 94
      },
      "nodeContext" : "\"[1, 2, \" + thirdValue + \"]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 358,
        "startColumnNumber" : 23,
        "endLineNumber" : 358,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 358,
        "startColumnNumber" : 16,
        "endLineNumber" : 358,
        "endColumnNumber" : 95
      },
      "nodeContext" : "list=Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 358,
        "startColumnNumber" : 8,
        "endLineNumber" : 358,
        "endColumnNumber" : 96
      },
      "nodeContext" : "List<?> list=Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 356,
        "startColumnNumber" : 99,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int thirdValue=Short.MAX_VALUE + 1;\n  List<?> list=Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\");\n  assertEquals(3,list.size());\n  assertEquals(1,((Number)list.get(0)).intValue());\n  assertEquals(2,((Number)list.get(1)).intValue());\n  assertEquals(thirdValue,((Number)list.get(2)).intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 352,
        "startColumnNumber" : 4,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The parsed array has byte values and one int value, so we should return list with single unified type of integers.\n */\n@Test public void shouldConvertStringOfListWithOnlyNumericElementTypesIntoListOfLargestNumericType(){\n  int thirdValue=Short.MAX_VALUE + 1;\n  List<?> list=Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\");\n  assertEquals(3,list.size());\n  assertEquals(1,((Number)list.get(0)).intValue());\n  assertEquals(2,((Number)list.get(1)).intValue());\n  assertEquals(thirdValue,((Number)list.get(2)).intValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 358,
        "startColumnNumber" : 8,
        "endLineNumber" : 358,
        "endColumnNumber" : 96
      },
      "nodeContext" : "List<?> list=Values.convertToList(Schema.STRING_SCHEMA,\"[1, 2, \" + thirdValue + \"]\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 358,
    "startColumnNumber" : 66,
    "endLineNumber" : 358,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}