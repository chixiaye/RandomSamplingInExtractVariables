{
  "id" : 183,
  "expression" : "usages.isEmpty()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/GrammarDependencies.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "usages.isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 114,
      "startColumnNumber" : 17,
      "endLineNumber" : 114,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 114,
        "startColumnNumber" : 16,
        "endLineNumber" : 114,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!usages.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!usages.isEmpty()) {\n  grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n  log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 438,
        "startLineNumber" : 111,
        "startColumnNumber" : 46,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Collection<String> usages=findUsages(getRelativePath(grammarFile));\n  if (!usages.isEmpty()) {\n    grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n    log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File grammarFile : grammarFiles) {\n  Collection<String> usages=findUsages(getRelativePath(grammarFile));\n  if (!usages.isEmpty()) {\n    grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n    log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 97,
        "startColumnNumber" : 68,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debug(\"Analysing grammar dependencies \" + sourceDirectory);\n  Collection<File> grammarsAndTokens=new HashSet<File>();\n  grammarsAndTokens.addAll(importGrammarFiles);\n  grammarsAndTokens.addAll(grammarFiles);\n  for (  File grammarFile : grammarsAndTokens) {\n    if (!grammarFile.getName().endsWith(\".tokens\"))     analyse(grammarFile,grammarsAndTokens,tool);\n  }\n  for (  File grammarFile : grammarFiles) {\n    Collection<String> usages=findUsages(getRelativePath(grammarFile));\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n    }\n  }\n  for (  File grammarFile : importGrammarFiles) {\n    Collection<String> usages=findUsages(grammarFile.getName());\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2077,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Performs dependency analysis for the given grammar files.\n * @param grammarFiles        the grammar files.\n * @param importGrammarFiles  the import grammar files.\n * @param tool                the tool to use.\n * @return  self-reference.\n */\npublic GrammarDependencies analyze(Set<File> grammarFiles,Set<File> importGrammarFiles,Tool tool) throws IOException {\n  log.debug(\"Analysing grammar dependencies \" + sourceDirectory);\n  Collection<File> grammarsAndTokens=new HashSet<File>();\n  grammarsAndTokens.addAll(importGrammarFiles);\n  grammarsAndTokens.addAll(grammarFiles);\n  for (  File grammarFile : grammarsAndTokens) {\n    if (!grammarFile.getName().endsWith(\".tokens\"))     analyse(grammarFile,grammarsAndTokens,tool);\n  }\n  for (  File grammarFile : grammarFiles) {\n    Collection<String> usages=findUsages(getRelativePath(grammarFile));\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n    }\n  }\n  for (  File grammarFile : importGrammarFiles) {\n    Collection<String> usages=findUsages(grammarFile.getName());\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 203,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 114,
        "startColumnNumber" : 16,
        "endLineNumber" : 114,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!usages.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  }, {
    "nodeContext" : "usages.isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 127,
      "startColumnNumber" : 17,
      "endLineNumber" : 127,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!usages.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 324,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!usages.isEmpty()) {\n  grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n  log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 123,
        "startColumnNumber" : 52,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Collection<String> usages=findUsages(grammarFile.getName());\n  if (!usages.isEmpty()) {\n    grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n    log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File grammarFile : importGrammarFiles) {\n  Collection<String> usages=findUsages(grammarFile.getName());\n  if (!usages.isEmpty()) {\n    grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n    log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 97,
        "startColumnNumber" : 68,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debug(\"Analysing grammar dependencies \" + sourceDirectory);\n  Collection<File> grammarsAndTokens=new HashSet<File>();\n  grammarsAndTokens.addAll(importGrammarFiles);\n  grammarsAndTokens.addAll(grammarFiles);\n  for (  File grammarFile : grammarsAndTokens) {\n    if (!grammarFile.getName().endsWith(\".tokens\"))     analyse(grammarFile,grammarsAndTokens,tool);\n  }\n  for (  File grammarFile : grammarFiles) {\n    Collection<String> usages=findUsages(getRelativePath(grammarFile));\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n    }\n  }\n  for (  File grammarFile : importGrammarFiles) {\n    Collection<String> usages=findUsages(grammarFile.getName());\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2077,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Performs dependency analysis for the given grammar files.\n * @param grammarFiles        the grammar files.\n * @param importGrammarFiles  the import grammar files.\n * @param tool                the tool to use.\n * @return  self-reference.\n */\npublic GrammarDependencies analyze(Set<File> grammarFiles,Set<File> importGrammarFiles,Tool tool) throws IOException {\n  log.debug(\"Analysing grammar dependencies \" + sourceDirectory);\n  Collection<File> grammarsAndTokens=new HashSet<File>();\n  grammarsAndTokens.addAll(importGrammarFiles);\n  grammarsAndTokens.addAll(grammarFiles);\n  for (  File grammarFile : grammarsAndTokens) {\n    if (!grammarFile.getName().endsWith(\".tokens\"))     analyse(grammarFile,grammarsAndTokens,tool);\n  }\n  for (  File grammarFile : grammarFiles) {\n    Collection<String> usages=findUsages(getRelativePath(grammarFile));\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + getRelativePath(grammarFile) + \" used by \"+ usages);\n    }\n  }\n  for (  File grammarFile : importGrammarFiles) {\n    Collection<String> usages=findUsages(grammarFile.getName());\n    if (!usages.isEmpty()) {\n      grammars.put(grammarFile,new AbstractMap.SimpleImmutableEntry<byte[],Collection<String>>(MojoUtils.checksum(grammarFile),usages));\n      log.debug(\"  \" + grammarFile.getName() + \" imported by \"+ usages);\n    }\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 203,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 33
      },
      "nodeContext" : "!usages.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 114,
    "startColumnNumber" : 17,
    "endLineNumber" : 114,
    "endColumnNumber" : 33
  }, {
    "charLength" : 16,
    "startLineNumber" : 127,
    "startColumnNumber" : 17,
    "endLineNumber" : 127,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}