{
  "id" : 168,
  "expression" : "master3",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonKeysTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "master3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 25,
      "endLineNumber" : 112,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 109,
        "startColumnNumber" : 38,
        "endLineNumber" : 112,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 109,
        "startColumnNumber" : 22,
        "endLineNumber" : 112,
        "endColumnNumber" : 41
      },
      "nodeContext" : "clusterRunner=new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ClusterRunner clusterRunner=new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2190,
        "startLineNumber" : 100,
        "startColumnNumber" : 106,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RedisRunner master1=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner master2=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner master3=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave1=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave2=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave3=new RedisRunner().randomPort().randomDir().nosave();\n  ClusterRunner clusterRunner=new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3);\n  ClusterProcesses process=clusterRunner.run();\n  Config config=new Config();\n  config.useClusterServers().setLoadBalancer(new RandomLoadBalancer()).addNodeAddress(process.getNodes().stream().findAny().get().getRedisServerAddressAndPort());\n  RedissonClient redisson=Redisson.create(config);\n  int size=10000;\n  for (int i=0; i < size; i++) {\n    redisson.getBucket(\"test\" + i).set(i);\n  }\n  assertThat(redisson.getKeys().count()).isEqualTo(size);\n  Long noOfKeysDeleted=0L;\n  int chunkSize=20;\n  Iterable<String> keysIterator=redisson.getKeys().getKeysByPattern(\"test*\",chunkSize);\n  Set<String> keys=new HashSet<>();\n  for (  String key : keysIterator) {\n    keys.add(key);\n    if (keys.size() % chunkSize == 0) {\n      long res=redisson.getKeys().delete(keys.toArray(new String[keys.size()]));\n      assertThat(res).isEqualTo(chunkSize);\n      noOfKeysDeleted+=res;\n      keys.clear();\n    }\n  }\n  if (!keys.isEmpty()) {\n    noOfKeysDeleted+=redisson.getKeys().delete(keys.toArray(new String[keys.size()]));\n  }\n  assertThat(noOfKeysDeleted).isEqualTo(size);\n  redisson.shutdown();\n  process.shutdown();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2302,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testKeysByPattern() throws FailedToStartRedisException, IOException, InterruptedException {\n  RedisRunner master1=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner master2=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner master3=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave1=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave2=new RedisRunner().randomPort().randomDir().nosave();\n  RedisRunner slave3=new RedisRunner().randomPort().randomDir().nosave();\n  ClusterRunner clusterRunner=new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3);\n  ClusterProcesses process=clusterRunner.run();\n  Config config=new Config();\n  config.useClusterServers().setLoadBalancer(new RandomLoadBalancer()).addNodeAddress(process.getNodes().stream().findAny().get().getRedisServerAddressAndPort());\n  RedissonClient redisson=Redisson.create(config);\n  int size=10000;\n  for (int i=0; i < size; i++) {\n    redisson.getBucket(\"test\" + i).set(i);\n  }\n  assertThat(redisson.getKeys().count()).isEqualTo(size);\n  Long noOfKeysDeleted=0L;\n  int chunkSize=20;\n  Iterable<String> keysIterator=redisson.getKeys().getKeysByPattern(\"test*\",chunkSize);\n  Set<String> keys=new HashSet<>();\n  for (  String key : keysIterator) {\n    keys.add(key);\n    if (keys.size() % chunkSize == 0) {\n      long res=redisson.getKeys().delete(keys.toArray(new String[keys.size()]));\n      assertThat(res).isEqualTo(chunkSize);\n      noOfKeysDeleted+=res;\n      keys.clear();\n    }\n  }\n  if (!keys.isEmpty()) {\n    noOfKeysDeleted+=redisson.getKeys().delete(keys.toArray(new String[keys.size()]));\n  }\n  assertThat(noOfKeysDeleted).isEqualTo(size);\n  redisson.shutdown();\n  process.shutdown();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 109,
        "startColumnNumber" : 38,
        "endLineNumber" : 112,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new ClusterRunner().addNode(master1,slave1).addNode(master2,slave2).addNode(master3,slave3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.redisson.RedisRunner"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 25,
    "endLineNumber" : 112,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}