{
  "id" : 92,
  "expression" : "responseUuid != null",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-configuration/grpc-configuration-sync/src/main/java/org/apache/skywalking/oap/server/configuration/grpc/GRPCConfigWatcherRegister.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responseUuid != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 60,
      "startColumnNumber" : 16,
      "endLineNumber" : 60,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 74
      },
      "nodeContext" : "responseUuid != null && Objects.equals(uuid,responseUuid)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (responseUuid != null && Objects.equals(uuid,responseUuid)) {\n  return Optional.empty();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 946,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ConfigurationRequest.Builder builder=ConfigurationRequest.newBuilder().setClusterName(settings.getClusterName());\n  if (uuid != null) {\n    builder.setUuid(uuid);\n  }\n  ConfigurationResponse response=stub.call(builder.build());\n  String responseUuid=response.getUuid();\n  if (responseUuid != null && Objects.equals(uuid,responseUuid)) {\n    return Optional.empty();\n  }\n  response.getConfigTableList().forEach(config -> {\n    final String name=config.getName();\n    if (keys.contains(name)) {\n      table.add(new ConfigTable.ConfigItem(name,config.getValue()));\n    }\n  }\n);\n  this.uuid=responseUuid;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ConfigurationRequest.Builder builder=ConfigurationRequest.newBuilder().setClusterName(settings.getClusterName());\n  if (uuid != null) {\n    builder.setUuid(uuid);\n  }\n  ConfigurationResponse response=stub.call(builder.build());\n  String responseUuid=response.getUuid();\n  if (responseUuid != null && Objects.equals(uuid,responseUuid)) {\n    return Optional.empty();\n  }\n  response.getConfigTableList().forEach(config -> {\n    final String name=config.getName();\n    if (keys.contains(name)) {\n      table.add(new ConfigTable.ConfigItem(name,config.getValue()));\n    }\n  }\n);\n  this.uuid=responseUuid;\n}\n catch (Exception e) {\n  LOGGER.error(\"Remote config center [\" + settings + \"] is not available.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 120,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 50,
        "startColumnNumber" : 62,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConfigTable table=new ConfigTable();\n  try {\n    ConfigurationRequest.Builder builder=ConfigurationRequest.newBuilder().setClusterName(settings.getClusterName());\n    if (uuid != null) {\n      builder.setUuid(uuid);\n    }\n    ConfigurationResponse response=stub.call(builder.build());\n    String responseUuid=response.getUuid();\n    if (responseUuid != null && Objects.equals(uuid,responseUuid)) {\n      return Optional.empty();\n    }\n    response.getConfigTableList().forEach(config -> {\n      final String name=config.getName();\n      if (keys.contains(name)) {\n        table.add(new ConfigTable.ConfigItem(name,config.getValue()));\n      }\n    }\n);\n    this.uuid=responseUuid;\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Remote config center [\" + settings + \"] is not available.\",e);\n  }\n  return Optional.of(table);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1242,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<ConfigTable> readConfig(Set<String> keys){\n  ConfigTable table=new ConfigTable();\n  try {\n    ConfigurationRequest.Builder builder=ConfigurationRequest.newBuilder().setClusterName(settings.getClusterName());\n    if (uuid != null) {\n      builder.setUuid(uuid);\n    }\n    ConfigurationResponse response=stub.call(builder.build());\n    String responseUuid=response.getUuid();\n    if (responseUuid != null && Objects.equals(uuid,responseUuid)) {\n      return Optional.empty();\n    }\n    response.getConfigTableList().forEach(config -> {\n      final String name=config.getName();\n      if (keys.contains(name)) {\n        table.add(new ConfigTable.ConfigItem(name,config.getValue()));\n      }\n    }\n);\n    this.uuid=responseUuid;\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Remote config center [\" + settings + \"] is not available.\",e);\n  }\n  return Optional.of(table);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 74
      },
      "nodeContext" : "responseUuid != null && Objects.equals(uuid,responseUuid)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 60,
    "startColumnNumber" : 16,
    "endLineNumber" : 60,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}