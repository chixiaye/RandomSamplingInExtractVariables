{
  "id" : 83,
  "expression" : "new int[]{4}",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-core/src/test/java/org/apache/flink/api/common/operators/ExpressionKeysTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new int[]{4}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 196,
      "startColumnNumber" : 33,
      "endLineNumber" : 196,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 179,
        "startColumnNumber" : 40,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>> typeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>> fpk=new ExpressionKeys<>(0,typeInfo);\n  Assert.assertArrayEquals(new int[]{0},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(1,typeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(2,typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new int[]{0,1,2},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(null,typeInfo,true);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"*\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"_\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"f2\",typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f1.f2\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f2\",\"f0\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());\n  TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexTypeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<Tuple3<String,String,String>,String,String>>(new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexFpk=new ExpressionKeys<>(0,complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(new int[]{0,1,2},complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"_\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0.*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f2\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{6},complexFpk.computeLogicalKeyPositions());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 672,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4974,
        "startLineNumber" : 178,
        "startColumnNumber" : 4,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTupleKeyExpansion(){\n  TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>> typeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>> fpk=new ExpressionKeys<>(0,typeInfo);\n  Assert.assertArrayEquals(new int[]{0},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(1,typeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(2,typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new int[]{0,1,2},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(null,typeInfo,true);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"*\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"_\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"f2\",typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f1.f2\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f2\",\"f0\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());\n  TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexTypeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<Tuple3<String,String,String>,String,String>>(new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexFpk=new ExpressionKeys<>(0,complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(new int[]{0,1,2},complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"_\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0.*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f2\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{6},complexFpk.computeLogicalKeyPositions());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 678,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "new int[]{4}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 213,
      "startColumnNumber" : 33,
      "endLineNumber" : 213,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4928,
        "startLineNumber" : 179,
        "startColumnNumber" : 40,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>> typeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>> fpk=new ExpressionKeys<>(0,typeInfo);\n  Assert.assertArrayEquals(new int[]{0},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(1,typeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(2,typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new int[]{0,1,2},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(null,typeInfo,true);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"*\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"_\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"f2\",typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f1.f2\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f2\",\"f0\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());\n  TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexTypeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<Tuple3<String,String,String>,String,String>>(new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexFpk=new ExpressionKeys<>(0,complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(new int[]{0,1,2},complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"_\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0.*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f2\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{6},complexFpk.computeLogicalKeyPositions());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 672,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4974,
        "startLineNumber" : 178,
        "startColumnNumber" : 4,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTupleKeyExpansion(){\n  TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>> typeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>> fpk=new ExpressionKeys<>(0,typeInfo);\n  Assert.assertArrayEquals(new int[]{0},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(1,typeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(2,typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new int[]{0,1,2},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(null,typeInfo,true);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"*\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"_\",typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(\"f2\",typeInfo);\n  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f1.f2\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f0\",\"f1.f0\",\"f1.f1\",\"f2\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,4},fpk.computeLogicalKeyPositions());\n  fpk=new ExpressionKeys<>(new String[]{\"f2\",\"f0\"},typeInfo);\n  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());\n  TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexTypeInfo=new TupleTypeInfo<>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<Tuple3<String,String,String>,String,String>>(new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);\n  ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexFpk=new ExpressionKeys<>(0,complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(new int[]{0,1,2},complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"_\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0.*\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f1.f0\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());\n  complexFpk=new ExpressionKeys<>(\"f2\",complexTypeInfo);\n  Assert.assertArrayEquals(new int[]{6},complexFpk.computeLogicalKeyPositions());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 678,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 196,
    "startColumnNumber" : 33,
    "endLineNumber" : 196,
    "endColumnNumber" : 46
  }, {
    "charLength" : 13,
    "startLineNumber" : 213,
    "startColumnNumber" : 33,
    "endLineNumber" : 213,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}