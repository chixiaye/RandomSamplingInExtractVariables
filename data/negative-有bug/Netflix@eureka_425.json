{
  "id" : 425,
  "expression" : "registry.register(updateInfo,localSource)",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-write-server/src/test/java/com/netflix/eureka2/server/service/replication/RegistryReplicatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "registry.register(updateInfo,localSource)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 86,
      "startColumnNumber" : 8,
      "endLineNumber" : 86,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 62
      },
      "nodeContext" : "registry.register(updateInfo,localSource).subscribe()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 63
      },
      "nodeContext" : "registry.register(updateInfo,localSource).subscribe();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 71,
        "startColumnNumber" : 65,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ReplicationHelloReply helloReply=new ReplicationHelloReply(INSTANCE_INFO.getId(),false);\n  when(channel.hello(HELLO)).thenReturn(Observable.just(helloReply));\n  when(channel.register(any(InstanceInfo.class))).thenReturn(Observable.<Void>empty());\n  replicator.reconnect(channel);\n  verify(channel,times(1)).hello(HELLO);\n  verify(channel,times(1)).register(INSTANCE_INFO);\n  when(channel.register(any(InstanceInfo.class))).thenReturn(Observable.<Void>empty());\n  InstanceInfo updateInfo=new InstanceInfo.Builder().withInstanceInfo(INSTANCE_INFO).withAsg(\"newAsg\").build();\n  registry.register(updateInfo,localSource).subscribe();\n  testScheduler.triggerActions();\n  verify(channel,times(1)).register(updateInfo);\n  when(channel.unregister(anyString())).thenReturn(Observable.<Void>empty());\n  registry.unregister(updateInfo,localSource).subscribe();\n  testScheduler.triggerActions();\n  verify(channel,times(1)).unregister(updateInfo.getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1185,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplicatesRegistryContent() throws Exception {\n  ReplicationHelloReply helloReply=new ReplicationHelloReply(INSTANCE_INFO.getId(),false);\n  when(channel.hello(HELLO)).thenReturn(Observable.just(helloReply));\n  when(channel.register(any(InstanceInfo.class))).thenReturn(Observable.<Void>empty());\n  replicator.reconnect(channel);\n  verify(channel,times(1)).hello(HELLO);\n  verify(channel,times(1)).register(INSTANCE_INFO);\n  when(channel.register(any(InstanceInfo.class))).thenReturn(Observable.<Void>empty());\n  InstanceInfo updateInfo=new InstanceInfo.Builder().withInstanceInfo(INSTANCE_INFO).withAsg(\"newAsg\").build();\n  registry.register(updateInfo,localSource).subscribe();\n  testScheduler.triggerActions();\n  verify(channel,times(1)).register(updateInfo);\n  when(channel.unregister(anyString())).thenReturn(Observable.<Void>empty());\n  registry.unregister(updateInfo,localSource).subscribe();\n  testScheduler.triggerActions();\n  verify(channel,times(1)).unregister(updateInfo.getId());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 63
      },
      "nodeContext" : "registry.register(updateInfo,localSource).subscribe();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "com.netflix.eureka2.registry.Observable<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 86,
    "startColumnNumber" : 8,
    "endLineNumber" : 86,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}