{
  "id" : 231,
  "expression" : "ContainerConfiguration.Builder",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/PluginConfigurationProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ContainerConfiguration.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 95,
      "startColumnNumber" : 4,
      "endLineNumber" : 95,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ContainerConfiguration.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 500,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ContainerConfiguration.Builder containerConfigurationBuilder=ContainerConfiguration.builder().setEntrypoint(JavaEntrypointConstructor.makeDefaultEntrypoint(jibPluginConfiguration.getJvmFlags(),mainClass)).setProgramArguments(jibPluginConfiguration.getArgs()).setEnvironment(jibPluginConfiguration.getEnvironment()).setExposedPorts(ExposedPortsParser.parse(jibPluginConfiguration.getExposedPorts()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3594,
        "startLineNumber" : 57,
        "startColumnNumber" : 36,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  jibPluginConfiguration.handleDeprecatedParameters(logger);\n  ConfigurationPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);\n  MavenJibLogger.disableHttpLogging();\n  RegistryClient.setUserAgentSuffix(USER_AGENT_SUFFIX);\n  ImageReference baseImage=parseImageReference(jibPluginConfiguration.getBaseImage(),\"from\");\n  if (Boolean.getBoolean(\"sendCredentialsOverHttp\")) {\n    logger.warn(\"Authentication over HTTP is enabled. It is strongly recommended that you do not enable \" + \"this on a public network!\");\n  }\n  MavenSettingsServerCredentials mavenSettingsServerCredentials=new MavenSettingsServerCredentials(Preconditions.checkNotNull(jibPluginConfiguration.getSession()).getSettings(),jibPluginConfiguration.getSettingsDecrypter(),logger);\n  Authorization fromAuthorization=ConfigurationPropertyValidator.getImageAuth(logger,\"jib.from.auth.username\",\"jib.from.auth.password\",jibPluginConfiguration.getBaseImageAuth());\n  RegistryCredentials knownBaseRegistryCredentials=fromAuthorization != null ? new RegistryCredentials(\"jib-maven-plugin <from><auth> configuration\",fromAuthorization) : mavenSettingsServerCredentials.retrieve(baseImage.getRegistry());\n  ImageConfiguration.Builder baseImageConfiguration=ImageConfiguration.builder(baseImage).setCredentialHelper(jibPluginConfiguration.getBaseImageCredentialHelperName()).setKnownRegistryCredentials(knownBaseRegistryCredentials);\n  String mainClass=projectProperties.getMainClass(jibPluginConfiguration);\n  ContainerConfiguration.Builder containerConfigurationBuilder=ContainerConfiguration.builder().setEntrypoint(JavaEntrypointConstructor.makeDefaultEntrypoint(jibPluginConfiguration.getJvmFlags(),mainClass)).setProgramArguments(jibPluginConfiguration.getArgs()).setEnvironment(jibPluginConfiguration.getEnvironment()).setExposedPorts(ExposedPortsParser.parse(jibPluginConfiguration.getExposedPorts()));\n  if (jibPluginConfiguration.getUseCurrentTimestamp()) {\n    logger.warn(\"Setting image creation time to current time; your image may not be reproducible.\");\n    containerConfigurationBuilder.setCreationTime(Instant.now());\n  }\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(logger).setAllowInsecureRegistries(jibPluginConfiguration.getAllowInsecureRegistries()).setLayerConfigurations(projectProperties.getJavaLayerConfigurations().getLayerConfigurations());\n  CacheConfiguration applicationLayersCacheConfiguration=CacheConfiguration.forPath(projectProperties.getCacheDirectory());\n  buildConfigurationBuilder.setApplicationLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  if (jibPluginConfiguration.getUseOnlyProjectCache()) {\n    buildConfigurationBuilder.setBaseImageLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  }\n  return new PluginConfigurationProcessor(buildConfigurationBuilder,baseImageConfiguration,containerConfigurationBuilder,mavenSettingsServerCredentials);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4493,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets up  {@link BuildConfiguration} that is common among the image building goals. This includessetting up the base image reference/authorization, container configuration, cache configuration, and layer configuration.\n * @param logger the logger used to display messages\n * @param jibPluginConfiguration the {@link JibPluginConfiguration} providing the configurationdata\n * @param projectProperties used for providing additional information\n * @return a new {@link PluginConfigurationProcessor} containing pre-configured builders\n * @throws MojoExecutionException if the http timeout system property is misconfigured\n */\nstatic PluginConfigurationProcessor processCommonConfiguration(MavenJibLogger logger,JibPluginConfiguration jibPluginConfiguration,MavenProjectProperties projectProperties) throws MojoExecutionException {\n  jibPluginConfiguration.handleDeprecatedParameters(logger);\n  ConfigurationPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);\n  MavenJibLogger.disableHttpLogging();\n  RegistryClient.setUserAgentSuffix(USER_AGENT_SUFFIX);\n  ImageReference baseImage=parseImageReference(jibPluginConfiguration.getBaseImage(),\"from\");\n  if (Boolean.getBoolean(\"sendCredentialsOverHttp\")) {\n    logger.warn(\"Authentication over HTTP is enabled. It is strongly recommended that you do not enable \" + \"this on a public network!\");\n  }\n  MavenSettingsServerCredentials mavenSettingsServerCredentials=new MavenSettingsServerCredentials(Preconditions.checkNotNull(jibPluginConfiguration.getSession()).getSettings(),jibPluginConfiguration.getSettingsDecrypter(),logger);\n  Authorization fromAuthorization=ConfigurationPropertyValidator.getImageAuth(logger,\"jib.from.auth.username\",\"jib.from.auth.password\",jibPluginConfiguration.getBaseImageAuth());\n  RegistryCredentials knownBaseRegistryCredentials=fromAuthorization != null ? new RegistryCredentials(\"jib-maven-plugin <from><auth> configuration\",fromAuthorization) : mavenSettingsServerCredentials.retrieve(baseImage.getRegistry());\n  ImageConfiguration.Builder baseImageConfiguration=ImageConfiguration.builder(baseImage).setCredentialHelper(jibPluginConfiguration.getBaseImageCredentialHelperName()).setKnownRegistryCredentials(knownBaseRegistryCredentials);\n  String mainClass=projectProperties.getMainClass(jibPluginConfiguration);\n  ContainerConfiguration.Builder containerConfigurationBuilder=ContainerConfiguration.builder().setEntrypoint(JavaEntrypointConstructor.makeDefaultEntrypoint(jibPluginConfiguration.getJvmFlags(),mainClass)).setProgramArguments(jibPluginConfiguration.getArgs()).setEnvironment(jibPluginConfiguration.getEnvironment()).setExposedPorts(ExposedPortsParser.parse(jibPluginConfiguration.getExposedPorts()));\n  if (jibPluginConfiguration.getUseCurrentTimestamp()) {\n    logger.warn(\"Setting image creation time to current time; your image may not be reproducible.\");\n    containerConfigurationBuilder.setCreationTime(Instant.now());\n  }\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(logger).setAllowInsecureRegistries(jibPluginConfiguration.getAllowInsecureRegistries()).setLayerConfigurations(projectProperties.getJavaLayerConfigurations().getLayerConfigurations());\n  CacheConfiguration applicationLayersCacheConfiguration=CacheConfiguration.forPath(projectProperties.getCacheDirectory());\n  buildConfigurationBuilder.setApplicationLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  if (jibPluginConfiguration.getUseOnlyProjectCache()) {\n    buildConfigurationBuilder.setBaseImageLayersCacheConfiguration(applicationLayersCacheConfiguration);\n  }\n  return new PluginConfigurationProcessor(buildConfigurationBuilder,baseImageConfiguration,containerConfigurationBuilder,mavenSettingsServerCredentials);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ContainerConfiguration.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "com.google.cloud.tools.jib.configuration.ContainerConfiguration.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 95,
    "startColumnNumber" : 4,
    "endLineNumber" : 95,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}