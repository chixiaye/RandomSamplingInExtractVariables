{
  "id" : 396,
  "expression" : "sequence",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/cpp/UserVariablesExtension.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sequence",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 42,
      "startColumnNumber" : 12,
      "endLineNumber" : 42,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 30
      },
      "nodeContext" : "sequence.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sequence.isEmpty()) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 49,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Sequence<?> sequence=(Sequence)entry.getValue();\n  if (sequence.isEmpty()) {\n    continue;\n  }\n  if (!(sequence.get(0) instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 62,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (entry.getValue() instanceof Sequence) {\n  Sequence<?> sequence=(Sequence)entry.getValue();\n  if (sequence.isEmpty()) {\n    continue;\n  }\n  if (!(sequence.get(0) instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n  }\n}\n else if (entry.getValue() instanceof Depset) {\n  Depset depset=(Depset)entry.getValue();\n  if (depset.isEmpty()) {\n    continue;\n  }\n  if (!depset.getElementType().toString().equals(\"string\")) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n  }\n}\n else if (!(entry.getValue() instanceof String)) {\n  throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 39,
        "startColumnNumber" : 79,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (entry.getValue() instanceof Sequence) {\n    Sequence<?> sequence=(Sequence)entry.getValue();\n    if (sequence.isEmpty()) {\n      continue;\n    }\n    if (!(sequence.get(0) instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n    }\n  }\n else   if (entry.getValue() instanceof Depset) {\n    Depset depset=(Depset)entry.getValue();\n    if (depset.isEmpty()) {\n      continue;\n    }\n    if (!depset.getElementType().toString().equals(\"string\")) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n    }\n  }\n else   if (!(entry.getValue() instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n  if (entry.getValue() instanceof Sequence) {\n    Sequence<?> sequence=(Sequence)entry.getValue();\n    if (sequence.isEmpty()) {\n      continue;\n    }\n    if (!(sequence.get(0) instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n    }\n  }\n else   if (entry.getValue() instanceof Depset) {\n    Depset depset=(Depset)entry.getValue();\n    if (depset.isEmpty()) {\n      continue;\n    }\n    if (!depset.getElementType().toString().equals(\"string\")) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n    }\n  }\n else   if (!(entry.getValue() instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 35,
        "startColumnNumber" : 84,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.variablesExtension=Dict.cast(variablesExtension,String.class,Object.class,\"variables_extension\");\n  for (  Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n    if (entry.getValue() instanceof Sequence) {\n      Sequence<?> sequence=(Sequence)entry.getValue();\n      if (sequence.isEmpty()) {\n        continue;\n      }\n      if (!(sequence.get(0) instanceof String)) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n      }\n    }\n else     if (entry.getValue() instanceof Depset) {\n      Depset depset=(Depset)entry.getValue();\n      if (depset.isEmpty()) {\n        continue;\n      }\n      if (!depset.getElementType().toString().equals(\"string\")) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n      }\n    }\n else     if (!(entry.getValue() instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1519,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts a Starlark dictionary whose values can either be strings, string lists or string depsets to a regular Java map of objects.\n */\npublic UserVariablesExtension(Dict<?,?> variablesExtension) throws EvalException {\n  this.variablesExtension=Dict.cast(variablesExtension,String.class,Object.class,\"variables_extension\");\n  for (  Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n    if (entry.getValue() instanceof Sequence) {\n      Sequence<?> sequence=(Sequence)entry.getValue();\n      if (sequence.isEmpty()) {\n        continue;\n      }\n      if (!(sequence.get(0) instanceof String)) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n      }\n    }\n else     if (entry.getValue() instanceof Depset) {\n      Depset depset=(Depset)entry.getValue();\n      if (depset.isEmpty()) {\n        continue;\n      }\n      if (!depset.getElementType().toString().equals(\"string\")) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n      }\n    }\n else     if (!(entry.getValue() instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 30
      },
      "nodeContext" : "sequence.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "net.starlark.java.eval.Sequence<>"
  }, {
    "nodeContext" : "sequence",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 45,
      "startColumnNumber" : 14,
      "endLineNumber" : 45,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 45,
        "startColumnNumber" : 14,
        "endLineNumber" : 45,
        "endColumnNumber" : 29
      },
      "nodeContext" : "sequence.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 45,
        "startColumnNumber" : 14,
        "endLineNumber" : 45,
        "endColumnNumber" : 47
      },
      "nodeContext" : "sequence.get(0) instanceof String",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 45,
        "startColumnNumber" : 13,
        "endLineNumber" : 45,
        "endColumnNumber" : 48
      },
      "nodeContext" : "(sequence.get(0) instanceof String)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!(sequence.get(0) instanceof String)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!(sequence.get(0) instanceof String)) {\n  throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 40,
        "startColumnNumber" : 48,
        "endLineNumber" : 49,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Sequence<?> sequence=(Sequence)entry.getValue();\n  if (sequence.isEmpty()) {\n    continue;\n  }\n  if (!(sequence.get(0) instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 992,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 62,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (entry.getValue() instanceof Sequence) {\n  Sequence<?> sequence=(Sequence)entry.getValue();\n  if (sequence.isEmpty()) {\n    continue;\n  }\n  if (!(sequence.get(0) instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n  }\n}\n else if (entry.getValue() instanceof Depset) {\n  Depset depset=(Depset)entry.getValue();\n  if (depset.isEmpty()) {\n    continue;\n  }\n  if (!depset.getElementType().toString().equals(\"string\")) {\n    throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n  }\n}\n else if (!(entry.getValue() instanceof String)) {\n  throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 39,
        "startColumnNumber" : 79,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (entry.getValue() instanceof Sequence) {\n    Sequence<?> sequence=(Sequence)entry.getValue();\n    if (sequence.isEmpty()) {\n      continue;\n    }\n    if (!(sequence.get(0) instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n    }\n  }\n else   if (entry.getValue() instanceof Depset) {\n    Depset depset=(Depset)entry.getValue();\n    if (depset.isEmpty()) {\n      continue;\n    }\n    if (!depset.getElementType().toString().equals(\"string\")) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n    }\n  }\n else   if (!(entry.getValue() instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1081,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n  if (entry.getValue() instanceof Sequence) {\n    Sequence<?> sequence=(Sequence)entry.getValue();\n    if (sequence.isEmpty()) {\n      continue;\n    }\n    if (!(sequence.get(0) instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n    }\n  }\n else   if (entry.getValue() instanceof Depset) {\n    Depset depset=(Depset)entry.getValue();\n    if (depset.isEmpty()) {\n      continue;\n    }\n    if (!depset.getElementType().toString().equals(\"string\")) {\n      throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n    }\n  }\n else   if (!(entry.getValue() instanceof String)) {\n    throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 35,
        "startColumnNumber" : 84,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.variablesExtension=Dict.cast(variablesExtension,String.class,Object.class,\"variables_extension\");\n  for (  Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n    if (entry.getValue() instanceof Sequence) {\n      Sequence<?> sequence=(Sequence)entry.getValue();\n      if (sequence.isEmpty()) {\n        continue;\n      }\n      if (!(sequence.get(0) instanceof String)) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n      }\n    }\n else     if (entry.getValue() instanceof Depset) {\n      Depset depset=(Depset)entry.getValue();\n      if (depset.isEmpty()) {\n        continue;\n      }\n      if (!depset.getElementType().toString().equals(\"string\")) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n      }\n    }\n else     if (!(entry.getValue() instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1519,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Converts a Starlark dictionary whose values can either be strings, string lists or string depsets to a regular Java map of objects.\n */\npublic UserVariablesExtension(Dict<?,?> variablesExtension) throws EvalException {\n  this.variablesExtension=Dict.cast(variablesExtension,String.class,Object.class,\"variables_extension\");\n  for (  Map.Entry<String,Object> entry : this.variablesExtension.entrySet()) {\n    if (entry.getValue() instanceof Sequence) {\n      Sequence<?> sequence=(Sequence)entry.getValue();\n      if (sequence.isEmpty()) {\n        continue;\n      }\n      if (!(sequence.get(0) instanceof String)) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in sequence.\");\n      }\n    }\n else     if (entry.getValue() instanceof Depset) {\n      Depset depset=(Depset)entry.getValue();\n      if (depset.isEmpty()) {\n        continue;\n      }\n      if (!depset.getElementType().toString().equals(\"string\")) {\n        throw new EvalException(\"Trying to build UserVariableExtension, found non-string type in depset.\");\n      }\n    }\n else     if (!(entry.getValue() instanceof String)) {\n      throw new EvalException(\"Trying to build UserVariableExtension, the value in the UserVariablesExtension dict\" + \" must be a string, string sequence or depset.\");\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 45,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!(sequence.get(0) instanceof String)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "net.starlark.java.eval.Sequence<>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 42,
    "startColumnNumber" : 12,
    "endLineNumber" : 42,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 45,
    "startColumnNumber" : 14,
    "endLineNumber" : 45,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}