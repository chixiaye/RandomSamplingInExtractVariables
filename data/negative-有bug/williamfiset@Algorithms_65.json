{
  "id" : 65,
  "expression" : "maxIndex",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 158,
      "startColumnNumber" : 26,
      "endLineNumber" : 158,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 158,
        "startColumnNumber" : 21,
        "endLineNumber" : 158,
        "endColumnNumber" : 34
      },
      "nodeContext" : "i <= maxIndex",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 158,
        "startColumnNumber" : 21,
        "endLineNumber" : 158,
        "endColumnNumber" : 51
      },
      "nodeContext" : "i <= maxIndex && maxIndex <= j",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 139,
        "startColumnNumber" : 48,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 822,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=i; j < values.length; j++) {\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 138,
        "startColumnNumber" : 46,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1107,
        "startLineNumber" : 133,
        "startColumnNumber" : 43,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=2; loop < 100; loop++) {\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 132,
        "startColumnNumber" : 63,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void verifyIndexIsAlwaysLeftmostPosition_randomized(){\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 225,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 158,
      "startColumnNumber" : 38,
      "endLineNumber" : 158,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 158,
        "startColumnNumber" : 38,
        "endLineNumber" : 158,
        "endColumnNumber" : 51
      },
      "nodeContext" : "maxIndex <= j",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 158,
        "startColumnNumber" : 21,
        "endLineNumber" : 158,
        "endColumnNumber" : 51
      },
      "nodeContext" : "i <= maxIndex && maxIndex <= j",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 139,
        "startColumnNumber" : 48,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 822,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=i; j < values.length; j++) {\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 138,
        "startColumnNumber" : 46,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1107,
        "startLineNumber" : 133,
        "startColumnNumber" : 43,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=2; loop < 100; loop++) {\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 132,
        "startColumnNumber" : 63,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void verifyIndexIsAlwaysLeftmostPosition_randomized(){\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 225,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 158,
        "startColumnNumber" : 10,
        "endLineNumber" : 158,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxIndex",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 159,
      "startColumnNumber" : 56,
      "endLineNumber" : 159,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 139,
        "startColumnNumber" : 48,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 822,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=i; j < values.length; j++) {\n  long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n  int minIndex=0, maxIndex=0;\n  ;\n  for (int k=i; k <= j; k++) {\n    if (values[k] < min) {\n      min=values[k];\n      minIndex=k;\n    }\n    if (values[k] > max) {\n      max=values[k];\n      maxIndex=k;\n    }\n  }\n  assertThat(min_st.query(i,j)).isEqualTo(min);\n  assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n  assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n  assertThat(max_st.query(i,j)).isEqualTo(max);\n  assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n  assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 138,
        "startColumnNumber" : 46,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 138,
        "startColumnNumber" : 6,
        "endLineNumber" : 161,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  for (int j=i; j < values.length; j++) {\n    long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n    int minIndex=0, maxIndex=0;\n    ;\n    for (int k=i; k <= j; k++) {\n      if (values[k] < min) {\n        min=values[k];\n        minIndex=k;\n      }\n      if (values[k] > max) {\n        max=values[k];\n        maxIndex=k;\n      }\n    }\n    assertThat(min_st.query(i,j)).isEqualTo(min);\n    assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n    assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n    assertThat(max_st.query(i,j)).isEqualTo(max);\n    assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n    assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1107,
        "startLineNumber" : 133,
        "startColumnNumber" : 43,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 207,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1146,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=2; loop < 100; loop++) {\n  long[] values=genRandArray(loop,-100,+100);\n  SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n  SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n  for (int i=0; i < values.length; i++) {\n    for (int j=i; j < values.length; j++) {\n      long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n      int minIndex=0, maxIndex=0;\n      ;\n      for (int k=i; k <= j; k++) {\n        if (values[k] < min) {\n          min=values[k];\n          minIndex=k;\n        }\n        if (values[k] > max) {\n          max=values[k];\n          maxIndex=k;\n        }\n      }\n      assertThat(min_st.query(i,j)).isEqualTo(min);\n      assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n      assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n      assertThat(max_st.query(i,j)).isEqualTo(max);\n      assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n      assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 132,
        "startColumnNumber" : 63,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 163,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void verifyIndexIsAlwaysLeftmostPosition_randomized(){\n  for (int loop=2; loop < 100; loop++) {\n    long[] values=genRandArray(loop,-100,+100);\n    SparseTable min_st=new SparseTable(values,SparseTable.Operation.MIN);\n    SparseTable max_st=new SparseTable(values,SparseTable.Operation.MAX);\n    for (int i=0; i < values.length; i++) {\n      for (int j=i; j < values.length; j++) {\n        long min=Long.MAX_VALUE, max=Long.MIN_VALUE;\n        int minIndex=0, maxIndex=0;\n        ;\n        for (int k=i; k <= j; k++) {\n          if (values[k] < min) {\n            min=values[k];\n            minIndex=k;\n          }\n          if (values[k] > max) {\n            max=values[k];\n            maxIndex=k;\n          }\n        }\n        assertThat(min_st.query(i,j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(min_st.queryIndex(i,j)).isEqualTo(minIndex);\n        assertThat(max_st.query(i,j)).isEqualTo(max);\n        assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n        assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 225,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(max_st.queryIndex(i,j)).isEqualTo(maxIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 158,
    "startColumnNumber" : 26,
    "endLineNumber" : 158,
    "endColumnNumber" : 34
  }, {
    "charLength" : 8,
    "startLineNumber" : 158,
    "startColumnNumber" : 38,
    "endLineNumber" : 158,
    "endColumnNumber" : 46
  }, {
    "charLength" : 8,
    "startLineNumber" : 159,
    "startColumnNumber" : 56,
    "endLineNumber" : 159,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}