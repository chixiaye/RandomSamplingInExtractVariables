{
  "id" : 424,
  "expression" : "tab",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/tabs/TabIndicatorInterpolator.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 104,
      "startColumnNumber" : 8,
      "endLineNumber" : 104,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 19
      },
      "nodeContext" : "tab == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (tab == null) {\n  return new RectF();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 19
      },
      "nodeContext" : "tab == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 109,
      "startColumnNumber" : 48,
      "endLineNumber" : 109,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 109,
        "startColumnNumber" : 48,
        "endLineNumber" : 109,
        "endColumnNumber" : 70
      },
      "nodeContext" : "tab instanceof TabView",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n  return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 110,
      "startColumnNumber" : 53,
      "endLineNumber" : 110,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 110,
        "startColumnNumber" : 43,
        "endLineNumber" : 110,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(TabView)tab",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 110,
        "startColumnNumber" : 13,
        "endLineNumber" : 110,
        "endColumnNumber" : 78
      },
      "nodeContext" : "calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 110,
        "endColumnNumber" : 79
      },
      "nodeContext" : "return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 109,
        "startColumnNumber" : 72,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n  return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 110,
        "endColumnNumber" : 79
      },
      "nodeContext" : "return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 114,
      "startColumnNumber" : 21,
      "endLineNumber" : 114,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 114,
        "startColumnNumber" : 21,
        "endLineNumber" : 114,
        "endColumnNumber" : 34
      },
      "nodeContext" : "tab.getLeft()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 114,
        "startColumnNumber" : 11,
        "endLineNumber" : 114,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 114,
      "startColumnNumber" : 36,
      "endLineNumber" : 114,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 114,
        "startColumnNumber" : 36,
        "endLineNumber" : 114,
        "endColumnNumber" : 48
      },
      "nodeContext" : "tab.getTop()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 114,
        "startColumnNumber" : 11,
        "endLineNumber" : 114,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 114,
      "startColumnNumber" : 50,
      "endLineNumber" : 114,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 114,
        "startColumnNumber" : 50,
        "endLineNumber" : 114,
        "endColumnNumber" : 64
      },
      "nodeContext" : "tab.getRight()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 114,
        "startColumnNumber" : 11,
        "endLineNumber" : 114,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  }, {
    "nodeContext" : "tab",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 114,
      "startColumnNumber" : 66,
      "endLineNumber" : 114,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 114,
        "startColumnNumber" : 66,
        "endLineNumber" : 114,
        "endColumnNumber" : 81
      },
      "nodeContext" : "tab.getBottom()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 114,
        "startColumnNumber" : 11,
        "endLineNumber" : 114,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 103,
        "startColumnNumber" : 86,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A helper method to calculate the left and right bounds of an indicator when  {@code tab} isselected. <p>This method accounts for  {@link TabLayout#isTabIndicatorFullWidth()}'s value. If true, the returned left and right bounds will span the full width of  {@code tab}. If false, the returned bounds will span the width of the  {@code tab}'s content.\n * @param tabLayout The tab's parent {@link TabLayout}\n * @param tab The view of the tab under which the indicator will be positioned\n * @return A {@link RectF} containing the left and right bounds that the indicator should spanwhen  {@code tab} is selected.\n */\nstatic RectF calculateIndicatorWidthForTab(TabLayout tabLayout,@Nullable View tab){\n  if (tab == null) {\n    return new RectF();\n  }\n  if (!tabLayout.isTabIndicatorFullWidth() && tab instanceof TabView) {\n    return calculateTabViewContentBounds((TabView)tab,MIN_INDICATOR_WIDTH);\n  }\n  return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 83
      },
      "nodeContext" : "return new RectF(tab.getLeft(),tab.getTop(),tab.getRight(),tab.getBottom());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.material.tabs.View"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 104,
    "startColumnNumber" : 8,
    "endLineNumber" : 104,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 109,
    "startColumnNumber" : 48,
    "endLineNumber" : 109,
    "endColumnNumber" : 51
  }, {
    "charLength" : 3,
    "startLineNumber" : 110,
    "startColumnNumber" : 53,
    "endLineNumber" : 110,
    "endColumnNumber" : 56
  }, {
    "charLength" : 3,
    "startLineNumber" : 114,
    "startColumnNumber" : 21,
    "endLineNumber" : 114,
    "endColumnNumber" : 24
  }, {
    "charLength" : 3,
    "startLineNumber" : 114,
    "startColumnNumber" : 36,
    "endLineNumber" : 114,
    "endColumnNumber" : 39
  }, {
    "charLength" : 3,
    "startLineNumber" : 114,
    "startColumnNumber" : 50,
    "endLineNumber" : 114,
    "endColumnNumber" : 53
  }, {
    "charLength" : 3,
    "startLineNumber" : 114,
    "startColumnNumber" : 66,
    "endLineNumber" : 114,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  } ]
}