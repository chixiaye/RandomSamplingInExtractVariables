{
  "id" : 133,
  "expression" : "lower",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/JavacResolution.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lower",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 455,
      "startColumnNumber" : 8,
      "endLineNumber" : 455,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 21
      },
      "nodeContext" : "lower == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 76
      },
      "nodeContext" : "lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 455,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n  if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n  }\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n}\n else {\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 454,
        "startColumnNumber" : 22,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 454,
        "startColumnNumber" : 3,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (allowCompound) {\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 445,
        "startColumnNumber" : 68,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 445,
        "startColumnNumber" : 2,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (type instanceof CapturedType || type instanceof WildcardType) {\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 414,
        "startColumnNumber" : 145,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3411,
        "startLineNumber" : 414,
        "startColumnNumber" : 1,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static JCExpression typeToJCTree0(Type type,JavacAST ast,boolean allowCompound,boolean allowVoid) throws TypeNotConvertibleException {\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 510,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 76
      },
      "nodeContext" : "lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.Type"
  }, {
    "nodeContext" : "lower",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 455,
      "startColumnNumber" : 25,
      "endLineNumber" : 455,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 455,
        "startColumnNumber" : 25,
        "endLineNumber" : 455,
        "endColumnNumber" : 34
      },
      "nodeContext" : "lower.tag",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 455,
        "startColumnNumber" : 25,
        "endLineNumber" : 455,
        "endColumnNumber" : 76
      },
      "nodeContext" : "lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 76
      },
      "nodeContext" : "lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 455,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n  if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n  }\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n}\n else {\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 454,
        "startColumnNumber" : 22,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 454,
        "startColumnNumber" : 3,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (allowCompound) {\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 445,
        "startColumnNumber" : 68,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 445,
        "startColumnNumber" : 2,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (type instanceof CapturedType || type instanceof WildcardType) {\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 414,
        "startColumnNumber" : 145,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3411,
        "startLineNumber" : 414,
        "startColumnNumber" : 1,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static JCExpression typeToJCTree0(Type type,JavacAST ast,boolean allowCompound,boolean allowVoid) throws TypeNotConvertibleException {\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 510,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 76
      },
      "nodeContext" : "lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "lower",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 461,
      "startColumnNumber" : 78,
      "endLineNumber" : 461,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 461,
        "startColumnNumber" : 65,
        "endLineNumber" : 461,
        "endColumnNumber" : 103
      },
      "nodeContext" : "typeToJCTree(lower,ast,false,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 461,
        "startColumnNumber" : 12,
        "endLineNumber" : 461,
        "endColumnNumber" : 104
      },
      "nodeContext" : "maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 461,
        "startColumnNumber" : 5,
        "endLineNumber" : 461,
        "endColumnNumber" : 105
      },
      "nodeContext" : "return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 460,
        "startColumnNumber" : 11,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 455,
        "startColumnNumber" : 4,
        "endLineNumber" : 462,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n  if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n  }\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n}\n else {\n  return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 454,
        "startColumnNumber" : 22,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 454,
        "startColumnNumber" : 3,
        "endLineNumber" : 463,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (allowCompound) {\n  if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n    if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n    }\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n  }\n else {\n    return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 883,
        "startLineNumber" : 445,
        "startColumnNumber" : 68,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 445,
        "startColumnNumber" : 2,
        "endLineNumber" : 469,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (type instanceof CapturedType || type instanceof WildcardType) {\n  Type lower, upper;\n  if (type instanceof WildcardType) {\n    upper=((WildcardType)type).getExtendsBound();\n    lower=((WildcardType)type).getSuperBound();\n  }\n else {\n    lower=type.getLowerBound();\n    upper=type.getUpperBound();\n  }\n  if (allowCompound) {\n    if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n      if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n      }\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n    }\n else {\n      return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n    }\n  }\n  if (upper != null) {\n    return typeToJCTree(upper,ast,allowCompound,allowVoid);\n  }\n  return createJavaLangObject(ast);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 149,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 414,
        "startColumnNumber" : 145,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3411,
        "startLineNumber" : 414,
        "startColumnNumber" : 1,
        "endLineNumber" : 495,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static JCExpression typeToJCTree0(Type type,JavacAST ast,boolean allowCompound,boolean allowVoid) throws TypeNotConvertibleException {\n  TreeMaker maker=ast.getTreeMaker();\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"BOT\"))   return createJavaLangObject(ast);\n  if (type.tag == Javac.getCtcInt(TypeTags.class,\"VOID\"))   return allowVoid ? primitiveToJCTree(type.getKind(),maker) : createJavaLangObject(ast);\n  if (type.isPrimitive())   return primitiveToJCTree(type.getKind(),maker);\n  if (type.isErroneous())   throw new TypeNotConvertibleException(\"Type cannot be resolved\");\n  TypeSymbol symbol=type.asElement();\n  List<Type> generics=type.getTypeArguments();\n  JCExpression replacement=null;\n  if (symbol == null)   throw new TypeNotConvertibleException(\"Null or compound type\");\n  if (symbol.name.length() == 0) {\n    if (type instanceof ClassType) {\n      List<Type> ifaces=((ClassType)type).interfaces_field;\n      Type supertype=((ClassType)type).supertype_field;\n      if (ifaces != null && ifaces.length() == 1) {\n        return typeToJCTree(ifaces.get(0),ast,allowCompound,allowVoid);\n      }\n      if (supertype != null)       return typeToJCTree(supertype,ast,allowCompound,allowVoid);\n    }\n    throw new TypeNotConvertibleException(\"Anonymous inner class\");\n  }\n  if (type instanceof CapturedType || type instanceof WildcardType) {\n    Type lower, upper;\n    if (type instanceof WildcardType) {\n      upper=((WildcardType)type).getExtendsBound();\n      lower=((WildcardType)type).getSuperBound();\n    }\n else {\n      lower=type.getLowerBound();\n      upper=type.getUpperBound();\n    }\n    if (allowCompound) {\n      if (lower == null || lower.tag == Javac.getCtcInt(TypeTags.class,\"BOT\")) {\n        if (upper == null || upper.toString().equals(\"java.lang.Object\")) {\n          return maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null);\n        }\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.EXTENDS),typeToJCTree(upper,ast,false,false));\n      }\n else {\n        return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n      }\n    }\n    if (upper != null) {\n      return typeToJCTree(upper,ast,allowCompound,allowVoid);\n    }\n    return createJavaLangObject(ast);\n  }\n  String qName;\n  if (symbol.isLocal()) {\n    qName=symbol.getSimpleName().toString();\n  }\n else   if (symbol.type != null && symbol.type.getEnclosingType() != null && symbol.type.getEnclosingType().tag == TypeTags.CLASS) {\n    replacement=typeToJCTree0(type.getEnclosingType(),ast,false,false);\n    qName=symbol.getSimpleName().toString();\n  }\n else {\n    qName=symbol.getQualifiedName().toString();\n  }\n  if (qName.isEmpty())   throw new TypeNotConvertibleException(\"unknown type\");\n  if (qName.startsWith(\"<\"))   throw new TypeNotConvertibleException(qName);\n  String[] baseNames=qName.split(\"\\\\.\");\n  int i=0;\n  if (replacement == null) {\n    replacement=maker.Ident(ast.toName(baseNames[0]));\n    i=1;\n  }\n  for (; i < baseNames.length; i++) {\n    replacement=maker.Select(replacement,ast.toName(baseNames[i]));\n  }\n  return genericsToJCTreeNodes(generics,ast,replacement);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 510,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 461,
        "startColumnNumber" : 5,
        "endLineNumber" : 461,
        "endColumnNumber" : 105
      },
      "nodeContext" : "return maker.Wildcard(maker.TypeBoundKind(BoundKind.SUPER),typeToJCTree(lower,ast,false,false));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.Type"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 455,
    "startColumnNumber" : 8,
    "endLineNumber" : 455,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 455,
    "startColumnNumber" : 25,
    "endLineNumber" : 455,
    "endColumnNumber" : 30
  }, {
    "charLength" : 5,
    "startLineNumber" : 461,
    "startColumnNumber" : 78,
    "endLineNumber" : 461,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}