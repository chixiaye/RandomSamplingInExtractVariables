{
  "id" : 247,
  "expression" : "periodBuilder.length()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/parquet-extensions/src/main/java/org/apache/druid/data/input/parquet/simple/ParquetGroupConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "periodBuilder.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 313,
      "startColumnNumber" : 16,
      "endLineNumber" : 313,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 42
      },
      "nodeContext" : "periodBuilder.length() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 313,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (periodBuilder.length() > 1) {\n  Period p=Period.parse(periodBuilder.toString());\n  Duration d=p.toStandardDuration().plus(millis);\n  return d;\n}\n else {\n  return new Duration(millis);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4575,
        "startLineNumber" : 274,
        "startColumnNumber" : 8,
        "endLineNumber" : 373,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (ot) {\ncase DATE:  long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\nreturn ts;\ncase TIME_MICROS:return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 328,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4626,
        "startLineNumber" : 272,
        "startColumnNumber" : 22,
        "endLineNumber" : 374,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\nswitch (ot) {\ncase DATE:    long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n  return ts;\ncase TIME_MICROS:return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5713,
        "startLineNumber" : 272,
        "startColumnNumber" : 6,
        "endLineNumber" : 402,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (ot != null) {\nswitch (ot) {\ncase DATE:    long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n  return ts;\ncase TIME_MICROS:return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n else {\nswitch (pt.getPrimitiveTypeName()) {\ncase BOOLEAN:return g.getBoolean(fieldIndex,index);\ncase INT32:return g.getInteger(fieldIndex,index);\ncase INT64:return g.getLong(fieldIndex,index);\ncase FLOAT:return g.getFloat(fieldIndex,index);\ncase DOUBLE:return g.getDouble(fieldIndex,index);\ncase INT96:Binary tsBin=g.getInt96(fieldIndex,index);\nreturn convertInt96BinaryToTimestamp(tsBin);\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary bin=g.getBinary(fieldIndex,index);\nbyte[] bytes=bin.getBytes();\nif (binaryAsString) {\nreturn StringUtils.fromUtf8(bytes);\n}\n else {\nreturn bytes;\n}\ndefault:throw new RE(\"Unknown primitive conversion: %s\",pt.getPrimitiveTypeName());\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 437,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5727,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 403,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ot != null) {\nswitch (ot) {\ncase DATE:      long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n    return ts;\ncase TIME_MICROS:  return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n else {\nswitch (pt.getPrimitiveTypeName()) {\ncase BOOLEAN:return g.getBoolean(fieldIndex,index);\ncase INT32:return g.getInteger(fieldIndex,index);\ncase INT64:return g.getLong(fieldIndex,index);\ncase FLOAT:return g.getFloat(fieldIndex,index);\ncase DOUBLE:return g.getDouble(fieldIndex,index);\ncase INT96:Binary tsBin=g.getInt96(fieldIndex,index);\nreturn convertInt96BinaryToTimestamp(tsBin);\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary bin=g.getBinary(fieldIndex,index);\nbyte[] bytes=bin.getBytes();\nif (binaryAsString) {\nreturn StringUtils.fromUtf8(bytes);\n}\n else {\nreturn bytes;\n}\ndefault:throw new RE(\"Unknown primitive conversion: %s\",pt.getPrimitiveTypeName());\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 438,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5783,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 406,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (ot != null) {\nswitch (ot) {\ncase DATE:      long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n    return ts;\ncase TIME_MICROS:  return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n else {\nswitch (pt.getPrimitiveTypeName()) {\ncase BOOLEAN:return g.getBoolean(fieldIndex,index);\ncase INT32:return g.getInteger(fieldIndex,index);\ncase INT64:return g.getLong(fieldIndex,index);\ncase FLOAT:return g.getFloat(fieldIndex,index);\ncase DOUBLE:return g.getDouble(fieldIndex,index);\ncase INT96:Binary tsBin=g.getInt96(fieldIndex,index);\nreturn convertInt96BinaryToTimestamp(tsBin);\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary bin=g.getBinary(fieldIndex,index);\nbyte[] bytes=bin.getBytes();\nif (binaryAsString) {\nreturn StringUtils.fromUtf8(bytes);\n}\n else {\nreturn bytes;\n}\ndefault:throw new RE(\"Unknown primitive conversion: %s\",pt.getPrimitiveTypeName());\n}\n}\n}\n catch (Exception ex) {\nreturn null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 447,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5918,
        "startLineNumber" : 267,
        "startColumnNumber" : 2,
        "endLineNumber" : 407,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  PrimitiveType pt=(PrimitiveType)g.getType().getFields().get(fieldIndex);\n  OriginalType ot=pt.getOriginalType();\n  try {\n    if (ot != null) {\nswitch (ot) {\ncase DATE:        long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n      return ts;\ncase TIME_MICROS:    return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:  return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n else {\nswitch (pt.getPrimitiveTypeName()) {\ncase BOOLEAN:return g.getBoolean(fieldIndex,index);\ncase INT32:return g.getInteger(fieldIndex,index);\ncase INT64:return g.getLong(fieldIndex,index);\ncase FLOAT:return g.getFloat(fieldIndex,index);\ncase DOUBLE:return g.getDouble(fieldIndex,index);\ncase INT96:Binary tsBin=g.getInt96(fieldIndex,index);\nreturn convertInt96BinaryToTimestamp(tsBin);\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary bin=g.getBinary(fieldIndex,index);\nbyte[] bytes=bin.getBytes();\nif (binaryAsString) {\nreturn StringUtils.fromUtf8(bytes);\n}\n else {\nreturn bytes;\n}\ndefault:throw new RE(\"Unknown primitive conversion: %s\",pt.getPrimitiveTypeName());\n}\n}\n}\n catch (Exception ex) {\nreturn null;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 472,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6180,
        "startLineNumber" : 260,
        "startColumnNumber" : 2,
        "endLineNumber" : 407,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Convert a primitive group field to a \"ingestion friendly\" java object\n * @return \"ingestion ready\" java object, or null\n */\n@Nullable private static Object convertPrimitiveField(Group g,int fieldIndex,int index,boolean binaryAsString){\n  PrimitiveType pt=(PrimitiveType)g.getType().getFields().get(fieldIndex);\n  OriginalType ot=pt.getOriginalType();\n  try {\n    if (ot != null) {\nswitch (ot) {\ncase DATE:        long ts=g.getInteger(fieldIndex,index) * MILLIS_IN_DAY;\n      return ts;\ncase TIME_MICROS:    return g.getLong(fieldIndex,index);\ncase TIME_MILLIS:  return g.getInteger(fieldIndex,index);\ncase TIMESTAMP_MICROS:return TimeUnit.MILLISECONDS.convert(g.getLong(fieldIndex,index),TimeUnit.MICROSECONDS);\ncase TIMESTAMP_MILLIS:return g.getLong(fieldIndex,index);\ncase INTERVAL:Binary intervalVal=g.getBinary(fieldIndex,index);\nIntBuffer intBuf=intervalVal.toByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\nint months=intBuf.get(0);\nint days=intBuf.get(1);\nint millis=intBuf.get(2);\nStringBuilder periodBuilder=new StringBuilder(\"P\");\nif (months > 0) {\nperiodBuilder.append(months).append(\"M\");\n}\nif (days > 0) {\nperiodBuilder.append(days).append(\"D\");\n}\nif (periodBuilder.length() > 1) {\nPeriod p=Period.parse(periodBuilder.toString());\nDuration d=p.toStandardDuration().plus(millis);\nreturn d;\n}\n else {\nreturn new Duration(millis);\n}\ncase INT_8:case INT_16:case INT_32:return g.getInteger(fieldIndex,index);\ncase INT_64:return g.getLong(fieldIndex,index);\ncase UINT_8:case UINT_16:case UINT_32:return g.getInteger(fieldIndex,index);\ncase UINT_64:return g.getLong(fieldIndex,index);\ncase DECIMAL:int precision=pt.asPrimitiveType().getDecimalMetadata().getPrecision();\nint scale=pt.asPrimitiveType().getDecimalMetadata().getScale();\nswitch (pt.getPrimitiveTypeName()) {\ncase INT32:return new BigDecimal(g.getInteger(fieldIndex,index));\ncase INT64:return new BigDecimal(g.getLong(fieldIndex,index));\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary value=g.getBinary(fieldIndex,index);\nreturn convertBinaryToDecimal(value,precision,scale);\ndefault:throw new RE(\"Unknown 'DECIMAL' type supplied to primitive conversion: %s (this should never happen)\",pt.getPrimitiveTypeName());\n}\ncase UTF8:case ENUM:case JSON:return g.getString(fieldIndex,index);\ncase LIST:case MAP:case MAP_KEY_VALUE:case BSON:default:throw new RE(\"Non-primitive supplied to primitive conversion: %s (this should never happen)\",ot.name());\n}\n}\n else {\nswitch (pt.getPrimitiveTypeName()) {\ncase BOOLEAN:return g.getBoolean(fieldIndex,index);\ncase INT32:return g.getInteger(fieldIndex,index);\ncase INT64:return g.getLong(fieldIndex,index);\ncase FLOAT:return g.getFloat(fieldIndex,index);\ncase DOUBLE:return g.getDouble(fieldIndex,index);\ncase INT96:Binary tsBin=g.getInt96(fieldIndex,index);\nreturn convertInt96BinaryToTimestamp(tsBin);\ncase FIXED_LEN_BYTE_ARRAY:case BINARY:Binary bin=g.getBinary(fieldIndex,index);\nbyte[] bytes=bin.getBytes();\nif (binaryAsString) {\nreturn StringUtils.fromUtf8(bytes);\n}\n else {\nreturn bytes;\n}\ndefault:throw new RE(\"Unknown primitive conversion: %s\",pt.getPrimitiveTypeName());\n}\n}\n}\n catch (Exception ex) {\nreturn null;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 494,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 42
      },
      "nodeContext" : "periodBuilder.length() > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 313,
    "startColumnNumber" : 16,
    "endLineNumber" : 313,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}