{
  "id" : 131,
  "expression" : "largerCoefficients.length",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/decoder/ec/ModulusPoly.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "largerCoefficients.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 117,
      "startColumnNumber" : 37,
      "endLineNumber" : 117,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "smallerCoefficients.length > largerCoefficients.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (smallerCoefficients.length > largerCoefficients.length) {\n  int[] temp=smallerCoefficients;\n  smallerCoefficients=largerCoefficients;\n  largerCoefficients=temp;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 104,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "ModulusPoly add(ModulusPoly other){\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 62
      },
      "nodeContext" : "smallerCoefficients.length > largerCoefficients.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "largerCoefficients.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 122,
      "startColumnNumber" : 28,
      "endLineNumber" : 122,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 122,
        "startColumnNumber" : 20,
        "endLineNumber" : 122,
        "endColumnNumber" : 54
      },
      "nodeContext" : "new int[largerCoefficients.length]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 122,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sumDiff=new int[largerCoefficients.length]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int[] sumDiff=new int[largerCoefficients.length];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 104,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "ModulusPoly add(ModulusPoly other){\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 55
      },
      "nodeContext" : "int[] sumDiff=new int[largerCoefficients.length];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "largerCoefficients.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 123,
      "startColumnNumber" : 21,
      "endLineNumber" : 123,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 123,
        "startColumnNumber" : 21,
        "endLineNumber" : 123,
        "endColumnNumber" : 75
      },
      "nodeContext" : "largerCoefficients.length - smallerCoefficients.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 75
      },
      "nodeContext" : "lengthDiff=largerCoefficients.length - smallerCoefficients.length",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 104,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "ModulusPoly add(ModulusPoly other){\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "largerCoefficients.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 127,
      "startColumnNumber" : 33,
      "endLineNumber" : 127,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 127,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 58
      },
      "nodeContext" : "i < largerCoefficients.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n  sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 104,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "ModulusPoly add(ModulusPoly other){\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=field.add(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new ModulusPoly(field,sumDiff);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 127,
        "startColumnNumber" : 29,
        "endLineNumber" : 127,
        "endColumnNumber" : 58
      },
      "nodeContext" : "i < largerCoefficients.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 117,
    "startColumnNumber" : 37,
    "endLineNumber" : 117,
    "endColumnNumber" : 62
  }, {
    "charLength" : 25,
    "startLineNumber" : 122,
    "startColumnNumber" : 28,
    "endLineNumber" : 122,
    "endColumnNumber" : 53
  }, {
    "charLength" : 25,
    "startLineNumber" : 123,
    "startColumnNumber" : 21,
    "endLineNumber" : 123,
    "endColumnNumber" : 46
  }, {
    "charLength" : 25,
    "startLineNumber" : 127,
    "startColumnNumber" : 33,
    "endLineNumber" : 127,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}