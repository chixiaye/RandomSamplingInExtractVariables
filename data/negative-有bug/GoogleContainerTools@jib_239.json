{
  "id" : 239,
  "expression" : "copyDirective.sourceFiles",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/main/java/com/google/cloud/tools/jib/frontend/JavaDockerContextGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "copyDirective.sourceFiles",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 219,
      "startColumnNumber" : 26,
      "endLineNumber" : 219,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 219,
        "startColumnNumber" : 6,
        "endLineNumber" : 219,
        "endColumnNumber" : 72
      },
      "nodeContext" : "FileOperations.copy(copyDirective.sourceFiles,directoryInContext)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 219,
        "startColumnNumber" : 6,
        "endLineNumber" : 219,
        "endColumnNumber" : 73
      },
      "nodeContext" : "FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 213,
        "startColumnNumber" : 55,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path directoryInContext=targetDirectory.resolve(copyDirective.directoryInContext);\n  Files.createDirectory(directoryInContext);\n  FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 213,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (CopyDirective copyDirective : copyDirectives) {\n  Path directoryInContext=targetDirectory.resolve(copyDirective.directoryInContext);\n  Files.createDirectory(directoryInContext);\n  FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 831,
        "startLineNumber" : 199,
        "startColumnNumber" : 64,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(baseImage);\n  try {\n    Files.deleteIfExists(targetDirectory);\n  }\n catch (  DirectoryNotEmptyException ex) {\n    MoreFiles.deleteDirectoryContents(targetDirectory);\n    Files.delete(targetDirectory);\n  }\n  Files.createDirectory(targetDirectory);\n  for (  CopyDirective copyDirective : copyDirectives) {\n    Path directoryInContext=targetDirectory.resolve(copyDirective.directoryInContext);\n    Files.createDirectory(directoryInContext);\n    FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n  }\n  Files.write(targetDirectory.resolve(\"Dockerfile\"),makeDockerfile().getBytes(StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 193,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates the Docker context in  {@code #targetDirectory}.\n * @param targetDirectory the directory to generate the Docker context in\n * @throws IOException if the export fails\n */\npublic void generate(Path targetDirectory) throws IOException {\n  Preconditions.checkNotNull(baseImage);\n  try {\n    Files.deleteIfExists(targetDirectory);\n  }\n catch (  DirectoryNotEmptyException ex) {\n    MoreFiles.deleteDirectoryContents(targetDirectory);\n    Files.delete(targetDirectory);\n  }\n  Files.createDirectory(targetDirectory);\n  for (  CopyDirective copyDirective : copyDirectives) {\n    Path directoryInContext=targetDirectory.resolve(copyDirective.directoryInContext);\n    Files.createDirectory(directoryInContext);\n    FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n  }\n  Files.write(targetDirectory.resolve(\"Dockerfile\"),makeDockerfile().getBytes(StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 219,
        "startColumnNumber" : 6,
        "endLineNumber" : 219,
        "endColumnNumber" : 73
      },
      "nodeContext" : "FileOperations.copy(copyDirective.sourceFiles,directoryInContext);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.cloud.tools.jib.frontend.ImmutableList<java.nio.file.Path>"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 219,
    "startColumnNumber" : 26,
    "endLineNumber" : 219,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}