{
  "id" : 283,
  "expression" : "TypeIds",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleSetter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TypeIds",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 216,
      "startColumnNumber" : 55,
      "endLineNumber" : 216,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 216,
        "startColumnNumber" : 55,
        "endLineNumber" : 216,
        "endColumnNumber" : 69
      },
      "nodeContext" : "TypeIds.T_void",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 216,
        "startColumnNumber" : 23,
        "endLineNumber" : 216,
        "endColumnNumber" : 73
      },
      "nodeContext" : "TypeReference.baseTypeReference(TypeIds.T_void,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 216,
        "startColumnNumber" : 3,
        "endLineNumber" : 216,
        "endColumnNumber" : 73
      },
      "nodeContext" : "method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 216,
        "startColumnNumber" : 3,
        "endLineNumber" : 216,
        "endColumnNumber" : 74
      },
      "nodeContext" : "method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 215,
        "startColumnNumber" : 33,
        "endLineNumber" : 219,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n  method.returnType.sourceStart=pS;\n  method.returnType.sourceEnd=pE;\n  shouldReturnThis=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (method.returnType == null) {\n  method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n  method.returnType.sourceStart=pS;\n  method.returnType.sourceEnd=pE;\n  shouldReturnThis=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3497,
        "startLineNumber" : 190,
        "startColumnNumber" : 158,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  MethodDeclaration method=new MethodDeclaration(parent.compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=modifier;\n  if (shouldReturnThis) {\n    EclipseNode type=fieldNode;\n    while (type != null && type.getKind() != Kind.TYPE)     type=type.up();\n    if (type != null && type.get() instanceof TypeDeclaration) {\n      TypeDeclaration typeDecl=(TypeDeclaration)type.get();\n      if (typeDecl.typeParameters != null && typeDecl.typeParameters.length > 0) {\n        TypeReference[] refs=new TypeReference[typeDecl.typeParameters.length];\n        int idx=0;\n        for (        TypeParameter param : typeDecl.typeParameters) {\n          TypeReference typeRef=new SingleTypeReference(param.name,(long)param.sourceStart << 32 | param.sourceEnd);\n          setGeneratedBy(typeRef,source);\n          refs[idx++]=typeRef;\n        }\n        method.returnType=new ParameterizedSingleTypeReference(typeDecl.name,refs,0,p);\n      }\n else       method.returnType=new SingleTypeReference(((TypeDeclaration)type.get()).name,p);\n    }\n  }\n  if (method.returnType == null) {\n    method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n    method.returnType.sourceStart=pS;\n    method.returnType.sourceEnd=pE;\n    shouldReturnThis=false;\n  }\n  setGeneratedBy(method.returnType,source);\n  if (isFieldDeprecated(fieldNode)) {\n    method.annotations=new Annotation[]{generateDeprecatedAnnotation(source)};\n  }\n  Argument param=new Argument(field.name,p,copyType(field.type,source),Modifier.FINAL);\n  param.sourceStart=pS;\n  param.sourceEnd=pE;\n  setGeneratedBy(param,source);\n  method.arguments=new Argument[]{param};\n  method.selector=name.toCharArray();\n  method.binding=null;\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  Expression fieldRef=createFieldAccessor(fieldNode,FieldAccess.ALWAYS_FIELD,source);\n  NameReference fieldNameRef=new SingleNameReference(field.name,p);\n  setGeneratedBy(fieldNameRef,source);\n  Assignment assignment=new Assignment(fieldRef,fieldNameRef,(int)p);\n  assignment.sourceStart=pS;\n  assignment.sourceEnd=assignment.statementEnd=pE;\n  setGeneratedBy(assignment,source);\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  List<Statement> statements=new ArrayList<Statement>(5);\n  if (nonNulls.length == 0) {\n    statements.add(assignment);\n  }\n else {\n    Statement nullCheck=generateNullCheck(field,source);\n    if (nullCheck != null)     statements.add(nullCheck);\n    statements.add(assignment);\n  }\n  if (shouldReturnThis) {\n    ThisReference thisRef=new ThisReference(pS,pE);\n    setGeneratedBy(thisRef,source);\n    ReturnStatement returnThis=new ReturnStatement(thisRef,pS,pE);\n    setGeneratedBy(returnThis,source);\n    statements.add(returnThis);\n  }\n  method.statements=statements.toArray(new Statement[0]);\n  Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n  if (copiedAnnotations.length != 0)   param.annotations=copiedAnnotations;\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 617,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 190,
        "startColumnNumber" : 1,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration generateSetter(TypeDeclaration parent,EclipseNode fieldNode,String name,boolean shouldReturnThis,int modifier,ASTNode source){\n  FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  MethodDeclaration method=new MethodDeclaration(parent.compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=modifier;\n  if (shouldReturnThis) {\n    EclipseNode type=fieldNode;\n    while (type != null && type.getKind() != Kind.TYPE)     type=type.up();\n    if (type != null && type.get() instanceof TypeDeclaration) {\n      TypeDeclaration typeDecl=(TypeDeclaration)type.get();\n      if (typeDecl.typeParameters != null && typeDecl.typeParameters.length > 0) {\n        TypeReference[] refs=new TypeReference[typeDecl.typeParameters.length];\n        int idx=0;\n        for (        TypeParameter param : typeDecl.typeParameters) {\n          TypeReference typeRef=new SingleTypeReference(param.name,(long)param.sourceStart << 32 | param.sourceEnd);\n          setGeneratedBy(typeRef,source);\n          refs[idx++]=typeRef;\n        }\n        method.returnType=new ParameterizedSingleTypeReference(typeDecl.name,refs,0,p);\n      }\n else       method.returnType=new SingleTypeReference(((TypeDeclaration)type.get()).name,p);\n    }\n  }\n  if (method.returnType == null) {\n    method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n    method.returnType.sourceStart=pS;\n    method.returnType.sourceEnd=pE;\n    shouldReturnThis=false;\n  }\n  setGeneratedBy(method.returnType,source);\n  if (isFieldDeprecated(fieldNode)) {\n    method.annotations=new Annotation[]{generateDeprecatedAnnotation(source)};\n  }\n  Argument param=new Argument(field.name,p,copyType(field.type,source),Modifier.FINAL);\n  param.sourceStart=pS;\n  param.sourceEnd=pE;\n  setGeneratedBy(param,source);\n  method.arguments=new Argument[]{param};\n  method.selector=name.toCharArray();\n  method.binding=null;\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  Expression fieldRef=createFieldAccessor(fieldNode,FieldAccess.ALWAYS_FIELD,source);\n  NameReference fieldNameRef=new SingleNameReference(field.name,p);\n  setGeneratedBy(fieldNameRef,source);\n  Assignment assignment=new Assignment(fieldRef,fieldNameRef,(int)p);\n  assignment.sourceStart=pS;\n  assignment.sourceEnd=assignment.statementEnd=pE;\n  setGeneratedBy(assignment,source);\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  List<Statement> statements=new ArrayList<Statement>(5);\n  if (nonNulls.length == 0) {\n    statements.add(assignment);\n  }\n else {\n    Statement nullCheck=generateNullCheck(field,source);\n    if (nullCheck != null)     statements.add(nullCheck);\n    statements.add(assignment);\n  }\n  if (shouldReturnThis) {\n    ThisReference thisRef=new ThisReference(pS,pE);\n    setGeneratedBy(thisRef,source);\n    ReturnStatement returnThis=new ReturnStatement(thisRef,pS,pE);\n    setGeneratedBy(returnThis,source);\n    statements.add(returnThis);\n  }\n  method.statements=statements.toArray(new Statement[0]);\n  Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n  if (copiedAnnotations.length != 0)   param.annotations=copiedAnnotations;\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 644,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 216,
        "startColumnNumber" : 3,
        "endLineNumber" : 216,
        "endColumnNumber" : 74
      },
      "nodeContext" : "method.returnType=TypeReference.baseTypeReference(TypeIds.T_void,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 216,
    "startColumnNumber" : 55,
    "endLineNumber" : 216,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}