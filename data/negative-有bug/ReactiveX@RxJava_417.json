{
  "id" : 417,
  "expression" : "3",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/BlockingObservableLatestTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 59,
      "startColumnNumber" : 28,
      "endLineNumber" : 59,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 59,
        "endColumnNumber" : 29
      },
      "nodeContext" : "j < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < 3; j++) {\n  Iterator<Long> it=iter.iterator();\n  for (int i=0; i < 9; i++) {\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(true,it.hasNext());\n    Assert.assertEquals(Long.valueOf(i),it.next());\n  }\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  Assert.assertEquals(false,it.hasNext());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  BlockingObservable<Long> source=Observable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.latest();\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=1000) public void testSameSourceMultipleIterators(){\n  TestScheduler scheduler=new TestScheduler();\n  BlockingObservable<Long> source=Observable.interval(1,TimeUnit.SECONDS,scheduler).take(10).toBlocking();\n  Iterable<Long> iter=source.latest();\n  for (int j=0; j < 3; j++) {\n    Iterator<Long> it=iter.iterator();\n    for (int i=0; i < 9; i++) {\n      scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n      Assert.assertEquals(true,it.hasNext());\n      Assert.assertEquals(Long.valueOf(i),it.next());\n    }\n    scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n    Assert.assertEquals(false,it.hasNext());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 128,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 59,
        "endColumnNumber" : 29
      },
      "nodeContext" : "j < 3",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 59,
    "startColumnNumber" : 28,
    "endLineNumber" : 59,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}