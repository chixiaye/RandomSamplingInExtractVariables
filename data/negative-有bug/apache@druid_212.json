{
  "id" : 212,
  "expression" : "PasswordProvider.class",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/druid-aws-rds-extensions/src/test/java/org/apache/druid/aws/rds/AWSRDSTokenPasswordProviderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PasswordProvider.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 71,
      "startColumnNumber" : 42,
      "endLineNumber" : 71,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 65
      },
      "nodeContext" : "jsonMapper.readValue(jsonStr,PasswordProvider.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 69,
        "startColumnNumber" : 21,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 6
      },
      "nodeContext" : "PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ObjectMapper jsonMapper=new ObjectMapper();\n  for (  Module module : new AWSRDSModule().getJacksonModules()) {\n    jsonMapper.registerModule(module);\n  }\n  jsonMapper.setInjectableValues(new InjectableValues.Std().addValue(AWSCredentialsProvider.class,new AWSCredentialsProvider(){\n    @Override public AWSCredentials getCredentials(){\n      return null;\n    }\n    @Override public void refresh(){\n    }\n  }\n));\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"aws-rds-token\\\",\\n\" + \"  \\\"user\\\": \\\"testuser\\\",\\n\"+ \"  \\\"host\\\": \\\"testhost\\\",\\n\"+ \"  \\\"port\\\": 5273,\\n\"+ \"  \\\"region\\\": \\\"testregion\\\"\\n\"+ \"}\\n\";\n  PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n  AWSRDSTokenPasswordProvider awsPwdProvider=(AWSRDSTokenPasswordProvider)pp;\n  Assert.assertEquals(\"testuser\",awsPwdProvider.getUser());\n  Assert.assertEquals(\"testhost\",awsPwdProvider.getHost());\n  Assert.assertEquals(5273,awsPwdProvider.getPort());\n  Assert.assertEquals(\"testregion\",awsPwdProvider.getRegion());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerde() throws IOException {\n  ObjectMapper jsonMapper=new ObjectMapper();\n  for (  Module module : new AWSRDSModule().getJacksonModules()) {\n    jsonMapper.registerModule(module);\n  }\n  jsonMapper.setInjectableValues(new InjectableValues.Std().addValue(AWSCredentialsProvider.class,new AWSCredentialsProvider(){\n    @Override public AWSCredentials getCredentials(){\n      return null;\n    }\n    @Override public void refresh(){\n    }\n  }\n));\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"aws-rds-token\\\",\\n\" + \"  \\\"user\\\": \\\"testuser\\\",\\n\"+ \"  \\\"host\\\": \\\"testhost\\\",\\n\"+ \"  \\\"port\\\": 5273,\\n\"+ \"  \\\"region\\\": \\\"testregion\\\"\\n\"+ \"}\\n\";\n  PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n  AWSRDSTokenPasswordProvider awsPwdProvider=(AWSRDSTokenPasswordProvider)pp;\n  Assert.assertEquals(\"testuser\",awsPwdProvider.getUser());\n  Assert.assertEquals(\"testhost\",awsPwdProvider.getHost());\n  Assert.assertEquals(5273,awsPwdProvider.getPort());\n  Assert.assertEquals(\"testregion\",awsPwdProvider.getRegion());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 65
      },
      "nodeContext" : "jsonMapper.readValue(jsonStr,PasswordProvider.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.druid.metadata.PasswordProvider>"
  }, {
    "nodeContext" : "PasswordProvider.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 73,
      "startColumnNumber" : 8,
      "endLineNumber" : 73,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 69,
        "startColumnNumber" : 21,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 6
      },
      "nodeContext" : "PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 37,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ObjectMapper jsonMapper=new ObjectMapper();\n  for (  Module module : new AWSRDSModule().getJacksonModules()) {\n    jsonMapper.registerModule(module);\n  }\n  jsonMapper.setInjectableValues(new InjectableValues.Std().addValue(AWSCredentialsProvider.class,new AWSCredentialsProvider(){\n    @Override public AWSCredentials getCredentials(){\n      return null;\n    }\n    @Override public void refresh(){\n    }\n  }\n));\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"aws-rds-token\\\",\\n\" + \"  \\\"user\\\": \\\"testuser\\\",\\n\"+ \"  \\\"host\\\": \\\"testhost\\\",\\n\"+ \"  \\\"port\\\": 5273,\\n\"+ \"  \\\"region\\\": \\\"testregion\\\"\\n\"+ \"}\\n\";\n  PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n  AWSRDSTokenPasswordProvider awsPwdProvider=(AWSRDSTokenPasswordProvider)pp;\n  Assert.assertEquals(\"testuser\",awsPwdProvider.getUser());\n  Assert.assertEquals(\"testhost\",awsPwdProvider.getHost());\n  Assert.assertEquals(5273,awsPwdProvider.getPort());\n  Assert.assertEquals(\"testregion\",awsPwdProvider.getRegion());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSerde() throws IOException {\n  ObjectMapper jsonMapper=new ObjectMapper();\n  for (  Module module : new AWSRDSModule().getJacksonModules()) {\n    jsonMapper.registerModule(module);\n  }\n  jsonMapper.setInjectableValues(new InjectableValues.Std().addValue(AWSCredentialsProvider.class,new AWSCredentialsProvider(){\n    @Override public AWSCredentials getCredentials(){\n      return null;\n    }\n    @Override public void refresh(){\n    }\n  }\n));\n  String jsonStr=\"{\\n\" + \"  \\\"type\\\": \\\"aws-rds-token\\\",\\n\" + \"  \\\"user\\\": \\\"testuser\\\",\\n\"+ \"  \\\"host\\\": \\\"testhost\\\",\\n\"+ \"  \\\"port\\\": 5273,\\n\"+ \"  \\\"region\\\": \\\"testregion\\\"\\n\"+ \"}\\n\";\n  PasswordProvider pp=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class);\n  AWSRDSTokenPasswordProvider awsPwdProvider=(AWSRDSTokenPasswordProvider)pp;\n  Assert.assertEquals(\"testuser\",awsPwdProvider.getUser());\n  Assert.assertEquals(\"testhost\",awsPwdProvider.getHost());\n  Assert.assertEquals(5273,awsPwdProvider.getPort());\n  Assert.assertEquals(\"testregion\",awsPwdProvider.getRegion());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 69,
        "startColumnNumber" : 26,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,PasswordProvider.class)),PasswordProvider.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.druid.metadata.PasswordProvider>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 71,
    "startColumnNumber" : 42,
    "endLineNumber" : 71,
    "endColumnNumber" : 64
  }, {
    "charLength" : 22,
    "startLineNumber" : 73,
    "startColumnNumber" : 8,
    "endLineNumber" : 73,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  } ]
}