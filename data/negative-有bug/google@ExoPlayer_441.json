{
  "id" : 441,
  "expression" : "!seekRequired",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!seekRequired",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 387,
      "startColumnNumber" : 14,
      "endLineNumber" : 387,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 387,
        "startColumnNumber" : 10,
        "endLineNumber" : 396,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!seekRequired) {\n  SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n  seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 384,
        "startColumnNumber" : 50,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ((HlsSampleStream)streams[i]).bindSampleQueue();\n  if (!seekRequired) {\n    SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n    seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 384,
        "startColumnNumber" : 8,
        "endLineNumber" : 397,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (trackGroupToSampleQueueIndex != null) {\n  ((HlsSampleStream)streams[i]).bindSampleQueue();\n  if (!seekRequired) {\n    SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n    seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 380,
        "startColumnNumber" : 30,
        "endLineNumber" : 398,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  enabledTrackGroupCount++;\n  streams[i]=new HlsSampleStream(this,trackGroupIndex);\n  streamResetFlags[i]=true;\n  if (trackGroupToSampleQueueIndex != null) {\n    ((HlsSampleStream)streams[i]).bindSampleQueue();\n    if (!seekRequired) {\n      SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n      seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 380,
        "startColumnNumber" : 6,
        "endLineNumber" : 398,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (streams[i] == null) {\n  enabledTrackGroupCount++;\n  streams[i]=new HlsSampleStream(this,trackGroupIndex);\n  streamResetFlags[i]=true;\n  if (trackGroupToSampleQueueIndex != null) {\n    ((HlsSampleStream)streams[i]).bindSampleQueue();\n    if (!seekRequired) {\n      SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n      seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1381,
        "startLineNumber" : 370,
        "startColumnNumber" : 48,
        "endLineNumber" : 399,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExoTrackSelection selection=selections[i];\n  if (selection == null) {\n    continue;\n  }\n  int trackGroupIndex=trackGroups.indexOf(selection.getTrackGroup());\n  if (trackGroupIndex == primaryTrackGroupIndex) {\n    primaryTrackSelection=selection;\n    chunkSource.setTrackSelection(selection);\n  }\n  if (streams[i] == null) {\n    enabledTrackGroupCount++;\n    streams[i]=new HlsSampleStream(this,trackGroupIndex);\n    streamResetFlags[i]=true;\n    if (trackGroupToSampleQueueIndex != null) {\n      ((HlsSampleStream)streams[i]).bindSampleQueue();\n      if (!seekRequired) {\n        SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n        seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1425,
        "startLineNumber" : 370,
        "startColumnNumber" : 4,
        "endLineNumber" : 399,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < selections.length; i++) {\n  ExoTrackSelection selection=selections[i];\n  if (selection == null) {\n    continue;\n  }\n  int trackGroupIndex=trackGroups.indexOf(selection.getTrackGroup());\n  if (trackGroupIndex == primaryTrackGroupIndex) {\n    primaryTrackSelection=selection;\n    chunkSource.setTrackSelection(selection);\n  }\n  if (streams[i] == null) {\n    enabledTrackGroupCount++;\n    streams[i]=new HlsSampleStream(this,trackGroupIndex);\n    streamResetFlags[i]=true;\n    if (trackGroupToSampleQueueIndex != null) {\n      ((HlsSampleStream)streams[i]).bindSampleQueue();\n      if (!seekRequired) {\n        SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n        seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5081,
        "startLineNumber" : 345,
        "startColumnNumber" : 26,
        "endLineNumber" : 464,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertIsPrepared();\n  int oldEnabledTrackGroupCount=enabledTrackGroupCount;\n  for (int i=0; i < selections.length; i++) {\n    HlsSampleStream stream=(HlsSampleStream)streams[i];\n    if (stream != null && (selections[i] == null || !mayRetainStreamFlags[i])) {\n      enabledTrackGroupCount--;\n      stream.unbindSampleQueue();\n      streams[i]=null;\n    }\n  }\n  boolean seekRequired=forceReset || (seenFirstTrackSelection ? oldEnabledTrackGroupCount == 0 : positionUs != lastSeekPositionUs);\n  ExoTrackSelection oldPrimaryTrackSelection=chunkSource.getTrackSelection();\n  ExoTrackSelection primaryTrackSelection=oldPrimaryTrackSelection;\n  for (int i=0; i < selections.length; i++) {\n    ExoTrackSelection selection=selections[i];\n    if (selection == null) {\n      continue;\n    }\n    int trackGroupIndex=trackGroups.indexOf(selection.getTrackGroup());\n    if (trackGroupIndex == primaryTrackGroupIndex) {\n      primaryTrackSelection=selection;\n      chunkSource.setTrackSelection(selection);\n    }\n    if (streams[i] == null) {\n      enabledTrackGroupCount++;\n      streams[i]=new HlsSampleStream(this,trackGroupIndex);\n      streamResetFlags[i]=true;\n      if (trackGroupToSampleQueueIndex != null) {\n        ((HlsSampleStream)streams[i]).bindSampleQueue();\n        if (!seekRequired) {\n          SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n          seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n        }\n      }\n    }\n  }\n  if (enabledTrackGroupCount == 0) {\n    chunkSource.reset();\n    downstreamTrackFormat=null;\n    pendingResetUpstreamFormats=true;\n    mediaChunks.clear();\n    if (loader.isLoading()) {\n      if (sampleQueuesBuilt) {\n        for (        SampleQueue sampleQueue : sampleQueues) {\n          sampleQueue.discardToEnd();\n        }\n      }\n      loader.cancelLoading();\n    }\n else {\n      resetSampleQueues();\n    }\n  }\n else {\n    if (!mediaChunks.isEmpty() && !Util.areEqual(primaryTrackSelection,oldPrimaryTrackSelection)) {\n      boolean primarySampleQueueDirty=false;\n      if (!seenFirstTrackSelection) {\n        long bufferedDurationUs=positionUs < 0 ? -positionUs : 0;\n        HlsMediaChunk lastMediaChunk=getLastMediaChunk();\n        MediaChunkIterator[] mediaChunkIterators=chunkSource.createMediaChunkIterators(lastMediaChunk,positionUs);\n        primaryTrackSelection.updateSelectedTrack(positionUs,bufferedDurationUs,C.TIME_UNSET,readOnlyMediaChunks,mediaChunkIterators);\n        int chunkIndex=chunkSource.getTrackGroup().indexOf(lastMediaChunk.trackFormat);\n        if (primaryTrackSelection.getSelectedIndexInTrackGroup() != chunkIndex) {\n          primarySampleQueueDirty=true;\n        }\n      }\n else {\n        primarySampleQueueDirty=true;\n      }\n      if (primarySampleQueueDirty) {\n        forceReset=true;\n        seekRequired=true;\n        pendingResetUpstreamFormats=true;\n      }\n    }\n    if (seekRequired) {\n      seekToUs(positionUs,forceReset);\n      for (int i=0; i < streams.length; i++) {\n        if (streams[i] != null) {\n          streamResetFlags[i]=true;\n        }\n      }\n    }\n  }\n  updateSampleStreams(streams);\n  seenFirstTrackSelection=true;\n  return seekRequired;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6397,
        "startLineNumber" : 322,
        "startColumnNumber" : 2,
        "endLineNumber" : 464,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Called by the parent  {@link HlsMediaPeriod} when a track selection occurs.\n * @param selections The renderer track selections.\n * @param mayRetainStreamFlags Flags indicating whether the existing sample stream can be retainedfor each selection. A  {@code true} value indicates that the selection is unchanged, andthat the caller does not require that the sample stream be recreated.\n * @param streams The existing sample streams, which will be updated to reflect the providedselections.\n * @param streamResetFlags Will be updated to indicate new sample streams, and sample streams thathave been retained but with the requirement that the consuming renderer be reset.\n * @param positionUs The current playback position in microseconds.\n * @param forceReset If true then a reset is forced (i.e. a seek will be performed with in-bufferseeking disabled).\n * @return Whether this wrapper requires the parent {@link HlsMediaPeriod} to perform a seek aspart of the track selection.\n */\npublic boolean selectTracks(@NullableType ExoTrackSelection[] selections,boolean[] mayRetainStreamFlags,@NullableType SampleStream[] streams,boolean[] streamResetFlags,long positionUs,boolean forceReset){\n  assertIsPrepared();\n  int oldEnabledTrackGroupCount=enabledTrackGroupCount;\n  for (int i=0; i < selections.length; i++) {\n    HlsSampleStream stream=(HlsSampleStream)streams[i];\n    if (stream != null && (selections[i] == null || !mayRetainStreamFlags[i])) {\n      enabledTrackGroupCount--;\n      stream.unbindSampleQueue();\n      streams[i]=null;\n    }\n  }\n  boolean seekRequired=forceReset || (seenFirstTrackSelection ? oldEnabledTrackGroupCount == 0 : positionUs != lastSeekPositionUs);\n  ExoTrackSelection oldPrimaryTrackSelection=chunkSource.getTrackSelection();\n  ExoTrackSelection primaryTrackSelection=oldPrimaryTrackSelection;\n  for (int i=0; i < selections.length; i++) {\n    ExoTrackSelection selection=selections[i];\n    if (selection == null) {\n      continue;\n    }\n    int trackGroupIndex=trackGroups.indexOf(selection.getTrackGroup());\n    if (trackGroupIndex == primaryTrackGroupIndex) {\n      primaryTrackSelection=selection;\n      chunkSource.setTrackSelection(selection);\n    }\n    if (streams[i] == null) {\n      enabledTrackGroupCount++;\n      streams[i]=new HlsSampleStream(this,trackGroupIndex);\n      streamResetFlags[i]=true;\n      if (trackGroupToSampleQueueIndex != null) {\n        ((HlsSampleStream)streams[i]).bindSampleQueue();\n        if (!seekRequired) {\n          SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n          seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n        }\n      }\n    }\n  }\n  if (enabledTrackGroupCount == 0) {\n    chunkSource.reset();\n    downstreamTrackFormat=null;\n    pendingResetUpstreamFormats=true;\n    mediaChunks.clear();\n    if (loader.isLoading()) {\n      if (sampleQueuesBuilt) {\n        for (        SampleQueue sampleQueue : sampleQueues) {\n          sampleQueue.discardToEnd();\n        }\n      }\n      loader.cancelLoading();\n    }\n else {\n      resetSampleQueues();\n    }\n  }\n else {\n    if (!mediaChunks.isEmpty() && !Util.areEqual(primaryTrackSelection,oldPrimaryTrackSelection)) {\n      boolean primarySampleQueueDirty=false;\n      if (!seenFirstTrackSelection) {\n        long bufferedDurationUs=positionUs < 0 ? -positionUs : 0;\n        HlsMediaChunk lastMediaChunk=getLastMediaChunk();\n        MediaChunkIterator[] mediaChunkIterators=chunkSource.createMediaChunkIterators(lastMediaChunk,positionUs);\n        primaryTrackSelection.updateSelectedTrack(positionUs,bufferedDurationUs,C.TIME_UNSET,readOnlyMediaChunks,mediaChunkIterators);\n        int chunkIndex=chunkSource.getTrackGroup().indexOf(lastMediaChunk.trackFormat);\n        if (primaryTrackSelection.getSelectedIndexInTrackGroup() != chunkIndex) {\n          primarySampleQueueDirty=true;\n        }\n      }\n else {\n        primarySampleQueueDirty=true;\n      }\n      if (primarySampleQueueDirty) {\n        forceReset=true;\n        seekRequired=true;\n        pendingResetUpstreamFormats=true;\n      }\n    }\n    if (seekRequired) {\n      seekToUs(positionUs,forceReset);\n      for (int i=0; i < streams.length; i++) {\n        if (streams[i] != null) {\n          streamResetFlags[i]=true;\n        }\n      }\n    }\n  }\n  updateSampleStreams(streams);\n  seenFirstTrackSelection=true;\n  return seekRequired;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 452,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 387,
        "startColumnNumber" : 10,
        "endLineNumber" : 396,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!seekRequired) {\n  SampleQueue sampleQueue=sampleQueues[trackGroupToSampleQueueIndex[trackGroupIndex]];\n  seekRequired=!sampleQueue.seekTo(positionUs,true) && sampleQueue.getReadIndex() != 0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 387,
    "startColumnNumber" : 14,
    "endLineNumber" : 387,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}