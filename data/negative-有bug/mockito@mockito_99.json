{
  "id" : 99,
  "expression" : "\"org.mockito.DoNotMock\"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/DefaultDoNotMockEnforcer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"org.mockito.DoNotMock\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 17,
      "startColumnNumber" : 63,
      "endLineNumber" : 17,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 17,
        "startColumnNumber" : 16,
        "endLineNumber" : 17,
        "endColumnNumber" : 87
      },
      "nodeContext" : "annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 17,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")) {\n  String exceptionMessage=type + \" is annotated with @org.mockito.DoNotMock and can't be mocked.\";\n  if (DoNotMock.class.equals(annotation.annotationType())) {\n    exceptionMessage+=\" \" + type.getAnnotation(DoNotMock.class).reason();\n  }\n  return exceptionMessage;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 16,
        "startColumnNumber" : 60,
        "endLineNumber" : 26,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")) {\n    String exceptionMessage=type + \" is annotated with @org.mockito.DoNotMock and can't be mocked.\";\n    if (DoNotMock.class.equals(annotation.annotationType())) {\n      exceptionMessage+=\" \" + type.getAnnotation(DoNotMock.class).reason();\n    }\n    return exceptionMessage;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 544,
        "startLineNumber" : 16,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Annotation annotation : type.getAnnotations()) {\n  if (annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")) {\n    String exceptionMessage=type + \" is annotated with @org.mockito.DoNotMock and can't be mocked.\";\n    if (DoNotMock.class.equals(annotation.annotationType())) {\n      exceptionMessage+=\" \" + type.getAnnotation(DoNotMock.class).reason();\n    }\n    return exceptionMessage;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 15,
        "startColumnNumber" : 64,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Annotation annotation : type.getAnnotations()) {\n    if (annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")) {\n      String exceptionMessage=type + \" is annotated with @org.mockito.DoNotMock and can't be mocked.\";\n      if (DoNotMock.class.equals(annotation.annotationType())) {\n        exceptionMessage+=\" \" + type.getAnnotation(DoNotMock.class).reason();\n      }\n      return exceptionMessage;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 661,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String checkTypeForDoNotMockViolation(Class<?> type){\n  for (  Annotation annotation : type.getAnnotations()) {\n    if (annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")) {\n      String exceptionMessage=type + \" is annotated with @org.mockito.DoNotMock and can't be mocked.\";\n      if (DoNotMock.class.equals(annotation.annotationType())) {\n        exceptionMessage+=\" \" + type.getAnnotation(DoNotMock.class).reason();\n      }\n      return exceptionMessage;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 68,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 17,
        "startColumnNumber" : 16,
        "endLineNumber" : 17,
        "endColumnNumber" : 87
      },
      "nodeContext" : "annotation.annotationType().getName().endsWith(\"org.mockito.DoNotMock\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 17,
    "startColumnNumber" : 63,
    "endLineNumber" : 17,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ ]
}