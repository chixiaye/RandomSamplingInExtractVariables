{
  "id" : 231,
  "expression" : "WorkspaceFactoryHelper",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/packages/WorkspaceGlobals.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "WorkspaceFactoryHelper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 94,
      "startColumnNumber" : 6,
      "endLineNumber" : 94,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 94,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 32
      },
      "nodeContext" : "WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 94,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 33
      },
      "nodeContext" : "WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 492,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack());\n}\n catch (InvalidRuleException|NameConflictException|LabelSyntaxException e) {\n  throw Starlark.errorf(\"%s\",e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1703,
        "startLineNumber" : 74,
        "startColumnNumber" : 49,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!allowOverride) {\n    throw Starlark.errorf(\"workspace() function should be used only at the top of the WORKSPACE file\");\n  }\n  if (!isLegalWorkspaceName(name)) {\n    throw Starlark.errorf(\"%s is not a legal workspace name\",name);\n  }\n  String errorMessage=LabelValidator.validateTargetName(name);\n  if (errorMessage != null) {\n    throw Starlark.errorf(\"%s\",errorMessage);\n  }\n  PackageFactory.getContext(thread).pkgBuilder.setWorkspaceName(name);\n  Package.Builder builder=PackageFactory.getContext(thread).pkgBuilder;\n  RuleClass localRepositoryRuleClass=ruleFactory.getRuleClass(\"local_repository\");\n  RuleClass bindRuleClass=ruleFactory.getRuleClass(\"bind\");\n  Map<String,Object> kwargs=ImmutableMap.of(\"name\",name,\"path\",\".\");\n  try {\n    WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack());\n  }\n catch (  InvalidRuleException|NameConflictException|LabelSyntaxException e) {\n    throw Starlark.errorf(\"%s\",e.getMessage());\n  }\n  builder.addRepositoryMappingEntry(RepositoryName.MAIN,RepositoryName.createFromValidStrippedName(name),RepositoryName.MAIN);\n  parseManagedDirectories(Dict.cast(managedDirectories,String.class,Object.class,\"managed_directories\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void workspace(String name,Dict<?,?> managedDirectories,StarlarkThread thread) throws EvalException, InterruptedException {\n  if (!allowOverride) {\n    throw Starlark.errorf(\"workspace() function should be used only at the top of the WORKSPACE file\");\n  }\n  if (!isLegalWorkspaceName(name)) {\n    throw Starlark.errorf(\"%s is not a legal workspace name\",name);\n  }\n  String errorMessage=LabelValidator.validateTargetName(name);\n  if (errorMessage != null) {\n    throw Starlark.errorf(\"%s\",errorMessage);\n  }\n  PackageFactory.getContext(thread).pkgBuilder.setWorkspaceName(name);\n  Package.Builder builder=PackageFactory.getContext(thread).pkgBuilder;\n  RuleClass localRepositoryRuleClass=ruleFactory.getRuleClass(\"local_repository\");\n  RuleClass bindRuleClass=ruleFactory.getRuleClass(\"bind\");\n  Map<String,Object> kwargs=ImmutableMap.of(\"name\",name,\"path\",\".\");\n  try {\n    WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack());\n  }\n catch (  InvalidRuleException|NameConflictException|LabelSyntaxException e) {\n    throw Starlark.errorf(\"%s\",e.getMessage());\n  }\n  builder.addRepositoryMappingEntry(RepositoryName.MAIN,RepositoryName.createFromValidStrippedName(name),RepositoryName.MAIN);\n  parseManagedDirectories(Dict.cast(managedDirectories,String.class,Object.class,\"managed_directories\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 188,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 94,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 32
      },
      "nodeContext" : "WorkspaceFactoryHelper.createAndAddRepositoryRule(builder,localRepositoryRuleClass,bindRuleClass,kwargs,thread.getSemantics(),thread.getCallStack())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.WorkspaceFactoryHelper"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 94,
    "startColumnNumber" : 6,
    "endLineNumber" : 94,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}