{
  "id" : 89,
  "expression" : "dimensionSelector.getRow()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/topn/Generic1AggPooledTopNScannerPrototype.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dimensionSelector.getRow()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 56,
      "startColumnNumber" : 36,
      "endLineNumber" : 56,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 56,
        "startColumnNumber" : 24,
        "endLineNumber" : 56,
        "endColumnNumber" : 62
      },
      "nodeContext" : "dimValues=dimensionSelector.getRow()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final IndexedInts dimValues=dimensionSelector.getRow();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 726,
        "startLineNumber" : 55,
        "startColumnNumber" : 42,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final IndexedInts dimValues=dimensionSelector.getRow();\n  final int dimSize=dimValues.size();\n  for (int i=0; i < dimSize; i++) {\n    int dimIndex=dimValues.get(i);\n    int position=positions[dimIndex];\n    if (position >= 0) {\n      aggregator.aggregate(resultsBuffer,position);\n    }\n else     if (position == TopNAlgorithm.INIT_POSITION_VALUE) {\n      positions[dimIndex]=positionToAllocate;\n      position=positionToAllocate;\n      aggregator.init(resultsBuffer,position);\n      aggregator.aggregate(resultsBuffer,position);\n      positionToAllocate+=aggregatorSize;\n    }\n  }\n  processedRows++;\n  cursor.advanceUninterruptibly();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!cursor.isDoneOrInterrupted()) {\n  final IndexedInts dimValues=dimensionSelector.getRow();\n  final int dimSize=dimValues.size();\n  for (int i=0; i < dimSize; i++) {\n    int dimIndex=dimValues.get(i);\n    int position=positions[dimIndex];\n    if (position >= 0) {\n      aggregator.aggregate(resultsBuffer,position);\n    }\n else     if (position == TopNAlgorithm.INIT_POSITION_VALUE) {\n      positions[dimIndex]=positionToAllocate;\n      position=positionToAllocate;\n      aggregator.init(resultsBuffer,position);\n      aggregator.aggregate(resultsBuffer,position);\n      positionToAllocate+=aggregatorSize;\n    }\n  }\n  processedRows++;\n  cursor.advanceUninterruptibly();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 101,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long processedRows=0;\n  int positionToAllocate=0;\n  while (!cursor.isDoneOrInterrupted()) {\n    final IndexedInts dimValues=dimensionSelector.getRow();\n    final int dimSize=dimValues.size();\n    for (int i=0; i < dimSize; i++) {\n      int dimIndex=dimValues.get(i);\n      int position=positions[dimIndex];\n      if (position >= 0) {\n        aggregator.aggregate(resultsBuffer,position);\n      }\n else       if (position == TopNAlgorithm.INIT_POSITION_VALUE) {\n        positions[dimIndex]=positionToAllocate;\n        position=positionToAllocate;\n        aggregator.init(resultsBuffer,position);\n        aggregator.aggregate(resultsBuffer,position);\n        positionToAllocate+=aggregatorSize;\n      }\n    }\n    processedRows++;\n    cursor.advanceUninterruptibly();\n  }\n  return processedRows;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1929,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Any changes to this method should be coordinated with  {@link TopNUtils},  {@link PooledTopNAlgorithm#computeSpecializedScanAndAggregateImplementations} and downstream methods.It should be checked with a tool like https://github.com/AdoptOpenJDK/jitwatch that C2 compiler output for this method doesn't have any method calls in the while loop, i. e. all method calls are inlined. To be able to see assembly of this method in JITWatch and other similar tools,  {@link PooledTopNAlgorithm#SPECIALIZE_GENERIC_ONE_AGG_POOLED_TOPN} should be turned off. Note that in this case the benchmarkshould be \"naturally monomorphic\", i. e. execute this method always with the same runtime shape. If the while loop contains not inlined method calls, it should be considered as a performance bug.\n */\n@Override public long scanAndAggregate(DimensionSelector dimensionSelector,BufferAggregator aggregator,int aggregatorSize,Cursor cursor,int[] positions,ByteBuffer resultsBuffer){\n  long processedRows=0;\n  int positionToAllocate=0;\n  while (!cursor.isDoneOrInterrupted()) {\n    final IndexedInts dimValues=dimensionSelector.getRow();\n    final int dimSize=dimValues.size();\n    for (int i=0; i < dimSize; i++) {\n      int dimIndex=dimValues.get(i);\n      int position=positions[dimIndex];\n      if (position >= 0) {\n        aggregator.aggregate(resultsBuffer,position);\n      }\n else       if (position == TopNAlgorithm.INIT_POSITION_VALUE) {\n        positions[dimIndex]=positionToAllocate;\n        position=positionToAllocate;\n        aggregator.init(resultsBuffer,position);\n        aggregator.aggregate(resultsBuffer,position);\n        positionToAllocate+=aggregatorSize;\n      }\n    }\n    processedRows++;\n    cursor.advanceUninterruptibly();\n  }\n  return processedRows;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final IndexedInts dimValues=dimensionSelector.getRow();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.segment.data.IndexedInts"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 56,
    "startColumnNumber" : 36,
    "endLineNumber" : 56,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}