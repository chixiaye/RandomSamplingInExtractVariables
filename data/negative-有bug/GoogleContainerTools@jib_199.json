{
  "id" : 199,
  "expression" : "layerBuilder.build()",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "layerBuilder.build()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 88,
      "startColumnNumber" : 36,
      "endLineNumber" : 88,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 88,
        "startColumnNumber" : 19,
        "endLineNumber" : 88,
        "endColumnNumber" : 56
      },
      "nodeContext" : "unwrittenLayer=layerBuilder.build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 57
      },
      "nodeContext" : "UnwrittenLayer unwrittenLayer=layerBuilder.build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild() throws URISyntaxException, IOException {\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 57
      },
      "nodeContext" : "UnwrittenLayer unwrittenLayer=layerBuilder.build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.cloud.tools.jib.image.UnwrittenLayer"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 88,
    "startColumnNumber" : 36,
    "endLineNumber" : 88,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}