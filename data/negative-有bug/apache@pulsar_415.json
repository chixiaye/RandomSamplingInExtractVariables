{
  "id" : 415,
  "expression" : "readEntries",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/persistent/PersistentStickyKeyDispatcherMultipleConsumersTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "readEntries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 236,
      "startColumnNumber" : 8,
      "endLineNumber" : 236,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 85
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 86
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3856,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 310,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Consumer slowConsumerMock=mock(Consumer.class);\n  final ChannelPromise slowChannelMock=mock(ChannelPromise.class);\n  final List<Entry> redeliverEntries=new ArrayList<>();\n  redeliverEntries.add(EntryImpl.create(1,1,createMessage(\"message1\",1,\"key1\")));\n  final List<Entry> readEntries=new ArrayList<>();\n  readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n  readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n  try {\n    Field totalAvailablePermitsField=PersistentDispatcherMultipleConsumers.class.getDeclaredField(\"totalAvailablePermits\");\n    totalAvailablePermitsField.setAccessible(true);\n    totalAvailablePermitsField.set(persistentDispatcher,1000);\n    doAnswer(invocationOnMock -> {\n      ((PersistentStickyKeyDispatcherMultipleConsumers)invocationOnMock.getArgument(2)).readEntriesComplete(readEntries,PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal);\n      return null;\n    }\n).when(cursorMock).asyncReadEntriesOrWait(anyInt(),anyLong(),any(PersistentStickyKeyDispatcherMultipleConsumers.class),eq(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal),any());\n  }\n catch (  Exception e) {\n    fail(\"Failed to set to field\",e);\n  }\n  try {\n    doReturn(\"consumer2\").when(slowConsumerMock).consumerName();\n    when(slowConsumerMock.getAvailablePermits()).thenReturn(0).thenReturn(1);\n    doReturn(true).when(slowConsumerMock).isWritable();\n    doReturn(slowChannelMock).when(slowConsumerMock).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n    persistentDispatcher.addConsumer(consumerMock);\n    persistentDispatcher.addConsumer(slowConsumerMock);\n  }\n catch (  Exception e) {\n    fail(\"Failed to add mock consumer\",e);\n  }\n  persistentDispatcher.sendMessagesToConsumers(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal,redeliverEntries);\n  verify(consumerMock,times(1)).sendMessages(argThat(arg -> {\n    assertEquals(arg.size(),1);\n    Entry entry=arg.get(0);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),3);\n    return true;\n  }\n),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  verify(slowConsumerMock,times(0)).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3908,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 310,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipRedeliverTemporally(){\n  final Consumer slowConsumerMock=mock(Consumer.class);\n  final ChannelPromise slowChannelMock=mock(ChannelPromise.class);\n  final List<Entry> redeliverEntries=new ArrayList<>();\n  redeliverEntries.add(EntryImpl.create(1,1,createMessage(\"message1\",1,\"key1\")));\n  final List<Entry> readEntries=new ArrayList<>();\n  readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n  readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n  try {\n    Field totalAvailablePermitsField=PersistentDispatcherMultipleConsumers.class.getDeclaredField(\"totalAvailablePermits\");\n    totalAvailablePermitsField.setAccessible(true);\n    totalAvailablePermitsField.set(persistentDispatcher,1000);\n    doAnswer(invocationOnMock -> {\n      ((PersistentStickyKeyDispatcherMultipleConsumers)invocationOnMock.getArgument(2)).readEntriesComplete(readEntries,PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal);\n      return null;\n    }\n).when(cursorMock).asyncReadEntriesOrWait(anyInt(),anyLong(),any(PersistentStickyKeyDispatcherMultipleConsumers.class),eq(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal),any());\n  }\n catch (  Exception e) {\n    fail(\"Failed to set to field\",e);\n  }\n  try {\n    doReturn(\"consumer2\").when(slowConsumerMock).consumerName();\n    when(slowConsumerMock.getAvailablePermits()).thenReturn(0).thenReturn(1);\n    doReturn(true).when(slowConsumerMock).isWritable();\n    doReturn(slowChannelMock).when(slowConsumerMock).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n    persistentDispatcher.addConsumer(consumerMock);\n    persistentDispatcher.addConsumer(slowConsumerMock);\n  }\n catch (  Exception e) {\n    fail(\"Failed to add mock consumer\",e);\n  }\n  persistentDispatcher.sendMessagesToConsumers(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal,redeliverEntries);\n  verify(consumerMock,times(1)).sendMessages(argThat(arg -> {\n    assertEquals(arg.size(),1);\n    Entry entry=arg.get(0);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),3);\n    return true;\n  }\n),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  verify(slowConsumerMock,times(0)).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 86
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.bookkeeper.mledger.Entry>"
  }, {
    "nodeContext" : "readEntries",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 237,
      "startColumnNumber" : 8,
      "endLineNumber" : 237,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 85
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 86
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3856,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 310,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Consumer slowConsumerMock=mock(Consumer.class);\n  final ChannelPromise slowChannelMock=mock(ChannelPromise.class);\n  final List<Entry> redeliverEntries=new ArrayList<>();\n  redeliverEntries.add(EntryImpl.create(1,1,createMessage(\"message1\",1,\"key1\")));\n  final List<Entry> readEntries=new ArrayList<>();\n  readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n  readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n  try {\n    Field totalAvailablePermitsField=PersistentDispatcherMultipleConsumers.class.getDeclaredField(\"totalAvailablePermits\");\n    totalAvailablePermitsField.setAccessible(true);\n    totalAvailablePermitsField.set(persistentDispatcher,1000);\n    doAnswer(invocationOnMock -> {\n      ((PersistentStickyKeyDispatcherMultipleConsumers)invocationOnMock.getArgument(2)).readEntriesComplete(readEntries,PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal);\n      return null;\n    }\n).when(cursorMock).asyncReadEntriesOrWait(anyInt(),anyLong(),any(PersistentStickyKeyDispatcherMultipleConsumers.class),eq(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal),any());\n  }\n catch (  Exception e) {\n    fail(\"Failed to set to field\",e);\n  }\n  try {\n    doReturn(\"consumer2\").when(slowConsumerMock).consumerName();\n    when(slowConsumerMock.getAvailablePermits()).thenReturn(0).thenReturn(1);\n    doReturn(true).when(slowConsumerMock).isWritable();\n    doReturn(slowChannelMock).when(slowConsumerMock).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n    persistentDispatcher.addConsumer(consumerMock);\n    persistentDispatcher.addConsumer(slowConsumerMock);\n  }\n catch (  Exception e) {\n    fail(\"Failed to add mock consumer\",e);\n  }\n  persistentDispatcher.sendMessagesToConsumers(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal,redeliverEntries);\n  verify(consumerMock,times(1)).sendMessages(argThat(arg -> {\n    assertEquals(arg.size(),1);\n    Entry entry=arg.get(0);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),3);\n    return true;\n  }\n),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  verify(slowConsumerMock,times(0)).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3908,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 310,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSkipRedeliverTemporally(){\n  final Consumer slowConsumerMock=mock(Consumer.class);\n  final ChannelPromise slowChannelMock=mock(ChannelPromise.class);\n  final List<Entry> redeliverEntries=new ArrayList<>();\n  redeliverEntries.add(EntryImpl.create(1,1,createMessage(\"message1\",1,\"key1\")));\n  final List<Entry> readEntries=new ArrayList<>();\n  readEntries.add(EntryImpl.create(1,2,createMessage(\"message2\",2,\"key1\")));\n  readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n  try {\n    Field totalAvailablePermitsField=PersistentDispatcherMultipleConsumers.class.getDeclaredField(\"totalAvailablePermits\");\n    totalAvailablePermitsField.setAccessible(true);\n    totalAvailablePermitsField.set(persistentDispatcher,1000);\n    doAnswer(invocationOnMock -> {\n      ((PersistentStickyKeyDispatcherMultipleConsumers)invocationOnMock.getArgument(2)).readEntriesComplete(readEntries,PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal);\n      return null;\n    }\n).when(cursorMock).asyncReadEntriesOrWait(anyInt(),anyLong(),any(PersistentStickyKeyDispatcherMultipleConsumers.class),eq(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal),any());\n  }\n catch (  Exception e) {\n    fail(\"Failed to set to field\",e);\n  }\n  try {\n    doReturn(\"consumer2\").when(slowConsumerMock).consumerName();\n    when(slowConsumerMock.getAvailablePermits()).thenReturn(0).thenReturn(1);\n    doReturn(true).when(slowConsumerMock).isWritable();\n    doReturn(slowChannelMock).when(slowConsumerMock).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n    persistentDispatcher.addConsumer(consumerMock);\n    persistentDispatcher.addConsumer(slowConsumerMock);\n  }\n catch (  Exception e) {\n    fail(\"Failed to add mock consumer\",e);\n  }\n  persistentDispatcher.sendMessagesToConsumers(PersistentStickyKeyDispatcherMultipleConsumers.ReadType.Normal,redeliverEntries);\n  verify(consumerMock,times(1)).sendMessages(argThat(arg -> {\n    assertEquals(arg.size(),1);\n    Entry entry=arg.get(0);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),3);\n    return true;\n  }\n),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  verify(slowConsumerMock,times(0)).sendMessages(anyList(),any(EntryBatchSizes.class),any(EntryBatchIndexesAcks.class),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 237,
        "startColumnNumber" : 8,
        "endLineNumber" : 237,
        "endColumnNumber" : 86
      },
      "nodeContext" : "readEntries.add(EntryImpl.create(1,3,createMessage(\"message3\",3,\"key2\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.bookkeeper.mledger.Entry>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 236,
    "startColumnNumber" : 8,
    "endLineNumber" : 236,
    "endColumnNumber" : 19
  }, {
    "charLength" : 11,
    "startLineNumber" : 237,
    "startColumnNumber" : 8,
    "endLineNumber" : 237,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}