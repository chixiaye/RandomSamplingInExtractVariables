{
  "id" : 292,
  "expression" : "factor1 instanceof LegacyTypeInformationType",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/inference/strategies/DecimalTimesTypeStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "factor1 instanceof LegacyTypeInformationType",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 52,
      "startColumnNumber" : 12,
      "endLineNumber" : 52,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (factor1 instanceof LegacyTypeInformationType) {\n  return Optional.of(argumentDataTypes.get(0));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 46,
        "startColumnNumber" : 65,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<DataType> argumentDataTypes=callContext.getArgumentDataTypes();\n  final LogicalType factor1=argumentDataTypes.get(0).getLogicalType();\n  final LogicalType factor2=argumentDataTypes.get(1).getLogicalType();\n  if (factor1 instanceof LegacyTypeInformationType) {\n    return Optional.of(argumentDataTypes.get(0));\n  }\n  if (factor2 instanceof LegacyTypeInformationType) {\n    return Optional.of(argumentDataTypes.get(1));\n  }\n  if (!isDecimalComputation(factor1,factor2)) {\n    return Optional.empty();\n  }\n  final DecimalType decimalType=LogicalTypeMerging.findMultiplicationDecimalType(getPrecision(factor1),getScale(factor1),getPrecision(factor2),getScale(factor2));\n  return Optional.of(fromLogicalToDataType(decimalType));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<DataType> inferType(CallContext callContext){\n  final List<DataType> argumentDataTypes=callContext.getArgumentDataTypes();\n  final LogicalType factor1=argumentDataTypes.get(0).getLogicalType();\n  final LogicalType factor2=argumentDataTypes.get(1).getLogicalType();\n  if (factor1 instanceof LegacyTypeInformationType) {\n    return Optional.of(argumentDataTypes.get(0));\n  }\n  if (factor2 instanceof LegacyTypeInformationType) {\n    return Optional.of(argumentDataTypes.get(1));\n  }\n  if (!isDecimalComputation(factor1,factor2)) {\n    return Optional.empty();\n  }\n  final DecimalType decimalType=LogicalTypeMerging.findMultiplicationDecimalType(getPrecision(factor1),getScale(factor1),getPrecision(factor2),getScale(factor2));\n  return Optional.of(fromLogicalToDataType(decimalType));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (factor1 instanceof LegacyTypeInformationType) {\n  return Optional.of(argumentDataTypes.get(0));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 52,
    "startColumnNumber" : 12,
    "endLineNumber" : 52,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}