{
  "id" : 413,
  "expression" : "new DataBlock[totalBlocks]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/datamatrix/decoder/DataBlock.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DataBlock[totalBlocks]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 59,
      "startColumnNumber" : 25,
      "endLineNumber" : 59,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 59,
        "startColumnNumber" : 16,
        "endLineNumber" : 59,
        "endColumnNumber" : 51
      },
      "nodeContext" : "result=new DataBlock[totalBlocks]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 52
      },
      "nodeContext" : "DataBlock[] result=new DataBlock[totalBlocks];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2676,
        "startLineNumber" : 47,
        "startColumnNumber" : 52,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Version.ECBlocks ecBlocks=version.getECBlocks();\n  int totalBlocks=0;\n  Version.ECB[] ecBlockArray=ecBlocks.getECBlocks();\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    totalBlocks+=ecBlock.getCount();\n  }\n  DataBlock[] result=new DataBlock[totalBlocks];\n  int numResultBlocks=0;\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    for (int i=0; i < ecBlock.getCount(); i++) {\n      int numDataCodewords=ecBlock.getDataCodewords();\n      int numBlockCodewords=ecBlocks.getECCodewords() + numDataCodewords;\n      result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n    }\n  }\n  int longerBlocksTotalCodewords=result[0].codewords.length;\n  int longerBlocksNumDataCodewords=longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n  int shorterBlocksNumDataCodewords=longerBlocksNumDataCodewords - 1;\n  int rawCodewordsOffset=0;\n  for (int i=0; i < shorterBlocksNumDataCodewords; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  boolean specialVersion=version.getVersionNumber() == 24;\n  int numLongerBlocks=specialVersion ? 8 : numResultBlocks;\n  for (int j=0; j < numLongerBlocks; j++) {\n    result[j].codewords[longerBlocksNumDataCodewords - 1]=rawCodewords[rawCodewordsOffset++];\n  }\n  int max=result[0].codewords.length;\n  for (int i=longerBlocksNumDataCodewords; i < max; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      int iOffset=specialVersion && j > 7 ? i - 1 : i;\n      result[j].codewords[iOffset]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  if (rawCodewordsOffset != rawCodewords.length) {\n    throw new IllegalArgumentException();\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3332,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them. That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This method will separate the data into original blocks.</p>\n * @param rawCodewords bytes as read directly from the Data Matrix Code\n * @param version version of the Data Matrix Code\n * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in theData Matrix Code\n */\nstatic DataBlock[] getDataBlocks(byte[] rawCodewords,Version version){\n  Version.ECBlocks ecBlocks=version.getECBlocks();\n  int totalBlocks=0;\n  Version.ECB[] ecBlockArray=ecBlocks.getECBlocks();\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    totalBlocks+=ecBlock.getCount();\n  }\n  DataBlock[] result=new DataBlock[totalBlocks];\n  int numResultBlocks=0;\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    for (int i=0; i < ecBlock.getCount(); i++) {\n      int numDataCodewords=ecBlock.getDataCodewords();\n      int numBlockCodewords=ecBlocks.getECCodewords() + numDataCodewords;\n      result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n    }\n  }\n  int longerBlocksTotalCodewords=result[0].codewords.length;\n  int longerBlocksNumDataCodewords=longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n  int shorterBlocksNumDataCodewords=longerBlocksNumDataCodewords - 1;\n  int rawCodewordsOffset=0;\n  for (int i=0; i < shorterBlocksNumDataCodewords; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  boolean specialVersion=version.getVersionNumber() == 24;\n  int numLongerBlocks=specialVersion ? 8 : numResultBlocks;\n  for (int j=0; j < numLongerBlocks; j++) {\n    result[j].codewords[longerBlocksNumDataCodewords - 1]=rawCodewords[rawCodewordsOffset++];\n  }\n  int max=result[0].codewords.length;\n  for (int i=longerBlocksNumDataCodewords; i < max; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      int iOffset=specialVersion && j > 7 ? i - 1 : i;\n      result[j].codewords[iOffset]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  if (rawCodewordsOffset != rawCodewords.length) {\n    throw new IllegalArgumentException();\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 52
      },
      "nodeContext" : "DataBlock[] result=new DataBlock[totalBlocks];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.zxing.datamatrix.decoder.DataBlock[]"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 59,
    "startColumnNumber" : 25,
    "endLineNumber" : 59,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}