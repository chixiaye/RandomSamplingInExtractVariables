{
  "id" : 292,
  "expression" : "5000",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/cc/arduino/utils/network/FileDownloader.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 154,
      "startColumnNumber" : 35,
      "endLineNumber" : 154,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 154,
        "startColumnNumber" : 6,
        "endLineNumber" : 154,
        "endColumnNumber" : 40
      },
      "nodeContext" : "connection.setConnectTimeout(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 154,
        "startColumnNumber" : 6,
        "endLineNumber" : 154,
        "endColumnNumber" : 41
      },
      "nodeContext" : "connection.setConnectTimeout(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3988,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  file=new RandomAccessFile(outputFile,\"rw\");\n  initialSize=file.length();\n  file.seek(initialSize);\n  setStatus(Status.CONNECTING);\n  System.getProperties().remove(\"http.proxyHost\");\n  System.getProperties().remove(\"http.proxyPort\");\n  System.getProperties().remove(\"https.proxyHost\");\n  System.getProperties().remove(\"https.proxyPort\");\n  System.getProperties().remove(\"http.proxyUser\");\n  System.getProperties().remove(\"http.proxyPassword\");\n  if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n    System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n  }\n  if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n    System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n    System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n  }\n  if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n  }\n  HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  setDownloaded(0);\n  connection.connect();\n  int resp=connection.getResponseCode();\n  if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n    String newUrl=connection.getHeaderField(\"Location\");\n    connection=(HttpURLConnection)new URL(newUrl).openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    connection.connect();\n    resp=connection.getResponseCode();\n  }\n  if (resp < 200 || resp >= 300) {\n    throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n  }\n  long len=connection.getContentLength();\n  if (len >= 0) {\n    setDownloadSize(len);\n  }\n  setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n    stream=connection.getInputStream();\n  }\n  byte buffer[]=new byte[10240];\n  while (status == Status.DOWNLOADING) {\n    int read=stream.read(buffer);\n    if (read == -1)     break;\n    file.write(buffer,0,read);\n    setDownloaded(getDownloaded() + read);\n    if (Thread.interrupted())     throw new InterruptedException();\n  }\n  if (getDownloadSize() != null) {\n    if (getDownloaded() < getDownloadSize())     throw new Exception(\"Incomplete download\");\n  }\n  setStatus(Status.COMPLETE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 509,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4664,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  file=new RandomAccessFile(outputFile,\"rw\");\n  initialSize=file.length();\n  file.seek(initialSize);\n  setStatus(Status.CONNECTING);\n  System.getProperties().remove(\"http.proxyHost\");\n  System.getProperties().remove(\"http.proxyPort\");\n  System.getProperties().remove(\"https.proxyHost\");\n  System.getProperties().remove(\"https.proxyPort\");\n  System.getProperties().remove(\"http.proxyUser\");\n  System.getProperties().remove(\"http.proxyPassword\");\n  if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n    System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n  }\n  if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n    System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n    System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n  }\n  if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n  }\n  HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  setDownloaded(0);\n  connection.connect();\n  int resp=connection.getResponseCode();\n  if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n    String newUrl=connection.getHeaderField(\"Location\");\n    connection=(HttpURLConnection)new URL(newUrl).openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    connection.connect();\n    resp=connection.getResponseCode();\n  }\n  if (resp < 200 || resp >= 300) {\n    throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n  }\n  long len=connection.getContentLength();\n  if (len >= 0) {\n    setDownloadSize(len);\n  }\n  setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n    stream=connection.getInputStream();\n  }\n  byte buffer[]=new byte[10240];\n  while (status == Status.DOWNLOADING) {\n    int read=stream.read(buffer);\n    if (read == -1)     break;\n    file.write(buffer,0,read);\n    setDownloaded(getDownloaded() + read);\n    if (Thread.interrupted())     throw new InterruptedException();\n  }\n  if (getDownloadSize() != null) {\n    if (getDownloaded() < getDownloadSize())     throw new Exception(\"Incomplete download\");\n  }\n  setStatus(Status.COMPLETE);\n}\n catch (InterruptedException e) {\n  setStatus(Status.CANCELLED);\n  throw e;\n}\ncatch (SocketTimeoutException e) {\n  setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n  setError(e);\n}\ncatch (Exception e) {\n  setStatus(Status.ERROR);\n  setError(e);\n}\n finally {\n  if (file != null) {\n    try {\n      file.close();\n    }\n catch (    Exception e) {\n    }\n  }\nsynchronized (this) {\n    if (stream != null) {\n      try {\n        stream.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 594,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4709,
        "startLineNumber" : 113,
        "startColumnNumber" : 53,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RandomAccessFile file=null;\n  try {\n    file=new RandomAccessFile(outputFile,\"rw\");\n    initialSize=file.length();\n    file.seek(initialSize);\n    setStatus(Status.CONNECTING);\n    System.getProperties().remove(\"http.proxyHost\");\n    System.getProperties().remove(\"http.proxyPort\");\n    System.getProperties().remove(\"https.proxyHost\");\n    System.getProperties().remove(\"https.proxyPort\");\n    System.getProperties().remove(\"http.proxyUser\");\n    System.getProperties().remove(\"http.proxyPassword\");\n    if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n      System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n    }\n    if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n      System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n      System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n    }\n    if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n      System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    }\n    HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    setDownloaded(0);\n    connection.connect();\n    int resp=connection.getResponseCode();\n    if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n      String newUrl=connection.getHeaderField(\"Location\");\n      connection=(HttpURLConnection)new URL(newUrl).openConnection();\n      if (downloadUrl.getUserInfo() != null) {\n        String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n        connection.setRequestProperty(\"Authorization\",auth);\n      }\n      connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n      connection.setConnectTimeout(5000);\n      connection.connect();\n      resp=connection.getResponseCode();\n    }\n    if (resp < 200 || resp >= 300) {\n      throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n    }\n    long len=connection.getContentLength();\n    if (len >= 0) {\n      setDownloadSize(len);\n    }\n    setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n      stream=connection.getInputStream();\n    }\n    byte buffer[]=new byte[10240];\n    while (status == Status.DOWNLOADING) {\n      int read=stream.read(buffer);\n      if (read == -1)       break;\n      file.write(buffer,0,read);\n      setDownloaded(getDownloaded() + read);\n      if (Thread.interrupted())       throw new InterruptedException();\n    }\n    if (getDownloadSize() != null) {\n      if (getDownloaded() < getDownloadSize())       throw new Exception(\"Incomplete download\");\n    }\n    setStatus(Status.COMPLETE);\n  }\n catch (  InterruptedException e) {\n    setStatus(Status.CANCELLED);\n    throw e;\n  }\ncatch (  SocketTimeoutException e) {\n    setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n    setError(e);\n  }\ncatch (  Exception e) {\n    setStatus(Status.ERROR);\n    setError(e);\n  }\n finally {\n    if (file != null) {\n      try {\n        file.close();\n      }\n catch (      Exception e) {\n      }\n    }\nsynchronized (this) {\n      if (stream != null) {\n        try {\n          stream.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 601,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4760,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void download() throws InterruptedException {\n  RandomAccessFile file=null;\n  try {\n    file=new RandomAccessFile(outputFile,\"rw\");\n    initialSize=file.length();\n    file.seek(initialSize);\n    setStatus(Status.CONNECTING);\n    System.getProperties().remove(\"http.proxyHost\");\n    System.getProperties().remove(\"http.proxyPort\");\n    System.getProperties().remove(\"https.proxyHost\");\n    System.getProperties().remove(\"https.proxyPort\");\n    System.getProperties().remove(\"http.proxyUser\");\n    System.getProperties().remove(\"http.proxyPassword\");\n    if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n      System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n    }\n    if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n      System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n      System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n    }\n    if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n      System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    }\n    HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    setDownloaded(0);\n    connection.connect();\n    int resp=connection.getResponseCode();\n    if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n      String newUrl=connection.getHeaderField(\"Location\");\n      connection=(HttpURLConnection)new URL(newUrl).openConnection();\n      if (downloadUrl.getUserInfo() != null) {\n        String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n        connection.setRequestProperty(\"Authorization\",auth);\n      }\n      connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n      connection.setConnectTimeout(5000);\n      connection.connect();\n      resp=connection.getResponseCode();\n    }\n    if (resp < 200 || resp >= 300) {\n      throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n    }\n    long len=connection.getContentLength();\n    if (len >= 0) {\n      setDownloadSize(len);\n    }\n    setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n      stream=connection.getInputStream();\n    }\n    byte buffer[]=new byte[10240];\n    while (status == Status.DOWNLOADING) {\n      int read=stream.read(buffer);\n      if (read == -1)       break;\n      file.write(buffer,0,read);\n      setDownloaded(getDownloaded() + read);\n      if (Thread.interrupted())       throw new InterruptedException();\n    }\n    if (getDownloadSize() != null) {\n      if (getDownloaded() < getDownloadSize())       throw new Exception(\"Incomplete download\");\n    }\n    setStatus(Status.COMPLETE);\n  }\n catch (  InterruptedException e) {\n    setStatus(Status.CANCELLED);\n    throw e;\n  }\ncatch (  SocketTimeoutException e) {\n    setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n    setError(e);\n  }\ncatch (  Exception e) {\n    setStatus(Status.ERROR);\n    setError(e);\n  }\n finally {\n    if (file != null) {\n      try {\n        file.close();\n      }\n catch (      Exception e) {\n      }\n    }\nsynchronized (this) {\n      if (stream != null) {\n        try {\n          stream.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 607,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 154,
        "startColumnNumber" : 6,
        "endLineNumber" : 154,
        "endColumnNumber" : 41
      },
      "nodeContext" : "connection.setConnectTimeout(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 172,
      "startColumnNumber" : 37,
      "endLineNumber" : 172,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 42
      },
      "nodeContext" : "connection.setConnectTimeout(5000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 43
      },
      "nodeContext" : "connection.setConnectTimeout(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 161,
        "startColumnNumber" : 98,
        "endLineNumber" : 176,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String newUrl=connection.getHeaderField(\"Location\");\n  connection=(HttpURLConnection)new URL(newUrl).openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  connection.connect();\n  resp=connection.getResponseCode();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 176,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n  String newUrl=connection.getHeaderField(\"Location\");\n  connection=(HttpURLConnection)new URL(newUrl).openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  connection.connect();\n  resp=connection.getResponseCode();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3988,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  file=new RandomAccessFile(outputFile,\"rw\");\n  initialSize=file.length();\n  file.seek(initialSize);\n  setStatus(Status.CONNECTING);\n  System.getProperties().remove(\"http.proxyHost\");\n  System.getProperties().remove(\"http.proxyPort\");\n  System.getProperties().remove(\"https.proxyHost\");\n  System.getProperties().remove(\"https.proxyPort\");\n  System.getProperties().remove(\"http.proxyUser\");\n  System.getProperties().remove(\"http.proxyPassword\");\n  if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n    System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n  }\n  if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n    System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n    System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n  }\n  if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n  }\n  HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  setDownloaded(0);\n  connection.connect();\n  int resp=connection.getResponseCode();\n  if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n    String newUrl=connection.getHeaderField(\"Location\");\n    connection=(HttpURLConnection)new URL(newUrl).openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    connection.connect();\n    resp=connection.getResponseCode();\n  }\n  if (resp < 200 || resp >= 300) {\n    throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n  }\n  long len=connection.getContentLength();\n  if (len >= 0) {\n    setDownloadSize(len);\n  }\n  setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n    stream=connection.getInputStream();\n  }\n  byte buffer[]=new byte[10240];\n  while (status == Status.DOWNLOADING) {\n    int read=stream.read(buffer);\n    if (read == -1)     break;\n    file.write(buffer,0,read);\n    setDownloaded(getDownloaded() + read);\n    if (Thread.interrupted())     throw new InterruptedException();\n  }\n  if (getDownloadSize() != null) {\n    if (getDownloaded() < getDownloadSize())     throw new Exception(\"Incomplete download\");\n  }\n  setStatus(Status.COMPLETE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 509,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4664,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 241,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  file=new RandomAccessFile(outputFile,\"rw\");\n  initialSize=file.length();\n  file.seek(initialSize);\n  setStatus(Status.CONNECTING);\n  System.getProperties().remove(\"http.proxyHost\");\n  System.getProperties().remove(\"http.proxyPort\");\n  System.getProperties().remove(\"https.proxyHost\");\n  System.getProperties().remove(\"https.proxyPort\");\n  System.getProperties().remove(\"http.proxyUser\");\n  System.getProperties().remove(\"http.proxyPassword\");\n  if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n    System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n  }\n  if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n    System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n    System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n  }\n  if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n    System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n    System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n  }\n  HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n  if (downloadUrl.getUserInfo() != null) {\n    String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n    connection.setRequestProperty(\"Authorization\",auth);\n  }\n  connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n  connection.setConnectTimeout(5000);\n  setDownloaded(0);\n  connection.connect();\n  int resp=connection.getResponseCode();\n  if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n    String newUrl=connection.getHeaderField(\"Location\");\n    connection=(HttpURLConnection)new URL(newUrl).openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    connection.connect();\n    resp=connection.getResponseCode();\n  }\n  if (resp < 200 || resp >= 300) {\n    throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n  }\n  long len=connection.getContentLength();\n  if (len >= 0) {\n    setDownloadSize(len);\n  }\n  setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n    stream=connection.getInputStream();\n  }\n  byte buffer[]=new byte[10240];\n  while (status == Status.DOWNLOADING) {\n    int read=stream.read(buffer);\n    if (read == -1)     break;\n    file.write(buffer,0,read);\n    setDownloaded(getDownloaded() + read);\n    if (Thread.interrupted())     throw new InterruptedException();\n  }\n  if (getDownloadSize() != null) {\n    if (getDownloaded() < getDownloadSize())     throw new Exception(\"Incomplete download\");\n  }\n  setStatus(Status.COMPLETE);\n}\n catch (InterruptedException e) {\n  setStatus(Status.CANCELLED);\n  throw e;\n}\ncatch (SocketTimeoutException e) {\n  setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n  setError(e);\n}\ncatch (Exception e) {\n  setStatus(Status.ERROR);\n  setError(e);\n}\n finally {\n  if (file != null) {\n    try {\n      file.close();\n    }\n catch (    Exception e) {\n    }\n  }\nsynchronized (this) {\n    if (stream != null) {\n      try {\n        stream.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 594,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4709,
        "startLineNumber" : 113,
        "startColumnNumber" : 53,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RandomAccessFile file=null;\n  try {\n    file=new RandomAccessFile(outputFile,\"rw\");\n    initialSize=file.length();\n    file.seek(initialSize);\n    setStatus(Status.CONNECTING);\n    System.getProperties().remove(\"http.proxyHost\");\n    System.getProperties().remove(\"http.proxyPort\");\n    System.getProperties().remove(\"https.proxyHost\");\n    System.getProperties().remove(\"https.proxyPort\");\n    System.getProperties().remove(\"http.proxyUser\");\n    System.getProperties().remove(\"http.proxyPassword\");\n    if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n      System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n    }\n    if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n      System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n      System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n    }\n    if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n      System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    }\n    HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    setDownloaded(0);\n    connection.connect();\n    int resp=connection.getResponseCode();\n    if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n      String newUrl=connection.getHeaderField(\"Location\");\n      connection=(HttpURLConnection)new URL(newUrl).openConnection();\n      if (downloadUrl.getUserInfo() != null) {\n        String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n        connection.setRequestProperty(\"Authorization\",auth);\n      }\n      connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n      connection.setConnectTimeout(5000);\n      connection.connect();\n      resp=connection.getResponseCode();\n    }\n    if (resp < 200 || resp >= 300) {\n      throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n    }\n    long len=connection.getContentLength();\n    if (len >= 0) {\n      setDownloadSize(len);\n    }\n    setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n      stream=connection.getInputStream();\n    }\n    byte buffer[]=new byte[10240];\n    while (status == Status.DOWNLOADING) {\n      int read=stream.read(buffer);\n      if (read == -1)       break;\n      file.write(buffer,0,read);\n      setDownloaded(getDownloaded() + read);\n      if (Thread.interrupted())       throw new InterruptedException();\n    }\n    if (getDownloadSize() != null) {\n      if (getDownloaded() < getDownloadSize())       throw new Exception(\"Incomplete download\");\n    }\n    setStatus(Status.COMPLETE);\n  }\n catch (  InterruptedException e) {\n    setStatus(Status.CANCELLED);\n    throw e;\n  }\ncatch (  SocketTimeoutException e) {\n    setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n    setError(e);\n  }\ncatch (  Exception e) {\n    setStatus(Status.ERROR);\n    setError(e);\n  }\n finally {\n    if (file != null) {\n      try {\n        file.close();\n      }\n catch (      Exception e) {\n      }\n    }\nsynchronized (this) {\n      if (stream != null) {\n        try {\n          stream.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 601,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4760,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void download() throws InterruptedException {\n  RandomAccessFile file=null;\n  try {\n    file=new RandomAccessFile(outputFile,\"rw\");\n    initialSize=file.length();\n    file.seek(initialSize);\n    setStatus(Status.CONNECTING);\n    System.getProperties().remove(\"http.proxyHost\");\n    System.getProperties().remove(\"http.proxyPort\");\n    System.getProperties().remove(\"https.proxyHost\");\n    System.getProperties().remove(\"https.proxyPort\");\n    System.getProperties().remove(\"http.proxyUser\");\n    System.getProperties().remove(\"http.proxyPassword\");\n    if (PreferencesData.has(\"proxy.http.server\") && PreferencesData.get(\"proxy.http.server\") != null && !PreferencesData.get(\"proxy.http.server\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyHost\",PreferencesData.get(\"proxy.http.server\"));\n      System.getProperties().put(\"http.proxyPort\",PreferencesData.get(\"proxy.http.port\"));\n    }\n    if (PreferencesData.has(\"proxy.https.server\") && PreferencesData.get(\"proxy.https.server\") != null && !PreferencesData.get(\"proxy.https.server\").equals(\"\")) {\n      System.getProperties().put(\"https.proxyHost\",PreferencesData.get(\"proxy.https.server\"));\n      System.getProperties().put(\"https.proxyPort\",PreferencesData.get(\"proxy.https.port\"));\n    }\n    if (PreferencesData.has(\"proxy.user\") && PreferencesData.get(\"proxy.user\") != null && !PreferencesData.get(\"proxy.user\").equals(\"\")) {\n      System.getProperties().put(\"http.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"http.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n      System.getProperties().put(\"https.proxyUser\",PreferencesData.get(\"proxy.user\"));\n      System.getProperties().put(\"https.proxyPassword\",PreferencesData.get(\"proxy.password\"));\n    }\n    HttpURLConnection connection=(HttpURLConnection)downloadUrl.openConnection();\n    if (downloadUrl.getUserInfo() != null) {\n      String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n      connection.setRequestProperty(\"Authorization\",auth);\n    }\n    connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n    connection.setConnectTimeout(5000);\n    setDownloaded(0);\n    connection.connect();\n    int resp=connection.getResponseCode();\n    if (resp == HttpURLConnection.HTTP_MOVED_PERM || resp == HttpURLConnection.HTTP_MOVED_TEMP) {\n      String newUrl=connection.getHeaderField(\"Location\");\n      connection=(HttpURLConnection)new URL(newUrl).openConnection();\n      if (downloadUrl.getUserInfo() != null) {\n        String auth=\"Basic \" + new String(new Base64().encode(downloadUrl.getUserInfo().getBytes()));\n        connection.setRequestProperty(\"Authorization\",auth);\n      }\n      connection.setRequestProperty(\"Range\",\"bytes=\" + initialSize + \"-\");\n      connection.setConnectTimeout(5000);\n      connection.connect();\n      resp=connection.getResponseCode();\n    }\n    if (resp < 200 || resp >= 300) {\n      throw new IOException(\"Recevied invalid http status code from server: \" + resp);\n    }\n    long len=connection.getContentLength();\n    if (len >= 0) {\n      setDownloadSize(len);\n    }\n    setStatus(Status.DOWNLOADING);\nsynchronized (this) {\n      stream=connection.getInputStream();\n    }\n    byte buffer[]=new byte[10240];\n    while (status == Status.DOWNLOADING) {\n      int read=stream.read(buffer);\n      if (read == -1)       break;\n      file.write(buffer,0,read);\n      setDownloaded(getDownloaded() + read);\n      if (Thread.interrupted())       throw new InterruptedException();\n    }\n    if (getDownloadSize() != null) {\n      if (getDownloaded() < getDownloadSize())       throw new Exception(\"Incomplete download\");\n    }\n    setStatus(Status.COMPLETE);\n  }\n catch (  InterruptedException e) {\n    setStatus(Status.CANCELLED);\n    throw e;\n  }\ncatch (  SocketTimeoutException e) {\n    setStatus(Status.CONNECTION_TIMEOUT_ERROR);\n    setError(e);\n  }\ncatch (  Exception e) {\n    setStatus(Status.ERROR);\n    setError(e);\n  }\n finally {\n    if (file != null) {\n      try {\n        file.close();\n      }\n catch (      Exception e) {\n      }\n    }\nsynchronized (this) {\n      if (stream != null) {\n        try {\n          stream.close();\n        }\n catch (        Exception e) {\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 607,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 43
      },
      "nodeContext" : "connection.setConnectTimeout(5000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 154,
    "startColumnNumber" : 35,
    "endLineNumber" : 154,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 172,
    "startColumnNumber" : 37,
    "endLineNumber" : 172,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}