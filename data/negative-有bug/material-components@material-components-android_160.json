{
  "id" : 160,
  "expression" : "i",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/internal/NavigationMenuPresenter.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 492,
      "startColumnNumber" : 65,
      "endLineNumber" : 492,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 492,
        "startColumnNumber" : 65,
        "endLineNumber" : 492,
        "endColumnNumber" : 78
      },
      "nodeContext" : "i < totalSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2286,
        "startLineNumber" : 492,
        "startColumnNumber" : 6,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 275,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 481,
        "startColumnNumber" : 36,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2781,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Flattens the visible menu items of  {@link #menu} into {@link #items}, while inserting separators between items when necessary.\n */\nprivate void prepareMenuItems(){\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 492,
        "startColumnNumber" : 65,
        "endLineNumber" : 492,
        "endColumnNumber" : 78
      },
      "nodeContext" : "i < totalSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 493,
      "startColumnNumber" : 55,
      "endLineNumber" : 493,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 493,
        "startColumnNumber" : 28,
        "endLineNumber" : 493,
        "endColumnNumber" : 57
      },
      "nodeContext" : "menu.getVisibleItems().get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 493,
        "startColumnNumber" : 21,
        "endLineNumber" : 493,
        "endColumnNumber" : 57
      },
      "nodeContext" : "item=menu.getVisibleItems().get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 493,
        "startColumnNumber" : 8,
        "endLineNumber" : 493,
        "endColumnNumber" : 58
      },
      "nodeContext" : "MenuItemImpl item=menu.getVisibleItems().get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2207,
        "startLineNumber" : 492,
        "startColumnNumber" : 85,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2286,
        "startLineNumber" : 492,
        "startColumnNumber" : 6,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 275,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 481,
        "startColumnNumber" : 36,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2781,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Flattens the visible menu items of  {@link #menu} into {@link #items}, while inserting separators between items when necessary.\n */\nprivate void prepareMenuItems(){\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 493,
        "startColumnNumber" : 8,
        "endLineNumber" : 493,
        "endColumnNumber" : 58
      },
      "nodeContext" : "MenuItemImpl item=menu.getVisibleItems().get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 503,
      "startColumnNumber" : 16,
      "endLineNumber" : 503,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 503,
        "startColumnNumber" : 16,
        "endLineNumber" : 503,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 503,
        "startColumnNumber" : 12,
        "endLineNumber" : 505,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (i != 0) {\n  items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 502,
        "startColumnNumber" : 41,
        "endLineNumber" : 527,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (i != 0) {\n    items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n  }\n  items.add(new NavigationMenuTextItem(item));\n  boolean subMenuHasIcon=false;\n  int subMenuStart=items.size();\n  for (int j=0, size=subMenu.size(); j < size; j++) {\n    MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n    if (subMenuItem.isVisible()) {\n      if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n        subMenuHasIcon=true;\n      }\n      if (subMenuItem.isCheckable()) {\n        subMenuItem.setExclusiveCheckable(false);\n      }\n      if (item.isChecked()) {\n        setCheckedItem(item);\n      }\n      items.add(new NavigationMenuTextItem(subMenuItem));\n    }\n  }\n  if (subMenuHasIcon) {\n    appendTransparentIconIfMissing(subMenuStart,items.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1074,
        "startLineNumber" : 502,
        "startColumnNumber" : 10,
        "endLineNumber" : 527,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (subMenu.hasVisibleItems()) {\n  if (i != 0) {\n    items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n  }\n  items.add(new NavigationMenuTextItem(item));\n  boolean subMenuHasIcon=false;\n  int subMenuStart=items.size();\n  for (int j=0, size=subMenu.size(); j < size; j++) {\n    MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n    if (subMenuItem.isVisible()) {\n      if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n        subMenuHasIcon=true;\n      }\n      if (subMenuItem.isCheckable()) {\n        subMenuItem.setExclusiveCheckable(false);\n      }\n      if (item.isChecked()) {\n        setCheckedItem(item);\n      }\n      items.add(new NavigationMenuTextItem(subMenuItem));\n    }\n  }\n  if (subMenuHasIcon) {\n    appendTransparentIconIfMissing(subMenuStart,items.size());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1143,
        "startLineNumber" : 500,
        "startColumnNumber" : 31,
        "endLineNumber" : 528,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SubMenu subMenu=item.getSubMenu();\n  if (subMenu.hasVisibleItems()) {\n    if (i != 0) {\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n    }\n    items.add(new NavigationMenuTextItem(item));\n    boolean subMenuHasIcon=false;\n    int subMenuStart=items.size();\n    for (int j=0, size=subMenu.size(); j < size; j++) {\n      MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n      if (subMenuItem.isVisible()) {\n        if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n          subMenuHasIcon=true;\n        }\n        if (subMenuItem.isCheckable()) {\n          subMenuItem.setExclusiveCheckable(false);\n        }\n        if (item.isChecked()) {\n          setCheckedItem(item);\n        }\n        items.add(new NavigationMenuTextItem(subMenuItem));\n      }\n    }\n    if (subMenuHasIcon) {\n      appendTransparentIconIfMissing(subMenuStart,items.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1967,
        "startLineNumber" : 500,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (item.hasSubMenu()) {\n  SubMenu subMenu=item.getSubMenu();\n  if (subMenu.hasVisibleItems()) {\n    if (i != 0) {\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n    }\n    items.add(new NavigationMenuTextItem(item));\n    boolean subMenuHasIcon=false;\n    int subMenuStart=items.size();\n    for (int j=0, size=subMenu.size(); j < size; j++) {\n      MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n      if (subMenuItem.isVisible()) {\n        if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n          subMenuHasIcon=true;\n        }\n        if (subMenuItem.isCheckable()) {\n          subMenuItem.setExclusiveCheckable(false);\n        }\n        if (item.isChecked()) {\n          setCheckedItem(item);\n        }\n        items.add(new NavigationMenuTextItem(subMenuItem));\n      }\n    }\n    if (subMenuHasIcon) {\n      appendTransparentIconIfMissing(subMenuStart,items.size());\n    }\n  }\n}\n else {\n  int groupId=item.getGroupId();\n  if (groupId != currentGroupId) {\n    currentGroupStart=items.size();\n    currentGroupHasIcon=item.getIcon() != null;\n    if (i != 0) {\n      currentGroupStart++;\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n    }\n  }\n else   if (!currentGroupHasIcon && item.getIcon() != null) {\n    currentGroupHasIcon=true;\n    appendTransparentIconIfMissing(currentGroupStart,items.size());\n  }\n  NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n  textItem.needsEmptyIcon=currentGroupHasIcon;\n  items.add(textItem);\n  currentGroupId=groupId;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2207,
        "startLineNumber" : 492,
        "startColumnNumber" : 85,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2286,
        "startLineNumber" : 492,
        "startColumnNumber" : 6,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 275,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 481,
        "startColumnNumber" : 36,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2781,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Flattens the visible menu items of  {@link #menu} into {@link #items}, while inserting separators between items when necessary.\n */\nprivate void prepareMenuItems(){\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 503,
        "startColumnNumber" : 16,
        "endLineNumber" : 503,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 533,
      "startColumnNumber" : 16,
      "endLineNumber" : 533,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 533,
        "startColumnNumber" : 16,
        "endLineNumber" : 533,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 533,
        "startColumnNumber" : 12,
        "endLineNumber" : 536,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (i != 0) {\n  currentGroupStart++;\n  items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 530,
        "startColumnNumber" : 41,
        "endLineNumber" : 537,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  currentGroupStart=items.size();\n  currentGroupHasIcon=item.getIcon() != null;\n  if (i != 0) {\n    currentGroupStart++;\n    items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 530,
        "startColumnNumber" : 10,
        "endLineNumber" : 540,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (groupId != currentGroupId) {\n  currentGroupStart=items.size();\n  currentGroupHasIcon=item.getIcon() != null;\n  if (i != 0) {\n    currentGroupStart++;\n    items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n  }\n}\n else if (!currentGroupHasIcon && item.getIcon() != null) {\n  currentGroupHasIcon=true;\n  appendTransparentIconIfMissing(currentGroupStart,items.size());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 795,
        "startLineNumber" : 528,
        "startColumnNumber" : 15,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int groupId=item.getGroupId();\n  if (groupId != currentGroupId) {\n    currentGroupStart=items.size();\n    currentGroupHasIcon=item.getIcon() != null;\n    if (i != 0) {\n      currentGroupStart++;\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n    }\n  }\n else   if (!currentGroupHasIcon && item.getIcon() != null) {\n    currentGroupHasIcon=true;\n    appendTransparentIconIfMissing(currentGroupStart,items.size());\n  }\n  NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n  textItem.needsEmptyIcon=currentGroupHasIcon;\n  items.add(textItem);\n  currentGroupId=groupId;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1967,
        "startLineNumber" : 500,
        "startColumnNumber" : 8,
        "endLineNumber" : 545,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (item.hasSubMenu()) {\n  SubMenu subMenu=item.getSubMenu();\n  if (subMenu.hasVisibleItems()) {\n    if (i != 0) {\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n    }\n    items.add(new NavigationMenuTextItem(item));\n    boolean subMenuHasIcon=false;\n    int subMenuStart=items.size();\n    for (int j=0, size=subMenu.size(); j < size; j++) {\n      MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n      if (subMenuItem.isVisible()) {\n        if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n          subMenuHasIcon=true;\n        }\n        if (subMenuItem.isCheckable()) {\n          subMenuItem.setExclusiveCheckable(false);\n        }\n        if (item.isChecked()) {\n          setCheckedItem(item);\n        }\n        items.add(new NavigationMenuTextItem(subMenuItem));\n      }\n    }\n    if (subMenuHasIcon) {\n      appendTransparentIconIfMissing(subMenuStart,items.size());\n    }\n  }\n}\n else {\n  int groupId=item.getGroupId();\n  if (groupId != currentGroupId) {\n    currentGroupStart=items.size();\n    currentGroupHasIcon=item.getIcon() != null;\n    if (i != 0) {\n      currentGroupStart++;\n      items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n    }\n  }\n else   if (!currentGroupHasIcon && item.getIcon() != null) {\n    currentGroupHasIcon=true;\n    appendTransparentIconIfMissing(currentGroupStart,items.size());\n  }\n  NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n  textItem.needsEmptyIcon=currentGroupHasIcon;\n  items.add(textItem);\n  currentGroupId=groupId;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2207,
        "startLineNumber" : 492,
        "startColumnNumber" : 85,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2286,
        "startLineNumber" : 492,
        "startColumnNumber" : 6,
        "endLineNumber" : 546,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n  MenuItemImpl item=menu.getVisibleItems().get(i);\n  if (item.isChecked()) {\n    setCheckedItem(item);\n  }\n  if (item.isCheckable()) {\n    item.setExclusiveCheckable(false);\n  }\n  if (item.hasSubMenu()) {\n    SubMenu subMenu=item.getSubMenu();\n    if (subMenu.hasVisibleItems()) {\n      if (i != 0) {\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n      }\n      items.add(new NavigationMenuTextItem(item));\n      boolean subMenuHasIcon=false;\n      int subMenuStart=items.size();\n      for (int j=0, size=subMenu.size(); j < size; j++) {\n        MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n        if (subMenuItem.isVisible()) {\n          if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n            subMenuHasIcon=true;\n          }\n          if (subMenuItem.isCheckable()) {\n            subMenuItem.setExclusiveCheckable(false);\n          }\n          if (item.isChecked()) {\n            setCheckedItem(item);\n          }\n          items.add(new NavigationMenuTextItem(subMenuItem));\n        }\n      }\n      if (subMenuHasIcon) {\n        appendTransparentIconIfMissing(subMenuStart,items.size());\n      }\n    }\n  }\n else {\n    int groupId=item.getGroupId();\n    if (groupId != currentGroupId) {\n      currentGroupStart=items.size();\n      currentGroupHasIcon=item.getIcon() != null;\n      if (i != 0) {\n        currentGroupStart++;\n        items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n      }\n    }\n else     if (!currentGroupHasIcon && item.getIcon() != null) {\n      currentGroupHasIcon=true;\n      appendTransparentIconIfMissing(currentGroupStart,items.size());\n    }\n    NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n    textItem.needsEmptyIcon=currentGroupHasIcon;\n    items.add(textItem);\n    currentGroupId=groupId;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 275,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2592,
        "startLineNumber" : 481,
        "startColumnNumber" : 36,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2781,
        "startLineNumber" : 477,
        "startColumnNumber" : 4,
        "endLineNumber" : 548,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Flattens the visible menu items of  {@link #menu} into {@link #items}, while inserting separators between items when necessary.\n */\nprivate void prepareMenuItems(){\n  if (updateSuspended) {\n    return;\n  }\n  updateSuspended=true;\n  items.clear();\n  items.add(new NavigationMenuHeaderItem());\n  int currentGroupId=-1;\n  int currentGroupStart=0;\n  boolean currentGroupHasIcon=false;\n  for (int i=0, totalSize=menu.getVisibleItems().size(); i < totalSize; i++) {\n    MenuItemImpl item=menu.getVisibleItems().get(i);\n    if (item.isChecked()) {\n      setCheckedItem(item);\n    }\n    if (item.isCheckable()) {\n      item.setExclusiveCheckable(false);\n    }\n    if (item.hasSubMenu()) {\n      SubMenu subMenu=item.getSubMenu();\n      if (subMenu.hasVisibleItems()) {\n        if (i != 0) {\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,0));\n        }\n        items.add(new NavigationMenuTextItem(item));\n        boolean subMenuHasIcon=false;\n        int subMenuStart=items.size();\n        for (int j=0, size=subMenu.size(); j < size; j++) {\n          MenuItemImpl subMenuItem=(MenuItemImpl)subMenu.getItem(j);\n          if (subMenuItem.isVisible()) {\n            if (!subMenuHasIcon && subMenuItem.getIcon() != null) {\n              subMenuHasIcon=true;\n            }\n            if (subMenuItem.isCheckable()) {\n              subMenuItem.setExclusiveCheckable(false);\n            }\n            if (item.isChecked()) {\n              setCheckedItem(item);\n            }\n            items.add(new NavigationMenuTextItem(subMenuItem));\n          }\n        }\n        if (subMenuHasIcon) {\n          appendTransparentIconIfMissing(subMenuStart,items.size());\n        }\n      }\n    }\n else {\n      int groupId=item.getGroupId();\n      if (groupId != currentGroupId) {\n        currentGroupStart=items.size();\n        currentGroupHasIcon=item.getIcon() != null;\n        if (i != 0) {\n          currentGroupStart++;\n          items.add(new NavigationMenuSeparatorItem(paddingSeparator,paddingSeparator));\n        }\n      }\n else       if (!currentGroupHasIcon && item.getIcon() != null) {\n        currentGroupHasIcon=true;\n        appendTransparentIconIfMissing(currentGroupStart,items.size());\n      }\n      NavigationMenuTextItem textItem=new NavigationMenuTextItem(item);\n      textItem.needsEmptyIcon=currentGroupHasIcon;\n      items.add(textItem);\n      currentGroupId=groupId;\n    }\n  }\n  updateSuspended=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 533,
        "startColumnNumber" : 16,
        "endLineNumber" : 533,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 492,
    "startColumnNumber" : 65,
    "endLineNumber" : 492,
    "endColumnNumber" : 66
  }, {
    "charLength" : 1,
    "startLineNumber" : 493,
    "startColumnNumber" : 55,
    "endLineNumber" : 493,
    "endColumnNumber" : 56
  }, {
    "charLength" : 1,
    "startLineNumber" : 503,
    "startColumnNumber" : 16,
    "endLineNumber" : 503,
    "endColumnNumber" : 17
  }, {
    "charLength" : 1,
    "startLineNumber" : 533,
    "startColumnNumber" : 16,
    "endLineNumber" : 533,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}