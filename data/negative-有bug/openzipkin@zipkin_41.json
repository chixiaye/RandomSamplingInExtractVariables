{
  "id" : 41,
  "expression" : "input",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-sampler/zookeeper/src/main/java/zipkin/sampler/zookeeper/SampleRateCalculator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "input",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 46,
      "startColumnNumber" : 9,
      "endLineNumber" : 46,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 46,
        "startColumnNumber" : 9,
        "endLineNumber" : 46,
        "endColumnNumber" : 26
      },
      "nodeContext" : "input.isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 26
      },
      "nodeContext" : "!input.isPresent()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (!input.isPresent()) return Optional.empty();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!input.isPresent())   return Optional.empty();\n  List<Integer> measurements=input.get();\n  int discountedAverage=discountedAverage(measurements,discountRate);\n  log.debug(\"{} discounted average measurement: {}\",discountRate,discountedAverage);\n  if (discountedAverage <= 0)   return Optional.empty();\n  float oldSampleRate=sampleRate.get();\n  float newSampleRate=Math.min(1.0f,oldSampleRate * target.get() / discountedAverage);\n  float change=Math.abs(oldSampleRate - newSampleRate) / oldSampleRate;\n  if (change > 0.0f) {\n    log.debug(\"Sample rate changed {} from {} to {}\",change,oldSampleRate,sampleRate);\n    if (change < threshold) {\n      log.debug(\"Sample rate change was less than {} threshold. Ignoring\",threshold);\n    }\n  }\n  return change >= threshold ? Optional.of(newSampleRate) : Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<Float> apply(Optional<List<Integer>> input){\n  if (!input.isPresent())   return Optional.empty();\n  List<Integer> measurements=input.get();\n  int discountedAverage=discountedAverage(measurements,discountRate);\n  log.debug(\"{} discounted average measurement: {}\",discountRate,discountedAverage);\n  if (discountedAverage <= 0)   return Optional.empty();\n  float oldSampleRate=sampleRate.get();\n  float newSampleRate=Math.min(1.0f,oldSampleRate * target.get() / discountedAverage);\n  float change=Math.abs(oldSampleRate - newSampleRate) / oldSampleRate;\n  if (change > 0.0f) {\n    log.debug(\"Sample rate changed {} from {} to {}\",change,oldSampleRate,sampleRate);\n    if (change < threshold) {\n      log.debug(\"Sample rate change was less than {} threshold. Ignoring\",threshold);\n    }\n  }\n  return change >= threshold ? Optional.of(newSampleRate) : Optional.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (!input.isPresent()) return Optional.empty();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.util.List<java.lang.Integer>>"
  }, {
    "nodeContext" : "input",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 47,
      "startColumnNumber" : 33,
      "endLineNumber" : 47,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 47,
        "startColumnNumber" : 33,
        "endLineNumber" : 47,
        "endColumnNumber" : 44
      },
      "nodeContext" : "input.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 47,
        "startColumnNumber" : 18,
        "endLineNumber" : 47,
        "endColumnNumber" : 44
      },
      "nodeContext" : "measurements=input.get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 45
      },
      "nodeContext" : "List<Integer> measurements=input.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!input.isPresent())   return Optional.empty();\n  List<Integer> measurements=input.get();\n  int discountedAverage=discountedAverage(measurements,discountRate);\n  log.debug(\"{} discounted average measurement: {}\",discountRate,discountedAverage);\n  if (discountedAverage <= 0)   return Optional.empty();\n  float oldSampleRate=sampleRate.get();\n  float newSampleRate=Math.min(1.0f,oldSampleRate * target.get() / discountedAverage);\n  float change=Math.abs(oldSampleRate - newSampleRate) / oldSampleRate;\n  if (change > 0.0f) {\n    log.debug(\"Sample rate changed {} from {} to {}\",change,oldSampleRate,sampleRate);\n    if (change < threshold) {\n      log.debug(\"Sample rate change was less than {} threshold. Ignoring\",threshold);\n    }\n  }\n  return change >= threshold ? Optional.of(newSampleRate) : Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<Float> apply(Optional<List<Integer>> input){\n  if (!input.isPresent())   return Optional.empty();\n  List<Integer> measurements=input.get();\n  int discountedAverage=discountedAverage(measurements,discountRate);\n  log.debug(\"{} discounted average measurement: {}\",discountRate,discountedAverage);\n  if (discountedAverage <= 0)   return Optional.empty();\n  float oldSampleRate=sampleRate.get();\n  float newSampleRate=Math.min(1.0f,oldSampleRate * target.get() / discountedAverage);\n  float change=Math.abs(oldSampleRate - newSampleRate) / oldSampleRate;\n  if (change > 0.0f) {\n    log.debug(\"Sample rate changed {} from {} to {}\",change,oldSampleRate,sampleRate);\n    if (change < threshold) {\n      log.debug(\"Sample rate change was less than {} threshold. Ignoring\",threshold);\n    }\n  }\n  return change >= threshold ? Optional.of(newSampleRate) : Optional.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 45
      },
      "nodeContext" : "List<Integer> measurements=input.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<java.util.List<java.lang.Integer>>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 46,
    "startColumnNumber" : 9,
    "endLineNumber" : 46,
    "endColumnNumber" : 14
  }, {
    "charLength" : 5,
    "startLineNumber" : 47,
    "startColumnNumber" : 33,
    "endLineNumber" : 47,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}