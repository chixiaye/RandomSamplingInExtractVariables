{
  "id" : 95,
  "expression" : "(ILabelProvider)viewer.getLabelProvider()",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/project/ProjectExplorerView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(ILabelProvider)viewer.getLabelProvider()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 97,
      "startColumnNumber" : 49,
      "endLineNumber" : 97,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 97,
        "startColumnNumber" : 29,
        "endLineNumber" : 97,
        "endColumnNumber" : 91
      },
      "nodeContext" : "mainLabelProvider=(ILabelProvider)viewer.getLabelProvider()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 92
      },
      "nodeContext" : "final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6834,
        "startLineNumber" : 94,
        "startColumnNumber" : 56,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Color shadowColor=viewer.getControl().getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);\n  final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider();\n  columnController=new ViewerColumnController(\"projectExplorer\",viewer);\n  columnController.setForceAutoSize(true);\n  columnController.addColumn(\"Name\",\"Resource name\",SWT.LEFT,true,true,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      return mainLabelProvider.getText(element);\n    }\n    @Override public Image getImage(    Object element){\n      Image image=mainLabelProvider.getImage(element);\n      if (element instanceof DBNResource) {\n        image=labelDecorator.decorateImage(image,element);\n      }\n      return image;\n    }\n    @Override public String getToolTipText(    Object element){\n      if (mainLabelProvider instanceof IToolTipProvider) {\n        return ((IToolTipProvider)mainLabelProvider).getToolTipText(element);\n      }\n      return null;\n    }\n  }\n);\n  columnController.addColumn(\"DataSource\",\"Datasource(s) associated with resource\",SWT.LEFT,true,false,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNDatabaseNode) {\n        return ((DBNDatabaseNode)element).getDataSourceContainer().getName();\n      }\n else       if (element instanceof DBNResource) {\n        Collection<DBPDataSourceContainer> containers=((DBNResource)element).getAssociatedDataSources();\n        if (!CommonUtils.isEmpty(containers)) {\n          StringBuilder text=new StringBuilder();\n          for (          DBPDataSourceContainer container : containers) {\n            if (text.length() > 0) {\n              text.append(\", \");\n            }\n            text.append(container.getName());\n          }\n          return text.toString();\n        }\n      }\n      return \"\";\n    }\n    @Override public Image getImage(    Object element){\n      return null;\n    }\n    @Override public String getToolTipText(    Object element){\n      if (element instanceof DBNResource) {\n        Collection<DBPDataSourceContainer> containers=((DBNResource)element).getAssociatedDataSources();\n        if (!CommonUtils.isEmpty(containers)) {\n          StringBuilder text=new StringBuilder();\n          for (          DBPDataSourceContainer container : containers) {\n            String description=container.getDescription();\n            if (CommonUtils.isEmpty(description)) {\n              description=container.getName();\n            }\n            if (!CommonUtils.isEmpty(description)) {\n              if (text.length() > 0) {\n                text.append(\", \");\n              }\n              text.append(description);\n            }\n          }\n          return text.toString();\n        }\n      }\n      return null;\n    }\n  }\n);\n  columnController.addColumn(\"Preview\",\"Script content preview\",SWT.LEFT,false,false,new LazyLabelProvider(shadowColor){\n    @Override public String getLazyText(    Object element){\n      if (element instanceof DBNNode) {\n        return ((DBNNode)element).getNodeDescription();\n      }\n else {\n        return null;\n      }\n    }\n  }\n);\n  columnController.addColumn(\"Size\",\"File size\",SWT.LEFT,false,false,true,null,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        if (resource instanceof IFile) {\n          return String.valueOf(resource.getLocation().toFile().length());\n        }\n      }\n      return \"\";\n    }\n  }\n,null);\n  columnController.addColumn(\"Modified\",\"Time the file was last modified\",SWT.LEFT,false,false,new ColumnLabelProvider(){\n    private SimpleDateFormat sdf=new SimpleDateFormat(DBConstants.DEFAULT_TIMESTAMP_FORMAT);\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        if (resource instanceof IFile || resource instanceof IFolder) {\n          long lastModified=resource.getLocation().toFile().lastModified();\n          if (lastModified <= 0) {\n            return \"\";\n          }\n          return sdf.format(new Date(lastModified));\n        }\n      }\n      return \"\";\n    }\n  }\n);\n  columnController.addColumn(\"Type\",\"Resource type\",SWT.LEFT,false,false,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        ProgramInfo program=ProgramInfo.getProgram(resource);\n        if (program != null) {\n          return program.getProgram().getName();\n        }\n      }\n      return \"\";\n    }\n  }\n);\n  UIUtils.asyncExec(() -> columnController.createColumns(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 654,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6886,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void createColumns(final TreeViewer viewer){\n  final Color shadowColor=viewer.getControl().getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);\n  final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider();\n  columnController=new ViewerColumnController(\"projectExplorer\",viewer);\n  columnController.setForceAutoSize(true);\n  columnController.addColumn(\"Name\",\"Resource name\",SWT.LEFT,true,true,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      return mainLabelProvider.getText(element);\n    }\n    @Override public Image getImage(    Object element){\n      Image image=mainLabelProvider.getImage(element);\n      if (element instanceof DBNResource) {\n        image=labelDecorator.decorateImage(image,element);\n      }\n      return image;\n    }\n    @Override public String getToolTipText(    Object element){\n      if (mainLabelProvider instanceof IToolTipProvider) {\n        return ((IToolTipProvider)mainLabelProvider).getToolTipText(element);\n      }\n      return null;\n    }\n  }\n);\n  columnController.addColumn(\"DataSource\",\"Datasource(s) associated with resource\",SWT.LEFT,true,false,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNDatabaseNode) {\n        return ((DBNDatabaseNode)element).getDataSourceContainer().getName();\n      }\n else       if (element instanceof DBNResource) {\n        Collection<DBPDataSourceContainer> containers=((DBNResource)element).getAssociatedDataSources();\n        if (!CommonUtils.isEmpty(containers)) {\n          StringBuilder text=new StringBuilder();\n          for (          DBPDataSourceContainer container : containers) {\n            if (text.length() > 0) {\n              text.append(\", \");\n            }\n            text.append(container.getName());\n          }\n          return text.toString();\n        }\n      }\n      return \"\";\n    }\n    @Override public Image getImage(    Object element){\n      return null;\n    }\n    @Override public String getToolTipText(    Object element){\n      if (element instanceof DBNResource) {\n        Collection<DBPDataSourceContainer> containers=((DBNResource)element).getAssociatedDataSources();\n        if (!CommonUtils.isEmpty(containers)) {\n          StringBuilder text=new StringBuilder();\n          for (          DBPDataSourceContainer container : containers) {\n            String description=container.getDescription();\n            if (CommonUtils.isEmpty(description)) {\n              description=container.getName();\n            }\n            if (!CommonUtils.isEmpty(description)) {\n              if (text.length() > 0) {\n                text.append(\", \");\n              }\n              text.append(description);\n            }\n          }\n          return text.toString();\n        }\n      }\n      return null;\n    }\n  }\n);\n  columnController.addColumn(\"Preview\",\"Script content preview\",SWT.LEFT,false,false,new LazyLabelProvider(shadowColor){\n    @Override public String getLazyText(    Object element){\n      if (element instanceof DBNNode) {\n        return ((DBNNode)element).getNodeDescription();\n      }\n else {\n        return null;\n      }\n    }\n  }\n);\n  columnController.addColumn(\"Size\",\"File size\",SWT.LEFT,false,false,true,null,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        if (resource instanceof IFile) {\n          return String.valueOf(resource.getLocation().toFile().length());\n        }\n      }\n      return \"\";\n    }\n  }\n,null);\n  columnController.addColumn(\"Modified\",\"Time the file was last modified\",SWT.LEFT,false,false,new ColumnLabelProvider(){\n    private SimpleDateFormat sdf=new SimpleDateFormat(DBConstants.DEFAULT_TIMESTAMP_FORMAT);\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        if (resource instanceof IFile || resource instanceof IFolder) {\n          long lastModified=resource.getLocation().toFile().lastModified();\n          if (lastModified <= 0) {\n            return \"\";\n          }\n          return sdf.format(new Date(lastModified));\n        }\n      }\n      return \"\";\n    }\n  }\n);\n  columnController.addColumn(\"Type\",\"Resource type\",SWT.LEFT,false,false,new ColumnLabelProvider(){\n    @Override public String getText(    Object element){\n      if (element instanceof DBNResource) {\n        IResource resource=((DBNResource)element).getResource();\n        ProgramInfo program=ProgramInfo.getProgram(resource);\n        if (program != null) {\n          return program.getProgram().getName();\n        }\n      }\n      return \"\";\n    }\n  }\n);\n  UIUtils.asyncExec(() -> columnController.createColumns(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 663,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 92
      },
      "nodeContext" : "final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.jkiss.dbeaver.ui.navigator.project.ILabelProvider"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 97,
    "startColumnNumber" : 49,
    "endLineNumber" : 97,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}