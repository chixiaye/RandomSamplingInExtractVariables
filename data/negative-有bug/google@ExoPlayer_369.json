{
  "id" : 369,
  "expression" : "mediaPlaylist.discontinuitySequence",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mediaPlaylist.discontinuitySequence",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 99,
      "startColumnNumber" : 15,
      "endLineNumber" : 99,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 99,
        "startColumnNumber" : 15,
        "endLineNumber" : 99,
        "endColumnNumber" : 90
      },
      "nodeContext" : "mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence).isEqualTo(4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 22
      },
      "nodeContext" : "assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence).isEqualTo(4);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5586,
        "startLineNumber" : 45,
        "startColumnNumber" : 52,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Uri playlistUri=Uri.parse(\"https://example.com/test.m3u8\");\n  String playlistString=\"#EXTM3U\\n\" + \"#EXT-X-VERSION:3\\n\" + \"#EXT-X-PLAYLIST-TYPE:VOD\\n\"+ \"#EXT-X-START:TIME-OFFSET=-25\\n\"+ \"#EXT-X-TARGETDURATION:8\\n\"+ \"#EXT-X-MEDIA-SEQUENCE:2679\\n\"+ \"#EXT-X-DISCONTINUITY-SEQUENCE:4\\n\"+ \"#EXT-X-ALLOW-CACHE:YES\\n\"+ \"\\n\"+ \"#EXTINF:7.975,\\n\"+ \"#EXT-X-BYTERANGE:51370@0\\n\"+ \"https://priv.example.com/fileSequence2679.ts\\n\"+ \"\\n\"+ \"#EXT-X-KEY:METHOD=AES-128,\"+ \"URI=\\\"https://priv.example.com/key.php?r=2680\\\",IV=0x1566B\\n\"+ \"#EXTINF:7.975,segment title\\n\"+ \"#EXT-X-BYTERANGE:51501@2147483648\\n\"+ \"https://priv.example.com/fileSequence2680.ts\\n\"+ \"\\n\"+ \"#EXT-X-KEY:METHOD=NONE\\n\"+ \"#EXTINF:7.941,segment title .,:/# with interesting chars\\n\"+ \"#EXT-X-BYTERANGE:51501\\n\"+ \"https://priv.example.com/fileSequence2681.ts\\n\"+ \"\\n\"+ \"#EXT-X-DISCONTINUITY\\n\"+ \"#EXT-X-KEY:METHOD=AES-128,URI=\\\"https://priv.example.com/key.php?r=2682\\\"\\n\"+ \"#EXTINF:7.975\\n\"+ \"#EXT-X-BYTERANGE:51740\\n\"+ \"https://priv.example.com/fileSequence2682.ts\\n\"+ \"\\n\"+ \"#EXTINF:7.975,\\n\"+ \"https://priv.example.com/fileSequence2683.ts\\n\"+ \"#EXT-X-ENDLIST\";\n  InputStream inputStream=new ByteArrayInputStream(Util.getUtf8Bytes(playlistString));\n  HlsPlaylist playlist=new HlsPlaylistParser().parse(playlistUri,inputStream);\n  HlsMediaPlaylist mediaPlaylist=(HlsMediaPlaylist)playlist;\n  assertThat(mediaPlaylist.playlistType).isEqualTo(HlsMediaPlaylist.PLAYLIST_TYPE_VOD);\n  assertThat(mediaPlaylist.startOffsetUs).isEqualTo(mediaPlaylist.durationUs - 25000000);\n  assertThat(mediaPlaylist.mediaSequence).isEqualTo(2679);\n  assertThat(mediaPlaylist.version).isEqualTo(3);\n  assertThat(mediaPlaylist.hasEndTag).isTrue();\n  assertThat(mediaPlaylist.protectionSchemes).isNull();\n  assertThat(mediaPlaylist.targetDurationUs).isEqualTo(8000000);\n  assertThat(mediaPlaylist.partTargetDurationUs).isEqualTo(C.TIME_UNSET);\n  List<Segment> segments=mediaPlaylist.segments;\n  assertThat(segments).isNotNull();\n  assertThat(segments).hasSize(5);\n  Segment segment=segments.get(0);\n  assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence).isEqualTo(4);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isNull();\n  assertThat(segment.encryptionIV).isNull();\n  assertThat(segment.byteRangeLength).isEqualTo(51370);\n  assertThat(segment.byteRangeOffset).isEqualTo(0);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2679.ts\");\n  segment=segments.get(1);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(0);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"segment title\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2680\");\n  assertThat(segment.encryptionIV).isEqualTo(\"0x1566B\");\n  assertThat(segment.byteRangeLength).isEqualTo(51501);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147483648L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2680.ts\");\n  segment=segments.get(2);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(0);\n  assertThat(segment.durationUs).isEqualTo(7941000);\n  assertThat(segment.title).isEqualTo(\"segment title .,:/# with interesting chars\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isNull();\n  assertThat(segment.encryptionIV).isEqualTo(null);\n  assertThat(segment.byteRangeLength).isEqualTo(51501);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147535149L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2681.ts\");\n  segment=segments.get(3);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(1);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2682\");\n  assertThat(segment.encryptionIV).isNotNull();\n  assertThat(segment.encryptionIV).ignoringCase().isEqualTo(\"A7A\");\n  assertThat(segment.byteRangeLength).isEqualTo(51740);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147586650L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2682.ts\");\n  segment=segments.get(4);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(1);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2682\");\n  assertThat(segment.encryptionIV).isNotNull();\n  assertThat(segment.encryptionIV).ignoringCase().isEqualTo(\"A7B\");\n  assertThat(segment.byteRangeLength).isEqualTo(C.LENGTH_UNSET);\n  assertThat(segment.byteRangeOffset).isEqualTo(0);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2683.ts\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 604,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5644,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void parseMediaPlaylist() throws Exception {\n  Uri playlistUri=Uri.parse(\"https://example.com/test.m3u8\");\n  String playlistString=\"#EXTM3U\\n\" + \"#EXT-X-VERSION:3\\n\" + \"#EXT-X-PLAYLIST-TYPE:VOD\\n\"+ \"#EXT-X-START:TIME-OFFSET=-25\\n\"+ \"#EXT-X-TARGETDURATION:8\\n\"+ \"#EXT-X-MEDIA-SEQUENCE:2679\\n\"+ \"#EXT-X-DISCONTINUITY-SEQUENCE:4\\n\"+ \"#EXT-X-ALLOW-CACHE:YES\\n\"+ \"\\n\"+ \"#EXTINF:7.975,\\n\"+ \"#EXT-X-BYTERANGE:51370@0\\n\"+ \"https://priv.example.com/fileSequence2679.ts\\n\"+ \"\\n\"+ \"#EXT-X-KEY:METHOD=AES-128,\"+ \"URI=\\\"https://priv.example.com/key.php?r=2680\\\",IV=0x1566B\\n\"+ \"#EXTINF:7.975,segment title\\n\"+ \"#EXT-X-BYTERANGE:51501@2147483648\\n\"+ \"https://priv.example.com/fileSequence2680.ts\\n\"+ \"\\n\"+ \"#EXT-X-KEY:METHOD=NONE\\n\"+ \"#EXTINF:7.941,segment title .,:/# with interesting chars\\n\"+ \"#EXT-X-BYTERANGE:51501\\n\"+ \"https://priv.example.com/fileSequence2681.ts\\n\"+ \"\\n\"+ \"#EXT-X-DISCONTINUITY\\n\"+ \"#EXT-X-KEY:METHOD=AES-128,URI=\\\"https://priv.example.com/key.php?r=2682\\\"\\n\"+ \"#EXTINF:7.975\\n\"+ \"#EXT-X-BYTERANGE:51740\\n\"+ \"https://priv.example.com/fileSequence2682.ts\\n\"+ \"\\n\"+ \"#EXTINF:7.975,\\n\"+ \"https://priv.example.com/fileSequence2683.ts\\n\"+ \"#EXT-X-ENDLIST\";\n  InputStream inputStream=new ByteArrayInputStream(Util.getUtf8Bytes(playlistString));\n  HlsPlaylist playlist=new HlsPlaylistParser().parse(playlistUri,inputStream);\n  HlsMediaPlaylist mediaPlaylist=(HlsMediaPlaylist)playlist;\n  assertThat(mediaPlaylist.playlistType).isEqualTo(HlsMediaPlaylist.PLAYLIST_TYPE_VOD);\n  assertThat(mediaPlaylist.startOffsetUs).isEqualTo(mediaPlaylist.durationUs - 25000000);\n  assertThat(mediaPlaylist.mediaSequence).isEqualTo(2679);\n  assertThat(mediaPlaylist.version).isEqualTo(3);\n  assertThat(mediaPlaylist.hasEndTag).isTrue();\n  assertThat(mediaPlaylist.protectionSchemes).isNull();\n  assertThat(mediaPlaylist.targetDurationUs).isEqualTo(8000000);\n  assertThat(mediaPlaylist.partTargetDurationUs).isEqualTo(C.TIME_UNSET);\n  List<Segment> segments=mediaPlaylist.segments;\n  assertThat(segments).isNotNull();\n  assertThat(segments).hasSize(5);\n  Segment segment=segments.get(0);\n  assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence).isEqualTo(4);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isNull();\n  assertThat(segment.encryptionIV).isNull();\n  assertThat(segment.byteRangeLength).isEqualTo(51370);\n  assertThat(segment.byteRangeOffset).isEqualTo(0);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2679.ts\");\n  segment=segments.get(1);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(0);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"segment title\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2680\");\n  assertThat(segment.encryptionIV).isEqualTo(\"0x1566B\");\n  assertThat(segment.byteRangeLength).isEqualTo(51501);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147483648L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2680.ts\");\n  segment=segments.get(2);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(0);\n  assertThat(segment.durationUs).isEqualTo(7941000);\n  assertThat(segment.title).isEqualTo(\"segment title .,:/# with interesting chars\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isNull();\n  assertThat(segment.encryptionIV).isEqualTo(null);\n  assertThat(segment.byteRangeLength).isEqualTo(51501);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147535149L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2681.ts\");\n  segment=segments.get(3);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(1);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2682\");\n  assertThat(segment.encryptionIV).isNotNull();\n  assertThat(segment.encryptionIV).ignoringCase().isEqualTo(\"A7A\");\n  assertThat(segment.byteRangeLength).isEqualTo(51740);\n  assertThat(segment.byteRangeOffset).isEqualTo(2147586650L);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2682.ts\");\n  segment=segments.get(4);\n  assertThat(segment.relativeDiscontinuitySequence).isEqualTo(1);\n  assertThat(segment.durationUs).isEqualTo(7975000);\n  assertThat(segment.title).isEqualTo(\"\");\n  assertThat(segment.fullSegmentEncryptionKeyUri).isEqualTo(\"https://priv.example.com/key.php?r=2682\");\n  assertThat(segment.encryptionIV).isNotNull();\n  assertThat(segment.encryptionIV).ignoringCase().isEqualTo(\"A7B\");\n  assertThat(segment.byteRangeLength).isEqualTo(C.LENGTH_UNSET);\n  assertThat(segment.byteRangeOffset).isEqualTo(0);\n  assertThat(segment.url).isEqualTo(\"https://priv.example.com/fileSequence2683.ts\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 612,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertThat(mediaPlaylist.discontinuitySequence + segment.relativeDiscontinuitySequence)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 99,
    "startColumnNumber" : 15,
    "endLineNumber" : 99,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}