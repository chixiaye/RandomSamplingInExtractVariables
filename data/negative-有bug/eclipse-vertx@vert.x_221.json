{
  "id" : 221,
  "expression" : "reply.body()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/ClusteredEventBusTestBase.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reply.body()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 112,
      "startColumnNumber" : 33,
      "endLineNumber" : 112,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 112,
        "startColumnNumber" : 10,
        "endLineNumber" : 112,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(received,reply.body())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 112,
        "startColumnNumber" : 10,
        "endLineNumber" : 112,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(received,reply.body());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 111,
        "startColumnNumber" : 30,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(received,reply.body());\n  if (options != null && options.getHeaders() != null) {\n    assertNotNull(reply.headers());\n    assertEquals(options.getHeaders().size(),reply.headers().size());\n    for (    Map.Entry<String,String> entry : options.getHeaders().entries()) {\n      assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (consumer == null) {\n  assertEquals(received,reply.body());\n  if (options != null && options.getHeaders() != null) {\n    assertNotNull(reply.headers());\n    assertEquals(options.getHeaders().size(),reply.headers().size());\n    for (    Map.Entry<String,String> entry : options.getHeaders().entries()) {\n      assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n    }\n  }\n}\n else {\n  consumer.accept(reply.body());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 110,
        "startColumnNumber" : 81,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (consumer == null) {\n    assertEquals(received,reply.body());\n    if (options != null && options.getHeaders() != null) {\n      assertNotNull(reply.headers());\n      assertEquals(options.getHeaders().size(),reply.headers().size());\n      for (      Map.Entry<String,String> entry : options.getHeaders().entries()) {\n        assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n      }\n    }\n  }\n else {\n    consumer.accept(reply.body());\n  }\n  testComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 110,
        "startColumnNumber" : 59,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "(Message<R> reply) -> {\n  if (consumer == null) {\n    assertEquals(received,reply.body());\n    if (options != null && options.getHeaders() != null) {\n      assertNotNull(reply.headers());\n      assertEquals(options.getHeaders().size(),reply.headers().size());\n      for (      Map.Entry<String,String> entry : options.getHeaders().entries()) {\n        assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n      }\n    }\n  }\n else {\n    consumer.accept(reply.body());\n  }\n  testComplete();\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 94,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 112,
        "startColumnNumber" : 10,
        "endLineNumber" : 112,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(received,reply.body());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "R"
  }, {
    "nodeContext" : "reply.body()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 121,
      "startColumnNumber" : 26,
      "endLineNumber" : 121,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 39
      },
      "nodeContext" : "consumer.accept(reply.body())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 40
      },
      "nodeContext" : "consumer.accept(reply.body());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 120,
        "startColumnNumber" : 15,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  consumer.accept(reply.body());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (consumer == null) {\n  assertEquals(received,reply.body());\n  if (options != null && options.getHeaders() != null) {\n    assertNotNull(reply.headers());\n    assertEquals(options.getHeaders().size(),reply.headers().size());\n    for (    Map.Entry<String,String> entry : options.getHeaders().entries()) {\n      assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n    }\n  }\n}\n else {\n  consumer.accept(reply.body());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 110,
        "startColumnNumber" : 81,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (consumer == null) {\n    assertEquals(received,reply.body());\n    if (options != null && options.getHeaders() != null) {\n      assertNotNull(reply.headers());\n      assertEquals(options.getHeaders().size(),reply.headers().size());\n      for (      Map.Entry<String,String> entry : options.getHeaders().entries()) {\n        assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n      }\n    }\n  }\n else {\n    consumer.accept(reply.body());\n  }\n  testComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 584,
        "startLineNumber" : 110,
        "startColumnNumber" : 59,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "(Message<R> reply) -> {\n  if (consumer == null) {\n    assertEquals(received,reply.body());\n    if (options != null && options.getHeaders() != null) {\n      assertNotNull(reply.headers());\n      assertEquals(options.getHeaders().size(),reply.headers().size());\n      for (      Map.Entry<String,String> entry : options.getHeaders().entries()) {\n        assertEquals(reply.headers().get(entry.getKey()),entry.getValue());\n      }\n    }\n  }\n else {\n    consumer.accept(reply.body());\n  }\n  testComplete();\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 94,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 121,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 40
      },
      "nodeContext" : "consumer.accept(reply.body());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "R"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 112,
    "startColumnNumber" : 33,
    "endLineNumber" : 112,
    "endColumnNumber" : 45
  }, {
    "charLength" : 12,
    "startLineNumber" : 121,
    "startColumnNumber" : 26,
    "endLineNumber" : 121,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}