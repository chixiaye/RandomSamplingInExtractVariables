{
  "id" : 372,
  "expression" : "RollingCommandMaxConcurrencyStream.getInstance(key,properties)",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-codahale-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/codahalemetricspublisher/HystrixCodaHaleMetricsPublisherCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RollingCommandMaxConcurrencyStream.getInstance(key,properties)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 493,
      "startColumnNumber" : 8,
      "endLineNumber" : 493,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 493,
        "startColumnNumber" : 8,
        "endLineNumber" : 493,
        "endColumnNumber" : 109
      },
      "nodeContext" : "RollingCommandMaxConcurrencyStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 493,
        "startColumnNumber" : 8,
        "endLineNumber" : 493,
        "endColumnNumber" : 110
      },
      "nodeContext" : "RollingCommandMaxConcurrencyStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19463,
        "startLineNumber" : 61,
        "startColumnNumber" : 29,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  metricRegistry.register(createMetricName(\"isCircuitBreakerOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long getValue(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countBadRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countCollapsedRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countExceptionsThrown\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackMissing\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackRejection\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countSemaphoreRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countShortCircuited\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countThreadPoolRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countTimeout\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountBadRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountCollapsedRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EMIT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountExceptionsThrown\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FAILURE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackMissing\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackRejection\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountSemaphoreRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountShortCircuited\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountThreadPoolRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountTimeout\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingMaxConcurrentExecutionCount\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE;\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"executionSemaphorePermitsInUse\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getCurrentConcurrentExecutionCount();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"errorPercentage\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getHealthCounts().getErrorPercentage();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_mean\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimeMean();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_5\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(25);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(50);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(75);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(90);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(99);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(99.5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_mean\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimeMean();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_5\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(25);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(50);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(75);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(90);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(99);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(99.5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"commandGroup\"),new Gauge<String>(){\n    @Override public String getValue(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerRequestVolumeThreshold\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerErrorThresholdPercentage\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerForceOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerForceClosed\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationStrategy\"),new Gauge<String>(){\n    @Override public String getValue(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_metricsRollingPercentileEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_requestLogEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  RollingCommandEventCounterStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  CumulativeCommandEventCounterStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandLatencyDistributionStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandUserLatencyDistributionStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandMaxConcurrencyStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1761,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19961,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 494,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * An implementation note.  If there's a version mismatch between hystrix-core and hystrix-codahale-metrics-publisher, the code below may reference a HystrixRollingNumberEvent that does not exist in hystrix-core.  If this happens, a j.l.NoSuchFieldError occurs.  Since this data is not being generated by hystrix-core, it's safe to count it as 0 and we should log an error to get users to update their dependency set.\n */\n@Override public void initialize(){\n  metricRegistry.register(createMetricName(\"isCircuitBreakerOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return circuitBreaker.isOpen();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"currentTime\"),new Gauge<Long>(){\n    @Override public Long getValue(){\n      return System.currentTimeMillis();\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countBadRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countCollapsedRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countExceptionsThrown\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackMissing\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackRejection\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countFallbackSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countSemaphoreRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countShortCircuited\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SUCCESS;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countThreadPoolRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateCumulativeCountForEvent(\"countTimeout\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountBadRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.BAD_REQUEST;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountCollapsedRequests\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COLLAPSED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EMIT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountExceptionsThrown\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.EXCEPTION_THROWN;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FAILURE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackEmit\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_EMIT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackFailure\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_FAILURE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackMissing\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_MISSING;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackRejection\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_REJECTION;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountFallbackSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.FALLBACK_SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountResponsesFromCache\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.RESPONSE_FROM_CACHE;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountSemaphoreRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SEMAPHORE_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountShortCircuited\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SHORT_CIRCUITED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountSuccess\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.SUCCESS;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountThreadPoolRejected\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.THREAD_POOL_REJECTED;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingCountTimeout\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.TIMEOUT;\n    }\n  }\n);\n  safelyCreateRollingCountForEvent(\"rollingMaxConcurrentExecutionCount\",new Func0<HystrixRollingNumberEvent>(){\n    @Override public HystrixRollingNumberEvent call(){\n      return HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE;\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"executionSemaphorePermitsInUse\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getCurrentConcurrentExecutionCount();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"errorPercentage\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getHealthCounts().getErrorPercentage();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_mean\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimeMean();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_5\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(25);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(50);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(75);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(90);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(99);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyExecute_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getExecutionTimePercentile(99.5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_mean\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimeMean();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_5\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_25\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(25);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_50\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(50);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_75\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(75);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_90\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(90);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_99\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(99);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"latencyTotal_percentile_995\"),new Gauge<Integer>(){\n    @Override public Integer getValue(){\n      return metrics.getTotalTimePercentile(99.5);\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"commandGroup\"),new Gauge<String>(){\n    @Override public String getValue(){\n      return commandGroupKey != null ? commandGroupKey.name() : null;\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerRequestVolumeThreshold\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerRequestVolumeThreshold().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerSleepWindowInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerSleepWindowInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerErrorThresholdPercentage\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.circuitBreakerErrorThresholdPercentage().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerForceOpen\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceOpen().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_circuitBreakerForceClosed\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.circuitBreakerForceClosed().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionTimeoutInMilliseconds\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionTimeoutInMilliseconds().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationStrategy\"),new Gauge<String>(){\n    @Override public String getValue(){\n      return properties.executionIsolationStrategy().get().name();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_metricsRollingPercentileEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.metricsRollingPercentileEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_requestCacheEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.requestCacheEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_requestLogEnabled\"),new Gauge<Boolean>(){\n    @Override public Boolean getValue(){\n      return properties.requestLogEnabled().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.executionIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  metricRegistry.register(createMetricName(\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\"),new Gauge<Number>(){\n    @Override public Number getValue(){\n      return properties.fallbackIsolationSemaphoreMaxConcurrentRequests().get();\n    }\n  }\n);\n  RollingCommandEventCounterStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  CumulativeCommandEventCounterStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandLatencyDistributionStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandUserLatencyDistributionStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n  RollingCommandMaxConcurrencyStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1768,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 493,
        "startColumnNumber" : 8,
        "endLineNumber" : 493,
        "endColumnNumber" : 110
      },
      "nodeContext" : "RollingCommandMaxConcurrencyStream.getInstance(key,properties).startCachingStreamValuesIfUnstarted();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "com.netflix.hystrix.metric.consumer.RollingCommandMaxConcurrencyStream"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 493,
    "startColumnNumber" : 8,
    "endLineNumber" : 493,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}