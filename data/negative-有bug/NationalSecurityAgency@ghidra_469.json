{
  "id" : 469,
  "expression" : "txId",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/test.slow/java/ghidra/program/util/AddressEvaluatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "txId",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 91,
      "startColumnNumber" : 20,
      "endLineNumber" : 91,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 91,
        "startColumnNumber" : 3,
        "endLineNumber" : 91,
        "endColumnNumber" : 31
      },
      "nodeContext" : "p.endTransaction(txId,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 91,
        "startColumnNumber" : 3,
        "endLineNumber" : 91,
        "endColumnNumber" : 32
      },
      "nodeContext" : "p.endTransaction(txId,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 90,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  p.endTransaction(txId,true);\n  p.release(this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2475,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  assertEquals(addr(\"0x19\"),AddressEvaluator.evaluate(p,\"(2+3)*5\"));\n  assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+3*5\"));\n  assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+(3*5)\"));\n  assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"(2+3*5)\"));\n  assertEquals(addr(\"0x16\"),AddressEvaluator.evaluate(p,\"0x11+5\"));\n  assertEquals(addr(\"0x02\"),AddressEvaluator.evaluate(p,\"2-1+1\"));\n  assertEquals(addr(\"0x5\"),AddressEvaluator.evaluate(p,\"5\"));\n  assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"0-5+8\"));\n  assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"-5+8\"));\n  assertEquals(addr(\"0xfffffffB\"),AddressEvaluator.evaluate(p,\"-5\"));\n  assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"3+(5+(3*2)+(3))\"));\n  assertEquals(addr(\"0xff00\"),AddressEvaluator.evaluate(p,\"0xffff ^ 0xff\"));\n  assertEquals(addr(\"0x123f\"),AddressEvaluator.evaluate(p,\"0xffff & 0x123f\"));\n  assertEquals(addr(\"0x1234\"),AddressEvaluator.evaluate(p,\"0x1200 | 0x0034\"));\n  assertEquals(addr(\"0xffffffff\"),AddressEvaluator.evaluate(p,\"~ 0x0\"));\n  assertEquals(addr(\"0x1201\"),AddressEvaluator.evaluate(p,\"0x1200 | ~(0xfffffffe)\"));\n  assertEquals(addr(\"0x480\"),AddressEvaluator.evaluate(p,\"0x1200 >> 2\"));\n  assertEquals(addr(\"0x1200\"),AddressEvaluator.evaluate(p,\"0x480 << 2\"));\n  assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x2)\"));\n  assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n  assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n  assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) >= 0x1)\"));\n  assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) <= 0x1)\"));\n  Symbol s=p.getSymbolTable().createLabel(addr(\"0x100\"),\"entry\",SourceType.IMPORTED);\n  Address a=s.getAddress();\n  a=a.add(10);\n  assertEquals(a,AddressEvaluator.evaluate(p,\"entry+5*2\"));\n  assertEquals(addr(\"0x101\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100)\"));\n  assertEquals(addr(\"0x500\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100) * 0x400 + (entry < 0x100) * 0x500\"));\n  assertEquals(addr(\"0x600\"),AddressEvaluator.evaluate(p,\"entry + (entry > 0x100) * 0x400 + (entry <= 0x100) * 0x500\"));\n}\n  finally {\n  p.endTransaction(txId,true);\n  p.release(this);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 341,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 49,
        "startColumnNumber" : 41,
        "endLineNumber" : 94,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Program p=createDefaultProgram(\"Test\",ProgramBuilder._TOY_LE,this);\n  addrFactory=p.getAddressFactory();\n  int txId=p.startTransaction(\"Test\");\n  try {\n    assertEquals(addr(\"0x19\"),AddressEvaluator.evaluate(p,\"(2+3)*5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+3*5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+(3*5)\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"(2+3*5)\"));\n    assertEquals(addr(\"0x16\"),AddressEvaluator.evaluate(p,\"0x11+5\"));\n    assertEquals(addr(\"0x02\"),AddressEvaluator.evaluate(p,\"2-1+1\"));\n    assertEquals(addr(\"0x5\"),AddressEvaluator.evaluate(p,\"5\"));\n    assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"0-5+8\"));\n    assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"-5+8\"));\n    assertEquals(addr(\"0xfffffffB\"),AddressEvaluator.evaluate(p,\"-5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"3+(5+(3*2)+(3))\"));\n    assertEquals(addr(\"0xff00\"),AddressEvaluator.evaluate(p,\"0xffff ^ 0xff\"));\n    assertEquals(addr(\"0x123f\"),AddressEvaluator.evaluate(p,\"0xffff & 0x123f\"));\n    assertEquals(addr(\"0x1234\"),AddressEvaluator.evaluate(p,\"0x1200 | 0x0034\"));\n    assertEquals(addr(\"0xffffffff\"),AddressEvaluator.evaluate(p,\"~ 0x0\"));\n    assertEquals(addr(\"0x1201\"),AddressEvaluator.evaluate(p,\"0x1200 | ~(0xfffffffe)\"));\n    assertEquals(addr(\"0x480\"),AddressEvaluator.evaluate(p,\"0x1200 >> 2\"));\n    assertEquals(addr(\"0x1200\"),AddressEvaluator.evaluate(p,\"0x480 << 2\"));\n    assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x2)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n    assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) >= 0x1)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) <= 0x1)\"));\n    Symbol s=p.getSymbolTable().createLabel(addr(\"0x100\"),\"entry\",SourceType.IMPORTED);\n    Address a=s.getAddress();\n    a=a.add(10);\n    assertEquals(a,AddressEvaluator.evaluate(p,\"entry+5*2\"));\n    assertEquals(addr(\"0x101\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100)\"));\n    assertEquals(addr(\"0x500\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100) * 0x400 + (entry < 0x100) * 0x500\"));\n    assertEquals(addr(\"0x600\"),AddressEvaluator.evaluate(p,\"entry + (entry > 0x100) * 0x400 + (entry <= 0x100) * 0x500\"));\n  }\n  finally {\n    p.endTransaction(txId,true);\n    p.release(this);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2689,
        "startLineNumber" : 48,
        "startColumnNumber" : 1,
        "endLineNumber" : 94,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEval() throws Exception {\n  Program p=createDefaultProgram(\"Test\",ProgramBuilder._TOY_LE,this);\n  addrFactory=p.getAddressFactory();\n  int txId=p.startTransaction(\"Test\");\n  try {\n    assertEquals(addr(\"0x19\"),AddressEvaluator.evaluate(p,\"(2+3)*5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+3*5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"2+(3*5)\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"(2+3*5)\"));\n    assertEquals(addr(\"0x16\"),AddressEvaluator.evaluate(p,\"0x11+5\"));\n    assertEquals(addr(\"0x02\"),AddressEvaluator.evaluate(p,\"2-1+1\"));\n    assertEquals(addr(\"0x5\"),AddressEvaluator.evaluate(p,\"5\"));\n    assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"0-5+8\"));\n    assertEquals(addr(\"0x3\"),AddressEvaluator.evaluate(p,\"-5+8\"));\n    assertEquals(addr(\"0xfffffffB\"),AddressEvaluator.evaluate(p,\"-5\"));\n    assertEquals(addr(\"0x11\"),AddressEvaluator.evaluate(p,\"3+(5+(3*2)+(3))\"));\n    assertEquals(addr(\"0xff00\"),AddressEvaluator.evaluate(p,\"0xffff ^ 0xff\"));\n    assertEquals(addr(\"0x123f\"),AddressEvaluator.evaluate(p,\"0xffff & 0x123f\"));\n    assertEquals(addr(\"0x1234\"),AddressEvaluator.evaluate(p,\"0x1200 | 0x0034\"));\n    assertEquals(addr(\"0xffffffff\"),AddressEvaluator.evaluate(p,\"~ 0x0\"));\n    assertEquals(addr(\"0x1201\"),AddressEvaluator.evaluate(p,\"0x1200 | ~(0xfffffffe)\"));\n    assertEquals(addr(\"0x480\"),AddressEvaluator.evaluate(p,\"0x1200 >> 2\"));\n    assertEquals(addr(\"0x1200\"),AddressEvaluator.evaluate(p,\"0x480 << 2\"));\n    assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x2)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) == 0x1)\"));\n    assertEquals(addr(\"0x1\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) >= 0x1)\"));\n    assertEquals(addr(\"0x0\"),AddressEvaluator.evaluate(p,\"(((0x1 | 0x2) & 0x2) <= 0x1)\"));\n    Symbol s=p.getSymbolTable().createLabel(addr(\"0x100\"),\"entry\",SourceType.IMPORTED);\n    Address a=s.getAddress();\n    a=a.add(10);\n    assertEquals(a,AddressEvaluator.evaluate(p,\"entry+5*2\"));\n    assertEquals(addr(\"0x101\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100)\"));\n    assertEquals(addr(\"0x500\"),AddressEvaluator.evaluate(p,\"entry + (entry == 0x100) * 0x400 + (entry < 0x100) * 0x500\"));\n    assertEquals(addr(\"0x600\"),AddressEvaluator.evaluate(p,\"entry + (entry > 0x100) * 0x400 + (entry <= 0x100) * 0x500\"));\n  }\n  finally {\n    p.endTransaction(txId,true);\n    p.release(this);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 91,
        "startColumnNumber" : 3,
        "endLineNumber" : 91,
        "endColumnNumber" : 32
      },
      "nodeContext" : "p.endTransaction(txId,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 91,
    "startColumnNumber" : 20,
    "endLineNumber" : 91,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}