{
  "id" : 212,
  "expression" : "COMMA",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/client/result/EmailAddressResultParser.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "COMMA",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 51,
      "startColumnNumber" : 14,
      "endLineNumber" : 51,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 51,
        "startColumnNumber" : 14,
        "endLineNumber" : 51,
        "endColumnNumber" : 36
      },
      "nodeContext" : "COMMA.split(hostEmail)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 36
      },
      "nodeContext" : "tos=COMMA.split(hostEmail)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 37
      },
      "nodeContext" : "tos=COMMA.split(hostEmail);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 50,
        "startColumnNumber" : 32,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  tos=COMMA.split(hostEmail);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!hostEmail.isEmpty()) {\n  tos=COMMA.split(hostEmail);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 37,
        "startColumnNumber" : 72,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1620,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n else {\n  if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n    return null;\n  }\n  return new EmailAddressParsedResult(rawText);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 35,
        "startColumnNumber" : 55,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 34,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public EmailAddressParsedResult parse(Result result){\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 37
      },
      "nodeContext" : "tos=COMMA.split(hostEmail);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Pattern"
  }, {
    "nodeContext" : "COMMA",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 62,
      "startColumnNumber" : 18,
      "endLineNumber" : 62,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 62,
        "startColumnNumber" : 18,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "COMMA.split(tosString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "tos=COMMA.split(tosString)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "tos=COMMA.split(tosString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 61,
        "startColumnNumber" : 33,
        "endLineNumber" : 63,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  tos=COMMA.split(tosString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 61,
        "startColumnNumber" : 10,
        "endLineNumber" : 63,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (tosString != null) {\n  tos=COMMA.split(tosString);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String tosString=nameValues.get(\"to\");\n  if (tosString != null) {\n    tos=COMMA.split(tosString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (tos == null) {\n  String tosString=nameValues.get(\"to\");\n  if (tosString != null) {\n    tos=COMMA.split(tosString);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 58,
        "startColumnNumber" : 30,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (nameValues != null) {\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 37,
        "startColumnNumber" : 72,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1620,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n else {\n  if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n    return null;\n  }\n  return new EmailAddressParsedResult(rawText);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 35,
        "startColumnNumber" : 55,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 34,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public EmailAddressParsedResult parse(Result result){\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "tos=COMMA.split(tosString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Pattern"
  }, {
    "nodeContext" : "COMMA",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 67,
      "startColumnNumber" : 16,
      "endLineNumber" : 67,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 37
      },
      "nodeContext" : "COMMA.split(ccString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ccs=COMMA.split(ccString)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ccs=COMMA.split(ccString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 66,
        "startColumnNumber" : 30,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ccs=COMMA.split(ccString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ccString != null) {\n  ccs=COMMA.split(ccString);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 58,
        "startColumnNumber" : 30,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (nameValues != null) {\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 37,
        "startColumnNumber" : 72,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1620,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n else {\n  if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n    return null;\n  }\n  return new EmailAddressParsedResult(rawText);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 35,
        "startColumnNumber" : 55,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 34,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public EmailAddressParsedResult parse(Result result){\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 67,
        "startColumnNumber" : 10,
        "endLineNumber" : 67,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ccs=COMMA.split(ccString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Pattern"
  }, {
    "nodeContext" : "COMMA",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 71,
      "startColumnNumber" : 17,
      "endLineNumber" : 71,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 71,
        "startColumnNumber" : 17,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "COMMA.split(bccString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "bccs=COMMA.split(bccString)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 40
      },
      "nodeContext" : "bccs=COMMA.split(bccString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 70,
        "startColumnNumber" : 31,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  bccs=COMMA.split(bccString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bccString != null) {\n  bccs=COMMA.split(bccString);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 58,
        "startColumnNumber" : 30,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (nameValues != null) {\n  if (tos == null) {\n    String tosString=nameValues.get(\"to\");\n    if (tosString != null) {\n      tos=COMMA.split(tosString);\n    }\n  }\n  String ccString=nameValues.get(\"cc\");\n  if (ccString != null) {\n    ccs=COMMA.split(ccString);\n  }\n  String bccString=nameValues.get(\"bcc\");\n  if (bccString != null) {\n    bccs=COMMA.split(bccString);\n  }\n  subject=nameValues.get(\"subject\");\n  body=nameValues.get(\"body\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 37,
        "startColumnNumber" : 72,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1620,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n  String hostEmail=rawText.substring(7);\n  int queryStart=hostEmail.indexOf('?');\n  if (queryStart >= 0) {\n    hostEmail=hostEmail.substring(0,queryStart);\n  }\n  try {\n    hostEmail=urlDecode(hostEmail);\n  }\n catch (  IllegalArgumentException iae) {\n    return null;\n  }\n  String[] tos=null;\n  if (!hostEmail.isEmpty()) {\n    tos=COMMA.split(hostEmail);\n  }\n  Map<String,String> nameValues=parseNameValuePairs(rawText);\n  String[] ccs=null;\n  String[] bccs=null;\n  String subject=null;\n  String body=null;\n  if (nameValues != null) {\n    if (tos == null) {\n      String tosString=nameValues.get(\"to\");\n      if (tosString != null) {\n        tos=COMMA.split(tosString);\n      }\n    }\n    String ccString=nameValues.get(\"cc\");\n    if (ccString != null) {\n      ccs=COMMA.split(ccString);\n    }\n    String bccString=nameValues.get(\"bcc\");\n    if (bccString != null) {\n      bccs=COMMA.split(bccString);\n    }\n    subject=nameValues.get(\"subject\");\n    body=nameValues.get(\"body\");\n  }\n  return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n}\n else {\n  if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n    return null;\n  }\n  return new EmailAddressParsedResult(rawText);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 230,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1679,
        "startLineNumber" : 35,
        "startColumnNumber" : 55,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 34,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public EmailAddressParsedResult parse(Result result){\n  String rawText=getMassagedText(result);\n  if (rawText.startsWith(\"mailto:\") || rawText.startsWith(\"MAILTO:\")) {\n    String hostEmail=rawText.substring(7);\n    int queryStart=hostEmail.indexOf('?');\n    if (queryStart >= 0) {\n      hostEmail=hostEmail.substring(0,queryStart);\n    }\n    try {\n      hostEmail=urlDecode(hostEmail);\n    }\n catch (    IllegalArgumentException iae) {\n      return null;\n    }\n    String[] tos=null;\n    if (!hostEmail.isEmpty()) {\n      tos=COMMA.split(hostEmail);\n    }\n    Map<String,String> nameValues=parseNameValuePairs(rawText);\n    String[] ccs=null;\n    String[] bccs=null;\n    String subject=null;\n    String body=null;\n    if (nameValues != null) {\n      if (tos == null) {\n        String tosString=nameValues.get(\"to\");\n        if (tosString != null) {\n          tos=COMMA.split(tosString);\n        }\n      }\n      String ccString=nameValues.get(\"cc\");\n      if (ccString != null) {\n        ccs=COMMA.split(ccString);\n      }\n      String bccString=nameValues.get(\"bcc\");\n      if (bccString != null) {\n        bccs=COMMA.split(bccString);\n      }\n      subject=nameValues.get(\"subject\");\n      body=nameValues.get(\"body\");\n    }\n    return new EmailAddressParsedResult(tos,ccs,bccs,subject,body);\n  }\n else {\n    if (!EmailDoCoMoResultParser.isBasicallyValidEmailAddress(rawText)) {\n      return null;\n    }\n    return new EmailAddressParsedResult(rawText);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 250,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 40
      },
      "nodeContext" : "bccs=COMMA.split(bccString);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.regex.Pattern"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 51,
    "startColumnNumber" : 14,
    "endLineNumber" : 51,
    "endColumnNumber" : 19
  }, {
    "charLength" : 5,
    "startLineNumber" : 62,
    "startColumnNumber" : 18,
    "endLineNumber" : 62,
    "endColumnNumber" : 23
  }, {
    "charLength" : 5,
    "startLineNumber" : 67,
    "startColumnNumber" : 16,
    "endLineNumber" : 67,
    "endColumnNumber" : 21
  }, {
    "charLength" : 5,
    "startLineNumber" : 71,
    "startColumnNumber" : 17,
    "endLineNumber" : 71,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}