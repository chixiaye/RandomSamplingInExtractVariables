{
  "id" : 90,
  "expression" : "tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\")",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/dialect/oracle/OracleTableSourceITCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 231,
      "startColumnNumber" : 16,
      "endLineNumber" : 231,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 231,
        "startColumnNumber" : 16,
        "endLineNumber" : 231,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 230,
        "startColumnNumber" : 22,
        "endLineNumber" : 231,
        "endColumnNumber" : 86
      },
      "nodeContext" : "collected=tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 230,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Iterator<Row> collected=tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 205,
        "startColumnNumber" : 45,
        "endLineNumber" : 247,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  tEnv.executeSql(\"CREATE TABLE \" + INPUT_TABLE + \"(\\n\"+ \"id BIGINT,\\n\"+ \"timestamp6_col TIMESTAMP(6),\\n\"+ \"timestamp9_col TIMESTAMP(9),\\n\"+ \"binary_float_col FLOAT,\\n\"+ \"binary_double_col DOUBLE,\\n\"+ \"decimal_col DECIMAL(10, 4)\\n\"+ \") WITH (\\n\"+ \"  'connector'='jdbc',\\n\"+ \"  'url'='\"+ containerUrl+ \"',\\n\"+ \"  'table-name'='\"+ INPUT_TABLE+ \"',\\n\"+ \"  'scan.partition.column'='id',\\n\"+ \"  'scan.partition.num'='2',\\n\"+ \"  'scan.partition.lower-bound'='1',\\n\"+ \"  'scan.partition.upper-bound'='2'\\n\"+ \")\");\n  Iterator<Row> collected=tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect();\n  List<String> result=CollectionUtil.iteratorToList(collected).stream().map(Row::toString).sorted().collect(Collectors.toList());\n  Set<String> expected=new HashSet<>();\n  expected.add(\"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 1.175E-10, 1.79769E40, 100.1234]\");\n  expected.add(\"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, -1.175E-10, -1.79769E40, 101.1234]\");\n  assertEquals(1,result.size());\n  assertTrue(\"The actual output is not a subset of the expected set.\",expected.containsAll(result));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1975,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 247,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testLimit() throws Exception {\n  tEnv.executeSql(\"CREATE TABLE \" + INPUT_TABLE + \"(\\n\"+ \"id BIGINT,\\n\"+ \"timestamp6_col TIMESTAMP(6),\\n\"+ \"timestamp9_col TIMESTAMP(9),\\n\"+ \"binary_float_col FLOAT,\\n\"+ \"binary_double_col DOUBLE,\\n\"+ \"decimal_col DECIMAL(10, 4)\\n\"+ \") WITH (\\n\"+ \"  'connector'='jdbc',\\n\"+ \"  'url'='\"+ containerUrl+ \"',\\n\"+ \"  'table-name'='\"+ INPUT_TABLE+ \"',\\n\"+ \"  'scan.partition.column'='id',\\n\"+ \"  'scan.partition.num'='2',\\n\"+ \"  'scan.partition.lower-bound'='1',\\n\"+ \"  'scan.partition.upper-bound'='2'\\n\"+ \")\");\n  Iterator<Row> collected=tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect();\n  List<String> result=CollectionUtil.iteratorToList(collected).stream().map(Row::toString).sorted().collect(Collectors.toList());\n  Set<String> expected=new HashSet<>();\n  expected.add(\"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 1.175E-10, 1.79769E40, 100.1234]\");\n  expected.add(\"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, -1.175E-10, -1.79769E40, 101.1234]\");\n  assertEquals(1,result.size());\n  assertTrue(\"The actual output is not a subset of the expected set.\",expected.containsAll(result));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 231,
        "startColumnNumber" : 16,
        "endLineNumber" : 231,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE + \" LIMIT 1\").collect()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 11,
    "type" : "org.apache.flink.table.api.TableResult"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 231,
    "startColumnNumber" : 16,
    "endLineNumber" : 231,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}